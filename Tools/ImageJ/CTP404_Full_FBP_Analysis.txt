macro "CTP404_Full_FBP_Analysis [n1]"
{
	// Run options
	slice_2_PNG = true;
	slices_2_PNG = false;
	convergence_analysis_on = true;
	gradient_analysis_on = true;
	setBatchMode(false);
	//setBatchMode(true);
	start_slice = 16;
	end_slice = 16;

	// Define path to reconstructed images and output directory names
	directory_path = getArgument();
	if( directory_path == "" )
	{
		directory_path = getDirectory("Choose a Directory");
		setBatchMode(false);
	}
	input_image_file_extension = ".txt";
	output_data_file_extension = ".csv";
	output_image_file_extension = ".png";
	FBP_input_imagename = directory_path + "FBP_image_h" + input_image_file_extension;
	image_directory = "Images\\";
	slices_directory = "Slices";
	error_column_name = "% Error";
	true_RSP_column_name = "Predicted";

	// Image and reconstruction parameters
	rows = 200;								// # of rows in images
	columns = 200;							// # of columns in images
	slices = 32;							// # of slices in images
	voxel_width = 1;
	//slice = slice;						// Slice # (starting from 0) we are interested in analyzing
	num_inserts = 8;						// # of inserts in CTP404
	insert_d = 12.2;						// diameter of inserts
	insert_r = insert_d/2;					// radius of inserts				
	voxel_2_coordinate = 0.5;

	// Profile parameters
	r_beyond_insert = 8;					// distance to extend profile beyond insert edge
	profile_r = round(insert_d)+2;			// Set distance to extend profile line left/right from insert centers
	M_profile = 2;							// Magnification factor for plot window
	lower_limits_scale = 0.95;				// Scale factor to apply to minimum value of curve to define lower axis limit
	upper_limits_scale = 1.05;				// Scale factor to apply to maximum value of curve to define upper axis limit

	// Circular selection region parameters
	r= 3.5;									// radius of circular selection region
	d= 7;									// diameter of circular selection region
	filterwidth = 3;						// Width of filter used in median filtering FBP image

	// Parameters of PNG image generated for specified slice of x
	x_magnification = 5;
	x_rows = x_magnification * rows;
	x_columns = x_magnification * columns;

	// Name and predicted RSP for each insert and array where the mean measured RSPs are to be stored
	insert_names = newArray("Air (bottom)", "Air (top)", "PMP", "LDPE", "Polystyrene", "Acrylic", "Delrin", "Teflon");
	true_RSPs = newArray(0.0013, 0.0013, 0.877, 0.9973, 1.0386, 1.155, 1.356, 1.828);

	// Coordinates of the center of inserts in specified slice for CTP404 phantom
	centersx =  newArray(        100.5,  100.5,  71.5,   41,   71.5,  129.5,  158.5,  129.5);
	centersy_offsets = newArray( 158.5,   41.5,   151,  100.5,   51,     51,  100.5,  151);
		
	for( slice = start_slice; slice <= end_slice; slice++ )
	{
		all_means = newArray();
		all_std_devs = newArray();						// Slice # (starting from 0) we are interested in analyzing
		
		// y Coordinates of the center of inserts in specified slice for CTP404 phantom
		y_upper_LHS = (slice - 1) * rows;// y-coordinate of upper left corner of slice to be analyzed
		centersy = Array.copy(centersy_offsets);
		for (i=0; i < centersy.length; i++)
			centersy[i] = centersy[i] + y_upper_LHS;

		output_directory = directory_path + "Slice_" + d2s(slice,0) + "\\";
		File.makeDirectory(output_directory);
		File.makeDirectory(output_directory);
		FBP_output_imagename = output_directory + "FBP" + output_image_file_extension;

		// File name of analysis data generated as output 
		FBP_profile_data_filename = output_directory  + "Line_Profiles_FBP" + output_data_file_extension;
		FBP_gradient_data_filename = output_directory + "Gradient_FBP" + output_data_file_extension;
		FBP_region_stats_data_filename = output_directory  + "Region_Statistics_FBP" + output_data_file_extension;
		FBP_convergences_data_filename = output_directory + "Convergence_FBP" + output_data_file_extension;
		FBP_errors_data_filename = output_directory + "Error_FBP" + output_data_file_extension;
		FBP_RSP_comparison_data_filename = output_directory + "Comparison_FBP" + output_data_file_extension;
		FBP_RSP_discrepancy_data_filename = output_directory + "Discrepancy_FBP" + output_data_file_extension;
		FBP_RSP_convergence_data_filename = output_directory + "Convergence_FBP" + output_data_file_extension;
		FBP_RSP_error_data_filename = output_directory + "Error_FBP" + output_data_file_extension;
		
		// File name of analysis plots generated as output 
		FBP_region_stats_plot_filename = output_directory  + "Region_Statistics_FBP" + output_image_file_extension;
		FBP_convergences_plot_filename = output_directory + "Convergence_FBP" + output_image_file_extension;
		FBP_errors_plot_filename = output_directory + "Error_FBP" + output_image_file_extension;
		FBP_RSP_comparison_plot_filename = output_directory + "Comparison_FBP" + output_image_file_extension;
		FBP_RSP_discrepancy_plot_filename = output_directory + "Discrepancy_FBP" + output_image_file_extension;
		FBP_RSP_convergence_plot_filename = output_directory + "Convergence_FBP" + output_image_file_extension;
		FBP_RSP_error_plot_filename = output_directory + "Error_FBP" + output_image_file_extension;

		// Base names of analysis data/images generated for each insert
		FBP_profile_plot_basename = output_directory  + "Line_Profiles_FBP_";
		FBP_gradient_plot_basename = output_directory + "Gradient_FBP_";
			
		run("Input/Output...", "jpeg=85 gif=-1 file=.csv copy_column copy_row save_column save_row");

		// Close any open images/windows, clear any results/measurements from previous analyses, and set global options
		run("Close All");
		run("Clear Results");
		
		//filename = FBP_image_basename + input_image_file_extension;
		run("Text Image... ", "open="+ FBP_input_imagename );
		run("Set Measurements...", "area mean standard min redirect=None decimal=4");
		// *************************************************************************************************************************************************************************************************//
		// Plot profile analysis: define a line across the diameter of inserts through their center, extract profile along this line, and write profile values to disk
		// *************************************************************************************************************************************************************************************************//
		for (i=0; i < num_inserts; i++)
		{
			makeLine(centersx[i] - profile_r,centersy[i] ,centersx[i] + profile_r, centersy[i] );
			getSelectionCoordinates(xpoints, ypoints);
			x_coords = newArray(xpoints[1]-xpoints[0]+1);
			x_coords[0] = ( xpoints[0]+0.5) * voxel_width;
			for( j = 1; j < x_coords.length; j++)
				x_coords[j] = x_coords[j-1] + voxel_width;
			profile = getProfile();
			true_RSP = true_RSPs[i];
			true_line = newArray(profile.length);
			Array.fill(true_line, true_RSP);
			max_RSP = 0;
			min_RSP = true_RSP;
			for (j=0; j < profile.length; j++)
			{
				setResult(j+1, i, profile[j]);
				max_RSP = maxOf(max_RSP, profile[j]);
				min_RSP = minOf(min_RSP, profile[j]);
			}
		
			profile_left_edge = (centersx[i] - profile_r + 0.5) * voxel_width ;
			profile_right_edge = (centersx[i] + profile_r + 0.5 ) * voxel_width;
			insert_left_edge = (centersx[i] - insert_r - 0.5) * voxel_width;
			insert_right_edge = (centersx[i] + insert_r  - 0.5) * voxel_width;
			center_coordinate = (centersx[i] - 0.5) * voxel_width;
				
			xmin = profile_left_edge;
			xmax = profile_right_edge;
			ymin = min_RSP - 0.05* abs(min_RSP);
			ymax = max_RSP + 0.05* abs(max_RSP);
			
			center_line_x = newArray(2);
			Array.fill(center_line_x, center_coordinate);
			center_line_y = newArray(ymin, ymax);
			left_edge_line = newArray(insert_left_edge, insert_left_edge );
			right_edge_line = newArray(insert_right_edge, insert_right_edge );	
			ref_line_x = newArray(profile_left_edge, insert_left_edge, insert_left_edge, insert_right_edge, insert_right_edge, profile_right_edge);
			ref_line_y = newArray(1.0, 1.0, true_RSP, true_RSP, 1.0, 1.0);
				
			title = "Line profile for " + insert_names[i] + " in slice " +  d2s(slice, 0) + " of FBP image";
			Plot.create(title, "x [mm]",  "RSP(x)", x_coords, profile );
			Plot.setLimits(xmin, xmax, ymin, ymax);
			Plot.setFrameSize(900, 400);
			Plot.setLineWidth(2);
			Plot.addText(title, 0.5, 0);
			Plot.setColor("green");
			Plot.add("line", ref_line_x, ref_line_y);
			Plot.setColor("yellow");
			Plot.add("line", center_line_x, center_line_y);
			Plot.setColor("red"); 
			Plot.setJustification("center");
			Plot.show();		
			saveAs( FBP_profile_plot_basename + insert_names[i] + output_image_file_extension);
			close();
		}//end for i = [0,num inserts]
		saveAs("Measurements", FBP_profile_data_filename);
		//saveAs("Results", FBP_profile_data_filename);
		run("Clear Results");
		
		// *************************************************************************************************************************************************************************************************//
		// Calculate area, mean, min, max, standard deviation, predicted RSP, and % discrepancy in circulr selection inside each insert
		// *************************************************************************************************************************************************************************************************//
		means = newArray();
		std_devs = newArray();
		for (i=0; i < num_inserts; i++)
		{
			makeOval(centersx[i]-r, centersy[i]-r, d, d);
			run("Measure");
			List.setMeasurements;
			mean_val = List.getValue("Mean");
			std_dev = List.getValue("StdDev");
			means = Array.concat(means, mean_val );	
			std_devs = Array.concat(std_devs, std_dev );	
			setResult(true_RSP_column_name, i, true_RSPs[i]);
			if( startsWith(insert_names[i], "Air"))
				setResult(error_column_name, i, (mean_val - true_RSPs[i])/mean_val*100);
			else
				setResult(error_column_name, i, (mean_val - true_RSPs[i])/true_RSPs[i]*100);
		}
		all_means = Array.concat(all_means, means );
		all_std_devs = Array.concat(all_std_devs, std_devs );
		//saveAs("Results", FBP_region_stats_data_filename);
		saveAs("Measurements", FBP_region_stats_data_filename);
		run("Clear Results");
		// *************************************************************************************************************************************************************************************************//
		// Plot predicted vs. measured RSP and write the resulting image to disk as PNG
		// *************************************************************************************************************************************************************************************************//
		title = "Predicted vs. Measured RSP for slice " +  d2s(slice, 0) + " of FBP image";
		Plot.create(title, "Measured RSP",  "Predicted RSP", means, true_RSPs );
		Plot.setLimits(0, true_RSPs[7], 0, true_RSPs[7]);
		Plot.setFrameSize(900, 400);
		//"line", "circles", "boxes", "triangles", "crosses", "dots", "x" or "error bars". 
		Plot.setLineWidth(3);
		Plot.setColor("black");
		Plot.add("circles", means, true_RSPs);
		Plot.setLineWidth(2);
		Plot.setColor("black");
		Plot.addText(title, 0.5, 0);
		Plot.setColor("green");
		Plot.add("line", true_RSPs, true_RSPs);
		Plot.setLineWidth(3);
		Plot.setColor("blue");
		Plot.add("circles", true_RSPs, true_RSPs);
		Plot.setLineWidth(2);
		Plot.add("error bars", means, std_devs);
		Plot.setColor("red");
		Plot.setJustification("center");
		Plot.show();
		saveAs( FBP_RSP_comparison_plot_filename);
		close();
		run("Clear Results");
		// *************************************************************************************************************************************************************************************************//
		// Plot % discrepancy between predicted and measured RSP vs. predicted RSP and write the resulting image to disk as PNG
		// *************************************************************************************************************************************************************************************************//
		zero_line = newArray(true_RSPs.length - 2);
		Array.fill(zero_line, 0);
		percent_discrepancy = newArray(true_RSPs.length-2);
		means_4_discrepancy = newArray(true_RSPs.length-2);
		for( n = 2; n < num_inserts; n++ )
		{
			percent_discrepancy[n-2] = (means[n]-true_RSPs[n]) /true_RSPs[n]*100;
			means_4_discrepancy[n-2] = true_RSPs[n];
		}
		Array.getStatistics(percent_discrepancy, min_discrepancy, max_discrepancy, mean, stdDev);
		
		title = "% Discrepancy between predicted RSP and FBP image RSP for slice " +  d2s(slice, 0);
		Plot.create(title, "Predicted RSP", "[(Measured RSP - Predicted RSP) / Predicted RSP] * 100 [%]",   means_4_discrepancy, percent_discrepancy);
		Plot.setLimits(true_RSPs[2], true_RSPs[7], min_discrepancy, max_discrepancy);
		Plot.setFrameSize(900, 400);
		//"line", "circles", "boxes", "triangles", "crosses", "dots", "x" or "error bars". 
		Plot.setLineWidth(5);
		Plot.setColor("blue");
		Plot.add("circles", means_4_discrepancy, percent_discrepancy);
		Plot.setLineWidth(2);
		Plot.setColor("black");
		Plot.addText(title, 0.5, 0);
		Plot.setColor("green");
		Plot.add("line", means_4_discrepancy, zero_line);	
		Plot.setLineWidth(2);
		Plot.setColor("red");	
		Plot.setJustification("center");
		Plot.show();
		saveAs( FBP_RSP_discrepancy_plot_filename);
		close();
		run("Clear Results");
		// *************************************************************************************************************************************************************************************************//
		// Extract and save PNG of the slice of x being analysed
		// *************************************************************************************************************************************************************************************************//
		if( slice_2_PNG )
		{
			makeRectangle( 0, y_upper_LHS, columns, rows);
			//imageCalculator("Copy create", filename ,filename );
			//run("Enhance Contrast", "saturated=0.35");
			run("Duplicate...", "title=" + FBP_output_imagename + output_image_file_extension);
			setMinAndMax(0.000,1.90);
			run("Flip Horizontally");
			run("Size...", "width=x_columns height=x_rows constrain average interpolation=Bilinear");
			saveAs("PNG", FBP_output_imagename);	
			close();
		}
		// *************************************************************************************************************************************************************************************************//
		// Gradient analysis by applying Sobel operator to initial image and extract gradient profile along the same line as initial profile
		// *************************************************************************************************************************************************************************************************//
		if( gradient_analysis_on )
		{
			// Close any open images/windows, clear any results/measurements from previous analyses, and set global options
			run("Close All");
			run("Clear Results");
			run("Text Image... ", "open="+ FBP_input_imagename );
			run("Set Measurements...", "area mean standard min redirect=None decimal=4");
			run("Convolve...", "text1=[-1 0 1\n-2 0 2\n-1 0 1\n] normalize"); // Sobel x
			//run("Convolve...", "text1=[-1 -2 -1\n0 0 0\n1 2 1\n]"); // Sobel y
			// *************************************************************************************************************************************************************************************************//
			// Plot profile analysis: define a line across the diameter of inserts through their center, extract profile along this line, and write profile values to disk
			// *************************************************************************************************************************************************************************************************//
			for (i=0; i < num_inserts; i++)
			{	
				makeLine(centersx[i] - profile_r,centersy[i] ,centersx[i] + profile_r , centersy[i] );
				getSelectionCoordinates(xpoints, ypoints);
				gradient = getProfile();
				x_coords = newArray(gradient.length);
				x_coords[0] = ( xpoints[0] + 0.5) * voxel_width;
				for( j = 1; j < x_coords.length; j++)
					x_coords[j] = x_coords[j-1] + voxel_width;
				max_gradient = 0;
				min_gradient = 100;
				for (j=0; j < gradient.length; j++)
				{
					setResult(j+1, i, gradient[j]);
					max_gradient = maxOf(max_gradient, gradient[j]);
					min_gradient = minOf(min_gradient, gradient[j]);
				}
				profile_left_edge = (centersx[i] - profile_r + 0.5) * voxel_width ;
				profile_right_edge = (centersx[i] + profile_r + 0.5) * voxel_width;
				insert_left_edge = (centersx[i] - insert_r- 0.5) * voxel_width;
				insert_right_edge = (centersx[i] + insert_r- 0.5) * voxel_width;
				center_coordinate = (centersx[i]- 0.5) * voxel_width;				
				center_line_x = newArray(2);
				Array.fill(center_line_x, center_coordinate);
				center_line_y = newArray(ymin, ymax);
				left_edge_line = newArray(insert_left_edge, insert_left_edge );
				right_edge_line = newArray(insert_right_edge, insert_right_edge );
				
				xmin = profile_left_edge;
				xmax = profile_right_edge;
				ymin = min_gradient - 0.05* abs(min_gradient);
				ymax = max_gradient + 0.05* abs(max_gradient);
				
				title = "Line gradient for " + insert_names[i] + " in slice " +  d2s(slice, 0) + " of FBP image" ;
				Plot.create(title, "x [mm]",  "d/dx[RSP(x)])", x_coords, gradient);
				Plot.setLimits(xmin, xmax, ymin, ymax);
				Plot.setFrameSize(900, 400);
				Plot.setLineWidth(2);
				Plot.addText(title, 0.5, 0);
				Plot.setColor("green");
				Plot.add("line", left_edge_line, newArray(ymin,ymax ));
				Plot.add("line", right_edge_line, newArray(ymin,ymax ));
				Plot.setColor("yellow");
				Plot.add("line", center_line_x, center_line_y);
				Plot.setColor("red"); 
				Plot.setJustification("center");
				Plot.show();
				saveAs( FBP_gradient_plot_basename + insert_names[i] + output_image_file_extension);
				close();
			}//end for i = [0,num inserts]
			saveAs("Measurements", FBP_gradient_data_filename);
			//saveAs("Results", FBP_gradient_data_filename);
			run("Clear Results");
		}//end if(gradient_analysis_on)
	}//end for( slice = start_slice; slice <= end_slice; slice++ )
}//end macro
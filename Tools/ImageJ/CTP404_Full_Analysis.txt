macro "CTP404_Full_Analysis"
{
// Run options
slice_2_PNG = true;
slices_2_PNG = false;
convergence_analysis_on = true;
gradient_analysis_on = true;
//setBatchMode(false);
setBatchMode(true);

// Image and reconstruction parameters
iterations = 12;						// # of iterations to analyze from image reconstruction
rows = 200;								// # of rows in images
columns = 200;							// # of columns in images
slices = 32;							// # of slices in images
voxel_width = 1;
//slice_focus = slice;						// Slice # (starting from 0) we are interested in analyzing
num_inserts = 8;						// # of inserts in CTP404
insert_d = 12.2;						// diameter of inserts
insert_r = insert_d/2;					// radius of inserts				
voxel_2_coordinate = 0.5;

start_slice = 13;
end_slice = 20;

// Define path to reconstructed images and output directory names
directory_path = getArgument();
if( directory_path == "" )
{
	directory_path = getDirectory("Choose a Directory");
	//setBatchMode(false);
}
image_basename = "x_";
input_image_file_extension = ".txt";
output_data_file_extension = ".csv";
output_image_file_extension = ".png";
image_directory = "Images\\";
slices_directory = "Slices";
error_column_name = "% Error";
true_RSP_column_name = "Predicted";



// Profile parameters
r_beyond_insert = 8;					// distance to extend profile beyond insert edge
profile_r = round(insert_d)+2;			// Set distance to extend profile line left/right from insert centers
M_profile = 2;							// Magnification factor for plot window
lower_limits_scale = 0.95;				// Scale factor to apply to minimum value of curve to define lower axis limit
upper_limits_scale = 1.05;				// Scale factor to apply to maximum value of curve to define upper axis limit

// Circular selection region parameters
r= 3.5;									// radius of circular selection region
d= 7;									// diameter of circular selection region
filterwidth = 3;						// Width of filter used in median filtering FBP image

// Parameters of PNG image generated for specified slice of x
x_magnification = 5;
x_rows = x_magnification * rows;
x_columns = x_magnification * columns;

for( iteration_check = 0; iteration_check <= iterations; iteration_check++ )
{
	if( !File.exists( directory_path + image_basename + d2s(iteration_check,0) + input_image_file_extension ) )
		iterations = iteration_check - 1;
}

// Name and predicted RSP for each insert and array where the mean measured RSPs are to be stored
insert_names = newArray("Air (bottom)", "Air (top)", "PMP", "LDPE", "Polystyrene", "Acrylic", "Delrin", "Teflon");
true_RSPs = newArray(0.0013, 0.0013, 0.877, 0.9973, 1.0386, 1.155, 1.356, 1.828);

for( slice = start_slice; slice <= end_slice; slice++ )
{
all_means = newArray();
all_std_devs = newArray();
slice_focus = slice;						// Slice # (starting from 0) we are interested in analyzing
y_upper_LHS = (slice_focus - 1) * rows;// y-coordinate of upper left corner of slice to be analyzed

// Coordinates of the center of inserts in specified slice for CTP404 phantom
centersx =  newArray(        100.5,  100.5,  71.5,   41,   71.5,  129.5,  158.5,  129.5);
centersy_offsets = newArray( 158.5,   41.5,   151,  100.5,   51,     51,  100.5,  151);
centersy = Array.copy(centersy_offsets);
for (i=0; i < centersy.length; i++)
	centersy[i] = centersy[i] + y_upper_LHS;


output_directory = directory_path + "Slice_" + d2s(slice_focus,0) + "\\";
File.makeDirectory(output_directory);

// Analysis output file names
profile_basename = output_directory  + "Line_Profiles_";
profile_plot_basename = output_directory  + "Line_Profile_Plot_";
Fourier_plot_basename  = output_directory  + "Fourier_Plot_";
regions_basename = output_directory  + "Region_Statistics_";
RSP_comparison_basename = output_directory + "Comparison_";
RSP_discrepancy_basename = output_directory + "Discrepancy_";
RSP_convergence_basename = output_directory + "Convergence_";
RSP_error_basename = output_directory + "Error_";
convergences_basename = output_directory + "Convergence";
errors_basename = output_directory + "Error";
gradient_basename = output_directory + "Gradient_";
gradient_plot_basename = output_directory + "Gradient_Plot_";

run("Input/Output...", "jpeg=85 gif=-1 file=.csv copy_column copy_row save_column save_row");
for (iteration=0; iteration <= iterations; iteration++)
{
	// Close any open images/windows, clear any results/measurements from previous analyses, and set global options
	run("Close All");
	run("Clear Results");
	
	iteration_string = d2s(iteration,0 );
	basename= "x_" + iteration_string;
	filename = basename + ".txt";
	run("Text Image... ", "open="+ directory_path + filename );
	run("Set Measurements...", "area mean standard min redirect=None decimal=4");
	// *************************************************************************************************************************************************************************************************//
	// Plot profile analysis: define a line across the diameter of inserts through their center, extract profile along this line, and write profile values to disk
	// *************************************************************************************************************************************************************************************************//
	for (i=0; i < num_inserts; i++)
	{
		makeLine(centersx[i] - profile_r,centersy[i] ,centersx[i] + profile_r, centersy[i] );
		getSelectionCoordinates(xpoints, ypoints);
		x_coords = newArray(xpoints[1]-xpoints[0]+1);
		x_coords[0] = ( xpoints[0]+0.5) * voxel_width;
		for( j = 1; j < x_coords.length; j++)
			x_coords[j] = x_coords[j-1] + voxel_width;

		profile = getProfile();
		true_RSP = true_RSPs[i];
		true_line = newArray(profile.length);
		Array.fill(true_line, true_RSP);
		max_RSP = 0;
		min_RSP = true_RSP;
		for (j=0; j < profile.length; j++)
		{
			setResult(j+1, i, profile[j]);
			max_RSP = maxOf(max_RSP, profile[j]);
			min_RSP = minOf(min_RSP, profile[j]);
		}
	
		profile_left_edge = (centersx[i] - profile_r + 0.5) * voxel_width ;
		profile_right_edge = (centersx[i] + profile_r + 0.5 ) * voxel_width;
		insert_left_edge = (centersx[i] - insert_r - 0.5) * voxel_width;
		insert_right_edge = (centersx[i] + insert_r  - 0.5) * voxel_width;
		center_coordinate = (centersx[i] - 0.5) * voxel_width;
			
		xmin = profile_left_edge;
		xmax = profile_right_edge;
		ymin = min_RSP - 0.05* abs(min_RSP);
		ymax = max_RSP + 0.05* abs(max_RSP);
		
		center_line_x = newArray(2);
		Array.fill(center_line_x, center_coordinate);
		center_line_y = newArray(ymin, ymax);

		left_edge_line = newArray(insert_left_edge, insert_left_edge );
		right_edge_line = newArray(insert_right_edge, insert_right_edge );	
		ref_line_x = newArray(profile_left_edge, insert_left_edge, insert_left_edge, insert_right_edge, insert_right_edge, profile_right_edge);
		ref_line_y = newArray(1.0, 1.0, true_RSP, true_RSP, 1.0, 1.0);
		
		title = "Line profile for " + insert_names[i] + " in slice " +  d2s(slice, 0) + " after " + iteration_string + " iterations";
		Plot.create(title, "x [mm]",  "RSP(x)", x_coords, profile );
		Plot.setLimits(xmin, xmax, ymin, ymax);
		Plot.setFrameSize(900, 400);
		Plot.setLineWidth(2);
		Plot.addText(title, 0.5, 0);
		Plot.setColor("green");
		Plot.add("line", ref_line_x, ref_line_y);
		Plot.setColor("yellow");
		Plot.add("line", center_line_x, center_line_y);
		Plot.setColor("red"); 
		Plot.setJustification("center");
		Plot.show();
		
		profile_plot_filename = profile_plot_basename + insert_names[i] + "_" + basename + ".png";		
		saveAs( profile_plot_filename);
		close();
	}//end for i = [0,num inserts]
	profile_filename = profile_basename + basename + ".csv";
	saveAs("Measurements", profile_filename);
	//saveAs("Results", profile_plot_filename);
	run("Clear Results");
	
	// *************************************************************************************************************************************************************************************************//
	// Select circular region inside each insert, calculate its area and the mean, min, max, and standard deviation of RSP values inside this region and write results to disk
	// *************************************************************************************************************************************************************************************************//
	means = newArray();
	std_devs = newArray();
	for (i=0; i < num_inserts; i++)
	{
		makeOval(centersx[i]-r, centersy[i]-r, d, d);
		run("Measure");
		List.setMeasurements;
		mean_val = List.getValue("Mean");
		std_dev = List.getValue("StdDev");
		means = Array.concat(means, mean_val );	
		std_devs = Array.concat(std_devs, std_dev );	
	}
	all_means = Array.concat(all_means, means );
	all_std_devs = Array.concat(all_std_devs, std_devs );
	regions_filename = regions_basename + basename + ".csv";
	//saveAs("Results", regions_filename);
	saveAs("Measurements", regions_filename);
	run("Clear Results");
	
	// *************************************************************************************************************************************************************************************************//
	// Plot predicted vs. measured RSP and write the resulting image to disk as PNG
	// *************************************************************************************************************************************************************************************************//
	title = "Predicted vs. Measured RSP after " + iteration_string + " iterations" + " for slice " +  d2s(slice, 0);
	//Plot.create(title, "Measured RSP",  "Predicted RSP", true_RSPs, true_RSPs );
	Plot.create(title, "Measured RSP",  "Predicted RSP", means, true_RSPs );
	Plot.setLimits(0, true_RSPs[7], 0, true_RSPs[7]);
	Plot.setFrameSize(900, 400);
	//"line", "circles", "boxes", "triangles", "crosses", "dots", "x" or "error bars". 
	Plot.setLineWidth(3);
	Plot.setColor("black");
	Plot.add("circles", means, true_RSPs);
	Plot.setLineWidth(2);
	Plot.setColor("black");
	Plot.addText(title, 0.5, 0);
	Plot.setColor("green");
	Plot.add("line", true_RSPs, true_RSPs);
	Plot.setLineWidth(3);
	Plot.setColor("blue");
	Plot.add("circles", true_RSPs, true_RSPs);
	Plot.setLineWidth(2);
	Plot.add("error bars", means, std_devs);
	Plot.setColor("red");
	Plot.setJustification("center");
	Plot.show();
	RSP_comparison_filename = RSP_comparison_basename + basename + ".png";
	saveAs( RSP_comparison_filename);
	close();
	run("Clear Results");
	// *************************************************************************************************************************************************************************************************//
	// Plot % discrepancy between predicted and measured RSP vs. predicted RSP and write the resulting image to disk as PNG
	// *************************************************************************************************************************************************************************************************//
	zero_line = newArray(true_RSPs.length - 2);
	Array.fill(zero_line, 0);
	percent_discrepancy = newArray(true_RSPs.length-2);
	means_4_discrepancy = newArray(true_RSPs.length-2);
	for( n = 2; n < num_inserts; n++ )
	{
		percent_discrepancy[n-2] = (means[n]-true_RSPs[n]) /true_RSPs[n]*100;
		means_4_discrepancy[n-2] = true_RSPs[n];
	}
	Array.getStatistics(percent_discrepancy, min_discrepancy, max_discrepancy, mean, stdDev);
	
	title = "% Discrepancy between reconstructed and predicted RSP after " + iteration_string + " iterations" + " for slice " +  d2s(slice, 0);
	Plot.create(title, "Predicted RSP", "[(Measured RSP - Predicted RSP) / Predicted RSP] * 100 [%]",   means_4_discrepancy, percent_discrepancy);
	Plot.setLimits(true_RSPs[2], true_RSPs[7], min_discrepancy, max_discrepancy);
	Plot.setFrameSize(900, 400);
	//"line", "circles", "boxes", "triangles", "crosses", "dots", "x" or "error bars". 
	Plot.setLineWidth(5);
	Plot.setColor("blue");
	Plot.add("circles", means_4_discrepancy, percent_discrepancy);
	Plot.setLineWidth(2);
	Plot.setColor("black");
	Plot.addText(title, 0.5, 0);
	Plot.setColor("green");
	Plot.add("line", means_4_discrepancy, zero_line);	
	Plot.setLineWidth(2);
	Plot.setColor("red");	
	Plot.setJustification("center");
	Plot.show();
	RSP_discrepancy_filename = RSP_discrepancy_basename + basename + ".png";
	saveAs( RSP_discrepancy_filename);
	close();
	run("Clear Results");
	// *************************************************************************************************************************************************************************************************//
	// Extract and save PNG of the slice of x being analysed
	// *************************************************************************************************************************************************************************************************//
	if( slice_2_PNG )
	{
		makeRectangle( 0, y_upper_LHS, columns, rows);
		//imageCalculator("Copy create", filename ,filename );
		//run("Enhance Contrast", "saturated=0.35");
		run("Duplicate...", "title=" + basename + ".png");
		setMinAndMax(0.000,1.90);
		run("Flip Horizontally");
		run("Size...", "width=x_columns height=x_rows constrain average interpolation=Bilinear");
		saveAs("PNG", output_directory + basename + ".png");	
		close();
	}
}//end for iteration = [0,iterations]
// *************************************************************************************************************************************************************************************************//
// Plots of the convergence of RSP values as a function of iteration
// *************************************************************************************************************************************************************************************************//
run("Clear Results");
if( convergence_analysis_on )
{
	convergences = newArray();
	errors = newArray();
	for (i=0; i < num_inserts; i++)
	{
		// Create arrays for convergence/error plots and the Predicted RSP/zero error lines these should approach
		convergence = newArray();
		error = newArray();
		true_RSP = true_RSPs[i];
		
		// Determine bounds of RSPs to aid in defining the plot bounds
		max_RSP = 0;
		min_RSP = true_RSP;
		max_error = 0;
		min_error = -true_RSP;
		for (j=0; j <= iterations; j++)
		{
			mean = all_means[num_inserts * j + i];
			convergence = Array.concat(convergence, mean );
			error = Array.concat(error, mean - true_RSP );
			max_RSP = maxOf(max_RSP, mean);
			min_RSP = minOf(min_RSP, mean);
			max_error = maxOf(max_error, abs(mean - true_RSP));
			min_error = minOf(min_RSP, mean - true_RSP);
		}	
		// Accumulate convergence and error as a function of iteration for each insert into single array
		convergences = Array.concat(convergences, convergence );
		errors = Array.concat(errors, error );
		
		true_line = newArray(iterations + 1);
		Array.fill(true_line, true_RSP);
		zero_line = newArray(iterations + 1);
		Array.fill(zero_line, 0 );
		// *************************************************************************************************************************************************************************************************//
		// Plots of (1) the convergence of RSP values and (2) the error between predicted and reconstructed RSPs, both as a function of iteration
		// *************************************************************************************************************************************************************************************************//
		title = "Convergence of mean RSP as a function of iteration for " + insert_names[i] + " in slice " +  d2s(slice, 0);
		Plot.create(title, "i [Iteration #]", "Mean RSP(i)", convergence );
		//Plot.getValues(xpoints, ypoints);
		Plot.setLimits(0, iterations, minOf(true_RSP, min_RSP)*lower_limits_scale, maxOf(true_RSP, max_RSP)*upper_limits_scale);
		Plot.setFrameSize(900, 400);
		Plot.setLineWidth(2);
		Plot.addText(title, 0.5, 0);
		Plot.setFrameSize(900, 400);
		Plot.setColor("green");
		Plot.add("line", true_line);
		Plot.setColor("red");
		Plot.setJustification("center");
		Plot.show();
		RSP_convergence_filename = RSP_convergence_basename + insert_names[i] + ".png";
		saveAs( RSP_convergence_filename);	
		close();
		// *************************************************************************************************************************************************************************************************//
		// Plots of the error between predicted and reconstructed RSPs as a function of iteration
		// *************************************************************************************************************************************************************************************************//
		title = "Difference between predicted and Predicted RSP as a function of iteration for " + insert_names[i] + " in slice " +  d2s(slice, 0);
		Plot.create( title, "i [Iteration #]", "Mean RSP(i) - Predicted RSP(i)", error );
		//Plot.setLimits(0, iterations+1, (true_RSP - min_RSP)*0.95, (true_RSP - max_RSP)*1.05);
		Plot.setLimits(0, iterations, -max_error*lower_limits_scale, max_error*upper_limits_scale);
		Plot.setFrameSize(900, 400);
		Plot.setLineWidth(2);
		Plot.addText(title, 0.5, 0);
		Plot.setColor("green");
		Plot.add("line", zero_line);
		Plot.setColor("red");
		Plot.setJustification("center");
		Plot.show();
		RSP_error_filename = RSP_error_basename + insert_names[i] + ".png";
		saveAs( RSP_error_filename);
		close();
	}//end for i = [0,num inserts]

	// *************************************************************************************************************************************************************************************************//
	// Write mean RSP as a function of iteration to separate rows of a CSV file
	// *************************************************************************************************************************************************************************************************//
	for( i = 0; i < num_inserts; i++)
		for (j=0; j<=iterations; j++)
			setResult(j, i, convergences[i * (iterations + 1) + j]);	
	convergences_filename = convergences_basename + ".csv";
	saveAs("Measurements", convergences_filename);
	run("Clear Results");
	// *************************************************************************************************************************************************************************************************//
	// Write difference between true and calculated mean RSP as a function of iteration to separate rows of a CSV file
	// *************************************************************************************************************************************************************************************************//
	for( i = 0; i < num_inserts; i++)
		for (j=0; j<=iterations; j++)
			setResult(j, i, errors[i * (iterations + 1) + j]);			
	errors_filename = errors_basename + ".csv";
	saveAs("Measurements", errors_filename);
	run("Clear Results");
	// *************************************************************************************************************************************************************************************************//
	// Add % Error column to Regions_Statistics CSV file
	// *************************************************************************************************************************************************************************************************//
	for( iteration = 0; iteration <= iterations; iteration++ )
	{
		open(regions_filename);
		for( i = 0; i < num_inserts; i++)
		{
			setResult(true_RSP_column_name, i, true_RSPs[i]);
			if( startsWith(insert_names[i], "Air"))
				setResult(error_column_name, i, errors[i * (iterations + 1) + iteration]/convergences[i * (iterations + 1) + iteration]*100);
			else
				setResult(error_column_name, i, errors[i * (iterations + 1) + iteration]/convergences[i * (iterations + 1) + iteration]*100);
		}
		iteration_string = d2s(iteration,0 );
		basename= "x_" + iteration_string;
		regions_filename = regions_basename + basename + ".csv";
		saveAs("Results", regions_filename);
		run("Clear Results");
	}
}//end if(convergence_analysis_on)
// *************************************************************************************************************************************************************************************************//
// Gradient analysis by applying Sobel operator to initial image and extract gradient profile along the same line as initial profile
// *************************************************************************************************************************************************************************************************//
if( gradient_analysis_on )
{
	for (iteration=0; iteration <= iterations; iteration++)
	{
		// Close any open images/windows, clear any results/measurements from previous analyses, and set global options
		run("Close All");
		run("Clear Results");
		
		iteration_string = d2s(iteration,0 );
		basename= "x_" + iteration_string;
		filename = basename + ".txt";
		run("Text Image... ", "open="+ directory_path + filename );
		run("Set Measurements...", "area mean standard min redirect=None decimal=4");
		run("Convolve...", "text1=[-1 0 1\n-2 0 2\n-1 0 1\n] normalize"); // Sobel x
		//run("Convolve...", "text1=[-1 -2 -1\n0 0 0\n1 2 1\n]"); // Sobel y
		// *************************************************************************************************************************************************************************************************//
		// Plot profile analysis: define a line across the diameter of inserts through their center, extract profile along this line, and write profile values to disk
		// *************************************************************************************************************************************************************************************************//
		for (i=0; i < num_inserts; i++)
		{	
			makeLine(centersx[i] - profile_r,centersy[i] ,centersx[i] + profile_r , centersy[i] );
			getSelectionCoordinates(xpoints, ypoints);
			gradient = getProfile();
			x_coords = newArray(gradient.length);
			x_coords[0] = ( xpoints[0] + 0.5) * voxel_width;
			for( j = 1; j < x_coords.length; j++)
				x_coords[j] = x_coords[j-1] + voxel_width;
			max_gradient = 0;
			min_gradient = 100;
			for (j=0; j < gradient.length; j++)
			{
				setResult(j+1, i, gradient[j]);
				max_gradient = maxOf(max_gradient, gradient[j]);
				min_gradient = minOf(min_gradient, gradient[j]);
			}
		
			profile_left_edge = (centersx[i] - profile_r + 0.5) * voxel_width ;
			profile_right_edge = (centersx[i] + profile_r + 0.5) * voxel_width;
			insert_left_edge = (centersx[i] - insert_r- 0.5) * voxel_width;
			insert_right_edge = (centersx[i] + insert_r- 0.5) * voxel_width;
			center_coordinate = (centersx[i]- 0.5) * voxel_width;

			xmin = profile_left_edge;
			xmax = profile_right_edge;
			ymin = min_gradient - 0.05* abs(min_gradient);
			ymax = max_gradient + 0.05* abs(max_gradient);
			
			center_line_x = newArray(2);
			Array.fill(center_line_x, center_coordinate);
			center_line_y = newArray(ymin, ymax);
			left_edge_line = newArray(insert_left_edge, insert_left_edge );
			right_edge_line = newArray(insert_right_edge, insert_right_edge );
			
			title = "Line gradient for " + insert_names[i] + " in slice " +  d2s(slice, 0) + " after " + iteration_string + " iterations" ;
			Plot.create(title, "x [mm]",  "d/dx[RSP(x)])", x_coords, gradient);
			Plot.setLimits(xmin, xmax, ymin, ymax);
			Plot.setFrameSize(900, 400);
			Plot.setLineWidth(2);
			Plot.addText(title, 0.5, 0);
			Plot.setColor("green");
			Plot.add("line", left_edge_line, newArray(ymin,ymax ));
			Plot.add("line", right_edge_line, newArray(ymin,ymax ));
			Plot.setColor("yellow");
			Plot.add("line", center_line_x, center_line_y);
			Plot.setColor("red"); 
			Plot.setJustification("center");
			Plot.show();
			gradient_plot_filename = gradient_plot_basename + insert_names[i] + "_" + basename + ".png";		
			saveAs( gradient_plot_filename);
			close();
		}//end for i = [0,num inserts]
		gradient_filename = gradient_basename + basename + ".csv";
		saveAs("Measurements", gradient_filename);
		//saveAs("Results", gradient_plot_filename);
		run("Clear Results");
		
	}//end for iteration = [0,num inserts]
}//end if(gradient_analysis_on)
}//end for( slice = start_slice; slice <= end_slice; slice++ )
}//end macro
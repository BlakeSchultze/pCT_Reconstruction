#line 1 "C:/Users/Blake/Documents/GitHub/pct-reconstruction/pCT_Reconstruction.cu"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v6.0\\include\\cuda_runtime.h"


























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\host_config.h"

































































#line 67 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\host_config.h"









#line 77 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\host_config.h"









#line 87 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\host_config.h"







#line 95 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\host_config.h"

#line 97 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\host_config.h"













#line 111 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\host_config.h"




#line 116 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\host_config.h"





#line 122 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\host_config.h"







#line 130 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\host_config.h"





#line 136 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\host_config.h"





#line 142 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\host_config.h"





#line 148 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\host_config.h"

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"














 





#line 22 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"
#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"


















#line 42 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"



#line 46 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"










#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\sal.h"














#pragma once



































































































































#line 148 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\sal.h"





#line 154 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\sal.h"



#line 158 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\sal.h"


#line 1 "c:\\program files (x86)\\microsoft visual studio 10.0\\vc\\include\\codeanalysis\\sourceannotations.h"












#pragma once






#line 21 "c:\\program files (x86)\\microsoft visual studio 10.0\\vc\\include\\codeanalysis\\sourceannotations.h"

#line 23 "c:\\program files (x86)\\microsoft visual studio 10.0\\vc\\include\\codeanalysis\\sourceannotations.h"
#line 24 "c:\\program files (x86)\\microsoft visual studio 10.0\\vc\\include\\codeanalysis\\sourceannotations.h"



typedef unsigned __int64    size_t;


#line 31 "c:\\program files (x86)\\microsoft visual studio 10.0\\vc\\include\\codeanalysis\\sourceannotations.h"

#line 33 "c:\\program files (x86)\\microsoft visual studio 10.0\\vc\\include\\codeanalysis\\sourceannotations.h"
















#line 50 "c:\\program files (x86)\\microsoft visual studio 10.0\\vc\\include\\codeanalysis\\sourceannotations.h"


namespace vc_attributes
{
#line 55 "c:\\program files (x86)\\microsoft visual studio 10.0\\vc\\include\\codeanalysis\\sourceannotations.h"

enum YesNoMaybe
{
	
	No = 0x0fff0001,
	Maybe = 0x0fff0010,
	Yes = 0x0fff0100
};

typedef enum YesNoMaybe YesNoMaybe;

enum AccessType
{
	NoAccess = 0,
	Read = 1,
	Write = 2,
	ReadWrite = 3
};

typedef enum AccessType AccessType;



[repeatable]
[source_annotation_attribute( Parameter )]
struct PreAttribute
{

	PreAttribute();
#line 85 "c:\\program files (x86)\\microsoft visual studio 10.0\\vc\\include\\codeanalysis\\sourceannotations.h"

	unsigned int Deref;
	YesNoMaybe Valid;
	YesNoMaybe Null;
	YesNoMaybe Tainted;
	AccessType Access;
	size_t ValidElementsConst;
	size_t ValidBytesConst;
	const wchar_t* ValidElements;
	const wchar_t* ValidBytes;
	const wchar_t* ValidElementsLength;
	const wchar_t* ValidBytesLength;
	size_t WritableElementsConst;
	size_t WritableBytesConst;
	const wchar_t* WritableElements;
	const wchar_t* WritableBytes;
	const wchar_t* WritableElementsLength;
	const wchar_t* WritableBytesLength;
	size_t ElementSizeConst;
	const wchar_t* ElementSize;
	YesNoMaybe NullTerminated;
	const wchar_t* Condition;
};

[repeatable]
[source_annotation_attribute( Parameter|ReturnValue )]
struct PostAttribute
{

	PostAttribute();
#line 116 "c:\\program files (x86)\\microsoft visual studio 10.0\\vc\\include\\codeanalysis\\sourceannotations.h"

	unsigned int Deref;
	YesNoMaybe Valid;
	YesNoMaybe Null;
	YesNoMaybe Tainted;
	AccessType Access;
	size_t ValidElementsConst;
	size_t ValidBytesConst;
	const wchar_t* ValidElements;
	const wchar_t* ValidBytes;
	const wchar_t* ValidElementsLength;
	const wchar_t* ValidBytesLength;
	size_t WritableElementsConst;
	size_t WritableBytesConst;
	const wchar_t* WritableElements;
	const wchar_t* WritableBytes;
	const wchar_t* WritableElementsLength;
	const wchar_t* WritableBytesLength;
	size_t ElementSizeConst;
	const wchar_t* ElementSize;
	YesNoMaybe NullTerminated;
	YesNoMaybe MustCheck;
	const wchar_t* Condition;
};

[source_annotation_attribute( Parameter )]
struct FormatStringAttribute
{

	FormatStringAttribute();
#line 147 "c:\\program files (x86)\\microsoft visual studio 10.0\\vc\\include\\codeanalysis\\sourceannotations.h"

	const wchar_t* Style;
	const wchar_t* UnformattedAlternative;
};

[repeatable]
[source_annotation_attribute( ReturnValue )]
struct InvalidCheckAttribute
{

	InvalidCheckAttribute();
#line 159 "c:\\program files (x86)\\microsoft visual studio 10.0\\vc\\include\\codeanalysis\\sourceannotations.h"

	long Value;
};

[source_annotation_attribute( Method )]
struct SuccessAttribute
{

	SuccessAttribute();
#line 169 "c:\\program files (x86)\\microsoft visual studio 10.0\\vc\\include\\codeanalysis\\sourceannotations.h"

	const wchar_t* Condition;
};

[repeatable]
[source_annotation_attribute( Parameter )]
struct PreBoundAttribute
{

	PreBoundAttribute();
#line 180 "c:\\program files (x86)\\microsoft visual studio 10.0\\vc\\include\\codeanalysis\\sourceannotations.h"
	unsigned int Deref;
};

[repeatable]
[source_annotation_attribute( Parameter|ReturnValue )]
struct PostBoundAttribute
{

	PostBoundAttribute();
#line 190 "c:\\program files (x86)\\microsoft visual studio 10.0\\vc\\include\\codeanalysis\\sourceannotations.h"
	unsigned int Deref;
};

[repeatable]
[source_annotation_attribute( Parameter )]
struct PreRangeAttribute
{

	PreRangeAttribute();
#line 200 "c:\\program files (x86)\\microsoft visual studio 10.0\\vc\\include\\codeanalysis\\sourceannotations.h"
	unsigned int Deref;
	const char* MinVal;
	const char* MaxVal;
};

[repeatable]
[source_annotation_attribute( Parameter|ReturnValue )]
struct PostRangeAttribute
{

	PostRangeAttribute();
#line 212 "c:\\program files (x86)\\microsoft visual studio 10.0\\vc\\include\\codeanalysis\\sourceannotations.h"
	unsigned int Deref;
	const char* MinVal;
	const char* MaxVal;
};

#line 218 "c:\\program files (x86)\\microsoft visual studio 10.0\\vc\\include\\codeanalysis\\sourceannotations.h"


};  
#line 222 "c:\\program files (x86)\\microsoft visual studio 10.0\\vc\\include\\codeanalysis\\sourceannotations.h"






















typedef ::vc_attributes::YesNoMaybe SA_YesNoMaybe;
const ::vc_attributes::YesNoMaybe SA_Yes = ::vc_attributes::Yes;
const ::vc_attributes::YesNoMaybe SA_No = ::vc_attributes::No;
const ::vc_attributes::YesNoMaybe SA_Maybe = ::vc_attributes::Maybe;

typedef ::vc_attributes::AccessType SA_AccessType;
const ::vc_attributes::AccessType SA_NoAccess = ::vc_attributes::NoAccess;
const ::vc_attributes::AccessType SA_Read = ::vc_attributes::Read;
const ::vc_attributes::AccessType SA_Write = ::vc_attributes::Write;
const ::vc_attributes::AccessType SA_ReadWrite = ::vc_attributes::ReadWrite;


typedef ::vc_attributes::PreAttribute          SA_Pre;
typedef ::vc_attributes::PostAttribute         SA_Post;
typedef ::vc_attributes::FormatStringAttribute SA_FormatString;
typedef ::vc_attributes::InvalidCheckAttribute SA_InvalidCheck; 
typedef ::vc_attributes::SuccessAttribute      SA_Success;
typedef ::vc_attributes::PreBoundAttribute     SA_PreBound;
typedef ::vc_attributes::PostBoundAttribute    SA_PostBound;
typedef ::vc_attributes::PreRangeAttribute     SA_PreRange;
typedef ::vc_attributes::PostRangeAttribute    SA_PostRange;
#line 266 "c:\\program files (x86)\\microsoft visual studio 10.0\\vc\\include\\codeanalysis\\sourceannotations.h"















#line 282 "c:\\program files (x86)\\microsoft visual studio 10.0\\vc\\include\\codeanalysis\\sourceannotations.h"

#line 284 "c:\\program files (x86)\\microsoft visual studio 10.0\\vc\\include\\codeanalysis\\sourceannotations.h"




















#line 305 "c:\\program files (x86)\\microsoft visual studio 10.0\\vc\\include\\codeanalysis\\sourceannotations.h"


#line 308 "c:\\program files (x86)\\microsoft visual studio 10.0\\vc\\include\\codeanalysis\\sourceannotations.h"

#line 161 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\sal.h"
#line 162 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\sal.h"







































































































































































































































































































































































































































































































































































































































































                                                




                                                


























































































































































































































#line 1034 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\sal.h"































































































#line 1130 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\sal.h"



































































































#line 1230 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\sal.h"



















































#line 1282 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\sal.h"



















































































































































































































#line 1494 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\sal.h"
extern "C" {




#line 1500 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\sal.h"




























































































































































































































#line 1721 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\sal.h"
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
#line 1755 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\sal.h"



































































































































































































































    
    
#line 1985 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\sal.h"






#line 1992 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\sal.h"
#line 1993 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\sal.h"


}
#line 1997 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\sal.h"



#line 57 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"




#pragma pack(push,8)

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\vadefs.h"












#pragma once






#line 21 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\vadefs.h"








#pragma pack(push,8)


extern "C" {
#line 34 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\vadefs.h"








#line 43 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\vadefs.h"



typedef unsigned __int64    uintptr_t;


#line 50 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\vadefs.h"

#line 52 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\vadefs.h"





typedef char *  va_list;
#line 59 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\vadefs.h"

#line 61 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\vadefs.h"





#line 67 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\vadefs.h"











#line 79 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\vadefs.h"


#line 82 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\vadefs.h"













#line 96 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\vadefs.h"







#line 104 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\vadefs.h"














#line 119 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\vadefs.h"


extern void __cdecl __va_start(va_list *, ...);


















#line 141 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\vadefs.h"


}
#line 145 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\vadefs.h"

#pragma pack(pop)

#line 149 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\vadefs.h"
#line 64 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"


extern "C" {
#line 68 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"





#line 74 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"




#line 79 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"




#line 84 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"







#line 92 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"






#line 99 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"

#line 101 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"
#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"








#line 111 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"
#line 112 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"










#line 123 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"


#line 126 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"
#line 127 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"





#line 133 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"









#line 143 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"

#line 145 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"







#line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"
#line 154 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"




#line 159 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"

#line 161 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"
#line 162 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"




#line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"

#line 169 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"
#line 170 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"


 

#line 175 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"
  
 #line 177 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"
#line 178 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"










#line 189 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"
#line 190 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"






#line 197 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"
#line 198 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"

















#line 216 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"




#line 221 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"








#line 230 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"






#line 237 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"
#line 238 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"





#line 244 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"






#line 251 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"
#line 252 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"






#line 259 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"
#line 260 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"




#line 265 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"


#line 268 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"

#line 270 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"
#line 271 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"
#line 272 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"





#line 278 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"










#line 289 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"

#line 291 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"
#line 292 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"
#line 293 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"










#line 304 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"






#line 311 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"
#line 312 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"







#line 320 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"

#line 322 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"
#line 323 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"



 
  
 



#line 333 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"
#line 334 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"


 
  
  
 



#line 344 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"
#line 345 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"


 
  
   
  

#line 353 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"
 



#line 358 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"
#line 359 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"


 
  
 



#line 368 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"
#line 369 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"


 
  
 



#line 378 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"
#line 379 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"



#line 383 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"





#line 389 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"






#line 396 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"
#line 397 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"












typedef size_t rsize_t;

#line 412 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"
#line 413 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"



typedef __int64             intptr_t;


#line 420 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"

#line 422 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"












typedef __int64             ptrdiff_t;


#line 438 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"

#line 440 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"







typedef unsigned short wint_t;
typedef unsigned short wctype_t;

#line 451 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"


















typedef int errno_t;
#line 471 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"


typedef  long __time32_t;   

#line 476 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"


typedef __int64 __time64_t;     

#line 481 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"





typedef __time64_t time_t;      
#line 488 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"

#line 490 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"







#line 498 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"
#line 499 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"






#line 506 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"
#line 507 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"




#line 512 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"

#line 514 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"
#line 515 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"





#line 521 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"



#line 525 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"




#line 530 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"

#line 532 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"
#line 533 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"












 __declspec(dllimport) void __cdecl _invalid_parameter_noinfo(void);
 __declspec(dllimport) __declspec(noreturn) void __cdecl _invalid_parameter_noinfo_noreturn(void);
#line 548 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"

__declspec(dllimport) __declspec(noreturn)
void __cdecl _invoke_watson(   const wchar_t *,    const wchar_t *,    const wchar_t *, unsigned int, uintptr_t);






 







 
  
 #line 568 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"
#line 569 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"







#line 577 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"


































































































































































#line 740 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"
#line 741 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1807 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"















































































































































#line 1951 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"
#line 1952 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"

struct threadlocaleinfostruct;
struct threadmbcinfostruct;
typedef struct threadlocaleinfostruct * pthreadlocinfo;
typedef struct threadmbcinfostruct * pthreadmbcinfo;
struct __lc_time_data;

typedef struct localeinfo_struct
{
    pthreadlocinfo locinfo;
    pthreadmbcinfo mbcinfo;
} _locale_tstruct, *_locale_t;


typedef struct tagLC_ID {
        unsigned short wLanguage;
        unsigned short wCountry;
        unsigned short wCodePage;
} LC_ID, *LPLC_ID;

#line 1973 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"


typedef struct threadlocaleinfostruct {
        int refcount;
        unsigned int lc_codepage;
        unsigned int lc_collate_cp;
        unsigned long lc_handle[6]; 
        LC_ID lc_id[6];
        struct {
            char *locale;
            wchar_t *wlocale;
            int *refcount;
            int *wrefcount;
        } lc_category[6];
        int lc_clike;
        int mb_cur_max;
        int * lconv_intl_refcount;
        int * lconv_num_refcount;
        int * lconv_mon_refcount;
        struct lconv * lconv;
        int * ctype1_refcount;
        unsigned short * ctype1;
        const unsigned short * pctype;
        const unsigned char * pclmap;
        const unsigned char * pcumap;
        struct __lc_time_data * lc_time_curr;
} threadlocinfo;

#line 2002 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"


}
#line 2006 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"



#line 2010 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"

#line 2012 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"



#line 2016 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"

#line 2018 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"



#line 2022 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"

#line 2024 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"






#line 2031 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"



#line 2035 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"

#pragma pack(pop)

#line 2039 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"

#line 150 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\host_config.h"



#line 154 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\host_config.h"

#line 156 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\host_config.h"

#line 158 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\host_config.h"
#line 60 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v6.0\\include\\cuda_runtime.h"







#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\builtin_types.h"























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\device_types.h"




















































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\host_defines.h"





















































































#line 87 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\host_defines.h"










#line 98 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\host_defines.h"








































#line 139 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\host_defines.h"










#line 150 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\host_defines.h"






#line 157 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\host_defines.h"




#line 162 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\host_defines.h"










#line 174 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\host_defines.h"













        





#line 194 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\host_defines.h"








#line 203 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\host_defines.h"


#line 206 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\host_defines.h"
#line 54 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\device_types.h"







enum __declspec(__device_builtin__) cudaRoundMode
{
    cudaRoundNearest,
    cudaRoundZero,
    cudaRoundPosInf,
    cudaRoundMinInf
};

#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\device_types.h"
#line 57 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\driver_types.h"




















































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\host_defines.h"












































































































































































































#line 206 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\host_defines.h"
#line 54 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\driver_types.h"
















#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\limits.h"














#pragma once

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"














 








































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 18 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\limits.h"
















#line 35 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\limits.h"









































#line 77 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\limits.h"






#line 84 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\limits.h"
#line 85 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\limits.h"







#line 93 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\limits.h"
#line 94 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\limits.h"
































#line 127 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\limits.h"
#line 71 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\driver_types.h"
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\stddef.h"














#pragma once




#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"














 








































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 21 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\stddef.h"


extern "C" {
#line 25 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\stddef.h"







#line 33 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\stddef.h"
#line 34 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\stddef.h"




namespace std { typedef decltype(__nullptr) nullptr_t; }
using ::std::nullptr_t;
#line 41 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\stddef.h"
#line 42 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\stddef.h"





__declspec(dllimport) extern int * __cdecl _errno(void);


errno_t __cdecl _set_errno(  int _Value);
errno_t __cdecl _get_errno(  int * _Value);
#line 53 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\stddef.h"








#line 62 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\stddef.h"









#line 72 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\stddef.h"

__declspec(dllimport) extern unsigned long  __cdecl __threadid(void);

__declspec(dllimport) extern uintptr_t __cdecl __threadhandle(void);


}
#line 80 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\stddef.h"

#line 82 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\stddef.h"
#line 72 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\driver_types.h"













































#line 118 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\driver_types.h"










enum __declspec(__device_builtin__) cudaError
{
    




    cudaSuccess                           =      0,
  
    



    cudaErrorMissingConfiguration         =      1,
  
    



    cudaErrorMemoryAllocation             =      2,
  
    



    cudaErrorInitializationError          =      3,
  
    







    cudaErrorLaunchFailure                =      4,
  
    






    cudaErrorPriorLaunchFailure           =      5,
  
    







    cudaErrorLaunchTimeout                =      6,
  
    






    cudaErrorLaunchOutOfResources         =      7,
  
    



    cudaErrorInvalidDeviceFunction        =      8,
  
    






    cudaErrorInvalidConfiguration         =      9,
  
    



    cudaErrorInvalidDevice                =     10,
  
    



    cudaErrorInvalidValue                 =     11,
  
    



    cudaErrorInvalidPitchValue            =     12,
  
    



    cudaErrorInvalidSymbol                =     13,
  
    


    cudaErrorMapBufferObjectFailed        =     14,
  
    


    cudaErrorUnmapBufferObjectFailed      =     15,
  
    



    cudaErrorInvalidHostPointer           =     16,
  
    



    cudaErrorInvalidDevicePointer         =     17,
  
    



    cudaErrorInvalidTexture               =     18,
  
    



    cudaErrorInvalidTextureBinding        =     19,
  
    




    cudaErrorInvalidChannelDescriptor     =     20,
  
    



    cudaErrorInvalidMemcpyDirection       =     21,
  
    







    cudaErrorAddressOfConstant            =     22,
  
    






    cudaErrorTextureFetchFailed           =     23,
  
    






    cudaErrorTextureNotBound              =     24,
  
    






    cudaErrorSynchronizationError         =     25,
  
    



    cudaErrorInvalidFilterSetting         =     26,
  
    



    cudaErrorInvalidNormSetting           =     27,
  
    





    cudaErrorMixedDeviceExecution         =     28,
  
    




    cudaErrorCudartUnloading              =     29,
  
    


    cudaErrorUnknown                      =     30,

    





    cudaErrorNotYetImplemented            =     31,
  
    






    cudaErrorMemoryValueTooLarge          =     32,
  
    




    cudaErrorInvalidResourceHandle        =     33,
  
    





    cudaErrorNotReady                     =     34,
  
    




    cudaErrorInsufficientDriver           =     35,
  
    










    cudaErrorSetOnActiveProcess           =     36,
  
    



    cudaErrorInvalidSurface               =     37,
  
    



    cudaErrorNoDevice                     =     38,
  
    



    cudaErrorECCUncorrectable             =     39,
  
    


    cudaErrorSharedObjectSymbolNotFound   =     40,
  
    


    cudaErrorSharedObjectInitFailed       =     41,
  
    



    cudaErrorUnsupportedLimit             =     42,
  
    



    cudaErrorDuplicateVariableName        =     43,
  
    



    cudaErrorDuplicateTextureName         =     44,
  
    



    cudaErrorDuplicateSurfaceName         =     45,
  
    







    cudaErrorDevicesUnavailable           =     46,
  
    


    cudaErrorInvalidKernelImage           =     47,
  
    





    cudaErrorNoKernelImageForDevice       =     48,
  
    










    cudaErrorIncompatibleDriverContext    =     49,
      
    




    cudaErrorPeerAccessAlreadyEnabled     =     50,
    
    




    cudaErrorPeerAccessNotEnabled         =     51,
    
    



    cudaErrorDeviceAlreadyInUse           =     54,

    




    cudaErrorProfilerDisabled             =     55,

    





    cudaErrorProfilerNotInitialized       =     56,

    




    cudaErrorProfilerAlreadyStarted       =     57,

    




     cudaErrorProfilerAlreadyStopped       =    58,

    





    cudaErrorAssert                        =    59,
  
    




    cudaErrorTooManyPeers                 =     60,
  
    



    cudaErrorHostMemoryAlreadyRegistered  =     61,
        
    



    cudaErrorHostMemoryNotRegistered      =     62,

    


    cudaErrorOperatingSystem              =     63,

    



    cudaErrorPeerAccessUnsupported        =     64,

    




    cudaErrorLaunchMaxDepthExceeded       =     65,

    





    cudaErrorLaunchFileScopedTex          =     66,

    





    cudaErrorLaunchFileScopedSurf         =     67,

    












    cudaErrorSyncDepthExceeded            =     68,

    









    cudaErrorLaunchPendingCountExceeded   =     69,
    
    


    cudaErrorNotPermitted                 =     70,

    



    cudaErrorNotSupported                 =     71,

    






    cudaErrorHardwareStackError           =     72,

    





    cudaErrorIllegalInstruction           =     73,

    






    cudaErrorMisalignedAddress            =     74,

    








    cudaErrorInvalidAddressSpace          =     75,

    





    cudaErrorInvalidPc                    =     76,

    





    cudaErrorIllegalAddress               =     77,


    


    cudaErrorStartupFailure               =   0x7f,

    





    cudaErrorApiFailureBase               =  10000
};




enum __declspec(__device_builtin__) cudaChannelFormatKind
{
    cudaChannelFormatKindSigned           =   0,      
    cudaChannelFormatKindUnsigned         =   1,      
    cudaChannelFormatKindFloat            =   2,      
    cudaChannelFormatKindNone             =   3       
};




struct __declspec(__device_builtin__) cudaChannelFormatDesc
{
    int                        x; 
    int                        y; 
    int                        z; 
    int                        w; 
    enum cudaChannelFormatKind f; 
};




typedef struct cudaArray *cudaArray_t;




typedef const struct cudaArray *cudaArray_const_t;

struct cudaArray;




typedef struct cudaMipmappedArray *cudaMipmappedArray_t;




typedef const struct cudaMipmappedArray *cudaMipmappedArray_const_t;

struct cudaMipmappedArray;




enum __declspec(__device_builtin__) cudaMemoryType
{
    cudaMemoryTypeHost   = 1, 
    cudaMemoryTypeDevice = 2  
};




enum __declspec(__device_builtin__) cudaMemcpyKind
{
    cudaMemcpyHostToHost          =   0,      
    cudaMemcpyHostToDevice        =   1,      
    cudaMemcpyDeviceToHost        =   2,      
    cudaMemcpyDeviceToDevice      =   3,      
    cudaMemcpyDefault             =   4       
};





struct __declspec(__device_builtin__) cudaPitchedPtr
{
    void   *ptr;      
    size_t  pitch;    
    size_t  xsize;    
    size_t  ysize;    
};





struct __declspec(__device_builtin__) cudaExtent
{
    size_t width;     
    size_t height;    
    size_t depth;     
};





struct __declspec(__device_builtin__) cudaPos
{
    size_t x;     
    size_t y;     
    size_t z;     
};




struct __declspec(__device_builtin__) cudaMemcpy3DParms
{
    cudaArray_t            srcArray;  
    struct cudaPos         srcPos;    
    struct cudaPitchedPtr  srcPtr;    
  
    cudaArray_t            dstArray;  
    struct cudaPos         dstPos;    
    struct cudaPitchedPtr  dstPtr;    
  
    struct cudaExtent      extent;    
    enum cudaMemcpyKind    kind;      
};




struct __declspec(__device_builtin__) cudaMemcpy3DPeerParms
{
    cudaArray_t            srcArray;  
    struct cudaPos         srcPos;    
    struct cudaPitchedPtr  srcPtr;    
    int                    srcDevice; 
  
    cudaArray_t            dstArray;  
    struct cudaPos         dstPos;    
    struct cudaPitchedPtr  dstPtr;    
    int                    dstDevice; 
  
    struct cudaExtent      extent;    
};




struct cudaGraphicsResource;




enum __declspec(__device_builtin__) cudaGraphicsRegisterFlags
{
    cudaGraphicsRegisterFlagsNone             = 0,  
    cudaGraphicsRegisterFlagsReadOnly         = 1,   
    cudaGraphicsRegisterFlagsWriteDiscard     = 2,  
    cudaGraphicsRegisterFlagsSurfaceLoadStore = 4,  
    cudaGraphicsRegisterFlagsTextureGather    = 8   
};




enum __declspec(__device_builtin__) cudaGraphicsMapFlags
{
    cudaGraphicsMapFlagsNone         = 0,  
    cudaGraphicsMapFlagsReadOnly     = 1,  
    cudaGraphicsMapFlagsWriteDiscard = 2   
};




enum __declspec(__device_builtin__) cudaGraphicsCubeFace 
{
    cudaGraphicsCubeFacePositiveX = 0x00, 
    cudaGraphicsCubeFaceNegativeX = 0x01, 
    cudaGraphicsCubeFacePositiveY = 0x02, 
    cudaGraphicsCubeFaceNegativeY = 0x03, 
    cudaGraphicsCubeFacePositiveZ = 0x04, 
    cudaGraphicsCubeFaceNegativeZ = 0x05  
};




enum __declspec(__device_builtin__) cudaResourceType
{
    cudaResourceTypeArray          = 0x00, 
    cudaResourceTypeMipmappedArray = 0x01, 
    cudaResourceTypeLinear         = 0x02, 
    cudaResourceTypePitch2D        = 0x03  
};




enum __declspec(__device_builtin__) cudaResourceViewFormat
{
    cudaResViewFormatNone                      = 0x00, 
    cudaResViewFormatUnsignedChar1             = 0x01, 
    cudaResViewFormatUnsignedChar2             = 0x02, 
    cudaResViewFormatUnsignedChar4             = 0x03, 
    cudaResViewFormatSignedChar1               = 0x04, 
    cudaResViewFormatSignedChar2               = 0x05, 
    cudaResViewFormatSignedChar4               = 0x06, 
    cudaResViewFormatUnsignedShort1            = 0x07, 
    cudaResViewFormatUnsignedShort2            = 0x08, 
    cudaResViewFormatUnsignedShort4            = 0x09, 
    cudaResViewFormatSignedShort1              = 0x0a, 
    cudaResViewFormatSignedShort2              = 0x0b, 
    cudaResViewFormatSignedShort4              = 0x0c, 
    cudaResViewFormatUnsignedInt1              = 0x0d, 
    cudaResViewFormatUnsignedInt2              = 0x0e, 
    cudaResViewFormatUnsignedInt4              = 0x0f, 
    cudaResViewFormatSignedInt1                = 0x10, 
    cudaResViewFormatSignedInt2                = 0x11, 
    cudaResViewFormatSignedInt4                = 0x12, 
    cudaResViewFormatHalf1                     = 0x13, 
    cudaResViewFormatHalf2                     = 0x14, 
    cudaResViewFormatHalf4                     = 0x15, 
    cudaResViewFormatFloat1                    = 0x16, 
    cudaResViewFormatFloat2                    = 0x17, 
    cudaResViewFormatFloat4                    = 0x18, 
    cudaResViewFormatUnsignedBlockCompressed1  = 0x19, 
    cudaResViewFormatUnsignedBlockCompressed2  = 0x1a, 
    cudaResViewFormatUnsignedBlockCompressed3  = 0x1b, 
    cudaResViewFormatUnsignedBlockCompressed4  = 0x1c, 
    cudaResViewFormatSignedBlockCompressed4    = 0x1d, 
    cudaResViewFormatUnsignedBlockCompressed5  = 0x1e, 
    cudaResViewFormatSignedBlockCompressed5    = 0x1f, 
    cudaResViewFormatUnsignedBlockCompressed6H = 0x20, 
    cudaResViewFormatSignedBlockCompressed6H   = 0x21, 
    cudaResViewFormatUnsignedBlockCompressed7  = 0x22  
};




struct __declspec(__device_builtin__) cudaResourceDesc {
	enum cudaResourceType resType;             
	
	union {
		struct {
			cudaArray_t array;                 
		} array;
        struct {
            cudaMipmappedArray_t mipmap;       
        } mipmap;
		struct {
			void *devPtr;                      
			struct cudaChannelFormatDesc desc; 
			size_t sizeInBytes;                
		} linear;
		struct {
			void *devPtr;                      
			struct cudaChannelFormatDesc desc; 
			size_t width;                      
			size_t height;                     
			size_t pitchInBytes;               
		} pitch2D;
	} res;
};




struct __declspec(__device_builtin__) cudaResourceViewDesc
{
    enum cudaResourceViewFormat format;           
    size_t                      width;            
    size_t                      height;           
    size_t                      depth;            
    unsigned int                firstMipmapLevel; 
    unsigned int                lastMipmapLevel;  
    unsigned int                firstLayer;       
    unsigned int                lastLayer;        
};




struct __declspec(__device_builtin__) cudaPointerAttributes
{
    



    enum cudaMemoryType memoryType;

    








    int device;

    



    void *devicePointer;

    



    void *hostPointer;

    


    int isManaged;
};




struct __declspec(__device_builtin__) cudaFuncAttributes
{
   




   size_t sharedSizeBytes;

   



   size_t constSizeBytes;

   


   size_t localSizeBytes;

   




   int maxThreadsPerBlock;

   


   int numRegs;

   




   int ptxVersion;

   




   int binaryVersion;

   



   int cacheModeCA;
};




enum __declspec(__device_builtin__) cudaFuncCache
{
    cudaFuncCachePreferNone   = 0,    
    cudaFuncCachePreferShared = 1,    
    cudaFuncCachePreferL1     = 2,    
    cudaFuncCachePreferEqual  = 3     
};





enum __declspec(__device_builtin__) cudaSharedMemConfig
{
    cudaSharedMemBankSizeDefault   = 0,
    cudaSharedMemBankSizeFourByte  = 1,
    cudaSharedMemBankSizeEightByte = 2
};




enum __declspec(__device_builtin__) cudaComputeMode
{
    cudaComputeModeDefault          = 0,  
    cudaComputeModeExclusive        = 1,  
    cudaComputeModeProhibited       = 2,  
    cudaComputeModeExclusiveProcess = 3   
};




enum __declspec(__device_builtin__) cudaLimit
{
    cudaLimitStackSize                    = 0x00, 
    cudaLimitPrintfFifoSize               = 0x01, 
    cudaLimitMallocHeapSize               = 0x02, 
    cudaLimitDevRuntimeSyncDepth          = 0x03, 
    cudaLimitDevRuntimePendingLaunchCount = 0x04  
};




enum __declspec(__device_builtin__) cudaOutputMode
{
    cudaKeyValuePair    = 0x00, 
    cudaCSV             = 0x01  
};




enum __declspec(__device_builtin__) cudaDeviceAttr
{
    cudaDevAttrMaxThreadsPerBlock             = 1,  
    cudaDevAttrMaxBlockDimX                   = 2,  
    cudaDevAttrMaxBlockDimY                   = 3,  
    cudaDevAttrMaxBlockDimZ                   = 4,  
    cudaDevAttrMaxGridDimX                    = 5,  
    cudaDevAttrMaxGridDimY                    = 6,  
    cudaDevAttrMaxGridDimZ                    = 7,  
    cudaDevAttrMaxSharedMemoryPerBlock        = 8,  
    cudaDevAttrTotalConstantMemory            = 9,  
    cudaDevAttrWarpSize                       = 10, 
    cudaDevAttrMaxPitch                       = 11, 
    cudaDevAttrMaxRegistersPerBlock           = 12, 
    cudaDevAttrClockRate                      = 13, 
    cudaDevAttrTextureAlignment               = 14, 
    cudaDevAttrGpuOverlap                     = 15, 
    cudaDevAttrMultiProcessorCount            = 16, 
    cudaDevAttrKernelExecTimeout              = 17, 
    cudaDevAttrIntegrated                     = 18, 
    cudaDevAttrCanMapHostMemory               = 19, 
    cudaDevAttrComputeMode                    = 20, 
    cudaDevAttrMaxTexture1DWidth              = 21, 
    cudaDevAttrMaxTexture2DWidth              = 22, 
    cudaDevAttrMaxTexture2DHeight             = 23, 
    cudaDevAttrMaxTexture3DWidth              = 24, 
    cudaDevAttrMaxTexture3DHeight             = 25, 
    cudaDevAttrMaxTexture3DDepth              = 26, 
    cudaDevAttrMaxTexture2DLayeredWidth       = 27, 
    cudaDevAttrMaxTexture2DLayeredHeight      = 28, 
    cudaDevAttrMaxTexture2DLayeredLayers      = 29, 
    cudaDevAttrSurfaceAlignment               = 30, 
    cudaDevAttrConcurrentKernels              = 31, 
    cudaDevAttrEccEnabled                     = 32, 
    cudaDevAttrPciBusId                       = 33, 
    cudaDevAttrPciDeviceId                    = 34, 
    cudaDevAttrTccDriver                      = 35, 
    cudaDevAttrMemoryClockRate                = 36, 
    cudaDevAttrGlobalMemoryBusWidth           = 37, 
    cudaDevAttrL2CacheSize                    = 38, 
    cudaDevAttrMaxThreadsPerMultiProcessor    = 39, 
    cudaDevAttrAsyncEngineCount               = 40, 
    cudaDevAttrUnifiedAddressing              = 41,     
    cudaDevAttrMaxTexture1DLayeredWidth       = 42, 
    cudaDevAttrMaxTexture1DLayeredLayers      = 43, 
    cudaDevAttrMaxTexture2DGatherWidth        = 45, 
    cudaDevAttrMaxTexture2DGatherHeight       = 46, 
    cudaDevAttrMaxTexture3DWidthAlt           = 47, 
    cudaDevAttrMaxTexture3DHeightAlt          = 48, 
    cudaDevAttrMaxTexture3DDepthAlt           = 49, 
    cudaDevAttrPciDomainId                    = 50, 
    cudaDevAttrTexturePitchAlignment          = 51, 
    cudaDevAttrMaxTextureCubemapWidth         = 52, 
    cudaDevAttrMaxTextureCubemapLayeredWidth  = 53, 
    cudaDevAttrMaxTextureCubemapLayeredLayers = 54, 
    cudaDevAttrMaxSurface1DWidth              = 55, 
    cudaDevAttrMaxSurface2DWidth              = 56, 
    cudaDevAttrMaxSurface2DHeight             = 57, 
    cudaDevAttrMaxSurface3DWidth              = 58, 
    cudaDevAttrMaxSurface3DHeight             = 59, 
    cudaDevAttrMaxSurface3DDepth              = 60, 
    cudaDevAttrMaxSurface1DLayeredWidth       = 61, 
    cudaDevAttrMaxSurface1DLayeredLayers      = 62, 
    cudaDevAttrMaxSurface2DLayeredWidth       = 63, 
    cudaDevAttrMaxSurface2DLayeredHeight      = 64, 
    cudaDevAttrMaxSurface2DLayeredLayers      = 65, 
    cudaDevAttrMaxSurfaceCubemapWidth         = 66, 
    cudaDevAttrMaxSurfaceCubemapLayeredWidth  = 67, 
    cudaDevAttrMaxSurfaceCubemapLayeredLayers = 68, 
    cudaDevAttrMaxTexture1DLinearWidth        = 69, 
    cudaDevAttrMaxTexture2DLinearWidth        = 70, 
    cudaDevAttrMaxTexture2DLinearHeight       = 71, 
    cudaDevAttrMaxTexture2DLinearPitch        = 72, 
    cudaDevAttrMaxTexture2DMipmappedWidth     = 73, 
    cudaDevAttrMaxTexture2DMipmappedHeight    = 74, 
    cudaDevAttrComputeCapabilityMajor         = 75,  
    cudaDevAttrComputeCapabilityMinor         = 76, 
    cudaDevAttrMaxTexture1DMipmappedWidth     = 77, 
    cudaDevAttrStreamPrioritiesSupported      = 78, 
    cudaDevAttrGlobalL1CacheSupported         = 79, 
    cudaDevAttrLocalL1CacheSupported          = 80, 
    cudaDevAttrMaxSharedMemoryPerMultiprocessor = 81, 
    cudaDevAttrMaxRegistersPerMultiprocessor  = 82, 
    cudaDevAttrManagedMemory                  = 83, 
    cudaDevAttrIsMultiGpuBoard                = 84, 
    cudaDevAttrMultiGpuBoardGroupID           = 85  
};




struct __declspec(__device_builtin__) cudaDeviceProp
{
    char   name[256];                  
    size_t totalGlobalMem;             
    size_t sharedMemPerBlock;          
    int    regsPerBlock;               
    int    warpSize;                   
    size_t memPitch;                   
    int    maxThreadsPerBlock;         
    int    maxThreadsDim[3];           
    int    maxGridSize[3];             
    int    clockRate;                  
    size_t totalConstMem;              
    int    major;                      
    int    minor;                      
    size_t textureAlignment;           
    size_t texturePitchAlignment;      
    int    deviceOverlap;              
    int    multiProcessorCount;        
    int    kernelExecTimeoutEnabled;   
    int    integrated;                 
    int    canMapHostMemory;           
    int    computeMode;                
    int    maxTexture1D;               
    int    maxTexture1DMipmap;         
    int    maxTexture1DLinear;         
    int    maxTexture2D[2];            
    int    maxTexture2DMipmap[2];      
    int    maxTexture2DLinear[3];      
    int    maxTexture2DGather[2];      
    int    maxTexture3D[3];            
    int    maxTexture3DAlt[3];         
    int    maxTextureCubemap;          
    int    maxTexture1DLayered[2];     
    int    maxTexture2DLayered[3];     
    int    maxTextureCubemapLayered[2];
    int    maxSurface1D;               
    int    maxSurface2D[2];            
    int    maxSurface3D[3];            
    int    maxSurface1DLayered[2];     
    int    maxSurface2DLayered[3];     
    int    maxSurfaceCubemap;          
    int    maxSurfaceCubemapLayered[2];
    size_t surfaceAlignment;           
    int    concurrentKernels;          
    int    ECCEnabled;                 
    int    pciBusID;                   
    int    pciDeviceID;                
    int    pciDomainID;                
    int    tccDriver;                  
    int    asyncEngineCount;           
    int    unifiedAddressing;          
    int    memoryClockRate;            
    int    memoryBusWidth;             
    int    l2CacheSize;                
    int    maxThreadsPerMultiProcessor;
    int    streamPrioritiesSupported;  
    int    globalL1CacheSupported;     
    int    localL1CacheSupported;      
    size_t sharedMemPerMultiprocessor; 
    int    regsPerMultiprocessor;      
    int    managedMemory;              
    int    isMultiGpuBoard;            
    int    multiGpuBoardGroupID;       
};











































































typedef __declspec(__device_builtin__) struct __declspec(__device_builtin__) cudaIpcEventHandle_st
{
    char reserved[64];
}cudaIpcEventHandle_t;




typedef __declspec(__device_builtin__) struct __declspec(__device_builtin__) cudaIpcMemHandle_st 
{
    char reserved[64];
}cudaIpcMemHandle_t;










typedef __declspec(__device_builtin__) enum cudaError cudaError_t;




typedef __declspec(__device_builtin__) struct CUstream_st *cudaStream_t;




typedef __declspec(__device_builtin__) struct CUevent_st *cudaEvent_t;




typedef __declspec(__device_builtin__) struct cudaGraphicsResource *cudaGraphicsResource_t;




typedef __declspec(__device_builtin__) struct CUuuid_st cudaUUID_t;




typedef __declspec(__device_builtin__) enum cudaOutputMode cudaOutputMode_t;


 

#line 1414 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\driver_types.h"

#line 58 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\surface_types.h"


























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\driver_types.h"




































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1414 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\driver_types.h"

#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\surface_types.h"
























enum __declspec(__device_builtin__) cudaSurfaceBoundaryMode
{
    cudaBoundaryModeZero  = 0,    
    cudaBoundaryModeClamp = 1,    
    cudaBoundaryModeTrap  = 2     
};




enum __declspec(__device_builtin__)  cudaSurfaceFormatMode
{
    cudaFormatModeForced = 0,     
    cudaFormatModeAuto = 1        
};




struct __declspec(__device_builtin__) surfaceReference
{
    


    struct cudaChannelFormatDesc channelDesc;
};




typedef __declspec(__device_builtin__) unsigned long long cudaSurfaceObject_t;


 

#line 120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\surface_types.h"
#line 59 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_types.h"


























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\driver_types.h"




































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1414 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\driver_types.h"

#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_types.h"
























enum __declspec(__device_builtin__) cudaTextureAddressMode
{
    cudaAddressModeWrap   = 0,    
    cudaAddressModeClamp  = 1,    
    cudaAddressModeMirror = 2,    
    cudaAddressModeBorder = 3     
};




enum __declspec(__device_builtin__) cudaTextureFilterMode
{
    cudaFilterModePoint  = 0,     
    cudaFilterModeLinear = 1      
};




enum __declspec(__device_builtin__) cudaTextureReadMode
{
    cudaReadModeElementType     = 0,  
    cudaReadModeNormalizedFloat = 1   
};




struct __declspec(__device_builtin__) textureReference
{
    


    int                          normalized;
    


    enum cudaTextureFilterMode   filterMode;
    


    enum cudaTextureAddressMode  addressMode[3];
    


    struct cudaChannelFormatDesc channelDesc;
    


    int                          sRGB;
    


    unsigned int                 maxAnisotropy;
    


    enum cudaTextureFilterMode   mipmapFilterMode;
    


    float                        mipmapLevelBias;
    


    float                        minMipmapLevelClamp;
    


    float                        maxMipmapLevelClamp;
    int                          __cudaReserved[15];
};




struct __declspec(__device_builtin__) cudaTextureDesc
{
    


    enum cudaTextureAddressMode addressMode[3];
    


    enum cudaTextureFilterMode  filterMode;
    


    enum cudaTextureReadMode    readMode;
    


    int                         sRGB;
    


    int                         normalizedCoords;
    


    unsigned int                maxAnisotropy;
    


    enum cudaTextureFilterMode  mipmapFilterMode;
    


    float                       mipmapLevelBias;
    


    float                       minMipmapLevelClamp;
    


    float                       maxMipmapLevelClamp;
};




typedef __declspec(__device_builtin__) unsigned long long cudaTextureObject_t;


 

#line 214 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_types.h"
#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\vector_types.h"



























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\builtin_types.h"























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\device_types.h"




































































#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\device_types.h"
#line 57 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\driver_types.h"




































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1414 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\driver_types.h"

#line 58 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\surface_types.h"






















































































































#line 120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\surface_types.h"
#line 59 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_types.h"




















































































































































































































#line 214 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_types.h"
#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\vector_types.h"












































































































































































































































































































































































































































#line 430 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\vector_types.h"
#line 61 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\builtin_types.h"
#line 61 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\vector_types.h"
#line 62 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\vector_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\host_defines.h"












































































































































































































#line 206 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\host_defines.h"
#line 63 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\vector_types.h"






















#line 87 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\vector_types.h"







#line 95 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\vector_types.h"

struct __declspec(__device_builtin__) char1
{
    signed char x;
};

struct __declspec(__device_builtin__) uchar1
{
    unsigned char x;
};


struct __declspec(__device_builtin__) __declspec(align(2)) char2
{
    signed char x, y;
};

struct __declspec(__device_builtin__) __declspec(align(2)) uchar2
{
    unsigned char x, y;
};

struct __declspec(__device_builtin__) char3
{
    signed char x, y, z;
};

struct __declspec(__device_builtin__) uchar3
{
    unsigned char x, y, z;
};

struct __declspec(__device_builtin__) __declspec(align(4)) char4
{
    signed char x, y, z, w;
};

struct __declspec(__device_builtin__) __declspec(align(4)) uchar4
{
    unsigned char x, y, z, w;
};

struct __declspec(__device_builtin__) short1
{
    short x;
};

struct __declspec(__device_builtin__) ushort1
{
    unsigned short x;
};

struct __declspec(__device_builtin__) __declspec(align(4)) short2
{
    short x, y;
};

struct __declspec(__device_builtin__) __declspec(align(4)) ushort2
{
    unsigned short x, y;
};

struct __declspec(__device_builtin__) short3
{
    short x, y, z;
};

struct __declspec(__device_builtin__) ushort3
{
    unsigned short x, y, z;
};

struct __declspec(__device_builtin__) __declspec(align(8)) short4 { short x; short y; short z; short w; };
struct __declspec(__device_builtin__) __declspec(align(8)) ushort4 { unsigned short x; unsigned short y; unsigned short z; unsigned short w; };

struct __declspec(__device_builtin__) int1
{
    int x;
};

struct __declspec(__device_builtin__) uint1
{
    unsigned int x;
};

struct __declspec(__device_builtin__) __declspec(align(8)) int2 { int x; int y; };
struct __declspec(__device_builtin__) __declspec(align(8)) uint2 { unsigned int x; unsigned int y; };

struct __declspec(__device_builtin__) int3
{
    int x, y, z;
};

struct __declspec(__device_builtin__) uint3
{
    unsigned int x, y, z;
};

struct __declspec(__device_builtin__) __declspec(align(16)) int4
{
    int x, y, z, w;
};

struct __declspec(__device_builtin__) __declspec(align(16)) uint4
{
    unsigned int x, y, z, w;
};

struct __declspec(__device_builtin__) long1
{
    long int x;
};

struct __declspec(__device_builtin__) ulong1
{
    unsigned long x;
};


struct __declspec(__device_builtin__) __declspec(align(8)) long2 { long int x; long int y; };
struct __declspec(__device_builtin__) __declspec(align(8)) ulong2 { unsigned long int x; unsigned long int y; };












#line 229 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\vector_types.h"

struct __declspec(__device_builtin__) long3
{
    long int x, y, z;
};

struct __declspec(__device_builtin__) ulong3
{
    unsigned long int x, y, z;
};

struct __declspec(__device_builtin__) __declspec(align(16)) long4
{
    long int x, y, z, w;
};

struct __declspec(__device_builtin__) __declspec(align(16)) ulong4
{
    unsigned long int x, y, z, w;
};

struct __declspec(__device_builtin__) float1
{
    float x;
};















#line 271 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\vector_types.h"

struct __declspec(__device_builtin__) __declspec(align(8)) float2 { float x; float y; };

#line 275 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\vector_types.h"


struct __declspec(__device_builtin__) float3
{
    float x, y, z;
};

struct __declspec(__device_builtin__) __declspec(align(16)) float4
{
    float x, y, z, w;
};

struct __declspec(__device_builtin__) longlong1
{
    long long int x;
};

struct __declspec(__device_builtin__) ulonglong1
{
    unsigned long long int x;
};

struct __declspec(__device_builtin__) __declspec(align(16)) longlong2
{
    long long int x, y;
};

struct __declspec(__device_builtin__) __declspec(align(16)) ulonglong2
{
    unsigned long long int x, y;
};

struct __declspec(__device_builtin__) longlong3
{
    long long int x, y, z;
};

struct __declspec(__device_builtin__) ulonglong3
{
    unsigned long long int x, y, z;
};

struct __declspec(__device_builtin__) __declspec(align(16)) longlong4
{
    long long int x, y, z ,w;
};

struct __declspec(__device_builtin__) __declspec(align(16)) ulonglong4
{
    unsigned long long int x, y, z, w;
};

struct __declspec(__device_builtin__) double1
{
    double x;
};

struct __declspec(__device_builtin__) __declspec(align(16)) double2
{
    double x, y;
};

struct __declspec(__device_builtin__) double3
{
    double x, y, z;
};

struct __declspec(__device_builtin__) __declspec(align(16)) double4
{
    double x, y, z, w;
};





#line 353 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\vector_types.h"







typedef __declspec(__device_builtin__) struct char1 char1;
typedef __declspec(__device_builtin__) struct uchar1 uchar1;
typedef __declspec(__device_builtin__) struct char2 char2;
typedef __declspec(__device_builtin__) struct uchar2 uchar2;
typedef __declspec(__device_builtin__) struct char3 char3;
typedef __declspec(__device_builtin__) struct uchar3 uchar3;
typedef __declspec(__device_builtin__) struct char4 char4;
typedef __declspec(__device_builtin__) struct uchar4 uchar4;
typedef __declspec(__device_builtin__) struct short1 short1;
typedef __declspec(__device_builtin__) struct ushort1 ushort1;
typedef __declspec(__device_builtin__) struct short2 short2;
typedef __declspec(__device_builtin__) struct ushort2 ushort2;
typedef __declspec(__device_builtin__) struct short3 short3;
typedef __declspec(__device_builtin__) struct ushort3 ushort3;
typedef __declspec(__device_builtin__) struct short4 short4;
typedef __declspec(__device_builtin__) struct ushort4 ushort4;
typedef __declspec(__device_builtin__) struct int1 int1;
typedef __declspec(__device_builtin__) struct uint1 uint1;
typedef __declspec(__device_builtin__) struct int2 int2;
typedef __declspec(__device_builtin__) struct uint2 uint2;
typedef __declspec(__device_builtin__) struct int3 int3;
typedef __declspec(__device_builtin__) struct uint3 uint3;
typedef __declspec(__device_builtin__) struct int4 int4;
typedef __declspec(__device_builtin__) struct uint4 uint4;
typedef __declspec(__device_builtin__) struct long1 long1;
typedef __declspec(__device_builtin__) struct ulong1 ulong1;
typedef __declspec(__device_builtin__) struct long2 long2;
typedef __declspec(__device_builtin__) struct ulong2 ulong2;
typedef __declspec(__device_builtin__) struct long3 long3;
typedef __declspec(__device_builtin__) struct ulong3 ulong3;
typedef __declspec(__device_builtin__) struct long4 long4;
typedef __declspec(__device_builtin__) struct ulong4 ulong4;
typedef __declspec(__device_builtin__) struct float1 float1;
typedef __declspec(__device_builtin__) struct float2 float2;
typedef __declspec(__device_builtin__) struct float3 float3;
typedef __declspec(__device_builtin__) struct float4 float4;
typedef __declspec(__device_builtin__) struct longlong1 longlong1;
typedef __declspec(__device_builtin__) struct ulonglong1 ulonglong1;
typedef __declspec(__device_builtin__) struct longlong2 longlong2;
typedef __declspec(__device_builtin__) struct ulonglong2 ulonglong2;
typedef __declspec(__device_builtin__) struct longlong3 longlong3;
typedef __declspec(__device_builtin__) struct ulonglong3 ulonglong3;
typedef __declspec(__device_builtin__) struct longlong4 longlong4;
typedef __declspec(__device_builtin__) struct ulonglong4 ulonglong4;
typedef __declspec(__device_builtin__) struct double1 double1;
typedef __declspec(__device_builtin__) struct double2 double2;
typedef __declspec(__device_builtin__) struct double3 double3;
typedef __declspec(__device_builtin__) struct double4 double4;







struct __declspec(__device_builtin__) dim3
{
    unsigned int x, y, z;

    __declspec(__host__) __declspec(__device__) dim3(unsigned int vx = 1, unsigned int vy = 1, unsigned int vz = 1) : x(vx), y(vy), z(vz) {}
    __declspec(__host__) __declspec(__device__) dim3(uint3 v) : x(v.x), y(v.y), z(v.z) {}
    __declspec(__host__) __declspec(__device__) operator uint3(void) { uint3 t; t.x = x; t.y = y; t.z = z; return t; }
#line 423 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\vector_types.h"
};

typedef __declspec(__device_builtin__) struct dim3 dim3;



#line 430 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\vector_types.h"
#line 61 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\builtin_types.h"
#line 68 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v6.0\\include\\cuda_runtime.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\channel_descriptor.h"




























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\driver_types.h"




































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1414 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\driver_types.h"

#line 62 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\channel_descriptor.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\cuda_runtime_api.h"













































































































































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\host_defines.h"












































































































































































































#line 206 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\host_defines.h"
#line 143 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\cuda_runtime_api.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\builtin_types.h"























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\device_types.h"




































































#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\device_types.h"
#line 57 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\driver_types.h"




































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1414 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\driver_types.h"

#line 58 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\surface_types.h"






















































































































#line 120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\surface_types.h"
#line 59 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_types.h"




















































































































































































































#line 214 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_types.h"
#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\vector_types.h"












































































































































































































































































































































































































































#line 430 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\vector_types.h"
#line 61 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\builtin_types.h"
#line 144 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\cuda_runtime_api.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\cuda_device_runtime_api.h"











































































#line 77 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\cuda_device_runtime_api.h"




#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\driver_types.h"




































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1414 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\driver_types.h"

#line 82 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\cuda_device_runtime_api.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\host_defines.h"












































































































































































































#line 206 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\host_defines.h"
#line 83 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\cuda_device_runtime_api.h"

extern "C"
{
extern __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaDeviceGetAttribute(int *value, enum cudaDeviceAttr attr, int device);
extern __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaDeviceGetLimit(size_t *pValue, enum cudaLimit limit);
extern __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaDeviceGetCacheConfig(enum cudaFuncCache *pCacheConfig);
extern __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaDeviceGetSharedMemConfig(enum cudaSharedMemConfig *pConfig);
extern __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaDeviceSynchronize(void);
extern __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaGetLastError(void);
extern __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaPeekAtLastError(void);
extern __declspec(__device__) __declspec(__cudart_builtin__) const char* __stdcall cudaGetErrorString(cudaError_t error);
extern __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaGetDeviceCount(int *count);
extern __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaGetDevice(int *device);
extern __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaStreamCreateWithFlags(cudaStream_t *pStream, unsigned int flags);
extern __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaStreamDestroy(cudaStream_t stream);
extern __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaStreamWaitEvent(cudaStream_t stream, cudaEvent_t event, unsigned int flags);
extern __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaEventCreateWithFlags(cudaEvent_t *event, unsigned int flags);
extern __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaEventRecord(cudaEvent_t event, cudaStream_t stream);
extern __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaEventDestroy(cudaEvent_t event);
extern __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaFuncGetAttributes(struct cudaFuncAttributes *attr, const void *func);
extern __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaFree(void *devPtr);
extern __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaMalloc(void **devPtr, size_t size);
extern __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaMemcpyAsync(void *dst, const void *src, size_t count, enum cudaMemcpyKind kind, cudaStream_t stream);
extern __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaMemcpy2DAsync(void *dst, size_t dpitch, const void *src, size_t spitch, size_t width, size_t height, enum cudaMemcpyKind kind, cudaStream_t stream);
extern __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaMemcpy3DAsync(const struct cudaMemcpy3DParms *p, cudaStream_t stream);
extern __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaMemsetAsync(void *devPtr, int value, size_t count, cudaStream_t stream);
extern __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaMemset2DAsync(void *devPtr, size_t pitch, int value, size_t width, size_t height, cudaStream_t stream);
extern __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaMemset3DAsync(struct cudaPitchedPtr pitchedDevPtr, int value, struct cudaExtent extent, cudaStream_t stream);
extern __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaRuntimeGetVersion(int *runtimeVersion);

extern __declspec(__device__) __declspec(__cudart_builtin__) void * __stdcall cudaGetParameterBuffer(size_t alignment, size_t size);
extern __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaLaunchDevice(void *func, void *parameterBuffer, dim3 gridDimension, dim3 blockDimension, unsigned int sharedMemSize, cudaStream_t stream);
extern __declspec(__device__) __declspec(__cudart_builtin__) void * __stdcall cudaGetParameterBufferV2(void *func, dim3 gridDimension, dim3 blockDimension, unsigned int sharedMemSize);
extern __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaLaunchDeviceV2(void *parameterBuffer, cudaStream_t stream);
}
namespace {
template <typename T> __inline __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t cudaMalloc(T **devPtr, size_t size);
template <typename T> __inline __declspec(__device__) __declspec(__cudart_builtin__) cudaError_t cudaFuncGetAttributes(struct cudaFuncAttributes *attr, T *entry);
}

#line 124 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\cuda_device_runtime_api.h"
#line 125 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\cuda_device_runtime_api.h"

#line 127 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\cuda_device_runtime_api.h"

#line 129 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\cuda_device_runtime_api.h"
#line 145 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\cuda_runtime_api.h"













#line 159 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\cuda_runtime_api.h"

#line 161 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\cuda_runtime_api.h"










#line 172 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\cuda_runtime_api.h"


extern "C" {
#line 176 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\cuda_runtime_api.h"































extern __declspec(__host__) cudaError_t __stdcall cudaDeviceReset(void);
















extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaDeviceSynchronize(void);




















































































extern __declspec(__host__) cudaError_t __stdcall cudaDeviceSetLimit(enum cudaLimit limit, size_t value);




























extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaDeviceGetLimit(size_t *pValue, enum cudaLimit limit);






























extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaDeviceGetCacheConfig(enum cudaFuncCache *pCacheConfig);


































extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaDeviceGetStreamPriorityRange(int *leastPriority, int *greatestPriority);









































extern __declspec(__host__) cudaError_t __stdcall cudaDeviceSetCacheConfig(enum cudaFuncCache cacheConfig);




























extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaDeviceGetSharedMemConfig(enum cudaSharedMemConfig *pConfig);









































extern __declspec(__host__) cudaError_t __stdcall cudaDeviceSetSharedMemConfig(enum cudaSharedMemConfig config);






















extern __declspec(__host__) cudaError_t __stdcall cudaDeviceGetByPCIBusId(int *device, const char *pciBusId);


























extern __declspec(__host__) cudaError_t __stdcall cudaDeviceGetPCIBusId(char *pciBusId, int len, int device);









































extern __declspec(__host__) cudaError_t __stdcall cudaIpcGetEventHandle(cudaIpcEventHandle_t *handle, cudaEvent_t event);


































extern __declspec(__host__) cudaError_t __stdcall cudaIpcOpenEventHandle(cudaEvent_t *event, cudaIpcEventHandle_t handle);





































extern __declspec(__host__) cudaError_t __stdcall cudaIpcGetMemHandle(cudaIpcMemHandle_t *handle, void *devPtr);

















































extern __declspec(__host__) cudaError_t __stdcall cudaIpcOpenMemHandle(void **devPtr, cudaIpcMemHandle_t handle, unsigned int flags);





























extern __declspec(__host__) cudaError_t __stdcall cudaIpcCloseMemHandle(void *devPtr);

 





































extern __declspec(__host__) cudaError_t __stdcall cudaThreadExit(void);























extern __declspec(__host__) cudaError_t __stdcall cudaThreadSynchronize(void);


























































extern __declspec(__host__) cudaError_t __stdcall cudaThreadSetLimit(enum cudaLimit limit, size_t value);






























extern __declspec(__host__) cudaError_t __stdcall cudaThreadGetLimit(size_t *pValue, enum cudaLimit limit);


































extern __declspec(__host__) cudaError_t __stdcall cudaThreadGetCacheConfig(enum cudaFuncCache *pCacheConfig);













































extern __declspec(__host__) cudaError_t __stdcall cudaThreadSetCacheConfig(enum cudaFuncCache cacheConfig);

 



















































extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaGetLastError(void);








































extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaPeekAtLastError(void);













extern __declspec(__host__) __declspec(__cudart_builtin__) const char* __stdcall cudaGetErrorString(cudaError_t error);
 




























extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaGetDeviceCount(int *count);











































































































































































































































extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaGetDeviceProperties(struct cudaDeviceProp *prop, int device);































































































































































extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaDeviceGetAttribute(int *value, enum cudaDeviceAttr attr, int device);


















extern __declspec(__host__) cudaError_t __stdcall cudaChooseDevice(int *device, const struct cudaDeviceProp *prop);

































extern __declspec(__host__) cudaError_t __stdcall cudaSetDevice(int device);
















extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaGetDevice(int *device);




























extern __declspec(__host__) cudaError_t __stdcall cudaSetValidDevices(int *device_arr, int len);



























































extern __declspec(__host__) cudaError_t __stdcall cudaSetDeviceFlags( unsigned int flags );

 



































extern __declspec(__host__) cudaError_t __stdcall cudaStreamCreate(cudaStream_t *pStream);




























extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaStreamCreateWithFlags(cudaStream_t *pStream, unsigned int flags);










































extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaStreamCreateWithPriority(cudaStream_t *pStream, unsigned int flags, int priority);























extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaStreamGetPriority(cudaStream_t hStream, int *priority);




















extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaStreamGetFlags(cudaStream_t hStream, unsigned int *flags);




















extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaStreamDestroy(cudaStream_t stream);































extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaStreamWaitEvent(cudaStream_t stream, cudaEvent_t event, unsigned int flags);





#line 1906 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\cuda_runtime_api.h"







typedef void (__stdcall *cudaStreamCallback_t)(cudaStream_t stream, cudaError_t status, void *userData);





























































extern __declspec(__host__) cudaError_t __stdcall cudaStreamAddCallback(cudaStream_t stream,
        cudaStreamCallback_t callback, void *userData, unsigned int flags);


















extern __declspec(__host__) cudaError_t __stdcall cudaStreamSynchronize(cudaStream_t stream);




















extern __declspec(__host__) cudaError_t __stdcall cudaStreamQuery(cudaStream_t stream);

































































extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaStreamAttachMemAsync(cudaStream_t stream, void *devPtr, size_t length, unsigned int flags);

 

































extern __declspec(__host__) cudaError_t __stdcall cudaEventCreate(cudaEvent_t *event);

































extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaEventCreateWithFlags(cudaEvent_t *event, unsigned int flags);






























extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaEventRecord(cudaEvent_t event, cudaStream_t stream = 0);































extern __declspec(__host__) cudaError_t __stdcall cudaEventQuery(cudaEvent_t event);































extern __declspec(__host__) cudaError_t __stdcall cudaEventSynchronize(cudaEvent_t event);
























extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaEventDestroy(cudaEvent_t event);








































extern __declspec(__host__) cudaError_t __stdcall cudaEventElapsedTime(float *ms, cudaEvent_t start, cudaEvent_t end);

 












































extern __declspec(__host__) cudaError_t __stdcall cudaConfigureCall(dim3 gridDim, dim3 blockDim, size_t sharedMem = 0, cudaStream_t stream = 0);


























extern __declspec(__host__) cudaError_t __stdcall cudaSetupArgument(const void *arg, size_t size, size_t offset);













































extern __declspec(__host__) cudaError_t __stdcall cudaFuncSetCacheConfig(const void *func, enum cudaFuncCache cacheConfig);


















































extern __declspec(__host__) cudaError_t __stdcall cudaFuncSetSharedMemConfig(const void *func, enum cudaSharedMemConfig config);


































extern __declspec(__host__) cudaError_t __stdcall cudaLaunch(const void *func);
































extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaFuncGetAttributes(struct cudaFuncAttributes *attr, const void *func);





















extern __declspec(__host__) cudaError_t __stdcall cudaSetDoubleForDevice(double *d);





















extern __declspec(__host__) cudaError_t __stdcall cudaSetDoubleForHost(double *d);

 




















































































extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaMallocManaged(void **devPtr, size_t size, unsigned int flags);






















extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaMalloc(void **devPtr, size_t size);




























extern __declspec(__host__) cudaError_t __stdcall cudaMallocHost(void **ptr, size_t size);






































extern __declspec(__host__) cudaError_t __stdcall cudaMallocPitch(void **devPtr, size_t *pitch, size_t width, size_t height);









































extern __declspec(__host__) cudaError_t __stdcall cudaMallocArray(cudaArray_t *array, const struct cudaChannelFormatDesc *desc, size_t width, size_t height = 0, unsigned int flags = 0);























extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaFree(void *devPtr);



















extern __declspec(__host__) cudaError_t __stdcall cudaFreeHost(void *ptr);





















extern __declspec(__host__) cudaError_t __stdcall cudaFreeArray(cudaArray_t array);





















extern __declspec(__host__) cudaError_t __stdcall cudaFreeMipmappedArray(cudaMipmappedArray_t mipmappedArray);


























































extern __declspec(__host__) cudaError_t __stdcall cudaHostAlloc(void **pHost, size_t size, unsigned int flags);




















































extern __declspec(__host__) cudaError_t __stdcall cudaHostRegister(void *ptr, size_t size, unsigned int flags);


















extern __declspec(__host__) cudaError_t __stdcall cudaHostUnregister(void *ptr);


























extern __declspec(__host__) cudaError_t __stdcall cudaHostGetDevicePointer(void **pDevice, void *pHost, unsigned int flags);


















extern __declspec(__host__) cudaError_t __stdcall cudaHostGetFlags(unsigned int *pFlags, void *pHost);


































extern __declspec(__host__) cudaError_t __stdcall cudaMalloc3D(struct cudaPitchedPtr* pitchedDevPtr, struct cudaExtent extent);






































































































































extern __declspec(__host__) cudaError_t __stdcall cudaMalloc3DArray(cudaArray_t *array, const struct cudaChannelFormatDesc* desc, struct cudaExtent extent, unsigned int flags = 0);
























































































































extern __declspec(__host__) cudaError_t __stdcall cudaMallocMipmappedArray(cudaMipmappedArray_t *mipmappedArray, const struct cudaChannelFormatDesc* desc, struct cudaExtent extent, unsigned int numLevels, unsigned int flags = 0);

























extern __declspec(__host__) cudaError_t __stdcall cudaGetMipmappedArrayLevel(cudaArray_t *levelArray, cudaMipmappedArray_const_t mipmappedArray, unsigned int level);
































































































extern __declspec(__host__) cudaError_t __stdcall cudaMemcpy3D(const struct cudaMemcpy3DParms *p);



























extern __declspec(__host__) cudaError_t __stdcall cudaMemcpy3DPeer(const struct cudaMemcpy3DPeerParms *p);








































































































extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaMemcpy3DAsync(const struct cudaMemcpy3DParms *p, cudaStream_t stream = 0);






















extern __declspec(__host__) cudaError_t __stdcall cudaMemcpy3DPeerAsync(const struct cudaMemcpy3DPeerParms *p, cudaStream_t stream = 0);


















extern __declspec(__host__) cudaError_t __stdcall cudaMemGetInfo(size_t *free, size_t *total);




















extern __declspec(__host__) cudaError_t __stdcall cudaArrayGetInfo(struct cudaChannelFormatDesc *desc, struct cudaExtent *extent, unsigned int *flags, cudaArray_t array);


































extern __declspec(__host__) cudaError_t __stdcall cudaMemcpy(void *dst, const void *src, size_t count, enum cudaMemcpyKind kind);































extern __declspec(__host__) cudaError_t __stdcall cudaMemcpyPeer(void *dst, int dstDevice, const void *src, int srcDevice, size_t count);

































extern __declspec(__host__) cudaError_t __stdcall cudaMemcpyToArray(cudaArray_t dst, size_t wOffset, size_t hOffset, const void *src, size_t count, enum cudaMemcpyKind kind);

































extern __declspec(__host__) cudaError_t __stdcall cudaMemcpyFromArray(void *dst, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t count, enum cudaMemcpyKind kind);


































extern __declspec(__host__) cudaError_t __stdcall cudaMemcpyArrayToArray(cudaArray_t dst, size_t wOffsetDst, size_t hOffsetDst, cudaArray_const_t src, size_t wOffsetSrc, size_t hOffsetSrc, size_t count, enum cudaMemcpyKind kind = cudaMemcpyDeviceToDevice);









































extern __declspec(__host__) cudaError_t __stdcall cudaMemcpy2D(void *dst, size_t dpitch, const void *src, size_t spitch, size_t width, size_t height, enum cudaMemcpyKind kind);









































extern __declspec(__host__) cudaError_t __stdcall cudaMemcpy2DToArray(cudaArray_t dst, size_t wOffset, size_t hOffset, const void *src, size_t spitch, size_t width, size_t height, enum cudaMemcpyKind kind);









































extern __declspec(__host__) cudaError_t __stdcall cudaMemcpy2DFromArray(void *dst, size_t dpitch, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t width, size_t height, enum cudaMemcpyKind kind);







































extern __declspec(__host__) cudaError_t __stdcall cudaMemcpy2DArrayToArray(cudaArray_t dst, size_t wOffsetDst, size_t hOffsetDst, cudaArray_const_t src, size_t wOffsetSrc, size_t hOffsetSrc, size_t width, size_t height, enum cudaMemcpyKind kind = cudaMemcpyDeviceToDevice);


































extern __declspec(__host__) cudaError_t __stdcall cudaMemcpyToSymbol(const void *symbol, const void *src, size_t count, size_t offset = 0, enum cudaMemcpyKind kind = cudaMemcpyHostToDevice);


































extern __declspec(__host__) cudaError_t __stdcall cudaMemcpyFromSymbol(void *dst, const void *symbol, size_t count, size_t offset = 0, enum cudaMemcpyKind kind = cudaMemcpyDeviceToHost);










































extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaMemcpyAsync(void *dst, const void *src, size_t count, enum cudaMemcpyKind kind, cudaStream_t stream = 0);































extern __declspec(__host__) cudaError_t __stdcall cudaMemcpyPeerAsync(void *dst, int dstDevice, const void *src, int srcDevice, size_t count, cudaStream_t stream = 0);









































extern __declspec(__host__) cudaError_t __stdcall cudaMemcpyToArrayAsync(cudaArray_t dst, size_t wOffset, size_t hOffset, const void *src, size_t count, enum cudaMemcpyKind kind, cudaStream_t stream = 0);









































extern __declspec(__host__) cudaError_t __stdcall cudaMemcpyFromArrayAsync(void *dst, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t count, enum cudaMemcpyKind kind, cudaStream_t stream = 0);



















































extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaMemcpy2DAsync(void *dst, size_t dpitch, const void *src, size_t spitch, size_t width, size_t height, enum cudaMemcpyKind kind, cudaStream_t stream = 0);


















































extern __declspec(__host__) cudaError_t __stdcall cudaMemcpy2DToArrayAsync(cudaArray_t dst, size_t wOffset, size_t hOffset, const void *src, size_t spitch, size_t width, size_t height, enum cudaMemcpyKind kind, cudaStream_t stream = 0);

















































extern __declspec(__host__) cudaError_t __stdcall cudaMemcpy2DFromArrayAsync(void *dst, size_t dpitch, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t width, size_t height, enum cudaMemcpyKind kind, cudaStream_t stream = 0);










































extern __declspec(__host__) cudaError_t __stdcall cudaMemcpyToSymbolAsync(const void *symbol, const void *src, size_t count, size_t offset, enum cudaMemcpyKind kind, cudaStream_t stream = 0);










































extern __declspec(__host__) cudaError_t __stdcall cudaMemcpyFromSymbolAsync(void *dst, const void *symbol, size_t count, size_t offset, enum cudaMemcpyKind kind, cudaStream_t stream = 0);

























extern __declspec(__host__) cudaError_t __stdcall cudaMemset(void *devPtr, int value, size_t count);





























extern __declspec(__host__) cudaError_t __stdcall cudaMemset2D(void *devPtr, size_t pitch, int value, size_t width, size_t height);










































extern __declspec(__host__) cudaError_t __stdcall cudaMemset3D(struct cudaPitchedPtr pitchedDevPtr, int value, struct cudaExtent extent);




























extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaMemsetAsync(void *devPtr, int value, size_t count, cudaStream_t stream = 0);

































extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaMemset2DAsync(void *devPtr, size_t pitch, int value, size_t width, size_t height, cudaStream_t stream = 0);














































extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaMemset3DAsync(struct cudaPitchedPtr pitchedDevPtr, int value, struct cudaExtent extent, cudaStream_t stream = 0);






















extern __declspec(__host__) cudaError_t __stdcall cudaGetSymbolAddress(void **devPtr, const void *symbol);





















extern __declspec(__host__) cudaError_t __stdcall cudaGetSymbolSize(size_t *size, const void *symbol);

 























































































































































extern __declspec(__host__) cudaError_t __stdcall cudaPointerGetAttributes(struct cudaPointerAttributes *attributes, const void *ptr);

 



































extern __declspec(__host__) cudaError_t __stdcall cudaDeviceCanAccessPeer(int *canAccessPeer, int device, int peerDevice);




































extern __declspec(__host__) cudaError_t __stdcall cudaDeviceEnablePeerAccess(int peerDevice, unsigned int flags);


















extern __declspec(__host__) cudaError_t __stdcall cudaDeviceDisablePeerAccess(int peerDevice);

 























































extern __declspec(__host__) cudaError_t __stdcall cudaGraphicsUnregisterResource(cudaGraphicsResource_t resource);































extern __declspec(__host__) cudaError_t __stdcall cudaGraphicsResourceSetMapFlags(cudaGraphicsResource_t resource, unsigned int flags);



































extern __declspec(__host__) cudaError_t __stdcall cudaGraphicsMapResources(int count, cudaGraphicsResource_t *resources, cudaStream_t stream = 0);































extern __declspec(__host__) cudaError_t __stdcall cudaGraphicsUnmapResources(int count, cudaGraphicsResource_t *resources, cudaStream_t stream = 0);




























extern __declspec(__host__) cudaError_t __stdcall cudaGraphicsResourceGetMappedPointer(void **devPtr, size_t *size, cudaGraphicsResource_t resource);

































extern __declspec(__host__) cudaError_t __stdcall cudaGraphicsSubResourceGetMappedArray(cudaArray_t *array, cudaGraphicsResource_t resource, unsigned int arrayIndex, unsigned int mipLevel);
























extern __declspec(__host__) cudaError_t __stdcall cudaGraphicsResourceGetMappedMipmappedArray(cudaMipmappedArray_t *mipmappedArray, cudaGraphicsResource_t resource);

 





































extern __declspec(__host__) cudaError_t __stdcall cudaGetChannelDesc(struct cudaChannelFormatDesc *desc, cudaArray_const_t array);


































extern __declspec(__host__) struct cudaChannelFormatDesc __stdcall cudaCreateChannelDesc(int x, int y, int z, int w, enum cudaChannelFormatKind f);














































extern __declspec(__host__) cudaError_t __stdcall cudaBindTexture(size_t *offset, const struct textureReference *texref, const void *devPtr, const struct cudaChannelFormatDesc *desc, size_t size = 0xffffffff);


















































extern __declspec(__host__) cudaError_t __stdcall cudaBindTexture2D(size_t *offset, const struct textureReference *texref, const void *devPtr, const struct cudaChannelFormatDesc *desc, size_t width, size_t height, size_t pitch);



























extern __declspec(__host__) cudaError_t __stdcall cudaBindTextureToArray(const struct textureReference *texref, cudaArray_const_t array, const struct cudaChannelFormatDesc *desc);



























extern __declspec(__host__) cudaError_t __stdcall cudaBindTextureToMipmappedArray(const struct textureReference *texref, cudaMipmappedArray_const_t mipmappedArray, const struct cudaChannelFormatDesc *desc);




















extern __declspec(__host__) cudaError_t __stdcall cudaUnbindTexture(const struct textureReference *texref);
























extern __declspec(__host__) cudaError_t __stdcall cudaGetTextureAlignmentOffset(size_t *offset, const struct textureReference *texref);
























extern __declspec(__host__) cudaError_t __stdcall cudaGetTextureReference(const struct textureReference **texref, const void *symbol);

 





































extern __declspec(__host__) cudaError_t __stdcall cudaBindSurfaceToArray(const struct surfaceReference *surfref, cudaArray_const_t array, const struct cudaChannelFormatDesc *desc);


















extern __declspec(__host__) cudaError_t __stdcall cudaGetSurfaceReference(const struct surfaceReference **surfref, const void *symbol);

 




















































































































































































































extern __declspec(__host__) cudaError_t __stdcall cudaCreateTextureObject(cudaTextureObject_t *pTexObject, const struct cudaResourceDesc *pResDesc, const struct cudaTextureDesc *pTexDesc, const struct cudaResourceViewDesc *pResViewDesc);














extern __declspec(__host__) cudaError_t __stdcall cudaDestroyTextureObject(cudaTextureObject_t texObject);















extern __declspec(__host__) cudaError_t __stdcall cudaGetTextureObjectResourceDesc(struct cudaResourceDesc *pResDesc, cudaTextureObject_t texObject);















extern __declspec(__host__) cudaError_t __stdcall cudaGetTextureObjectTextureDesc(struct cudaTextureDesc *pTexDesc, cudaTextureObject_t texObject);
















extern __declspec(__host__) cudaError_t __stdcall cudaGetTextureObjectResourceViewDesc(struct cudaResourceViewDesc *pResViewDesc, cudaTextureObject_t texObject);

 


































extern __declspec(__host__) cudaError_t __stdcall cudaCreateSurfaceObject(cudaSurfaceObject_t *pSurfObject, const struct cudaResourceDesc *pResDesc);














extern __declspec(__host__) cudaError_t __stdcall cudaDestroySurfaceObject(cudaSurfaceObject_t surfObject);














extern __declspec(__host__) cudaError_t __stdcall cudaGetSurfaceObjectResourceDesc(struct cudaResourceDesc *pResDesc, cudaSurfaceObject_t surfObject);

 
























extern __declspec(__host__) cudaError_t __stdcall cudaDriverGetVersion(int *driverVersion);
















extern __declspec(__host__) __declspec(__cudart_builtin__) cudaError_t __stdcall cudaRuntimeGetVersion(int *runtimeVersion);

 


extern __declspec(__host__) cudaError_t __stdcall cudaGetExportTable(const void **ppExportTable, const cudaUUID_t *pExportTableId);







































































































































}

#line 6136 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\cuda_runtime_api.h"



#line 6140 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\cuda_runtime_api.h"

#line 63 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\channel_descriptor.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\host_defines.h"












































































































































































































#line 206 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\host_defines.h"
#line 64 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\channel_descriptor.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\vector_types.h"












































































































































































































































































































































































































































#line 430 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\vector_types.h"
#line 65 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\channel_descriptor.h"










































template<class T> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc(void)
{
  return cudaCreateChannelDesc(0, 0, 0, 0, cudaChannelFormatKindNone);
}

static __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDescHalf(void)
{
  int e = (int)sizeof(unsigned short) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindFloat);
}

static __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDescHalf1(void)
{
  int e = (int)sizeof(unsigned short) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindFloat);
}

static __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDescHalf2(void)
{
  int e = (int)sizeof(unsigned short) * 8;

  return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindFloat);
}

static __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDescHalf4(void)
{
  int e = (int)sizeof(unsigned short) * 8;

  return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindFloat);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<char>(void)
{
  int e = (int)sizeof(char) * 8;



#line 147 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\channel_descriptor.h"
  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned);
#line 149 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\channel_descriptor.h"
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<signed char>(void)
{
  int e = (int)sizeof(signed char) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<unsigned char>(void)
{
  int e = (int)sizeof(unsigned char) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<char1>(void)
{
  int e = (int)sizeof(signed char) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<uchar1>(void)
{
  int e = (int)sizeof(unsigned char) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<char2>(void)
{
  int e = (int)sizeof(signed char) * 8;

  return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindSigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<uchar2>(void)
{
  int e = (int)sizeof(unsigned char) * 8;

  return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindUnsigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<char4>(void)
{
  int e = (int)sizeof(signed char) * 8;

  return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindSigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<uchar4>(void)
{
  int e = (int)sizeof(unsigned char) * 8;

  return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindUnsigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<short>(void)
{
  int e = (int)sizeof(short) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<unsigned short>(void)
{
  int e = (int)sizeof(unsigned short) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<short1>(void)
{
  int e = (int)sizeof(short) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<ushort1>(void)
{
  int e = (int)sizeof(unsigned short) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<short2>(void)
{
  int e = (int)sizeof(short) * 8;

  return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindSigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<ushort2>(void)
{
  int e = (int)sizeof(unsigned short) * 8;

  return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindUnsigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<short4>(void)
{
  int e = (int)sizeof(short) * 8;

  return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindSigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<ushort4>(void)
{
  int e = (int)sizeof(unsigned short) * 8;

  return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindUnsigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<int>(void)
{
  int e = (int)sizeof(int) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<unsigned int>(void)
{
  int e = (int)sizeof(unsigned int) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<int1>(void)
{
  int e = (int)sizeof(int) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<uint1>(void)
{
  int e = (int)sizeof(unsigned int) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<int2>(void)
{
  int e = (int)sizeof(int) * 8;

  return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindSigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<uint2>(void)
{
  int e = (int)sizeof(unsigned int) * 8;

  return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindUnsigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<int4>(void)
{
  int e = (int)sizeof(int) * 8;

  return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindSigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<uint4>(void)
{
  int e = (int)sizeof(unsigned int) * 8;

  return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindUnsigned);
}



template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<long>(void)
{
  int e = (int)sizeof(long) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<unsigned long>(void)
{
  int e = (int)sizeof(unsigned long) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<long1>(void)
{
  int e = (int)sizeof(long) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<ulong1>(void)
{
  int e = (int)sizeof(unsigned long) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<long2>(void)
{
  int e = (int)sizeof(long) * 8;

  return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindSigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<ulong2>(void)
{
  int e = (int)sizeof(unsigned long) * 8;

  return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindUnsigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<long4>(void)
{
  int e = (int)sizeof(long) * 8;

  return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindSigned);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<ulong4>(void)
{
  int e = (int)sizeof(unsigned long) * 8;

  return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindUnsigned);
}

#line 378 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\channel_descriptor.h"

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<float>(void)
{
  int e = (int)sizeof(float) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindFloat);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<float1>(void)
{
  int e = (int)sizeof(float) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindFloat);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<float2>(void)
{
  int e = (int)sizeof(float) * 8;

  return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindFloat);
}

template<> __inline __declspec(__host__) cudaChannelFormatDesc cudaCreateChannelDesc<float4>(void)
{
  int e = (int)sizeof(float) * 8;

  return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindFloat);
}

#line 408 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\channel_descriptor.h"


 

#line 413 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\channel_descriptor.h"
#line 69 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v6.0\\include\\cuda_runtime.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\cuda_runtime_api.h"


























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 6140 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\cuda_runtime_api.h"

#line 70 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v6.0\\include\\cuda_runtime.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\driver_functions.h"




















































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\builtin_types.h"























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\device_types.h"




































































#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\device_types.h"
#line 57 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\driver_types.h"




































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1414 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\driver_types.h"

#line 58 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\surface_types.h"






















































































































#line 120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\surface_types.h"
#line 59 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_types.h"




















































































































































































































#line 214 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_types.h"
#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\vector_types.h"












































































































































































































































































































































































































































#line 430 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\vector_types.h"
#line 61 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\builtin_types.h"
#line 54 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\driver_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\host_defines.h"












































































































































































































#line 206 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\host_defines.h"
#line 55 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\driver_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\driver_types.h"




































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1414 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\driver_types.h"

#line 56 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\driver_functions.h"























static __inline __declspec(__host__) struct cudaPitchedPtr make_cudaPitchedPtr(void *d, size_t p, size_t xsz, size_t ysz) 
{
  struct cudaPitchedPtr s;

  s.ptr   = d;
  s.pitch = p;
  s.xsize = xsz;
  s.ysize = ysz;

  return s;
}
















static __inline __declspec(__host__) struct cudaPos make_cudaPos(size_t x, size_t y, size_t z) 
{
  struct cudaPos p;

  p.x = x;
  p.y = y;
  p.z = z;

  return p;
}
















static __inline __declspec(__host__) struct cudaExtent make_cudaExtent(size_t w, size_t h, size_t d) 
{
  struct cudaExtent e;

  e.width  = w;
  e.height = h;
  e.depth  = d;

  return e;
}

 

#line 146 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\driver_functions.h"
#line 71 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v6.0\\include\\cuda_runtime.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\host_defines.h"












































































































































































































#line 206 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\host_defines.h"
#line 72 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v6.0\\include\\cuda_runtime.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\vector_functions.h"


























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\builtin_types.h"























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\device_types.h"




































































#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\device_types.h"
#line 57 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\driver_types.h"




































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1414 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\driver_types.h"

#line 58 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\surface_types.h"






















































































































#line 120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\surface_types.h"
#line 59 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_types.h"




















































































































































































































#line 214 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_types.h"
#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\vector_types.h"












































































































































































































































































































































































































































#line 430 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\vector_types.h"
#line 61 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\builtin_types.h"
#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\vector_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\host_defines.h"












































































































































































































#line 206 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\host_defines.h"
#line 61 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\vector_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\vector_types.h"












































































































































































































































































































































































































































#line 430 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\vector_types.h"
#line 62 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\vector_functions.h"







static __inline __declspec(__host__) __declspec(__device__) char1 make_char1(signed char x)
{
  char1 t; t.x = x; return t;
}

static __inline __declspec(__host__) __declspec(__device__) uchar1 make_uchar1(unsigned char x)
{
  uchar1 t; t.x = x; return t;
}

static __inline __declspec(__host__) __declspec(__device__) char2 make_char2(signed char x, signed char y)
{
  char2 t; t.x = x; t.y = y; return t;
}

static __inline __declspec(__host__) __declspec(__device__) uchar2 make_uchar2(unsigned char x, unsigned char y)
{
  uchar2 t; t.x = x; t.y = y; return t;
}

static __inline __declspec(__host__) __declspec(__device__) char3 make_char3(signed char x, signed char y, signed char z)
{
  char3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline __declspec(__host__) __declspec(__device__) uchar3 make_uchar3(unsigned char x, unsigned char y, unsigned char z)
{
  uchar3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline __declspec(__host__) __declspec(__device__) char4 make_char4(signed char x, signed char y, signed char z, signed char w)
{
  char4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}

static __inline __declspec(__host__) __declspec(__device__) uchar4 make_uchar4(unsigned char x, unsigned char y, unsigned char z, unsigned char w)
{
  uchar4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}

static __inline __declspec(__host__) __declspec(__device__) short1 make_short1(short x)
{
  short1 t; t.x = x; return t;
}

static __inline __declspec(__host__) __declspec(__device__) ushort1 make_ushort1(unsigned short x)
{
  ushort1 t; t.x = x; return t;
}

static __inline __declspec(__host__) __declspec(__device__) short2 make_short2(short x, short y)
{
  short2 t; t.x = x; t.y = y; return t;
}

static __inline __declspec(__host__) __declspec(__device__) ushort2 make_ushort2(unsigned short x, unsigned short y)
{
  ushort2 t; t.x = x; t.y = y; return t;
}

static __inline __declspec(__host__) __declspec(__device__) short3 make_short3(short x,short y, short z)
{ 
  short3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline __declspec(__host__) __declspec(__device__) ushort3 make_ushort3(unsigned short x, unsigned short y, unsigned short z)
{
  ushort3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline __declspec(__host__) __declspec(__device__) short4 make_short4(short x, short y, short z, short w)
{
  short4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}

static __inline __declspec(__host__) __declspec(__device__) ushort4 make_ushort4(unsigned short x, unsigned short y, unsigned short z, unsigned short w)
{
  ushort4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}

static __inline __declspec(__host__) __declspec(__device__) int1 make_int1(int x)
{
  int1 t; t.x = x; return t;
}

static __inline __declspec(__host__) __declspec(__device__) uint1 make_uint1(unsigned int x)
{
  uint1 t; t.x = x; return t;
}

static __inline __declspec(__host__) __declspec(__device__) int2 make_int2(int x, int y)
{
  int2 t; t.x = x; t.y = y; return t;
}

static __inline __declspec(__host__) __declspec(__device__) uint2 make_uint2(unsigned int x, unsigned int y)
{
  uint2 t; t.x = x; t.y = y; return t;
}

static __inline __declspec(__host__) __declspec(__device__) int3 make_int3(int x, int y, int z)
{
  int3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline __declspec(__host__) __declspec(__device__) uint3 make_uint3(unsigned int x, unsigned int y, unsigned int z)
{
  uint3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline __declspec(__host__) __declspec(__device__) int4 make_int4(int x, int y, int z, int w)
{
  int4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}

static __inline __declspec(__host__) __declspec(__device__) uint4 make_uint4(unsigned int x, unsigned int y, unsigned int z, unsigned int w)
{
  uint4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}

static __inline __declspec(__host__) __declspec(__device__) long1 make_long1(long int x)
{
  long1 t; t.x = x; return t;
}

static __inline __declspec(__host__) __declspec(__device__) ulong1 make_ulong1(unsigned long int x)
{
  ulong1 t; t.x = x; return t;
}

static __inline __declspec(__host__) __declspec(__device__) long2 make_long2(long int x, long int y)
{
  long2 t; t.x = x; t.y = y; return t;
}

static __inline __declspec(__host__) __declspec(__device__) ulong2 make_ulong2(unsigned long int x, unsigned long int y)
{
  ulong2 t; t.x = x; t.y = y; return t;
}

static __inline __declspec(__host__) __declspec(__device__) long3 make_long3(long int x, long int y, long int z)
{
  long3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline __declspec(__host__) __declspec(__device__) ulong3 make_ulong3(unsigned long int x, unsigned long int y, unsigned long int z)
{
  ulong3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline __declspec(__host__) __declspec(__device__) long4 make_long4(long int x, long int y, long int z, long int w)
{
  long4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}

static __inline __declspec(__host__) __declspec(__device__) ulong4 make_ulong4(unsigned long int x, unsigned long int y, unsigned long int z, unsigned long int w)
{
  ulong4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}

static __inline __declspec(__host__) __declspec(__device__) float1 make_float1(float x)
{
  float1 t; t.x = x; return t;
}

static __inline __declspec(__host__) __declspec(__device__) float2 make_float2(float x, float y)
{
  float2 t; t.x = x; t.y = y; return t;
}

static __inline __declspec(__host__) __declspec(__device__) float3 make_float3(float x, float y, float z)
{
  float3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline __declspec(__host__) __declspec(__device__) float4 make_float4(float x, float y, float z, float w)
{
  float4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}

static __inline __declspec(__host__) __declspec(__device__) longlong1 make_longlong1(long long int x)
{
  longlong1 t; t.x = x; return t;
}

static __inline __declspec(__host__) __declspec(__device__) ulonglong1 make_ulonglong1(unsigned long long int x)
{
  ulonglong1 t; t.x = x; return t;
}

static __inline __declspec(__host__) __declspec(__device__) longlong2 make_longlong2(long long int x, long long int y)
{
  longlong2 t; t.x = x; t.y = y; return t;
}

static __inline __declspec(__host__) __declspec(__device__) ulonglong2 make_ulonglong2(unsigned long long int x, unsigned long long int y)
{
  ulonglong2 t; t.x = x; t.y = y; return t;
}

static __inline __declspec(__host__) __declspec(__device__) longlong3 make_longlong3(long long int x, long long int y, long long int z)
{
  longlong3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline __declspec(__host__) __declspec(__device__) ulonglong3 make_ulonglong3(unsigned long long int x, unsigned long long int y, unsigned long long int z)
{
  ulonglong3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline __declspec(__host__) __declspec(__device__) longlong4 make_longlong4(long long int x, long long int y, long long int z, long long int w)
{
  longlong4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}

static __inline __declspec(__host__) __declspec(__device__) ulonglong4 make_ulonglong4(unsigned long long int x, unsigned long long int y, unsigned long long int z, unsigned long long int w)
{
  ulonglong4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}

static __inline __declspec(__host__) __declspec(__device__) double1 make_double1(double x)
{
  double1 t; t.x = x; return t;
}

static __inline __declspec(__host__) __declspec(__device__) double2 make_double2(double x, double y)
{
  double2 t; t.x = x; t.y = y; return t;
}

static __inline __declspec(__host__) __declspec(__device__) double3 make_double3(double x, double y, double z)
{
  double3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline __declspec(__host__) __declspec(__device__) double4 make_double4(double x, double y, double z, double w)
{
  double4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}

#line 310 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\vector_functions.h"
#line 73 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v6.0\\include\\cuda_runtime.h"



#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\common_functions.h"




























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\builtin_types.h"























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\device_types.h"




































































#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\device_types.h"
#line 57 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\driver_types.h"




































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1414 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\driver_types.h"

#line 58 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\surface_types.h"






















































































































#line 120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\surface_types.h"
#line 59 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_types.h"




















































































































































































































#line 214 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_types.h"
#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\vector_types.h"












































































































































































































































































































































































































































#line 430 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\vector_types.h"
#line 61 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\builtin_types.h"
#line 62 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\common_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\host_defines.h"












































































































































































































#line 206 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\host_defines.h"
#line 63 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\common_functions.h"

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\string.h"














#pragma once




#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"














 








































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 21 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\string.h"


extern "C" {
#line 25 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\string.h"




#line 30 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\string.h"
















__declspec(dllimport) void *  __cdecl _memccpy(   void * _Dst,   const void * _Src,   int _Val,   size_t _MaxCount);
 __declspec(dllimport) const void *  __cdecl memchr(    const void * _Buf ,   int _Val,   size_t _MaxCount);
 __declspec(dllimport) int     __cdecl _memicmp(   const void * _Buf1,    const void * _Buf2,   size_t _Size);
 __declspec(dllimport) int     __cdecl _memicmp_l(   const void * _Buf1,    const void * _Buf2,   size_t _Size,    _locale_t _Locale);
         int     __cdecl memcmp(   const void * _Buf1,    const void * _Buf2,   size_t _Size);
         void *  __cdecl memcpy(    void * _Dst,    const void * _Src,   size_t _Size);

__declspec(dllimport) errno_t  __cdecl memcpy_s(    void * _Dst,   rsize_t _DstSize,    const void * _Src,   rsize_t _MaxCount);





















#line 76 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\string.h"










#line 87 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\string.h"
#line 88 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\string.h"
        void *  __cdecl memset(    void * _Dst,   int _Val,   size_t _Size);



 __declspec(dllimport) void * __cdecl memccpy(  void * _Dst,    const void * _Src,   int _Val,   size_t _Size);
  __declspec(dllimport) int __cdecl memicmp(   const void * _Buf1,    const void * _Buf2,   size_t _Size);
#line 95 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\string.h"

#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\string.h"

 __declspec(dllimport) errno_t __cdecl _strset_s(    char * _Dst,   size_t _DstSize,   int _Value);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _strset_s(    char (&_Dest)[_Size],   int _Value) throw() { return _strset_s(_Dest, _Size, _Value); } }
  char * __cdecl _strset(  char *_Dest,  int _Value);

 __declspec(dllimport) errno_t __cdecl strcpy_s(    char * _Dst,   rsize_t _SizeInBytes,    const char * _Src);
#line 104 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\string.h"
extern "C++" { template <size_t _Size> inline errno_t __cdecl strcpy_s(  char (&_Dest)[_Size],    const char * _Source) throw() { return strcpy_s(_Dest, _Size, _Source); } }
  char * __cdecl strcpy(  char *_Dest,  const char * _Source);

 __declspec(dllimport) errno_t __cdecl strcat_s(    char * _Dst,   rsize_t _SizeInBytes,    const char * _Src);
#line 109 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\string.h"
extern "C++" { template <size_t _Size> inline errno_t __cdecl strcat_s(    char (&_Dest)[_Size],    const char * _Source) throw() { return strcat_s(_Dest, _Size, _Source); } }
  char * __cdecl strcat(  char *_Dest,  const char * _Source);
         int     __cdecl strcmp(   const char * _Str1,    const char * _Str2);
         size_t  __cdecl strlen(   const char * _Str);
 __declspec(dllimport) size_t  __cdecl strnlen(   const char * _Str,   size_t _MaxCount);

 static __inline size_t  __cdecl strnlen_s(    const char * _Str,   size_t _MaxCount)
{
    return (_Str==0) ? 0 : strnlen(_Str, _MaxCount);
}
#line 120 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\string.h"

 __declspec(dllimport) errno_t __cdecl memmove_s(    void * _Dst,   rsize_t _DstSize,    const void * _Src,   rsize_t _MaxCount);
#line 123 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\string.h"



#line 127 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\string.h"
__declspec(dllimport)  void *  __cdecl memmove(    void * _Dst,    const void * _Src,   size_t _Size);
#line 129 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\string.h"




#line 134 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\string.h"

 __declspec(dllimport) char *  __cdecl _strdup(   const char * _Src);



#line 140 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\string.h"

 __declspec(dllimport) const char *  __cdecl strchr(   const char * _Str,   int _Val);
 __declspec(dllimport) int     __cdecl _stricmp(    const char * _Str1,     const char * _Str2);
 __declspec(dllimport) int     __cdecl _strcmpi(    const char * _Str1,     const char * _Str2);
 __declspec(dllimport) int     __cdecl _stricmp_l(    const char * _Str1,     const char * _Str2,    _locale_t _Locale);
 __declspec(dllimport) int     __cdecl strcoll(    const char * _Str1,     const  char * _Str2);
 __declspec(dllimport) int     __cdecl _strcoll_l(    const char * _Str1,     const char * _Str2,    _locale_t _Locale);
 __declspec(dllimport) int     __cdecl _stricoll(    const char * _Str1,     const char * _Str2);
 __declspec(dllimport) int     __cdecl _stricoll_l(    const char * _Str1,     const char * _Str2,    _locale_t _Locale);
 __declspec(dllimport) int     __cdecl _strncoll  (   const char * _Str1,    const char * _Str2,   size_t _MaxCount);
 __declspec(dllimport) int     __cdecl _strncoll_l(   const char * _Str1,    const char * _Str2,   size_t _MaxCount,    _locale_t _Locale);
 __declspec(dllimport) int     __cdecl _strnicoll (   const char * _Str1,    const char * _Str2,   size_t _MaxCount);
 __declspec(dllimport) int     __cdecl _strnicoll_l(   const char * _Str1,    const char * _Str2,   size_t _MaxCount,    _locale_t _Locale);
 __declspec(dllimport) size_t  __cdecl strcspn(    const char * _Str,     const char * _Control);
  __declspec(dllimport) char *  __cdecl _strerror(   const char * _ErrMsg);
 __declspec(dllimport) errno_t __cdecl _strerror_s(    char * _Buf,   size_t _SizeInBytes,    const char * _ErrMsg);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _strerror_s(char (&_Buffer)[_Size],    const char * _ErrorMessage) throw() { return _strerror_s(_Buffer, _Size, _ErrorMessage); } }
  __declspec(dllimport) char *  __cdecl strerror(  int);

 __declspec(dllimport) errno_t __cdecl strerror_s(    char * _Buf,   size_t _SizeInBytes,   int _ErrNum);
#line 161 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\string.h"
extern "C++" { template <size_t _Size> inline errno_t __cdecl strerror_s(char (&_Buffer)[_Size],   int _ErrorMessage) throw() { return strerror_s(_Buffer, _Size, _ErrorMessage); } }
 __declspec(dllimport) errno_t __cdecl _strlwr_s(    char * _Str,   size_t _Size);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _strlwr_s(    char (&_String)[_Size]) throw() { return _strlwr_s(_String, _Size); } }
 __declspec(dllimport) char * __cdecl _strlwr(  char *_String);
 __declspec(dllimport) errno_t __cdecl _strlwr_s_l(    char * _Str,   size_t _Size,    _locale_t _Locale);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _strlwr_s_l(    char (&_String)[_Size],    _locale_t _Locale) throw() { return _strlwr_s_l(_String, _Size, _Locale); } }
 __declspec(dllimport) char * __cdecl _strlwr_l(    char *_String,    _locale_t _Locale);

 __declspec(dllimport) errno_t __cdecl strncat_s(    char * _Dst,   rsize_t _SizeInBytes,    const char * _Src,   rsize_t _MaxCount);
#line 171 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\string.h"
extern "C++" { template <size_t _Size> inline errno_t __cdecl strncat_s(    char (&_Dest)[_Size],    const char * _Source,   size_t _Count) throw() { return strncat_s(_Dest, _Size, _Source, _Count); } }
#pragma warning(push)
#pragma warning(disable:6059)

 __declspec(dllimport) char * __cdecl strncat(    char *_Dest,    const char * _Source,   size_t _Count);
#pragma warning(pop)


#line 180 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\string.h"
 __declspec(dllimport) int     __cdecl strncmp(   const char * _Str1,    const char * _Str2,   size_t _MaxCount);
#line 182 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\string.h"
 __declspec(dllimport) int     __cdecl _strnicmp(   const char * _Str1,    const char * _Str2,   size_t _MaxCount);
 __declspec(dllimport) int     __cdecl _strnicmp_l(   const char * _Str1,    const char * _Str2,   size_t _MaxCount,    _locale_t _Locale);

 __declspec(dllimport) errno_t __cdecl strncpy_s(    char * _Dst,   rsize_t _SizeInBytes,    const char * _Src,   rsize_t _MaxCount);
#line 187 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\string.h"
extern "C++" { template <size_t _Size> inline errno_t __cdecl strncpy_s(char (&_Dest)[_Size],    const char * _Source,   size_t _Count) throw() { return strncpy_s(_Dest, _Size, _Source, _Count); } }
 __declspec(dllimport) char * __cdecl strncpy(   char *_Dest,    const char * _Source,   size_t _Count);
 __declspec(dllimport) errno_t __cdecl _strnset_s(    char * _Str,   size_t _SizeInBytes,   int _Val,   size_t _MaxCount);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _strnset_s(    char (&_Dest)[_Size],   int _Val,   size_t _Count) throw() { return _strnset_s(_Dest, _Size, _Val, _Count); } }
 __declspec(dllimport) char * __cdecl _strnset(    char *_Dest,   int _Val,   size_t _Count);
 __declspec(dllimport) const char *  __cdecl strpbrk(   const char * _Str,    const char * _Control);
 __declspec(dllimport) const char *  __cdecl strrchr(   const char * _Str,   int _Ch);
__declspec(dllimport) char *  __cdecl _strrev(    char * _Str);
 __declspec(dllimport) size_t  __cdecl strspn(   const char * _Str,    const char * _Control);
 __declspec(dllimport) const char *  __cdecl strstr(   const char * _Str,    const char * _SubStr);
  __declspec(dllimport) char *  __cdecl strtok(    char * _Str,    const char * _Delim);

 __declspec(dllimport) char *  __cdecl strtok_s(    char * _Str,    const char * _Delim,        char ** _Context);
#line 201 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\string.h"
 __declspec(dllimport) errno_t __cdecl _strupr_s(    char * _Str,   size_t _Size);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _strupr_s(    char (&_String)[_Size]) throw() { return _strupr_s(_String, _Size); } }
 __declspec(dllimport) char * __cdecl _strupr(  char *_String);
 __declspec(dllimport) errno_t __cdecl _strupr_s_l(    char * _Str,   size_t _Size, _locale_t _Locale);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _strupr_s_l(    char (&_String)[_Size], _locale_t _Locale) throw() { return _strupr_s_l(_String, _Size, _Locale); } }
 __declspec(dllimport) char * __cdecl _strupr_l(    char *_String,    _locale_t _Locale);
 __declspec(dllimport) size_t  __cdecl strxfrm (   char * _Dst,    const char * _Src,   size_t _MaxCount);
 __declspec(dllimport) size_t  __cdecl _strxfrm_l(   char * _Dst,    const char * _Src,   size_t _MaxCount,    _locale_t _Locale);


extern "C++" {


 inline char * __cdecl strchr(   char * _Str,   int _Ch)
	{ return (char*)strchr((const char*)_Str, _Ch); }
 inline char * __cdecl strpbrk(   char * _Str,    const char * _Control)
	{ return (char*)strpbrk((const char*)_Str, _Control); }
 inline char * __cdecl strrchr(   char * _Str,   int _Ch)
	{ return (char*)strrchr((const char*)_Str, _Ch); }
 inline char * __cdecl strstr(   char * _Str,    const char * _SubStr)
	{ return (char*)strstr((const char*)_Str, _SubStr); }
#line 223 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\string.h"


 inline void * __cdecl memchr(   void * _Pv,   int _C,   size_t _N)
	{ return (void*)memchr((const void*)_Pv, _C, _N); }
#line 228 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\string.h"
}
#line 230 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\string.h"






#line 237 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\string.h"

  __declspec(dllimport) char * __cdecl strdup(   const char * _Src);



#line 243 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\string.h"


  __declspec(dllimport) int __cdecl strcmpi(   const char * _Str1,    const char * _Str2);
  __declspec(dllimport) int __cdecl stricmp(   const char * _Str1,    const char * _Str2);
 __declspec(dllimport) char * __cdecl strlwr(    char * _Str);
  __declspec(dllimport) int __cdecl strnicmp(   const char * _Str1,    const char * _Str,   size_t _MaxCount);
 __declspec(dllimport) char * __cdecl strnset(    char * _Str,   int _Val,   size_t _MaxCount);
 __declspec(dllimport) char * __cdecl strrev(    char * _Str);
         char * __cdecl strset(    char * _Str,   int _Val);
 __declspec(dllimport) char * __cdecl strupr(    char * _Str);

#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\string.h"









#line 265 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\string.h"

 __declspec(dllimport) wchar_t * __cdecl _wcsdup(   const wchar_t * _Str);



#line 271 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\string.h"


 __declspec(dllimport) errno_t __cdecl wcscat_s(    wchar_t * _Dst,   rsize_t _SizeInWords,    const wchar_t * _Src);
#line 275 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\string.h"
extern "C++" { template <size_t _Size> inline errno_t __cdecl wcscat_s(    wchar_t (&_Dest)[_Size],    const wchar_t * _Source) throw() { return wcscat_s(_Dest, _Size, _Source); } }
 __declspec(dllimport) wchar_t * __cdecl wcscat(  wchar_t *_Dest,  const wchar_t * _Source);
 __declspec(dllimport) const wchar_t * __cdecl wcschr(   const wchar_t * _Str, wchar_t _Ch);
 __declspec(dllimport) int __cdecl wcscmp(   const wchar_t * _Str1,    const wchar_t * _Str2);

 __declspec(dllimport) errno_t __cdecl wcscpy_s(    wchar_t * _Dst,   rsize_t _SizeInWords,    const wchar_t * _Src);
#line 282 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\string.h"
extern "C++" { template <size_t _Size> inline errno_t __cdecl wcscpy_s(wchar_t (&_Dest)[_Size],    const wchar_t * _Source) throw() { return wcscpy_s(_Dest, _Size, _Source); } }
 __declspec(dllimport) wchar_t * __cdecl wcscpy(  wchar_t *_Dest,  const wchar_t * _Source);
 __declspec(dllimport) size_t __cdecl wcscspn(   const wchar_t * _Str,    const wchar_t * _Control);
 __declspec(dllimport) size_t __cdecl wcslen(   const wchar_t * _Str);
 __declspec(dllimport) size_t __cdecl wcsnlen(   const wchar_t * _Src,   size_t _MaxCount);

 static __inline size_t __cdecl wcsnlen_s(   const wchar_t * _Src,   size_t _MaxCount)
{
    return (_Src == 0) ? 0 : wcsnlen(_Src, _MaxCount);
}
#line 293 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\string.h"

 __declspec(dllimport) errno_t __cdecl wcsncat_s(    wchar_t * _Dst,   rsize_t _SizeInWords,    const wchar_t * _Src,   rsize_t _MaxCount);
#line 296 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\string.h"
extern "C++" { template <size_t _Size> inline errno_t __cdecl wcsncat_s(    wchar_t (&_Dest)[_Size],    const wchar_t * _Source,   size_t _Count) throw() { return wcsncat_s(_Dest, _Size, _Source, _Count); } }
#pragma warning(push)
#pragma warning(disable:6059)
 __declspec(dllimport) wchar_t * __cdecl wcsncat(    wchar_t *_Dest,    const wchar_t * _Source,   size_t _Count);
#pragma warning(pop)
 __declspec(dllimport) int __cdecl wcsncmp(   const wchar_t * _Str1,    const wchar_t * _Str2,   size_t _MaxCount);

 __declspec(dllimport) errno_t __cdecl wcsncpy_s(    wchar_t * _Dst,   rsize_t _SizeInWords,    const wchar_t * _Src,   rsize_t _MaxCount);
#line 305 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\string.h"
extern "C++" { template <size_t _Size> inline errno_t __cdecl wcsncpy_s(wchar_t (&_Dest)[_Size],    const wchar_t * _Source,   size_t _Count) throw() { return wcsncpy_s(_Dest, _Size, _Source, _Count); } }
 __declspec(dllimport) wchar_t * __cdecl wcsncpy(   wchar_t *_Dest,    const wchar_t * _Source,   size_t _Count);
 __declspec(dllimport) const wchar_t * __cdecl wcspbrk(   const wchar_t * _Str,    const wchar_t * _Control);
 __declspec(dllimport) const wchar_t * __cdecl wcsrchr(   const wchar_t * _Str,   wchar_t _Ch);
 __declspec(dllimport) size_t __cdecl wcsspn(   const wchar_t * _Str,    const wchar_t * _Control);
 __declspec(dllimport) const wchar_t * __cdecl wcsstr(   const wchar_t * _Str,    const wchar_t * _SubStr);
  __declspec(dllimport) wchar_t * __cdecl wcstok(    wchar_t * _Str,    const wchar_t * _Delim);

 __declspec(dllimport) wchar_t * __cdecl wcstok_s(    wchar_t * _Str,    const wchar_t * _Delim,        wchar_t ** _Context);
#line 315 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\string.h"
  __declspec(dllimport) wchar_t * __cdecl _wcserror(  int _ErrNum);
 __declspec(dllimport) errno_t __cdecl _wcserror_s(    wchar_t * _Buf,   size_t _SizeInWords,   int _ErrNum);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcserror_s(wchar_t (&_Buffer)[_Size],   int _Error) throw() { return _wcserror_s(_Buffer, _Size, _Error); } }
  __declspec(dllimport) wchar_t * __cdecl __wcserror(   const wchar_t * _Str);
 __declspec(dllimport) errno_t __cdecl __wcserror_s(    wchar_t * _Buffer,   size_t _SizeInWords,    const wchar_t * _ErrMsg);
extern "C++" { template <size_t _Size> inline errno_t __cdecl __wcserror_s(wchar_t (&_Buffer)[_Size],    const wchar_t * _ErrorMessage) throw() { return __wcserror_s(_Buffer, _Size, _ErrorMessage); } }

 __declspec(dllimport) int __cdecl _wcsicmp(   const wchar_t * _Str1,    const wchar_t * _Str2);
 __declspec(dllimport) int __cdecl _wcsicmp_l(   const wchar_t * _Str1,    const wchar_t * _Str2,    _locale_t _Locale);
 __declspec(dllimport) int __cdecl _wcsnicmp(   const wchar_t * _Str1,    const wchar_t * _Str2,   size_t _MaxCount);
 __declspec(dllimport) int __cdecl _wcsnicmp_l(   const wchar_t * _Str1,    const wchar_t * _Str2,   size_t _MaxCount,    _locale_t _Locale);
 __declspec(dllimport) errno_t __cdecl _wcsnset_s(    wchar_t * _Dst,   size_t _SizeInWords,   wchar_t _Val,   size_t _MaxCount);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcsnset_s(    wchar_t (&_Dst)[_Size], wchar_t _Val,   size_t _MaxCount) throw() { return _wcsnset_s(_Dst, _Size, _Val, _MaxCount); } }
 __declspec(dllimport) wchar_t * __cdecl _wcsnset(    wchar_t *_Str, wchar_t _Val,   size_t _MaxCount);
__declspec(dllimport) wchar_t * __cdecl _wcsrev(    wchar_t * _Str);
 __declspec(dllimport) errno_t __cdecl _wcsset_s(    wchar_t * _Dst,   size_t _SizeInWords,   wchar_t _Value);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcsset_s(    wchar_t (&_Str)[_Size], wchar_t _Val) throw() { return _wcsset_s(_Str, _Size, _Val); } }
 __declspec(dllimport) wchar_t * __cdecl _wcsset(    wchar_t *_Str, wchar_t _Val);

 __declspec(dllimport) errno_t __cdecl _wcslwr_s(    wchar_t * _Str,   size_t _SizeInWords);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcslwr_s(    wchar_t (&_String)[_Size]) throw() { return _wcslwr_s(_String, _Size); } }
 __declspec(dllimport) wchar_t * __cdecl _wcslwr(  wchar_t *_String);
 __declspec(dllimport) errno_t __cdecl _wcslwr_s_l(    wchar_t * _Str,   size_t _SizeInWords,    _locale_t _Locale);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcslwr_s_l(    wchar_t (&_String)[_Size],    _locale_t _Locale) throw() { return _wcslwr_s_l(_String, _Size, _Locale); } }
 __declspec(dllimport) wchar_t * __cdecl _wcslwr_l(    wchar_t *_String,    _locale_t _Locale);
 __declspec(dllimport) errno_t __cdecl _wcsupr_s(    wchar_t * _Str,   size_t _Size);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcsupr_s(    wchar_t (&_String)[_Size]) throw() { return _wcsupr_s(_String, _Size); } }
 __declspec(dllimport) wchar_t * __cdecl _wcsupr(  wchar_t *_String);
 __declspec(dllimport) errno_t __cdecl _wcsupr_s_l(    wchar_t * _Str,   size_t _Size,    _locale_t _Locale);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcsupr_s_l(    wchar_t (&_String)[_Size],    _locale_t _Locale) throw() { return _wcsupr_s_l(_String, _Size, _Locale); } }
 __declspec(dllimport) wchar_t * __cdecl _wcsupr_l(    wchar_t *_String,    _locale_t _Locale);
 __declspec(dllimport) size_t __cdecl wcsxfrm(   wchar_t * _Dst,    const wchar_t * _Src,   size_t _MaxCount);
 __declspec(dllimport) size_t __cdecl _wcsxfrm_l(   wchar_t * _Dst,    const wchar_t *_Src,   size_t _MaxCount,    _locale_t _Locale);
 __declspec(dllimport) int __cdecl wcscoll(   const wchar_t * _Str1,    const wchar_t * _Str2);
 __declspec(dllimport) int __cdecl _wcscoll_l(   const wchar_t * _Str1,    const wchar_t * _Str2,    _locale_t _Locale);
 __declspec(dllimport) int __cdecl _wcsicoll(   const wchar_t * _Str1,    const wchar_t * _Str2);
 __declspec(dllimport) int __cdecl _wcsicoll_l(   const wchar_t * _Str1,    const wchar_t *_Str2,    _locale_t _Locale);
 __declspec(dllimport) int __cdecl _wcsncoll(   const wchar_t * _Str1,    const wchar_t * _Str2,   size_t _MaxCount);
 __declspec(dllimport) int __cdecl _wcsncoll_l(   const wchar_t * _Str1,    const wchar_t * _Str2,   size_t _MaxCount,    _locale_t _Locale);
 __declspec(dllimport) int __cdecl _wcsnicoll(   const wchar_t * _Str1,    const wchar_t * _Str2,   size_t _MaxCount);
 __declspec(dllimport) int __cdecl _wcsnicoll_l(   const wchar_t * _Str1,    const wchar_t * _Str2,   size_t _MaxCount,    _locale_t _Locale);




extern "C++" {
 inline wchar_t * __cdecl wcschr(   wchar_t *_Str, wchar_t _Ch)
        {return ((wchar_t *)wcschr((const wchar_t *)_Str, _Ch)); }
 inline wchar_t * __cdecl wcspbrk(   wchar_t *_Str,    const wchar_t *_Control)
        {return ((wchar_t *)wcspbrk((const wchar_t *)_Str, _Control)); }
 inline wchar_t * __cdecl wcsrchr(   wchar_t *_Str,   wchar_t _Ch)
        {return ((wchar_t *)wcsrchr((const wchar_t *)_Str, _Ch)); }
 inline wchar_t * __cdecl wcsstr(   wchar_t *_Str,    const wchar_t *_SubStr)
        {return ((wchar_t *)wcsstr((const wchar_t *)_Str, _SubStr)); }
}
#line 371 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\string.h"
#line 372 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\string.h"






#line 379 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\string.h"

  __declspec(dllimport) wchar_t * __cdecl wcsdup(   const wchar_t * _Str);



#line 385 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\string.h"





  __declspec(dllimport) int __cdecl wcsicmp(   const wchar_t * _Str1,    const wchar_t * _Str2);
  __declspec(dllimport) int __cdecl wcsnicmp(   const wchar_t * _Str1,    const wchar_t * _Str2,   size_t _MaxCount);
 __declspec(dllimport) wchar_t * __cdecl wcsnset(    wchar_t * _Str,   wchar_t _Val,   size_t _MaxCount);
 __declspec(dllimport) wchar_t * __cdecl wcsrev(    wchar_t * _Str);
 __declspec(dllimport) wchar_t * __cdecl wcsset(    wchar_t * _Str, wchar_t _Val);
 __declspec(dllimport) wchar_t * __cdecl wcslwr(    wchar_t * _Str);
 __declspec(dllimport) wchar_t * __cdecl wcsupr(    wchar_t * _Str);
  __declspec(dllimport) int __cdecl wcsicoll(   const wchar_t * _Str1,    const wchar_t * _Str2);

#line 400 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\string.h"


#line 403 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\string.h"



}
#line 408 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\string.h"

#line 410 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\string.h"
#line 65 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\common_functions.h"
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\time.h"















#pragma once




#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"














 








































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 22 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\time.h"



#line 26 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\time.h"






#pragma pack(push,8)


extern "C" {
#line 37 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\time.h"








#line 46 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\time.h"




































typedef long clock_t;

#line 85 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\time.h"





















struct tm {
        int tm_sec;     
        int tm_min;     
        int tm_hour;    
        int tm_mday;    
        int tm_mon;     
        int tm_year;    
        int tm_wday;    
        int tm_yday;    
        int tm_isdst;   
        };

#line 119 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\time.h"












  __declspec(dllimport) int* __cdecl __daylight(void);



  __declspec(dllimport) long* __cdecl __dstbias(void);



  __declspec(dllimport) long* __cdecl __timezone(void);



   __declspec(dllimport) char ** __cdecl __tzname(void);


__declspec(dllimport) errno_t __cdecl _get_daylight(  int * _Daylight);
__declspec(dllimport) errno_t __cdecl _get_dstbias(  long * _Daylight_savings_bias);
__declspec(dllimport) errno_t __cdecl _get_timezone(  long * _Timezone);
__declspec(dllimport) errno_t __cdecl _get_tzname(  size_t *_ReturnValue,     char *_Buffer,   size_t _SizeInBytes,   int _Index);



  __declspec(dllimport) char * __cdecl asctime(  const struct tm * _Tm);

 __declspec(dllimport) errno_t __cdecl asctime_s(    char *_Buf,   size_t _SizeInBytes,   const struct tm * _Tm);
#line 157 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\time.h"
extern "C++" { template <size_t _Size> inline errno_t __cdecl asctime_s(  char (&_Buffer)[_Size],   const struct tm * _Time) throw() { return asctime_s(_Buffer, _Size, _Time); } }

 __declspec(dllimport) char * __cdecl _ctime32(  const __time32_t * _Time);
__declspec(dllimport) errno_t __cdecl _ctime32_s(    char *_Buf,   size_t _SizeInBytes,   const __time32_t *_Time);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _ctime32_s(  char (&_Buffer)[_Size],   const __time32_t * _Time) throw() { return _ctime32_s(_Buffer, _Size, _Time); } }

 __declspec(dllimport) clock_t __cdecl clock(void);
__declspec(dllimport) double __cdecl _difftime32(  __time32_t _Time1,   __time32_t _Time2);

  __declspec(dllimport) struct tm * __cdecl _gmtime32(  const __time32_t * _Time);
 __declspec(dllimport) errno_t __cdecl _gmtime32_s(  struct tm *_Tm,   const __time32_t * _Time);

 __declspec(dllimport) struct tm * __cdecl _localtime32(  const __time32_t * _Time);
__declspec(dllimport) errno_t __cdecl _localtime32_s(  struct tm *_Tm,   const __time32_t * _Time);

__declspec(dllimport) size_t __cdecl strftime(    char * _Buf,   size_t _SizeInBytes,     const char * _Format,   const struct tm * _Tm);
__declspec(dllimport) size_t __cdecl _strftime_l(   char *_Buf,   size_t _Max_size,     const char * _Format,   const struct tm *_Tm,    _locale_t _Locale);

 __declspec(dllimport) errno_t __cdecl _strdate_s(    char *_Buf,   size_t _SizeInBytes);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _strdate_s(  char (&_Buffer)[_Size]) throw() { return _strdate_s(_Buffer, _Size); } }
 __declspec(dllimport) char * __cdecl _strdate(  char *_Buffer);

 __declspec(dllimport) errno_t __cdecl _strtime_s(    char *_Buf ,   size_t _SizeInBytes);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _strtime_s(  char (&_Buffer)[_Size]) throw() { return _strtime_s(_Buffer, _Size); } }
 __declspec(dllimport) char * __cdecl _strtime(  char *_Buffer);

__declspec(dllimport) __time32_t __cdecl _time32(  __time32_t * _Time);
__declspec(dllimport) __time32_t __cdecl _mktime32(   struct tm * _Tm);
__declspec(dllimport) __time32_t __cdecl _mkgmtime32(   struct tm * _Tm);




__declspec(dllimport) void __cdecl _tzset(void);
#line 192 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\time.h"

 __declspec(dllimport) double __cdecl _difftime64(  __time64_t _Time1,   __time64_t _Time2);
 __declspec(dllimport) char * __cdecl _ctime64(  const __time64_t * _Time);
__declspec(dllimport) errno_t __cdecl _ctime64_s(    char *_Buf,   size_t _SizeInBytes,   const __time64_t * _Time);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _ctime64_s(char (&_Buffer)[_Size],   const __time64_t * _Time) throw() { return _ctime64_s(_Buffer, _Size, _Time); } }

 __declspec(dllimport) struct tm * __cdecl _gmtime64(  const __time64_t * _Time);
__declspec(dllimport) errno_t __cdecl _gmtime64_s(  struct tm *_Tm,   const __time64_t *_Time);

 __declspec(dllimport) struct tm * __cdecl _localtime64(  const __time64_t * _Time);
__declspec(dllimport) errno_t __cdecl _localtime64_s(  struct tm *_Tm,   const __time64_t *_Time);

__declspec(dllimport) __time64_t __cdecl _mktime64(   struct tm * _Tm);
__declspec(dllimport) __time64_t __cdecl _mkgmtime64(   struct tm * _Tm);
__declspec(dllimport) __time64_t __cdecl _time64(  __time64_t * _Time);


__declspec(deprecated("This function or variable has been superceded by newer library or operating system functionality. Consider using " "GetLocalTime" " instead. See online help for details.")) unsigned __cdecl _getsystime(  struct tm * _Tm);
__declspec(deprecated("This function or variable has been superceded by newer library or operating system functionality. Consider using " "SetLocalTime" " instead. See online help for details.")) unsigned __cdecl _setsystime(  struct tm * _Tm, unsigned _MilliSec);










 
 __declspec(dllimport) wchar_t * __cdecl _wasctime(  const struct tm * _Tm);
__declspec(dllimport) errno_t __cdecl _wasctime_s(    wchar_t *_Buf,   size_t _SizeInWords,   const struct tm * _Tm);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _wasctime_s(  wchar_t (&_Buffer)[_Size],   const struct tm * _Time) throw() { return _wasctime_s(_Buffer, _Size, _Time); } }

 __declspec(dllimport) wchar_t * __cdecl _wctime32(  const __time32_t *_Time);
__declspec(dllimport) errno_t __cdecl _wctime32_s(    wchar_t* _Buf,   size_t _SizeInWords,   const __time32_t * _Time);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _wctime32_s(  wchar_t (&_Buffer)[_Size],   const __time32_t * _Time) throw() { return _wctime32_s(_Buffer, _Size, _Time); } }

__declspec(dllimport) size_t __cdecl wcsftime(    wchar_t * _Buf,   size_t _SizeInWords,     const wchar_t * _Format,    const struct tm * _Tm);
__declspec(dllimport) size_t __cdecl _wcsftime_l(    wchar_t * _Buf,   size_t _SizeInWords,     const wchar_t *_Format,   const struct tm *_Tm,    _locale_t _Locale);

__declspec(dllimport) errno_t __cdecl _wstrdate_s(    wchar_t * _Buf,   size_t _SizeInWords);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _wstrdate_s(  wchar_t (&_Buffer)[_Size]) throw() { return _wstrdate_s(_Buffer, _Size); } }
 __declspec(dllimport) wchar_t * __cdecl _wstrdate(  wchar_t *_Buffer);

__declspec(dllimport) errno_t __cdecl _wstrtime_s(    wchar_t * _Buf,   size_t _SizeInWords);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _wstrtime_s(  wchar_t (&_Buffer)[_Size]) throw() { return _wstrtime_s(_Buffer, _Size); } }
 __declspec(dllimport) wchar_t * __cdecl _wstrtime(  wchar_t *_Buffer);

 __declspec(dllimport) wchar_t * __cdecl _wctime64(  const __time64_t * _Time);
__declspec(dllimport) errno_t __cdecl _wctime64_s(    wchar_t* _Buf,   size_t _SizeInWords,   const __time64_t *_Time);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _wctime64_s(  wchar_t (&_Buffer)[_Size],   const __time64_t * _Time) throw() { return _wctime64_s(_Buffer, _Size, _Time); } }


#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\wtime.inl"












#pragma once







#line 22 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\wtime.inl"





#pragma warning(push)
#pragma warning(disable:4996)















static __inline wchar_t * __cdecl _wctime(const time_t * _Time)
{
#pragma warning( push )
#pragma warning( disable : 4996 )
    return _wctime64(_Time);
#pragma warning( pop )
}

static __inline errno_t __cdecl _wctime_s(wchar_t *_Buffer, size_t _SizeInWords, const time_t * _Time)
{
    return _wctime64_s(_Buffer, _SizeInWords, _Time);
}
#line 57 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\wtime.inl"

#pragma warning(pop)

#line 61 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\wtime.inl"
#line 62 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\wtime.inl"
#line 247 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\time.h"
#line 248 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\time.h"


#line 251 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\time.h"


#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\time.inl"












#pragma once







#line 22 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\time.inl"




























































static __inline double __cdecl difftime(time_t _Time1, time_t _Time2)
{
    return _difftime64(_Time1,_Time2);
}
 static __inline char * __cdecl ctime(const time_t * _Time)
{
#pragma warning( push )
#pragma warning( disable : 4996 )
    return _ctime64(_Time);
#pragma warning( pop )
}

static __inline errno_t __cdecl ctime_s(char *_Buffer, size_t _SizeInBytes, const time_t * _Time)
{
    return _ctime64_s(_Buffer, _SizeInBytes, _Time);
}
#line 99 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\time.inl"
 static __inline struct tm * __cdecl gmtime(const time_t * _Time)
{
#pragma warning( push )
#pragma warning( disable : 4996 )
    return _gmtime64(_Time);
#pragma warning( pop )
}

static __inline errno_t __cdecl gmtime_s(struct tm * _Tm, const time_t * _Time)
{
    return _gmtime64_s(_Tm, _Time);
}
#line 112 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\time.inl"
 static __inline struct tm * __cdecl localtime(const time_t * _Time)
{
#pragma warning( push )
#pragma warning( disable : 4996 )
    return _localtime64(_Time);
#pragma warning( pop )
}
static __inline errno_t __cdecl localtime_s(struct tm * _Tm, const time_t * _Time)
{
    return _localtime64_s(_Tm, _Time);
}
static __inline time_t __cdecl mktime(struct tm * _Tm)
{
    return _mktime64(_Tm);
}
static __inline time_t __cdecl _mkgmtime(struct tm * _Tm)
{
    return _mkgmtime64(_Tm);
}
static __inline time_t __cdecl time(time_t * _Time)
{
    return _time64(_Time);
}
#line 136 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\time.inl"


#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\time.inl"
#line 140 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\time.inl"
#line 254 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\time.h"
#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\time.h"













 __declspec(dllimport) extern int daylight;
 __declspec(dllimport) extern long timezone;
 __declspec(dllimport) extern char * tzname[2];
#line 272 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\time.h"

 __declspec(dllimport) void __cdecl tzset(void);

#line 276 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\time.h"



}
#line 281 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\time.h"

#pragma pack(pop)

#line 285 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\time.h"
#line 66 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\common_functions.h"

extern "C"
{
extern __declspec(dllimport) __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(__cudart_builtin__) clock_t __cdecl clock(void) ;
extern         __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(__cudart_builtin__) void*   __cdecl memset(void*, int, size_t) ;
extern         __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(__cudart_builtin__) void*   __cdecl memcpy(void*, const void*, size_t) ;
}

















































































#line 155 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\common_functions.h"

#line 157 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\common_functions.h"








#line 166 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\common_functions.h"

#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\math_functions.h"


















































































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\builtin_types.h"























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\device_types.h"




































































#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\device_types.h"
#line 57 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\driver_types.h"




































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1414 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\driver_types.h"

#line 58 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\surface_types.h"






















































































































#line 120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\surface_types.h"
#line 59 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_types.h"




















































































































































































































#line 214 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_types.h"
#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\vector_types.h"












































































































































































































































































































































































































































#line 430 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\vector_types.h"
#line 61 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\builtin_types.h"
#line 84 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\math_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\host_defines.h"












































































































































































































#line 206 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\host_defines.h"
#line 85 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\math_functions.h"







extern "C"
{






















































#line 149 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(__cudart_builtin__) int            __cdecl abs(int) ;
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(__cudart_builtin__) long int       __cdecl labs(long int) ;
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(__cudart_builtin__) long long int          llabs(long long int) ;
#line 153 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\math_functions.h"









































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double         __cdecl fabs(double x) ;








































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  fabsf(float x) ;
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) int                    min(int, int);
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) unsigned int           umin(unsigned int, unsigned int);
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) long long int          llmin(long long int, long long int);
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) unsigned long long int ullmin(unsigned long long int, unsigned long long int);















extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  fminf(float x, float y) ;















extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double                 fmin(double x, double y) ;
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) int                    max(int, int);
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) unsigned int           umax(unsigned int, unsigned int);
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) long long int          llmax(long long int, long long int);
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) unsigned long long int ullmax(unsigned long long int, unsigned long long int);















extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  fmaxf(float x, float y) ;















extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double                 fmax(double, double) ;








































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double         __cdecl sin(double x) ;
































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double         __cdecl cos(double x) ;














extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) void                   sincos(double x, double *sptr, double *cptr) ;















extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) void                   sincosf(float x, float *sptr, float *cptr) ;








































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double         __cdecl tan(double x) ;




































































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double         __cdecl sqrt(double x) ;




































































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double                 rsqrt(double x);




































































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  rsqrtf(float x);


















































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double                 log2(double x) ;




















extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double                 exp2(double x) ;




















extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  exp2f(float x) ;



















         
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double                 exp10(double x) ;





















extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  exp10f(float x) ;








































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double                 expm1(double x) ;








































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  expm1f(float x) ;        


















































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  log2f(float x) ;         


















































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double         __cdecl log10(double x) ;






































































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double         __cdecl log(double x) ;




























































































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double                 log1p(double x) ;




























































































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  log1pf(float x) ;







































































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) double __cdecl floor(double x) ;






































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double         __cdecl exp(double x) ;






























extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double         __cdecl cosh(double x) ;





























extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double         __cdecl sinh(double x) ;





























extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double         __cdecl tanh(double x) ;

































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double                 acosh(double x) ;

































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  acoshf(float x) ;











extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double                 asinh(double x) ;











extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  asinhf(float x) ;

















































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double                 atanh(double x) ;

















































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  atanhf(float x) ;























































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) double __cdecl ldexp(double x, int exp) ;























































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  ldexpf(float x, int exp) ;


















































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double                 logb(double x) ;


















































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  logbf(float x) ;

























extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) int                    ilogb(double x) ;

























extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) int                    ilogbf(float x) ;







































































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double                 scalbn(double x, int n) ;







































































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  scalbnf(float x, int n) ;







































































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double                 scalbln(double x, long int n) ;







































































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  scalblnf(float x, long int n) ;










































































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) double __cdecl frexp(double x, int *nptr) ;










































































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  frexpf(float x, int *nptr) ;












extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double                 round(double x) ;












extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  roundf(float x) ;













extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) long int               lround(double x) ;













extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) long int               lroundf(float x) ;













extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) long long int          llround(double x) ;













extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) long long int          llroundf(float x) ;










extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double                 rint(double x) ;










extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  rintf(float x) ;











extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) long int               lrint(double x) ;











extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) long int               lrintf(float x) ;











extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) long long int          llrint(double x) ;











extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) long long int          llrintf(float x) ;
















































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double                 nearbyint(double x) ;
















































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  nearbyintf(float x) ;


























































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) double __cdecl ceil(double x) ;










extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double                 trunc(double x) ;










extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  truncf(float x) ;





















extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double                 fdim(double x, double y) ;





















extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  fdimf(float x, float y) ;
































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double         __cdecl atan2(double y, double x) ;






























extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double         __cdecl atan(double x) ;






















extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double         __cdecl acos(double x) ;































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double         __cdecl asin(double x) ;








































#line 2871 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\math_functions.h"
static __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double       __cdecl hypot(double x, double y) ;
#line 2873 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\math_functions.h"














































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double                rhypot(double x, double y) ;









































#line 2962 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\math_functions.h"
static __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float        __cdecl hypotf(float x, float y) ;
#line 2964 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\math_functions.h"














































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                 rhypotf(float x, float y) ;


















































































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double                 cbrt(double x) ;

















































































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  cbrtf(float x) ;
















































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double                 rcbrt(double x);
















































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  rcbrtf(float x);



























































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double                 sinpi(double x);



























































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  sinpif(float x);



















































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double                 cospi(double x);



















































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  cospif(float x);





























extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) void                   sincospi(double x, double *sptr, double *cptr);





























extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) void                   sincospif(float x, float *sptr, float *cptr);



















































































































































































































































































































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double         __cdecl pow(double x, double y) ;























































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) double __cdecl modf(double x, double *iptr) ;


























































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double         __cdecl fmod(double x, double y) ;




















































































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double                 remainder(double x, double y) ;





















































































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  remainderf(float x, float y) ;

















































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double                 remquo(double x, double y, int *quo) ;

















































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  remquof(float x, float y, int *quo) ;





































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) double __cdecl j0(double x) ;





































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  j0f(float x) ;
























































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) double __cdecl j1(double x) ;
























































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  j1f(float x) ;






































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) double __cdecl jn(int n, double x) ;






































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  jnf(int n, float x) ;















































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) double __cdecl y0(double x) ;















































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  y0f(float x) ;















































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) double __cdecl y1(double x) ;















































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  y1f(float x) ;
















































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) double __cdecl yn(int n, double x) ;
















































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  ynf(int n, float x) ;


























extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) double __cdecl cyl_bessel_i0(double x) ;

























extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  cyl_bessel_i0f(float x) ;


























extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) __declspec(dllimport) double __cdecl cyl_bessel_i1(double x) ;

























extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  cyl_bessel_i1f(float x) ;














































































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double                 erf(double x) ;













































































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  erff(float x) ;
























































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double                 erfinv(double y);
























































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  erfinvf(float y);

































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double                 erfc(double x) ;

































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  erfcf(float x) ;



























































































































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double                 lgamma(double x) ;























































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double                 erfcinv(double y);























































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  erfcinvf(float y);

























































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double                 normcdfinv(double y);

























































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  normcdfinvf(float y);










































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double                 normcdf(double y);










































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  normcdff(float y);










































































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double                 erfcx(double x);










































































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  erfcxf(float x);
































































































































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  lgammaf(float x) ;








































































































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double                 tgamma(double x) ;








































































































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  tgammaf(float x) ;








extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double                 copysign(double x, double y) ;








extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  copysignf(float x, float y) ;
































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double                 nextafter(double x, double y) ;
































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  nextafterf(float x, float y) ;











extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double                 nan(const char *tagp) ;











extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  nanf(const char *tagp) ;
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) int                    __isinff(float) ;
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) int                    __isnanf(float) ;







#line 6300 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) int                    __finite(double) ;
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) int                    __finitef(float) ;
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) int                    __signbit(double) ;
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) int                    __isnan(double) ;
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) int                    __isinf(double) ;
#line 6306 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\math_functions.h"

extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) int                    __signbitf(float) ;

























































































































































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) double                 fma(double x, double y, double z) ;

























































































































































extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float                  fmaf(float x, float y, float z) ;




extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) int                    __signbitl(long double) ;




#line 6626 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\math_functions.h"
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) int                    __finitel(long double) ;
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) int                    __isinfl(long double) ;
extern __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) int                    __isnanl(long double) ;
#line 6630 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\math_functions.h"


extern __declspec(dllimport) __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float __cdecl acosf(float) ;
extern __declspec(dllimport) __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float __cdecl asinf(float) ;
extern __declspec(dllimport) __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float __cdecl atanf(float) ;
extern __declspec(dllimport) __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float __cdecl atan2f(float, float) ;
extern __declspec(dllimport) __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float __cdecl cosf(float) ;
extern __declspec(dllimport) __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float __cdecl sinf(float) ;
extern __declspec(dllimport) __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float __cdecl tanf(float) ;
extern __declspec(dllimport) __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float __cdecl coshf(float) ;
extern __declspec(dllimport) __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float __cdecl sinhf(float) ;
extern __declspec(dllimport) __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float __cdecl tanhf(float) ;
extern __declspec(dllimport) __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float __cdecl expf(float) ;
extern __declspec(dllimport) __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float __cdecl logf(float) ;
extern __declspec(dllimport) __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float __cdecl log10f(float) ;
extern __declspec(dllimport) __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float __cdecl modff(float, float*) ;
extern __declspec(dllimport) __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float __cdecl powf(float, float) ;
extern __declspec(dllimport) __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float __cdecl sqrtf(float) ;         
extern __declspec(dllimport) __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float __cdecl ceilf(float) ;
extern __declspec(dllimport) __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float __cdecl floorf(float) ;
extern __declspec(dllimport) __declspec(__host__) __declspec(__device__) __declspec(__device_builtin__) float __cdecl fmodf(float, float) ;



























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 7767 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\math_functions.h"

}

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\math.h"

















#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"














 








































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 19 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\math.h"





#pragma pack(push,8)


extern "C" {
#line 29 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\math.h"








struct _exception {
        int type;       
        char *name;     
        double arg1;    
        double arg2;    
        double retval;  
        } ;


#line 47 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\math.h"







struct _complex {
        double x,y; 
        } ;




#line 62 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\math.h"


#line 65 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\math.h"
#line 66 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\math.h"






















__declspec(dllimport) extern double _HUGE;


#line 92 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\math.h"
#line 93 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\math.h"








        int     __cdecl abs(  int _X);
        long    __cdecl labs(  long _X);
        long long __cdecl llabs(  long long _X);
#line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\math.h"

        double  __cdecl acos(  double _X);
        double  __cdecl asin(  double _X);
        double  __cdecl atan(  double _X);
        double  __cdecl atan2(  double _Y,   double _X);

 __declspec(dllimport) double __cdecl _copysign (  double _Number,   double _Sign);
 __declspec(dllimport) double __cdecl _chgsign (  double _X);

#line 115 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\math.h"
        double  __cdecl cos(  double _X);
        double  __cdecl cosh(  double _X);
        double  __cdecl exp(  double _X);
 double  __cdecl fabs(  double _X);
        double  __cdecl fmod(  double _X,   double _Y);
        double  __cdecl log(  double _X);
        double  __cdecl log10(  double _X);
        double  __cdecl pow(  double _X,   double _Y);
        double  __cdecl sin(  double _X);
        double  __cdecl sinh(  double _X);
        double  __cdecl tan(  double _X);
        double  __cdecl tanh(  double _X);
        double  __cdecl sqrt(  double _X);


 __declspec(dllimport) double  __cdecl atof(   const char *_String);
 __declspec(dllimport) double  __cdecl _atof_l(   const char *_String,    _locale_t _Locale);
#line 133 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\math.h"

__declspec(dllimport) double  __cdecl _cabs(  struct _complex _Complex_value);
__declspec(dllimport) double  __cdecl ceil(  double _X);
__declspec(dllimport) double  __cdecl floor(  double _X);
__declspec(dllimport) double  __cdecl frexp(  double _X,   int * _Y);
__declspec(dllimport) double  __cdecl _hypot(  double _X,   double _Y);
__declspec(dllimport) float   __cdecl _hypotf(  float _X,   float _Y);
__declspec(dllimport) double  __cdecl _j0(  double _X );
__declspec(dllimport) double  __cdecl _j1(  double _X );
__declspec(dllimport) double  __cdecl _jn(int _X,   double _Y);
__declspec(dllimport) double  __cdecl ldexp(  double _X,   int _Y);




#line 149 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\math.h"
        int     __cdecl _matherr(   struct _exception * _Except);
#line 151 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\math.h"
#line 152 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\math.h"
__declspec(dllimport) double  __cdecl modf(  double _X,   double * _Y);

__declspec(dllimport) double  __cdecl _y0(  double _X);
__declspec(dllimport) double  __cdecl _y1(  double _X);
__declspec(dllimport) double  __cdecl _yn(  int _X,   double _Y);




static __inline double __cdecl hypot(  double _X,   double _Y)
{
    return _hypot(_X, _Y);
}

static __inline float __cdecl hypotf(  float _X,   float _Y)
{
    return _hypotf(_X, _Y);
}

#line 172 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\math.h"





#line 178 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\math.h"






































#line 217 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\math.h"







__declspec(dllimport) float  __cdecl acosf(   float _X);
__declspec(dllimport) float  __cdecl asinf(   float _X);
__declspec(dllimport) float  __cdecl atanf(   float _X);
__declspec(dllimport) float  __cdecl atan2f(   float  _Y,   float  _X);
__declspec(dllimport) float  __cdecl cosf(   float _X);
__declspec(dllimport) float  __cdecl sinf(   float _X);
__declspec(dllimport) float  __cdecl tanf(   float _X);


__declspec(dllimport) float  __cdecl coshf(   float _X);
__declspec(dllimport) float  __cdecl sinhf(   float _X);
__declspec(dllimport) float  __cdecl tanhf(   float _X);


__declspec(dllimport) float  __cdecl expf(   float  _X);
__declspec(dllimport) float  __cdecl logf(   float  _X);
__declspec(dllimport) float  __cdecl log10f(   float  _X);
__declspec(dllimport) float  __cdecl modff(   float  _X,   float*  _Y);


__declspec(dllimport) float  __cdecl powf(   float _X,   float _Y);
__declspec(dllimport) float  __cdecl sqrtf(   float  _X);


__declspec(dllimport) float  __cdecl ceilf(   float  _X);
__declspec(dllimport) float  __cdecl floorf(   float  _X);
__declspec(dllimport) float  __cdecl fmodf(   float  _X,   float _Y);

__declspec(dllimport) float __cdecl _copysignf (  float _Number,   float _Sign);
__declspec(dllimport) float __cdecl _chgsignf (  float _X);
__declspec(dllimport) float __cdecl _logbf(  float _X);
__declspec(dllimport) float __cdecl _nextafterf(  float _X,   float _Y);
__declspec(dllimport) int    __cdecl _finitef(  float _X);
__declspec(dllimport) int    __cdecl _isnanf(  float _X);
__declspec(dllimport) int    __cdecl _fpclassf(  float _X);

#line 261 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\math.h"



































































inline long double acosl(  long double _X)
        {return (acos((double)_X)); }
inline long double asinl(  long double _X)
        {return (asin((double)_X)); }
inline long double atanl(  long double _X)
        {return (atan((double)_X)); }
inline long double atan2l(  long double _Y,   long double _X)
        {return (atan2((double)_Y, (double)_X)); }
inline long double ceill(  long double _X)
        {return (ceil((double)_X)); }
inline long double cosl(  long double _X)
        {return (cos((double)_X)); }
inline long double coshl(  long double _X)
        {return (cosh((double)_X)); }
inline long double expl(  long double _X)
        {return (exp((double)_X)); }
inline long double fabsl(  long double _X)
        {return (fabs((double)_X)); }
inline long double floorl(  long double _X)
        {return (floor((double)_X)); }
inline long double fmodl(  long double _X,   long double _Y)
        {return (fmod((double)_X, (double)_Y)); }
inline long double frexpl(  long double _X,   int *_Y)
        {return (frexp((double)_X, _Y)); }
inline long double ldexpl(  long double _X,   int _Y)
        {return (ldexp((double)_X, _Y)); }
inline long double logl(  long double _X)
        {return (log((double)_X)); }
inline long double log10l(  long double _X)
        {return (log10((double)_X)); }
inline long double modfl(  long double _X,   long double *_Y)
        {double _Di, _Df = modf((double)_X, &_Di);
        *_Y = (long double)_Di;
        return (_Df); }
inline long double powl(  long double _X,   long double _Y)
        {return (pow((double)_X, (double)_Y)); }
inline long double sinl(  long double _X)
        {return (sin((double)_X)); }
inline long double sinhl(  long double _X)
        {return (sinh((double)_X)); }
inline long double sqrtl(  long double _X)
        {return (sqrt((double)_X)); }

inline long double tanl(  long double _X)
        {return (tan((double)_X)); }


#line 376 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\math.h"

inline long double tanhl(  long double _X)
        {return (tanh((double)_X)); }

inline long double _chgsignl(  long double _Number)
{
    return _chgsign(static_cast<double>(_Number)); 
}

inline long double _copysignl(  long double _Number,   long double _Sign)
{
    return _copysign(static_cast<double>(_Number), static_cast<double>(_Sign)); 
}

inline float frexpf(  float _X,   int *_Y)
        {return ((float)frexp((double)_X, _Y)); }


inline float fabsf(  float _X)
        {return ((float)fabs((double)_X)); }
inline float ldexpf(  float _X,   int _Y)
        {return ((float)ldexp((double)_X, _Y)); }









































#line 440 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\math.h"
#line 441 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\math.h"
#line 442 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\math.h"
#line 443 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\math.h"

















__declspec(dllimport) extern double HUGE;


#line 464 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\math.h"

 __declspec(dllimport) double  __cdecl cabs(  struct _complex _X);
 __declspec(dllimport) double  __cdecl j0(  double _X);
 __declspec(dllimport) double  __cdecl j1(  double _X);
 __declspec(dllimport) double  __cdecl jn(  int _X,   double _Y);
 __declspec(dllimport) double  __cdecl y0(  double _X);
 __declspec(dllimport) double  __cdecl y1(  double _X);
 __declspec(dllimport) double  __cdecl yn(  int _X,   double _Y);

#line 474 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\math.h"

#line 476 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\math.h"


}

extern "C++" {

template<class _Ty> inline
        _Ty _Pow_int(_Ty _X, int _Y)
        {unsigned int _N;
        if (_Y >= 0)
                _N = (unsigned int)_Y;
        else
                _N = (unsigned int)(-_Y);
        for (_Ty _Z = _Ty(1); ; _X *= _X)
                {if ((_N & 1) != 0)
                        _Z *= _X;
                if ((_N >>= 1) == 0)
                        return (_Y < 0 ? _Ty(1) / _Z : _Z); }}

inline double __cdecl abs(  double _X)
        {return (fabs(_X)); }
inline double __cdecl pow(  double _X,   int _Y)
        {return (_Pow_int(_X, _Y)); }
inline float __cdecl abs(  float _X)
        {return (fabsf(_X)); }
inline float __cdecl acos(  float _X)
        {return (acosf(_X)); }
inline float __cdecl asin(  float _X)
        {return (asinf(_X)); }
inline float __cdecl atan(  float _X)
        {return (atanf(_X)); }
inline float __cdecl atan2(  float _Y,   float _X)
        {return (atan2f(_Y, _X)); }
inline float __cdecl ceil(  float _X)
        {return (ceilf(_X)); }
inline float __cdecl cos(  float _X)
        {return (cosf(_X)); }
inline float __cdecl cosh(  float _X)
        {return (coshf(_X)); }
inline float __cdecl exp(  float _X)
        {return (expf(_X)); }
inline float __cdecl fabs(  float _X)
        {return (fabsf(_X)); }
inline float __cdecl floor(  float _X)
        {return (floorf(_X)); }
inline float __cdecl fmod(  float _X,   float _Y)
        {return (fmodf(_X, _Y)); }
inline float __cdecl frexp(  float _X,   int * _Y)
        {return (frexpf(_X, _Y)); }
inline float __cdecl ldexp(  float _X,   int _Y)
        {return (ldexpf(_X, _Y)); }
inline float __cdecl log(  float _X)
        {return (logf(_X)); }
inline float __cdecl log10(  float _X)
        {return (log10f(_X)); }
inline float __cdecl modf(  float _X,   float * _Y)
        {return (modff(_X, _Y)); }
inline float __cdecl pow(  float _X,   float _Y)
        {return (powf(_X, _Y)); }
inline float __cdecl pow(  float _X,   int _Y)
        {return (_Pow_int(_X, _Y)); }
inline float __cdecl sin(  float _X)
        {return (sinf(_X)); }
inline float __cdecl sinh(  float _X)
        {return (sinhf(_X)); }
inline float __cdecl sqrt(  float _X)
        {return (sqrtf(_X)); }
inline float __cdecl tan(  float _X)
        {return (tanf(_X)); }
inline float __cdecl tanh(  float _X)
        {return (tanhf(_X)); }
inline long double __cdecl abs(  long double _X)
        {return (fabsl(_X)); }
inline long double __cdecl acos(  long double _X)
        {return (acosl(_X)); }
inline long double __cdecl asin(  long double _X)
        {return (asinl(_X)); }
inline long double __cdecl atan(  long double _X)
        {return (atanl(_X)); }
inline long double __cdecl atan2(  long double _Y,   long double _X)
        {return (atan2l(_Y, _X)); }
inline long double __cdecl ceil(  long double _X)
        {return (ceill(_X)); }
inline long double __cdecl cos(  long double _X)
        {return (cosl(_X)); }
inline long double __cdecl cosh(  long double _X)
        {return (coshl(_X)); }
inline long double __cdecl exp(  long double _X)
        {return (expl(_X)); }
inline long double __cdecl fabs(  long double _X)
        {return (fabsl(_X)); }
inline long double __cdecl floor(  long double _X)
        {return (floorl(_X)); }
inline long double __cdecl fmod(  long double _X,   long double _Y)
        {return (fmodl(_X, _Y)); }
inline long double __cdecl frexp(  long double _X,   int * _Y)
        {return (frexpl(_X, _Y)); }
inline long double __cdecl ldexp(  long double _X,   int _Y)
        {return (ldexpl(_X, _Y)); }
inline long double __cdecl log(  long double _X)
        {return (logl(_X)); }
inline long double __cdecl log10(  long double _X)
        {return (log10l(_X)); }
inline long double __cdecl modf(  long double _X,   long double * _Y)
        {return (modfl(_X, _Y)); }
inline long double __cdecl pow(  long double _X,   long double _Y)
        {return (powl(_X, _Y)); }
inline long double __cdecl pow(  long double _X,   int _Y)
        {return (_Pow_int(_X, _Y)); }
inline long double __cdecl sin(  long double _X)
        {return (sinl(_X)); }
inline long double __cdecl sinh(  long double _X)
        {return (sinhl(_X)); }
inline long double __cdecl sqrt(  long double _X)
        {return (sqrtl(_X)); }
inline long double __cdecl tan(  long double _X)
        {return (tanl(_X)); }
inline long double __cdecl tanh(  long double _X)
        {return (tanhl(_X)); }

}
#line 598 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\math.h"

#pragma pack(pop)

#line 602 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\math.h"







































#line 642 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\math.h"

#line 7771 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\math_functions.h"
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\stdlib.h"















#pragma once




#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"














 








































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 22 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\stdlib.h"






#pragma pack(push,8)


extern "C" {
#line 33 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\stdlib.h"



















typedef int (__cdecl * _onexit_t)(void);



#line 57 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\stdlib.h"



#line 61 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\stdlib.h"




#line 66 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\stdlib.h"


#line 69 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\stdlib.h"






typedef struct _div_t {
        int quot;
        int rem;
} div_t;

typedef struct _ldiv_t {
        long quot;
        long rem;
} ldiv_t;

typedef struct _lldiv_t {
        long long quot;
        long long rem;
} lldiv_t;


#line 92 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\stdlib.h"










#pragma pack(4)
typedef struct {
    unsigned char ld[10];
} _LDOUBLE;
#pragma pack()













#line 121 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\stdlib.h"

typedef struct {
        double x;
} _CRT_DOUBLE;

typedef struct {
    float f;
} _CRT_FLOAT;





typedef struct {
        


        long double x;
} _LONGDOUBLE;



#pragma pack(4)
typedef struct {
    unsigned char ld12[12];
} _LDBL12;
#pragma pack()


#line 151 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\stdlib.h"












__declspec(dllimport) extern int __mb_cur_max;



#line 168 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\stdlib.h"
__declspec(dllimport) int __cdecl ___mb_cur_max_func(void);
__declspec(dllimport) int __cdecl ___mb_cur_max_l_func(_locale_t);
#line 171 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\stdlib.h"





































typedef void (__cdecl *_purecall_handler)(void); 


__declspec(dllimport) _purecall_handler __cdecl _set_purecall_handler(   _purecall_handler _Handler);
__declspec(dllimport) _purecall_handler __cdecl _get_purecall_handler(void);
#line 214 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\stdlib.h"


extern "C++"
{




#line 223 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\stdlib.h"
}
#line 225 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\stdlib.h"



typedef void (__cdecl *_invalid_parameter_handler)(const wchar_t *, const wchar_t *, const wchar_t *, unsigned int, uintptr_t); 


__declspec(dllimport) _invalid_parameter_handler __cdecl _set_invalid_parameter_handler(   _invalid_parameter_handler _Handler);
__declspec(dllimport) _invalid_parameter_handler __cdecl _get_invalid_parameter_handler(void);
#line 234 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\stdlib.h"


extern "C++"
{




#line 243 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\stdlib.h"
}
#line 245 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\stdlib.h"











__declspec(dllimport) unsigned long * __cdecl __doserrno(void);


errno_t __cdecl _set_doserrno(  unsigned long _Value);
errno_t __cdecl _get_doserrno(  unsigned long * _Value);


__declspec(dllimport)  char ** __cdecl __sys_errlist(void);


__declspec(dllimport)  int * __cdecl __sys_nerr(void);













#line 281 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\stdlib.h"


__declspec(dllimport) extern int __argc;          
__declspec(dllimport) extern char ** __argv;      
__declspec(dllimport) extern wchar_t ** __wargv;  







#line 294 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\stdlib.h"





__declspec(dllimport) extern char ** _environ;    
__declspec(dllimport) extern wchar_t ** _wenviron;    
#line 302 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\stdlib.h"

 __declspec(dllimport) extern char * _pgmptr;      
 __declspec(dllimport) extern wchar_t * _wpgmptr;  














#line 320 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\stdlib.h"

errno_t __cdecl _get_pgmptr(     char ** _Value);
errno_t __cdecl _get_wpgmptr(     wchar_t ** _Value);



 __declspec(dllimport) extern int _fmode;          



#line 331 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\stdlib.h"

__declspec(dllimport) errno_t __cdecl _set_fmode(  int _Mode);
__declspec(dllimport) errno_t __cdecl _get_fmode(  int * _PMode);





#line 340 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\stdlib.h"
extern "C++"
{
template <typename _CountofType, size_t _SizeOfArray>
char (*__countof_helper(__unaligned _CountofType (&_Array)[_SizeOfArray]))[_SizeOfArray];

}
#line 347 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\stdlib.h"
#line 348 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\stdlib.h"





__declspec(dllimport) __declspec(noreturn) void __cdecl exit(  int _Code);
__declspec(dllimport) __declspec(noreturn) void __cdecl _exit(  int _Code);
__declspec(dllimport) void __cdecl abort(void);
#line 357 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\stdlib.h"

__declspec(dllimport) unsigned int __cdecl _set_abort_behavior(  unsigned int _Flags,   unsigned int _Mask);








        __int64    __cdecl _abs64(__int64);















#line 384 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\stdlib.h"













#line 398 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\stdlib.h"
        int    __cdecl atexit(void (__cdecl *)(void));
#line 400 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\stdlib.h"





 __declspec(dllimport)  int    __cdecl atoi(   const char *_Str);
 __declspec(dllimport) int    __cdecl _atoi_l(   const char *_Str,    _locale_t _Locale);
 __declspec(dllimport) long   __cdecl atol(   const char *_Str);
 __declspec(dllimport) long   __cdecl _atol_l(   const char *_Str,    _locale_t _Locale);



 __declspec(dllimport) void * __cdecl bsearch_s(  const void * _Key,    const void * _Base, 
          rsize_t _NumOfElements,   rsize_t _SizeOfElements,
          int (__cdecl * _PtFuncCompare)(void *, const void *, const void *), void * _Context);
#line 416 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\stdlib.h"
 __declspec(dllimport) void * __cdecl bsearch(  const void * _Key,    const void * _Base, 
          size_t _NumOfElements,   size_t _SizeOfElements,
          int (__cdecl * _PtFuncCompare)(const void *, const void *));


__declspec(dllimport) void __cdecl qsort_s(   void * _Base, 
          rsize_t _NumOfElements,   rsize_t _SizeOfElements,
          int (__cdecl * _PtFuncCompare)(void *, const void *, const void *), void *_Context);
#line 425 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\stdlib.h"
__declspec(dllimport) void __cdecl qsort(   void * _Base, 
	  size_t _NumOfElements,   size_t _SizeOfElements, 
          int (__cdecl * _PtFuncCompare)(const void *, const void *));
#line 429 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\stdlib.h"
         unsigned short __cdecl _byteswap_ushort(  unsigned short _Short);
         unsigned long  __cdecl _byteswap_ulong (  unsigned long _Long);
         unsigned __int64 __cdecl _byteswap_uint64(  unsigned __int64 _Int64);
 __declspec(dllimport) div_t  __cdecl div(  int _Numerator,   int _Denominator);
 __declspec(dllimport)  char * __cdecl getenv(   const char * _VarName);

 __declspec(dllimport) errno_t __cdecl getenv_s(  size_t * _ReturnSize,     char * _DstBuf,   rsize_t _DstSize,    const char * _VarName);
#line 437 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\stdlib.h"
extern "C++" { template <size_t _Size> inline errno_t __cdecl getenv_s(  size_t * _ReturnSize, char (&_Dest)[_Size],    const char * _VarName) throw() { return getenv_s(_ReturnSize, _Dest, _Size, _VarName); } }



#line 442 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\stdlib.h"

 __declspec(dllimport) errno_t __cdecl _dupenv_s(    char **_PBuffer,   size_t * _PBufferSizeInBytes,    const char * _VarName);



#line 448 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\stdlib.h"

 __declspec(dllimport) errno_t __cdecl _itoa_s(  int _Value,     char * _DstBuf,   size_t _Size,   int _Radix);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _itoa_s(  int _Value, char (&_Dest)[_Size],   int _Radix) throw() { return _itoa_s(_Value, _Dest, _Size, _Radix); } }
 __declspec(dllimport) char * __cdecl _itoa( int _Value,   char *_Dest,  int _Radix);
 __declspec(dllimport) errno_t __cdecl _i64toa_s(  __int64 _Val,     char * _DstBuf,   size_t _Size,   int _Radix);
__declspec(dllimport)  char * __cdecl _i64toa(  __int64 _Val,    char * _DstBuf,   int _Radix);
 __declspec(dllimport) errno_t __cdecl _ui64toa_s(  unsigned __int64 _Val,     char * _DstBuf,   size_t _Size,   int _Radix);
__declspec(dllimport)  char * __cdecl _ui64toa(  unsigned __int64 _Val,    char * _DstBuf,   int _Radix);
 __declspec(dllimport) __int64 __cdecl _atoi64(   const char * _String);
 __declspec(dllimport) __int64 __cdecl _atoi64_l(   const char * _String,    _locale_t _Locale);
 __declspec(dllimport) __int64 __cdecl _strtoi64(   const char * _String,     char ** _EndPtr,   int _Radix);
 __declspec(dllimport) __int64 __cdecl _strtoi64_l(   const char * _String,     char ** _EndPtr,   int _Radix,    _locale_t _Locale);
 __declspec(dllimport) unsigned __int64 __cdecl _strtoui64(   const char * _String,     char ** _EndPtr,   int _Radix);
 __declspec(dllimport) unsigned __int64 __cdecl _strtoui64_l(   const char * _String,     char ** _EndPtr,   int  _Radix,    _locale_t _Locale);
 __declspec(dllimport) ldiv_t __cdecl ldiv(  long _Numerator,   long _Denominator);
 __declspec(dllimport) lldiv_t __cdecl lldiv(  long long _Numerator,   long long _Denominator);

extern "C++"
{
    inline long abs(long _X)
    {
        return labs(_X);
    }
    inline long long abs(long long _X)
    {
        return llabs(_X);
    }
    inline ldiv_t div(long _A1, long _A2)
    {
        return ldiv(_A1, _A2);
    }
    inline lldiv_t div(long long _A1, long long _A2)
    {
        return lldiv(_A1, _A2);
    }
}
#line 485 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\stdlib.h"
 __declspec(dllimport) errno_t __cdecl _ltoa_s(  long _Val,     char * _DstBuf,   size_t _Size,   int _Radix);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _ltoa_s(  long _Value, char (&_Dest)[_Size],   int _Radix) throw() { return _ltoa_s(_Value, _Dest, _Size, _Radix); } }
 __declspec(dllimport) char * __cdecl _ltoa( long _Value,   char *_Dest,  int _Radix);
 __declspec(dllimport) int    __cdecl mblen(     const char * _Ch,   size_t _MaxCount);
 __declspec(dllimport) int    __cdecl _mblen_l(     const char * _Ch,   size_t _MaxCount,    _locale_t _Locale);
 __declspec(dllimport) size_t __cdecl _mbstrlen(   const char * _Str);
 __declspec(dllimport) size_t __cdecl _mbstrlen_l(   const char *_Str,    _locale_t _Locale);
 __declspec(dllimport) size_t __cdecl _mbstrnlen(   const char *_Str,   size_t _MaxCount);
 __declspec(dllimport) size_t __cdecl _mbstrnlen_l(   const char *_Str,   size_t _MaxCount,    _locale_t _Locale);
__declspec(dllimport) int    __cdecl mbtowc(   wchar_t * _DstCh,      const char * _SrcCh,   size_t _SrcSizeInBytes);
__declspec(dllimport) int    __cdecl _mbtowc_l(   wchar_t * _DstCh,      const char * _SrcCh,   size_t _SrcSizeInBytes,    _locale_t _Locale);
 __declspec(dllimport) errno_t __cdecl mbstowcs_s(  size_t * _PtNumOfCharConverted,     wchar_t * _DstBuf,   size_t _SizeInWords,      const char * _SrcBuf,   size_t _MaxCount );
extern "C++" { template <size_t _Size> inline errno_t __cdecl mbstowcs_s(  size_t * _PtNumOfCharConverted,   wchar_t (&_Dest)[_Size],    const char * _Source,   size_t _MaxCount) throw() { return mbstowcs_s(_PtNumOfCharConverted, _Dest, _Size, _Source, _MaxCount); } }
 __declspec(dllimport) size_t __cdecl mbstowcs(  wchar_t *_Dest,  const char * _Source,  size_t _MaxCount);

 __declspec(dllimport) errno_t __cdecl _mbstowcs_s_l(  size_t * _PtNumOfCharConverted,     wchar_t * _DstBuf,   size_t _SizeInWords,      const char * _SrcBuf,   size_t _MaxCount,    _locale_t _Locale);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _mbstowcs_s_l(  size_t * _PtNumOfCharConverted, wchar_t (&_Dest)[_Size],    const char * _Source,   size_t _MaxCount,    _locale_t _Locale) throw() { return _mbstowcs_s_l(_PtNumOfCharConverted, _Dest, _Size, _Source, _MaxCount, _Locale); } }
 __declspec(dllimport) size_t __cdecl _mbstowcs_l(    wchar_t *_Dest,    const char * _Source,   size_t _MaxCount,    _locale_t _Locale);

 __declspec(dllimport) int    __cdecl rand(void);


#line 508 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\stdlib.h"

 __declspec(dllimport) int    __cdecl _set_error_mode(  int _Mode);

__declspec(dllimport) void   __cdecl srand(  unsigned int _Seed);
 __declspec(dllimport) double __cdecl strtod(   const char * _Str,     char ** _EndPtr);
 __declspec(dllimport) double __cdecl _strtod_l(   const char * _Str,     char ** _EndPtr,    _locale_t _Locale);
 __declspec(dllimport) long   __cdecl strtol(   const char * _Str,     char ** _EndPtr,   int _Radix );
 __declspec(dllimport) long   __cdecl _strtol_l(   const char *_Str,     char **_EndPtr,   int _Radix,    _locale_t _Locale);
 __declspec(dllimport) unsigned long __cdecl strtoul(   const char * _Str,     char ** _EndPtr,   int _Radix);
 __declspec(dllimport) unsigned long __cdecl _strtoul_l(const char * _Str,     char **_EndPtr,   int _Radix,    _locale_t _Locale);


__declspec(dllimport) int __cdecl system(   const char * _Command);
#line 522 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\stdlib.h"
 __declspec(dllimport) errno_t __cdecl _ultoa_s(  unsigned long _Val,     char * _DstBuf,   size_t _Size,   int _Radix);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _ultoa_s(  unsigned long _Value, char (&_Dest)[_Size],   int _Radix) throw() { return _ultoa_s(_Value, _Dest, _Size, _Radix); } }
 __declspec(dllimport) char * __cdecl _ultoa( unsigned long _Value,   char *_Dest,  int _Radix);
__declspec(dllimport)  int    __cdecl wctomb(    char * _MbCh,   wchar_t _WCh);
__declspec(dllimport)  int    __cdecl _wctomb_l(   char * _MbCh,   wchar_t _WCh,    _locale_t _Locale);

 __declspec(dllimport) errno_t __cdecl wctomb_s(  int * _SizeConverted,     char * _MbCh,   rsize_t _SizeInBytes,   wchar_t _WCh);
#line 530 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\stdlib.h"
 __declspec(dllimport) errno_t __cdecl _wctomb_s_l(  int * _SizeConverted,     char * _MbCh,   size_t _SizeInBytes,   wchar_t _WCh,    _locale_t _Locale);
 __declspec(dllimport) errno_t __cdecl wcstombs_s(  size_t * _PtNumOfCharConverted,     char * _Dst,   size_t _DstSizeInBytes,    const wchar_t * _Src,   size_t _MaxCountInBytes);
extern "C++" { template <size_t _Size> inline errno_t __cdecl wcstombs_s(  size_t * _PtNumOfCharConverted,   char (&_Dest)[_Size],    const wchar_t * _Source,   size_t _MaxCount) throw() { return wcstombs_s(_PtNumOfCharConverted, _Dest, _Size, _Source, _MaxCount); } }
 __declspec(dllimport) size_t __cdecl wcstombs(  char *_Dest,  const wchar_t * _Source,  size_t _MaxCount);
 __declspec(dllimport) errno_t __cdecl _wcstombs_s_l(  size_t * _PtNumOfCharConverted,     char * _Dst,   size_t _DstSizeInBytes,    const wchar_t * _Src,   size_t _MaxCountInBytes,    _locale_t _Locale);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcstombs_s_l(  size_t * _PtNumOfCharConverted,   char (&_Dest)[_Size],    const wchar_t * _Source,   size_t _MaxCount,    _locale_t _Locale) throw() { return _wcstombs_s_l(_PtNumOfCharConverted, _Dest, _Size, _Source, _MaxCount, _Locale); } }
 __declspec(dllimport) size_t __cdecl _wcstombs_l(    char *_Dest,    const wchar_t * _Source,   size_t _MaxCount,    _locale_t _Locale);

























#line 563 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\stdlib.h"


































#line 598 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\stdlib.h"
  __declspec(dllimport)  __declspec(noalias) __declspec(restrict)    void * __cdecl calloc(  size_t _Count,   size_t _Size);
__declspec(dllimport)                     __declspec(noalias)                                                                             void   __cdecl free( void * _Memory);
  __declspec(dllimport)  __declspec(noalias) __declspec(restrict)                              void * __cdecl malloc(  size_t _Size);

  __declspec(dllimport) __declspec(noalias) __declspec(restrict)                           void * __cdecl realloc( void * _Memory,   size_t _NewSize);

  __declspec(dllimport) __declspec(noalias) __declspec(restrict)                       void * __cdecl _recalloc( void * _Memory,   size_t _Count,   size_t _Size);
__declspec(dllimport)                     __declspec(noalias)                                                                             void   __cdecl _aligned_free( void * _Memory);
  __declspec(dllimport) __declspec(noalias) __declspec(restrict)                              void * __cdecl _aligned_malloc(  size_t _Size,   size_t _Alignment);
  __declspec(dllimport) __declspec(noalias) __declspec(restrict)                              void * __cdecl _aligned_offset_malloc(  size_t _Size,   size_t _Alignment,   size_t _Offset);

  __declspec(dllimport) __declspec(noalias) __declspec(restrict)                              void * __cdecl _aligned_realloc( void * _Memory,   size_t _NewSize,   size_t _Alignment);

  __declspec(dllimport) __declspec(noalias) __declspec(restrict)                       void * __cdecl _aligned_recalloc( void * _Memory,   size_t _Count,   size_t _Size,   size_t _Alignment);

  __declspec(dllimport) __declspec(noalias) __declspec(restrict)                              void * __cdecl _aligned_offset_realloc( void * _Memory,   size_t _NewSize,   size_t _Alignment,   size_t _Offset);

  __declspec(dllimport) __declspec(noalias) __declspec(restrict)                       void * __cdecl _aligned_offset_recalloc( void * _Memory,   size_t _Count,   size_t _Size,   size_t _Alignment,   size_t _Offset);
 __declspec(dllimport)                                                  size_t __cdecl _aligned_msize( void * _Memory,   size_t _Alignment,   size_t _Offset);


















#line 636 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\stdlib.h"

#line 638 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\stdlib.h"





 __declspec(dllimport) errno_t __cdecl _itow_s (  int _Val,     wchar_t * _DstBuf,   size_t _SizeInWords,   int _Radix);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _itow_s(  int _Value, wchar_t (&_Dest)[_Size],   int _Radix) throw() { return _itow_s(_Value, _Dest, _Size, _Radix); } }
 __declspec(dllimport) wchar_t * __cdecl _itow( int _Value,   wchar_t *_Dest,  int _Radix);
 __declspec(dllimport) errno_t __cdecl _ltow_s (  long _Val,     wchar_t * _DstBuf,   size_t _SizeInWords,   int _Radix);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _ltow_s(  long _Value, wchar_t (&_Dest)[_Size],   int _Radix) throw() { return _ltow_s(_Value, _Dest, _Size, _Radix); } }
 __declspec(dllimport) wchar_t * __cdecl _ltow( long _Value,   wchar_t *_Dest,  int _Radix);
 __declspec(dllimport) errno_t __cdecl _ultow_s (  unsigned long _Val,     wchar_t * _DstBuf,   size_t _SizeInWords,   int _Radix);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _ultow_s(  unsigned long _Value, wchar_t (&_Dest)[_Size],   int _Radix) throw() { return _ultow_s(_Value, _Dest, _Size, _Radix); } }
 __declspec(dllimport) wchar_t * __cdecl _ultow( unsigned long _Value,   wchar_t *_Dest,  int _Radix);
 __declspec(dllimport) double __cdecl wcstod(   const wchar_t * _Str,     wchar_t ** _EndPtr);
 __declspec(dllimport) double __cdecl _wcstod_l(   const wchar_t *_Str,     wchar_t ** _EndPtr,    _locale_t _Locale);
 __declspec(dllimport) long   __cdecl wcstol(   const wchar_t *_Str,     wchar_t ** _EndPtr, int _Radix);
 __declspec(dllimport) long   __cdecl _wcstol_l(   const wchar_t *_Str,     wchar_t **_EndPtr, int _Radix,    _locale_t _Locale);
 __declspec(dllimport) unsigned long __cdecl wcstoul(   const wchar_t *_Str,     wchar_t ** _EndPtr, int _Radix);
 __declspec(dllimport) unsigned long __cdecl _wcstoul_l(   const wchar_t *_Str,     wchar_t **_EndPtr, int _Radix,    _locale_t _Locale);
 __declspec(dllimport)  wchar_t * __cdecl _wgetenv(   const wchar_t * _VarName);
 __declspec(dllimport) errno_t __cdecl _wgetenv_s(  size_t * _ReturnSize,     wchar_t * _DstBuf,   size_t _DstSizeInWords,    const wchar_t * _VarName);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _wgetenv_s(  size_t * _ReturnSize, wchar_t (&_Dest)[_Size],    const wchar_t * _VarName) throw() { return _wgetenv_s(_ReturnSize, _Dest, _Size, _VarName); } }




#line 666 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\stdlib.h"

 __declspec(dllimport) errno_t __cdecl _wdupenv_s(    wchar_t **_Buffer,   size_t *_BufferSizeInWords,    const wchar_t *_VarName);



#line 672 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\stdlib.h"



__declspec(dllimport) int __cdecl _wsystem(   const wchar_t * _Command);
#line 677 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\stdlib.h"
 __declspec(dllimport) double __cdecl _wtof(   const wchar_t *_Str);
 __declspec(dllimport) double __cdecl _wtof_l(   const wchar_t *_Str,    _locale_t _Locale);
 __declspec(dllimport) int __cdecl _wtoi(   const wchar_t *_Str);
 __declspec(dllimport) int __cdecl _wtoi_l(   const wchar_t *_Str,    _locale_t _Locale);
 __declspec(dllimport) long __cdecl _wtol(   const wchar_t *_Str);
 __declspec(dllimport) long __cdecl _wtol_l(   const wchar_t *_Str,    _locale_t _Locale);

 __declspec(dllimport) errno_t __cdecl _i64tow_s(  __int64 _Val,     wchar_t * _DstBuf,   size_t _SizeInWords,   int _Radix);
__declspec(dllimport)  wchar_t * __cdecl _i64tow(  __int64 _Val,    wchar_t * _DstBuf,   int _Radix);
 __declspec(dllimport) errno_t __cdecl _ui64tow_s(  unsigned __int64 _Val,     wchar_t * _DstBuf,   size_t _SizeInWords,   int _Radix);
__declspec(dllimport)  wchar_t * __cdecl _ui64tow(  unsigned __int64 _Val,    wchar_t * _DstBuf,   int _Radix);
 __declspec(dllimport) __int64   __cdecl _wtoi64(   const wchar_t *_Str);
 __declspec(dllimport) __int64   __cdecl _wtoi64_l(   const wchar_t *_Str,    _locale_t _Locale);
 __declspec(dllimport) __int64   __cdecl _wcstoi64(   const wchar_t * _Str,     wchar_t ** _EndPtr,   int _Radix);
 __declspec(dllimport) __int64   __cdecl _wcstoi64_l(   const wchar_t * _Str,     wchar_t ** _EndPtr,   int _Radix,    _locale_t _Locale);
 __declspec(dllimport) unsigned __int64  __cdecl _wcstoui64(   const wchar_t * _Str,     wchar_t ** _EndPtr,   int _Radix);
 __declspec(dllimport) unsigned __int64  __cdecl _wcstoui64_l(   const wchar_t *_Str ,     wchar_t ** _EndPtr,   int _Radix,    _locale_t _Locale);


#line 697 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\stdlib.h"














#line 712 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\stdlib.h"

 __declspec(dllimport) char * __cdecl _fullpath(    char * _FullPath,    const char * _Path,   size_t _SizeInBytes);





#line 720 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\stdlib.h"

 __declspec(dllimport) errno_t __cdecl _ecvt_s(    char * _DstBuf,   size_t _Size,   double _Val,   int _NumOfDights,   int * _PtDec,   int * _PtSign);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _ecvt_s(char (&_Dest)[_Size],   double _Value,   int _NumOfDigits,   int * _PtDec,   int * _PtSign) throw() { return _ecvt_s(_Dest, _Size, _Value, _NumOfDigits, _PtDec, _PtSign); } }
 __declspec(dllimport)  char * __cdecl _ecvt(  double _Val,   int _NumOfDigits,   int * _PtDec,   int * _PtSign);
 __declspec(dllimport) errno_t __cdecl _fcvt_s(    char * _DstBuf,   size_t _Size,   double _Val,   int _NumOfDec,   int * _PtDec,   int * _PtSign);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _fcvt_s(char (&_Dest)[_Size],   double _Value,   int _NumOfDigits,   int * _PtDec,   int * _PtSign) throw() { return _fcvt_s(_Dest, _Size, _Value, _NumOfDigits, _PtDec, _PtSign); } }
 __declspec(dllimport)  char * __cdecl _fcvt(  double _Val,   int _NumOfDec,   int * _PtDec,   int * _PtSign);
__declspec(dllimport) errno_t __cdecl _gcvt_s(    char * _DstBuf,   size_t _Size,   double _Val,   int _NumOfDigits);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _gcvt_s(char (&_Dest)[_Size],   double _Value,   int _NumOfDigits) throw() { return _gcvt_s(_Dest, _Size, _Value, _NumOfDigits); } }
__declspec(dllimport)  char * __cdecl _gcvt(  double _Val,   int _NumOfDigits,    char * _DstBuf);

 __declspec(dllimport) int __cdecl _atodbl(  _CRT_DOUBLE * _Result,    char * _Str);
 __declspec(dllimport) int __cdecl _atoldbl(  _LDOUBLE * _Result,    char * _Str);
 __declspec(dllimport) int __cdecl _atoflt(  _CRT_FLOAT * _Result,    char * _Str);
 __declspec(dllimport) int __cdecl _atodbl_l(  _CRT_DOUBLE * _Result,    char * _Str,    _locale_t _Locale);
 __declspec(dllimport) int __cdecl _atoldbl_l(  _LDOUBLE * _Result,    char * _Str,    _locale_t _Locale);
 __declspec(dllimport) int __cdecl _atoflt_l(  _CRT_FLOAT * _Result,    char * _Str,    _locale_t _Locale);
         unsigned long __cdecl _lrotl(  unsigned long _Val,   int _Shift);
         unsigned long __cdecl _lrotr(  unsigned long _Val,   int _Shift);
 __declspec(dllimport) errno_t   __cdecl _makepath_s(    char * _PathResult,   size_t _SizeInWords,    const char * _Drive,    const char * _Dir,    const char * _Filename,
           const char * _Ext);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _makepath_s(char (&_Path)[_Size],    const char * _Drive,    const char * _Dir,    const char * _Filename,    const char * _Ext) throw() { return _makepath_s(_Path, _Size, _Drive, _Dir, _Filename, _Ext); } }
 __declspec(dllimport) void __cdecl _makepath(  char *_Path,  const char * _Drive,  const char * _Dir,  const char * _Filename,  const char * _Ext);












#line 756 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\stdlib.h"












#line 769 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\stdlib.h"
        _onexit_t __cdecl _onexit(   _onexit_t _Func);
#line 771 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\stdlib.h"
        


__declspec(dllimport) void __cdecl perror(   const char * _ErrMsg);
#line 776 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\stdlib.h"

#pragma warning (push)
#pragma warning (disable:6540) 
 __declspec(dllimport) int    __cdecl _putenv(   const char * _EnvString);
 __declspec(dllimport) errno_t __cdecl _putenv_s(   const char * _Name,    const char * _Value);
         unsigned int __cdecl _rotl(  unsigned int _Val,   int _Shift);
         unsigned __int64 __cdecl _rotl64(  unsigned __int64 _Val,   int _Shift);
         unsigned int __cdecl _rotr(  unsigned int _Val,   int _Shift);
         unsigned __int64 __cdecl _rotr64(  unsigned __int64 _Val,   int _Shift);
#pragma warning (pop)

__declspec(dllimport) errno_t __cdecl _searchenv_s(   const char * _Filename,    const char * _EnvVar,     char * _ResultPath,   size_t _SizeInBytes);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _searchenv_s(   const char * _Filename,    const char * _EnvVar, char (&_ResultPath)[_Size]) throw() { return _searchenv_s(_Filename, _EnvVar, _ResultPath, _Size); } }
 __declspec(dllimport) void __cdecl _searchenv( const char * _Filename,  const char * _EnvVar,   char *_ResultPath);

 __declspec(dllimport) void   __cdecl _splitpath(   const char * _FullPath,    char * _Drive,    char * _Dir,    char * _Filename,    char * _Ext);
 __declspec(dllimport) errno_t  __cdecl _splitpath_s(   const char * _FullPath, 
		    char * _Drive,   size_t _DriveSize, 
		    char * _Dir,   size_t _DirSize, 
		    char * _Filename,   size_t _FilenameSize, 
		    char * _Ext,   size_t _ExtSize);
extern "C++" { template <size_t _DriveSize, size_t _DirSize, size_t _NameSize, size_t _ExtSize> inline errno_t __cdecl _splitpath_s(  const char *_Dest, char (&_Drive)[_DriveSize], char (&_Dir)[_DirSize], char (&_Name)[_NameSize], char (&_Ext)[_ExtSize]) throw() { return _splitpath_s(_Dest, _Drive, _DriveSize, _Dir, _DirSize, _Name, _NameSize, _Ext, _ExtSize); } }

__declspec(dllimport) void   __cdecl _swab(     char * _Buf1,      char * _Buf2, int _SizeInBytes);








#line 809 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\stdlib.h"

 __declspec(dllimport) wchar_t * __cdecl _wfullpath(    wchar_t * _FullPath,    const wchar_t * _Path,   size_t _SizeInWords);



#line 815 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\stdlib.h"

 __declspec(dllimport) errno_t __cdecl _wmakepath_s(    wchar_t * _PathResult,   size_t _SIZE,    const wchar_t * _Drive,    const wchar_t * _Dir,    const wchar_t * _Filename,
           const wchar_t * _Ext);        
extern "C++" { template <size_t _Size> inline errno_t __cdecl _wmakepath_s(wchar_t (&_ResultPath)[_Size],    const wchar_t * _Drive,    const wchar_t * _Dir,    const wchar_t * _Filename,    const wchar_t * _Ext) throw() { return _wmakepath_s(_ResultPath, _Size, _Drive, _Dir, _Filename, _Ext); } }
 __declspec(dllimport) void __cdecl _wmakepath(  wchar_t *_ResultPath,  const wchar_t * _Drive,  const wchar_t * _Dir,  const wchar_t * _Filename,  const wchar_t * _Ext);


__declspec(dllimport) void __cdecl _wperror(   const wchar_t * _ErrMsg);
#line 824 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\stdlib.h"
 __declspec(dllimport) int    __cdecl _wputenv(   const wchar_t * _EnvString);
 __declspec(dllimport) errno_t __cdecl _wputenv_s(   const wchar_t * _Name,    const wchar_t * _Value);
__declspec(dllimport) errno_t __cdecl _wsearchenv_s(   const wchar_t * _Filename,    const wchar_t * _EnvVar,     wchar_t * _ResultPath,   size_t _SizeInWords);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _wsearchenv_s(   const wchar_t * _Filename,    const wchar_t * _EnvVar, wchar_t (&_ResultPath)[_Size]) throw() { return _wsearchenv_s(_Filename, _EnvVar, _ResultPath, _Size); } }
 __declspec(dllimport) void __cdecl _wsearchenv( const wchar_t * _Filename,  const wchar_t * _EnvVar,   wchar_t *_ResultPath);
 __declspec(dllimport) void   __cdecl _wsplitpath(   const wchar_t * _FullPath,    wchar_t * _Drive,    wchar_t * _Dir,    wchar_t * _Filename,    wchar_t * _Ext);
__declspec(dllimport) errno_t __cdecl _wsplitpath_s(   const wchar_t * _FullPath, 
		    wchar_t * _Drive,   size_t _DriveSize, 
		    wchar_t * _Dir,   size_t _DirSize, 
		    wchar_t * _Filename,   size_t _FilenameSize, 
		    wchar_t * _Ext,   size_t _ExtSize);
extern "C++" { template <size_t _DriveSize, size_t _DirSize, size_t _NameSize, size_t _ExtSize> inline errno_t __cdecl _wsplitpath_s(  const wchar_t *_Path, wchar_t (&_Drive)[_DriveSize], wchar_t (&_Dir)[_DirSize], wchar_t (&_Name)[_NameSize], wchar_t (&_Ext)[_ExtSize]) throw() { return _wsplitpath_s(_Path, _Drive, _DriveSize, _Dir, _DirSize, _Name, _NameSize, _Ext, _ExtSize); } }


#line 839 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\stdlib.h"


__declspec(deprecated("This function or variable has been superceded by newer library or operating system functionality. Consider using " "SetErrorMode" " instead. See online help for details.")) __declspec(dllimport) void __cdecl _seterrormode(  int _Mode);
__declspec(deprecated("This function or variable has been superceded by newer library or operating system functionality. Consider using " "Beep" " instead. See online help for details.")) __declspec(dllimport) void __cdecl _beep(  unsigned _Frequency,   unsigned _Duration);
__declspec(deprecated("This function or variable has been superceded by newer library or operating system functionality. Consider using " "Sleep" " instead. See online help for details.")) __declspec(dllimport) void __cdecl _sleep(  unsigned long _Duration);

#line 846 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\stdlib.h"
















#pragma warning(push)
#pragma warning(disable: 4141)  
   __declspec(dllimport) char * __cdecl ecvt(  double _Val,   int _NumOfDigits,   int * _PtDec,   int * _PtSign);
   __declspec(dllimport) char * __cdecl fcvt(  double _Val,   int _NumOfDec,   int * _PtDec,   int * _PtSign);
 		__declspec(dllimport) char * __cdecl gcvt(  double _Val,   int _NumOfDigits,    char * _DstBuf);
 		__declspec(dllimport) char * __cdecl itoa(  int _Val,    char * _DstBuf,   int _Radix);
 		__declspec(dllimport) char * __cdecl ltoa(  long _Val,    char * _DstBuf,   int _Radix);
  __declspec(dllimport) int    __cdecl putenv(   const char * _EnvString);
										__declspec(dllimport) void   __cdecl swab(    char * _Buf1,    char * _Buf2,   int _SizeInBytes);
 	__declspec(dllimport) char * __cdecl ultoa(  unsigned long _Val,    char * _Dstbuf,   int _Radix);
#pragma warning(pop)
_onexit_t __cdecl onexit(   _onexit_t _Func);

#line 876 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\stdlib.h"

#line 878 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\stdlib.h"


}

#line 883 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\stdlib.h"

#pragma pack(pop)

#line 887 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\stdlib.h"

#line 7772 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\math_functions.h"


#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\cmath"

#pragma once


#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"

#pragma once



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"














 








































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 7 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"

#pragma pack(push,8)









 
#line 20 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"









































#line 62 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"

#line 64 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"
#line 65 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"

		





#line 73 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"
#line 74 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"

		


		




		

 
  

 

#line 91 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"

 
  
 #line 95 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"


 
#line 99 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"

 
  
 #line 103 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"













































	
	






		


			
		#line 161 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"
	#line 162 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"

	
	




		

#line 172 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"
			
		#line 174 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"
	#line 175 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"

	
	

#line 180 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"

#line 182 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"
		
	#line 184 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"

#line 186 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"




#line 191 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"


	
		#pragma detect_mismatch("_MSC_VER", "1600")
	#line 196 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"

	
		
		     #pragma detect_mismatch("_ITERATOR_DEBUG_LEVEL", "0")
		





#line 207 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"
	#line 208 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"
#line 209 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"





#line 215 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"




#line 220 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"

#line 222 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"
#line 223 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"



#line 227 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"









#line 237 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"

#line 239 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"



 
#line 244 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"


 












#line 260 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"

 
 

 #line 265 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"

 









 









 









 
































#line 330 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"
 




#line 336 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"
 
 
#line 339 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"

 
 

 #line 344 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"











#line 356 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\use_ansi.h"













#pragma once














#pragma comment(lib,"msvcprt")
#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\use_ansi.h"

















#line 49 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\use_ansi.h"

#line 51 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\use_ansi.h"

#line 53 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\use_ansi.h"

#line 55 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\use_ansi.h"
#line 358 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"







#line 366 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"







#line 374 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"


 











 
  

#line 392 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"
   
  #line 394 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"
 #line 395 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"






 










 
  

#line 416 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"
   
  #line 418 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"
 #line 419 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"

 
  

#line 424 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"
   
  #line 426 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"
 #line 427 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"


 

   


#line 435 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"
    
   #line 437 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"

 #line 439 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"


 
  

#line 445 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"
   
  #line 447 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"
 #line 448 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"


 
  

#line 454 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"
   
  #line 456 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"
 #line 457 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"


 
  

#line 463 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"
   
  #line 465 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"
 #line 466 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"

 
  
 #line 470 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"

 
   


     
   #line 477 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"
 #line 478 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"


    
#line 482 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"



		

 
  
  
  




  
  
  

  







   
   
   
  #line 511 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"

  
  
  
  

 












#line 531 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"

 

 
namespace std {
typedef bool _Bool;
}
 #line 539 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"

		





		






typedef __int64 _Longlong;
typedef unsigned __int64 _ULonglong;

		


 
  
 #line 562 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"






 
#line 570 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"

		
 
#line 574 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"
 
  
typedef unsigned short char16_t;
typedef unsigned int char32_t;
 #line 579 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"

 #line 581 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"

		
		






 
namespace std {
enum _Uninitialized
	{	
	_Noinit
	};

		

#pragma warning(push)
#pragma warning(disable:4412)
class __declspec(dllimport) _Lockit
	{	
public:
 

  
















#line 624 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"
	__thiscall _Lockit();	
	explicit __thiscall _Lockit(int);	
	__thiscall ~_Lockit();	
  #line 628 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"

    static  void __cdecl _Lockit_ctor(int);
    static  void __cdecl _Lockit_dtor(int);

private:
    static  void __cdecl _Lockit_ctor(_Lockit *);
    static  void __cdecl _Lockit_ctor(_Lockit *, int);
    static  void __cdecl _Lockit_dtor(_Lockit *);

	 _Lockit(const _Lockit&);				
	_Lockit&  operator=(const _Lockit&);	

	int _Locktype;

  











#line 655 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"
	};

 



































































  



  


  



  


  
 #line 741 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"

class __declspec(dllimport) _Mutex
	{	
public:

 
  
























#line 773 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"
    __thiscall _Mutex(_Uninitialized)
		{	
		}

    __thiscall _Mutex();
	__thiscall ~_Mutex();
	void __thiscall _Lock();
	void __thiscall _Unlock();
  #line 782 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"

private:
    static  void __cdecl _Mutex_ctor(_Mutex *);
    static  void __cdecl _Mutex_dtor(_Mutex *);
    static  void __cdecl _Mutex_Lock(_Mutex *);
    static  void __cdecl _Mutex_Unlock(_Mutex *);

	 _Mutex(const _Mutex&);				
	_Mutex&  operator=(const _Mutex&);	
	void *_Mtx;

  







#line 802 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"
	};

class __declspec(dllimport) _Init_locks
	{	
public:
 
      










#line 820 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"
    __thiscall _Init_locks();
	__thiscall ~_Init_locks();
  #line 823 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"

private:
    static  void __cdecl _Init_locks_ctor(_Init_locks *);
    static  void __cdecl _Init_locks_dtor(_Init_locks *);

 







#line 837 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"
	};

#pragma warning(pop)
}
 #line 842 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"





		

__declspec(dllimport) void __cdecl _Atexit(void (__cdecl *)(void));

typedef int _Mbstatet;
typedef unsigned long _Uint32t;





 

 #pragma pack(pop)

#line 863 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\yvals.h"






#line 6 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\cmath"







 #line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\math.h"
































































































































































































































































































































































































































































































































































































































































#line 642 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\math.h"

#line 14 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\cmath"
#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\cmath"

 

namespace std {
using :: acosf; using :: asinf;
using :: atanf; using :: atan2f; using :: ceilf;
using :: cosf; using :: coshf; using :: expf;
using :: fabsf; using :: floorf; using :: fmodf;
using :: frexpf; using :: ldexpf; using :: logf;
using :: log10f; using :: modff; using :: powf;
using :: sinf; using :: sinhf; using :: sqrtf;
using :: tanf; using :: tanhf;

using :: acosl; using :: asinl;
using :: atanl; using :: atan2l; using :: ceill;
using :: cosl; using :: coshl; using :: expl;
using :: fabsl; using :: floorl; using :: fmodl;
using :: frexpl; using :: ldexpl; using :: logl;
using :: log10l; using :: modfl; using :: powl;
using :: sinl; using :: sinhl; using :: sqrtl;
using :: tanl; using :: tanhl;

using :: abs;

using :: acos; using :: asin;
using :: atan; using :: atan2; using :: ceil;
using :: cos; using :: cosh; using :: exp;
using :: fabs; using :: floor; using :: fmod;
using :: frexp; using :: ldexp; using :: log;
using :: log10; using :: modf; using :: pow;
using :: sin; using :: sinh; using :: sqrt;
using :: tan; using :: tanh;
}
 #line 49 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\cmath"

#line 51 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\cmath"





#line 7775 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\math_functions.h"
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\cstdlib"

#pragma once










 
#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\cstdlib"

 

namespace std {
using :: size_t; using :: div_t; using :: ldiv_t;

using :: abort; using :: abs; using :: atexit;
using :: atof; using :: atoi; using :: atol;
using :: bsearch; using :: calloc; using :: div;
using :: exit; using :: free; using :: getenv;
using :: labs; using :: ldiv; using :: malloc;
using :: mblen; using :: mbstowcs; using :: mbtowc;
using :: qsort; using :: rand; using :: realloc;
using :: srand; using :: strtod; using :: strtol;
using :: strtoul; using :: system;
using :: wcstombs; using :: wctomb;

using :: lldiv_t;

using :: llabs; using :: lldiv;
}
 #line 37 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\cstdlib"

#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\cstdlib"





#line 7776 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\math_functions.h"
#line 7777 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\math_functions.h"




























































































#line 7870 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\math_functions.h"








#line 7879 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\math_functions.h"

extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) __declspec(dllimport) double __cdecl _hypot(double x, double y);
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) __declspec(dllimport) float  __cdecl _hypotf(float x, float y);

#line 7884 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\math_functions.h"

static __inline __declspec(__host__) __declspec(__device__) int signbit(long double a)
{
  return __signbitl(a);
}












static __inline __declspec(__host__) __declspec(__device__) int signbit(double a)
{
  return __signbit(a);
}












static __inline __declspec(__host__) __declspec(__device__) int signbit(float a)
{
  return __signbitf(a);
}

static __inline __declspec(__host__) __declspec(__device__) int isinf(long double a)
{
  return __isinfl(a);
}












static __inline __declspec(__host__) __declspec(__device__) int isinf(double a)
{
  return __isinf(a);
}












static __inline __declspec(__host__) __declspec(__device__) int isinf(float a)
{
  return __isinff(a);
}

static __inline __declspec(__host__) __declspec(__device__) int isnan(long double a)
{
  return __isnanl(a);
}











static __inline __declspec(__host__) __declspec(__device__) int isnan(double a)
{
  return __isnan(a);
}











static __inline __declspec(__host__) __declspec(__device__) int isnan(float a)
{
  return __isnanf(a);
}

static __inline __declspec(__host__) __declspec(__device__) int isfinite(long double a)
{
  return __finitel(a);
}












static __inline __declspec(__host__) __declspec(__device__) int isfinite(double a)
{
  return __finite(a);
}












static __inline __declspec(__host__) __declspec(__device__) int isfinite(float a)
{
  return __finitef(a);
}

template<class T> extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) T _Pow_int(T, int);
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) long long int abs(long long int);

#line 8035 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\math_functions.h"



#line 8039 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\math_functions.h"







#line 8047 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\math_functions.h"

extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) long int __cdecl abs(long int);
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float    __cdecl abs(float);
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) double   __cdecl abs(double);
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float    __cdecl fabs(float);
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float    __cdecl ceil(float);
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float    __cdecl floor(float);
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float    __cdecl sqrt(float);
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float    __cdecl pow(float, float);
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float    __cdecl pow(float, int);
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) double   __cdecl pow(double, int);
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float    __cdecl log(float);
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float    __cdecl log10(float);
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float    __cdecl fmod(float, float);
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float    __cdecl modf(float, float*);
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float    __cdecl exp(float);
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float    __cdecl frexp(float, int*);
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float    __cdecl ldexp(float, int);
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float    __cdecl asin(float);
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float    __cdecl sin(float);
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float    __cdecl sinh(float);
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float    __cdecl acos(float);
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float    __cdecl cos(float);
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float    __cdecl cosh(float);
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float    __cdecl atan(float);
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float    __cdecl atan2(float, float);
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float    __cdecl tan(float);
extern __declspec(__host__) __declspec(__device__) __declspec(__cudart_builtin__) float    __cdecl tanh(float);



#line 8079 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\math_functions.h"

static __inline __declspec(__host__) __declspec(__device__) float logb(float a)
{
  return logbf(a);
}

static __inline __declspec(__host__) __declspec(__device__) int ilogb(float a)
{
  return ilogbf(a);
}

static __inline __declspec(__host__) __declspec(__device__) float scalbn(float a, int b)
{
  return scalbnf(a, b);
}

static __inline __declspec(__host__) __declspec(__device__) float scalbln(float a, long int b)
{
  return scalblnf(a, b);
}

static __inline __declspec(__host__) __declspec(__device__) float exp2(float a)
{
  return exp2f(a);
}

static __inline __declspec(__host__) __declspec(__device__) float exp10(float a)
{
  return exp10f(a);
}

static __inline __declspec(__host__) __declspec(__device__) float expm1(float a)
{
  return expm1f(a);
}

static __inline __declspec(__host__) __declspec(__device__) float log2(float a)
{
  return log2f(a);
}

static __inline __declspec(__host__) __declspec(__device__) float log1p(float a)
{
  return log1pf(a);
}

static __inline __declspec(__host__) __declspec(__device__) float rsqrt(float a)
{
  return rsqrtf(a);
}

static __inline __declspec(__host__) __declspec(__device__) float acosh(float a)
{
  return acoshf(a);
}

static __inline __declspec(__host__) __declspec(__device__) float asinh(float a)
{
  return asinhf(a);
}

static __inline __declspec(__host__) __declspec(__device__) float atanh(float a)
{
  return atanhf(a);
}

static __inline __declspec(__host__) __declspec(__device__) float hypot(float a, float b)
{
  return hypotf(a, b);
}

static __inline __declspec(__host__) __declspec(__device__) float cbrt(float a)
{
  return cbrtf(a);
}

static __inline __declspec(__host__) __declspec(__device__) float rcbrt(float a)
{
  return rcbrtf(a);
}

static __inline __declspec(__host__) __declspec(__device__) float sinpi(float a)
{
  return sinpif(a);
}

static __inline __declspec(__host__) __declspec(__device__) float cospi(float a)
{
  return cospif(a);
}

static __inline __declspec(__host__) __declspec(__device__) void sincospi(float a, float *sptr, float *cptr)
{
  sincospif(a, sptr, cptr);
}

static __inline __declspec(__host__) __declspec(__device__) void sincos(float a, float *sptr, float *cptr)
{
  sincosf(a, sptr, cptr);
}

static __inline __declspec(__host__) __declspec(__device__) float j0(float a)
{
  return j0f(a);
}

static __inline __declspec(__host__) __declspec(__device__) float j1(float a)
{
  return j1f(a);
}

static __inline __declspec(__host__) __declspec(__device__) float jn(int n, float a)
{
  return jnf(n, a);
}

static __inline __declspec(__host__) __declspec(__device__) float y0(float a)
{
  return y0f(a);
}

static __inline __declspec(__host__) __declspec(__device__) float y1(float a)
{
  return y1f(a);
}

static __inline __declspec(__host__) __declspec(__device__) float yn(int n, float a)
{ 
  return ynf(n, a);
}

static __inline __declspec(__host__) __declspec(__device__) float cyl_bessel_i0(float a)
{
  return cyl_bessel_i0f(a);
}

static __inline __declspec(__host__) __declspec(__device__) float cyl_bessel_i1(float a)
{
  return cyl_bessel_i1f(a);
}

static __inline __declspec(__host__) __declspec(__device__) float erf(float a)
{
  return erff(a);
}

static __inline __declspec(__host__) __declspec(__device__) float erfinv(float a)
{
  return erfinvf(a);
}

static __inline __declspec(__host__) __declspec(__device__) float erfc(float a)
{
  return erfcf(a);
}

static __inline __declspec(__host__) __declspec(__device__) float erfcinv(float a)
{
  return erfcinvf(a);
}

static __inline __declspec(__host__) __declspec(__device__) float normcdfinv(float a)
{
  return normcdfinvf(a);
}

static __inline __declspec(__host__) __declspec(__device__) float normcdf(float a)
{
  return normcdff(a);
}

static __inline __declspec(__host__) __declspec(__device__) float erfcx(float a)
{
  return erfcxf(a);
}

static __inline __declspec(__host__) __declspec(__device__) float lgamma(float a)
{
  return lgammaf(a);
}

static __inline __declspec(__host__) __declspec(__device__) float tgamma(float a)
{
  return tgammaf(a);
}

static __inline __declspec(__host__) __declspec(__device__) float copysign(float a, float b)
{
  return copysignf(a, b);
}

static __inline __declspec(__host__) __declspec(__device__) double copysign(double a, float b)
{
  return copysign(a, (double)b);
}

static __inline __declspec(__host__) __declspec(__device__) float copysign(float a, double b)
{
  return copysignf(a, (float)b);
}

static __inline __declspec(__host__) __declspec(__device__) float nextafter(float a, float b)
{
  return nextafterf(a, b);
}

static __inline __declspec(__host__) __declspec(__device__) float remainder(float a, float b)
{
  return remainderf(a, b);
}

static __inline __declspec(__host__) __declspec(__device__) float remquo(float a, float b, int *quo)
{
  return remquof(a, b, quo);
}

static __inline __declspec(__host__) __declspec(__device__) float round(float a)
{
  return roundf(a);
}

static __inline __declspec(__host__) __declspec(__device__) long int lround(float a)
{
  return lroundf(a);
}

static __inline __declspec(__host__) __declspec(__device__) long long int llround(float a)
{
  return llroundf(a);
}

static __inline __declspec(__host__) __declspec(__device__) float trunc(float a)
{
  return truncf(a);
}

static __inline __declspec(__host__) __declspec(__device__) float rint(float a)
{
  return rintf(a);
}

static __inline __declspec(__host__) __declspec(__device__) long int lrint(float a)
{
  return lrintf(a);
}

static __inline __declspec(__host__) __declspec(__device__) long long int llrint(float a)
{
  return llrintf(a);
}

static __inline __declspec(__host__) __declspec(__device__) float nearbyint(float a)
{
  return nearbyintf(a);
}

static __inline __declspec(__host__) __declspec(__device__) float fdim(float a, float b)
{
  return fdimf(a, b);
}

static __inline __declspec(__host__) __declspec(__device__) float fma(float a, float b, float c)
{
  return fmaf(a, b, c);
}

static __inline __declspec(__host__) __declspec(__device__) float fmax(float a, float b)
{
  return fmaxf(a, b);
}

static __inline __declspec(__host__) __declspec(__device__) float fmin(float a, float b)
{
  return fminf(a, b);
}

static __inline __declspec(__host__) __declspec(__device__) unsigned int min(unsigned int a, unsigned int b)
{
  return umin(a, b);
}

static __inline __declspec(__host__) __declspec(__device__) unsigned int min(int a, unsigned int b)
{
  return umin((unsigned int)a, b);
}

static __inline __declspec(__host__) __declspec(__device__) unsigned int min(unsigned int a, int b)
{
  return umin(a, (unsigned int)b);
}

static __inline __declspec(__host__) __declspec(__device__) long long int min(long long int a, long long int b)
{
  return llmin(a, b);
}

static __inline __declspec(__host__) __declspec(__device__) unsigned long long int min(unsigned long long int a, unsigned long long int b)
{
  return ullmin(a, b);
}

static __inline __declspec(__host__) __declspec(__device__) unsigned long long int min(long long int a, unsigned long long int b)
{
  return ullmin((unsigned long long int)a, b);
}

static __inline __declspec(__host__) __declspec(__device__) unsigned long long int min(unsigned long long int a, long long int b)
{
  return ullmin(a, (unsigned long long int)b);
}

static __inline __declspec(__host__) __declspec(__device__) float min(float a, float b)
{
  return fminf(a, b);
}

static __inline __declspec(__host__) __declspec(__device__) double min(double a, double b)
{
  return fmin(a, b);
}

static __inline __declspec(__host__) __declspec(__device__) double min(float a, double b)
{
  return fmin((double)a, b);
}

static __inline __declspec(__host__) __declspec(__device__) double min(double a, float b)
{
  return fmin(a, (double)b);
}

static __inline __declspec(__host__) __declspec(__device__) unsigned int max(unsigned int a, unsigned int b)
{
  return umax(a, b);
}

static __inline __declspec(__host__) __declspec(__device__) unsigned int max(int a, unsigned int b)
{
  return umax((unsigned int)a, b);
}

static __inline __declspec(__host__) __declspec(__device__) unsigned int max(unsigned int a, int b)
{
  return umax(a, (unsigned int)b);
}

static __inline __declspec(__host__) __declspec(__device__) long long int max(long long int a, long long int b)
{
  return llmax(a, b);
}

static __inline __declspec(__host__) __declspec(__device__) unsigned long long int max(unsigned long long int a, unsigned long long int b)
{
  return ullmax(a, b);
}

static __inline __declspec(__host__) __declspec(__device__) unsigned long long int max(long long int a, unsigned long long int b)
{
  return ullmax((unsigned long long int)a, b);
}

static __inline __declspec(__host__) __declspec(__device__) unsigned long long int max(unsigned long long int a, long long int b)
{
  return ullmax(a, (unsigned long long int)b);
}

static __inline __declspec(__host__) __declspec(__device__) float max(float a, float b)
{
  return fmaxf(a, b);
}

static __inline __declspec(__host__) __declspec(__device__) double max(double a, double b)
{
  return fmax(a, b);
}

static __inline __declspec(__host__) __declspec(__device__) double max(float a, double b)
{
  return fmax((double)a, b);
}

static __inline __declspec(__host__) __declspec(__device__) double max(double a, float b)
{
  return fmax(a, (double)b);
}






















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 14055 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\math_functions.h"





#line 14061 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\math_functions.h"





#line 14067 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\math_functions.h"





#line 14073 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\math_functions.h"

#line 14075 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\math_functions.h"

#line 168 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\common_functions.h"

#line 170 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\common_functions.h"

#line 77 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v6.0\\include\\cuda_runtime.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\cuda_surface_types.h"




























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\builtin_types.h"























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\device_types.h"




































































#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\device_types.h"
#line 57 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\driver_types.h"




































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1414 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\driver_types.h"

#line 58 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\surface_types.h"






















































































































#line 120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\surface_types.h"
#line 59 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_types.h"




















































































































































































































#line 214 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_types.h"
#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\vector_types.h"












































































































































































































































































































































































































































#line 430 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\vector_types.h"
#line 61 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\builtin_types.h"
#line 62 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\cuda_surface_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\channel_descriptor.h"



























































































































































































































































































































































































































#line 413 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\channel_descriptor.h"
#line 63 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\cuda_surface_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\driver_types.h"




































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1414 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\driver_types.h"

#line 64 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\cuda_surface_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\host_defines.h"












































































































































































































#line 206 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\host_defines.h"
#line 65 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\cuda_surface_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\surface_types.h"






















































































































#line 120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\surface_types.h"
#line 66 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\cuda_surface_types.h"







template<class T, int dim = 1>
struct __declspec(__device_builtin_surface_type__) surface : public surfaceReference
{
  __declspec(__host__) surface(void)
  {
    channelDesc = cudaCreateChannelDesc<T>();
  }

  __declspec(__host__) surface(struct cudaChannelFormatDesc desc)
  {
    channelDesc = desc;
  }
};

template<int dim>
struct  __declspec(__device_builtin_surface_type__)  surface<void, dim> : public surfaceReference
{
  __declspec(__host__) surface(void)
  {
    channelDesc = cudaCreateChannelDesc<void>();
  }
};

#line 97 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\cuda_surface_types.h"

#line 99 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\cuda_surface_types.h"
#line 78 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v6.0\\include\\cuda_runtime.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\cuda_texture_types.h"




























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\builtin_types.h"























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\device_types.h"




































































#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\device_types.h"
#line 57 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\driver_types.h"




































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1414 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\driver_types.h"

#line 58 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\surface_types.h"






















































































































#line 120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\surface_types.h"
#line 59 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_types.h"




















































































































































































































#line 214 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_types.h"
#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\vector_types.h"












































































































































































































































































































































































































































#line 430 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\vector_types.h"
#line 61 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\builtin_types.h"
#line 62 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\cuda_texture_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\channel_descriptor.h"



























































































































































































































































































































































































































#line 413 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\channel_descriptor.h"
#line 63 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\cuda_texture_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\driver_types.h"




































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1414 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\driver_types.h"

#line 64 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\cuda_texture_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\host_defines.h"












































































































































































































#line 206 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\host_defines.h"
#line 65 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\cuda_texture_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_types.h"




















































































































































































































#line 214 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_types.h"
#line 66 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\cuda_texture_types.h"







template<class T, int texType = 0x01, enum cudaTextureReadMode mode = cudaReadModeElementType>
struct __declspec(__device_builtin_texture_type__) texture : public textureReference
{
  __declspec(__host__) texture(int                         norm  = 0,
                   enum cudaTextureFilterMode  fMode = cudaFilterModePoint,
                   enum cudaTextureAddressMode aMode = cudaAddressModeClamp)
  {
    normalized     = norm;
    filterMode     = fMode;
    addressMode[0] = aMode;
    addressMode[1] = aMode;
    addressMode[2] = aMode;
    channelDesc    = cudaCreateChannelDesc<T>();
    sRGB           = 0;
  }

  __declspec(__host__) texture(int                          norm,
                   enum cudaTextureFilterMode   fMode,
                   enum cudaTextureAddressMode  aMode,
                   struct cudaChannelFormatDesc desc)
  {
    normalized     = norm;
    filterMode     = fMode;
    addressMode[0] = aMode;
    addressMode[1] = aMode;
    addressMode[2] = aMode;
    channelDesc    = desc;
    sRGB           = 0;
  }
};

#line 105 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\cuda_texture_types.h"

#line 107 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\cuda_texture_types.h"
#line 79 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v6.0\\include\\cuda_runtime.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\device_functions.h"




























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\builtin_types.h"























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\device_types.h"




































































#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\device_types.h"
#line 57 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\driver_types.h"




































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1414 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\driver_types.h"

#line 58 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\surface_types.h"






















































































































#line 120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\surface_types.h"
#line 59 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_types.h"




















































































































































































































#line 214 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_types.h"
#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\vector_types.h"












































































































































































































































































































































































































































#line 430 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\vector_types.h"
#line 61 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\builtin_types.h"
#line 62 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\device_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\device_types.h"




































































#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\device_types.h"
#line 63 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\device_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\host_defines.h"












































































































































































































#line 206 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\host_defines.h"
#line 64 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\device_functions.h"







extern "C"
{









extern __declspec(__device__) __declspec(__device_builtin__) int                    __mulhi(int x, int y);









extern __declspec(__device__) __declspec(__device_builtin__) unsigned int           __umulhi(unsigned int x, unsigned int y);









extern __declspec(__device__) __declspec(__device_builtin__) long long int          __mul64hi(long long int x, long long int y);









extern __declspec(__device__) __declspec(__device_builtin__) unsigned long long int __umul64hi(unsigned long long int x, unsigned long long int y);








extern __declspec(__device__) __declspec(__device_builtin__) float                  __int_as_float(int x);








extern __declspec(__device__) __declspec(__device_builtin__) int                    __float_as_int(float x);
extern __declspec(__device__) __declspec(__device_builtin__) void                   __syncthreads(void);
extern __declspec(__device__) __declspec(__device_builtin__) void                   __prof_trigger(int);
extern __declspec(__device__) __declspec(__device_builtin__) void                   __threadfence(void);
extern __declspec(__device__) __declspec(__device_builtin__) void                   __threadfence_block(void);
extern __declspec(__device__) __declspec(__device_builtin__) void                   __trap(void);
extern __declspec(__device__) __declspec(__device_builtin__) void                   __brkpt(int c = 0);






















extern __declspec(__device__) __declspec(__device_builtin__) float                  __saturatef(float x);




































































extern __declspec(__device__) __declspec(__device_builtin__) unsigned int           __sad(int x, int y, unsigned int z);



































































extern __declspec(__device__) __declspec(__device_builtin__) unsigned int           __usad(unsigned int x, unsigned int y, unsigned int z);









extern __declspec(__device__) __declspec(__device_builtin__) int                    __mul24(int x, int y);









extern __declspec(__device__) __declspec(__device_builtin__) unsigned int           __umul24(unsigned int x, unsigned int y);












extern __declspec(__device__) __declspec(__device_builtin__) float                  fdividef(float x, float y);










































































extern __declspec(__device__) __declspec(__device_builtin__) float                  __fdividef(float x, float y);
extern __declspec(__device__) __declspec(__device_builtin__) double                 fdivide(double x, double y);











extern __declspec(__device__) __declspec(__device_builtin__) __declspec(__cudart_builtin__) float                  __sinf(float x) ;











extern __declspec(__device__) __declspec(__device_builtin__) __declspec(__cudart_builtin__) float                  __cosf(float x) ;













extern __declspec(__device__) __declspec(__device_builtin__) __declspec(__cudart_builtin__) float                  __tanf(float x) ;














extern __declspec(__device__) __declspec(__device_builtin__) __declspec(__cudart_builtin__) void                   __sincosf(float x, float *sptr, float *cptr) ;

















































extern __declspec(__device__) __declspec(__device_builtin__) __declspec(__cudart_builtin__) float                  __expf(float x) ;































extern __declspec(__device__) __declspec(__device_builtin__) __declspec(__cudart_builtin__) float                  __exp10f(float x) ;

























extern __declspec(__device__) __declspec(__device_builtin__) __declspec(__cudart_builtin__) float                  __log2f(float x) ;



























extern __declspec(__device__) __declspec(__device_builtin__) __declspec(__cudart_builtin__) float                  __log10f(float x) ;











































extern __declspec(__device__) __declspec(__device_builtin__) __declspec(__cudart_builtin__) float                  __logf(float x) ;










































extern __declspec(__device__) __declspec(__device_builtin__) __declspec(__cudart_builtin__) float                  __powf(float x, float y) ;








extern __declspec(__device__) __declspec(__device_builtin__) int                    __float2int_rn(float x);








extern __declspec(__device__) __declspec(__device_builtin__) int                    __float2int_rz(float x);








extern __declspec(__device__) __declspec(__device_builtin__) int                    __float2int_ru(float);








extern __declspec(__device__) __declspec(__device_builtin__) int                    __float2int_rd(float x);








extern __declspec(__device__) __declspec(__device_builtin__) unsigned int           __float2uint_rn(float x);








extern __declspec(__device__) __declspec(__device_builtin__) unsigned int           __float2uint_rz(float x);








extern __declspec(__device__) __declspec(__device_builtin__) unsigned int           __float2uint_ru(float x);








extern __declspec(__device__) __declspec(__device_builtin__) unsigned int           __float2uint_rd(float x);








extern __declspec(__device__) __declspec(__device_builtin__) float                  __int2float_rn(int x);








extern __declspec(__device__) __declspec(__device_builtin__) float                  __int2float_rz(int x);








extern __declspec(__device__) __declspec(__device_builtin__) float                  __int2float_ru(int x);








extern __declspec(__device__) __declspec(__device_builtin__) float                  __int2float_rd(int x);








extern __declspec(__device__) __declspec(__device_builtin__) float                  __uint2float_rn(unsigned int x);








extern __declspec(__device__) __declspec(__device_builtin__) float                  __uint2float_rz(unsigned int x);








extern __declspec(__device__) __declspec(__device_builtin__) float                  __uint2float_ru(unsigned int x);








extern __declspec(__device__) __declspec(__device_builtin__) float                  __uint2float_rd(unsigned int x);








extern __declspec(__device__) __declspec(__device_builtin__) long long int          __float2ll_rn(float x);








extern __declspec(__device__) __declspec(__device_builtin__) long long int          __float2ll_rz(float x);








extern __declspec(__device__) __declspec(__device_builtin__) long long int          __float2ll_ru(float x);








extern __declspec(__device__) __declspec(__device_builtin__) long long int          __float2ll_rd(float x);








extern __declspec(__device__) __declspec(__device_builtin__) unsigned long long int __float2ull_rn(float x);








extern __declspec(__device__) __declspec(__device_builtin__) unsigned long long int __float2ull_rz(float x);








extern __declspec(__device__) __declspec(__device_builtin__) unsigned long long int __float2ull_ru(float x);








extern __declspec(__device__) __declspec(__device_builtin__) unsigned long long int __float2ull_rd(float x);








extern __declspec(__device__) __declspec(__device_builtin__) float                  __ll2float_rn(long long int x);








extern __declspec(__device__) __declspec(__device_builtin__) float                  __ll2float_rz(long long int x);








extern __declspec(__device__) __declspec(__device_builtin__) float                  __ll2float_ru(long long int x);








extern __declspec(__device__) __declspec(__device_builtin__) float                  __ll2float_rd(long long int x);








extern __declspec(__device__) __declspec(__device_builtin__) float                  __ull2float_rn(unsigned long long int x);








extern __declspec(__device__) __declspec(__device_builtin__) float                  __ull2float_rz(unsigned long long int x);








extern __declspec(__device__) __declspec(__device_builtin__) float                  __ull2float_ru(unsigned long long int x);








extern __declspec(__device__) __declspec(__device_builtin__) float                  __ull2float_rd(unsigned long long int x);








extern __declspec(__device__) __declspec(__device_builtin__) unsigned short         __float2half_rn(float x);








extern __declspec(__device__) __declspec(__device_builtin__) float                  __half2float(unsigned short x);











extern __declspec(__device__) __declspec(__device_builtin__) float                  __fadd_rn(float x, float y);











extern __declspec(__device__) __declspec(__device_builtin__) float                  __fadd_rz(float x, float y);











extern __declspec(__device__) __declspec(__device_builtin__) float                  __fadd_ru(float x, float y);











extern __declspec(__device__) __declspec(__device_builtin__) float                  __fadd_rd(float x, float y);











extern __declspec(__device__) __declspec(__device_builtin__) float                  __fsub_rn(float x, float y);











extern __declspec(__device__) __declspec(__device_builtin__) float                  __fsub_rz(float x, float y);











extern __declspec(__device__) __declspec(__device_builtin__) float                  __fsub_ru(float x, float y);











extern __declspec(__device__) __declspec(__device_builtin__) float                  __fsub_rd(float x, float y);











extern __declspec(__device__) __declspec(__device_builtin__) float                  __fmul_rn(float x, float y);











extern __declspec(__device__) __declspec(__device_builtin__) float                  __fmul_rz(float x, float y);











extern __declspec(__device__) __declspec(__device_builtin__) float                  __fmul_ru(float x, float y);











extern __declspec(__device__) __declspec(__device_builtin__) float                  __fmul_rd(float x, float y);
























































































































































extern __declspec(__device__) __declspec(__device_builtin__) float                  __fmaf_rn(float x, float y, float z);
























































































































































extern __declspec(__device__) __declspec(__device_builtin__) float                  __fmaf_rz(float x, float y, float z);
























































































































































extern __declspec(__device__) __declspec(__device_builtin__) float                  __fmaf_ru(float x, float y, float z);
























































































































































extern __declspec(__device__) __declspec(__device_builtin__) float                  __fmaf_rd(float x, float y, float z);
































extern __declspec(__device__) __declspec(__device_builtin__) float                  __frcp_rn(float x);
































extern __declspec(__device__) __declspec(__device_builtin__) float                  __frcp_rz(float x);
































extern __declspec(__device__) __declspec(__device_builtin__) float                  __frcp_ru(float x);
































extern __declspec(__device__) __declspec(__device_builtin__) float                  __frcp_rd(float x);






























extern __declspec(__device__) __declspec(__device_builtin__) float                  __fsqrt_rn(float x);






























extern __declspec(__device__) __declspec(__device_builtin__) float                  __fsqrt_rz(float x);






























extern __declspec(__device__) __declspec(__device_builtin__) float                  __fsqrt_ru(float x);






























extern __declspec(__device__) __declspec(__device_builtin__) float                  __fsqrt_rd(float x);






































extern __declspec(__device__) __declspec(__device_builtin__) float                  __frsqrt_rn(float x);










extern __declspec(__device__) __declspec(__device_builtin__) float                  __fdiv_rn(float x, float y);










extern __declspec(__device__) __declspec(__device_builtin__) float                  __fdiv_rz(float x, float y);










extern __declspec(__device__) __declspec(__device_builtin__) float                  __fdiv_ru(float x, float y);










extern __declspec(__device__) __declspec(__device_builtin__) float                  __fdiv_rd(float x, float y);








extern __declspec(__device__) __declspec(__device_builtin__) int                    __clz(int x);










extern __declspec(__device__) __declspec(__device_builtin__) int                    __ffs(int x);








extern __declspec(__device__) __declspec(__device_builtin__) int                    __popc(unsigned int x);








extern __declspec(__device__) __declspec(__device_builtin__) unsigned int           __brev(unsigned int x);








extern __declspec(__device__) __declspec(__device_builtin__) int                    __clzll(long long int x);










extern __declspec(__device__) __declspec(__device_builtin__) int                    __ffsll(long long int x);










extern __declspec(__device__) __declspec(__device_builtin__) int                    __popcll(unsigned long long int x);








extern __declspec(__device__) __declspec(__device_builtin__) unsigned long long int __brevll(unsigned long long int x);























extern __declspec(__device__) __declspec(__device_builtin__) unsigned int           __byte_perm(unsigned int x, unsigned int y, unsigned int s);











extern __declspec(__device__) __declspec(__device_builtin__) int                    __hadd(int, int);












extern __declspec(__device__) __declspec(__device_builtin__) int                    __rhadd(int, int);











extern __declspec(__device__) __declspec(__device_builtin__) unsigned int           __uhadd(unsigned int, unsigned int);












extern __declspec(__device__) __declspec(__device_builtin__) unsigned int           __urhadd(unsigned int, unsigned int);










extern __declspec(__device__) __declspec(__device_builtin__) int                    __double2int_rz(double);








extern __declspec(__device__) __declspec(__device_builtin__) unsigned int           __double2uint_rz(double);








extern __declspec(__device__) __declspec(__device_builtin__) long long int          __double2ll_rz(double);








extern __declspec(__device__) __declspec(__device_builtin__) unsigned long long int __double2ull_rz(double);
extern __declspec(__device__) __declspec(__device_builtin__) unsigned int           __pm0(void);
extern __declspec(__device__) __declspec(__device_builtin__) unsigned int           __pm1(void);
extern __declspec(__device__) __declspec(__device_builtin__) unsigned int           __pm2(void);
extern __declspec(__device__) __declspec(__device_builtin__) unsigned int           __pm3(void);
#line 2278 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\device_functions.h"
















extern __declspec(__device__) __declspec(__device_builtin__) unsigned int __vabs2(unsigned int a);










extern __declspec(__device__) __declspec(__device_builtin__) unsigned int __vabsss2(unsigned int a);










extern __declspec(__device__) __declspec(__device_builtin__) unsigned int __vadd2(unsigned int a, unsigned int b);










extern __declspec(__device__) __declspec(__device_builtin__) unsigned int __vaddss2 (unsigned int a, unsigned int b);









extern __declspec(__device__) __declspec(__device_builtin__) unsigned int __vaddus2 (unsigned int a, unsigned int b);










extern __declspec(__device__) __declspec(__device_builtin__) unsigned int __vavgs2(unsigned int a, unsigned int b);










extern __declspec(__device__) __declspec(__device_builtin__) unsigned int __vavgu2(unsigned int a, unsigned int b);










extern __declspec(__device__) __declspec(__device_builtin__) unsigned int __vhaddu2(unsigned int a, unsigned int b);










extern __declspec(__device__) __declspec(__device_builtin__) unsigned int __vcmpeq2(unsigned int a, unsigned int b);










extern __declspec(__device__) __declspec(__device_builtin__) unsigned int __vcmpges2(unsigned int a, unsigned int b);










extern __declspec(__device__) __declspec(__device_builtin__) unsigned int __vcmpgeu2(unsigned int a, unsigned int b);










extern __declspec(__device__) __declspec(__device_builtin__) unsigned int __vcmpgts2(unsigned int a, unsigned int b);










extern __declspec(__device__) __declspec(__device_builtin__) unsigned int __vcmpgtu2(unsigned int a, unsigned int b);










extern __declspec(__device__) __declspec(__device_builtin__) unsigned int __vcmples2(unsigned int a, unsigned int b);











extern __declspec(__device__) __declspec(__device_builtin__) unsigned int __vcmpleu2(unsigned int a, unsigned int b);










extern __declspec(__device__) __declspec(__device_builtin__) unsigned int __vcmplts2(unsigned int a, unsigned int b);










extern __declspec(__device__) __declspec(__device_builtin__) unsigned int __vcmpltu2(unsigned int a, unsigned int b);










extern __declspec(__device__) __declspec(__device_builtin__) unsigned int __vcmpne2(unsigned int a, unsigned int b);










extern __declspec(__device__) __declspec(__device_builtin__) unsigned int __vabsdiffu2(unsigned int a, unsigned int b);










extern __declspec(__device__) __declspec(__device_builtin__) unsigned int __vmaxs2(unsigned int a, unsigned int b);










extern __declspec(__device__) __declspec(__device_builtin__) unsigned int __vmaxu2(unsigned int a, unsigned int b);










extern __declspec(__device__) __declspec(__device_builtin__) unsigned int __vmins2(unsigned int a, unsigned int b);










extern __declspec(__device__) __declspec(__device_builtin__) unsigned int __vminu2(unsigned int a, unsigned int b);










extern __declspec(__device__) __declspec(__device_builtin__) unsigned int __vseteq2(unsigned int a, unsigned int b);










extern __declspec(__device__) __declspec(__device_builtin__) unsigned int __vsetges2(unsigned int a, unsigned int b);










extern __declspec(__device__) __declspec(__device_builtin__) unsigned int __vsetgeu2(unsigned int a, unsigned int b);










extern __declspec(__device__) __declspec(__device_builtin__) unsigned int __vsetgts2(unsigned int a, unsigned int b);










extern __declspec(__device__) __declspec(__device_builtin__) unsigned int __vsetgtu2(unsigned int a, unsigned int b);










extern __declspec(__device__) __declspec(__device_builtin__) unsigned int __vsetles2(unsigned int a, unsigned int b);










extern __declspec(__device__) __declspec(__device_builtin__) unsigned int __vsetleu2(unsigned int a, unsigned int b);










extern __declspec(__device__) __declspec(__device_builtin__) unsigned int __vsetlts2(unsigned int a, unsigned int b);










extern __declspec(__device__) __declspec(__device_builtin__) unsigned int __vsetltu2(unsigned int a, unsigned int b);










extern __declspec(__device__) __declspec(__device_builtin__) unsigned int __vsetne2(unsigned int a, unsigned int b);










extern __declspec(__device__) __declspec(__device_builtin__) unsigned int __vsadu2(unsigned int a, unsigned int b);










extern __declspec(__device__) __declspec(__device_builtin__) unsigned int __vsub2(unsigned int a, unsigned int b);










extern __declspec(__device__) __declspec(__device_builtin__) unsigned int __vsubss2 (unsigned int a, unsigned int b);










extern __declspec(__device__) __declspec(__device_builtin__) unsigned int __vsubus2 (unsigned int a, unsigned int b);









extern __declspec(__device__) __declspec(__device_builtin__) unsigned int __vneg2(unsigned int a);









extern __declspec(__device__) __declspec(__device_builtin__) unsigned int __vnegss2(unsigned int a);










extern __declspec(__device__) __declspec(__device_builtin__) unsigned int __vabsdiffs2(unsigned int a, unsigned int b);










extern __declspec(__device__) __declspec(__device_builtin__) unsigned int __vsads2(unsigned int a, unsigned int b);









extern __declspec(__device__) __declspec(__device_builtin__) unsigned int __vabs4(unsigned int a);










extern __declspec(__device__) __declspec(__device_builtin__) unsigned int __vabsss4(unsigned int a);










extern __declspec(__device__) __declspec(__device_builtin__) unsigned int __vadd4(unsigned int a, unsigned int b);










extern __declspec(__device__) __declspec(__device_builtin__) unsigned int __vaddss4 (unsigned int a, unsigned int b);









extern __declspec(__device__) __declspec(__device_builtin__) unsigned int __vaddus4 (unsigned int a, unsigned int b);










extern __declspec(__device__) __declspec(__device_builtin__) unsigned int __vavgs4(unsigned int a, unsigned int b);










extern __declspec(__device__) __declspec(__device_builtin__) unsigned int __vavgu4(unsigned int a, unsigned int b);










extern __declspec(__device__) __declspec(__device_builtin__) unsigned int __vhaddu4(unsigned int a, unsigned int b);










extern __declspec(__device__) __declspec(__device_builtin__) unsigned int __vcmpeq4(unsigned int a, unsigned int b);










extern __declspec(__device__) __declspec(__device_builtin__) unsigned int __vcmpges4(unsigned int a, unsigned int b);










extern __declspec(__device__) __declspec(__device_builtin__) unsigned int __vcmpgeu4(unsigned int a, unsigned int b);










extern __declspec(__device__) __declspec(__device_builtin__) unsigned int __vcmpgts4(unsigned int a, unsigned int b);










extern __declspec(__device__) __declspec(__device_builtin__) unsigned int __vcmpgtu4(unsigned int a, unsigned int b);










extern __declspec(__device__) __declspec(__device_builtin__) unsigned int __vcmples4(unsigned int a, unsigned int b);










extern __declspec(__device__) __declspec(__device_builtin__) unsigned int __vcmpleu4(unsigned int a, unsigned int b);










extern __declspec(__device__) __declspec(__device_builtin__) unsigned int __vcmplts4(unsigned int a, unsigned int b);










extern __declspec(__device__) __declspec(__device_builtin__) unsigned int __vcmpltu4(unsigned int a, unsigned int b);










extern __declspec(__device__) __declspec(__device_builtin__) unsigned int __vcmpne4(unsigned int a, unsigned int b);










extern __declspec(__device__) __declspec(__device_builtin__) unsigned int __vabsdiffu4(unsigned int a, unsigned int b);










extern __declspec(__device__) __declspec(__device_builtin__) unsigned int __vmaxs4(unsigned int a, unsigned int b);










extern __declspec(__device__) __declspec(__device_builtin__) unsigned int __vmaxu4(unsigned int a, unsigned int b);










extern __declspec(__device__) __declspec(__device_builtin__) unsigned int __vmins4(unsigned int a, unsigned int b);










extern __declspec(__device__) __declspec(__device_builtin__) unsigned int __vminu4(unsigned int a, unsigned int b);










extern __declspec(__device__) __declspec(__device_builtin__) unsigned int __vseteq4(unsigned int a, unsigned int b);










extern __declspec(__device__) __declspec(__device_builtin__) unsigned int __vsetles4(unsigned int a, unsigned int b);










extern __declspec(__device__) __declspec(__device_builtin__) unsigned int __vsetleu4(unsigned int a, unsigned int b);










extern __declspec(__device__) __declspec(__device_builtin__) unsigned int __vsetlts4(unsigned int a, unsigned int b);










extern __declspec(__device__) __declspec(__device_builtin__) unsigned int __vsetltu4(unsigned int a, unsigned int b);










extern __declspec(__device__) __declspec(__device_builtin__) unsigned int __vsetges4(unsigned int a, unsigned int b);










extern __declspec(__device__) __declspec(__device_builtin__) unsigned int __vsetgeu4(unsigned int a, unsigned int b);










extern __declspec(__device__) __declspec(__device_builtin__) unsigned int __vsetgts4(unsigned int a, unsigned int b);










extern __declspec(__device__) __declspec(__device_builtin__) unsigned int __vsetgtu4(unsigned int a, unsigned int b);










extern __declspec(__device__) __declspec(__device_builtin__) unsigned int __vsetne4(unsigned int a, unsigned int b);










extern __declspec(__device__) __declspec(__device_builtin__) unsigned int __vsadu4(unsigned int a, unsigned int b);










extern __declspec(__device__) __declspec(__device_builtin__) unsigned int __vsub4(unsigned int a, unsigned int b);










extern __declspec(__device__) __declspec(__device_builtin__) unsigned int __vsubss4(unsigned int a, unsigned int b);










extern __declspec(__device__) __declspec(__device_builtin__) unsigned int __vsubus4(unsigned int a, unsigned int b);









extern __declspec(__device__) __declspec(__device_builtin__) unsigned int __vneg4(unsigned int a);









extern __declspec(__device__) __declspec(__device_builtin__) unsigned int __vnegss4(unsigned int a);










extern __declspec(__device__) __declspec(__device_builtin__) unsigned int __vabsdiffs4(unsigned int a, unsigned int b);










extern __declspec(__device__) __declspec(__device_builtin__) unsigned int __vsads4(unsigned int a, unsigned int b);






}







static __inline __declspec(__device__) int mulhi(int a, int b)
{
  return __mulhi(a, b);
}

static __inline __declspec(__device__) unsigned int mulhi(unsigned int a, unsigned int b)
{
  return __umulhi(a, b);
}

static __inline __declspec(__device__) unsigned int mulhi(int a, unsigned int b)
{
  return __umulhi((unsigned int)a, b);
}

static __inline __declspec(__device__) unsigned int mulhi(unsigned int a, int b)
{
  return __umulhi(a, (unsigned int)b);
}

static __inline __declspec(__device__) long long int mul64hi(long long int a, long long int b)
{
  return __mul64hi(a, b);
}

static __inline __declspec(__device__) unsigned long long int mul64hi(unsigned long long int a, unsigned long long int b)
{
  return __umul64hi(a, b);
}

static __inline __declspec(__device__) unsigned long long int mul64hi(long long int a, unsigned long long int b)
{
  return __umul64hi((unsigned long long int)a, b);
}

static __inline __declspec(__device__) unsigned long long int mul64hi(unsigned long long int a, long long int b)
{
  return __umul64hi(a, (unsigned long long int)b);
}

static __inline __declspec(__device__) int float_as_int(float a)
{
  return __float_as_int(a);
}

static __inline __declspec(__device__) float int_as_float(int a)
{
  return __int_as_float(a);
}

static __inline __declspec(__device__) float saturate(float a)
{
  return __saturatef(a);
}

static __inline __declspec(__device__) int mul24(int a, int b)
{
  return __mul24(a, b);
}

static __inline __declspec(__device__) unsigned int umul24(unsigned int a, unsigned int b)
{
  return __umul24(a, b);
}

static __inline __declspec(__device__) void trap(void)
{
  __trap();
}


static __inline __declspec(__device__) void brkpt(int c = 0)
{
  __brkpt(c);
}

static __inline __declspec(__device__) void syncthreads(void)
{
  __syncthreads();
}

static __inline __declspec(__device__) void prof_trigger(int e)
{
       if (e ==  0) __prof_trigger( 0);
  else if (e ==  1) __prof_trigger( 1);
  else if (e ==  2) __prof_trigger( 2);
  else if (e ==  3) __prof_trigger( 3);
  else if (e ==  4) __prof_trigger( 4);
  else if (e ==  5) __prof_trigger( 5);
  else if (e ==  6) __prof_trigger( 6);
  else if (e ==  7) __prof_trigger( 7);
  else if (e ==  8) __prof_trigger( 8);
  else if (e ==  9) __prof_trigger( 9);
  else if (e == 10) __prof_trigger(10);
  else if (e == 11) __prof_trigger(11);
  else if (e == 12) __prof_trigger(12);
  else if (e == 13) __prof_trigger(13);
  else if (e == 14) __prof_trigger(14);
  else if (e == 15) __prof_trigger(15);
}

static __inline __declspec(__device__) void threadfence(bool global = true)
{
  global ? __threadfence() : __threadfence_block();
}

static __inline __declspec(__device__) int float2int(float a, enum cudaRoundMode mode = cudaRoundZero)
{
  return mode == cudaRoundNearest ? __float2int_rn(a) :
         mode == cudaRoundPosInf  ? __float2int_ru(a) :
         mode == cudaRoundMinInf  ? __float2int_rd(a) :
                                    __float2int_rz(a);
}

static __inline __declspec(__device__) unsigned int float2uint(float a, enum cudaRoundMode mode = cudaRoundZero)
{
  return mode == cudaRoundNearest ? __float2uint_rn(a) :
         mode == cudaRoundPosInf  ? __float2uint_ru(a) :
         mode == cudaRoundMinInf  ? __float2uint_rd(a) :
                                    __float2uint_rz(a);
}

static __inline __declspec(__device__) float int2float(int a, enum cudaRoundMode mode = cudaRoundNearest)
{
  return mode == cudaRoundZero   ? __int2float_rz(a) :
         mode == cudaRoundPosInf ? __int2float_ru(a) :
         mode == cudaRoundMinInf ? __int2float_rd(a) :
                                   __int2float_rn(a);
}

static __inline __declspec(__device__) float uint2float(unsigned int a, enum cudaRoundMode mode = cudaRoundNearest)
{
  return mode == cudaRoundZero   ? __uint2float_rz(a) :
         mode == cudaRoundPosInf ? __uint2float_ru(a) :
         mode == cudaRoundMinInf ? __uint2float_rd(a) :
                                   __uint2float_rn(a);
}


















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 9398 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\device_functions.h"







#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\sm_11_atomic_functions.h"






























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\builtin_types.h"























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\device_types.h"




































































#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\device_types.h"
#line 57 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\driver_types.h"




































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1414 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\driver_types.h"

#line 58 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\surface_types.h"






















































































































#line 120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\surface_types.h"
#line 59 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_types.h"




















































































































































































































#line 214 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_types.h"
#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\vector_types.h"












































































































































































































































































































































































































































#line 430 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\vector_types.h"
#line 61 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\builtin_types.h"
#line 64 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\sm_11_atomic_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\host_defines.h"












































































































































































































#line 206 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\host_defines.h"
#line 65 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\sm_11_atomic_functions.h"

extern "C"
{
extern __declspec(__device__) __declspec(__device_builtin__) int          __iAtomicAdd(int *address, int val);
extern __declspec(__device__) __declspec(__device_builtin__) unsigned int __uAtomicAdd(unsigned int *address, unsigned int val);
extern __declspec(__device__) __declspec(__device_builtin__) int          __iAtomicExch(int *address, int val);
extern __declspec(__device__) __declspec(__device_builtin__) unsigned int __uAtomicExch(unsigned int *address, unsigned int val);
extern __declspec(__device__) __declspec(__device_builtin__) float        __fAtomicExch(float *address, float val);
extern __declspec(__device__) __declspec(__device_builtin__) int          __iAtomicMin(int *address, int val);
extern __declspec(__device__) __declspec(__device_builtin__) unsigned int __uAtomicMin(unsigned int *address, unsigned int val);
extern __declspec(__device__) __declspec(__device_builtin__) int          __iAtomicMax(int *address, int val);
extern __declspec(__device__) __declspec(__device_builtin__) unsigned int __uAtomicMax(unsigned int *address, unsigned int val);
extern __declspec(__device__) __declspec(__device_builtin__) unsigned int __uAtomicInc(unsigned int *address, unsigned int val);
extern __declspec(__device__) __declspec(__device_builtin__) unsigned int __uAtomicDec(unsigned int *address, unsigned int val);
extern __declspec(__device__) __declspec(__device_builtin__) int          __iAtomicAnd(int *address, int val);
extern __declspec(__device__) __declspec(__device_builtin__) unsigned int __uAtomicAnd(unsigned int *address, unsigned int val);
extern __declspec(__device__) __declspec(__device_builtin__) int          __iAtomicOr(int *address, int val);
extern __declspec(__device__) __declspec(__device_builtin__) unsigned int __uAtomicOr(unsigned int *address, unsigned int val);
extern __declspec(__device__) __declspec(__device_builtin__) int          __iAtomicXor(int *address, int val);
extern __declspec(__device__) __declspec(__device_builtin__) unsigned int __uAtomicXor(unsigned int *address, unsigned int val);
extern __declspec(__device__) __declspec(__device_builtin__) int          __iAtomicCAS(int *address, int compare, int val);
extern __declspec(__device__) __declspec(__device_builtin__) unsigned int __uAtomicCAS(unsigned int *address, unsigned int compare, unsigned int val);

}







static __inline __declspec(__device__) int atomicAdd(int *address, int val)
{
  return __iAtomicAdd(address, val);
}

static __inline __declspec(__device__) unsigned int atomicAdd(unsigned int *address, unsigned int val)
{
  return __uAtomicAdd(address, val);
}

static __inline __declspec(__device__) int atomicSub(int *address, int val)
{
  return __iAtomicAdd(address, (unsigned int)-(int)val);
}

static __inline __declspec(__device__) unsigned int atomicSub(unsigned int *address, unsigned int val)
{
  return __uAtomicAdd(address, (unsigned int)-(int)val);
}

static __inline __declspec(__device__) int atomicExch(int *address, int val)
{
  return __iAtomicExch(address, val);
}

static __inline __declspec(__device__) unsigned int atomicExch(unsigned int *address, unsigned int val)
{
  return __uAtomicExch(address, val);
}

static __inline __declspec(__device__) float atomicExch(float *address, float val)
{
  return __fAtomicExch(address, val);
}

static __inline __declspec(__device__) int atomicMin(int *address, int val)
{
  return __iAtomicMin(address, val);
}

static __inline __declspec(__device__) unsigned int atomicMin(unsigned int *address, unsigned int val)
{
  return __uAtomicMin(address, val);
}

static __inline __declspec(__device__) int atomicMax(int *address, int val)
{
  return __iAtomicMax(address, val);
}

static __inline __declspec(__device__) unsigned int atomicMax(unsigned int *address, unsigned int val)
{
  return __uAtomicMax(address, val);
}

static __inline __declspec(__device__) unsigned int atomicInc(unsigned int *address, unsigned int val)
{
  return __uAtomicInc(address, val);
}

static __inline __declspec(__device__) unsigned int atomicDec(unsigned int *address, unsigned int val)
{
  return __uAtomicDec(address, val);
}

static __inline __declspec(__device__) int atomicAnd(int *address, int val)
{
  return __iAtomicAnd(address, val);
}

static __inline __declspec(__device__) unsigned int atomicAnd(unsigned int *address, unsigned int val)
{
  return __uAtomicAnd(address, val);
}

static __inline __declspec(__device__) int atomicOr(int *address, int val)
{
  return __iAtomicOr(address, val);
}

static __inline __declspec(__device__) unsigned int atomicOr(unsigned int *address, unsigned int val)
{
  return __uAtomicOr(address, val);
}

static __inline __declspec(__device__) int atomicXor(int *address, int val)
{
  return __iAtomicXor(address, val);
}

static __inline __declspec(__device__) unsigned int atomicXor(unsigned int *address, unsigned int val)
{
  return __uAtomicXor(address, val);
}

static __inline __declspec(__device__) int atomicCAS(int *address, int compare, int val)
{
  return __iAtomicCAS(address, compare, val);
}

static __inline __declspec(__device__) unsigned int atomicCAS(unsigned int *address, unsigned int compare, unsigned int val)
{
  return __uAtomicCAS(address, compare, val);
}

#line 202 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\sm_11_atomic_functions.h"

#line 204 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\sm_11_atomic_functions.h"

#line 206 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\sm_11_atomic_functions.h"
#line 9406 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\device_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\sm_12_atomic_functions.h"






























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\builtin_types.h"























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\device_types.h"




































































#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\device_types.h"
#line 57 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\driver_types.h"




































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1414 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\driver_types.h"

#line 58 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\surface_types.h"






















































































































#line 120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\surface_types.h"
#line 59 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_types.h"




















































































































































































































#line 214 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_types.h"
#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\vector_types.h"












































































































































































































































































































































































































































#line 430 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\vector_types.h"
#line 61 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\builtin_types.h"
#line 64 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\sm_12_atomic_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\host_defines.h"












































































































































































































#line 206 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\host_defines.h"
#line 65 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\sm_12_atomic_functions.h"

extern "C"
{
extern __declspec(__device__) __declspec(__device_builtin__) unsigned long long int __ullAtomicAdd(unsigned long long int *address, unsigned long long int val);
extern __declspec(__device__) __declspec(__device_builtin__) unsigned long long int __ullAtomicExch(unsigned long long int *address, unsigned long long int val);
extern __declspec(__device__) __declspec(__device_builtin__) unsigned long long int __ullAtomicCAS(unsigned long long int *address, unsigned long long int compare, unsigned long long int val);
extern __declspec(__device__) __declspec(__device_builtin__) int                    __any(int cond);
extern __declspec(__device__) __declspec(__device_builtin__) int                    __all(int cond);
}







static __inline __declspec(__device__) unsigned long long int atomicAdd(unsigned long long int *address, unsigned long long int val)
{
  return __ullAtomicAdd(address, val);
}

static __inline __declspec(__device__) unsigned long long int atomicExch(unsigned long long int *address, unsigned long long int val)
{
  return __ullAtomicExch(address, val);
}

static __inline __declspec(__device__) unsigned long long int atomicCAS(unsigned long long int *address, unsigned long long int compare, unsigned long long int val)
{
  return __ullAtomicCAS(address, compare, val);
}

static __inline __declspec(__device__) bool any(bool cond)
{
  return (bool)__any((int)cond);
}

static __inline __declspec(__device__) bool all(bool cond)
{
  return (bool)__all((int)cond);
}

#line 107 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\sm_12_atomic_functions.h"

#line 109 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\sm_12_atomic_functions.h"

#line 111 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\sm_12_atomic_functions.h"
#line 9407 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\device_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\sm_13_double_functions.h"




































































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\builtin_types.h"























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\device_types.h"




































































#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\device_types.h"
#line 57 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\driver_types.h"




































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1414 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\driver_types.h"

#line 58 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\surface_types.h"






















































































































#line 120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\surface_types.h"
#line 59 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_types.h"




















































































































































































































#line 214 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_types.h"
#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\vector_types.h"












































































































































































































































































































































































































































#line 430 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\vector_types.h"
#line 61 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\builtin_types.h"
#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\sm_13_double_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\device_types.h"




































































#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\device_types.h"
#line 71 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\sm_13_double_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\host_defines.h"












































































































































































































#line 206 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\host_defines.h"
#line 72 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\sm_13_double_functions.h"

extern "C"
{








extern __declspec(__device__) __declspec(__device_builtin__) long long int         __double_as_longlong(double x);








extern __declspec(__device__) __declspec(__device_builtin__) double                __longlong_as_double(long long int x);




























































































































































extern __declspec(__device__) __declspec(__device_builtin__) double                __fma_rn(double x, double y, double z);




























































































































































extern __declspec(__device__) __declspec(__device_builtin__) double                __fma_rz(double x, double y, double z);




























































































































































extern __declspec(__device__) __declspec(__device_builtin__) double                __fma_ru(double x, double y, double z);




























































































































































extern __declspec(__device__) __declspec(__device_builtin__) double                __fma_rd(double x, double y, double z);











extern __declspec(__device__) __declspec(__device_builtin__) double                __dadd_rn(double x, double y);











extern __declspec(__device__) __declspec(__device_builtin__) double                __dadd_rz(double x, double y);










 
extern __declspec(__device__) __declspec(__device_builtin__) double                __dadd_ru(double x, double y);











extern __declspec(__device__) __declspec(__device_builtin__) double                __dadd_rd(double x, double y);











extern __declspec(__device__) __declspec(__device_builtin__) double                __dsub_rn(double x, double y);











extern __declspec(__device__) __declspec(__device_builtin__) double                __dsub_rz(double x, double y);










 
extern __declspec(__device__) __declspec(__device_builtin__) double                __dsub_ru(double x, double y);











extern __declspec(__device__) __declspec(__device_builtin__) double                __dsub_rd(double x, double y);











extern __declspec(__device__) __declspec(__device_builtin__) double                __dmul_rn(double x, double y);











extern __declspec(__device__) __declspec(__device_builtin__) double                __dmul_rz(double x, double y);











extern __declspec(__device__) __declspec(__device_builtin__) double                __dmul_ru(double x, double y);











extern __declspec(__device__) __declspec(__device_builtin__) double                __dmul_rd(double x, double y);








extern __declspec(__device__) __declspec(__device_builtin__) float                 __double2float_rn(double x);








extern __declspec(__device__) __declspec(__device_builtin__) float                 __double2float_rz(double x);








extern __declspec(__device__) __declspec(__device_builtin__) float                 __double2float_ru(double x);








extern __declspec(__device__) __declspec(__device_builtin__) float                 __double2float_rd(double x);








extern __declspec(__device__) __declspec(__device_builtin__) int                   __double2int_rn(double x);








extern __declspec(__device__) __declspec(__device_builtin__) int                   __double2int_ru(double x);








extern __declspec(__device__) __declspec(__device_builtin__) int                   __double2int_rd(double x);








extern __declspec(__device__) __declspec(__device_builtin__) unsigned int          __double2uint_rn(double x);








extern __declspec(__device__) __declspec(__device_builtin__) unsigned int          __double2uint_ru(double x);








extern __declspec(__device__) __declspec(__device_builtin__) unsigned int          __double2uint_rd(double x);








extern __declspec(__device__) __declspec(__device_builtin__) long long int          __double2ll_rn(double x);








extern __declspec(__device__) __declspec(__device_builtin__) long long int          __double2ll_ru(double x);








extern __declspec(__device__) __declspec(__device_builtin__) long long int          __double2ll_rd(double x);








extern __declspec(__device__) __declspec(__device_builtin__) unsigned long long int __double2ull_rn(double x);








extern __declspec(__device__) __declspec(__device_builtin__) unsigned long long int __double2ull_ru(double x);








extern __declspec(__device__) __declspec(__device_builtin__) unsigned long long int __double2ull_rd(double x);







extern __declspec(__device__) __declspec(__device_builtin__) double                 __int2double_rn(int x);







extern __declspec(__device__) __declspec(__device_builtin__) double                 __uint2double_rn(unsigned int x);








extern __declspec(__device__) __declspec(__device_builtin__) double                 __ll2double_rn(long long int x);








extern __declspec(__device__) __declspec(__device_builtin__) double                 __ll2double_rz(long long int x);








extern __declspec(__device__) __declspec(__device_builtin__) double                 __ll2double_ru(long long int x);








extern __declspec(__device__) __declspec(__device_builtin__) double                 __ll2double_rd(long long int x);








extern __declspec(__device__) __declspec(__device_builtin__) double                 __ull2double_rn(unsigned long long int x);








extern __declspec(__device__) __declspec(__device_builtin__) double                 __ull2double_rz(unsigned long long int x);








extern __declspec(__device__) __declspec(__device_builtin__) double                 __ull2double_ru(unsigned long long int x);








extern __declspec(__device__) __declspec(__device_builtin__) double                 __ull2double_rd(unsigned long long int x);








extern __declspec(__device__) __declspec(__device_builtin__) int                    __double2hiint(double x);








extern __declspec(__device__) __declspec(__device_builtin__) int                    __double2loint(double x);









extern __declspec(__device__) __declspec(__device_builtin__) double                 __hiloint2double(int hi, int lo);
}







static __inline __declspec(__device__) double fma(double a, double b, double c, enum cudaRoundMode mode)
{
  return mode == cudaRoundZero   ? __fma_rz(a, b, c) :
         mode == cudaRoundPosInf ? __fma_ru(a, b, c) :
         mode == cudaRoundMinInf ? __fma_rd(a, b, c) :
                                   __fma_rn(a, b, c);
}

static __inline __declspec(__device__) double dmul(double a, double b, enum cudaRoundMode mode = cudaRoundNearest)
{
  return mode == cudaRoundZero   ? __dmul_rz(a, b) :
         mode == cudaRoundPosInf ? __dmul_ru(a, b) :
         mode == cudaRoundMinInf ? __dmul_rd(a, b) :
                                   __dmul_rn(a, b);
}

static __inline __declspec(__device__) double dadd(double a, double b, enum cudaRoundMode mode = cudaRoundNearest)
{
  return mode == cudaRoundZero   ? __dadd_rz(a, b) :
         mode == cudaRoundPosInf ? __dadd_ru(a, b) :
         mode == cudaRoundMinInf ? __dadd_rd(a, b) :
                                   __dadd_rn(a, b);
}

static __inline __declspec(__device__) double dsub(double a, double b, enum cudaRoundMode mode = cudaRoundNearest)
{
  return mode == cudaRoundZero   ? __dsub_rz(a, b) :
         mode == cudaRoundPosInf ? __dsub_ru(a, b) :
         mode == cudaRoundMinInf ? __dsub_rd(a, b) :
                                   __dsub_rn(a, b);
}

static __inline __declspec(__device__) int double2int(double a, enum cudaRoundMode mode = cudaRoundZero)
{
  return mode == cudaRoundNearest ? __double2int_rn(a) :
         mode == cudaRoundPosInf  ? __double2int_ru(a) :
         mode == cudaRoundMinInf  ? __double2int_rd(a) :
                                    __double2int_rz(a);
}

static __inline __declspec(__device__) unsigned int double2uint(double a, enum cudaRoundMode mode = cudaRoundZero)
{
  return mode == cudaRoundNearest ? __double2uint_rn(a) :
         mode == cudaRoundPosInf  ? __double2uint_ru(a) :
         mode == cudaRoundMinInf  ? __double2uint_rd(a) :
                                    __double2uint_rz(a);
}

static __inline __declspec(__device__) long long int double2ll(double a, enum cudaRoundMode mode = cudaRoundZero)
{
  return mode == cudaRoundNearest ? __double2ll_rn(a) :
         mode == cudaRoundPosInf  ? __double2ll_ru(a) :
         mode == cudaRoundMinInf  ? __double2ll_rd(a) :
                                    __double2ll_rz(a);
}

static __inline __declspec(__device__) unsigned long long int double2ull(double a, enum cudaRoundMode mode = cudaRoundZero)
{
  return mode == cudaRoundNearest ? __double2ull_rn(a) :
         mode == cudaRoundPosInf  ? __double2ull_ru(a) :
         mode == cudaRoundMinInf  ? __double2ull_rd(a) :
                                    __double2ull_rz(a);
}

static __inline __declspec(__device__) double ll2double(long long int a, enum cudaRoundMode mode = cudaRoundNearest)
{
  return mode == cudaRoundZero   ? __ll2double_rz(a) :
         mode == cudaRoundPosInf ? __ll2double_ru(a) :
         mode == cudaRoundMinInf ? __ll2double_rd(a) :
                                   __ll2double_rn(a);
}

static __inline __declspec(__device__) double ull2double(unsigned long long int a, enum cudaRoundMode mode = cudaRoundNearest)
{
  return mode == cudaRoundZero   ? __ull2double_rz(a) :
         mode == cudaRoundPosInf ? __ull2double_ru(a) :
         mode == cudaRoundMinInf ? __ull2double_rd(a) :
                                   __ull2double_rn(a);
}

static __inline __declspec(__device__) double int2double(int a, enum cudaRoundMode mode = cudaRoundNearest)
{
  return (double)a;
}

static __inline __declspec(__device__) double uint2double(unsigned int a, enum cudaRoundMode mode = cudaRoundNearest)
{
  return (double)a;
}

static __inline __declspec(__device__) double float2double(float a, enum cudaRoundMode mode = cudaRoundNearest)
{
  return (double)a;
}

#line 1229 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\sm_13_double_functions.h"

































#line 1263 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\sm_13_double_functions.h"

#line 1265 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\sm_13_double_functions.h"

#line 9408 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\device_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\sm_20_atomic_functions.h"






























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\builtin_types.h"























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\device_types.h"




































































#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\device_types.h"
#line 57 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\driver_types.h"




































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1414 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\driver_types.h"

#line 58 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\surface_types.h"






















































































































#line 120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\surface_types.h"
#line 59 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_types.h"




















































































































































































































#line 214 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_types.h"
#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\vector_types.h"












































































































































































































































































































































































































































#line 430 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\vector_types.h"
#line 61 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\builtin_types.h"
#line 64 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\sm_20_atomic_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\host_defines.h"












































































































































































































#line 206 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\host_defines.h"
#line 65 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\sm_20_atomic_functions.h"

extern "C"
{
extern __declspec(__device__) __declspec(__device_builtin__) float __fAtomicAdd(float *address, float val);
}







static __inline __declspec(__device__) float atomicAdd(float *address, float val)
{
  return __fAtomicAdd(address, val);
}

#line 83 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\sm_20_atomic_functions.h"

#line 85 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\sm_20_atomic_functions.h"

#line 87 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\sm_20_atomic_functions.h"
#line 9409 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\device_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\sm_32_atomic_functions.h"






























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\builtin_types.h"























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\device_types.h"




































































#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\device_types.h"
#line 57 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\driver_types.h"




































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1414 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\driver_types.h"

#line 58 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\surface_types.h"






















































































































#line 120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\surface_types.h"
#line 59 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_types.h"




















































































































































































































#line 214 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_types.h"
#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\vector_types.h"












































































































































































































































































































































































































































#line 430 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\vector_types.h"
#line 61 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\builtin_types.h"
#line 64 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\sm_32_atomic_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\host_defines.h"












































































































































































































#line 206 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\host_defines.h"
#line 65 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\sm_32_atomic_functions.h"

extern "C"
{
extern __declspec(__device__) __declspec(__device_builtin__) long long __illAtomicMin(long long *address, long long val);
extern __declspec(__device__) __declspec(__device_builtin__) long long __illAtomicMax(long long *address, long long val);
extern __declspec(__device__) __declspec(__device_builtin__) unsigned long long __ullAtomicMin(unsigned long long *address, unsigned long long val);
extern __declspec(__device__) __declspec(__device_builtin__) unsigned long long __ullAtomicMax(unsigned long long *address, unsigned long long val);
extern __declspec(__device__) __declspec(__device_builtin__) unsigned long long __ullAtomicAnd(unsigned long long *address, unsigned long long val);
extern __declspec(__device__) __declspec(__device_builtin__) unsigned long long __ullAtomicOr (unsigned long long *address, unsigned long long val);
extern __declspec(__device__) __declspec(__device_builtin__) unsigned long long __ullAtomicXor(unsigned long long *address, unsigned long long val);
}







static __inline __declspec(__device__) long long atomicMin(long long *address, long long val)
{
    return __illAtomicMin(address, val);
}

static __inline __declspec(__device__) long long atomicMax(long long *address, long long val)
{
    return __illAtomicMax(address, val);
}

static __inline __declspec(__device__) unsigned long long atomicMin(unsigned long long *address, unsigned long long val)
{
    return __ullAtomicMin(address, val);
}

static __inline __declspec(__device__) unsigned long long atomicMax(unsigned long long *address, unsigned long long val)
{
    return __ullAtomicMax(address, val);
}

static __inline __declspec(__device__) unsigned long long atomicAnd(unsigned long long *address, unsigned long long val)
{
    return __ullAtomicAnd(address, val);
}

static __inline __declspec(__device__) unsigned long long atomicOr(unsigned long long *address, unsigned long long val)
{
    return __ullAtomicOr(address, val);
}

static __inline __declspec(__device__) unsigned long long atomicXor(unsigned long long *address, unsigned long long val)
{
    return __ullAtomicXor(address, val);
}

#line 119 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\sm_32_atomic_functions.h"

#line 121 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\sm_32_atomic_functions.h"

#line 123 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\sm_32_atomic_functions.h"
#line 9410 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\device_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\sm_35_atomic_functions.h"























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\sm_32_atomic_functions.h"

























































































































#line 123 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\sm_32_atomic_functions.h"
#line 57 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\sm_35_atomic_functions.h"

#line 59 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\sm_35_atomic_functions.h"
#line 9411 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\device_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\sm_20_intrinsics.h"






























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\builtin_types.h"























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\device_types.h"




































































#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\device_types.h"
#line 57 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\driver_types.h"




































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1414 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\driver_types.h"

#line 58 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\surface_types.h"






















































































































#line 120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\surface_types.h"
#line 59 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_types.h"




















































































































































































































#line 214 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_types.h"
#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\vector_types.h"












































































































































































































































































































































































































































#line 430 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\vector_types.h"
#line 61 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\builtin_types.h"
#line 64 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\sm_20_intrinsics.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\device_types.h"




































































#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\device_types.h"
#line 65 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\sm_20_intrinsics.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\host_defines.h"












































































































































































































#line 206 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\host_defines.h"
#line 66 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\sm_20_intrinsics.h"

extern "C"
{
extern __declspec(__device__) __declspec(__device_builtin__) void                   __threadfence_system(void);











extern __declspec(__device__) __declspec(__device_builtin__) double                __ddiv_rn(double x, double y);











extern __declspec(__device__) __declspec(__device_builtin__) double                __ddiv_rz(double x, double y);











extern __declspec(__device__) __declspec(__device_builtin__) double                __ddiv_ru(double x, double y);











extern __declspec(__device__) __declspec(__device_builtin__) double                __ddiv_rd(double x, double y);

































extern __declspec(__device__) __declspec(__device_builtin__) double                __drcp_rn(double x);

































extern __declspec(__device__) __declspec(__device_builtin__) double                __drcp_rz(double x);

































extern __declspec(__device__) __declspec(__device_builtin__) double                __drcp_ru(double x);

































extern __declspec(__device__) __declspec(__device_builtin__) double                __drcp_rd(double x);































extern __declspec(__device__) __declspec(__device_builtin__) double                __dsqrt_rn(double x);































extern __declspec(__device__) __declspec(__device_builtin__) double                __dsqrt_rz(double x);































extern __declspec(__device__) __declspec(__device_builtin__) double                __dsqrt_ru(double x);































extern __declspec(__device__) __declspec(__device_builtin__) double                __dsqrt_rd(double x);
extern __declspec(__device__) __declspec(__device_builtin__) unsigned int          __ballot(int);
extern __declspec(__device__) __declspec(__device_builtin__) int                   __syncthreads_count(int);
extern __declspec(__device__) __declspec(__device_builtin__) int                   __syncthreads_and(int);
extern __declspec(__device__) __declspec(__device_builtin__) int                   __syncthreads_or(int);
extern __declspec(__device__) __declspec(__device_builtin__) long long int         clock64(void);






extern __declspec(__device__) __declspec(__device_builtin__) float                 __fmaf_ieee_rn(float, float, float);
extern __declspec(__device__) __declspec(__device_builtin__) float                 __fmaf_ieee_rz(float, float, float);
extern __declspec(__device__) __declspec(__device_builtin__) float                 __fmaf_ieee_ru(float, float, float);
extern __declspec(__device__) __declspec(__device_builtin__) float                 __fmaf_ieee_rd(float, float, float);
extern __declspec(__device__) __declspec(__device_builtin__) double                __rcp64h(double);

}







static __inline __declspec(__device__) unsigned int ballot(bool pred)
{
  return __ballot((int)pred);
}

static __inline __declspec(__device__) int syncthreads_count(bool pred)
{
  return __syncthreads_count((int)pred);
}

static __inline __declspec(__device__) bool syncthreads_and(bool pred)
{
  return (bool)__syncthreads_and((int)pred);
}

static __inline __declspec(__device__) bool syncthreads_or(bool pred)
{
  return (bool)__syncthreads_or((int)pred);
}




static __inline __declspec(__device__) unsigned int __isGlobal(const void *ptr)
{
    unsigned int ret;
    asm volatile ("{ \n\t"
                  "    .reg .pred p; \n\t"
                  "    isspacep.global p, %1; \n\t"
                  "    selp.u32 %0, 1, 0, p;  \n\t"

                  "} \n\t" : "=r"(ret) : "l"(ptr));


#line 442 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\sm_20_intrinsics.h"

    return ret;
}

#line 447 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\sm_20_intrinsics.h"

#line 449 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\sm_20_intrinsics.h"

#line 451 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\sm_20_intrinsics.h"
#line 9412 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\device_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\sm_30_intrinsics.h"






























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\builtin_types.h"























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\device_types.h"




































































#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\device_types.h"
#line 57 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\driver_types.h"




































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1414 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\driver_types.h"

#line 58 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\surface_types.h"






















































































































#line 120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\surface_types.h"
#line 59 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_types.h"




















































































































































































































#line 214 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_types.h"
#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\vector_types.h"












































































































































































































































































































































































































































#line 430 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\vector_types.h"
#line 61 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\builtin_types.h"
#line 64 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\sm_30_intrinsics.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\device_types.h"




































































#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\device_types.h"
#line 65 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\sm_30_intrinsics.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\host_defines.h"












































































































































































































#line 206 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\host_defines.h"
#line 66 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\sm_30_intrinsics.h"



extern "C"
{
    
    
}











#line 86 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\sm_30_intrinsics.h"







static __declspec(__device__) __inline int __shfl(int var, int srcLane, int width=32) {
	int ret, c;
	c = ((32-width) << 8) | 0x1f;
	asm volatile ("shfl.idx.b32 %0, %1, %2, %3;" : "=r"(ret) : "r"(var), "r"(srcLane), "r"(c));
	return ret;
}

static __declspec(__device__) __inline int __shfl_up(int var, unsigned int delta, int width=32) {
	int ret, c;
	c = (32-width) << 8;
	asm volatile ("shfl.up.b32 %0, %1, %2, %3;" : "=r"(ret) : "r"(var), "r"(delta), "r"(c));
	return ret;
}

static __declspec(__device__) __inline int __shfl_down(int var, unsigned int delta, int width=32) {
	int ret, c;
	c = ((32-width) << 8) | 0x1f;
	asm volatile ("shfl.down.b32 %0, %1, %2, %3;" : "=r"(ret) : "r"(var), "r"(delta), "r"(c));
	return ret;
}

static __declspec(__device__) __inline int __shfl_xor(int var, int laneMask, int width=32) {
	int ret, c;
	c = ((32-width) << 8) | 0x1f;
	asm volatile ("shfl.bfly.b32 %0, %1, %2, %3;" : "=r"(ret) : "r"(var), "r"(laneMask), "r"(c));
	return ret;
}

static __declspec(__device__) __inline float __shfl(float var, int srcLane, int width=32) {
	float ret;
    int c;
	c = ((32-width) << 8) | 0x1f;
	asm volatile ("shfl.idx.b32 %0, %1, %2, %3;" : "=f"(ret) : "f"(var), "r"(srcLane), "r"(c));
	return ret;
}

static __declspec(__device__) __inline float __shfl_up(float var, unsigned int delta, int width=32) {
	float ret;
    int c;
	c = (32-width) << 8;
	asm volatile ("shfl.up.b32 %0, %1, %2, %3;" : "=f"(ret) : "f"(var), "r"(delta), "r"(c));
	return ret;
}

static __declspec(__device__) __inline float __shfl_down(float var, unsigned int delta, int width=32) {
	float ret;
    int c;
	c = ((32-width) << 8) | 0x1f;
	asm volatile ("shfl.down.b32 %0, %1, %2, %3;" : "=f"(ret) : "f"(var), "r"(delta), "r"(c));
	return ret;
}

static __declspec(__device__) __inline float __shfl_xor(float var, int laneMask, int width=32) {
	float ret;
    int c;
	c = ((32-width) << 8) | 0x1f;
	asm volatile ("shfl.bfly.b32 %0, %1, %2, %3;" : "=f"(ret) : "f"(var), "r"(laneMask), "r"(c));
	return ret;
}




#line 157 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\sm_30_intrinsics.h"

#line 159 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\sm_30_intrinsics.h"

#line 161 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\sm_30_intrinsics.h"

#line 163 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\sm_30_intrinsics.h"
#line 9413 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\device_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\sm_32_intrinsics.h"






























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\builtin_types.h"























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\device_types.h"




































































#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\device_types.h"
#line 57 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\driver_types.h"




































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1414 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\driver_types.h"

#line 58 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\surface_types.h"






















































































































#line 120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\surface_types.h"
#line 59 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_types.h"




















































































































































































































#line 214 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_types.h"
#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\vector_types.h"












































































































































































































































































































































































































































#line 430 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\vector_types.h"
#line 61 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\builtin_types.h"
#line 64 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\sm_32_intrinsics.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\device_types.h"




































































#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\device_types.h"
#line 65 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\sm_32_intrinsics.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\host_defines.h"












































































































































































































#line 206 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\host_defines.h"
#line 66 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\sm_32_intrinsics.h"



extern "C"
{
    
    
}















#line 90 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\sm_32_intrinsics.h"

static __declspec(__device__) __inline char __ldg(const char *ptr) { unsigned int ret; asm volatile ("ld.global.nc.s8 %0, [%1];"  : "=r"(ret) : "l" (ptr)); return (char)ret; }
static __declspec(__device__) __inline short __ldg(const short *ptr) { unsigned short ret; asm volatile ("ld.global.nc.s16 %0, [%1];"  : "=h"(ret) : "l" (ptr)); return (short)ret; }
static __declspec(__device__) __inline int __ldg(const int *ptr) { unsigned int ret; asm volatile ("ld.global.nc.s32 %0, [%1];"  : "=r"(ret) : "l" (ptr)); return (int)ret; }
static __declspec(__device__) __inline long long __ldg(const long long *ptr) { unsigned long long ret; asm volatile ("ld.global.nc.s64 %0, [%1];"  : "=l"(ret) : "l" (ptr)); return (long long)ret; }
static __declspec(__device__) __inline char2 __ldg(const char2 *ptr) { char2 ret; int2 tmp; asm volatile ("ld.global.nc.v2.s8 {%0,%1}, [%2];"  : "=r"(tmp.x), "=r"(tmp.y) : "l" (ptr)); ret.x = (char)tmp.x; ret.y = (char)tmp.y; return ret; }
static __declspec(__device__) __inline char4 __ldg(const char4 *ptr) { char4 ret; int4 tmp; asm volatile ("ld.global.nc.v4.s8 {%0,%1,%2,%3}, [%4];"  : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l" (ptr)); ret.x = (char)tmp.x; ret.y = (char)tmp.y; ret.z = (char)tmp.z; ret.w = (char)tmp.w; return ret; }
static __declspec(__device__) __inline short2 __ldg(const short2 *ptr) { short2 ret; asm volatile ("ld.global.nc.v2.s16 {%0,%1}, [%2];"  : "=h"(ret.x), "=h"(ret.y) : "l" (ptr)); return ret; }
static __declspec(__device__) __inline short4 __ldg(const short4 *ptr) { short4 ret; asm volatile ("ld.global.nc.v4.s16 {%0,%1,%2,%3}, [%4];"  : "=h"(ret.x), "=h"(ret.y), "=h"(ret.z), "=h"(ret.w) : "l" (ptr)); return ret; }
static __declspec(__device__) __inline int2 __ldg(const int2 *ptr) { int2 ret; asm volatile ("ld.global.nc.v2.s32 {%0,%1}, [%2];"  : "=r"(ret.x), "=r"(ret.y) : "l" (ptr)); return ret; }
static __declspec(__device__) __inline int4 __ldg(const int4 *ptr) { int4 ret; asm volatile ("ld.global.nc.v4.s32 {%0,%1,%2,%3}, [%4];"  : "=r"(ret.x), "=r"(ret.y), "=r"(ret.z), "=r"(ret.w) : "l" (ptr)); return ret; }
static __declspec(__device__) __inline longlong2 __ldg(const longlong2 *ptr) { longlong2 ret; asm volatile ("ld.global.nc.v2.s64 %0, [%1];"  : "=l"(ret.x), "=l"(ret.y) : "l" (ptr)); return ret; }

static __declspec(__device__) __inline unsigned char __ldg(const unsigned char *ptr) { unsigned int ret; asm volatile ("ld.global.nc.u8 %0, [%1];"  : "=r"(ret) : "l" (ptr));  return (unsigned char)ret; }
static __declspec(__device__) __inline unsigned short __ldg(const unsigned short *ptr) { unsigned short ret; asm volatile ("ld.global.nc.u16 %0, [%1];"  : "=h"(ret) : "l" (ptr)); return ret; }
static __declspec(__device__) __inline unsigned int __ldg(const unsigned int *ptr) { unsigned int ret; asm volatile ("ld.global.nc.u32 %0, [%1];"  : "=r"(ret) : "l" (ptr)); return ret; }
static __declspec(__device__) __inline unsigned long long __ldg(const unsigned long long *ptr) { unsigned long long ret; asm volatile ("ld.global.nc.u64 %0, [%1];"  : "=l"(ret) : "l" (ptr)); return ret; }
static __declspec(__device__) __inline uchar2 __ldg(const uchar2 *ptr) { uchar2 ret; uint2 tmp; asm volatile ("ld.global.nc.v2.u8 {%0,%1}, [%2];"  : "=r"(tmp.x), "=r"(tmp.y) : "l" (ptr)); ret.x = (unsigned char)tmp.x; ret.y = (unsigned char)tmp.y; return ret; }
static __declspec(__device__) __inline uchar4 __ldg(const uchar4 *ptr) { uchar4 ret; uint4 tmp; asm volatile ("ld.global.nc.v4.u8 {%0,%1,%2,%3}, [%4];"  : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l" (ptr)); ret.x = (unsigned char)tmp.x; ret.y = (unsigned char)tmp.y; ret.z = (unsigned char)tmp.z; ret.w = (unsigned char)tmp.w; return ret; }
static __declspec(__device__) __inline ushort2 __ldg(const ushort2 *ptr) { ushort2 ret; asm volatile ("ld.global.nc.v2.u16 {%0,%1}, [%2];"  : "=h"(ret.x), "=h"(ret.y) : "l" (ptr)); return ret; }
static __declspec(__device__) __inline ushort4 __ldg(const ushort4 *ptr) { ushort4 ret; asm volatile ("ld.global.nc.v4.u16 {%0,%1,%2,%3}, [%4];"  : "=h"(ret.x), "=h"(ret.y), "=h"(ret.z), "=h"(ret.w) : "l" (ptr)); return ret; }
static __declspec(__device__) __inline uint2 __ldg(const uint2 *ptr) { uint2 ret; asm volatile ("ld.global.nc.v2.u32 {%0,%1}, [%2];"  : "=r"(ret.x), "=r"(ret.y) : "l" (ptr)); return ret; }
static __declspec(__device__) __inline uint4 __ldg(const uint4 *ptr) { uint4 ret; asm volatile ("ld.global.nc.v4.u32 {%0,%1,%2,%3}, [%4];"  : "=r"(ret.x), "=r"(ret.y), "=r"(ret.z), "=r"(ret.w) : "l" (ptr)); return ret; }
static __declspec(__device__) __inline ulonglong2 __ldg(const ulonglong2 *ptr) { ulonglong2 ret; asm volatile ("ld.global.nc.v2.u64 %0, [%1];"  : "=l"(ret.x), "=l"(ret.y) : "l" (ptr)); return ret; }

static __declspec(__device__) __inline float __ldg(const float *ptr) { float ret; asm volatile ("ld.global.nc.f32 %0, [%1];"  : "=f"(ret) : "l" (ptr)); return ret; }
static __declspec(__device__) __inline double __ldg(const double *ptr) { double ret; asm volatile ("ld.global.nc.f64 %0, [%1];"  : "=d"(ret) : "l" (ptr)); return ret; }
static __declspec(__device__) __inline float2 __ldg(const float2 *ptr) { float2 ret; asm volatile ("ld.global.nc.v2.f32 {%0,%1}, [%2];"  : "=f"(ret.x), "=f"(ret.y) : "l" (ptr)); return ret; }
static __declspec(__device__) __inline float4 __ldg(const float4 *ptr) { float4 ret; asm volatile ("ld.global.nc.v4.f32 {%0,%1,%2,%3}, [%4];"  : "=f"(ret.x), "=f"(ret.y), "=f"(ret.z), "=f"(ret.w) : "l" (ptr)); return ret; }
static __declspec(__device__) __inline double2 __ldg(const double2 *ptr) { double2 ret; asm volatile ("ld.global.nc.v2.f64 {%0,%1}, [%2];"  : "=d"(ret.x), "=d"(ret.y) : "l" (ptr)); return ret; }










static __declspec(__device__) inline unsigned int __funnelshift_l(unsigned int lo, unsigned int hi, unsigned int shift)
{
    unsigned int ret;
    asm volatile ("shf.l.wrap.b32 %0, %1, %2, %3;" : "=r"(ret) : "r"(lo), "r"(hi), "r"(shift));
    return ret;
}
static __declspec(__device__) inline unsigned int __funnelshift_lc(unsigned int lo, unsigned int hi, unsigned int shift)
{
    unsigned int ret;
    asm volatile ("shf.l.clamp.b32 %0, %1, %2, %3;" : "=r"(ret) : "r"(lo), "r"(hi), "r"(shift));
    return ret;
}


static __declspec(__device__) inline unsigned int __funnelshift_r(unsigned int lo, unsigned int hi, unsigned int shift)
{
    unsigned int ret;
    asm volatile ("shf.r.wrap.b32 %0, %1, %2, %3;" : "=r"(ret) : "r"(lo), "r"(hi), "r"(shift));
    return ret;
}
static __declspec(__device__) inline unsigned int __funnelshift_rc(unsigned int lo, unsigned int hi, unsigned int shift)
{
    unsigned int ret;
    asm volatile ("shf.r.clamp.b32 %0, %1, %2, %3;" : "=r"(ret) : "r"(lo), "r"(hi), "r"(shift));
    return ret;
}


#line 159 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\sm_32_intrinsics.h"

#line 161 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\sm_32_intrinsics.h"

#line 163 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\sm_32_intrinsics.h"
#line 9414 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\device_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\sm_35_intrinsics.h"














































































































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\sm_32_intrinsics.h"

































































































































































#line 163 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\sm_32_intrinsics.h"
#line 112 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\sm_35_intrinsics.h"



#line 116 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\sm_35_intrinsics.h"

#line 9415 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\device_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\surface_functions.h"




























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\builtin_types.h"























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\device_types.h"




































































#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\device_types.h"
#line 57 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\driver_types.h"




































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1414 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\driver_types.h"

#line 58 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\surface_types.h"






















































































































#line 120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\surface_types.h"
#line 59 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_types.h"




















































































































































































































#line 214 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_types.h"
#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\vector_types.h"












































































































































































































































































































































































































































#line 430 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\vector_types.h"
#line 61 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\builtin_types.h"
#line 62 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\surface_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\cuda_surface_types.h"

































































































#line 99 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\cuda_surface_types.h"
#line 63 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\surface_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\host_defines.h"












































































































































































































#line 206 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\host_defines.h"
#line 64 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\surface_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\surface_types.h"






















































































































#line 120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\surface_types.h"
#line 65 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\surface_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\vector_functions.h"




















































































































































































































































































































#line 310 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\vector_functions.h"
#line 66 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\surface_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\vector_types.h"












































































































































































































































































































































































































































#line 430 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\vector_types.h"
#line 67 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\surface_functions.h"






extern __declspec(__device__) __declspec(__device_builtin__) uchar1     __surf1Dreadc1(surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode);
extern __declspec(__device__) __declspec(__device_builtin__) uchar2     __surf1Dreadc2(surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode);
extern __declspec(__device__) __declspec(__device_builtin__) uchar4     __surf1Dreadc4(surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode);
extern __declspec(__device__) __declspec(__device_builtin__) ushort1    __surf1Dreads1(surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode);
extern __declspec(__device__) __declspec(__device_builtin__) ushort2    __surf1Dreads2(surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode);
extern __declspec(__device__) __declspec(__device_builtin__) ushort4    __surf1Dreads4(surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode);
extern __declspec(__device__) __declspec(__device_builtin__) uint1      __surf1Dreadu1(surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode);
extern __declspec(__device__) __declspec(__device_builtin__) uint2      __surf1Dreadu2(surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode);
extern __declspec(__device__) __declspec(__device_builtin__) uint4      __surf1Dreadu4(surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode);
extern __declspec(__device__) __declspec(__device_builtin__) ulonglong1 __surf1Dreadl1(surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode);
extern __declspec(__device__) __declspec(__device_builtin__) ulonglong2 __surf1Dreadl2(surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode);








#line 93 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\surface_functions.h"




#line 98 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\surface_functions.h"

template<class T>
static __forceinline __declspec(__device__) void surf1Dread(T *res, surface<void, 0x01> surf, int x, int s, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  (s ==  1) ? (void)(*(uchar1 *)res = __surf1Dreadc1(surf, x, cudaBoundaryModeTrap)) :
  (s ==  2) ? (void)(*(ushort1*)res = __surf1Dreads1(surf, x, cudaBoundaryModeTrap)) :
  (s ==  4) ? (void)(*(uint1  *)res = __surf1Dreadu1(surf, x, cudaBoundaryModeTrap)) :
  (s ==  8) ? (void)(*(uint2  *)res = __surf1Dreadu2(surf, x, cudaBoundaryModeTrap)) :
  (s == 16) ? (void)(*(uint4  *)res = __surf1Dreadu4(surf, x, cudaBoundaryModeTrap)) :
              (void)0;
}

template<class T>
static __forceinline __declspec(__device__) T surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  T tmp;
  
  surf1Dread(&tmp, surf, x, (int)sizeof(T), mode);
  
  return tmp;
}

template<class T>
static __forceinline __declspec(__device__) void surf1Dread(T *res, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  *res = surf1Dread<T>(surf, x, mode);
}

template<>
__forceinline __declspec(__device__) char surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  return (char)__surf1Dreadc1(surf, x, cudaBoundaryModeTrap).x;
}

template<>
__forceinline __declspec(__device__) signed char surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  return (signed char)__surf1Dreadc1(surf, x, cudaBoundaryModeTrap).x;
}

template<>
__forceinline __declspec(__device__) unsigned char surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  return __surf1Dreadc1(surf, x, cudaBoundaryModeTrap).x;
}

template<>
__forceinline __declspec(__device__) char1 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  return make_char1((signed char)__surf1Dreadc1(surf, x, cudaBoundaryModeTrap).x);
}

template<>
__forceinline __declspec(__device__) uchar1 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  return __surf1Dreadc1(surf, x, cudaBoundaryModeTrap);
}

template<>
__forceinline __declspec(__device__) char2 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  uchar2 tmp = __surf1Dreadc2(surf, x, cudaBoundaryModeTrap);
  
  return make_char2((signed char)tmp.x, (signed char)tmp.y);
}

template<>
__forceinline __declspec(__device__) uchar2 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  return __surf1Dreadc2(surf, x, cudaBoundaryModeTrap);
}

template<>
__forceinline __declspec(__device__) char4 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  uchar4 tmp = __surf1Dreadc4(surf, x, cudaBoundaryModeTrap);
  
  return make_char4((signed char)tmp.x, (signed char)tmp.y, (signed char)tmp.z, (signed char)tmp.w);
}

template<>
__forceinline __declspec(__device__) uchar4 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  return __surf1Dreadc4(surf, x, cudaBoundaryModeTrap);
}

template<>
__forceinline __declspec(__device__) short surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  return (short)__surf1Dreads1(surf, x, cudaBoundaryModeTrap).x;
}

template<>
__forceinline __declspec(__device__) unsigned short surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  return __surf1Dreads1(surf, x, cudaBoundaryModeTrap).x;
}

template<>
__forceinline __declspec(__device__) short1 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  return make_short1((signed short)__surf1Dreads1(surf, x, cudaBoundaryModeTrap).x);
}

template<>
__forceinline __declspec(__device__) ushort1 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  return __surf1Dreads1(surf, x, cudaBoundaryModeTrap);
}

template<>
__forceinline __declspec(__device__) short2 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  ushort2 tmp = __surf1Dreads2(surf, x, cudaBoundaryModeTrap);
  
  return make_short2((signed short)tmp.x, (signed short)tmp.y);
}

template<>
__forceinline __declspec(__device__) ushort2 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  return __surf1Dreads2(surf, x, cudaBoundaryModeTrap);
}

template<>
__forceinline __declspec(__device__) short4 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  ushort4 tmp = __surf1Dreads4(surf, x, cudaBoundaryModeTrap);
  
  return make_short4((signed short)tmp.x, (signed short)tmp.y, (signed short)tmp.z, (signed short)tmp.w);
}

template<>
__forceinline __declspec(__device__) ushort4 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  return __surf1Dreads4(surf, x, cudaBoundaryModeTrap);
}

template<>
__forceinline __declspec(__device__) int surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  return (int)__surf1Dreadu1(surf, x, cudaBoundaryModeTrap).x;
}

template<>
__forceinline __declspec(__device__) unsigned int surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  return __surf1Dreadu1(surf, x, cudaBoundaryModeTrap).x;
}

template<>
__forceinline __declspec(__device__) int1 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  return make_int1((signed int)__surf1Dreadu1(surf, x, cudaBoundaryModeTrap).x);
}

template<>
__forceinline __declspec(__device__) uint1 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  return __surf1Dreadu1(surf, x, cudaBoundaryModeTrap);
}

template<>
__forceinline __declspec(__device__) int2 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  uint2 tmp = __surf1Dreadu2(surf, x, cudaBoundaryModeTrap);
  
  return make_int2((int)tmp.x, (int)tmp.y);
}

template<>
__forceinline __declspec(__device__) uint2 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  return __surf1Dreadu2(surf, x, cudaBoundaryModeTrap);
}

template<>
__forceinline __declspec(__device__) int4 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  uint4 tmp = __surf1Dreadu4(surf, x, cudaBoundaryModeTrap);
  
  return make_int4((int)tmp.x, (int)tmp.y, (int)tmp.z, (int)tmp.w);
}

template<>
__forceinline __declspec(__device__) uint4 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  return __surf1Dreadu4(surf, x, cudaBoundaryModeTrap);
}

template<>
__forceinline __declspec(__device__) long long int surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  return (long long int)__surf1Dreadl1(surf, x, cudaBoundaryModeTrap).x;
}

template<>
__forceinline __declspec(__device__) unsigned long long int surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  return __surf1Dreadl1(surf, x, cudaBoundaryModeTrap).x;
}

template<>
__forceinline __declspec(__device__) longlong1 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  return make_longlong1((long long int)__surf1Dreadl1(surf, x, cudaBoundaryModeTrap).x);
}

template<>
__forceinline __declspec(__device__) ulonglong1 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  return __surf1Dreadl1(surf, x, cudaBoundaryModeTrap);
}

template<>
__forceinline __declspec(__device__) longlong2 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  ulonglong2 tmp = __surf1Dreadl2(surf, x, cudaBoundaryModeTrap);
  
  return make_longlong2((long long int)tmp.x, (long long int)tmp.y);
}

template<>
__forceinline __declspec(__device__) ulonglong2 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  return __surf1Dreadl2(surf, x, cudaBoundaryModeTrap);
}



template<>
__forceinline __declspec(__device__) long int surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  return (long int)__surf1Dreadu1(surf, x, cudaBoundaryModeTrap).x;
}

template<>
__forceinline __declspec(__device__) unsigned long int surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  return (unsigned long int)__surf1Dreadu1(surf, x, cudaBoundaryModeTrap).x;
}

template<>
__forceinline __declspec(__device__) long1 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  return make_long1((long int)__surf1Dreadu1(surf, x, cudaBoundaryModeTrap).x);
}

template<>
__forceinline __declspec(__device__) ulong1 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  return make_ulong1((unsigned long int)__surf1Dreadu1(surf, x, cudaBoundaryModeTrap).x);
}

template<>
__forceinline __declspec(__device__) long2 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  uint2 tmp = __surf1Dreadu2(surf, x, cudaBoundaryModeTrap);
  
  return make_long2((long int)tmp.x, (long int)tmp.y);
}

template<>
__forceinline __declspec(__device__) ulong2 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  uint2 tmp = __surf1Dreadu2(surf, x, cudaBoundaryModeTrap);
  
  return make_ulong2((unsigned long int)tmp.x, (unsigned long int)tmp.y);
}

template<>
__forceinline __declspec(__device__) long4 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  uint4 tmp = __surf1Dreadu4(surf, x, cudaBoundaryModeTrap);
  
  return make_long4((long int)tmp.x, (long int)tmp.y, (long int)tmp.z, (long int)tmp.w);
}

template<>
__forceinline __declspec(__device__) ulong4 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  uint4 tmp = __surf1Dreadu4(surf, x, cudaBoundaryModeTrap);
  
  return make_ulong4((unsigned long int)tmp.x, (unsigned long int)tmp.y, (unsigned long int)tmp.z, (unsigned long int)tmp.w);
}

#line 385 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\surface_functions.h"

template<>
__forceinline __declspec(__device__) float surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  return __int_as_float((int)__surf1Dreadu1(surf, x, cudaBoundaryModeTrap).x);
}

template<>
__forceinline __declspec(__device__) float1 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  return make_float1(__int_as_float((int)__surf1Dreadu1(surf, x, cudaBoundaryModeTrap).x));
}

template<>
__forceinline __declspec(__device__) float2 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  uint2 tmp = __surf1Dreadu2(surf, x, cudaBoundaryModeTrap);
  
  return make_float2(__int_as_float((int)tmp.x), __int_as_float((int)tmp.y));
}

template<>
__forceinline __declspec(__device__) float4 surf1Dread(surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode)
{
  uint4 tmp = __surf1Dreadu4(surf, x, cudaBoundaryModeTrap);
  
  return make_float4(__int_as_float((int)tmp.x), __int_as_float((int)tmp.y), __int_as_float((int)tmp.z), __int_as_float((int)tmp.w));
}








extern __declspec(__device__) __declspec(__device_builtin__) uchar1     __surf2Dreadc1(surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode);
extern __declspec(__device__) __declspec(__device_builtin__) uchar2     __surf2Dreadc2(surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode);
extern __declspec(__device__) __declspec(__device_builtin__) uchar4     __surf2Dreadc4(surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode);
extern __declspec(__device__) __declspec(__device_builtin__) ushort1    __surf2Dreads1(surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode);
extern __declspec(__device__) __declspec(__device_builtin__) ushort2    __surf2Dreads2(surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode);
extern __declspec(__device__) __declspec(__device_builtin__) ushort4    __surf2Dreads4(surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode);
extern __declspec(__device__) __declspec(__device_builtin__) uint1      __surf2Dreadu1(surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode);
extern __declspec(__device__) __declspec(__device_builtin__) uint2      __surf2Dreadu2(surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode);
extern __declspec(__device__) __declspec(__device_builtin__) uint4      __surf2Dreadu4(surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode);
extern __declspec(__device__) __declspec(__device_builtin__) ulonglong1 __surf2Dreadl1(surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode);
extern __declspec(__device__) __declspec(__device_builtin__) ulonglong2 __surf2Dreadl2(surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode);








#line 441 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\surface_functions.h"




#line 446 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\surface_functions.h"

template<class T>
static __forceinline __declspec(__device__) void surf2Dread(T *res, surface<void, 0x02> surf, int x, int y, int s, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  (s ==  1) ? (void)(*(uchar1 *)res = __surf2Dreadc1(surf, x, y, cudaBoundaryModeTrap)) :
  (s ==  2) ? (void)(*(ushort1*)res = __surf2Dreads1(surf, x, y, cudaBoundaryModeTrap)) :
  (s ==  4) ? (void)(*(uint1  *)res = __surf2Dreadu1(surf, x, y, cudaBoundaryModeTrap)) :
  (s ==  8) ? (void)(*(uint2  *)res = __surf2Dreadu2(surf, x, y, cudaBoundaryModeTrap)) :
  (s == 16) ? (void)(*(uint4  *)res = __surf2Dreadu4(surf, x, y, cudaBoundaryModeTrap)) :
              (void)0;
}

template<class T>
static __forceinline __declspec(__device__) T surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  T tmp;
  
  surf2Dread(&tmp, surf, x, y, (int)sizeof(T), mode);
  
  return tmp;
}

template<class T>
static __forceinline __declspec(__device__) void surf2Dread(T *res, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  *res = surf2Dread<T>(surf, x, y, mode);
}

template<>
__forceinline __declspec(__device__) char surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  return (char)__surf2Dreadc1(surf, x, y, cudaBoundaryModeTrap).x;
}

template<>
__forceinline __declspec(__device__) signed char surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  return (signed char)__surf2Dreadc1(surf, x, y, cudaBoundaryModeTrap).x;
}

template<>
__forceinline __declspec(__device__) unsigned char surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  return __surf2Dreadc1(surf, x, y, cudaBoundaryModeTrap).x;
}

template<>
__forceinline __declspec(__device__) char1 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  return make_char1((signed char)__surf2Dreadc1(surf, x, y, cudaBoundaryModeTrap).x);
}

template<>
__forceinline __declspec(__device__) uchar1 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  return __surf2Dreadc1(surf, x, y, cudaBoundaryModeTrap);
}

template<>
__forceinline __declspec(__device__) char2 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  uchar2 tmp = __surf2Dreadc2(surf, x, y, cudaBoundaryModeTrap);
  
  return make_char2((signed char)tmp.x, (signed char)tmp.y);
}

template<>
__forceinline __declspec(__device__) uchar2 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  return __surf2Dreadc2(surf, x, y, cudaBoundaryModeTrap);
}

template<>
__forceinline __declspec(__device__) char4 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  uchar4 tmp = __surf2Dreadc4(surf, x, y, cudaBoundaryModeTrap);
  
  return make_char4((signed char)tmp.x, (signed char)tmp.y, (signed char)tmp.z, (signed char)tmp.w);
}

template<>
__forceinline __declspec(__device__) uchar4 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  return __surf2Dreadc4(surf, x, y, cudaBoundaryModeTrap);
}

template<>
__forceinline __declspec(__device__) short surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  return (short)__surf2Dreads1(surf, x, y, cudaBoundaryModeTrap).x;
}

template<>
__forceinline __declspec(__device__) unsigned short surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  return __surf2Dreads1(surf, x, y, cudaBoundaryModeTrap).x;
}

template<>
__forceinline __declspec(__device__) short1 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  return make_short1((signed short)__surf2Dreads1(surf, x, y, cudaBoundaryModeTrap).x);
}

template<>
__forceinline __declspec(__device__) ushort1 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  return __surf2Dreads1(surf, x, y, cudaBoundaryModeTrap);
}

template<>
__forceinline __declspec(__device__) short2 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  ushort2 tmp = __surf2Dreads2(surf, x, y, cudaBoundaryModeTrap);
  
  return make_short2((signed short)tmp.x, (signed short)tmp.y);
}

template<>
__forceinline __declspec(__device__) ushort2 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  return __surf2Dreads2(surf, x, y, cudaBoundaryModeTrap);
}

template<>
__forceinline __declspec(__device__) short4 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  ushort4 tmp = __surf2Dreads4(surf, x, y, cudaBoundaryModeTrap);
  
  return make_short4((signed short)tmp.x, (signed short)tmp.y, (signed short)tmp.z, (signed short)tmp.w);
}

template<>
__forceinline __declspec(__device__) ushort4 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  return __surf2Dreads4(surf, x, y, cudaBoundaryModeTrap);
}

template<>
__forceinline __declspec(__device__) int surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  return (int)__surf2Dreadu1(surf, x, y, cudaBoundaryModeTrap).x;
}

template<>
__forceinline __declspec(__device__) unsigned int surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  return __surf2Dreadu1(surf, x, y, cudaBoundaryModeTrap).x;
}

template<>
__forceinline __declspec(__device__) int1 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  return make_int1((signed int)__surf2Dreadu1(surf, x, y, cudaBoundaryModeTrap).x);
}

template<>
__forceinline __declspec(__device__) uint1 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  return __surf2Dreadu1(surf, x, y, cudaBoundaryModeTrap);
}

template<>
__forceinline __declspec(__device__) int2 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  uint2 tmp = __surf2Dreadu2(surf, x, y, cudaBoundaryModeTrap);
  
  return make_int2((int)tmp.x, (int)tmp.y);
}

template<>
__forceinline __declspec(__device__) uint2 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  return __surf2Dreadu2(surf, x, y, cudaBoundaryModeTrap);
}

template<>
__forceinline __declspec(__device__) int4 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  uint4 tmp = __surf2Dreadu4(surf, x, y, cudaBoundaryModeTrap);
  
  return make_int4((int)tmp.x, (int)tmp.y, (int)tmp.z, (int)tmp.w);
}

template<>
__forceinline __declspec(__device__) uint4 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  return __surf2Dreadu4(surf, x, y, cudaBoundaryModeTrap);
}

template<>
__forceinline __declspec(__device__) long long int surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  return (long long int)__surf2Dreadl1(surf, x, y, cudaBoundaryModeTrap).x;
}

template<>
__forceinline __declspec(__device__) unsigned long long int surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  return __surf2Dreadl1(surf, x, y, cudaBoundaryModeTrap).x;
}

template<>
__forceinline __declspec(__device__) longlong1 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  return make_longlong1((long long int)__surf2Dreadl1(surf, x, y, cudaBoundaryModeTrap).x);
}

template<>
__forceinline __declspec(__device__) ulonglong1 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  return __surf2Dreadl1(surf, x, y, cudaBoundaryModeTrap);
}

template<>
__forceinline __declspec(__device__) longlong2 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  ulonglong2 tmp = __surf2Dreadl2(surf, x, y, cudaBoundaryModeTrap);
  
  return make_longlong2((long long int)tmp.x, (long long int)tmp.y);
}

template<>
__forceinline __declspec(__device__) ulonglong2 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  return __surf2Dreadl2(surf, x, y, cudaBoundaryModeTrap);
}



template<>
__forceinline __declspec(__device__) long int surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  return (long int)__surf2Dreadu1(surf, x, y, cudaBoundaryModeTrap).x;
}

template<>
__forceinline __declspec(__device__) unsigned long int surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  return (unsigned long int)__surf2Dreadu1(surf, x, y, cudaBoundaryModeTrap).x;
}

template<>
__forceinline __declspec(__device__) long1 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  return make_long1((long int)__surf2Dreadu1(surf, x, y, cudaBoundaryModeTrap).x);
}

template<>
__forceinline __declspec(__device__) ulong1 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  return make_ulong1((unsigned long int)__surf2Dreadu1(surf, x, y, cudaBoundaryModeTrap).x);
}

template<>
__forceinline __declspec(__device__) long2 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  uint2 tmp = __surf2Dreadu2(surf, x, y, cudaBoundaryModeTrap);
  
  return make_long2((long int)tmp.x, (long int)tmp.y);
}

template<>
__forceinline __declspec(__device__) ulong2 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  uint2 tmp = __surf2Dreadu2(surf, x, y, cudaBoundaryModeTrap);
  
  return make_ulong2((unsigned long int)tmp.x, (unsigned long int)tmp.y);
}

template<>
__forceinline __declspec(__device__) long4 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  uint4 tmp = __surf2Dreadu4(surf, x, y, cudaBoundaryModeTrap);
  
  return make_long4((long int)tmp.x, (long int)tmp.y, (long int)tmp.z, (long int)tmp.w);
}

template<>
__forceinline __declspec(__device__) ulong4 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  uint4 tmp = __surf2Dreadu4(surf, x, y, cudaBoundaryModeTrap);
  
  return make_ulong4((unsigned long int)tmp.x, (unsigned long int)tmp.y, (unsigned long int)tmp.z, (unsigned long int)tmp.w);
}

#line 733 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\surface_functions.h"

template<>
__forceinline __declspec(__device__) float surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  return __int_as_float((int)__surf2Dreadu1(surf, x, y, cudaBoundaryModeTrap).x);
}

template<>
__forceinline __declspec(__device__) float1 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  return make_float1(__int_as_float((int)__surf2Dreadu1(surf, x, y, cudaBoundaryModeTrap).x));
}

template<>
__forceinline __declspec(__device__) float2 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  uint2 tmp = __surf2Dreadu2(surf, x, y, cudaBoundaryModeTrap);
  
  return make_float2(__int_as_float((int)tmp.x), __int_as_float((int)tmp.y));
}

template<>
__forceinline __declspec(__device__) float4 surf2Dread(surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode)
{
  uint4 tmp = __surf2Dreadu4(surf, x, y, cudaBoundaryModeTrap);
  
  return make_float4(__int_as_float((int)tmp.x), __int_as_float((int)tmp.y), __int_as_float((int)tmp.z), __int_as_float((int)tmp.w));
}








extern __declspec(__device__) __declspec(__device_builtin__) uchar1     __surf3Dreadc1(surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode);
extern __declspec(__device__) __declspec(__device_builtin__) uchar2     __surf3Dreadc2(surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode);
extern __declspec(__device__) __declspec(__device_builtin__) uchar4     __surf3Dreadc4(surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode);
extern __declspec(__device__) __declspec(__device_builtin__) ushort1    __surf3Dreads1(surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode);
extern __declspec(__device__) __declspec(__device_builtin__) ushort2    __surf3Dreads2(surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode);
extern __declspec(__device__) __declspec(__device_builtin__) ushort4    __surf3Dreads4(surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode);
extern __declspec(__device__) __declspec(__device_builtin__) uint1      __surf3Dreadu1(surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode);
extern __declspec(__device__) __declspec(__device_builtin__) uint2      __surf3Dreadu2(surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode);
extern __declspec(__device__) __declspec(__device_builtin__) uint4      __surf3Dreadu4(surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode);
extern __declspec(__device__) __declspec(__device_builtin__) ulonglong1 __surf3Dreadl1(surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode);
extern __declspec(__device__) __declspec(__device_builtin__) ulonglong2 __surf3Dreadl2(surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode);








#line 789 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\surface_functions.h"




#line 794 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\surface_functions.h"

template<class T>
static __forceinline __declspec(__device__) void surf3Dread(T *res, surface<void, 0x03> surf, int x, int y, int z, int s, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  (s ==  1) ? (void)(*(uchar1 *)res = __surf3Dreadc1(surf, x, y, z, cudaBoundaryModeTrap)) :
  (s ==  2) ? (void)(*(ushort1*)res = __surf3Dreads1(surf, x, y, z, cudaBoundaryModeTrap)) :
  (s ==  4) ? (void)(*(uint1  *)res = __surf3Dreadu1(surf, x, y, z, cudaBoundaryModeTrap)) :
  (s ==  8) ? (void)(*(uint2  *)res = __surf3Dreadu2(surf, x, y, z, cudaBoundaryModeTrap)) :
  (s == 16) ? (void)(*(uint4  *)res = __surf3Dreadu4(surf, x, y, z, cudaBoundaryModeTrap)) :
              (void)0;
}

template<class T>
static __forceinline __declspec(__device__) T surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  T tmp;
  
  surf3Dread(&tmp, surf, x, y, z, (int)sizeof(T), mode);
  
  return tmp;
}

template<class T>
static __forceinline __declspec(__device__) void surf3Dread(T *res, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  *res = surf3Dread<T>(surf, x, y, z, mode);
}

template<>
__forceinline __declspec(__device__) char surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  return (char)__surf3Dreadc1(surf, x, y, z, cudaBoundaryModeTrap).x;
}

template<>
__forceinline __declspec(__device__) signed char surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  return (signed char)__surf3Dreadc1(surf, x, y, z, cudaBoundaryModeTrap).x;
}

template<>
__forceinline __declspec(__device__) unsigned char surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  return __surf3Dreadc1(surf, x, y, z, cudaBoundaryModeTrap).x;
}

template<>
__forceinline __declspec(__device__) char1 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  return make_char1((signed char)__surf3Dreadc1(surf, x, y, z, cudaBoundaryModeTrap).x);
}

template<>
__forceinline __declspec(__device__) uchar1 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  return __surf3Dreadc1(surf, x, y, z, cudaBoundaryModeTrap);
}

template<>
__forceinline __declspec(__device__) char2 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  uchar2 tmp = __surf3Dreadc2(surf, x, y, z, cudaBoundaryModeTrap);
  
  return make_char2((signed char)tmp.x, (signed char)tmp.y);
}

template<>
__forceinline __declspec(__device__) uchar2 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  return __surf3Dreadc2(surf, x, y, z, cudaBoundaryModeTrap);
}

template<>
__forceinline __declspec(__device__) char4 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  uchar4 tmp = __surf3Dreadc4(surf, x, y, z, cudaBoundaryModeTrap);
  
  return make_char4((signed char)tmp.x, (signed char)tmp.y, (signed char)tmp.z, (signed char)tmp.w);
}

template<>
__forceinline __declspec(__device__) uchar4 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  return __surf3Dreadc4(surf, x, y, z, cudaBoundaryModeTrap);
}

template<>
__forceinline __declspec(__device__) short surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  return (short)__surf3Dreads1(surf, x, y, z, cudaBoundaryModeTrap).x;
}

template<>
__forceinline __declspec(__device__) unsigned short surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  return __surf3Dreads1(surf, x, y, z, cudaBoundaryModeTrap).x;
}

template<>
__forceinline __declspec(__device__) short1 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  return make_short1((signed short)__surf3Dreads1(surf, x, y, z, cudaBoundaryModeTrap).x);
}

template<>
__forceinline __declspec(__device__) ushort1 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  return __surf3Dreads1(surf, x, y, z, cudaBoundaryModeTrap);
}

template<>
__forceinline __declspec(__device__) short2 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  ushort2 tmp = __surf3Dreads2(surf, x, y, z, cudaBoundaryModeTrap);
  
  return make_short2((signed short)tmp.x, (signed short)tmp.y);
}

template<>
__forceinline __declspec(__device__) ushort2 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  return __surf3Dreads2(surf, x, y, z, cudaBoundaryModeTrap);
}

template<>
__forceinline __declspec(__device__) short4 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  ushort4 tmp = __surf3Dreads4(surf, x, y, z, cudaBoundaryModeTrap);
  
  return make_short4((signed short)tmp.x, (signed short)tmp.y, (signed short)tmp.z, (signed short)tmp.w);
}

template<>
__forceinline __declspec(__device__) ushort4 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  return __surf3Dreads4(surf, x, y, z, cudaBoundaryModeTrap);
}

template<>
__forceinline __declspec(__device__) int surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  return (int)__surf3Dreadu1(surf, x, y, z, cudaBoundaryModeTrap).x;
}

template<>
__forceinline __declspec(__device__) unsigned int surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  return __surf3Dreadu1(surf, x, y, z, cudaBoundaryModeTrap).x;
}

template<>
__forceinline __declspec(__device__) int1 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  return make_int1((signed int)__surf3Dreadu1(surf, x, y, z, cudaBoundaryModeTrap).x);
}

template<>
__forceinline __declspec(__device__) uint1 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  return __surf3Dreadu1(surf, x, y, z, cudaBoundaryModeTrap);
}

template<>
__forceinline __declspec(__device__) int2 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  uint2 tmp = __surf3Dreadu2(surf, x, y, z, cudaBoundaryModeTrap);
  
  return make_int2((int)tmp.x, (int)tmp.y);
}

template<>
__forceinline __declspec(__device__) uint2 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  return __surf3Dreadu2(surf, x, y, z, cudaBoundaryModeTrap);
}

template<>
__forceinline __declspec(__device__) int4 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  uint4 tmp = __surf3Dreadu4(surf, x, y, z, cudaBoundaryModeTrap);
  
  return make_int4((int)tmp.x, (int)tmp.y, (int)tmp.z, (int)tmp.w);
}

template<>
__forceinline __declspec(__device__) uint4 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  return __surf3Dreadu4(surf, x, y, z, cudaBoundaryModeTrap);
}

template<>
__forceinline __declspec(__device__) long long int surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  return (long long int)__surf3Dreadl1(surf, x, y, z, cudaBoundaryModeTrap).x;
}

template<>
__forceinline __declspec(__device__) unsigned long long int surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  return __surf3Dreadl1(surf, x, y, z, cudaBoundaryModeTrap).x;
}

template<>
__forceinline __declspec(__device__) longlong1 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  return make_longlong1((long long int)__surf3Dreadl1(surf, x, y, z, cudaBoundaryModeTrap).x);
}

template<>
__forceinline __declspec(__device__) ulonglong1 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  return __surf3Dreadl1(surf, x, y, z, cudaBoundaryModeTrap);
}

template<>
__forceinline __declspec(__device__) longlong2 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  ulonglong2 tmp = __surf3Dreadl2(surf, x, y, z, cudaBoundaryModeTrap);
  
  return make_longlong2((long long int)tmp.x, (long long int)tmp.y);
}

template<>
__forceinline __declspec(__device__) ulonglong2 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  return __surf3Dreadl2(surf, x, y, z, cudaBoundaryModeTrap);
}



template<>
__forceinline __declspec(__device__) long int surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  return (long int)__surf3Dreadu1(surf, x, y, z, cudaBoundaryModeTrap).x;
}

template<>
__forceinline __declspec(__device__) unsigned long int surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  return (unsigned long int)__surf3Dreadu1(surf, x, y, z, cudaBoundaryModeTrap).x;
}

template<>
__forceinline __declspec(__device__) long1 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  return make_long1((long int)__surf3Dreadu1(surf, x, y, z, cudaBoundaryModeTrap).x);
}

template<>
__forceinline __declspec(__device__) ulong1 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  return make_ulong1((unsigned long int)__surf3Dreadu1(surf, x, y, z, cudaBoundaryModeTrap).x);
}

template<>
__forceinline __declspec(__device__) long2 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  uint2 tmp = __surf3Dreadu2(surf, x, y, z, cudaBoundaryModeTrap);
  
  return make_long2((long int)tmp.x, (long int)tmp.y);
}

template<>
__forceinline __declspec(__device__) ulong2 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  uint2 tmp = __surf3Dreadu2(surf, x, y, z, cudaBoundaryModeTrap);
  
  return make_ulong2((unsigned long int)tmp.x, (unsigned long int)tmp.y);
}

template<>
__forceinline __declspec(__device__) long4 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  uint4 tmp = __surf3Dreadu4(surf, x, y, z, cudaBoundaryModeTrap);
  
  return make_long4((long int)tmp.x, (long int)tmp.y, (long int)tmp.z, (long int)tmp.w);
}

template<>
__forceinline __declspec(__device__) ulong4 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  uint4 tmp = __surf3Dreadu4(surf, x, y, z, cudaBoundaryModeTrap);
  
  return make_ulong4((unsigned long int)tmp.x, (unsigned long int)tmp.y, (unsigned long int)tmp.z, (unsigned long int)tmp.w);
}

#line 1081 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\surface_functions.h"

template<>
__forceinline __declspec(__device__) float surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  return __int_as_float((int)__surf3Dreadu1(surf, x, y, z, cudaBoundaryModeTrap).x);
}

template<>
__forceinline __declspec(__device__) float1 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  return make_float1(__int_as_float((int)__surf3Dreadu1(surf, x, y, z, cudaBoundaryModeTrap).x));
}

template<>
__forceinline __declspec(__device__) float2 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  uint2 tmp = __surf3Dreadu2(surf, x, y, z, cudaBoundaryModeTrap);
  
  return make_float2(__int_as_float((int)tmp.x), __int_as_float((int)tmp.y));
}

template<>
__forceinline __declspec(__device__) float4 surf3Dread(surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode)
{
  uint4 tmp = __surf3Dreadu4(surf, x, y, z, cudaBoundaryModeTrap);
  
  return make_float4(__int_as_float((int)tmp.x), __int_as_float((int)tmp.y), __int_as_float((int)tmp.z), __int_as_float((int)tmp.w));
}








extern __declspec(__device__) __declspec(__device_builtin__) uchar1     __surf1DLayeredreadc1(surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode);
extern __declspec(__device__) __declspec(__device_builtin__) uchar2     __surf1DLayeredreadc2(surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode);
extern __declspec(__device__) __declspec(__device_builtin__) uchar4     __surf1DLayeredreadc4(surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode);
extern __declspec(__device__) __declspec(__device_builtin__) ushort1    __surf1DLayeredreads1(surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode);
extern __declspec(__device__) __declspec(__device_builtin__) ushort2    __surf1DLayeredreads2(surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode);
extern __declspec(__device__) __declspec(__device_builtin__) ushort4    __surf1DLayeredreads4(surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode);
extern __declspec(__device__) __declspec(__device_builtin__) uint1      __surf1DLayeredreadu1(surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode);
extern __declspec(__device__) __declspec(__device_builtin__) uint2      __surf1DLayeredreadu2(surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode);
extern __declspec(__device__) __declspec(__device_builtin__) uint4      __surf1DLayeredreadu4(surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode);
extern __declspec(__device__) __declspec(__device_builtin__) ulonglong1 __surf1DLayeredreadl1(surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode);
extern __declspec(__device__) __declspec(__device_builtin__) ulonglong2 __surf1DLayeredreadl2(surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode);








#line 1137 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\surface_functions.h"




#line 1142 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\surface_functions.h"

template<class T>
static __forceinline __declspec(__device__) void surf1DLayeredread(T *res, surface<void, 0xF1> surf, int x, int layer, int s, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  (s ==  1) ? (void)(*(uchar1 *)res = __surf1DLayeredreadc1(surf, x, layer, cudaBoundaryModeTrap)) :
  (s ==  2) ? (void)(*(ushort1*)res = __surf1DLayeredreads1(surf, x, layer, cudaBoundaryModeTrap)) :
  (s ==  4) ? (void)(*(uint1  *)res = __surf1DLayeredreadu1(surf, x, layer, cudaBoundaryModeTrap)) :
  (s ==  8) ? (void)(*(uint2  *)res = __surf1DLayeredreadu2(surf, x, layer, cudaBoundaryModeTrap)) :
  (s == 16) ? (void)(*(uint4  *)res = __surf1DLayeredreadu4(surf, x, layer, cudaBoundaryModeTrap)) :
              (void)0;
}

template<class T>
static __forceinline __declspec(__device__) T surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  T tmp;
  
  surf1DLayeredread(&tmp, surf, x, layer, (int)sizeof(T), mode);
  
  return tmp;
}

template<class T>
static __forceinline __declspec(__device__) void surf1DLayeredread(T *res, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  *res = surf1DLayeredread<T>(surf, x, layer, mode);
}

template<>
__forceinline __declspec(__device__) char surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return (char)__surf1DLayeredreadc1(surf, x, layer, cudaBoundaryModeTrap).x;
}

template<>
__forceinline __declspec(__device__) signed char surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return (signed char)__surf1DLayeredreadc1(surf, x, layer, cudaBoundaryModeTrap).x;
}

template<>
__forceinline __declspec(__device__) unsigned char surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return __surf1DLayeredreadc1(surf, x, layer, cudaBoundaryModeTrap).x;
}

template<>
__forceinline __declspec(__device__) char1 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return make_char1((signed char)__surf1DLayeredreadc1(surf, x, layer, cudaBoundaryModeTrap).x);
}

template<>
__forceinline __declspec(__device__) uchar1 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return __surf1DLayeredreadc1(surf, x, layer, cudaBoundaryModeTrap);
}

template<>
__forceinline __declspec(__device__) char2 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  uchar2 tmp = __surf1DLayeredreadc2(surf, x, layer, cudaBoundaryModeTrap);
  
  return make_char2((signed char)tmp.x, (signed char)tmp.y);
}

template<>
__forceinline __declspec(__device__) uchar2 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return __surf1DLayeredreadc2(surf, x, layer, cudaBoundaryModeTrap);
}

template<>
__forceinline __declspec(__device__) char4 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  uchar4 tmp = __surf1DLayeredreadc4(surf, x, layer, cudaBoundaryModeTrap);
  
  return make_char4((signed char)tmp.x, (signed char)tmp.y, (signed char)tmp.z, (signed char)tmp.w);
}

template<>
__forceinline __declspec(__device__) uchar4 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return __surf1DLayeredreadc4(surf, x, layer, cudaBoundaryModeTrap);
}

template<>
__forceinline __declspec(__device__) short surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return (short)__surf1DLayeredreads1(surf, x, layer, cudaBoundaryModeTrap).x;
}

template<>
__forceinline __declspec(__device__) unsigned short surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return __surf1DLayeredreads1(surf, x, layer, cudaBoundaryModeTrap).x;
}

template<>
__forceinline __declspec(__device__) short1 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return make_short1((signed short)__surf1DLayeredreads1(surf, x, layer, cudaBoundaryModeTrap).x);
}

template<>
__forceinline __declspec(__device__) ushort1 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return __surf1DLayeredreads1(surf, x, layer, cudaBoundaryModeTrap);
}

template<>
__forceinline __declspec(__device__) short2 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  ushort2 tmp = __surf1DLayeredreads2(surf, x, layer, cudaBoundaryModeTrap);
  
  return make_short2((signed short)tmp.x, (signed short)tmp.y);
}

template<>
__forceinline __declspec(__device__) ushort2 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return __surf1DLayeredreads2(surf, x, layer, cudaBoundaryModeTrap);
}

template<>
__forceinline __declspec(__device__) short4 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  ushort4 tmp = __surf1DLayeredreads4(surf, x, layer, cudaBoundaryModeTrap);
  
  return make_short4((signed short)tmp.x, (signed short)tmp.y, (signed short)tmp.z, (signed short)tmp.w);
}

template<>
__forceinline __declspec(__device__) ushort4 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return __surf1DLayeredreads4(surf, x, layer, cudaBoundaryModeTrap);
}

template<>
__forceinline __declspec(__device__) int surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return (int)__surf1DLayeredreadu1(surf, x, layer, cudaBoundaryModeTrap).x;
}

template<>
__forceinline __declspec(__device__) unsigned int surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return __surf1DLayeredreadu1(surf, x, layer, cudaBoundaryModeTrap).x;
}

template<>
__forceinline __declspec(__device__) int1 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return make_int1((signed int)__surf1DLayeredreadu1(surf, x, layer, cudaBoundaryModeTrap).x);
}

template<>
__forceinline __declspec(__device__) uint1 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return __surf1DLayeredreadu1(surf, x, layer, cudaBoundaryModeTrap);
}

template<>
__forceinline __declspec(__device__) int2 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  uint2 tmp = __surf1DLayeredreadu2(surf, x, layer, cudaBoundaryModeTrap);
  
  return make_int2((int)tmp.x, (int)tmp.y);
}

template<>
__forceinline __declspec(__device__) uint2 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return __surf1DLayeredreadu2(surf, x, layer, cudaBoundaryModeTrap);
}

template<>
__forceinline __declspec(__device__) int4 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  uint4 tmp = __surf1DLayeredreadu4(surf, x, layer, cudaBoundaryModeTrap);
  
  return make_int4((int)tmp.x, (int)tmp.y, (int)tmp.z, (int)tmp.w);
}

template<>
__forceinline __declspec(__device__) uint4 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return __surf1DLayeredreadu4(surf, x, layer, cudaBoundaryModeTrap);
}

template<>
__forceinline __declspec(__device__) long long int surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return (long long int)__surf1DLayeredreadl1(surf, x, layer, cudaBoundaryModeTrap).x;
}

template<>
__forceinline __declspec(__device__) unsigned long long int surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return __surf1DLayeredreadl1(surf, x, layer, cudaBoundaryModeTrap).x;
}

template<>
__forceinline __declspec(__device__) longlong1 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return make_longlong1((long long int)__surf1DLayeredreadl1(surf, x, layer, cudaBoundaryModeTrap).x);
}

template<>
__forceinline __declspec(__device__) ulonglong1 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return __surf1DLayeredreadl1(surf, x, layer, cudaBoundaryModeTrap);
}

template<>
__forceinline __declspec(__device__) longlong2 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  ulonglong2 tmp = __surf1DLayeredreadl2(surf, x, layer, cudaBoundaryModeTrap);
  
  return make_longlong2((long long int)tmp.x, (long long int)tmp.y);
}

template<>
__forceinline __declspec(__device__) ulonglong2 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return __surf1DLayeredreadl2(surf, x, layer, cudaBoundaryModeTrap);
}



template<>
__forceinline __declspec(__device__) long int surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return (long int)__surf1DLayeredreadu1(surf, x, layer, cudaBoundaryModeTrap).x;
}

template<>
__forceinline __declspec(__device__) unsigned long int surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return (unsigned long int)__surf1DLayeredreadu1(surf, x, layer, cudaBoundaryModeTrap).x;
}

template<>
__forceinline __declspec(__device__) long1 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return make_long1((long int)__surf1DLayeredreadu1(surf, x, layer, cudaBoundaryModeTrap).x);
}

template<>
__forceinline __declspec(__device__) ulong1 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return make_ulong1((unsigned long int)__surf1DLayeredreadu1(surf, x, layer, cudaBoundaryModeTrap).x);
}

template<>
__forceinline __declspec(__device__) long2 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  uint2 tmp = __surf1DLayeredreadu2(surf, x, layer, cudaBoundaryModeTrap);
  
  return make_long2((long int)tmp.x, (long int)tmp.y);
}

template<>
__forceinline __declspec(__device__) ulong2 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  uint2 tmp = __surf1DLayeredreadu2(surf, x, layer, cudaBoundaryModeTrap);
  
  return make_ulong2((unsigned long int)tmp.x, (unsigned long int)tmp.y);
}

template<>
__forceinline __declspec(__device__) long4 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  uint4 tmp = __surf1DLayeredreadu4(surf, x, layer, cudaBoundaryModeTrap);
  
  return make_long4((long int)tmp.x, (long int)tmp.y, (long int)tmp.z, (long int)tmp.w);
}

template<>
__forceinline __declspec(__device__) ulong4 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  uint4 tmp = __surf1DLayeredreadu4(surf, x, layer, cudaBoundaryModeTrap);
  
  return make_ulong4((unsigned long int)tmp.x, (unsigned long int)tmp.y, (unsigned long int)tmp.z, (unsigned long int)tmp.w);
}

#line 1429 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\surface_functions.h"

template<>
__forceinline __declspec(__device__) float surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return __int_as_float((int)__surf1DLayeredreadu1(surf, x, layer, cudaBoundaryModeTrap).x);
}

template<>
__forceinline __declspec(__device__) float1 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return make_float1(__int_as_float((int)__surf1DLayeredreadu1(surf, x, layer, cudaBoundaryModeTrap).x));
}

template<>
__forceinline __declspec(__device__) float2 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  uint2 tmp = __surf1DLayeredreadu2(surf, x, layer, cudaBoundaryModeTrap);
  
  return make_float2(__int_as_float((int)tmp.x), __int_as_float((int)tmp.y));
}

template<>
__forceinline __declspec(__device__) float4 surf1DLayeredread(surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode)
{
  uint4 tmp = __surf1DLayeredreadu4(surf, x, layer, cudaBoundaryModeTrap);
  
  return make_float4(__int_as_float((int)tmp.x), __int_as_float((int)tmp.y), __int_as_float((int)tmp.z), __int_as_float((int)tmp.w));
}








extern __declspec(__device__) __declspec(__device_builtin__) uchar1     __surf2DLayeredreadc1(surface<void, 0xF2> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode);
extern __declspec(__device__) __declspec(__device_builtin__) uchar2     __surf2DLayeredreadc2(surface<void, 0xF2> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode);
extern __declspec(__device__) __declspec(__device_builtin__) uchar4     __surf2DLayeredreadc4(surface<void, 0xF2> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode);
extern __declspec(__device__) __declspec(__device_builtin__) ushort1    __surf2DLayeredreads1(surface<void, 0xF2> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode);
extern __declspec(__device__) __declspec(__device_builtin__) ushort2    __surf2DLayeredreads2(surface<void, 0xF2> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode);
extern __declspec(__device__) __declspec(__device_builtin__) ushort4    __surf2DLayeredreads4(surface<void, 0xF2> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode);
extern __declspec(__device__) __declspec(__device_builtin__) uint1      __surf2DLayeredreadu1(surface<void, 0xF2> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode);
extern __declspec(__device__) __declspec(__device_builtin__) uint2      __surf2DLayeredreadu2(surface<void, 0xF2> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode);
extern __declspec(__device__) __declspec(__device_builtin__) uint4      __surf2DLayeredreadu4(surface<void, 0xF2> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode);
extern __declspec(__device__) __declspec(__device_builtin__) ulonglong1 __surf2DLayeredreadl1(surface<void, 0xF2> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode);
extern __declspec(__device__) __declspec(__device_builtin__) ulonglong2 __surf2DLayeredreadl2(surface<void, 0xF2> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode);








#line 1485 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\surface_functions.h"




#line 1490 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\surface_functions.h"

template<class T>
static __forceinline __declspec(__device__) void surf2DLayeredread(T *res, surface<void, 0xF2> surf, int x, int y, int layer, int s, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  (s ==  1) ? (void)(*(uchar1 *)res = __surf2DLayeredreadc1(surf, x, y, layer, cudaBoundaryModeTrap)) :
  (s ==  2) ? (void)(*(ushort1*)res = __surf2DLayeredreads1(surf, x, y, layer, cudaBoundaryModeTrap)) :
  (s ==  4) ? (void)(*(uint1  *)res = __surf2DLayeredreadu1(surf, x, y, layer, cudaBoundaryModeTrap)) :
  (s ==  8) ? (void)(*(uint2  *)res = __surf2DLayeredreadu2(surf, x, y, layer, cudaBoundaryModeTrap)) :
  (s == 16) ? (void)(*(uint4  *)res = __surf2DLayeredreadu4(surf, x, y, layer, cudaBoundaryModeTrap)) :
              (void)0;
}

template<class T>
static __forceinline __declspec(__device__) T surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  T tmp;
  
  surf2DLayeredread(&tmp, surf, x, y, layer, (int)sizeof(T), mode);
  
  return tmp;
}

template<class T>
static __forceinline __declspec(__device__) void surf2DLayeredread(T *res, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  *res = surf2DLayeredread<T>(surf, x, y, layer, mode);
}

template<>
__forceinline __declspec(__device__) char surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return (char)__surf2DLayeredreadc1(surf, x, y, layer, cudaBoundaryModeTrap).x;
}

template<>
__forceinline __declspec(__device__) signed char surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return (signed char)__surf2DLayeredreadc1(surf, x, y, layer, cudaBoundaryModeTrap).x;
}

template<>
__forceinline __declspec(__device__) unsigned char surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return __surf2DLayeredreadc1(surf, x, y, layer, cudaBoundaryModeTrap).x;
}

template<>
__forceinline __declspec(__device__) char1 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return make_char1((signed char)__surf2DLayeredreadc1(surf, x, y, layer, cudaBoundaryModeTrap).x);
}

template<>
__forceinline __declspec(__device__) uchar1 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return __surf2DLayeredreadc1(surf, x, y, layer, cudaBoundaryModeTrap);
}

template<>
__forceinline __declspec(__device__) char2 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  uchar2 tmp = __surf2DLayeredreadc2(surf, x, y, layer, cudaBoundaryModeTrap);
  
  return make_char2((signed char)tmp.x, (signed char)tmp.y);
}

template<>
__forceinline __declspec(__device__) uchar2 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return __surf2DLayeredreadc2(surf, x, y, layer, cudaBoundaryModeTrap);
}

template<>
__forceinline __declspec(__device__) char4 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  uchar4 tmp = __surf2DLayeredreadc4(surf, x, y, layer, cudaBoundaryModeTrap);
  
  return make_char4((signed char)tmp.x, (signed char)tmp.y, (signed char)tmp.z, (signed char)tmp.w);
}

template<>
__forceinline __declspec(__device__) uchar4 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return __surf2DLayeredreadc4(surf, x, y, layer, cudaBoundaryModeTrap);
}

template<>
__forceinline __declspec(__device__) short surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return (short)__surf2DLayeredreads1(surf, x, y, layer, cudaBoundaryModeTrap).x;
}

template<>
__forceinline __declspec(__device__) unsigned short surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return __surf2DLayeredreads1(surf, x, y, layer, cudaBoundaryModeTrap).x;
}

template<>
__forceinline __declspec(__device__) short1 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return make_short1((signed short)__surf2DLayeredreads1(surf, x, y, layer, cudaBoundaryModeTrap).x);
}

template<>
__forceinline __declspec(__device__) ushort1 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return __surf2DLayeredreads1(surf, x, y, layer, cudaBoundaryModeTrap);
}

template<>
__forceinline __declspec(__device__) short2 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  ushort2 tmp = __surf2DLayeredreads2(surf, x, y, layer, cudaBoundaryModeTrap);
  
  return make_short2((signed short)tmp.x, (signed short)tmp.y);
}

template<>
__forceinline __declspec(__device__) ushort2 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return __surf2DLayeredreads2(surf, x, y, layer, cudaBoundaryModeTrap);
}

template<>
__forceinline __declspec(__device__) short4 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  ushort4 tmp = __surf2DLayeredreads4(surf, x, y, layer, cudaBoundaryModeTrap);
  
  return make_short4((signed short)tmp.x, (signed short)tmp.y, (signed short)tmp.z, (signed short)tmp.w);
}

template<>
__forceinline __declspec(__device__) ushort4 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return __surf2DLayeredreads4(surf, x, y, layer, cudaBoundaryModeTrap);
}

template<>
__forceinline __declspec(__device__) int surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return (int)__surf2DLayeredreadu1(surf, x, y, layer, cudaBoundaryModeTrap).x;
}

template<>
__forceinline __declspec(__device__) unsigned int surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return __surf2DLayeredreadu1(surf, x, y, layer, cudaBoundaryModeTrap).x;
}

template<>
__forceinline __declspec(__device__) int1 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return make_int1((signed int)__surf2DLayeredreadu1(surf, x, y, layer, cudaBoundaryModeTrap).x);
}

template<>
__forceinline __declspec(__device__) uint1 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return __surf2DLayeredreadu1(surf, x, y, layer, cudaBoundaryModeTrap);
}

template<>
__forceinline __declspec(__device__) int2 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  uint2 tmp = __surf2DLayeredreadu2(surf, x, y, layer, cudaBoundaryModeTrap);
  
  return make_int2((int)tmp.x, (int)tmp.y);
}

template<>
__forceinline __declspec(__device__) uint2 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return __surf2DLayeredreadu2(surf, x, y, layer, cudaBoundaryModeTrap);
}

template<>
__forceinline __declspec(__device__) int4 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  uint4 tmp = __surf2DLayeredreadu4(surf, x, y, layer, cudaBoundaryModeTrap);
  
  return make_int4((int)tmp.x, (int)tmp.y, (int)tmp.z, (int)tmp.w);
}

template<>
__forceinline __declspec(__device__) uint4 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return __surf2DLayeredreadu4(surf, x, y, layer, cudaBoundaryModeTrap);
}

template<>
__forceinline __declspec(__device__) long long int surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return (long long int)__surf2DLayeredreadl1(surf, x, y, layer, cudaBoundaryModeTrap).x;
}

template<>
__forceinline __declspec(__device__) unsigned long long int surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return __surf2DLayeredreadl1(surf, x, y, layer, cudaBoundaryModeTrap).x;
}

template<>
__forceinline __declspec(__device__) longlong1 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return make_longlong1((long long int)__surf2DLayeredreadl1(surf, x, y, layer, cudaBoundaryModeTrap).x);
}

template<>
__forceinline __declspec(__device__) ulonglong1 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return __surf2DLayeredreadl1(surf, x, y, layer, cudaBoundaryModeTrap);
}

template<>
__forceinline __declspec(__device__) longlong2 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  ulonglong2 tmp = __surf2DLayeredreadl2(surf, x, y, layer, cudaBoundaryModeTrap);
  
  return make_longlong2((long long int)tmp.x, (long long int)tmp.y);
}

template<>
__forceinline __declspec(__device__) ulonglong2 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return __surf2DLayeredreadl2(surf, x, y, layer, cudaBoundaryModeTrap);
}



template<>
__forceinline __declspec(__device__) long int surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return (long int)__surf2DLayeredreadu1(surf, x, y, layer, cudaBoundaryModeTrap).x;
}

template<>
__forceinline __declspec(__device__) unsigned long int surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return (unsigned long int)__surf2DLayeredreadu1(surf, x, y, layer, cudaBoundaryModeTrap).x;
}

template<>
__forceinline __declspec(__device__) long1 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return make_long1((long int)__surf2DLayeredreadu1(surf, x, y, layer, cudaBoundaryModeTrap).x);
}

template<>
__forceinline __declspec(__device__) ulong1 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return make_ulong1((unsigned long int)__surf2DLayeredreadu1(surf, x, y, layer, cudaBoundaryModeTrap).x);
}

template<>
__forceinline __declspec(__device__) long2 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  uint2 tmp = __surf2DLayeredreadu2(surf, x, y, layer, cudaBoundaryModeTrap);
  
  return make_long2((long int)tmp.x, (long int)tmp.y);
}

template<>
__forceinline __declspec(__device__) ulong2 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  uint2 tmp = __surf2DLayeredreadu2(surf, x, y, layer, cudaBoundaryModeTrap);
  
  return make_ulong2((unsigned long int)tmp.x, (unsigned long int)tmp.y);
}

template<>
__forceinline __declspec(__device__) long4 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  uint4 tmp = __surf2DLayeredreadu4(surf, x, y, layer, cudaBoundaryModeTrap);
  
  return make_long4((long int)tmp.x, (long int)tmp.y, (long int)tmp.z, (long int)tmp.w);
}

template<>
__forceinline __declspec(__device__) ulong4 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  uint4 tmp = __surf2DLayeredreadu4(surf, x, y, layer, cudaBoundaryModeTrap);
  
  return make_ulong4((unsigned long int)tmp.x, (unsigned long int)tmp.y, (unsigned long int)tmp.z, (unsigned long int)tmp.w);
}

#line 1777 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\surface_functions.h"

template<>
__forceinline __declspec(__device__) float surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return __int_as_float((int)__surf2DLayeredreadu1(surf, x, y, layer, cudaBoundaryModeTrap).x);
}

template<>
__forceinline __declspec(__device__) float1 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  return make_float1(__int_as_float((int)__surf2DLayeredreadu1(surf, x, y, layer, cudaBoundaryModeTrap).x));
}

template<>
__forceinline __declspec(__device__) float2 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  uint2 tmp = __surf2DLayeredreadu2(surf, x, y, layer, cudaBoundaryModeTrap);
  
  return make_float2(__int_as_float((int)tmp.x), __int_as_float((int)tmp.y));
}

template<>
__forceinline __declspec(__device__) float4 surf2DLayeredread(surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode)
{
  uint4 tmp = __surf2DLayeredreadu4(surf, x, y, layer, cudaBoundaryModeTrap);
  
  return make_float4(__int_as_float((int)tmp.x), __int_as_float((int)tmp.y), __int_as_float((int)tmp.z), __int_as_float((int)tmp.w));
}








extern __declspec(__device__) __declspec(__device_builtin__) uchar1     __surfCubemapreadc1(surface<void, 0x0C> t, int x, int y, int face, enum cudaSurfaceBoundaryMode mode);
extern __declspec(__device__) __declspec(__device_builtin__) uchar2     __surfCubemapreadc2(surface<void, 0x0C> t, int x, int y, int face, enum cudaSurfaceBoundaryMode mode);
extern __declspec(__device__) __declspec(__device_builtin__) uchar4     __surfCubemapreadc4(surface<void, 0x0C> t, int x, int y, int face, enum cudaSurfaceBoundaryMode mode);
extern __declspec(__device__) __declspec(__device_builtin__) ushort1    __surfCubemapreads1(surface<void, 0x0C> t, int x, int y, int face, enum cudaSurfaceBoundaryMode mode);
extern __declspec(__device__) __declspec(__device_builtin__) ushort2    __surfCubemapreads2(surface<void, 0x0C> t, int x, int y, int face, enum cudaSurfaceBoundaryMode mode);
extern __declspec(__device__) __declspec(__device_builtin__) ushort4    __surfCubemapreads4(surface<void, 0x0C> t, int x, int y, int face, enum cudaSurfaceBoundaryMode mode);
extern __declspec(__device__) __declspec(__device_builtin__) uint1      __surfCubemapreadu1(surface<void, 0x0C> t, int x, int y, int face, enum cudaSurfaceBoundaryMode mode);
extern __declspec(__device__) __declspec(__device_builtin__) uint2      __surfCubemapreadu2(surface<void, 0x0C> t, int x, int y, int face, enum cudaSurfaceBoundaryMode mode);
extern __declspec(__device__) __declspec(__device_builtin__) uint4      __surfCubemapreadu4(surface<void, 0x0C> t, int x, int y, int face, enum cudaSurfaceBoundaryMode mode);
extern __declspec(__device__) __declspec(__device_builtin__) ulonglong1 __surfCubemapreadl1(surface<void, 0x0C> t, int x, int y, int face, enum cudaSurfaceBoundaryMode mode);
extern __declspec(__device__) __declspec(__device_builtin__) ulonglong2 __surfCubemapreadl2(surface<void, 0x0C> t, int x, int y, int face, enum cudaSurfaceBoundaryMode mode);








#line 1833 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\surface_functions.h"




#line 1838 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\surface_functions.h"

template<class T>
static __forceinline __declspec(__device__) void surfCubemapread(T *res, surface<void, 0x0C> surf, int x, int y, int face, int s, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  (s ==  1) ? (void)(*(uchar1 *)res = __surfCubemapreadc1(surf, x, y, face, cudaBoundaryModeTrap)) :
  (s ==  2) ? (void)(*(ushort1*)res = __surfCubemapreads1(surf, x, y, face, cudaBoundaryModeTrap)) :
  (s ==  4) ? (void)(*(uint1  *)res = __surfCubemapreadu1(surf, x, y, face, cudaBoundaryModeTrap)) :
  (s ==  8) ? (void)(*(uint2  *)res = __surfCubemapreadu2(surf, x, y, face, cudaBoundaryModeTrap)) :
  (s == 16) ? (void)(*(uint4  *)res = __surfCubemapreadu4(surf, x, y, face, cudaBoundaryModeTrap)) :
              (void)0;
}

template<class T>
static __forceinline __declspec(__device__) T surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  T tmp;
  
  surfCubemapread(&tmp, surf, x, y, face, (int)sizeof(T), mode);
  
  return tmp;
}

template<class T>
static __forceinline __declspec(__device__) void surfCubemapread(T *res, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  *res = surfCubemapread<T>(surf, x, y, face, mode);
}

template<>
__forceinline __declspec(__device__) char surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  return (char)__surfCubemapreadc1(surf, x, y, face, cudaBoundaryModeTrap).x;
}

template<>
__forceinline __declspec(__device__) signed char surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  return (signed char)__surfCubemapreadc1(surf, x, y, face, cudaBoundaryModeTrap).x;
}

template<>
__forceinline __declspec(__device__) unsigned char surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  return __surfCubemapreadc1(surf, x, y, face, cudaBoundaryModeTrap).x;
}

template<>
__forceinline __declspec(__device__) char1 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  return make_char1((signed char)__surfCubemapreadc1(surf, x, y, face, cudaBoundaryModeTrap).x);
}

template<>
__forceinline __declspec(__device__) uchar1 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  return __surfCubemapreadc1(surf, x, y, face, cudaBoundaryModeTrap);
}

template<>
__forceinline __declspec(__device__) char2 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  uchar2 tmp = __surfCubemapreadc2(surf, x, y, face, cudaBoundaryModeTrap);
  
  return make_char2((signed char)tmp.x, (signed char)tmp.y);
}

template<>
__forceinline __declspec(__device__) uchar2 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  return __surfCubemapreadc2(surf, x, y, face, cudaBoundaryModeTrap);
}

template<>
__forceinline __declspec(__device__) char4 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  uchar4 tmp = __surfCubemapreadc4(surf, x, y, face, cudaBoundaryModeTrap);
  
  return make_char4((signed char)tmp.x, (signed char)tmp.y, (signed char)tmp.z, (signed char)tmp.w);
}

template<>
__forceinline __declspec(__device__) uchar4 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  return __surfCubemapreadc4(surf, x, y, face, cudaBoundaryModeTrap);
}

template<>
__forceinline __declspec(__device__) short surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  return (short)__surfCubemapreads1(surf, x, y, face, cudaBoundaryModeTrap).x;
}

template<>
__forceinline __declspec(__device__) unsigned short surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  return __surfCubemapreads1(surf, x, y, face, cudaBoundaryModeTrap).x;
}

template<>
__forceinline __declspec(__device__) short1 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  return make_short1((signed short)__surfCubemapreads1(surf, x, y, face, cudaBoundaryModeTrap).x);
}

template<>
__forceinline __declspec(__device__) ushort1 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  return __surfCubemapreads1(surf, x, y, face, cudaBoundaryModeTrap);
}

template<>
__forceinline __declspec(__device__) short2 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  ushort2 tmp = __surfCubemapreads2(surf, x, y, face, cudaBoundaryModeTrap);
  
  return make_short2((signed short)tmp.x, (signed short)tmp.y);
}

template<>
__forceinline __declspec(__device__) ushort2 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  return __surfCubemapreads2(surf, x, y, face, cudaBoundaryModeTrap);
}

template<>
__forceinline __declspec(__device__) short4 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  ushort4 tmp = __surfCubemapreads4(surf, x, y, face, cudaBoundaryModeTrap);
  
  return make_short4((signed short)tmp.x, (signed short)tmp.y, (signed short)tmp.z, (signed short)tmp.w);
}

template<>
__forceinline __declspec(__device__) ushort4 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  return __surfCubemapreads4(surf, x, y, face, cudaBoundaryModeTrap);
}

template<>
__forceinline __declspec(__device__) int surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  return (int)__surfCubemapreadu1(surf, x, y, face, cudaBoundaryModeTrap).x;
}

template<>
__forceinline __declspec(__device__) unsigned int surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  return __surfCubemapreadu1(surf, x, y, face, cudaBoundaryModeTrap).x;
}

template<>
__forceinline __declspec(__device__) int1 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  return make_int1((signed int)__surfCubemapreadu1(surf, x, y, face, cudaBoundaryModeTrap).x);
}

template<>
__forceinline __declspec(__device__) uint1 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  return __surfCubemapreadu1(surf, x, y, face, cudaBoundaryModeTrap);
}

template<>
__forceinline __declspec(__device__) int2 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  uint2 tmp = __surfCubemapreadu2(surf, x, y, face, cudaBoundaryModeTrap);
  
  return make_int2((int)tmp.x, (int)tmp.y);
}

template<>
__forceinline __declspec(__device__) uint2 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  return __surfCubemapreadu2(surf, x, y, face, cudaBoundaryModeTrap);
}

template<>
__forceinline __declspec(__device__) int4 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  uint4 tmp = __surfCubemapreadu4(surf, x, y, face, cudaBoundaryModeTrap);
  
  return make_int4((int)tmp.x, (int)tmp.y, (int)tmp.z, (int)tmp.w);
}

template<>
__forceinline __declspec(__device__) uint4 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  return __surfCubemapreadu4(surf, x, y, face, cudaBoundaryModeTrap);
}

template<>
__forceinline __declspec(__device__) long long int surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  return (long long int)__surfCubemapreadl1(surf, x, y, face, cudaBoundaryModeTrap).x;
}

template<>
__forceinline __declspec(__device__) unsigned long long int surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  return __surfCubemapreadl1(surf, x, y, face, cudaBoundaryModeTrap).x;
}

template<>
__forceinline __declspec(__device__) longlong1 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  return make_longlong1((long long int)__surfCubemapreadl1(surf, x, y, face, cudaBoundaryModeTrap).x);
}

template<>
__forceinline __declspec(__device__) ulonglong1 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  return __surfCubemapreadl1(surf, x, y, face, cudaBoundaryModeTrap);
}

template<>
__forceinline __declspec(__device__) longlong2 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  ulonglong2 tmp = __surfCubemapreadl2(surf, x, y, face, cudaBoundaryModeTrap);
  
  return make_longlong2((long long int)tmp.x, (long long int)tmp.y);
}

template<>
__forceinline __declspec(__device__) ulonglong2 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  return __surfCubemapreadl2(surf, x, y, face, cudaBoundaryModeTrap);
}



template<>
__forceinline __declspec(__device__) long int surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  return (long int)__surfCubemapreadu1(surf, x, y, face, cudaBoundaryModeTrap).x;
}

template<>
__forceinline __declspec(__device__) unsigned long int surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  return (unsigned long int)__surfCubemapreadu1(surf, x, y, face, cudaBoundaryModeTrap).x;
}

template<>
__forceinline __declspec(__device__) long1 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  return make_long1((long int)__surfCubemapreadu1(surf, x, y, face, cudaBoundaryModeTrap).x);
}

template<>
__forceinline __declspec(__device__) ulong1 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  return make_ulong1((unsigned long int)__surfCubemapreadu1(surf, x, y, face, cudaBoundaryModeTrap).x);
}

template<>
__forceinline __declspec(__device__) long2 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  uint2 tmp = __surfCubemapreadu2(surf, x, y, face, cudaBoundaryModeTrap);
  
  return make_long2((long int)tmp.x, (long int)tmp.y);
}

template<>
__forceinline __declspec(__device__) ulong2 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  uint2 tmp = __surfCubemapreadu2(surf, x, y, face, cudaBoundaryModeTrap);
  
  return make_ulong2((unsigned long int)tmp.x, (unsigned long int)tmp.y);
}

template<>
__forceinline __declspec(__device__) long4 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  uint4 tmp = __surfCubemapreadu4(surf, x, y, face, cudaBoundaryModeTrap);
  
  return make_long4((long int)tmp.x, (long int)tmp.y, (long int)tmp.z, (long int)tmp.w);
}

template<>
__forceinline __declspec(__device__) ulong4 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  uint4 tmp = __surfCubemapreadu4(surf, x, y, face, cudaBoundaryModeTrap);
  
  return make_ulong4((unsigned long int)tmp.x, (unsigned long int)tmp.y, (unsigned long int)tmp.z, (unsigned long int)tmp.w);
}

#line 2125 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\surface_functions.h"

template<>
__forceinline __declspec(__device__) float surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  return __int_as_float((int)__surfCubemapreadu1(surf, x, y, face, cudaBoundaryModeTrap).x);
}

template<>
__forceinline __declspec(__device__) float1 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  return make_float1(__int_as_float((int)__surfCubemapreadu1(surf, x, y, face, cudaBoundaryModeTrap).x));
}

template<>
__forceinline __declspec(__device__) float2 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  uint2 tmp = __surfCubemapreadu2(surf, x, y, face, cudaBoundaryModeTrap);
  
  return make_float2(__int_as_float((int)tmp.x), __int_as_float((int)tmp.y));
}

template<>
__forceinline __declspec(__device__) float4 surfCubemapread(surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode)
{
  uint4 tmp = __surfCubemapreadu4(surf, x, y, face, cudaBoundaryModeTrap);
  
  return make_float4(__int_as_float((int)tmp.x), __int_as_float((int)tmp.y), __int_as_float((int)tmp.z), __int_as_float((int)tmp.w));
}








extern __declspec(__device__) __declspec(__device_builtin__) uchar1     __surfCubemapLayeredreadc1(surface<void, 0xFC> t, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode);
extern __declspec(__device__) __declspec(__device_builtin__) uchar2     __surfCubemapLayeredreadc2(surface<void, 0xFC> t, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode);
extern __declspec(__device__) __declspec(__device_builtin__) uchar4     __surfCubemapLayeredreadc4(surface<void, 0xFC> t, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode);
extern __declspec(__device__) __declspec(__device_builtin__) ushort1    __surfCubemapLayeredreads1(surface<void, 0xFC> t, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode);
extern __declspec(__device__) __declspec(__device_builtin__) ushort2    __surfCubemapLayeredreads2(surface<void, 0xFC> t, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode);
extern __declspec(__device__) __declspec(__device_builtin__) ushort4    __surfCubemapLayeredreads4(surface<void, 0xFC> t, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode);
extern __declspec(__device__) __declspec(__device_builtin__) uint1      __surfCubemapLayeredreadu1(surface<void, 0xFC> t, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode);
extern __declspec(__device__) __declspec(__device_builtin__) uint2      __surfCubemapLayeredreadu2(surface<void, 0xFC> t, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode);
extern __declspec(__device__) __declspec(__device_builtin__) uint4      __surfCubemapLayeredreadu4(surface<void, 0xFC> t, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode);
extern __declspec(__device__) __declspec(__device_builtin__) ulonglong1 __surfCubemapLayeredreadl1(surface<void, 0xFC> t, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode);
extern __declspec(__device__) __declspec(__device_builtin__) ulonglong2 __surfCubemapLayeredreadl2(surface<void, 0xFC> t, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode);








#line 2181 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\surface_functions.h"





#line 2187 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\surface_functions.h"

template<class T>
static __forceinline __declspec(__device__) void surfCubemapLayeredread(T *res, surface<void, 0xFC> surf, int x, int y, int layerFace, int s, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  (s ==  1) ? (void)(*(uchar1 *)res = __surfCubemapLayeredreadc1(surf, x, y, layerFace, cudaBoundaryModeTrap)) :
  (s ==  2) ? (void)(*(ushort1*)res = __surfCubemapLayeredreads1(surf, x, y, layerFace, cudaBoundaryModeTrap)) :
  (s ==  4) ? (void)(*(uint1  *)res = __surfCubemapLayeredreadu1(surf, x, y, layerFace, cudaBoundaryModeTrap)) :
  (s ==  8) ? (void)(*(uint2  *)res = __surfCubemapLayeredreadu2(surf, x, y, layerFace, cudaBoundaryModeTrap)) :
  (s == 16) ? (void)(*(uint4  *)res = __surfCubemapLayeredreadu4(surf, x, y, layerFace, cudaBoundaryModeTrap)) :
              (void)0;
}

template<class T>
static __forceinline __declspec(__device__) T surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  T tmp;
  
  surfCubemapLayeredread(&tmp, surf, x, y, layerFace, (int)sizeof(T), mode);
  
  return tmp;
}

template<class T>
static __forceinline __declspec(__device__) void surfCubemapLayeredread(T *res, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  *res = surfCubemapLayeredread<T>(surf, x, y, layerFace, mode);
}

template<>
__forceinline __declspec(__device__) char surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  return (char)__surfCubemapLayeredreadc1(surf, x, y, layerFace, cudaBoundaryModeTrap).x;
}

template<>
__forceinline __declspec(__device__) signed char surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  return (signed char)__surfCubemapLayeredreadc1(surf, x, y, layerFace, cudaBoundaryModeTrap).x;
}

template<>
__forceinline __declspec(__device__) unsigned char surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  return __surfCubemapLayeredreadc1(surf, x, y, layerFace, cudaBoundaryModeTrap).x;
}

template<>
__forceinline __declspec(__device__) char1 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  return make_char1((signed char)__surfCubemapLayeredreadc1(surf, x, y, layerFace, cudaBoundaryModeTrap).x);
}

template<>
__forceinline __declspec(__device__) uchar1 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  return __surfCubemapLayeredreadc1(surf, x, y, layerFace, cudaBoundaryModeTrap);
}

template<>
__forceinline __declspec(__device__) char2 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  uchar2 tmp = __surfCubemapLayeredreadc2(surf, x, y, layerFace, cudaBoundaryModeTrap);
  
  return make_char2((signed char)tmp.x, (signed char)tmp.y);
}

template<>
__forceinline __declspec(__device__) uchar2 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  return __surfCubemapLayeredreadc2(surf, x, y, layerFace, cudaBoundaryModeTrap);
}

template<>
__forceinline __declspec(__device__) char4 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  uchar4 tmp = __surfCubemapLayeredreadc4(surf, x, y, layerFace, cudaBoundaryModeTrap);
  
  return make_char4((signed char)tmp.x, (signed char)tmp.y, (signed char)tmp.z, (signed char)tmp.w);
}

template<>
__forceinline __declspec(__device__) uchar4 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  return __surfCubemapLayeredreadc4(surf, x, y, layerFace, cudaBoundaryModeTrap);
}

template<>
__forceinline __declspec(__device__) short surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  return (short)__surfCubemapLayeredreads1(surf, x, y, layerFace, cudaBoundaryModeTrap).x;
}

template<>
__forceinline __declspec(__device__) unsigned short surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  return __surfCubemapLayeredreads1(surf, x, y, layerFace, cudaBoundaryModeTrap).x;
}

template<>
__forceinline __declspec(__device__) short1 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  return make_short1((signed short)__surfCubemapLayeredreads1(surf, x, y, layerFace, cudaBoundaryModeTrap).x);
}

template<>
__forceinline __declspec(__device__) ushort1 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  return __surfCubemapLayeredreads1(surf, x, y, layerFace, cudaBoundaryModeTrap);
}

template<>
__forceinline __declspec(__device__) short2 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  ushort2 tmp = __surfCubemapLayeredreads2(surf, x, y, layerFace, cudaBoundaryModeTrap);
  
  return make_short2((signed short)tmp.x, (signed short)tmp.y);
}

template<>
__forceinline __declspec(__device__) ushort2 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  return __surfCubemapLayeredreads2(surf, x, y, layerFace, cudaBoundaryModeTrap);
}

template<>
__forceinline __declspec(__device__) short4 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  ushort4 tmp = __surfCubemapLayeredreads4(surf, x, y, layerFace, cudaBoundaryModeTrap);
  
  return make_short4((signed short)tmp.x, (signed short)tmp.y, (signed short)tmp.z, (signed short)tmp.w);
}

template<>
__forceinline __declspec(__device__) ushort4 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  return __surfCubemapLayeredreads4(surf, x, y, layerFace, cudaBoundaryModeTrap);
}

template<>
__forceinline __declspec(__device__) int surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  return (int)__surfCubemapLayeredreadu1(surf, x, y, layerFace, cudaBoundaryModeTrap).x;
}

template<>
__forceinline __declspec(__device__) unsigned int surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  return __surfCubemapLayeredreadu1(surf, x, y, layerFace, cudaBoundaryModeTrap).x;
}

template<>
__forceinline __declspec(__device__) int1 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  return make_int1((signed int)__surfCubemapLayeredreadu1(surf, x, y, layerFace, cudaBoundaryModeTrap).x);
}

template<>
__forceinline __declspec(__device__) uint1 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  return __surfCubemapLayeredreadu1(surf, x, y, layerFace, cudaBoundaryModeTrap);
}

template<>
__forceinline __declspec(__device__) int2 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  uint2 tmp = __surfCubemapLayeredreadu2(surf, x, y, layerFace, cudaBoundaryModeTrap);
  
  return make_int2((int)tmp.x, (int)tmp.y);
}

template<>
__forceinline __declspec(__device__) uint2 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  return __surfCubemapLayeredreadu2(surf, x, y, layerFace, cudaBoundaryModeTrap);
}

template<>
__forceinline __declspec(__device__) int4 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  uint4 tmp = __surfCubemapLayeredreadu4(surf, x, y, layerFace, cudaBoundaryModeTrap);
  
  return make_int4((int)tmp.x, (int)tmp.y, (int)tmp.z, (int)tmp.w);
}

template<>
__forceinline __declspec(__device__) uint4 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  return __surfCubemapLayeredreadu4(surf, x, y, layerFace, cudaBoundaryModeTrap);
}

template<>
__forceinline __declspec(__device__) long long int surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  return (long long int)__surfCubemapLayeredreadl1(surf, x, y, layerFace, cudaBoundaryModeTrap).x;
}

template<>
__forceinline __declspec(__device__) unsigned long long int surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  return __surfCubemapLayeredreadl1(surf, x, y, layerFace, cudaBoundaryModeTrap).x;
}

template<>
__forceinline __declspec(__device__) longlong1 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  return make_longlong1((long long int)__surfCubemapLayeredreadl1(surf, x, y, layerFace, cudaBoundaryModeTrap).x);
}

template<>
__forceinline __declspec(__device__) ulonglong1 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  return __surfCubemapLayeredreadl1(surf, x, y, layerFace, cudaBoundaryModeTrap);
}

template<>
__forceinline __declspec(__device__) longlong2 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  ulonglong2 tmp = __surfCubemapLayeredreadl2(surf, x, y, layerFace, cudaBoundaryModeTrap);
  
  return make_longlong2((long long int)tmp.x, (long long int)tmp.y);
}

template<>
__forceinline __declspec(__device__) ulonglong2 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  return __surfCubemapLayeredreadl2(surf, x, y, layerFace, cudaBoundaryModeTrap);
}



template<>
__forceinline __declspec(__device__) long int surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  return (long int)__surfCubemapLayeredreadu1(surf, x, y, layerFace, cudaBoundaryModeTrap).x;
}

template<>
__forceinline __declspec(__device__) unsigned long int surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  return (unsigned long int)__surfCubemapLayeredreadu1(surf, x, y, layerFace, cudaBoundaryModeTrap).x;
}

template<>
__forceinline __declspec(__device__) long1 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  return make_long1((long int)__surfCubemapLayeredreadu1(surf, x, y, layerFace, cudaBoundaryModeTrap).x);
}

template<>
__forceinline __declspec(__device__) ulong1 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  return make_ulong1((unsigned long int)__surfCubemapLayeredreadu1(surf, x, y, layerFace, cudaBoundaryModeTrap).x);
}

template<>
__forceinline __declspec(__device__) long2 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  uint2 tmp = __surfCubemapLayeredreadu2(surf, x, y, layerFace, cudaBoundaryModeTrap);
  
  return make_long2((long int)tmp.x, (long int)tmp.y);
}

template<>
__forceinline __declspec(__device__) ulong2 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  uint2 tmp = __surfCubemapLayeredreadu2(surf, x, y, layerFace, cudaBoundaryModeTrap);
  
  return make_ulong2((unsigned long int)tmp.x, (unsigned long int)tmp.y);
}

template<>
__forceinline __declspec(__device__) long4 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  uint4 tmp = __surfCubemapLayeredreadu4(surf, x, y, layerFace, cudaBoundaryModeTrap);
  
  return make_long4((long int)tmp.x, (long int)tmp.y, (long int)tmp.z, (long int)tmp.w);
}

template<>
__forceinline __declspec(__device__) ulong4 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  uint4 tmp = __surfCubemapLayeredreadu4(surf, x, y, layerFace, cudaBoundaryModeTrap);
  
  return make_ulong4((unsigned long int)tmp.x, (unsigned long int)tmp.y, (unsigned long int)tmp.z, (unsigned long int)tmp.w);
}

#line 2474 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\surface_functions.h"

template<>
__forceinline __declspec(__device__) float surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  return __int_as_float((int)__surfCubemapLayeredreadu1(surf, x, y, layerFace, cudaBoundaryModeTrap).x);
}

template<>
__forceinline __declspec(__device__) float1 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  return make_float1(__int_as_float((int)__surfCubemapLayeredreadu1(surf, x, y, layerFace, cudaBoundaryModeTrap).x));
}

template<>
__forceinline __declspec(__device__) float2 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  uint2 tmp = __surfCubemapLayeredreadu2(surf, x, y, layerFace, cudaBoundaryModeTrap);
  
  return make_float2(__int_as_float((int)tmp.x), __int_as_float((int)tmp.y));
}

template<>
__forceinline __declspec(__device__) float4 surfCubemapLayeredread(surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode)
{
  uint4 tmp = __surfCubemapLayeredreadu4(surf, x, y, layerFace, cudaBoundaryModeTrap);
  
  return make_float4(__int_as_float((int)tmp.x), __int_as_float((int)tmp.y), __int_as_float((int)tmp.z), __int_as_float((int)tmp.w));
}









extern __declspec(__device__) __declspec(__device_builtin__) void __surf1Dwritec1(    uchar1 val, surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode);
extern __declspec(__device__) __declspec(__device_builtin__) void __surf1Dwritec2(    uchar2 val, surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode);
extern __declspec(__device__) __declspec(__device_builtin__) void __surf1Dwritec4(    uchar4 val, surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode);
extern __declspec(__device__) __declspec(__device_builtin__) void __surf1Dwrites1(   ushort1 val, surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode);
extern __declspec(__device__) __declspec(__device_builtin__) void __surf1Dwrites2(   ushort2 val, surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode);
extern __declspec(__device__) __declspec(__device_builtin__) void __surf1Dwrites4(   ushort4 val, surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode);
extern __declspec(__device__) __declspec(__device_builtin__) void __surf1Dwriteu1(     uint1 val, surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode);
extern __declspec(__device__) __declspec(__device_builtin__) void __surf1Dwriteu2(     uint2 val, surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode);
extern __declspec(__device__) __declspec(__device_builtin__) void __surf1Dwriteu4(     uint4 val, surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode);
extern __declspec(__device__) __declspec(__device_builtin__) void __surf1Dwritel1(ulonglong1 val, surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode);
extern __declspec(__device__) __declspec(__device_builtin__) void __surf1Dwritel2(ulonglong2 val, surface<void, 0x01> t, int x, enum cudaSurfaceBoundaryMode mode);








#line 2531 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\surface_functions.h"




#line 2536 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\surface_functions.h"

template<class T>
static __forceinline __declspec(__device__) void surf1Dwrite(T val, surface<void, 0x01> surf, int x, int s, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  union {
    T       val;
    uchar1  c1;
    ushort1 s1;
    uint1   u1;
    uint2   u2;
    uint4   u4;
  } tmp;
  
  tmp.val = val;
  
  (s ==  1) ? (void)(__surf1Dwritec1(tmp.c1, surf, x, cudaBoundaryModeTrap)) :
  (s ==  2) ? (void)(__surf1Dwrites1(tmp.s1, surf, x, cudaBoundaryModeTrap)) :
  (s ==  4) ? (void)(__surf1Dwriteu1(tmp.u1, surf, x, cudaBoundaryModeTrap)) :
  (s ==  8) ? (void)(__surf1Dwriteu2(tmp.u2, surf, x, cudaBoundaryModeTrap)) :
  (s == 16) ? (void)(__surf1Dwriteu4(tmp.u4, surf, x, cudaBoundaryModeTrap)) :
              (void)0;
}

template<class T>
static __forceinline __declspec(__device__) void surf1Dwrite(T val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{;
  surf1Dwrite(val, surf, x, (int)sizeof(T), mode);
}


static __forceinline __declspec(__device__) void surf1Dwrite(char val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1Dwritec1(make_uchar1((unsigned char)val), surf, x, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf1Dwrite(signed char val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1Dwritec1(make_uchar1((unsigned char)val), surf, x, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf1Dwrite(unsigned char val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1Dwritec1(make_uchar1(val), surf, x, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf1Dwrite(char1 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1Dwritec1(make_uchar1((unsigned char)val.x), surf, x, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf1Dwrite(uchar1 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1Dwritec1(val, surf, x, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf1Dwrite(char2 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1Dwritec2(make_uchar2((unsigned char)val.x, (unsigned char)val.y), surf, x, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf1Dwrite(uchar2 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1Dwritec2(val, surf, x, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf1Dwrite(char4 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1Dwritec4(make_uchar4((unsigned char)val.x, (unsigned char)val.y, (unsigned char)val.z, (unsigned char)val.w), surf, x, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf1Dwrite(uchar4 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1Dwritec4(val, surf, x, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf1Dwrite(short val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1Dwrites1(make_ushort1((unsigned short)val), surf, x, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf1Dwrite(unsigned short val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1Dwrites1(make_ushort1(val), surf, x, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf1Dwrite(short1 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1Dwrites1(make_ushort1((unsigned short)val.x), surf, x, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf1Dwrite(ushort1 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1Dwrites1(val, surf, x, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf1Dwrite(short2 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1Dwrites2(make_ushort2((unsigned short)val.x, (unsigned short)val.y), surf, x, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf1Dwrite(ushort2 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1Dwrites2(val, surf, x, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf1Dwrite(short4 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1Dwrites4(make_ushort4((unsigned short)val.x, (unsigned short)val.y, (unsigned short)val.z, (unsigned short)val.w), surf, x, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf1Dwrite(ushort4 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1Dwrites4(val, surf, x, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf1Dwrite(int val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1Dwriteu1(make_uint1((unsigned int)val), surf, x, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf1Dwrite(unsigned int val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1Dwriteu1(make_uint1(val), surf, x, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf1Dwrite(int1 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1Dwriteu1(make_uint1((unsigned int)val.x), surf, x, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf1Dwrite(uint1 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1Dwriteu1(val, surf, x, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf1Dwrite(int2 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1Dwriteu2(make_uint2((unsigned int)val.x, (unsigned int)val.y), surf, x, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf1Dwrite(uint2 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1Dwriteu2(val, surf, x, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf1Dwrite(int4 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1Dwriteu4(make_uint4((unsigned int)val.x, (unsigned int)val.y, (unsigned int)val.z, (unsigned int)val.w), surf, x, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf1Dwrite(uint4 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1Dwriteu4(val, surf, x, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf1Dwrite(long long int val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1Dwritel1(make_ulonglong1((unsigned long long int)val), surf, x, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf1Dwrite(unsigned long long int val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1Dwritel1(make_ulonglong1(val), surf, x, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf1Dwrite(longlong1 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1Dwritel1(make_ulonglong1((unsigned long long int)val.x), surf, x, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf1Dwrite(ulonglong1 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1Dwritel1(val, surf, x, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf1Dwrite(longlong2 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1Dwritel2(make_ulonglong2((unsigned long long int)val.x, (unsigned long long int)val.y), surf, x, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf1Dwrite(ulonglong2 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1Dwritel2(val, surf, x, cudaBoundaryModeTrap);
}



static __forceinline __declspec(__device__) void surf1Dwrite(long int val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1Dwriteu1(make_uint1((unsigned int)val), surf, x, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf1Dwrite(unsigned long int val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1Dwriteu1(make_uint1((unsigned int)val), surf, x, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf1Dwrite(long1 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1Dwriteu1(make_uint1((unsigned int)val.x), surf, x, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf1Dwrite(ulong1 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1Dwriteu1(make_uint1((unsigned int)val.x), surf, x, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf1Dwrite(long2 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1Dwriteu2(make_uint2((unsigned int)val.x, (unsigned int)val.y), surf, x, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf1Dwrite(ulong2 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1Dwriteu2(make_uint2((unsigned int)val.x, (unsigned int)val.y), surf, x, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf1Dwrite(long4 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1Dwriteu4(make_uint4((unsigned int)val.x, (unsigned int)val.y, (unsigned int)val.z, (unsigned int)val.w), surf, x, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf1Dwrite(ulong4 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1Dwriteu4(make_uint4((unsigned int)val.x, (unsigned int)val.y, (unsigned int)val.z, (unsigned int)val.w), surf, x, cudaBoundaryModeTrap);
}

#line 2764 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\surface_functions.h"

static __forceinline __declspec(__device__) void surf1Dwrite(float val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1Dwriteu1(make_uint1((unsigned int)__float_as_int(val)), surf, x, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf1Dwrite(float1 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1Dwriteu1(make_uint1((unsigned int)__float_as_int(val.x)), surf, x, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf1Dwrite(float2 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1Dwriteu2(make_uint2((unsigned int)__float_as_int(val.x), __float_as_int((unsigned int)val.y)), surf, x, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf1Dwrite(float4 val, surface<void, 0x01> surf, int x, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1Dwriteu4(make_uint4((unsigned int)__float_as_int(val.x), (unsigned int)__float_as_int(val.y), (unsigned int)__float_as_int(val.z), (unsigned int)__float_as_int(val.w)), surf, x, cudaBoundaryModeTrap);
}









extern __declspec(__device__) __declspec(__device_builtin__) void __surf2Dwritec1(    uchar1 val, surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode);
extern __declspec(__device__) __declspec(__device_builtin__) void __surf2Dwritec2(    uchar2 val, surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode);
extern __declspec(__device__) __declspec(__device_builtin__) void __surf2Dwritec4(    uchar4 val, surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode);
extern __declspec(__device__) __declspec(__device_builtin__) void __surf2Dwrites1(   ushort1 val, surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode);
extern __declspec(__device__) __declspec(__device_builtin__) void __surf2Dwrites2(   ushort2 val, surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode);
extern __declspec(__device__) __declspec(__device_builtin__) void __surf2Dwrites4(   ushort4 val, surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode);
extern __declspec(__device__) __declspec(__device_builtin__) void __surf2Dwriteu1(     uint1 val, surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode);
extern __declspec(__device__) __declspec(__device_builtin__) void __surf2Dwriteu2(     uint2 val, surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode);
extern __declspec(__device__) __declspec(__device_builtin__) void __surf2Dwriteu4(     uint4 val, surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode);
extern __declspec(__device__) __declspec(__device_builtin__) void __surf2Dwritel1(ulonglong1 val, surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode);
extern __declspec(__device__) __declspec(__device_builtin__) void __surf2Dwritel2(ulonglong2 val, surface<void, 0x02> t, int x, int y, enum cudaSurfaceBoundaryMode mode);








#line 2813 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\surface_functions.h"




#line 2818 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\surface_functions.h"

template<class T>
static __forceinline __declspec(__device__) void surf2Dwrite(T val, surface<void, 0x02> surf, int x, int y, int s, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  union {
    T       val;
    uchar1  c1;
    ushort1 s1;
    uint1   u1;
    uint2   u2;
    uint4   u4;
  } tmp;
  
  tmp.val = val;
  
  (s ==  1) ? (void)(__surf2Dwritec1(tmp.c1, surf, x, y, cudaBoundaryModeTrap)) :
  (s ==  2) ? (void)(__surf2Dwrites1(tmp.s1, surf, x, y, cudaBoundaryModeTrap)) :
  (s ==  4) ? (void)(__surf2Dwriteu1(tmp.u1, surf, x, y, cudaBoundaryModeTrap)) :
  (s ==  8) ? (void)(__surf2Dwriteu2(tmp.u2, surf, x, y, cudaBoundaryModeTrap)) :
  (s == 16) ? (void)(__surf2Dwriteu4(tmp.u4, surf, x, y, cudaBoundaryModeTrap)) :
              (void)0;
}

template<class T>
static __forceinline __declspec(__device__) void surf2Dwrite(T val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{;
  surf2Dwrite(val, surf, x, y, (int)sizeof(T), mode);
}


static __forceinline __declspec(__device__) void surf2Dwrite(char val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2Dwritec1(make_uchar1((unsigned char)val), surf, x, y, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf2Dwrite(signed char val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2Dwritec1(make_uchar1((unsigned char)val), surf, x, y, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf2Dwrite(unsigned char val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2Dwritec1(make_uchar1(val), surf, x, y, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf2Dwrite(char1 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2Dwritec1(make_uchar1((unsigned char)val.x), surf, x, y, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf2Dwrite(uchar1 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2Dwritec1(val, surf, x, y, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf2Dwrite(char2 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2Dwritec2(make_uchar2((unsigned char)val.x, (unsigned char)val.y), surf, x, y, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf2Dwrite(uchar2 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2Dwritec2(val, surf, x, y, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf2Dwrite(char4 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2Dwritec4(make_uchar4((unsigned char)val.x, (unsigned char)val.y, (unsigned char)val.z, (unsigned char)val.w), surf, x, y, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf2Dwrite(uchar4 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2Dwritec4(val, surf, x, y, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf2Dwrite(short val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2Dwrites1(make_ushort1((unsigned short)val), surf, x, y, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf2Dwrite(unsigned short val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2Dwrites1(make_ushort1(val), surf, x, y, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf2Dwrite(short1 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2Dwrites1(make_ushort1((unsigned short)val.x), surf, x, y, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf2Dwrite(ushort1 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2Dwrites1(val, surf, x, y, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf2Dwrite(short2 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2Dwrites2(make_ushort2((unsigned short)val.x, (unsigned short)val.y), surf, x, y, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf2Dwrite(ushort2 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2Dwrites2(val, surf, x, y, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf2Dwrite(short4 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2Dwrites4(make_ushort4((unsigned short)val.x, (unsigned short)val.y, (unsigned short)val.z, (unsigned short)val.w), surf, x, y, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf2Dwrite(ushort4 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2Dwrites4(val, surf, x, y, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf2Dwrite(int val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2Dwriteu1(make_uint1((unsigned int)val), surf, x, y, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf2Dwrite(unsigned int val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2Dwriteu1(make_uint1(val), surf, x, y, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf2Dwrite(int1 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2Dwriteu1(make_uint1((unsigned int)val.x), surf, x, y, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf2Dwrite(uint1 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2Dwriteu1(val, surf, x, y, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf2Dwrite(int2 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2Dwriteu2(make_uint2((unsigned int)val.x, (unsigned int)val.y), surf, x, y, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf2Dwrite(uint2 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2Dwriteu2(val, surf, x, y, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf2Dwrite(int4 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2Dwriteu4(make_uint4((unsigned int)val.x, (unsigned int)val.y, (unsigned int)val.z, (unsigned int)val.w), surf, x, y, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf2Dwrite(uint4 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2Dwriteu4(val, surf, x, y, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf2Dwrite(long long int val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2Dwritel1(make_ulonglong1((unsigned long long int)val), surf, x, y, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf2Dwrite(unsigned long long int val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2Dwritel1(make_ulonglong1(val), surf, x, y, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf2Dwrite(longlong1 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2Dwritel1(make_ulonglong1((unsigned long long int)val.x), surf, x, y, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf2Dwrite(ulonglong1 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2Dwritel1(val, surf, x, y, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf2Dwrite(longlong2 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2Dwritel2(make_ulonglong2((unsigned long long int)val.x, (unsigned long long int)val.y), surf, x, y, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf2Dwrite(ulonglong2 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2Dwritel2(val, surf, x, y, cudaBoundaryModeTrap);
}



static __forceinline __declspec(__device__) void surf2Dwrite(long int val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2Dwriteu1(make_uint1((unsigned int)val), surf, x, y, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf2Dwrite(unsigned long int val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2Dwriteu1(make_uint1((unsigned int)val), surf, x, y, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf2Dwrite(long1 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2Dwriteu1(make_uint1((unsigned int)val.x), surf, x, y, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf2Dwrite(ulong1 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2Dwriteu1(make_uint1((unsigned int)val.x), surf, x, y, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf2Dwrite(long2 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2Dwriteu2(make_uint2((unsigned int)val.x, (unsigned int)val.y), surf, x, y, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf2Dwrite(ulong2 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2Dwriteu2(make_uint2((unsigned int)val.x, (unsigned int)val.y), surf, x, y, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf2Dwrite(long4 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2Dwriteu4(make_uint4((unsigned int)val.x, (unsigned int)val.y, (unsigned int)val.z, (unsigned int)val.w), surf, x, y, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf2Dwrite(ulong4 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2Dwriteu4(make_uint4((unsigned int)val.x, (unsigned int)val.y, (unsigned int)val.z, (unsigned int)val.w), surf, x, y, cudaBoundaryModeTrap);
}

#line 3046 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\surface_functions.h"

static __forceinline __declspec(__device__) void surf2Dwrite(float val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2Dwriteu1(make_uint1((unsigned int)__float_as_int(val)), surf, x, y, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf2Dwrite(float1 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2Dwriteu1(make_uint1((unsigned int)__float_as_int(val.x)), surf, x, y, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf2Dwrite(float2 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2Dwriteu2(make_uint2((unsigned int)__float_as_int(val.x), __float_as_int((unsigned int)val.y)), surf, x, y, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf2Dwrite(float4 val, surface<void, 0x02> surf, int x, int y, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2Dwriteu4(make_uint4((unsigned int)__float_as_int(val.x), (unsigned int)__float_as_int(val.y), (unsigned int)__float_as_int(val.z), (unsigned int)__float_as_int(val.w)), surf, x, y, cudaBoundaryModeTrap);
}









extern __declspec(__device__) __declspec(__device_builtin__) void __surf3Dwritec1(    uchar1 val, surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode);
extern __declspec(__device__) __declspec(__device_builtin__) void __surf3Dwritec2(    uchar2 val, surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode);
extern __declspec(__device__) __declspec(__device_builtin__) void __surf3Dwritec4(    uchar4 val, surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode);
extern __declspec(__device__) __declspec(__device_builtin__) void __surf3Dwrites1(   ushort1 val, surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode);
extern __declspec(__device__) __declspec(__device_builtin__) void __surf3Dwrites2(   ushort2 val, surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode);
extern __declspec(__device__) __declspec(__device_builtin__) void __surf3Dwrites4(   ushort4 val, surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode);
extern __declspec(__device__) __declspec(__device_builtin__) void __surf3Dwriteu1(     uint1 val, surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode);
extern __declspec(__device__) __declspec(__device_builtin__) void __surf3Dwriteu2(     uint2 val, surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode);
extern __declspec(__device__) __declspec(__device_builtin__) void __surf3Dwriteu4(     uint4 val, surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode);
extern __declspec(__device__) __declspec(__device_builtin__) void __surf3Dwritel1(ulonglong1 val, surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode);
extern __declspec(__device__) __declspec(__device_builtin__) void __surf3Dwritel2(ulonglong2 val, surface<void, 0x03> t, int x, int y, int z, enum cudaSurfaceBoundaryMode mode);








#line 3095 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\surface_functions.h"




#line 3100 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\surface_functions.h"

template<class T>
static __forceinline __declspec(__device__) void surf3Dwrite(T val, surface<void, 0x03> surf, int x, int y, int z, int s, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  union {
    T       val;
    uchar1  c1;
    ushort1 s1;
    uint1   u1;
    uint2   u2;
    uint4   u4;
  } tmp;
  
  tmp.val = val;
  
  (s ==  1) ? (void)(__surf3Dwritec1(tmp.c1, surf, x, y, z, cudaBoundaryModeTrap)) :
  (s ==  2) ? (void)(__surf3Dwrites1(tmp.s1, surf, x, y, z, cudaBoundaryModeTrap)) :
  (s ==  4) ? (void)(__surf3Dwriteu1(tmp.u1, surf, x, y, z, cudaBoundaryModeTrap)) :
  (s ==  8) ? (void)(__surf3Dwriteu2(tmp.u2, surf, x, y, z, cudaBoundaryModeTrap)) :
  (s == 16) ? (void)(__surf3Dwriteu4(tmp.u4, surf, x, y, z, cudaBoundaryModeTrap)) :
              (void)0;
}

template<class T>
static __forceinline __declspec(__device__) void surf3Dwrite(T val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{;
  surf3Dwrite(val, surf, x, y, z, (int)sizeof(T), mode);
}


static __forceinline __declspec(__device__) void surf3Dwrite(char val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf3Dwritec1(make_uchar1((unsigned char)val), surf, x, y, z, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf3Dwrite(signed char val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf3Dwritec1(make_uchar1((unsigned char)val), surf, x, y, z, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf3Dwrite(unsigned char val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf3Dwritec1(make_uchar1(val), surf, x, y, z, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf3Dwrite(char1 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf3Dwritec1(make_uchar1((unsigned char)val.x), surf, x, y, z, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf3Dwrite(uchar1 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf3Dwritec1(val, surf, x, y, z, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf3Dwrite(char2 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf3Dwritec2(make_uchar2((unsigned char)val.x, (unsigned char)val.y), surf, x, y, z, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf3Dwrite(uchar2 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf3Dwritec2(val, surf, x, y, z, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf3Dwrite(char4 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf3Dwritec4(make_uchar4((unsigned char)val.x, (unsigned char)val.y, (unsigned char)val.z, (unsigned char)val.w), surf, x, y, z, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf3Dwrite(uchar4 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf3Dwritec4(val, surf, x, y, z, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf3Dwrite(short val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf3Dwrites1(make_ushort1((unsigned short)val), surf, x, y, z, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf3Dwrite(unsigned short val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf3Dwrites1(make_ushort1(val), surf, x, y, z, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf3Dwrite(short1 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf3Dwrites1(make_ushort1((unsigned short)val.x), surf, x, y, z, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf3Dwrite(ushort1 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf3Dwrites1(val, surf, x, y, z, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf3Dwrite(short2 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf3Dwrites2(make_ushort2((unsigned short)val.x, (unsigned short)val.y), surf, x, y, z, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf3Dwrite(ushort2 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf3Dwrites2(val, surf, x, y, z, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf3Dwrite(short4 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf3Dwrites4(make_ushort4((unsigned short)val.x, (unsigned short)val.y, (unsigned short)val.z, (unsigned short)val.w), surf, x, y, z, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf3Dwrite(ushort4 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf3Dwrites4(val, surf, x, y, z, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf3Dwrite(int val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf3Dwriteu1(make_uint1((unsigned int)val), surf, x, y, z, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf3Dwrite(unsigned int val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf3Dwriteu1(make_uint1(val), surf, x, y, z, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf3Dwrite(int1 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf3Dwriteu1(make_uint1((unsigned int)val.x), surf, x, y, z, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf3Dwrite(uint1 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf3Dwriteu1(val, surf, x, y, z, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf3Dwrite(int2 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf3Dwriteu2(make_uint2((unsigned int)val.x, (unsigned int)val.y), surf, x, y, z, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf3Dwrite(uint2 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf3Dwriteu2(val, surf, x, y, z, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf3Dwrite(int4 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf3Dwriteu4(make_uint4((unsigned int)val.x, (unsigned int)val.y, (unsigned int)val.z, (unsigned int)val.w), surf, x, y, z, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf3Dwrite(uint4 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf3Dwriteu4(val, surf, x, y, z, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf3Dwrite(long long int val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf3Dwritel1(make_ulonglong1((unsigned long long int)val), surf, x, y, z, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf3Dwrite(unsigned long long int val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf3Dwritel1(make_ulonglong1(val), surf, x, y, z, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf3Dwrite(longlong1 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf3Dwritel1(make_ulonglong1((unsigned long long int)val.x), surf, x, y, z, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf3Dwrite(ulonglong1 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf3Dwritel1(val, surf, x, y, z, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf3Dwrite(longlong2 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf3Dwritel2(make_ulonglong2((unsigned long long int)val.x, (unsigned long long int)val.y), surf, x, y, z, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf3Dwrite(ulonglong2 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf3Dwritel2(val, surf, x, y, z, cudaBoundaryModeTrap);
}



static __forceinline __declspec(__device__) void surf3Dwrite(long int val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf3Dwriteu1(make_uint1((unsigned int)val), surf, x, y, z, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf3Dwrite(unsigned long int val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf3Dwriteu1(make_uint1((unsigned int)val), surf, x, y, z, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf3Dwrite(long1 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf3Dwriteu1(make_uint1((unsigned int)val.x), surf, x, y, z, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf3Dwrite(ulong1 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf3Dwriteu1(make_uint1((unsigned int)val.x), surf, x, y, z, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf3Dwrite(long2 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf3Dwriteu2(make_uint2((unsigned int)val.x, (unsigned int)val.y), surf, x, y, z, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf3Dwrite(ulong2 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf3Dwriteu2(make_uint2((unsigned int)val.x, (unsigned int)val.y), surf, x, y, z, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf3Dwrite(long4 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf3Dwriteu4(make_uint4((unsigned int)val.x, (unsigned int)val.y, (unsigned int)val.z, (unsigned int)val.w), surf, x, y, z, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf3Dwrite(ulong4 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf3Dwriteu4(make_uint4((unsigned int)val.x, (unsigned int)val.y, (unsigned int)val.z, (unsigned int)val.w), surf, x, y, z, cudaBoundaryModeTrap);
}

#line 3328 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\surface_functions.h"

static __forceinline __declspec(__device__) void surf3Dwrite(float val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf3Dwriteu1(make_uint1((unsigned int)__float_as_int(val)), surf, x, y, z, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf3Dwrite(float1 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf3Dwriteu1(make_uint1((unsigned int)__float_as_int(val.x)), surf, x, y, z, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf3Dwrite(float2 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf3Dwriteu2(make_uint2((unsigned int)__float_as_int(val.x), __float_as_int((unsigned int)val.y)), surf, x, y, z, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf3Dwrite(float4 val, surface<void, 0x03> surf, int x, int y, int z, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf3Dwriteu4(make_uint4((unsigned int)__float_as_int(val.x), (unsigned int)__float_as_int(val.y), (unsigned int)__float_as_int(val.z), (unsigned int)__float_as_int(val.w)), surf, x, y, z, cudaBoundaryModeTrap);
}









extern __declspec(__device__) __declspec(__device_builtin__) void __surf1DLayeredwritec1(    uchar1 val, surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode);
extern __declspec(__device__) __declspec(__device_builtin__) void __surf1DLayeredwritec2(    uchar2 val, surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode);
extern __declspec(__device__) __declspec(__device_builtin__) void __surf1DLayeredwritec4(    uchar4 val, surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode);
extern __declspec(__device__) __declspec(__device_builtin__) void __surf1DLayeredwrites1(   ushort1 val, surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode);
extern __declspec(__device__) __declspec(__device_builtin__) void __surf1DLayeredwrites2(   ushort2 val, surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode);
extern __declspec(__device__) __declspec(__device_builtin__) void __surf1DLayeredwrites4(   ushort4 val, surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode);
extern __declspec(__device__) __declspec(__device_builtin__) void __surf1DLayeredwriteu1(     uint1 val, surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode);
extern __declspec(__device__) __declspec(__device_builtin__) void __surf1DLayeredwriteu2(     uint2 val, surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode);
extern __declspec(__device__) __declspec(__device_builtin__) void __surf1DLayeredwriteu4(     uint4 val, surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode);
extern __declspec(__device__) __declspec(__device_builtin__) void __surf1DLayeredwritel1(ulonglong1 val, surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode);
extern __declspec(__device__) __declspec(__device_builtin__) void __surf1DLayeredwritel2(ulonglong2 val, surface<void, 0xF1> t, int x, int layer, enum cudaSurfaceBoundaryMode mode);








#line 3377 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\surface_functions.h"




#line 3382 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\surface_functions.h"

template<class T>
static __forceinline __declspec(__device__) void surf1DLayeredwrite(T val, surface<void, 0xF1> surf, int x, int layer, int s, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  union {
    T       val;
    uchar1  c1;
    ushort1 s1;
    uint1   u1;
    uint2   u2;
    uint4   u4;
  } tmp;
  
  tmp.val = val;
  
  (s ==  1) ? (void)(__surf1DLayeredwritec1(tmp.c1, surf, x, layer, cudaBoundaryModeTrap)) :
  (s ==  2) ? (void)(__surf1DLayeredwrites1(tmp.s1, surf, x, layer, cudaBoundaryModeTrap)) :
  (s ==  4) ? (void)(__surf1DLayeredwriteu1(tmp.u1, surf, x, layer, cudaBoundaryModeTrap)) :
  (s ==  8) ? (void)(__surf1DLayeredwriteu2(tmp.u2, surf, x, layer, cudaBoundaryModeTrap)) :
  (s == 16) ? (void)(__surf1DLayeredwriteu4(tmp.u4, surf, x, layer, cudaBoundaryModeTrap)) :
              (void)0;
}

template<class T>
static __forceinline __declspec(__device__) void surf1DLayeredwrite(T val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{;
  surf1DLayeredwrite(val, surf, x, layer, (int)sizeof(T), mode);
}


static __forceinline __declspec(__device__) void surf1DLayeredwrite(char val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1DLayeredwritec1(make_uchar1((unsigned char)val), surf, x, layer, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf1DLayeredwrite(signed char val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1DLayeredwritec1(make_uchar1((unsigned char)val), surf, x, layer, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf1DLayeredwrite(unsigned char val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1DLayeredwritec1(make_uchar1(val), surf, x, layer, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf1DLayeredwrite(char1 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1DLayeredwritec1(make_uchar1((unsigned char)val.x), surf, x, layer, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf1DLayeredwrite(uchar1 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1DLayeredwritec1(val, surf, x, layer, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf1DLayeredwrite(char2 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1DLayeredwritec2(make_uchar2((unsigned char)val.x, (unsigned char)val.y), surf, x, layer, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf1DLayeredwrite(uchar2 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1DLayeredwritec2(val, surf, x, layer, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf1DLayeredwrite(char4 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1DLayeredwritec4(make_uchar4((unsigned char)val.x, (unsigned char)val.y, (unsigned char)val.z, (unsigned char)val.w), surf, x, layer, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf1DLayeredwrite(uchar4 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1DLayeredwritec4(val, surf, x, layer, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf1DLayeredwrite(short val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1DLayeredwrites1(make_ushort1((unsigned short)val), surf, x, layer, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf1DLayeredwrite(unsigned short val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1DLayeredwrites1(make_ushort1(val), surf, x, layer, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf1DLayeredwrite(short1 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1DLayeredwrites1(make_ushort1((unsigned short)val.x), surf, x, layer, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf1DLayeredwrite(ushort1 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1DLayeredwrites1(val, surf, x, layer, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf1DLayeredwrite(short2 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1DLayeredwrites2(make_ushort2((unsigned short)val.x, (unsigned short)val.y), surf, x, layer, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf1DLayeredwrite(ushort2 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1DLayeredwrites2(val, surf, x, layer, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf1DLayeredwrite(short4 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1DLayeredwrites4(make_ushort4((unsigned short)val.x, (unsigned short)val.y, (unsigned short)val.z, (unsigned short)val.w), surf, x, layer, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf1DLayeredwrite(ushort4 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1DLayeredwrites4(val, surf, x, layer, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf1DLayeredwrite(int val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1DLayeredwriteu1(make_uint1((unsigned int)val), surf, x, layer, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf1DLayeredwrite(unsigned int val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1DLayeredwriteu1(make_uint1(val), surf, x, layer, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf1DLayeredwrite(int1 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1DLayeredwriteu1(make_uint1((unsigned int)val.x), surf, x, layer, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf1DLayeredwrite(uint1 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1DLayeredwriteu1(val, surf, x, layer, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf1DLayeredwrite(int2 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1DLayeredwriteu2(make_uint2((unsigned int)val.x, (unsigned int)val.y), surf, x, layer, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf1DLayeredwrite(uint2 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1DLayeredwriteu2(val, surf, x, layer, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf1DLayeredwrite(int4 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1DLayeredwriteu4(make_uint4((unsigned int)val.x, (unsigned int)val.y, (unsigned int)val.z, (unsigned int)val.w), surf, x, layer, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf1DLayeredwrite(uint4 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1DLayeredwriteu4(val, surf, x, layer, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf1DLayeredwrite(long long int val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1DLayeredwritel1(make_ulonglong1((unsigned long long int)val), surf, x, layer, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf1DLayeredwrite(unsigned long long int val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1DLayeredwritel1(make_ulonglong1(val), surf, x, layer, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf1DLayeredwrite(longlong1 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1DLayeredwritel1(make_ulonglong1((unsigned long long int)val.x), surf, x, layer, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf1DLayeredwrite(ulonglong1 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1DLayeredwritel1(val, surf, x, layer, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf1DLayeredwrite(longlong2 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1DLayeredwritel2(make_ulonglong2((unsigned long long int)val.x, (unsigned long long int)val.y), surf, x, layer, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf1DLayeredwrite(ulonglong2 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1DLayeredwritel2(val, surf, x, layer, cudaBoundaryModeTrap);
}



static __forceinline __declspec(__device__) void surf1DLayeredwrite(long int val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1DLayeredwriteu1(make_uint1((unsigned int)val), surf, x, layer, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf1DLayeredwrite(unsigned long int val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1DLayeredwriteu1(make_uint1((unsigned int)val), surf, x, layer, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf1DLayeredwrite(long1 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1DLayeredwriteu1(make_uint1((unsigned int)val.x), surf, x, layer, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf1DLayeredwrite(ulong1 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1DLayeredwriteu1(make_uint1((unsigned int)val.x), surf, x, layer, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf1DLayeredwrite(long2 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1DLayeredwriteu2(make_uint2((unsigned int)val.x, (unsigned int)val.y), surf, x, layer, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf1DLayeredwrite(ulong2 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1DLayeredwriteu2(make_uint2((unsigned int)val.x, (unsigned int)val.y), surf, x, layer, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf1DLayeredwrite(long4 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1DLayeredwriteu4(make_uint4((unsigned int)val.x, (unsigned int)val.y, (unsigned int)val.z, (unsigned int)val.w), surf, x, layer, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf1DLayeredwrite(ulong4 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1DLayeredwriteu4(make_uint4((unsigned int)val.x, (unsigned int)val.y, (unsigned int)val.z, (unsigned int)val.w), surf, x, layer, cudaBoundaryModeTrap);
}

#line 3610 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\surface_functions.h"

static __forceinline __declspec(__device__) void surf1DLayeredwrite(float val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1DLayeredwriteu1(make_uint1((unsigned int)__float_as_int(val)), surf, x, layer, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf1DLayeredwrite(float1 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1DLayeredwriteu1(make_uint1((unsigned int)__float_as_int(val.x)), surf, x, layer, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf1DLayeredwrite(float2 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1DLayeredwriteu2(make_uint2((unsigned int)__float_as_int(val.x), __float_as_int((unsigned int)val.y)), surf, x, layer, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf1DLayeredwrite(float4 val, surface<void, 0xF1> surf, int x, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf1DLayeredwriteu4(make_uint4((unsigned int)__float_as_int(val.x), (unsigned int)__float_as_int(val.y), (unsigned int)__float_as_int(val.z), (unsigned int)__float_as_int(val.w)), surf, x, layer, cudaBoundaryModeTrap);
}









extern __declspec(__device__) __declspec(__device_builtin__) void __surf2DLayeredwritec1(    uchar1 val, surface<void, 0xF2> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode);
extern __declspec(__device__) __declspec(__device_builtin__) void __surf2DLayeredwritec2(    uchar2 val, surface<void, 0xF2> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode);
extern __declspec(__device__) __declspec(__device_builtin__) void __surf2DLayeredwritec4(    uchar4 val, surface<void, 0xF2> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode);
extern __declspec(__device__) __declspec(__device_builtin__) void __surf2DLayeredwrites1(   ushort1 val, surface<void, 0xF2> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode);
extern __declspec(__device__) __declspec(__device_builtin__) void __surf2DLayeredwrites2(   ushort2 val, surface<void, 0xF2> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode);
extern __declspec(__device__) __declspec(__device_builtin__) void __surf2DLayeredwrites4(   ushort4 val, surface<void, 0xF2> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode);
extern __declspec(__device__) __declspec(__device_builtin__) void __surf2DLayeredwriteu1(     uint1 val, surface<void, 0xF2> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode);
extern __declspec(__device__) __declspec(__device_builtin__) void __surf2DLayeredwriteu2(     uint2 val, surface<void, 0xF2> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode);
extern __declspec(__device__) __declspec(__device_builtin__) void __surf2DLayeredwriteu4(     uint4 val, surface<void, 0xF2> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode);
extern __declspec(__device__) __declspec(__device_builtin__) void __surf2DLayeredwritel1(ulonglong1 val, surface<void, 0xF2> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode);
extern __declspec(__device__) __declspec(__device_builtin__) void __surf2DLayeredwritel2(ulonglong2 val, surface<void, 0xF2> t, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode);








#line 3659 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\surface_functions.h"




#line 3664 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\surface_functions.h"

template<class T>
static __forceinline __declspec(__device__) void surf2DLayeredwrite(T val, surface<void, 0xF2> surf, int x, int y, int layer, int s, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  union {
    T       val;
    uchar1  c1;
    ushort1 s1;
    uint1   u1;
    uint2   u2;
    uint4   u4;
  } tmp;
  
  tmp.val = val;
  
  (s ==  1) ? (void)(__surf2DLayeredwritec1(tmp.c1, surf, x, y, layer, cudaBoundaryModeTrap)) :
  (s ==  2) ? (void)(__surf2DLayeredwrites1(tmp.s1, surf, x, y, layer, cudaBoundaryModeTrap)) :
  (s ==  4) ? (void)(__surf2DLayeredwriteu1(tmp.u1, surf, x, y, layer, cudaBoundaryModeTrap)) :
  (s ==  8) ? (void)(__surf2DLayeredwriteu2(tmp.u2, surf, x, y, layer, cudaBoundaryModeTrap)) :
  (s == 16) ? (void)(__surf2DLayeredwriteu4(tmp.u4, surf, x, y, layer, cudaBoundaryModeTrap)) :
              (void)0;
}

template<class T>
static __forceinline __declspec(__device__) void surf2DLayeredwrite(T val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{;
  surf2DLayeredwrite(val, surf, x, y, layer, (int)sizeof(T), mode);
}


static __forceinline __declspec(__device__) void surf2DLayeredwrite(char val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2DLayeredwritec1(make_uchar1((unsigned char)val), surf, x, y, layer, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf2DLayeredwrite(signed char val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2DLayeredwritec1(make_uchar1((unsigned char)val), surf, x, y, layer, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf2DLayeredwrite(unsigned char val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2DLayeredwritec1(make_uchar1(val), surf, x, y, layer, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf2DLayeredwrite(char1 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2DLayeredwritec1(make_uchar1((unsigned char)val.x), surf, x, y, layer, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf2DLayeredwrite(uchar1 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2DLayeredwritec1(val, surf, x, y, layer, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf2DLayeredwrite(char2 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2DLayeredwritec2(make_uchar2((unsigned char)val.x, (unsigned char)val.y), surf, x, y, layer, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf2DLayeredwrite(uchar2 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2DLayeredwritec2(val, surf, x, y, layer, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf2DLayeredwrite(char4 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2DLayeredwritec4(make_uchar4((unsigned char)val.x, (unsigned char)val.y, (unsigned char)val.z, (unsigned char)val.w), surf, x, y, layer, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf2DLayeredwrite(uchar4 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2DLayeredwritec4(val, surf, x, y, layer, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf2DLayeredwrite(short val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2DLayeredwrites1(make_ushort1((unsigned short)val), surf, x, y, layer, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf2DLayeredwrite(unsigned short val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2DLayeredwrites1(make_ushort1(val), surf, x, y, layer, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf2DLayeredwrite(short1 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2DLayeredwrites1(make_ushort1((unsigned short)val.x), surf, x, y, layer, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf2DLayeredwrite(ushort1 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2DLayeredwrites1(val, surf, x, y, layer, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf2DLayeredwrite(short2 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2DLayeredwrites2(make_ushort2((unsigned short)val.x, (unsigned short)val.y), surf, x, y, layer, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf2DLayeredwrite(ushort2 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2DLayeredwrites2(val, surf, x, y, layer, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf2DLayeredwrite(short4 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2DLayeredwrites4(make_ushort4((unsigned short)val.x, (unsigned short)val.y, (unsigned short)val.z, (unsigned short)val.w), surf, x, y, layer, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf2DLayeredwrite(ushort4 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2DLayeredwrites4(val, surf, x, y, layer, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf2DLayeredwrite(int val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2DLayeredwriteu1(make_uint1((unsigned int)val), surf, x, y, layer, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf2DLayeredwrite(unsigned int val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2DLayeredwriteu1(make_uint1(val), surf, x, y, layer, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf2DLayeredwrite(int1 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2DLayeredwriteu1(make_uint1((unsigned int)val.x), surf, x, y, layer, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf2DLayeredwrite(uint1 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2DLayeredwriteu1(val, surf, x, y, layer, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf2DLayeredwrite(int2 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2DLayeredwriteu2(make_uint2((unsigned int)val.x, (unsigned int)val.y), surf, x, y, layer, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf2DLayeredwrite(uint2 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2DLayeredwriteu2(val, surf, x, y, layer, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf2DLayeredwrite(int4 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2DLayeredwriteu4(make_uint4((unsigned int)val.x, (unsigned int)val.y, (unsigned int)val.z, (unsigned int)val.w), surf, x, y, layer, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf2DLayeredwrite(uint4 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2DLayeredwriteu4(val, surf, x, y, layer, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf2DLayeredwrite(long long int val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2DLayeredwritel1(make_ulonglong1((unsigned long long int)val), surf, x, y, layer, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf2DLayeredwrite(unsigned long long int val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2DLayeredwritel1(make_ulonglong1(val), surf, x, y, layer, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf2DLayeredwrite(longlong1 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2DLayeredwritel1(make_ulonglong1((unsigned long long int)val.x), surf, x, y, layer, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf2DLayeredwrite(ulonglong1 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2DLayeredwritel1(val, surf, x, y, layer, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf2DLayeredwrite(longlong2 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2DLayeredwritel2(make_ulonglong2((unsigned long long int)val.x, (unsigned long long int)val.y), surf, x, y, layer, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf2DLayeredwrite(ulonglong2 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2DLayeredwritel2(val, surf, x, y, layer, cudaBoundaryModeTrap);
}



static __forceinline __declspec(__device__) void surf2DLayeredwrite(long int val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2DLayeredwriteu1(make_uint1((unsigned int)val), surf, x, y, layer, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf2DLayeredwrite(unsigned long int val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2DLayeredwriteu1(make_uint1((unsigned int)val), surf, x, y, layer, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf2DLayeredwrite(long1 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2DLayeredwriteu1(make_uint1((unsigned int)val.x), surf, x, y, layer, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf2DLayeredwrite(ulong1 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2DLayeredwriteu1(make_uint1((unsigned int)val.x), surf, x, y, layer, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf2DLayeredwrite(long2 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2DLayeredwriteu2(make_uint2((unsigned int)val.x, (unsigned int)val.y), surf, x, y, layer, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf2DLayeredwrite(ulong2 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2DLayeredwriteu2(make_uint2((unsigned int)val.x, (unsigned int)val.y), surf, x, y, layer, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf2DLayeredwrite(long4 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2DLayeredwriteu4(make_uint4((unsigned int)val.x, (unsigned int)val.y, (unsigned int)val.z, (unsigned int)val.w), surf, x, y, layer, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf2DLayeredwrite(ulong4 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2DLayeredwriteu4(make_uint4((unsigned int)val.x, (unsigned int)val.y, (unsigned int)val.z, (unsigned int)val.w), surf, x, y, layer, cudaBoundaryModeTrap);
}

#line 3892 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\surface_functions.h"

static __forceinline __declspec(__device__) void surf2DLayeredwrite(float val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2DLayeredwriteu1(make_uint1((unsigned int)__float_as_int(val)), surf, x, y, layer, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf2DLayeredwrite(float1 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2DLayeredwriteu1(make_uint1((unsigned int)__float_as_int(val.x)), surf, x, y, layer, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf2DLayeredwrite(float2 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2DLayeredwriteu2(make_uint2((unsigned int)__float_as_int(val.x), __float_as_int((unsigned int)val.y)), surf, x, y, layer, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surf2DLayeredwrite(float4 val, surface<void, 0xF2> surf, int x, int y, int layer, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surf2DLayeredwriteu4(make_uint4((unsigned int)__float_as_int(val.x), (unsigned int)__float_as_int(val.y), (unsigned int)__float_as_int(val.z), (unsigned int)__float_as_int(val.w)), surf, x, y, layer, cudaBoundaryModeTrap);
}








extern __declspec(__device__) __declspec(__device_builtin__) void __surfCubemapwritec1(    uchar1 val, surface<void, 0x0C> t, int x, int y, int face, enum cudaSurfaceBoundaryMode mode);
extern __declspec(__device__) __declspec(__device_builtin__) void __surfCubemapwritec2(    uchar2 val, surface<void, 0x0C> t, int x, int y, int face, enum cudaSurfaceBoundaryMode mode);
extern __declspec(__device__) __declspec(__device_builtin__) void __surfCubemapwritec4(    uchar4 val, surface<void, 0x0C> t, int x, int y, int face, enum cudaSurfaceBoundaryMode mode);
extern __declspec(__device__) __declspec(__device_builtin__) void __surfCubemapwrites1(   ushort1 val, surface<void, 0x0C> t, int x, int y, int face, enum cudaSurfaceBoundaryMode mode);
extern __declspec(__device__) __declspec(__device_builtin__) void __surfCubemapwrites2(   ushort2 val, surface<void, 0x0C> t, int x, int y, int face, enum cudaSurfaceBoundaryMode mode);
extern __declspec(__device__) __declspec(__device_builtin__) void __surfCubemapwrites4(   ushort4 val, surface<void, 0x0C> t, int x, int y, int face, enum cudaSurfaceBoundaryMode mode);
extern __declspec(__device__) __declspec(__device_builtin__) void __surfCubemapwriteu1(     uint1 val, surface<void, 0x0C> t, int x, int y, int face, enum cudaSurfaceBoundaryMode mode);
extern __declspec(__device__) __declspec(__device_builtin__) void __surfCubemapwriteu2(     uint2 val, surface<void, 0x0C> t, int x, int y, int face, enum cudaSurfaceBoundaryMode mode);
extern __declspec(__device__) __declspec(__device_builtin__) void __surfCubemapwriteu4(     uint4 val, surface<void, 0x0C> t, int x, int y, int face, enum cudaSurfaceBoundaryMode mode);
extern __declspec(__device__) __declspec(__device_builtin__) void __surfCubemapwritel1(ulonglong1 val, surface<void, 0x0C> t, int x, int y, int face, enum cudaSurfaceBoundaryMode mode);
extern __declspec(__device__) __declspec(__device_builtin__) void __surfCubemapwritel2(ulonglong2 val, surface<void, 0x0C> t, int x, int y, int face, enum cudaSurfaceBoundaryMode mode);








#line 3940 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\surface_functions.h"





#line 3946 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\surface_functions.h"

template<class T>
static __forceinline __declspec(__device__) void surfCubemapwrite(T val, surface<void, 0x0C> surf, int x, int y, int face, int s, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  union {
    T       val;
    uchar1  c1;
    ushort1 s1;
    uint1   u1;
    uint2   u2;
    uint4   u4;
  } tmp;
  
  tmp.val = val;
  
  (s ==  1) ? (void)(__surfCubemapwritec1(tmp.c1, surf, x, y, face, cudaBoundaryModeTrap)) :
  (s ==  2) ? (void)(__surfCubemapwrites1(tmp.s1, surf, x, y, face, cudaBoundaryModeTrap)) :
  (s ==  4) ? (void)(__surfCubemapwriteu1(tmp.u1, surf, x, y, face, cudaBoundaryModeTrap)) :
  (s ==  8) ? (void)(__surfCubemapwriteu2(tmp.u2, surf, x, y, face, cudaBoundaryModeTrap)) :
  (s == 16) ? (void)(__surfCubemapwriteu4(tmp.u4, surf, x, y, face, cudaBoundaryModeTrap)) :
              (void)0;
}

template<class T>
static __forceinline __declspec(__device__) void surfCubemapwrite(T val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{;
  surfCubemapwrite(val, surf, x, y, face, (int)sizeof(T), mode);
}


static __forceinline __declspec(__device__) void surfCubemapwrite(char val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapwritec1(make_uchar1((unsigned char)val), surf, x, y, face, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surfCubemapwrite(signed char val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapwritec1(make_uchar1((unsigned char)val), surf, x, y, face, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surfCubemapwrite(unsigned char val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapwritec1(make_uchar1(val), surf, x, y, face, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surfCubemapwrite(char1 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapwritec1(make_uchar1((unsigned char)val.x), surf, x, y, face, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surfCubemapwrite(uchar1 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapwritec1(val, surf, x, y, face, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surfCubemapwrite(char2 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapwritec2(make_uchar2((unsigned char)val.x, (unsigned char)val.y), surf, x, y, face, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surfCubemapwrite(uchar2 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapwritec2(val, surf, x, y, face, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surfCubemapwrite(char4 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapwritec4(make_uchar4((unsigned char)val.x, (unsigned char)val.y, (unsigned char)val.z, (unsigned char)val.w), surf, x, y, face, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surfCubemapwrite(uchar4 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapwritec4(val, surf, x, y, face, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surfCubemapwrite(short val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapwrites1(make_ushort1((unsigned short)val), surf, x, y, face, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surfCubemapwrite(unsigned short val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapwrites1(make_ushort1(val), surf, x, y, face, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surfCubemapwrite(short1 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapwrites1(make_ushort1((unsigned short)val.x), surf, x, y, face, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surfCubemapwrite(ushort1 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapwrites1(val, surf, x, y, face, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surfCubemapwrite(short2 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapwrites2(make_ushort2((unsigned short)val.x, (unsigned short)val.y), surf, x, y, face, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surfCubemapwrite(ushort2 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapwrites2(val, surf, x, y, face, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surfCubemapwrite(short4 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapwrites4(make_ushort4((unsigned short)val.x, (unsigned short)val.y, (unsigned short)val.z, (unsigned short)val.w), surf, x, y, face, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surfCubemapwrite(ushort4 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapwrites4(val, surf, x, y, face, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surfCubemapwrite(int val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapwriteu1(make_uint1((unsigned int)val), surf, x, y, face, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surfCubemapwrite(unsigned int val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapwriteu1(make_uint1(val), surf, x, y, face, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surfCubemapwrite(int1 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapwriteu1(make_uint1((unsigned int)val.x), surf, x, y, face, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surfCubemapwrite(uint1 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapwriteu1(val, surf, x, y, face, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surfCubemapwrite(int2 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapwriteu2(make_uint2((unsigned int)val.x, (unsigned int)val.y), surf, x, y, face, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surfCubemapwrite(uint2 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapwriteu2(val, surf, x, y, face, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surfCubemapwrite(int4 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapwriteu4(make_uint4((unsigned int)val.x, (unsigned int)val.y, (unsigned int)val.z, (unsigned int)val.w), surf, x, y, face, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surfCubemapwrite(uint4 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapwriteu4(val, surf, x, y, face, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surfCubemapwrite(long long int val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapwritel1(make_ulonglong1((unsigned long long int)val), surf, x, y, face, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surfCubemapwrite(unsigned long long int val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapwritel1(make_ulonglong1(val), surf, x, y, face, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surfCubemapwrite(longlong1 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapwritel1(make_ulonglong1((unsigned long long int)val.x), surf, x, y, face, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surfCubemapwrite(ulonglong1 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapwritel1(val, surf, x, y, face, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surfCubemapwrite(longlong2 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapwritel2(make_ulonglong2((unsigned long long int)val.x, (unsigned long long int)val.y), surf, x, y, face, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surfCubemapwrite(ulonglong2 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapwritel2(val, surf, x, y, face, cudaBoundaryModeTrap);
}



static __forceinline __declspec(__device__) void surfCubemapwrite(long int val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapwriteu1(make_uint1((unsigned int)val), surf, x, y, face, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surfCubemapwrite(unsigned long int val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapwriteu1(make_uint1((unsigned int)val), surf, x, y, face, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surfCubemapwrite(long1 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapwriteu1(make_uint1((unsigned int)val.x), surf, x, y, face, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surfCubemapwrite(ulong1 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapwriteu1(make_uint1((unsigned int)val.x), surf, x, y, face, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surfCubemapwrite(long2 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapwriteu2(make_uint2((unsigned int)val.x, (unsigned int)val.y), surf, x, y, face, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surfCubemapwrite(ulong2 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapwriteu2(make_uint2((unsigned int)val.x, (unsigned int)val.y), surf, x, y, face, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surfCubemapwrite(long4 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapwriteu4(make_uint4((unsigned int)val.x, (unsigned int)val.y, (unsigned int)val.z, (unsigned int)val.w), surf, x, y, face, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surfCubemapwrite(ulong4 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapwriteu4(make_uint4((unsigned int)val.x, (unsigned int)val.y, (unsigned int)val.z, (unsigned int)val.w), surf, x, y, face, cudaBoundaryModeTrap);
}

#line 4174 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\surface_functions.h"

static __forceinline __declspec(__device__) void surfCubemapwrite(float val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapwriteu1(make_uint1((unsigned int)__float_as_int(val)), surf, x, y, face, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surfCubemapwrite(float1 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapwriteu1(make_uint1((unsigned int)__float_as_int(val.x)), surf, x, y, face, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surfCubemapwrite(float2 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapwriteu2(make_uint2((unsigned int)__float_as_int(val.x), __float_as_int((unsigned int)val.y)), surf, x, y, face, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surfCubemapwrite(float4 val, surface<void, 0x0C> surf, int x, int y, int face, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapwriteu4(make_uint4((unsigned int)__float_as_int(val.x), (unsigned int)__float_as_int(val.y), (unsigned int)__float_as_int(val.z), (unsigned int)__float_as_int(val.w)), surf, x, y, face, cudaBoundaryModeTrap);
}








extern __declspec(__device__) __declspec(__device_builtin__) void __surfCubemapLayeredwritec1(    uchar1 val, surface<void, 0xFC> t, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode);
extern __declspec(__device__) __declspec(__device_builtin__) void __surfCubemapLayeredwritec2(    uchar2 val, surface<void, 0xFC> t, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode);
extern __declspec(__device__) __declspec(__device_builtin__) void __surfCubemapLayeredwritec4(    uchar4 val, surface<void, 0xFC> t, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode);
extern __declspec(__device__) __declspec(__device_builtin__) void __surfCubemapLayeredwrites1(   ushort1 val, surface<void, 0xFC> t, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode);
extern __declspec(__device__) __declspec(__device_builtin__) void __surfCubemapLayeredwrites2(   ushort2 val, surface<void, 0xFC> t, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode);
extern __declspec(__device__) __declspec(__device_builtin__) void __surfCubemapLayeredwrites4(   ushort4 val, surface<void, 0xFC> t, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode);
extern __declspec(__device__) __declspec(__device_builtin__) void __surfCubemapLayeredwriteu1(     uint1 val, surface<void, 0xFC> t, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode);
extern __declspec(__device__) __declspec(__device_builtin__) void __surfCubemapLayeredwriteu2(     uint2 val, surface<void, 0xFC> t, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode);
extern __declspec(__device__) __declspec(__device_builtin__) void __surfCubemapLayeredwriteu4(     uint4 val, surface<void, 0xFC> t, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode);
extern __declspec(__device__) __declspec(__device_builtin__) void __surfCubemapLayeredwritel1(ulonglong1 val, surface<void, 0xFC> t, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode);
extern __declspec(__device__) __declspec(__device_builtin__) void __surfCubemapLayeredwritel2(ulonglong2 val, surface<void, 0xFC> t, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode);








#line 4222 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\surface_functions.h"





#line 4228 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\surface_functions.h"

template<class T>
static __forceinline __declspec(__device__) void surfCubemapLayeredwrite(T val, surface<void, 0xFC> surf, int x, int y, int layerFace, int s, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  union {
    T       val;
    uchar1  c1;
    ushort1 s1;
    uint1   u1;
    uint2   u2;
    uint4   u4;
  } tmp;
  
  tmp.val = val;
  
  (s ==  1) ? (void)(__surfCubemapLayeredwritec1(tmp.c1, surf, x, y, layerFace, cudaBoundaryModeTrap)) :
  (s ==  2) ? (void)(__surfCubemapLayeredwrites1(tmp.s1, surf, x, y, layerFace, cudaBoundaryModeTrap)) :
  (s ==  4) ? (void)(__surfCubemapLayeredwriteu1(tmp.u1, surf, x, y, layerFace, cudaBoundaryModeTrap)) :
  (s ==  8) ? (void)(__surfCubemapLayeredwriteu2(tmp.u2, surf, x, y, layerFace, cudaBoundaryModeTrap)) :
  (s == 16) ? (void)(__surfCubemapLayeredwriteu4(tmp.u4, surf, x, y, layerFace, cudaBoundaryModeTrap)) :
              (void)0;
}

template<class T>
static __forceinline __declspec(__device__) void surfCubemapLayeredwrite(T val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{;
  surfCubemapLayeredwrite(val, surf, x, y, layerFace, (int)sizeof(T), mode);
}


static __forceinline __declspec(__device__) void surfCubemapLayeredwrite(char val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapLayeredwritec1(make_uchar1((unsigned char)val), surf, x, y, layerFace, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surfCubemapLayeredwrite(signed char val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapLayeredwritec1(make_uchar1((unsigned char)val), surf, x, y, layerFace, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surfCubemapLayeredwrite(unsigned char val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapLayeredwritec1(make_uchar1(val), surf, x, y, layerFace, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surfCubemapLayeredwrite(char1 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapLayeredwritec1(make_uchar1((unsigned char)val.x), surf, x, y, layerFace, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surfCubemapLayeredwrite(uchar1 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapLayeredwritec1(val, surf, x, y, layerFace, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surfCubemapLayeredwrite(char2 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapLayeredwritec2(make_uchar2((unsigned char)val.x, (unsigned char)val.y), surf, x, y, layerFace, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surfCubemapLayeredwrite(uchar2 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapLayeredwritec2(val, surf, x, y, layerFace, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surfCubemapLayeredwrite(char4 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapLayeredwritec4(make_uchar4((unsigned char)val.x, (unsigned char)val.y, (unsigned char)val.z, (unsigned char)val.w), surf, x, y, layerFace, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surfCubemapLayeredwrite(uchar4 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapLayeredwritec4(val, surf, x, y, layerFace, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surfCubemapLayeredwrite(short val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapLayeredwrites1(make_ushort1((unsigned short)val), surf, x, y, layerFace, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surfCubemapLayeredwrite(unsigned short val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapLayeredwrites1(make_ushort1(val), surf, x, y, layerFace, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surfCubemapLayeredwrite(short1 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapLayeredwrites1(make_ushort1((unsigned short)val.x), surf, x, y, layerFace, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surfCubemapLayeredwrite(ushort1 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapLayeredwrites1(val, surf, x, y, layerFace, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surfCubemapLayeredwrite(short2 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapLayeredwrites2(make_ushort2((unsigned short)val.x, (unsigned short)val.y), surf, x, y, layerFace, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surfCubemapLayeredwrite(ushort2 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapLayeredwrites2(val, surf, x, y, layerFace, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surfCubemapLayeredwrite(short4 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapLayeredwrites4(make_ushort4((unsigned short)val.x, (unsigned short)val.y, (unsigned short)val.z, (unsigned short)val.w), surf, x, y, layerFace, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surfCubemapLayeredwrite(ushort4 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapLayeredwrites4(val, surf, x, y, layerFace, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surfCubemapLayeredwrite(int val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapLayeredwriteu1(make_uint1((unsigned int)val), surf, x, y, layerFace, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surfCubemapLayeredwrite(unsigned int val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapLayeredwriteu1(make_uint1(val), surf, x, y, layerFace, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surfCubemapLayeredwrite(int1 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapLayeredwriteu1(make_uint1((unsigned int)val.x), surf, x, y, layerFace, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surfCubemapLayeredwrite(uint1 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapLayeredwriteu1(val, surf, x, y, layerFace, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surfCubemapLayeredwrite(int2 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapLayeredwriteu2(make_uint2((unsigned int)val.x, (unsigned int)val.y), surf, x, y, layerFace, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surfCubemapLayeredwrite(uint2 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapLayeredwriteu2(val, surf, x, y, layerFace, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surfCubemapLayeredwrite(int4 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapLayeredwriteu4(make_uint4((unsigned int)val.x, (unsigned int)val.y, (unsigned int)val.z, (unsigned int)val.w), surf, x, y, layerFace, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surfCubemapLayeredwrite(uint4 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapLayeredwriteu4(val, surf, x, y, layerFace, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surfCubemapLayeredwrite(long long int val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapLayeredwritel1(make_ulonglong1((unsigned long long int)val), surf, x, y, layerFace, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surfCubemapLayeredwrite(unsigned long long int val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapLayeredwritel1(make_ulonglong1(val), surf, x, y, layerFace, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surfCubemapLayeredwrite(longlong1 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapLayeredwritel1(make_ulonglong1((unsigned long long int)val.x), surf, x, y, layerFace, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surfCubemapLayeredwrite(ulonglong1 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapLayeredwritel1(val, surf, x, y, layerFace, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surfCubemapLayeredwrite(longlong2 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapLayeredwritel2(make_ulonglong2((unsigned long long int)val.x, (unsigned long long int)val.y), surf, x, y, layerFace, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surfCubemapLayeredwrite(ulonglong2 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapLayeredwritel2(val, surf, x, y, layerFace, cudaBoundaryModeTrap);
}



static __forceinline __declspec(__device__) void surfCubemapLayeredwrite(long int val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapLayeredwriteu1(make_uint1((unsigned int)val), surf, x, y, layerFace, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surfCubemapLayeredwrite(unsigned long int val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapLayeredwriteu1(make_uint1((unsigned int)val), surf, x, y, layerFace, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surfCubemapLayeredwrite(long1 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapLayeredwriteu1(make_uint1((unsigned int)val.x), surf, x, y, layerFace, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surfCubemapLayeredwrite(ulong1 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapLayeredwriteu1(make_uint1((unsigned int)val.x), surf, x, y, layerFace, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surfCubemapLayeredwrite(long2 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapLayeredwriteu2(make_uint2((unsigned int)val.x, (unsigned int)val.y), surf, x, y, layerFace, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surfCubemapLayeredwrite(ulong2 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapLayeredwriteu2(make_uint2((unsigned int)val.x, (unsigned int)val.y), surf, x, y, layerFace, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surfCubemapLayeredwrite(long4 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapLayeredwriteu4(make_uint4((unsigned int)val.x, (unsigned int)val.y, (unsigned int)val.z, (unsigned int)val.w), surf, x, y, layerFace, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surfCubemapLayeredwrite(ulong4 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapLayeredwriteu4(make_uint4((unsigned int)val.x, (unsigned int)val.y, (unsigned int)val.z, (unsigned int)val.w), surf, x, y, layerFace, cudaBoundaryModeTrap);
}

#line 4456 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\surface_functions.h"

static __forceinline __declspec(__device__) void surfCubemapLayeredwrite(float val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapLayeredwriteu1(make_uint1((unsigned int)__float_as_int(val)), surf, x, y, layerFace, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surfCubemapLayeredwrite(float1 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapLayeredwriteu1(make_uint1((unsigned int)__float_as_int(val.x)), surf, x, y, layerFace, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surfCubemapLayeredwrite(float2 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapLayeredwriteu2(make_uint2((unsigned int)__float_as_int(val.x), __float_as_int((unsigned int)val.y)), surf, x, y, layerFace, cudaBoundaryModeTrap);
}

static __forceinline __declspec(__device__) void surfCubemapLayeredwrite(float4 val, surface<void, 0xFC> surf, int x, int y, int layerFace, enum cudaSurfaceBoundaryMode mode = cudaBoundaryModeTrap)
{
  __surfCubemapLayeredwriteu4(make_uint4((unsigned int)__float_as_int(val.x), (unsigned int)__float_as_int(val.y), (unsigned int)__float_as_int(val.z), (unsigned int)__float_as_int(val.w)), surf, x, y, layerFace, cudaBoundaryModeTrap);
}


























































































































































































































































































#line 4759 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\surface_functions.h"

#line 4761 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\surface_functions.h"

#line 9416 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\device_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_fetch_functions.h"




























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\builtin_types.h"























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\device_types.h"




































































#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\device_types.h"
#line 57 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\driver_types.h"




































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1414 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\driver_types.h"

#line 58 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\surface_types.h"






















































































































#line 120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\surface_types.h"
#line 59 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_types.h"




















































































































































































































#line 214 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_types.h"
#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\vector_types.h"












































































































































































































































































































































































































































#line 430 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\vector_types.h"
#line 61 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\builtin_types.h"
#line 62 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_fetch_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\cuda_texture_types.h"









































































































#line 107 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\cuda_texture_types.h"
#line 63 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_fetch_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\host_defines.h"












































































































































































































#line 206 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\host_defines.h"
#line 64 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_fetch_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_types.h"




















































































































































































































#line 214 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_types.h"
#line 65 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_fetch_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\vector_functions.h"




















































































































































































































































































































#line 310 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\vector_functions.h"
#line 66 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_fetch_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\vector_types.h"












































































































































































































































































































































































































































#line 430 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\vector_types.h"
#line 67 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_fetch_functions.h"







template<class T, enum cudaTextureReadMode readMode> extern __declspec(__device__) __declspec(__device_builtin__)  uint4 __utexfetchi(texture<T, 0x01, readMode> t, int4 i);
template<class T, enum cudaTextureReadMode readMode> extern __declspec(__device__) __declspec(__device_builtin__)   int4 __itexfetchi(texture<T, 0x01, readMode> t, int4 i);
template<class T, enum cudaTextureReadMode readMode> extern __declspec(__device__) __declspec(__device_builtin__) float4 __ftexfetchi(texture<T, 0x01, readMode> t, int4 i);
template<class T, int texType, enum cudaTextureReadMode readMode> extern __declspec(__device__) __declspec(__device_builtin__)  uint4 __utexfetch(texture<T, texType, readMode> t, float4 i, int d = texType);
template<class T, int texType, enum cudaTextureReadMode readMode> extern __declspec(__device__) __declspec(__device_builtin__)   int4 __itexfetch(texture<T, texType, readMode> t, float4 i, int d = texType);
template<class T, int texType, enum cudaTextureReadMode readMode> extern __declspec(__device__) __declspec(__device_builtin__) float4 __ftexfetch(texture<T, texType, readMode> t, float4 i, int d = texType);
template<class T, int texType, enum cudaTextureReadMode readMode> extern __declspec(__device__) __declspec(__device_builtin__)  uint4 __utexfetchc(texture<T, texType, readMode> t, float4 i);
template<class T, int texType, enum cudaTextureReadMode readMode> extern __declspec(__device__) __declspec(__device_builtin__)   int4 __itexfetchc(texture<T, texType, readMode> t, float4 i);
template<class T, int texType, enum cudaTextureReadMode readMode> extern __declspec(__device__) __declspec(__device_builtin__) float4 __ftexfetchc(texture<T, texType, readMode> t, float4 i);
template<class T, int texType, enum cudaTextureReadMode readMode> extern __declspec(__device__) __declspec(__device_builtin__)  uint4 __utexfetchl(texture<T, texType, readMode> t, float4 i, int l, int d = (texType & 0xF));
template<class T, int texType, enum cudaTextureReadMode readMode> extern __declspec(__device__) __declspec(__device_builtin__)   int4 __itexfetchl(texture<T, texType, readMode> t, float4 i, int l, int d = (texType & 0xF));
template<class T, int texType, enum cudaTextureReadMode readMode> extern __declspec(__device__) __declspec(__device_builtin__) float4 __ftexfetchl(texture<T, texType, readMode> t, float4 i, int l, int d = (texType & 0xF));
template<class T, int texType, enum cudaTextureReadMode readMode> extern __declspec(__device__) __declspec(__device_builtin__)  uint4 __utexfetchlc(texture<T, texType, readMode> t, float4 i, int l);
template<class T, int texType, enum cudaTextureReadMode readMode> extern __declspec(__device__) __declspec(__device_builtin__)   int4 __itexfetchlc(texture<T, texType, readMode> t, float4 i, int l);
template<class T, int texType, enum cudaTextureReadMode readMode> extern __declspec(__device__) __declspec(__device_builtin__) float4 __ftexfetchlc(texture<T, texType, readMode> t, float4 i, int l);







static __forceinline __declspec(__device__) char tex1Dfetch(texture<char, 0x01, cudaReadModeElementType> t, int x)
{


#line 101 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_fetch_functions.h"
  int4 v  = __itexfetchi(t, make_int4(x, 0, 0, 0));
#line 103 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_fetch_functions.h"

  return (char)v.x;
}

static __forceinline __declspec(__device__) signed char tex1Dfetch(texture<signed char, 0x01, cudaReadModeElementType> t, int x)
{
  int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0));

  return (signed char)v.x;
}

static __forceinline __declspec(__device__) unsigned char tex1Dfetch(texture<unsigned char, 0x01, cudaReadModeElementType> t, int x)
{
  uint4 v = __utexfetchi(t, make_int4(x, 0, 0, 0));

  return (unsigned char)v.x;
}

static __forceinline __declspec(__device__) char1 tex1Dfetch(texture<char1, 0x01, cudaReadModeElementType> t, int x)
{
  int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0));

  return make_char1(v.x);
}

static __forceinline __declspec(__device__) uchar1 tex1Dfetch(texture<uchar1, 0x01, cudaReadModeElementType> t, int x)
{
  uint4 v = __utexfetchi(t, make_int4(x, 0, 0, 0));

  return make_uchar1(v.x);
}

static __forceinline __declspec(__device__) char2 tex1Dfetch(texture<char2, 0x01, cudaReadModeElementType> t, int x)
{
  int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0));

  return make_char2(v.x, v.y);
}

static __forceinline __declspec(__device__) uchar2 tex1Dfetch(texture<uchar2, 0x01, cudaReadModeElementType> t, int x)
{
  uint4 v = __utexfetchi(t, make_int4(x, 0, 0, 0));

  return make_uchar2(v.x, v.y);
}

static __forceinline __declspec(__device__) char4 tex1Dfetch(texture<char4, 0x01, cudaReadModeElementType> t, int x)
{
  int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0));

  return make_char4(v.x, v.y, v.z, v.w);
}

static __forceinline __declspec(__device__) uchar4 tex1Dfetch(texture<uchar4, 0x01, cudaReadModeElementType> t, int x)
{
  uint4 v = __utexfetchi(t, make_int4(x, 0, 0, 0));

  return make_uchar4(v.x, v.y, v.z, v.w);
}







static __forceinline __declspec(__device__) short tex1Dfetch(texture<short, 0x01, cudaReadModeElementType> t, int x)
{
  int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0));

  return (short)v.x;
}

static __forceinline __declspec(__device__) unsigned short tex1Dfetch(texture<unsigned short, 0x01, cudaReadModeElementType> t, int x)
{
  uint4 v = __utexfetchi(t, make_int4(x, 0, 0, 0));

  return (unsigned short)v.x;
}

static __forceinline __declspec(__device__) short1 tex1Dfetch(texture<short1, 0x01, cudaReadModeElementType> t, int x)
{
  int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0));

  return make_short1(v.x);
}

static __forceinline __declspec(__device__) ushort1 tex1Dfetch(texture<ushort1, 0x01, cudaReadModeElementType> t, int x)
{
  uint4 v = __utexfetchi(t, make_int4(x, 0, 0, 0));

  return make_ushort1(v.x);
}

static __forceinline __declspec(__device__) short2 tex1Dfetch(texture<short2, 0x01, cudaReadModeElementType> t, int x)
{
  int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0));

  return make_short2(v.x, v.y);
}

static __forceinline __declspec(__device__) ushort2 tex1Dfetch(texture<ushort2, 0x01, cudaReadModeElementType> t, int x)
{
  uint4 v = __utexfetchi(t, make_int4(x, 0, 0, 0));

  return make_ushort2(v.x, v.y);
}

static __forceinline __declspec(__device__) short4 tex1Dfetch(texture<short4, 0x01, cudaReadModeElementType> t, int x)
{
  int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0));

  return make_short4(v.x, v.y, v.z, v.w);
}

static __forceinline __declspec(__device__) ushort4 tex1Dfetch(texture<ushort4, 0x01, cudaReadModeElementType> t, int x)
{
  uint4 v = __utexfetchi(t, make_int4(x, 0, 0, 0));

  return make_ushort4(v.x, v.y, v.z, v.w);
}







static __forceinline __declspec(__device__) int tex1Dfetch(texture<int, 0x01, cudaReadModeElementType> t, int x)
{
  int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0));

  return (int)v.x;
}

static __forceinline __declspec(__device__) unsigned int tex1Dfetch(texture<unsigned int, 0x01, cudaReadModeElementType> t, int x)
{
  uint4 v = __utexfetchi(t, make_int4(x, 0, 0, 0));

  return (unsigned int)v.x;
}

static __forceinline __declspec(__device__) int1 tex1Dfetch(texture<int1, 0x01, cudaReadModeElementType> t, int x)
{
  int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0));

  return make_int1(v.x);
}

static __forceinline __declspec(__device__) uint1 tex1Dfetch(texture<uint1, 0x01, cudaReadModeElementType> t, int x)
{
  uint4 v = __utexfetchi(t, make_int4(x, 0, 0, 0));

  return make_uint1(v.x);
}

static __forceinline __declspec(__device__) int2 tex1Dfetch(texture<int2, 0x01, cudaReadModeElementType> t, int x)
{
  int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0));

  return make_int2(v.x, v.y);
}

static __forceinline __declspec(__device__) uint2 tex1Dfetch(texture<uint2, 0x01, cudaReadModeElementType> t, int x)
{
  uint4 v = __utexfetchi(t, make_int4(x, 0, 0, 0));

  return make_uint2(v.x, v.y);
}

static __forceinline __declspec(__device__) int4 tex1Dfetch(texture<int4, 0x01, cudaReadModeElementType> t, int x)
{
  int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0));

  return make_int4(v.x, v.y, v.z, v.w);
}

static __forceinline __declspec(__device__) uint4 tex1Dfetch(texture<uint4, 0x01, cudaReadModeElementType> t, int x)
{
  uint4 v = __utexfetchi(t, make_int4(x, 0, 0, 0));

  return make_uint4(v.x, v.y, v.z, v.w);
}









static __forceinline __declspec(__device__) long tex1Dfetch(texture<long, 0x01, cudaReadModeElementType> t, int x)
{
  int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0));

  return (long)v.x;
}

static __forceinline __declspec(__device__) unsigned long tex1Dfetch(texture<unsigned long, 0x01, cudaReadModeElementType> t, int x)
{
  uint4 v = __utexfetchi(t, make_int4(x, 0, 0, 0));

  return (unsigned long)v.x;
}

static __forceinline __declspec(__device__) long1 tex1Dfetch(texture<long1, 0x01, cudaReadModeElementType> t, int x)
{
  int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0));

  return make_long1(v.x);
}

static __forceinline __declspec(__device__) ulong1 tex1Dfetch(texture<ulong1, 0x01, cudaReadModeElementType> t, int x)
{
  uint4 v = __utexfetchi(t, make_int4(x, 0, 0, 0));

  return make_ulong1(v.x);
}

static __forceinline __declspec(__device__) long2 tex1Dfetch(texture<long2, 0x01, cudaReadModeElementType> t, int x)
{
  int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0));

  return make_long2(v.x, v.y);
}

static __forceinline __declspec(__device__) ulong2 tex1Dfetch(texture<ulong2, 0x01, cudaReadModeElementType> t, int x)
{
  uint4 v = __utexfetchi(t, make_int4(x, 0, 0, 0));

  return make_ulong2(v.x, v.y);
}

static __forceinline __declspec(__device__) long4 tex1Dfetch(texture<long4, 0x01, cudaReadModeElementType> t, int x)
{
  int4 v = __itexfetchi(t, make_int4(x, 0, 0, 0));

  return make_long4(v.x, v.y, v.z, v.w);
}

static __forceinline __declspec(__device__) ulong4 tex1Dfetch(texture<ulong4, 0x01, cudaReadModeElementType> t, int x)
{
  uint4 v = __utexfetchi(t, make_int4(x, 0, 0, 0));

  return make_ulong4(v.x, v.y, v.z, v.w);
}

#line 352 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_fetch_functions.h"







static __forceinline __declspec(__device__) float tex1Dfetch(texture<float, 0x01, cudaReadModeElementType> t, int x)
{
  float4 v = __ftexfetchi(t, make_int4(x, 0, 0, 0));

  return v.x;
}

static __forceinline __declspec(__device__) float1 tex1Dfetch(texture<float1, 0x01, cudaReadModeElementType> t, int x)
{
  float4 v = __ftexfetchi(t, make_int4(x, 0, 0, 0));

  return make_float1(v.x);
}

static __forceinline __declspec(__device__) float2 tex1Dfetch(texture<float2, 0x01, cudaReadModeElementType> t, int x)
{
  float4 v = __ftexfetchi(t, make_int4(x, 0, 0, 0));

  return make_float2(v.x, v.y);
}

static __forceinline __declspec(__device__) float4 tex1Dfetch(texture<float4, 0x01, cudaReadModeElementType> t, int x)
{
  float4 v = __ftexfetchi(t, make_int4(x, 0, 0, 0));

  return make_float4(v.x, v.y, v.z, v.w);
}







static __forceinline __declspec(__device__) float tex1Dfetch(texture<char, 0x01, cudaReadModeNormalizedFloat> t, int x)
{


#line 398 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_fetch_functions.h"
  int4 v   = __itexfetchi(t, make_int4(x, 0, 0, 0));
#line 400 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_fetch_functions.h"
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __forceinline __declspec(__device__) float tex1Dfetch(texture<signed char, 0x01, cudaReadModeNormalizedFloat> t, int x)
{
  int4 v   = __itexfetchi(t, make_int4(x, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __forceinline __declspec(__device__) float tex1Dfetch(texture<unsigned char, 0x01, cudaReadModeNormalizedFloat> t, int x)
{
  uint4 v  = __utexfetchi(t, make_int4(x, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __forceinline __declspec(__device__) float1 tex1Dfetch(texture<char1, 0x01, cudaReadModeNormalizedFloat> t, int x)
{
  int4 v   = __itexfetchi(t, make_int4(x, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __forceinline __declspec(__device__) float1 tex1Dfetch(texture<uchar1, 0x01, cudaReadModeNormalizedFloat> t, int x)
{
  uint4 v  = __utexfetchi(t, make_int4(x, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __forceinline __declspec(__device__) float2 tex1Dfetch(texture<char2, 0x01, cudaReadModeNormalizedFloat> t, int x)
{
  int4 v   = __itexfetchi(t, make_int4(x, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __forceinline __declspec(__device__) float2 tex1Dfetch(texture<uchar2, 0x01, cudaReadModeNormalizedFloat> t, int x)
{
  uint4 v  = __utexfetchi(t, make_int4(x, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __forceinline __declspec(__device__) float4 tex1Dfetch(texture<char4, 0x01, cudaReadModeNormalizedFloat> t, int x)
{
  int4 v   = __itexfetchi(t, make_int4(x, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}

static __forceinline __declspec(__device__) float4 tex1Dfetch(texture<uchar4, 0x01, cudaReadModeNormalizedFloat> t, int x)
{
  uint4 v  = __utexfetchi(t, make_int4(x, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}







static __forceinline __declspec(__device__) float tex1Dfetch(texture<short, 0x01, cudaReadModeNormalizedFloat> t, int x)
{
  int4 v   = __itexfetchi(t, make_int4(x, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __forceinline __declspec(__device__) float tex1Dfetch(texture<unsigned short, 0x01, cudaReadModeNormalizedFloat> t, int x)
{
  uint4 v  = __utexfetchi(t, make_int4(x, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __forceinline __declspec(__device__) float1 tex1Dfetch(texture<short1, 0x01, cudaReadModeNormalizedFloat> t, int x)
{
  int4 v   = __itexfetchi(t, make_int4(x, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __forceinline __declspec(__device__) float1 tex1Dfetch(texture<ushort1, 0x01, cudaReadModeNormalizedFloat> t, int x)
{
  uint4 v  = __utexfetchi(t, make_int4(x, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __forceinline __declspec(__device__) float2 tex1Dfetch(texture<short2, 0x01, cudaReadModeNormalizedFloat> t, int x)
{
  int4 v   = __itexfetchi(t, make_int4(x, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __forceinline __declspec(__device__) float2 tex1Dfetch(texture<ushort2, 0x01, cudaReadModeNormalizedFloat> t, int x)
{
  uint4 v  = __utexfetchi(t, make_int4(x, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __forceinline __declspec(__device__) float4 tex1Dfetch(texture<short4, 0x01, cudaReadModeNormalizedFloat> t, int x)
{
  int4 v   = __itexfetchi(t, make_int4(x, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}

static __forceinline __declspec(__device__) float4 tex1Dfetch(texture<ushort4, 0x01, cudaReadModeNormalizedFloat> t, int x)
{
  uint4 v   = __utexfetchi(t, make_int4(x, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}







static __forceinline __declspec(__device__) char tex1D(texture<char, 0x01, cudaReadModeElementType> t, float x)
{


#line 550 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_fetch_functions.h"
  int4 v  = __itexfetch(t, make_float4(x, 0, 0, 0));
#line 552 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_fetch_functions.h"

  return (char)v.x;
}

static __forceinline __declspec(__device__) signed char tex1D(texture<signed char, 0x01, cudaReadModeElementType> t, float x)
{
  int4 v = __itexfetch(t, make_float4(x, 0, 0, 0));

  return (signed char)v.x;
}

static __forceinline __declspec(__device__) unsigned char tex1D(texture<unsigned char, 0x01, cudaReadModeElementType> t, float x)
{
  uint4 v = __utexfetch(t, make_float4(x, 0, 0, 0));

  return (unsigned char)v.x;
}

static __forceinline __declspec(__device__) char1 tex1D(texture<char1, 0x01, cudaReadModeElementType> t, float x)
{
  int4 v = __itexfetch(t, make_float4(x, 0, 0, 0));

  return make_char1(v.x);
}

static __forceinline __declspec(__device__) uchar1 tex1D(texture<uchar1, 0x01, cudaReadModeElementType> t, float x)
{
  uint4 v = __utexfetch(t, make_float4(x, 0, 0, 0));

  return make_uchar1(v.x);
}

static __forceinline __declspec(__device__) char2 tex1D(texture<char2, 0x01, cudaReadModeElementType> t, float x)
{
  int4 v = __itexfetch(t, make_float4(x, 0, 0, 0));

  return make_char2(v.x, v.y);
}

static __forceinline __declspec(__device__) uchar2 tex1D(texture<uchar2, 0x01, cudaReadModeElementType> t, float x)
{
  uint4 v = __utexfetch(t, make_float4(x, 0, 0, 0));

  return make_uchar2(v.x, v.y);
}

static __forceinline __declspec(__device__) char4 tex1D(texture<char4, 0x01, cudaReadModeElementType> t, float x)
{
  int4 v = __itexfetch(t, make_float4(x, 0, 0, 0));

  return make_char4(v.x, v.y, v.z, v.w);
}

static __forceinline __declspec(__device__) uchar4 tex1D(texture<uchar4, 0x01, cudaReadModeElementType> t, float x)
{
  uint4 v = __utexfetch(t, make_float4(x, 0, 0, 0));

  return make_uchar4(v.x, v.y, v.z, v.w);
}







static __forceinline __declspec(__device__) short tex1D(texture<short, 0x01, cudaReadModeElementType> t, float x)
{
  int4 v = __itexfetch(t, make_float4(x, 0, 0, 0));

  return (short)v.x;
}

static __forceinline __declspec(__device__) unsigned short tex1D(texture<unsigned short, 0x01, cudaReadModeElementType> t, float x)
{
  uint4 v = __utexfetch(t, make_float4(x, 0, 0, 0));

  return (unsigned short)v.x;
}

static __forceinline __declspec(__device__) short1 tex1D(texture<short1, 0x01, cudaReadModeElementType> t, float x)
{
  int4 v = __itexfetch(t, make_float4(x, 0, 0, 0));

  return make_short1(v.x);
}

static __forceinline __declspec(__device__) ushort1 tex1D(texture<ushort1, 0x01, cudaReadModeElementType> t, float x)
{
  uint4 v = __utexfetch(t, make_float4(x, 0, 0, 0));

  return make_ushort1(v.x);
}

static __forceinline __declspec(__device__) short2 tex1D(texture<short2, 0x01, cudaReadModeElementType> t, float x)
{
  int4 v = __itexfetch(t, make_float4(x, 0, 0, 0));

  return make_short2(v.x, v.y);
}

static __forceinline __declspec(__device__) ushort2 tex1D(texture<ushort2, 0x01, cudaReadModeElementType> t, float x)
{
  uint4 v = __utexfetch(t, make_float4(x, 0, 0, 0));

  return make_ushort2(v.x, v.y);
}

static __forceinline __declspec(__device__) short4 tex1D(texture<short4, 0x01, cudaReadModeElementType> t, float x)
{
  int4 v = __itexfetch(t, make_float4(x, 0, 0, 0));

  return make_short4(v.x, v.y, v.z, v.w);
}

static __forceinline __declspec(__device__) ushort4 tex1D(texture<ushort4, 0x01, cudaReadModeElementType> t, float x)
{
  uint4 v = __utexfetch(t, make_float4(x, 0, 0, 0));

  return make_ushort4(v.x, v.y, v.z, v.w);
}







static __forceinline __declspec(__device__) int tex1D(texture<int, 0x01, cudaReadModeElementType> t, float x)
{
  int4 v = __itexfetch(t, make_float4(x, 0, 0, 0));

  return (int)v.x;
}

static __forceinline __declspec(__device__) unsigned int tex1D(texture<unsigned int, 0x01, cudaReadModeElementType> t, float x)
{
  uint4 v = __utexfetch(t, make_float4(x, 0, 0, 0));

  return (unsigned int)v.x;
}

static __forceinline __declspec(__device__) int1 tex1D(texture<int1, 0x01, cudaReadModeElementType> t, float x)
{
  int4 v = __itexfetch(t, make_float4(x, 0, 0, 0));

  return make_int1(v.x);
}

static __forceinline __declspec(__device__) uint1 tex1D(texture<uint1, 0x01, cudaReadModeElementType> t, float x)
{
  uint4 v = __utexfetch(t, make_float4(x, 0, 0, 0));

  return make_uint1(v.x);
}

static __forceinline __declspec(__device__) int2 tex1D(texture<int2, 0x01, cudaReadModeElementType> t, float x)
{
  int4 v = __itexfetch(t, make_float4(x, 0, 0, 0));

  return make_int2(v.x, v.y);
}

static __forceinline __declspec(__device__) uint2 tex1D(texture<uint2, 0x01, cudaReadModeElementType> t, float x)
{
  uint4 v = __utexfetch(t, make_float4(x, 0, 0, 0));

  return make_uint2(v.x, v.y);
}

static __forceinline __declspec(__device__) int4 tex1D(texture<int4, 0x01, cudaReadModeElementType> t, float x)
{
  int4 v = __itexfetch(t, make_float4(x, 0, 0, 0));

  return make_int4(v.x, v.y, v.z, v.w);
}

static __forceinline __declspec(__device__) uint4 tex1D(texture<uint4, 0x01, cudaReadModeElementType> t, float x)
{
  uint4 v = __utexfetch(t, make_float4(x, 0, 0, 0));

  return make_uint4(v.x, v.y, v.z, v.w);
}















static __forceinline __declspec(__device__) long tex1D(texture<long, 0x01, cudaReadModeElementType> t, float x)
{
  int4 v = __itexfetch(t, make_float4(x, 0, 0, 0));

  return (long)v.x;
}

static __forceinline __declspec(__device__) unsigned long tex1D(texture<unsigned long, 0x01, cudaReadModeElementType> t, float x)
{
  uint4 v = __utexfetch(t, make_float4(x, 0, 0, 0));

  return (unsigned long)v.x;
}

static __forceinline __declspec(__device__) long1 tex1D(texture<long1, 0x01, cudaReadModeElementType> t, float x)
{
  int4 v = __itexfetch(t, make_float4(x, 0, 0, 0));

  return make_long1(v.x);
}

static __forceinline __declspec(__device__) ulong1 tex1D(texture<ulong1, 0x01, cudaReadModeElementType> t, float x)
{
  uint4 v = __utexfetch(t, make_float4(x, 0, 0, 0));

  return make_ulong1(v.x);
}

static __forceinline __declspec(__device__) long2 tex1D(texture<long2, 0x01, cudaReadModeElementType> t, float x)
{
  int4 v = __itexfetch(t, make_float4(x, 0, 0, 0));

  return make_long2(v.x, v.y);
}

static __forceinline __declspec(__device__) ulong2 tex1D(texture<ulong2, 0x01, cudaReadModeElementType> t, float x)
{
  uint4 v = __utexfetch(t, make_float4(x, 0, 0, 0));

  return make_ulong2(v.x, v.y);
}

static __forceinline __declspec(__device__) long4 tex1D(texture<long4, 0x01, cudaReadModeElementType> t, float x)
{
  int4 v = __itexfetch(t, make_float4(x, 0, 0, 0));

  return make_long4(v.x, v.y, v.z, v.w);
}

static __forceinline __declspec(__device__) ulong4 tex1D(texture<ulong4, 0x01, cudaReadModeElementType> t, float x)
{
  uint4 v = __utexfetch(t, make_float4(x, 0, 0, 0));

  return make_ulong4(v.x, v.y, v.z, v.w);
}

#line 807 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_fetch_functions.h"







static __forceinline __declspec(__device__) float tex1D(texture<float, 0x01, cudaReadModeElementType> t, float x)
{
  float4 v = __ftexfetch(t, make_float4(x, 0, 0, 0));

  return v.x;
}

static __forceinline __declspec(__device__) float1 tex1D(texture<float1, 0x01, cudaReadModeElementType> t, float x)
{
  float4 v = __ftexfetch(t, make_float4(x, 0, 0, 0));

  return make_float1(v.x);
}

static __forceinline __declspec(__device__) float2 tex1D(texture<float2, 0x01, cudaReadModeElementType> t, float x)
{
  float4 v = __ftexfetch(t, make_float4(x, 0, 0, 0));

  return make_float2(v.x, v.y);
}

static __forceinline __declspec(__device__) float4 tex1D(texture<float4, 0x01, cudaReadModeElementType> t, float x)
{
  float4 v = __ftexfetch(t, make_float4(x, 0, 0, 0));

  return make_float4(v.x, v.y, v.z, v.w);
}







static __forceinline __declspec(__device__) float tex1D(texture<char, 0x01, cudaReadModeNormalizedFloat> t, float x)
{


#line 853 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_fetch_functions.h"
  int4 v   = __itexfetch(t, make_float4(x, 0, 0, 0));
#line 855 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_fetch_functions.h"
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __forceinline __declspec(__device__) float tex1D(texture<signed char, 0x01, cudaReadModeNormalizedFloat> t, float x)
{
  int4 v   = __itexfetch(t, make_float4(x, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __forceinline __declspec(__device__) float tex1D(texture<unsigned char, 0x01, cudaReadModeNormalizedFloat> t, float x)
{
  uint4 v  = __utexfetch(t, make_float4(x, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __forceinline __declspec(__device__) float1 tex1D(texture<char1, 0x01, cudaReadModeNormalizedFloat> t, float x)
{
  int4 v   = __itexfetch(t, make_float4(x, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __forceinline __declspec(__device__) float1 tex1D(texture<uchar1, 0x01, cudaReadModeNormalizedFloat> t, float x)
{
  uint4 v  = __utexfetch(t, make_float4(x, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __forceinline __declspec(__device__) float2 tex1D(texture<char2, 0x01, cudaReadModeNormalizedFloat> t, float x)
{
  int4 v   = __itexfetch(t, make_float4(x, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __forceinline __declspec(__device__) float2 tex1D(texture<uchar2, 0x01, cudaReadModeNormalizedFloat> t, float x)
{
  uint4 v  = __utexfetch(t, make_float4(x, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __forceinline __declspec(__device__) float4 tex1D(texture<char4, 0x01, cudaReadModeNormalizedFloat> t, float x)
{
  int4 v   = __itexfetch(t, make_float4(x, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}

static __forceinline __declspec(__device__) float4 tex1D(texture<uchar4, 0x01, cudaReadModeNormalizedFloat> t, float x)
{
  uint4 v  = __utexfetch(t, make_float4(x, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}







static __forceinline __declspec(__device__) float tex1D(texture<short, 0x01, cudaReadModeNormalizedFloat> t, float x)
{
  int4 v   = __itexfetch(t, make_float4(x, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __forceinline __declspec(__device__) float tex1D(texture<unsigned short, 0x01, cudaReadModeNormalizedFloat> t, float x)
{
  uint4 v  = __utexfetch(t, make_float4(x, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __forceinline __declspec(__device__) float1 tex1D(texture<short1, 0x01, cudaReadModeNormalizedFloat> t, float x)
{
  int4 v   = __itexfetch(t, make_float4(x, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __forceinline __declspec(__device__) float1 tex1D(texture<ushort1, 0x01, cudaReadModeNormalizedFloat> t, float x)
{
  uint4 v  = __utexfetch(t, make_float4(x, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __forceinline __declspec(__device__) float2 tex1D(texture<short2, 0x01, cudaReadModeNormalizedFloat> t, float x)
{
  int4 v   = __itexfetch(t, make_float4(x, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __forceinline __declspec(__device__) float2 tex1D(texture<ushort2, 0x01, cudaReadModeNormalizedFloat> t, float x)
{
  uint4 v  = __utexfetch(t, make_float4(x, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __forceinline __declspec(__device__) float4 tex1D(texture<short4, 0x01, cudaReadModeNormalizedFloat> t, float x)
{
  int4 v   = __itexfetch(t, make_float4(x, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}

static __forceinline __declspec(__device__) float4 tex1D(texture<ushort4, 0x01, cudaReadModeNormalizedFloat> t, float x)
{
  uint4 v   = __utexfetch(t, make_float4(x, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}







static __forceinline __declspec(__device__) char tex2D(texture<char, 0x02, cudaReadModeElementType> t, float x, float y)
{


#line 1005 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_fetch_functions.h"
  int4 v  = __itexfetch(t, make_float4(x, y, 0, 0));
#line 1007 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_fetch_functions.h"

  return (char)v.x;
}

static __forceinline __declspec(__device__) signed char tex2D(texture<signed char, 0x02, cudaReadModeElementType> t, float x, float y)
{
  int4 v = __itexfetch(t, make_float4(x, y, 0, 0));

  return (signed char)v.x;
}

static __forceinline __declspec(__device__) unsigned char tex2D(texture<unsigned char, 0x02, cudaReadModeElementType> t, float x, float y)
{
  uint4 v = __utexfetch(t, make_float4(x, y, 0, 0));

  return (unsigned char)v.x;
}

static __forceinline __declspec(__device__) char1 tex2D(texture<char1, 0x02, cudaReadModeElementType> t, float x, float y)
{
  int4 v = __itexfetch(t, make_float4(x, y, 0, 0));

  return make_char1(v.x);
}

static __forceinline __declspec(__device__) uchar1 tex2D(texture<uchar1, 0x02, cudaReadModeElementType> t, float x, float y)
{
  uint4 v = __utexfetch(t, make_float4(x, y, 0, 0));

  return make_uchar1(v.x);
}

static __forceinline __declspec(__device__) char2 tex2D(texture<char2, 0x02, cudaReadModeElementType> t, float x, float y)
{
  int4 v = __itexfetch(t, make_float4(x, y, 0, 0));

  return make_char2(v.x, v.y);
}

static __forceinline __declspec(__device__) uchar2 tex2D(texture<uchar2, 0x02, cudaReadModeElementType> t, float x, float y)
{
  uint4 v = __utexfetch(t, make_float4(x, y, 0, 0));

  return make_uchar2(v.x, v.y);
}

static __forceinline __declspec(__device__) char4 tex2D(texture<char4, 0x02, cudaReadModeElementType> t, float x, float y)
{
  int4 v = __itexfetch(t, make_float4(x, y, 0, 0));

  return make_char4(v.x, v.y, v.z, v.w);
}

static __forceinline __declspec(__device__) uchar4 tex2D(texture<uchar4, 0x02, cudaReadModeElementType> t, float x, float y)
{
  uint4 v = __utexfetch(t, make_float4(x, y, 0, 0));

  return make_uchar4(v.x, v.y, v.z, v.w);
}







static __forceinline __declspec(__device__) short tex2D(texture<short, 0x02, cudaReadModeElementType> t, float x, float y)
{
  int4 v = __itexfetch(t, make_float4(x, y, 0, 0));

  return (short)v.x;
}

static __forceinline __declspec(__device__) unsigned short tex2D(texture<unsigned short, 0x02, cudaReadModeElementType> t, float x, float y)
{
  uint4 v = __utexfetch(t, make_float4(x, y, 0, 0));

  return (unsigned short)v.x;
}

static __forceinline __declspec(__device__) short1 tex2D(texture<short1, 0x02, cudaReadModeElementType> t, float x, float y)
{
  int4 v = __itexfetch(t, make_float4(x, y, 0, 0));

  return make_short1(v.x);
}

static __forceinline __declspec(__device__) ushort1 tex2D(texture<ushort1, 0x02, cudaReadModeElementType> t, float x, float y)
{
  uint4 v = __utexfetch(t, make_float4(x, y, 0, 0));

  return make_ushort1(v.x);
}

static __forceinline __declspec(__device__) short2 tex2D(texture<short2, 0x02, cudaReadModeElementType> t, float x, float y)
{
  int4 v = __itexfetch(t, make_float4(x, y, 0, 0));

  return make_short2(v.x, v.y);
}

static __forceinline __declspec(__device__) ushort2 tex2D(texture<ushort2, 0x02, cudaReadModeElementType> t, float x, float y)
{
  uint4 v = __utexfetch(t, make_float4(x, y, 0, 0));

  return make_ushort2(v.x, v.y);
}

static __forceinline __declspec(__device__) short4 tex2D(texture<short4, 0x02, cudaReadModeElementType> t, float x, float y)
{
  int4 v = __itexfetch(t, make_float4(x, y, 0, 0));

  return make_short4(v.x, v.y, v.z, v.w);
}

static __forceinline __declspec(__device__) ushort4 tex2D(texture<ushort4, 0x02, cudaReadModeElementType> t, float x, float y)
{
  uint4 v = __utexfetch(t, make_float4(x, y, 0, 0));

  return make_ushort4(v.x, v.y, v.z, v.w);
}







static __forceinline __declspec(__device__) int tex2D(texture<int, 0x02, cudaReadModeElementType> t, float x, float y)
{
  int4 v = __itexfetch(t, make_float4(x, y, 0, 0));

  return (int)v.x;
}

static __forceinline __declspec(__device__) unsigned int tex2D(texture<unsigned int, 0x02, cudaReadModeElementType> t, float x, float y)
{
  uint4 v = __utexfetch(t, make_float4(x, y, 0, 0));

  return (unsigned int)v.x;
}

static __forceinline __declspec(__device__) int1 tex2D(texture<int1, 0x02, cudaReadModeElementType> t, float x, float y)
{
  int4 v = __itexfetch(t, make_float4(x, y, 0, 0));

  return make_int1(v.x);
}

static __forceinline __declspec(__device__) uint1 tex2D(texture<uint1, 0x02, cudaReadModeElementType> t, float x, float y)
{
  uint4 v = __utexfetch(t, make_float4(x, y, 0, 0));

  return make_uint1(v.x);
}

static __forceinline __declspec(__device__) int2 tex2D(texture<int2, 0x02, cudaReadModeElementType> t, float x, float y)
{
  int4 v = __itexfetch(t, make_float4(x, y, 0, 0));

  return make_int2(v.x, v.y);
}

static __forceinline __declspec(__device__) uint2 tex2D(texture<uint2, 0x02, cudaReadModeElementType> t, float x, float y)
{
  uint4 v = __utexfetch(t, make_float4(x, y, 0, 0));

  return make_uint2(v.x, v.y);
}

static __forceinline __declspec(__device__) int4 tex2D(texture<int4, 0x02, cudaReadModeElementType> t, float x, float y)
{
  int4 v = __itexfetch(t, make_float4(x, y, 0, 0));

  return make_int4(v.x, v.y, v.z, v.w);
}

static __forceinline __declspec(__device__) uint4 tex2D(texture<uint4, 0x02, cudaReadModeElementType> t, float x, float y)
{
  uint4 v = __utexfetch(t, make_float4(x, y, 0, 0));

  return make_uint4(v.x, v.y, v.z, v.w);
}









static __forceinline __declspec(__device__) long tex2D(texture<long, 0x02, cudaReadModeElementType> t, float x, float y)
{
  int4 v = __itexfetch(t, make_float4(x, y, 0, 0));

  return (long)v.x;
}

static __forceinline __declspec(__device__) unsigned long tex2D(texture<unsigned long, 0x02, cudaReadModeElementType> t, float x, float y)
{
  uint4 v = __utexfetch(t, make_float4(x, y, 0, 0));

  return (unsigned long)v.x;
}

static __forceinline __declspec(__device__) long1 tex2D(texture<long1, 0x02, cudaReadModeElementType> t, float x, float y)
{
  int4 v = __itexfetch(t, make_float4(x, y, 0, 0));

  return make_long1(v.x);
}

static __forceinline __declspec(__device__) ulong1 tex2D(texture<ulong1, 0x02, cudaReadModeElementType> t, float x, float y)
{
  uint4 v = __utexfetch(t, make_float4(x, y, 0, 0));

  return make_ulong1(v.x);
}

static __forceinline __declspec(__device__) long2 tex2D(texture<long2, 0x02, cudaReadModeElementType> t, float x, float y)
{
  int4 v = __itexfetch(t, make_float4(x, y, 0, 0));

  return make_long2(v.x, v.y);
}

static __forceinline __declspec(__device__) ulong2 tex2D(texture<ulong2, 0x02, cudaReadModeElementType> t, float x, float y)
{
  uint4 v = __utexfetch(t, make_float4(x, y, 0, 0));

  return make_ulong2(v.x, v.y);
}

static __forceinline __declspec(__device__) long4 tex2D(texture<long4, 0x02, cudaReadModeElementType> t, float x, float y)
{
  int4 v = __itexfetch(t, make_float4(x, y, 0, 0));

  return make_long4(v.x, v.y, v.z, v.w);
}

static __forceinline __declspec(__device__) ulong4 tex2D(texture<ulong4, 0x02, cudaReadModeElementType> t, float x, float y)
{
  uint4 v = __utexfetch(t, make_float4(x, y, 0, 0));

  return make_ulong4(v.x, v.y, v.z, v.w);
}

#line 1256 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_fetch_functions.h"







static __forceinline __declspec(__device__) float tex2D(texture<float, 0x02, cudaReadModeElementType> t, float x, float y)
{
  float4 v = __ftexfetch(t, make_float4(x, y, 0, 0));

  return v.x;
}

static __forceinline __declspec(__device__) float1 tex2D(texture<float1, 0x02, cudaReadModeElementType> t, float x, float y)
{
  float4 v = __ftexfetch(t, make_float4(x, y, 0, 0));

  return make_float1(v.x);
}

static __forceinline __declspec(__device__) float2 tex2D(texture<float2, 0x02, cudaReadModeElementType> t, float x, float y)
{
  float4 v = __ftexfetch(t, make_float4(x, y, 0, 0));

  return make_float2(v.x, v.y);
}

static __forceinline __declspec(__device__) float4 tex2D(texture<float4, 0x02, cudaReadModeElementType> t, float x, float y)
{
  float4 v = __ftexfetch(t, make_float4(x, y, 0, 0));

  return make_float4(v.x, v.y, v.z, v.w);
}







static __forceinline __declspec(__device__) float tex2D(texture<char, 0x02, cudaReadModeNormalizedFloat> t, float x, float y)
{


#line 1302 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_fetch_functions.h"
  int4 v   = __itexfetch(t, make_float4(x, y, 0, 0));
#line 1304 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_fetch_functions.h"
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __forceinline __declspec(__device__) float tex2D(texture<signed char, 0x02, cudaReadModeNormalizedFloat> t, float x, float y)
{
  int4 v   = __itexfetch(t, make_float4(x, y, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __forceinline __declspec(__device__) float tex2D(texture<unsigned char, 0x02, cudaReadModeNormalizedFloat> t, float x, float y)
{
  uint4 v  = __utexfetch(t, make_float4(x, y, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __forceinline __declspec(__device__) float1 tex2D(texture<char1, 0x02, cudaReadModeNormalizedFloat> t, float x, float y)
{
  int4 v   = __itexfetch(t, make_float4(x, y, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __forceinline __declspec(__device__) float1 tex2D(texture<uchar1, 0x02, cudaReadModeNormalizedFloat> t, float x, float y)
{
  uint4 v  = __utexfetch(t, make_float4(x, y, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __forceinline __declspec(__device__) float2 tex2D(texture<char2, 0x02, cudaReadModeNormalizedFloat> t, float x, float y)
{
  int4 v   = __itexfetch(t, make_float4(x, y, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __forceinline __declspec(__device__) float2 tex2D(texture<uchar2, 0x02, cudaReadModeNormalizedFloat> t, float x, float y)
{
  uint4 v  = __utexfetch(t, make_float4(x, y, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __forceinline __declspec(__device__) float4 tex2D(texture<char4, 0x02, cudaReadModeNormalizedFloat> t, float x, float y)
{
  int4 v   = __itexfetch(t, make_float4(x, y, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}

static __forceinline __declspec(__device__) float4 tex2D(texture<uchar4, 0x02, cudaReadModeNormalizedFloat> t, float x, float y)
{
  uint4 v  = __utexfetch(t, make_float4(x, y, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}







static __forceinline __declspec(__device__) float tex2D(texture<short, 0x02, cudaReadModeNormalizedFloat> t, float x, float y)
{
  int4 v   = __itexfetch(t, make_float4(x, y, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __forceinline __declspec(__device__) float tex2D(texture<unsigned short, 0x02, cudaReadModeNormalizedFloat> t, float x, float y)
{
  uint4 v  = __utexfetch(t, make_float4(x, y, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __forceinline __declspec(__device__) float1 tex2D(texture<short1, 0x02, cudaReadModeNormalizedFloat> t, float x, float y)
{
  int4 v   = __itexfetch(t, make_float4(x, y, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __forceinline __declspec(__device__) float1 tex2D(texture<ushort1, 0x02, cudaReadModeNormalizedFloat> t, float x, float y)
{
  uint4 v  = __utexfetch(t, make_float4(x, y, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __forceinline __declspec(__device__) float2 tex2D(texture<short2, 0x02, cudaReadModeNormalizedFloat> t, float x, float y)
{
  int4 v   = __itexfetch(t, make_float4(x, y, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __forceinline __declspec(__device__) float2 tex2D(texture<ushort2, 0x02, cudaReadModeNormalizedFloat> t, float x, float y)
{
  uint4 v  = __utexfetch(t, make_float4(x, y, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __forceinline __declspec(__device__) float4 tex2D(texture<short4, 0x02, cudaReadModeNormalizedFloat> t, float x, float y)
{
  int4 v   = __itexfetch(t, make_float4(x, y, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}

static __forceinline __declspec(__device__) float4 tex2D(texture<ushort4, 0x02, cudaReadModeNormalizedFloat> t, float x, float y)
{
  uint4 v   = __utexfetch(t, make_float4(x, y, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}







static __forceinline __declspec(__device__) char tex1DLayered(texture<char, 0xF1, cudaReadModeElementType> t, float x, int layer)
{


#line 1454 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_fetch_functions.h"
  int4 v  = __itexfetchl(t, make_float4(x, 0, 0, 0), layer);
#line 1456 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_fetch_functions.h"

  return (char)v.x;
}

static __forceinline __declspec(__device__) signed char tex1DLayered(texture<signed char, 0xF1, cudaReadModeElementType> t, float x, int layer)
{
  int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer);

  return (signed char)v.x;
}

static __forceinline __declspec(__device__) unsigned char tex1DLayered(texture<unsigned char, 0xF1, cudaReadModeElementType> t, float x, int layer)
{
  uint4 v = __utexfetchl(t, make_float4(x, 0, 0, 0), layer);

  return (unsigned char)v.x;
}

static __forceinline __declspec(__device__) char1 tex1DLayered(texture<char1, 0xF1, cudaReadModeElementType> t, float x, int layer)
{
  int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer);

  return make_char1(v.x);
}

static __forceinline __declspec(__device__) uchar1 tex1DLayered(texture<uchar1, 0xF1, cudaReadModeElementType> t, float x, int layer)
{
  uint4 v = __utexfetchl(t, make_float4(x, 0, 0, 0), layer);

  return make_uchar1(v.x);
}

static __forceinline __declspec(__device__) char2 tex1DLayered(texture<char2, 0xF1, cudaReadModeElementType> t, float x, int layer)
{
  int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer);

  return make_char2(v.x, v.y);
}

static __forceinline __declspec(__device__) uchar2 tex1DLayered(texture<uchar2, 0xF1, cudaReadModeElementType> t, float x, int layer)
{
  uint4 v = __utexfetchl(t, make_float4(x, 0, 0, 0), layer);

  return make_uchar2(v.x, v.y);
}

static __forceinline __declspec(__device__) char4 tex1DLayered(texture<char4, 0xF1, cudaReadModeElementType> t, float x, int layer)
{
  int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer);

  return make_char4(v.x, v.y, v.z, v.w);
}

static __forceinline __declspec(__device__) uchar4 tex1DLayered(texture<uchar4, 0xF1, cudaReadModeElementType> t, float x, int layer)
{
  uint4 v = __utexfetchl(t, make_float4(x, 0, 0, 0), layer);

  return make_uchar4(v.x, v.y, v.z, v.w);
}







static __forceinline __declspec(__device__) short tex1DLayered(texture<short, 0xF1, cudaReadModeElementType> t, float x, int layer)
{
  int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer);

  return (short)v.x;
}

static __forceinline __declspec(__device__) unsigned short tex1DLayered(texture<unsigned short, 0xF1, cudaReadModeElementType> t, float x, int layer)
{
  uint4 v = __utexfetchl(t, make_float4(x, 0, 0, 0), layer);

  return (unsigned short)v.x;
}

static __forceinline __declspec(__device__) short1 tex1DLayered(texture<short1, 0xF1, cudaReadModeElementType> t, float x, int layer)
{
  int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer);

  return make_short1(v.x);
}

static __forceinline __declspec(__device__) ushort1 tex1DLayered(texture<ushort1, 0xF1, cudaReadModeElementType> t, float x, int layer)
{
  uint4 v = __utexfetchl(t, make_float4(x, 0, 0, 0), layer);

  return make_ushort1(v.x);
}

static __forceinline __declspec(__device__) short2 tex1DLayered(texture<short2, 0xF1, cudaReadModeElementType> t, float x, int layer)
{
  int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer);

  return make_short2(v.x, v.y);
}

static __forceinline __declspec(__device__) ushort2 tex1DLayered(texture<ushort2, 0xF1, cudaReadModeElementType> t, float x, int layer)
{
  uint4 v = __utexfetchl(t, make_float4(x, 0, 0, 0), layer);

  return make_ushort2(v.x, v.y);
}

static __forceinline __declspec(__device__) short4 tex1DLayered(texture<short4, 0xF1, cudaReadModeElementType> t, float x, int layer)
{
  int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer);

  return make_short4(v.x, v.y, v.z, v.w);
}

static __forceinline __declspec(__device__) ushort4 tex1DLayered(texture<ushort4, 0xF1, cudaReadModeElementType> t, float x, int layer)
{
  uint4 v = __utexfetchl(t, make_float4(x, 0, 0, 0), layer);

  return make_ushort4(v.x, v.y, v.z, v.w);
}







static __forceinline __declspec(__device__) int tex1DLayered(texture<int, 0xF1, cudaReadModeElementType> t, float x, int layer)
{
  int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer);

  return (int)v.x;
}

static __forceinline __declspec(__device__) unsigned int tex1DLayered(texture<unsigned int, 0xF1, cudaReadModeElementType> t, float x, int layer)
{
  uint4 v = __utexfetchl(t, make_float4(x, 0, 0, 0), layer);

  return (unsigned int)v.x;
}

static __forceinline __declspec(__device__) int1 tex1DLayered(texture<int1, 0xF1, cudaReadModeElementType> t, float x, int layer)
{
  int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer);

  return make_int1(v.x);
}

static __forceinline __declspec(__device__) uint1 tex1DLayered(texture<uint1, 0xF1, cudaReadModeElementType> t, float x, int layer)
{
  uint4 v = __utexfetchl(t, make_float4(x, 0, 0, 0), layer);

  return make_uint1(v.x);
}

static __forceinline __declspec(__device__) int2 tex1DLayered(texture<int2, 0xF1, cudaReadModeElementType> t, float x, int layer)
{
  int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer);

  return make_int2(v.x, v.y);
}

static __forceinline __declspec(__device__) uint2 tex1DLayered(texture<uint2, 0xF1, cudaReadModeElementType> t, float x, int layer)
{
  uint4 v = __utexfetchl(t, make_float4(x, 0, 0, 0), layer);

  return make_uint2(v.x, v.y);
}

static __forceinline __declspec(__device__) int4 tex1DLayered(texture<int4, 0xF1, cudaReadModeElementType> t, float x, int layer)
{
  int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer);

  return make_int4(v.x, v.y, v.z, v.w);
}

static __forceinline __declspec(__device__) uint4 tex1DLayered(texture<uint4, 0xF1, cudaReadModeElementType> t, float x, int layer)
{
  uint4 v = __utexfetchl(t, make_float4(x, 0, 0, 0), layer);

  return make_uint4(v.x, v.y, v.z, v.w);
}









static __forceinline __declspec(__device__) long tex1DLayered(texture<long, 0xF1, cudaReadModeElementType> t, float x, int layer)
{
  int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer);

  return (long)v.x;
}

static __forceinline __declspec(__device__) unsigned long tex1DLayered(texture<unsigned long, 0xF1, cudaReadModeElementType> t, float x, int layer)
{
  uint4 v = __utexfetchl(t, make_float4(x, 0, 0, 0), layer);

  return (unsigned long)v.x;
}

static __forceinline __declspec(__device__) long1 tex1DLayered(texture<long1, 0xF1, cudaReadModeElementType> t, float x, int layer)
{
  int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer);

  return make_long1(v.x);
}

static __forceinline __declspec(__device__) ulong1 tex1DLayered(texture<ulong1, 0xF1, cudaReadModeElementType> t, float x, int layer)
{
  uint4 v = __utexfetchl(t, make_float4(x, 0, 0, 0), layer);

  return make_ulong1(v.x);
}

static __forceinline __declspec(__device__) long2 tex1DLayered(texture<long2, 0xF1, cudaReadModeElementType> t, float x, int layer)
{
  int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer);

  return make_long2(v.x, v.y);
}

static __forceinline __declspec(__device__) ulong2 tex1DLayered(texture<ulong2, 0xF1, cudaReadModeElementType> t, float x, int layer)
{
  uint4 v = __utexfetchl(t, make_float4(x, 0, 0, 0), layer);

  return make_ulong2(v.x, v.y);
}

static __forceinline __declspec(__device__) long4 tex1DLayered(texture<long4, 0xF1, cudaReadModeElementType> t, float x, int layer)
{
  int4 v = __itexfetchl(t, make_float4(x, 0, 0, 0), layer);

  return make_long4(v.x, v.y, v.z, v.w);
}

static __forceinline __declspec(__device__) ulong4 tex1DLayered(texture<ulong4, 0xF1, cudaReadModeElementType> t, float x, int layer)
{
  uint4 v = __utexfetchl(t, make_float4(x, 0, 0, 0), layer);

  return make_ulong4(v.x, v.y, v.z, v.w);
}

#line 1705 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_fetch_functions.h"







static __forceinline __declspec(__device__) float tex1DLayered(texture<float, 0xF1, cudaReadModeElementType> t, float x, int layer)
{
  float4 v = __ftexfetchl(t, make_float4(x, 0, 0, 0), layer);

  return v.x;
}

static __forceinline __declspec(__device__) float1 tex1DLayered(texture<float1, 0xF1, cudaReadModeElementType> t, float x, int layer)
{
  float4 v = __ftexfetchl(t, make_float4(x, 0, 0, 0), layer);

  return make_float1(v.x);
}

static __forceinline __declspec(__device__) float2 tex1DLayered(texture<float2, 0xF1, cudaReadModeElementType> t, float x, int layer)
{
  float4 v = __ftexfetchl(t, make_float4(x, 0, 0, 0), layer);

  return make_float2(v.x, v.y);
}

static __forceinline __declspec(__device__) float4 tex1DLayered(texture<float4, 0xF1, cudaReadModeElementType> t, float x, int layer)
{
  float4 v = __ftexfetchl(t, make_float4(x, 0, 0, 0), layer);

  return make_float4(v.x, v.y, v.z, v.w);
}







static __forceinline __declspec(__device__) float tex1DLayered(texture<char, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer)
{


#line 1751 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_fetch_functions.h"
  int4 v   = __itexfetchl(t, make_float4(x, 0, 0, 0), layer);
#line 1753 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_fetch_functions.h"
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __forceinline __declspec(__device__) float tex1DLayered(texture<signed char, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer)
{
  int4 v   = __itexfetchl(t, make_float4(x, 0, 0, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __forceinline __declspec(__device__) float tex1DLayered(texture<unsigned char, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer)
{
  uint4 v  = __utexfetchl(t, make_float4(x, 0, 0, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __forceinline __declspec(__device__) float1 tex1DLayered(texture<char1, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer)
{
  int4 v   = __itexfetchl(t, make_float4(x, 0, 0, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __forceinline __declspec(__device__) float1 tex1DLayered(texture<uchar1, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer)
{
  uint4 v  = __utexfetchl(t, make_float4(x, 0, 0, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __forceinline __declspec(__device__) float2 tex1DLayered(texture<char2, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer)
{
  int4 v   = __itexfetchl(t, make_float4(x, 0, 0, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __forceinline __declspec(__device__) float2 tex1DLayered(texture<uchar2, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer)
{
  uint4 v  = __utexfetchl(t, make_float4(x, 0, 0, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __forceinline __declspec(__device__) float4 tex1DLayered(texture<char4, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer)
{
  int4 v   = __itexfetchl(t, make_float4(x, 0, 0, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}

static __forceinline __declspec(__device__) float4 tex1DLayered(texture<uchar4, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer)
{
  uint4 v  = __utexfetchl(t, make_float4(x, 0, 0, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}







static __forceinline __declspec(__device__) float tex1DLayered(texture<short, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer)
{
  int4 v   = __itexfetchl(t, make_float4(x, 0, 0, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __forceinline __declspec(__device__) float tex1DLayered(texture<unsigned short, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer)
{
  uint4 v  = __utexfetchl(t, make_float4(x, 0, 0, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __forceinline __declspec(__device__) float1 tex1DLayered(texture<short1, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer)
{
  int4 v   = __itexfetchl(t, make_float4(x, 0, 0, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __forceinline __declspec(__device__) float1 tex1DLayered(texture<ushort1, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer)
{
  uint4 v  = __utexfetchl(t, make_float4(x, 0, 0, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __forceinline __declspec(__device__) float2 tex1DLayered(texture<short2, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer)
{
  int4 v   = __itexfetchl(t, make_float4(x, 0, 0, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __forceinline __declspec(__device__) float2 tex1DLayered(texture<ushort2, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer)
{
  uint4 v  = __utexfetchl(t, make_float4(x, 0, 0, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __forceinline __declspec(__device__) float4 tex1DLayered(texture<short4, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer)
{
  int4 v   = __itexfetchl(t, make_float4(x, 0, 0, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}

static __forceinline __declspec(__device__) float4 tex1DLayered(texture<ushort4, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer)
{
  uint4 v   = __utexfetchl(t, make_float4(x, 0, 0, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}







static __forceinline __declspec(__device__) char tex2DLayered(texture<char, 0xF2, cudaReadModeElementType> t, float x, float y, int layer)
{


#line 1903 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_fetch_functions.h"
  int4 v  = __itexfetchl(t, make_float4(x, y, 0, 0), layer);
#line 1905 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_fetch_functions.h"

  return (char)v.x;
}

static __forceinline __declspec(__device__) signed char tex2DLayered(texture<signed char, 0xF2, cudaReadModeElementType> t, float x, float y, int layer)
{
  int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer);

  return (signed char)v.x;
}

static __forceinline __declspec(__device__) unsigned char tex2DLayered(texture<unsigned char, 0xF2, cudaReadModeElementType> t, float x, float y, int layer)
{
  uint4 v = __utexfetchl(t, make_float4(x, y, 0, 0), layer);

  return (unsigned char)v.x;
}

static __forceinline __declspec(__device__) char1 tex2DLayered(texture<char1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer)
{
  int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer);

  return make_char1(v.x);
}

static __forceinline __declspec(__device__) uchar1 tex2DLayered(texture<uchar1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer)
{
  uint4 v = __utexfetchl(t, make_float4(x, y, 0, 0), layer);

  return make_uchar1(v.x);
}

static __forceinline __declspec(__device__) char2 tex2DLayered(texture<char2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer)
{
  int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer);

  return make_char2(v.x, v.y);
}

static __forceinline __declspec(__device__) uchar2 tex2DLayered(texture<uchar2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer)
{
  uint4 v = __utexfetchl(t, make_float4(x, y, 0, 0), layer);

  return make_uchar2(v.x, v.y);
}

static __forceinline __declspec(__device__) char4 tex2DLayered(texture<char4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer)
{
  int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer);

  return make_char4(v.x, v.y, v.z, v.w);
}

static __forceinline __declspec(__device__) uchar4 tex2DLayered(texture<uchar4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer)
{
  uint4 v = __utexfetchl(t, make_float4(x, y, 0, 0), layer);

  return make_uchar4(v.x, v.y, v.z, v.w);
}







static __forceinline __declspec(__device__) short tex2DLayered(texture<short, 0xF2, cudaReadModeElementType> t, float x, float y, int layer)
{
  int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer);

  return (short)v.x;
}

static __forceinline __declspec(__device__) unsigned short tex2DLayered(texture<unsigned short, 0xF2, cudaReadModeElementType> t, float x, float y, int layer)
{
  uint4 v = __utexfetchl(t, make_float4(x, y, 0, 0), layer);

  return (unsigned short)v.x;
}

static __forceinline __declspec(__device__) short1 tex2DLayered(texture<short1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer)
{
  int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer);

  return make_short1(v.x);
}

static __forceinline __declspec(__device__) ushort1 tex2DLayered(texture<ushort1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer)
{
  uint4 v = __utexfetchl(t, make_float4(x, y, 0, 0), layer);

  return make_ushort1(v.x);
}

static __forceinline __declspec(__device__) short2 tex2DLayered(texture<short2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer)
{
  int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer);

  return make_short2(v.x, v.y);
}

static __forceinline __declspec(__device__) ushort2 tex2DLayered(texture<ushort2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer)
{
  uint4 v = __utexfetchl(t, make_float4(x, y, 0, 0), layer);

  return make_ushort2(v.x, v.y);
}

static __forceinline __declspec(__device__) short4 tex2DLayered(texture<short4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer)
{
  int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer);

  return make_short4(v.x, v.y, v.z, v.w);
}

static __forceinline __declspec(__device__) ushort4 tex2DLayered(texture<ushort4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer)
{
  uint4 v = __utexfetchl(t, make_float4(x, y, 0, 0), layer);

  return make_ushort4(v.x, v.y, v.z, v.w);
}







static __forceinline __declspec(__device__) int tex2DLayered(texture<int, 0xF2, cudaReadModeElementType> t, float x, float y, int layer)
{
  int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer);

  return (int)v.x;
}

static __forceinline __declspec(__device__) unsigned int tex2DLayered(texture<unsigned int, 0xF2, cudaReadModeElementType> t, float x, float y, int layer)
{
  uint4 v = __utexfetchl(t, make_float4(x, y, 0, 0), layer);

  return (unsigned int)v.x;
}

static __forceinline __declspec(__device__) int1 tex2DLayered(texture<int1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer)
{
  int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer);

  return make_int1(v.x);
}

static __forceinline __declspec(__device__) uint1 tex2DLayered(texture<uint1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer)
{
  uint4 v = __utexfetchl(t, make_float4(x, y, 0, 0), layer);

  return make_uint1(v.x);
}

static __forceinline __declspec(__device__) int2 tex2DLayered(texture<int2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer)
{
  int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer);

  return make_int2(v.x, v.y);
}

static __forceinline __declspec(__device__) uint2 tex2DLayered(texture<uint2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer)
{
  uint4 v = __utexfetchl(t, make_float4(x, y, 0, 0), layer);

  return make_uint2(v.x, v.y);
}

static __forceinline __declspec(__device__) int4 tex2DLayered(texture<int4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer)
{
  int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer);

  return make_int4(v.x, v.y, v.z, v.w);
}

static __forceinline __declspec(__device__) uint4 tex2DLayered(texture<uint4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer)
{
  uint4 v = __utexfetchl(t, make_float4(x, y, 0, 0), layer);

  return make_uint4(v.x, v.y, v.z, v.w);
}









static __forceinline __declspec(__device__) long tex2DLayered(texture<long, 0xF2, cudaReadModeElementType> t, float x, float y, int layer)
{
  int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer);

  return (long)v.x;
}

static __forceinline __declspec(__device__) unsigned long tex2DLayered(texture<unsigned long, 0xF2, cudaReadModeElementType> t, float x, float y, int layer)
{
  uint4 v = __utexfetchl(t, make_float4(x, y, 0, 0), layer);

  return (unsigned long)v.x;
}

static __forceinline __declspec(__device__) long1 tex2DLayered(texture<long1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer)
{
  int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer);

  return make_long1(v.x);
}

static __forceinline __declspec(__device__) ulong1 tex2DLayered(texture<ulong1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer)
{
  uint4 v = __utexfetchl(t, make_float4(x, y, 0, 0), layer);

  return make_ulong1(v.x);
}

static __forceinline __declspec(__device__) long2 tex2DLayered(texture<long2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer)
{
  int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer);

  return make_long2(v.x, v.y);
}

static __forceinline __declspec(__device__) ulong2 tex2DLayered(texture<ulong2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer)
{
  uint4 v = __utexfetchl(t, make_float4(x, y, 0, 0), layer);

  return make_ulong2(v.x, v.y);
}

static __forceinline __declspec(__device__) long4 tex2DLayered(texture<long4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer)
{
  int4 v = __itexfetchl(t, make_float4(x, y, 0, 0), layer);

  return make_long4(v.x, v.y, v.z, v.w);
}

static __forceinline __declspec(__device__) ulong4 tex2DLayered(texture<ulong4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer)
{
  uint4 v = __utexfetchl(t, make_float4(x, y, 0, 0), layer);

  return make_ulong4(v.x, v.y, v.z, v.w);
}

#line 2154 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_fetch_functions.h"







static __forceinline __declspec(__device__) float tex2DLayered(texture<float, 0xF2, cudaReadModeElementType> t, float x, float y, int layer)
{
  float4 v = __ftexfetchl(t, make_float4(x, y, 0, 0), layer);

  return v.x;
}

static __forceinline __declspec(__device__) float1 tex2DLayered(texture<float1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer)
{
  float4 v = __ftexfetchl(t, make_float4(x, y, 0, 0), layer);

  return make_float1(v.x);
}

static __forceinline __declspec(__device__) float2 tex2DLayered(texture<float2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer)
{
  float4 v = __ftexfetchl(t, make_float4(x, y, 0, 0), layer);

  return make_float2(v.x, v.y);
}

static __forceinline __declspec(__device__) float4 tex2DLayered(texture<float4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer)
{
  float4 v = __ftexfetchl(t, make_float4(x, y, 0, 0), layer);

  return make_float4(v.x, v.y, v.z, v.w);
}







static __forceinline __declspec(__device__) float tex2DLayered(texture<char, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer)
{


#line 2200 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_fetch_functions.h"
  int4 v   = __itexfetchl(t, make_float4(x, y, 0, 0), layer);
#line 2202 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_fetch_functions.h"
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __forceinline __declspec(__device__) float tex2DLayered(texture<signed char, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer)
{
  int4 v   = __itexfetchl(t, make_float4(x, y, 0, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __forceinline __declspec(__device__) float tex2DLayered(texture<unsigned char, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer)
{
  uint4 v  = __utexfetchl(t, make_float4(x, y, 0, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __forceinline __declspec(__device__) float1 tex2DLayered(texture<char1, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer)
{
  int4 v   = __itexfetchl(t, make_float4(x, y, 0, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __forceinline __declspec(__device__) float1 tex2DLayered(texture<uchar1, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer)
{
  uint4 v  = __utexfetchl(t, make_float4(x, y, 0, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __forceinline __declspec(__device__) float2 tex2DLayered(texture<char2, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer)
{
  int4 v   = __itexfetchl(t, make_float4(x, y, 0, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __forceinline __declspec(__device__) float2 tex2DLayered(texture<uchar2, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer)
{
  uint4 v  = __utexfetchl(t, make_float4(x, y, 0, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __forceinline __declspec(__device__) float4 tex2DLayered(texture<char4, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer)
{
  int4 v   = __itexfetchl(t, make_float4(x, y, 0, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}

static __forceinline __declspec(__device__) float4 tex2DLayered(texture<uchar4, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer)
{
  uint4 v  = __utexfetchl(t, make_float4(x, y, 0, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}







static __forceinline __declspec(__device__) float tex2DLayered(texture<short, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer)
{
  int4 v   = __itexfetchl(t, make_float4(x, y, 0, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __forceinline __declspec(__device__) float tex2DLayered(texture<unsigned short, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer)
{
  uint4 v  = __utexfetchl(t, make_float4(x, y, 0, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __forceinline __declspec(__device__) float1 tex2DLayered(texture<short1, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer)
{
  int4 v   = __itexfetchl(t, make_float4(x, y, 0, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __forceinline __declspec(__device__) float1 tex2DLayered(texture<ushort1, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer)
{
  uint4 v  = __utexfetchl(t, make_float4(x, y, 0, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __forceinline __declspec(__device__) float2 tex2DLayered(texture<short2, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer)
{
  int4 v   = __itexfetchl(t, make_float4(x, y, 0, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __forceinline __declspec(__device__) float2 tex2DLayered(texture<ushort2, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer)
{
  uint4 v  = __utexfetchl(t, make_float4(x, y, 0, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __forceinline __declspec(__device__) float4 tex2DLayered(texture<short4, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer)
{
  int4 v   = __itexfetchl(t, make_float4(x, y, 0, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}

static __forceinline __declspec(__device__) float4 tex2DLayered(texture<ushort4, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer)
{
  uint4 v   = __utexfetchl(t, make_float4(x, y, 0, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}







static __forceinline __declspec(__device__) char tex3D(texture<char, 0x03, cudaReadModeElementType> t, float x, float y, float z)
{


#line 2352 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_fetch_functions.h"
  int4 v  = __itexfetch(t, make_float4(x, y, z, 0));
#line 2354 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_fetch_functions.h"

  return (char)v.x;
}

static __forceinline __declspec(__device__) signed char tex3D(texture<signed char, 0x03, cudaReadModeElementType> t, float x, float y, float z)
{
  int4 v = __itexfetch(t, make_float4(x, y, z, 0));

  return (signed char)v.x;
}

static __forceinline __declspec(__device__) unsigned char tex3D(texture<unsigned char, 0x03, cudaReadModeElementType> t, float x, float y, float z)
{
  uint4 v = __utexfetch(t, make_float4(x, y, z, 0));

  return (unsigned char)v.x;
}

static __forceinline __declspec(__device__) char1 tex3D(texture<char1, 0x03, cudaReadModeElementType> t, float x, float y, float z)
{
  int4 v = __itexfetch(t, make_float4(x, y, z, 0));

  return make_char1(v.x);
}

static __forceinline __declspec(__device__) uchar1 tex3D(texture<uchar1, 0x03, cudaReadModeElementType> t, float x, float y, float z)
{
  uint4 v = __utexfetch(t, make_float4(x, y, z, 0));

  return make_uchar1(v.x);
}

static __forceinline __declspec(__device__) char2 tex3D(texture<char2, 0x03, cudaReadModeElementType> t, float x, float y, float z)
{
  int4 v = __itexfetch(t, make_float4(x, y, z, 0));

  return make_char2(v.x, v.y);
}

static __forceinline __declspec(__device__) uchar2 tex3D(texture<uchar2, 0x03, cudaReadModeElementType> t, float x, float y, float z)
{
  uint4 v = __utexfetch(t, make_float4(x, y, z, 0));

  return make_uchar2(v.x, v.y);
}

static __forceinline __declspec(__device__) char4 tex3D(texture<char4, 0x03, cudaReadModeElementType> t, float x, float y, float z)
{
  int4 v = __itexfetch(t, make_float4(x, y, z, 0));

  return make_char4(v.x, v.y, v.z, v.w);
}

static __forceinline __declspec(__device__) uchar4 tex3D(texture<uchar4, 0x03, cudaReadModeElementType> t, float x, float y, float z)
{
  uint4 v = __utexfetch(t, make_float4(x, y, z, 0));

  return make_uchar4(v.x, v.y, v.z, v.w);
}







static __forceinline __declspec(__device__) short tex3D(texture<short, 0x03, cudaReadModeElementType> t, float x, float y, float z)
{
  int4 v = __itexfetch(t, make_float4(x, y, z, 0));

  return (short)v.x;
}

static __forceinline __declspec(__device__) unsigned short tex3D(texture<unsigned short, 0x03, cudaReadModeElementType> t, float x, float y, float z)
{
  uint4 v = __utexfetch(t, make_float4(x, y, z, 0));

  return (unsigned short)v.x;
}

static __forceinline __declspec(__device__) short1 tex3D(texture<short1, 0x03, cudaReadModeElementType> t, float x, float y, float z)
{
  int4 v = __itexfetch(t, make_float4(x, y, z, 0));

  return make_short1(v.x);
}

static __forceinline __declspec(__device__) ushort1 tex3D(texture<ushort1, 0x03, cudaReadModeElementType> t, float x, float y, float z)
{
  uint4 v = __utexfetch(t, make_float4(x, y, z, 0));

  return make_ushort1(v.x);
}

static __forceinline __declspec(__device__) short2 tex3D(texture<short2, 0x03, cudaReadModeElementType> t, float x, float y, float z)
{
  int4 v = __itexfetch(t, make_float4(x, y, z, 0));

  return make_short2(v.x, v.y);
}

static __forceinline __declspec(__device__) ushort2 tex3D(texture<ushort2, 0x03, cudaReadModeElementType> t, float x, float y, float z)
{
  uint4 v = __utexfetch(t, make_float4(x, y, z, 0));

  return make_ushort2(v.x, v.y);
}

static __forceinline __declspec(__device__) short4 tex3D(texture<short4, 0x03, cudaReadModeElementType> t, float x, float y, float z)
{
  int4 v = __itexfetch(t, make_float4(x, y, z, 0));

  return make_short4(v.x, v.y, v.z, v.w);
}

static __forceinline __declspec(__device__) ushort4 tex3D(texture<ushort4, 0x03, cudaReadModeElementType> t, float x, float y, float z)
{
  uint4 v = __utexfetch(t, make_float4(x, y, z, 0));

  return make_ushort4(v.x, v.y, v.z, v.w);
}







static __forceinline __declspec(__device__) int tex3D(texture<int, 0x03, cudaReadModeElementType> t, float x, float y, float z)
{
  int4 v = __itexfetch(t, make_float4(x, y, z, 0));

  return (int)v.x;
}

static __forceinline __declspec(__device__) unsigned int tex3D(texture<unsigned int, 0x03, cudaReadModeElementType> t, float x, float y, float z)
{
  uint4 v = __utexfetch(t, make_float4(x, y, z, 0));

  return (unsigned int)v.x;
}

static __forceinline __declspec(__device__) int1 tex3D(texture<int1, 0x03, cudaReadModeElementType> t, float x, float y, float z)
{
  int4 v = __itexfetch(t, make_float4(x, y, z, 0));

  return make_int1(v.x);
}

static __forceinline __declspec(__device__) uint1 tex3D(texture<uint1, 0x03, cudaReadModeElementType> t, float x, float y, float z)
{
  uint4 v = __utexfetch(t, make_float4(x, y, z, 0));

  return make_uint1(v.x);
}

static __forceinline __declspec(__device__) int2 tex3D(texture<int2, 0x03, cudaReadModeElementType> t, float x, float y, float z)
{
  int4 v = __itexfetch(t, make_float4(x, y, z, 0));

  return make_int2(v.x, v.y);
}

static __forceinline __declspec(__device__) uint2 tex3D(texture<uint2, 0x03, cudaReadModeElementType> t, float x, float y, float z)
{
  uint4 v = __utexfetch(t, make_float4(x, y, z, 0));

  return make_uint2(v.x, v.y);
}

static __forceinline __declspec(__device__) int4 tex3D(texture<int4, 0x03, cudaReadModeElementType> t, float x, float y, float z)
{
  int4 v = __itexfetch(t, make_float4(x, y, z, 0));

  return make_int4(v.x, v.y, v.z, v.w);
}

static __forceinline __declspec(__device__) uint4 tex3D(texture<uint4, 0x03, cudaReadModeElementType> t, float x, float y, float z)
{
  uint4 v = __utexfetch(t, make_float4(x, y, z, 0));

  return make_uint4(v.x, v.y, v.z, v.w);
}









static __forceinline __declspec(__device__) long tex3D(texture<long, 0x03, cudaReadModeElementType> t, float x, float y, float z)
{
  int4 v = __itexfetch(t, make_float4(x, y, z, 0));

  return (long)v.x;
}

static __forceinline __declspec(__device__) unsigned long tex3D(texture<unsigned long, 0x03, cudaReadModeElementType> t, float x, float y, float z)
{
  uint4 v = __utexfetch(t, make_float4(x, y, z, 0));

  return (unsigned long)v.x;
}

static __forceinline __declspec(__device__) long1 tex3D(texture<long1, 0x03, cudaReadModeElementType> t, float x, float y, float z)
{
  int4 v = __itexfetch(t, make_float4(x, y, z, 0));

  return make_long1(v.x);
}

static __forceinline __declspec(__device__) ulong1 tex3D(texture<ulong1, 0x03, cudaReadModeElementType> t, float x, float y, float z)
{
  uint4 v = __utexfetch(t, make_float4(x, y, z, 0));

  return make_ulong1(v.x);
}

static __forceinline __declspec(__device__) long2 tex3D(texture<long2, 0x03, cudaReadModeElementType> t, float x, float y, float z)
{
  int4 v = __itexfetch(t, make_float4(x, y, z, 0));

  return make_long2(v.x, v.y);
}

static __forceinline __declspec(__device__) ulong2 tex3D(texture<ulong2, 0x03, cudaReadModeElementType> t, float x, float y, float z)
{
  uint4 v = __utexfetch(t, make_float4(x, y, z, 0));

  return make_ulong2(v.x, v.y);
}

static __forceinline __declspec(__device__) long4 tex3D(texture<long4, 0x03, cudaReadModeElementType> t, float x, float y, float z)
{
  int4 v = __itexfetch(t, make_float4(x, y, z, 0));

  return make_long4(v.x, v.y, v.z, v.w);
}

static __forceinline __declspec(__device__) ulong4 tex3D(texture<ulong4, 0x03, cudaReadModeElementType> t, float x, float y, float z)
{
  uint4 v = __utexfetch(t, make_float4(x, y, z, 0));

  return make_ulong4(v.x, v.y, v.z, v.w);
}

#line 2603 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_fetch_functions.h"







static __forceinline __declspec(__device__) float tex3D(texture<float, 0x03, cudaReadModeElementType> t, float x, float y, float z)
{
  float4 v = __ftexfetch(t, make_float4(x, y, z, 0));

  return v.x;
}

static __forceinline __declspec(__device__) float1 tex3D(texture<float1, 0x03, cudaReadModeElementType> t, float x, float y, float z)
{
  float4 v = __ftexfetch(t, make_float4(x, y, z, 0));

  return make_float1(v.x);
}

static __forceinline __declspec(__device__) float2 tex3D(texture<float2, 0x03, cudaReadModeElementType> t, float x, float y, float z)
{
  float4 v = __ftexfetch(t, make_float4(x, y, z, 0));

  return make_float2(v.x, v.y);
}

static __forceinline __declspec(__device__) float4 tex3D(texture<float4, 0x03, cudaReadModeElementType> t, float x, float y, float z)
{
  float4 v = __ftexfetch(t, make_float4(x, y, z, 0));

  return make_float4(v.x, v.y, v.z, v.w);
}







static __forceinline __declspec(__device__) float tex3D(texture<char, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z)
{


#line 2649 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_fetch_functions.h"
  int4 v   = __itexfetch(t, make_float4(x, y, z, 0));
#line 2651 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_fetch_functions.h"
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __forceinline __declspec(__device__) float tex3D(texture<signed char, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z)
{
  int4 v   = __itexfetch(t, make_float4(x, y, z, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __forceinline __declspec(__device__) float tex3D(texture<unsigned char, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z)
{
  uint4 v  = __utexfetch(t, make_float4(x, y, z, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __forceinline __declspec(__device__) float1 tex3D(texture<char1, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z)
{
  int4 v   = __itexfetch(t, make_float4(x, y, z, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __forceinline __declspec(__device__) float1 tex3D(texture<uchar1, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z)
{
  uint4 v  = __utexfetch(t, make_float4(x, y, z, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __forceinline __declspec(__device__) float2 tex3D(texture<char2, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z)
{
  int4 v   = __itexfetch(t, make_float4(x, y, z, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __forceinline __declspec(__device__) float2 tex3D(texture<uchar2, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z)
{
  uint4 v  = __utexfetch(t, make_float4(x, y, z, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __forceinline __declspec(__device__) float4 tex3D(texture<char4, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z)
{
  int4 v   = __itexfetch(t, make_float4(x, y, z, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}

static __forceinline __declspec(__device__) float4 tex3D(texture<uchar4, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z)
{
  uint4 v  = __utexfetch(t, make_float4(x, y, z, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}







static __forceinline __declspec(__device__) float tex3D(texture<short, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z)
{
  int4 v   = __itexfetch(t, make_float4(x, y, z, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __forceinline __declspec(__device__) float tex3D(texture<unsigned short, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z)
{
  uint4 v  = __utexfetch(t, make_float4(x, y, z, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __forceinline __declspec(__device__) float1 tex3D(texture<short1, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z)
{
  int4 v   = __itexfetch(t, make_float4(x, y, z, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __forceinline __declspec(__device__) float1 tex3D(texture<ushort1, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z)
{
  uint4 v  = __utexfetch(t, make_float4(x, y, z, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __forceinline __declspec(__device__) float2 tex3D(texture<short2, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z)
{
  int4 v   = __itexfetch(t, make_float4(x, y, z, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __forceinline __declspec(__device__) float2 tex3D(texture<ushort2, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z)
{
  uint4 v  = __utexfetch(t, make_float4(x, y, z, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __forceinline __declspec(__device__) float4 tex3D(texture<short4, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z)
{
  int4 v   = __itexfetch(t, make_float4(x, y, z, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}

static __forceinline __declspec(__device__) float4 tex3D(texture<ushort4, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z)
{
  uint4 v   = __utexfetch(t, make_float4(x, y, z, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}







static __forceinline __declspec(__device__) char texCubemap(texture<char, 0x0C, cudaReadModeElementType> t, float x, float y, float z)
{


#line 2801 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_fetch_functions.h"
  int4 v  = __itexfetchc(t, make_float4(x, y, z, 0));
#line 2803 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_fetch_functions.h"

  return (char)v.x;
}

static __forceinline __declspec(__device__) signed char texCubemap(texture<signed char, 0x0C, cudaReadModeElementType> t, float x, float y, float z)
{
  int4 v = __itexfetchc(t, make_float4(x, y, z, 0));

  return (signed char)v.x;
}

static __forceinline __declspec(__device__) unsigned char texCubemap(texture<unsigned char, 0x0C, cudaReadModeElementType> t, float x, float y, float z)
{
  uint4 v = __utexfetchc(t, make_float4(x, y, z, 0));

  return (unsigned char)v.x;
}

static __forceinline __declspec(__device__) char1 texCubemap(texture<char1, 0x0C, cudaReadModeElementType> t, float x, float y, float z)
{
  int4 v = __itexfetchc(t, make_float4(x, y, z, 0));

  return make_char1(v.x);
}

static __forceinline __declspec(__device__) uchar1 texCubemap(texture<uchar1, 0x0C, cudaReadModeElementType> t, float x, float y, float z)
{
  uint4 v = __utexfetchc(t, make_float4(x, y, z, 0));

  return make_uchar1(v.x);
}

static __forceinline __declspec(__device__) char2 texCubemap(texture<char2, 0x0C, cudaReadModeElementType> t, float x, float y, float z)
{
  int4 v = __itexfetchc(t, make_float4(x, y, z, 0));

  return make_char2(v.x, v.y);
}

static __forceinline __declspec(__device__) uchar2 texCubemap(texture<uchar2, 0x0C, cudaReadModeElementType> t, float x, float y, float z)
{
  uint4 v = __utexfetchc(t, make_float4(x, y, z, 0));

  return make_uchar2(v.x, v.y);
}

static __forceinline __declspec(__device__) char4 texCubemap(texture<char4, 0x0C, cudaReadModeElementType> t, float x, float y, float z)
{
  int4 v = __itexfetchc(t, make_float4(x, y, z, 0));

  return make_char4(v.x, v.y, v.z, v.w);
}

static __forceinline __declspec(__device__) uchar4 texCubemap(texture<uchar4, 0x0C, cudaReadModeElementType> t, float x, float y, float z)
{
  uint4 v = __utexfetchc(t, make_float4(x, y, z, 0));

  return make_uchar4(v.x, v.y, v.z, v.w);
}







static __forceinline __declspec(__device__) short texCubemap(texture<short, 0x0C, cudaReadModeElementType> t, float x, float y, float z)
{
  int4 v = __itexfetchc(t, make_float4(x, y, z, 0));

  return (short)v.x;
}

static __forceinline __declspec(__device__) unsigned short texCubemap(texture<unsigned short, 0x0C, cudaReadModeElementType> t, float x, float y, float z)
{
  uint4 v = __utexfetchc(t, make_float4(x, y, z, 0));

  return (unsigned short)v.x;
}

static __forceinline __declspec(__device__) short1 texCubemap(texture<short1, 0x0C, cudaReadModeElementType> t, float x, float y, float z)
{
  int4 v = __itexfetchc(t, make_float4(x, y, z, 0));

  return make_short1(v.x);
}

static __forceinline __declspec(__device__) ushort1 texCubemap(texture<ushort1, 0x0C, cudaReadModeElementType> t, float x, float y, float z)
{
  uint4 v = __utexfetchc(t, make_float4(x, y, z, 0));

  return make_ushort1(v.x);
}

static __forceinline __declspec(__device__) short2 texCubemap(texture<short2, 0x0C, cudaReadModeElementType> t, float x, float y, float z)
{
  int4 v = __itexfetchc(t, make_float4(x, y, z, 0));

  return make_short2(v.x, v.y);
}

static __forceinline __declspec(__device__) ushort2 texCubemap(texture<ushort2, 0x0C, cudaReadModeElementType> t, float x, float y, float z)
{
  uint4 v = __utexfetchc(t, make_float4(x, y, z, 0));

  return make_ushort2(v.x, v.y);
}

static __forceinline __declspec(__device__) short4 texCubemap(texture<short4, 0x0C, cudaReadModeElementType> t, float x, float y, float z)
{
  int4 v = __itexfetchc(t, make_float4(x, y, z, 0));

  return make_short4(v.x, v.y, v.z, v.w);
}

static __forceinline __declspec(__device__) ushort4 texCubemap(texture<ushort4, 0x0C, cudaReadModeElementType> t, float x, float y, float z)
{
  uint4 v = __utexfetchc(t, make_float4(x, y, z, 0));

  return make_ushort4(v.x, v.y, v.z, v.w);
}







static __forceinline __declspec(__device__) int texCubemap(texture<int, 0x0C, cudaReadModeElementType> t, float x, float y, float z)
{
  int4 v = __itexfetchc(t, make_float4(x, y, z, 0));

  return (int)v.x;
}

static __forceinline __declspec(__device__) unsigned int texCubemap(texture<unsigned int, 0x0C, cudaReadModeElementType> t, float x, float y, float z)
{
  uint4 v = __utexfetchc(t, make_float4(x, y, z, 0));

  return (unsigned int)v.x;
}

static __forceinline __declspec(__device__) int1 texCubemap(texture<int1, 0x0C, cudaReadModeElementType> t, float x, float y, float z)
{
  int4 v = __itexfetchc(t, make_float4(x, y, z, 0));

  return make_int1(v.x);
}

static __forceinline __declspec(__device__) uint1 texCubemap(texture<uint1, 0x0C, cudaReadModeElementType> t, float x, float y, float z)
{
  uint4 v = __utexfetchc(t, make_float4(x, y, z, 0));

  return make_uint1(v.x);
}

static __forceinline __declspec(__device__) int2 texCubemap(texture<int2, 0x0C, cudaReadModeElementType> t, float x, float y, float z)
{
  int4 v = __itexfetchc(t, make_float4(x, y, z, 0));

  return make_int2(v.x, v.y);
}

static __forceinline __declspec(__device__) uint2 texCubemap(texture<uint2, 0x0C, cudaReadModeElementType> t, float x, float y, float z)
{
  uint4 v = __utexfetchc(t, make_float4(x, y, z, 0));

  return make_uint2(v.x, v.y);
}

static __forceinline __declspec(__device__) int4 texCubemap(texture<int4, 0x0C, cudaReadModeElementType> t, float x, float y, float z)
{
  int4 v = __itexfetchc(t, make_float4(x, y, z, 0));

  return make_int4(v.x, v.y, v.z, v.w);
}

static __forceinline __declspec(__device__) uint4 texCubemap(texture<uint4, 0x0C, cudaReadModeElementType> t, float x, float y, float z)
{
  uint4 v = __utexfetchc(t, make_float4(x, y, z, 0));

  return make_uint4(v.x, v.y, v.z, v.w);
}









static __forceinline __declspec(__device__) long texCubemap(texture<long, 0x0C, cudaReadModeElementType> t, float x, float y, float z)
{
  int4 v = __itexfetchc(t, make_float4(x, y, z, 0));

  return (long)v.x;
}

static __forceinline __declspec(__device__) unsigned long texCubemap(texture<unsigned long, 0x0C, cudaReadModeElementType> t, float x, float y, float z)
{
  uint4 v = __utexfetchc(t, make_float4(x, y, z, 0));

  return (unsigned long)v.x;
}

static __forceinline __declspec(__device__) long1 texCubemap(texture<long1, 0x0C, cudaReadModeElementType> t, float x, float y, float z)
{
  int4 v = __itexfetchc(t, make_float4(x, y, z, 0));

  return make_long1(v.x);
}

static __forceinline __declspec(__device__) ulong1 texCubemap(texture<ulong1, 0x0C, cudaReadModeElementType> t, float x, float y, float z)
{
  uint4 v = __utexfetchc(t, make_float4(x, y, z, 0));

  return make_ulong1(v.x);
}

static __forceinline __declspec(__device__) long2 texCubemap(texture<long2, 0x0C, cudaReadModeElementType> t, float x, float y, float z)
{
  int4 v = __itexfetchc(t, make_float4(x, y, z, 0));

  return make_long2(v.x, v.y);
}

static __forceinline __declspec(__device__) ulong2 texCubemap(texture<ulong2, 0x0C, cudaReadModeElementType> t, float x, float y, float z)
{
  uint4 v = __utexfetchc(t, make_float4(x, y, z, 0));

  return make_ulong2(v.x, v.y);
}

static __forceinline __declspec(__device__) long4 texCubemap(texture<long4, 0x0C, cudaReadModeElementType> t, float x, float y, float z)
{
  int4 v = __itexfetchc(t, make_float4(x, y, z, 0));

  return make_long4(v.x, v.y, v.z, v.w);
}

static __forceinline __declspec(__device__) ulong4 texCubemap(texture<ulong4, 0x0C, cudaReadModeElementType> t, float x, float y, float z)
{
  uint4 v = __utexfetchc(t, make_float4(x, y, z, 0));

  return make_ulong4(v.x, v.y, v.z, v.w);
}

#line 3052 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_fetch_functions.h"







static __forceinline __declspec(__device__) float texCubemap(texture<float, 0x0C, cudaReadModeElementType> t, float x, float y, float z)
{
  float4 v = __ftexfetchc(t, make_float4(x, y, z, 0));

  return v.x;
}

static __forceinline __declspec(__device__) float1 texCubemap(texture<float1, 0x0C, cudaReadModeElementType> t, float x, float y, float z)
{
  float4 v = __ftexfetchc(t, make_float4(x, y, z, 0));

  return make_float1(v.x);
}

static __forceinline __declspec(__device__) float2 texCubemap(texture<float2, 0x0C, cudaReadModeElementType> t, float x, float y, float z)
{
  float4 v = __ftexfetchc(t, make_float4(x, y, z, 0));

  return make_float2(v.x, v.y);
}

static __forceinline __declspec(__device__) float4 texCubemap(texture<float4, 0x0C, cudaReadModeElementType> t, float x, float y, float z)
{
  float4 v = __ftexfetchc(t, make_float4(x, y, z, 0));

  return make_float4(v.x, v.y, v.z, v.w);
}







static __forceinline __declspec(__device__) float texCubemap(texture<char, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z)
{


#line 3098 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_fetch_functions.h"
  int4 v   = __itexfetchc(t, make_float4(x, y, z, 0));
#line 3100 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_fetch_functions.h"
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __forceinline __declspec(__device__) float texCubemap(texture<signed char, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z)
{
  int4 v   = __itexfetchc(t, make_float4(x, y, z, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __forceinline __declspec(__device__) float texCubemap(texture<unsigned char, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z)
{
  uint4 v  = __utexfetchc(t, make_float4(x, y, z, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __forceinline __declspec(__device__) float1 texCubemap(texture<char1, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z)
{
  int4 v   = __itexfetchc(t, make_float4(x, y, z, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __forceinline __declspec(__device__) float1 texCubemap(texture<uchar1, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z)
{
  uint4 v  = __utexfetchc(t, make_float4(x, y, z, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __forceinline __declspec(__device__) float2 texCubemap(texture<char2, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z)
{
  int4 v   = __itexfetchc(t, make_float4(x, y, z, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __forceinline __declspec(__device__) float2 texCubemap(texture<uchar2, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z)
{
  uint4 v  = __utexfetchc(t, make_float4(x, y, z, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __forceinline __declspec(__device__) float4 texCubemap(texture<char4, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z)
{
  int4 v   = __itexfetchc(t, make_float4(x, y, z, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}

static __forceinline __declspec(__device__) float4 texCubemap(texture<uchar4, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z)
{
  uint4 v  = __utexfetchc(t, make_float4(x, y, z, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}







static __forceinline __declspec(__device__) float texCubemap(texture<short, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z)
{
  int4 v   = __itexfetchc(t, make_float4(x, y, z, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __forceinline __declspec(__device__) float texCubemap(texture<unsigned short, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z)
{
  uint4 v  = __utexfetchc(t, make_float4(x, y, z, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __forceinline __declspec(__device__) float1 texCubemap(texture<short1, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z)
{
  int4 v   = __itexfetchc(t, make_float4(x, y, z, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __forceinline __declspec(__device__) float1 texCubemap(texture<ushort1, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z)
{
  uint4 v  = __utexfetchc(t, make_float4(x, y, z, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __forceinline __declspec(__device__) float2 texCubemap(texture<short2, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z)
{
  int4 v   = __itexfetchc(t, make_float4(x, y, z, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __forceinline __declspec(__device__) float2 texCubemap(texture<ushort2, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z)
{
  uint4 v  = __utexfetchc(t, make_float4(x, y, z, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __forceinline __declspec(__device__) float4 texCubemap(texture<short4, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z)
{
  int4 v   = __itexfetchc(t, make_float4(x, y, z, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}

static __forceinline __declspec(__device__) float4 texCubemap(texture<ushort4, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z)
{
  uint4 v   = __utexfetchc(t, make_float4(x, y, z, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}







static __forceinline __declspec(__device__) char texCubemapLayered(texture<char, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer)
{


#line 3250 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_fetch_functions.h"
  int4 v  = __itexfetchlc(t, make_float4(x, y, z, 0), layer);
#line 3252 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_fetch_functions.h"

  return (char)v.x;
}

static __forceinline __declspec(__device__) signed char texCubemapLayered(texture<signed char, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer)
{
  int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer);

  return (signed char)v.x;
}

static __forceinline __declspec(__device__) unsigned char texCubemapLayered(texture<unsigned char, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer)
{
  uint4 v = __utexfetchlc(t, make_float4(x, y, z, 0), layer);

  return (unsigned char)v.x;
}

static __forceinline __declspec(__device__) char1 texCubemapLayered(texture<char1, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer)
{
  int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer);

  return make_char1(v.x);
}

static __forceinline __declspec(__device__) uchar1 texCubemapLayered(texture<uchar1, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer)
{
  uint4 v = __utexfetchlc(t, make_float4(x, y, z, 0), layer);

  return make_uchar1(v.x);
}

static __forceinline __declspec(__device__) char2 texCubemapLayered(texture<char2, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer)
{
  int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer);

  return make_char2(v.x, v.y);
}

static __forceinline __declspec(__device__) uchar2 texCubemapLayered(texture<uchar2, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer)
{
  uint4 v = __utexfetchlc(t, make_float4(x, y, z, 0), layer);

  return make_uchar2(v.x, v.y);
}

static __forceinline __declspec(__device__) char4 texCubemapLayered(texture<char4, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer)
{
  int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer);

  return make_char4(v.x, v.y, v.z, v.w);
}

static __forceinline __declspec(__device__) uchar4 texCubemapLayered(texture<uchar4, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer)
{
  uint4 v = __utexfetchlc(t, make_float4(x, y, z, 0), layer);

  return make_uchar4(v.x, v.y, v.z, v.w);
}







static __forceinline __declspec(__device__) short texCubemapLayered(texture<short, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer)
{
  int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer);

  return (short)v.x;
}

static __forceinline __declspec(__device__) unsigned short texCubemapLayered(texture<unsigned short, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer)
{
  uint4 v = __utexfetchlc(t, make_float4(x, y, z, 0), layer);

  return (unsigned short)v.x;
}

static __forceinline __declspec(__device__) short1 texCubemapLayered(texture<short1, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer)
{
  int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer);

  return make_short1(v.x);
}

static __forceinline __declspec(__device__) ushort1 texCubemapLayered(texture<ushort1, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer)
{
  uint4 v = __utexfetchlc(t, make_float4(x, y, z, 0), layer);

  return make_ushort1(v.x);
}

static __forceinline __declspec(__device__) short2 texCubemapLayered(texture<short2, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer)
{
  int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer);

  return make_short2(v.x, v.y);
}

static __forceinline __declspec(__device__) ushort2 texCubemapLayered(texture<ushort2, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer)
{
  uint4 v = __utexfetchlc(t, make_float4(x, y, z, 0), layer);

  return make_ushort2(v.x, v.y);
}

static __forceinline __declspec(__device__) short4 texCubemapLayered(texture<short4, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer)
{
  int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer);

  return make_short4(v.x, v.y, v.z, v.w);
}

static __forceinline __declspec(__device__) ushort4 texCubemapLayered(texture<ushort4, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer)
{
  uint4 v = __utexfetchlc(t, make_float4(x, y, z, 0), layer);

  return make_ushort4(v.x, v.y, v.z, v.w);
}







static __forceinline __declspec(__device__) int texCubemapLayered(texture<int, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer)
{
  int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer);

  return (int)v.x;
}

static __forceinline __declspec(__device__) unsigned int texCubemapLayered(texture<unsigned int, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer)
{
  uint4 v = __utexfetchlc(t, make_float4(x, y, z, 0), layer);

  return (unsigned int)v.x;
}

static __forceinline __declspec(__device__) int1 texCubemapLayered(texture<int1, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer)
{
  int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer);

  return make_int1(v.x);
}

static __forceinline __declspec(__device__) uint1 texCubemapLayered(texture<uint1, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer)
{
  uint4 v = __utexfetchlc(t, make_float4(x, y, z, 0), layer);

  return make_uint1(v.x);
}

static __forceinline __declspec(__device__) int2 texCubemapLayered(texture<int2, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer)
{
  int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer);

  return make_int2(v.x, v.y);
}

static __forceinline __declspec(__device__) uint2 texCubemapLayered(texture<uint2, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer)
{
  uint4 v = __utexfetchlc(t, make_float4(x, y, z, 0), layer);

  return make_uint2(v.x, v.y);
}

static __forceinline __declspec(__device__) int4 texCubemapLayered(texture<int4, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer)
{
  int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer);

  return make_int4(v.x, v.y, v.z, v.w);
}

static __forceinline __declspec(__device__) uint4 texCubemapLayered(texture<uint4, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer)
{
  uint4 v = __utexfetchlc(t, make_float4(x, y, z, 0), layer);

  return make_uint4(v.x, v.y, v.z, v.w);
}









static __forceinline __declspec(__device__) long texCubemapLayered(texture<long, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer)
{
  int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer);

  return (long)v.x;
}

static __forceinline __declspec(__device__) unsigned long texCubemapLayered(texture<unsigned long, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer)
{
  uint4 v = __utexfetchlc(t, make_float4(x, y, z, 0), layer);

  return (unsigned long)v.x;
}

static __forceinline __declspec(__device__) long1 texCubemapLayered(texture<long1, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer)
{
  int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer);

  return make_long1(v.x);
}

static __forceinline __declspec(__device__) ulong1 texCubemapLayered(texture<ulong1, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer)
{
  uint4 v = __utexfetchlc(t, make_float4(x, y, z, 0), layer);

  return make_ulong1(v.x);
}

static __forceinline __declspec(__device__) long2 texCubemapLayered(texture<long2, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer)
{
  int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer);

  return make_long2(v.x, v.y);
}

static __forceinline __declspec(__device__) ulong2 texCubemapLayered(texture<ulong2, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer)
{
  uint4 v = __utexfetchlc(t, make_float4(x, y, z, 0), layer);

  return make_ulong2(v.x, v.y);
}

static __forceinline __declspec(__device__) long4 texCubemapLayered(texture<long4, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer)
{
  int4 v = __itexfetchlc(t, make_float4(x, y, z, 0), layer);

  return make_long4(v.x, v.y, v.z, v.w);
}

static __forceinline __declspec(__device__) ulong4 texCubemapLayered(texture<ulong4, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer)
{
  uint4 v = __utexfetchlc(t, make_float4(x, y, z, 0), layer);

  return make_ulong4(v.x, v.y, v.z, v.w);
}

#line 3501 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_fetch_functions.h"







static __forceinline __declspec(__device__) float texCubemapLayered(texture<float, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer)
{
  float4 v = __ftexfetchlc(t, make_float4(x, y, z, 0), layer);

  return v.x;
}

static __forceinline __declspec(__device__) float1 texCubemapLayered(texture<float1, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer)
{
  float4 v = __ftexfetchlc(t, make_float4(x, y, z, 0), layer);

  return make_float1(v.x);
}

static __forceinline __declspec(__device__) float2 texCubemapLayered(texture<float2, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer)
{
  float4 v = __ftexfetchlc(t, make_float4(x, y, z, 0), layer);

  return make_float2(v.x, v.y);
}

static __forceinline __declspec(__device__) float4 texCubemapLayered(texture<float4, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer)
{
  float4 v = __ftexfetchlc(t, make_float4(x, y, z, 0), layer);

  return make_float4(v.x, v.y, v.z, v.w);
}







static __forceinline __declspec(__device__) float texCubemapLayered(texture<char, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer)
{


#line 3547 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_fetch_functions.h"
  int4 v   = __itexfetchlc(t, make_float4(x, y, z, 0), layer);
#line 3549 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_fetch_functions.h"
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __forceinline __declspec(__device__) float texCubemapLayered(texture<signed char, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer)
{
  int4 v   = __itexfetchlc(t, make_float4(x, y, z, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __forceinline __declspec(__device__) float texCubemapLayered(texture<unsigned char, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer)
{
  uint4 v  = __utexfetchlc(t, make_float4(x, y, z, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __forceinline __declspec(__device__) float1 texCubemapLayered(texture<char1, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer)
{
  int4 v   = __itexfetchlc(t, make_float4(x, y, z, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __forceinline __declspec(__device__) float1 texCubemapLayered(texture<uchar1, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer)
{
  uint4 v  = __utexfetchlc(t, make_float4(x, y, z, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __forceinline __declspec(__device__) float2 texCubemapLayered(texture<char2, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer)
{
  int4 v   = __itexfetchlc(t, make_float4(x, y, z, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __forceinline __declspec(__device__) float2 texCubemapLayered(texture<uchar2, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer)
{
  uint4 v  = __utexfetchlc(t, make_float4(x, y, z, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __forceinline __declspec(__device__) float4 texCubemapLayered(texture<char4, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer)
{
  int4 v   = __itexfetchlc(t, make_float4(x, y, z, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}

static __forceinline __declspec(__device__) float4 texCubemapLayered(texture<uchar4, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer)
{
  uint4 v  = __utexfetchlc(t, make_float4(x, y, z, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}







static __forceinline __declspec(__device__) float texCubemapLayered(texture<short, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer)
{
  int4 v   = __itexfetchlc(t, make_float4(x, y, z, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __forceinline __declspec(__device__) float texCubemapLayered(texture<unsigned short, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer)
{
  uint4 v  = __utexfetchlc(t, make_float4(x, y, z, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __forceinline __declspec(__device__) float1 texCubemapLayered(texture<short1, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer)
{
  int4 v   = __itexfetchlc(t, make_float4(x, y, z, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __forceinline __declspec(__device__) float1 texCubemapLayered(texture<ushort1, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer)
{
  uint4 v  = __utexfetchlc(t, make_float4(x, y, z, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __forceinline __declspec(__device__) float2 texCubemapLayered(texture<short2, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer)
{
  int4 v   = __itexfetchlc(t, make_float4(x, y, z, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __forceinline __declspec(__device__) float2 texCubemapLayered(texture<ushort2, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer)
{
  uint4 v  = __utexfetchlc(t, make_float4(x, y, z, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __forceinline __declspec(__device__) float4 texCubemapLayered(texture<short4, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer)
{
  int4 v   = __itexfetchlc(t, make_float4(x, y, z, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}

static __forceinline __declspec(__device__) float4 texCubemapLayered(texture<ushort4, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer)
{
  uint4 v   = __utexfetchlc(t, make_float4(x, y, z, 0), layer);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}






















































































#line 3774 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_fetch_functions.h"











template<int comp, class T, enum cudaTextureReadMode readMode> extern __declspec(__device__) __declspec(__device_builtin__)   int4 __itex2Dgather(texture<T, 0x02, readMode> t, float2 i, int c = comp);
template<int comp, class T, enum cudaTextureReadMode readMode> extern __declspec(__device__) __declspec(__device_builtin__)  uint4 __utex2Dgather(texture<T, 0x02, readMode> t, float2 i, int c = comp);
template<int comp, class T, enum cudaTextureReadMode readMode> extern __declspec(__device__) __declspec(__device_builtin__) float4 __ftex2Dgather(texture<T, 0x02, readMode> t, float2 i, int c = comp);



















static __forceinline __declspec(__device__) char4 tex2Dgather(texture<char, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0)
{
  { int4 v = __itex2Dgather<0>(t, make_float2(x, y)); return make_char4(v.x, v.y, v.z, v.w); };
}

static __forceinline __declspec(__device__) char4 tex2Dgather(texture<signed char, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0)
{
  { int4 v = __itex2Dgather<0>(t, make_float2(x, y)); return make_char4(v.x, v.y, v.z, v.w); };
}

static __forceinline __declspec(__device__) uchar4 tex2Dgather(texture<unsigned char, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0)
{
  { uint4 v = __utex2Dgather<0>(t, make_float2(x, y)); return make_uchar4(v.x, v.y, v.z, v.w); };
}

static __forceinline __declspec(__device__) char4 tex2Dgather(texture<char1, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0)
{
  { int4 v = __itex2Dgather<0>(t, make_float2(x, y)); return make_char4(v.x, v.y, v.z, v.w); };
}

static __forceinline __declspec(__device__) uchar4 tex2Dgather(texture<uchar1, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0)
{
  { uint4 v = __utex2Dgather<0>(t, make_float2(x, y)); return make_uchar4(v.x, v.y, v.z, v.w); };
}

static __forceinline __declspec(__device__) char4 tex2Dgather(texture<char2, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0)
{
  if (comp == 1) { int4 v = __itex2Dgather<1>(t, make_float2(x, y)); return make_char4(v.x, v.y, v.z, v.w); } else { int4 v = __itex2Dgather<0>(t, make_float2(x, y)); return make_char4(v.x, v.y, v.z, v.w); };
}

static __forceinline __declspec(__device__) uchar4 tex2Dgather(texture<uchar2, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0)
{
  if (comp == 1) { uint4 v = __utex2Dgather<1>(t, make_float2(x, y)); return make_uchar4(v.x, v.y, v.z, v.w); } else { uint4 v = __utex2Dgather<0>(t, make_float2(x, y)); return make_uchar4(v.x, v.y, v.z, v.w); };
}

static __forceinline __declspec(__device__) char4 tex2Dgather(texture<char3, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0)
{
  if (comp == 2) { int4 v = __itex2Dgather<2>(t, make_float2(x, y)); return make_char4(v.x, v.y, v.z, v.w); } else if (comp == 1) { int4 v = __itex2Dgather<1>(t, make_float2(x, y)); return make_char4(v.x, v.y, v.z, v.w); } else { int4 v = __itex2Dgather<0>(t, make_float2(x, y)); return make_char4(v.x, v.y, v.z, v.w); };
}

static __forceinline __declspec(__device__) uchar4 tex2Dgather(texture<uchar3, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0)
{
  if (comp == 2) { uint4 v = __utex2Dgather<2>(t, make_float2(x, y)); return make_uchar4(v.x, v.y, v.z, v.w); } else if (comp == 1) { uint4 v = __utex2Dgather<1>(t, make_float2(x, y)); return make_uchar4(v.x, v.y, v.z, v.w); } else { uint4 v = __utex2Dgather<0>(t, make_float2(x, y)); return make_uchar4(v.x, v.y, v.z, v.w); };
}

static __forceinline __declspec(__device__) char4 tex2Dgather(texture<char4, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0)
{
  if (comp == 3) { int4 v = __itex2Dgather<3>(t, make_float2(x, y)); return make_char4(v.x, v.y, v.z, v.w); } else if (comp == 2) { int4 v = __itex2Dgather<2>(t, make_float2(x, y)); return make_char4(v.x, v.y, v.z, v.w); } else if (comp == 1) { int4 v = __itex2Dgather<1>(t, make_float2(x, y)); return make_char4(v.x, v.y, v.z, v.w); } else { int4 v = __itex2Dgather<0>(t, make_float2(x, y)); return make_char4(v.x, v.y, v.z, v.w); };
}

static __forceinline __declspec(__device__) uchar4 tex2Dgather(texture<uchar4, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0)
{
  if (comp == 3) { uint4 v = __utex2Dgather<3>(t, make_float2(x, y)); return make_uchar4(v.x, v.y, v.z, v.w); } else if (comp == 2) { uint4 v = __utex2Dgather<2>(t, make_float2(x, y)); return make_uchar4(v.x, v.y, v.z, v.w); } else if (comp == 1) { uint4 v = __utex2Dgather<1>(t, make_float2(x, y)); return make_uchar4(v.x, v.y, v.z, v.w); } else { uint4 v = __utex2Dgather<0>(t, make_float2(x, y)); return make_uchar4(v.x, v.y, v.z, v.w); };
}

static __forceinline __declspec(__device__) short4 tex2Dgather(texture<signed short, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0)
{
  { int4 v = __itex2Dgather<0>(t, make_float2(x, y)); return make_short4(v.x, v.y, v.z, v.w); };
}

static __forceinline __declspec(__device__) ushort4 tex2Dgather(texture<unsigned short, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0)
{
  { uint4 v = __utex2Dgather<0>(t, make_float2(x, y)); return make_ushort4(v.x, v.y, v.z, v.w); };
}

static __forceinline __declspec(__device__) short4 tex2Dgather(texture<short1, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0)
{
  { int4 v = __itex2Dgather<0>(t, make_float2(x, y)); return make_short4(v.x, v.y, v.z, v.w); };
}

static __forceinline __declspec(__device__) ushort4 tex2Dgather(texture<ushort1, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0)
{
  { uint4 v = __utex2Dgather<0>(t, make_float2(x, y)); return make_ushort4(v.x, v.y, v.z, v.w); };
}

static __forceinline __declspec(__device__) short4 tex2Dgather(texture<short2, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0)
{
  if (comp == 1) { int4 v = __itex2Dgather<1>(t, make_float2(x, y)); return make_short4(v.x, v.y, v.z, v.w); } else { int4 v = __itex2Dgather<0>(t, make_float2(x, y)); return make_short4(v.x, v.y, v.z, v.w); };
}

static __forceinline __declspec(__device__) ushort4 tex2Dgather(texture<ushort2, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0)
{
  if (comp == 1) { uint4 v = __utex2Dgather<1>(t, make_float2(x, y)); return make_ushort4(v.x, v.y, v.z, v.w); } else { uint4 v = __utex2Dgather<0>(t, make_float2(x, y)); return make_ushort4(v.x, v.y, v.z, v.w); };
}

static __forceinline __declspec(__device__) short4 tex2Dgather(texture<short3, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0)
{
  if (comp == 2) { int4 v = __itex2Dgather<2>(t, make_float2(x, y)); return make_short4(v.x, v.y, v.z, v.w); } else if (comp == 1) { int4 v = __itex2Dgather<1>(t, make_float2(x, y)); return make_short4(v.x, v.y, v.z, v.w); } else { int4 v = __itex2Dgather<0>(t, make_float2(x, y)); return make_short4(v.x, v.y, v.z, v.w); };
}

static __forceinline __declspec(__device__) ushort4 tex2Dgather(texture<ushort3, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0)
{
  if (comp == 2) { uint4 v = __utex2Dgather<2>(t, make_float2(x, y)); return make_ushort4(v.x, v.y, v.z, v.w); } else if (comp == 1) { uint4 v = __utex2Dgather<1>(t, make_float2(x, y)); return make_ushort4(v.x, v.y, v.z, v.w); } else { uint4 v = __utex2Dgather<0>(t, make_float2(x, y)); return make_ushort4(v.x, v.y, v.z, v.w); };
}

static __forceinline __declspec(__device__) short4 tex2Dgather(texture<short4, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0)
{
  if (comp == 3) { int4 v = __itex2Dgather<3>(t, make_float2(x, y)); return make_short4(v.x, v.y, v.z, v.w); } else if (comp == 2) { int4 v = __itex2Dgather<2>(t, make_float2(x, y)); return make_short4(v.x, v.y, v.z, v.w); } else if (comp == 1) { int4 v = __itex2Dgather<1>(t, make_float2(x, y)); return make_short4(v.x, v.y, v.z, v.w); } else { int4 v = __itex2Dgather<0>(t, make_float2(x, y)); return make_short4(v.x, v.y, v.z, v.w); };
}

static __forceinline __declspec(__device__) ushort4 tex2Dgather(texture<ushort4, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0)
{
  if (comp == 3) { uint4 v = __utex2Dgather<3>(t, make_float2(x, y)); return make_ushort4(v.x, v.y, v.z, v.w); } else if (comp == 2) { uint4 v = __utex2Dgather<2>(t, make_float2(x, y)); return make_ushort4(v.x, v.y, v.z, v.w); } else if (comp == 1) { uint4 v = __utex2Dgather<1>(t, make_float2(x, y)); return make_ushort4(v.x, v.y, v.z, v.w); } else { uint4 v = __utex2Dgather<0>(t, make_float2(x, y)); return make_ushort4(v.x, v.y, v.z, v.w); };
}

static __forceinline __declspec(__device__) int4 tex2Dgather(texture<signed int, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0)
{
  { int4 v = __itex2Dgather<0>(t, make_float2(x, y)); return v; };
}

static __forceinline __declspec(__device__) uint4 tex2Dgather(texture<unsigned int, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0)
{
  { uint4 v = __utex2Dgather<0>(t, make_float2(x, y)); return v; };
}

static __forceinline __declspec(__device__) int4 tex2Dgather(texture<int1, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0)
{
  { int4 v = __itex2Dgather<0>(t, make_float2(x, y)); return v; };
}

static __forceinline __declspec(__device__) uint4 tex2Dgather(texture<uint1, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0)
{
  { uint4 v = __utex2Dgather<0>(t, make_float2(x, y)); return v; };
}

static __forceinline __declspec(__device__) int4 tex2Dgather(texture<int2, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0)
{
  if (comp == 1) { int4 v = __itex2Dgather<1>(t, make_float2(x, y)); return v; } else { int4 v = __itex2Dgather<0>(t, make_float2(x, y)); return v; };
}

static __forceinline __declspec(__device__) uint4 tex2Dgather(texture<uint2, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0)
{
  if (comp == 1) { uint4 v = __utex2Dgather<1>(t, make_float2(x, y)); return v; } else { uint4 v = __utex2Dgather<0>(t, make_float2(x, y)); return v; };
}

static __forceinline __declspec(__device__) int4 tex2Dgather(texture<int3, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0)
{
  if (comp == 2) { int4 v = __itex2Dgather<2>(t, make_float2(x, y)); return v; } else if (comp == 1) { int4 v = __itex2Dgather<1>(t, make_float2(x, y)); return v; } else { int4 v = __itex2Dgather<0>(t, make_float2(x, y)); return v; };
}

static __forceinline __declspec(__device__) uint4 tex2Dgather(texture<uint3, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0)
{
  if (comp == 2) { uint4 v = __utex2Dgather<2>(t, make_float2(x, y)); return v; } else if (comp == 1) { uint4 v = __utex2Dgather<1>(t, make_float2(x, y)); return v; } else { uint4 v = __utex2Dgather<0>(t, make_float2(x, y)); return v; };
}

static __forceinline __declspec(__device__) int4 tex2Dgather(texture<int4, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0)
{
  if (comp == 3) { int4 v = __itex2Dgather<3>(t, make_float2(x, y)); return v; } else if (comp == 2) { int4 v = __itex2Dgather<2>(t, make_float2(x, y)); return v; } else if (comp == 1) { int4 v = __itex2Dgather<1>(t, make_float2(x, y)); return v; } else { int4 v = __itex2Dgather<0>(t, make_float2(x, y)); return v; };
}

static __forceinline __declspec(__device__) uint4 tex2Dgather(texture<uint4, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0)
{
  if (comp == 3) { uint4 v = __utex2Dgather<3>(t, make_float2(x, y)); return v; } else if (comp == 2) { uint4 v = __utex2Dgather<2>(t, make_float2(x, y)); return v; } else if (comp == 1) { uint4 v = __utex2Dgather<1>(t, make_float2(x, y)); return v; } else { uint4 v = __utex2Dgather<0>(t, make_float2(x, y)); return v; };
}

static __forceinline __declspec(__device__) float4 tex2Dgather(texture<float, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0)
{
  { float4 v = __ftex2Dgather<0>(t, make_float2(x, y)); return v; };
}

static __forceinline __declspec(__device__) float4 tex2Dgather(texture<float1, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0)
{
  { float4 v = __ftex2Dgather<0>(t, make_float2(x, y)); return v; };
}

static __forceinline __declspec(__device__) float4 tex2Dgather(texture<float2, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0)
{
  if (comp == 1) { float4 v = __ftex2Dgather<1>(t, make_float2(x, y)); return v; } else { float4 v = __ftex2Dgather<0>(t, make_float2(x, y)); return v; };
}

static __forceinline __declspec(__device__) float4 tex2Dgather(texture<float3, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0)
{
  if (comp == 2) { float4 v = __ftex2Dgather<2>(t, make_float2(x, y)); return v; } else if (comp == 1) { float4 v = __ftex2Dgather<1>(t, make_float2(x, y)); return v; } else { float4 v = __ftex2Dgather<0>(t, make_float2(x, y)); return v; };
}

static __forceinline __declspec(__device__) float4 tex2Dgather(texture<float4, 0x02, cudaReadModeElementType> t, float x, float y, int comp = 0)
{
  if (comp == 3) { float4 v = __ftex2Dgather<3>(t, make_float2(x, y)); return v; } else if (comp == 2) { float4 v = __ftex2Dgather<2>(t, make_float2(x, y)); return v; } else if (comp == 1) { float4 v = __ftex2Dgather<1>(t, make_float2(x, y)); return v; } else { float4 v = __ftex2Dgather<0>(t, make_float2(x, y)); return v; };
}








static __forceinline __declspec(__device__) float4 tex2Dgather(texture<char, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, int comp = 0)
{
  { int4 v = __itex2Dgather<0>(t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); };
}

static __forceinline __declspec(__device__) float4 tex2Dgather(texture<signed char, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, int comp = 0)
{
  { int4 v = __itex2Dgather<0>(t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); };
}

static __forceinline __declspec(__device__) float4 tex2Dgather(texture<unsigned char, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, int comp = 0)
{
  { uint4 v = __utex2Dgather<0>(t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); };
}

static __forceinline __declspec(__device__) float4 tex2Dgather(texture<char1, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, int comp = 0)
{
  { int4 v = __itex2Dgather<0>(t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); };
}

static __forceinline __declspec(__device__) float4 tex2Dgather(texture<uchar1, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, int comp = 0)
{
  { uint4 v = __utex2Dgather<0>(t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); };
}

static __forceinline __declspec(__device__) float4 tex2Dgather(texture<char2, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, int comp = 0)
{
  if (comp == 1) { int4 v = __itex2Dgather<1>(t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } else { int4 v = __itex2Dgather<0>(t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); };
}

static __forceinline __declspec(__device__) float4 tex2Dgather(texture<uchar2, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, int comp = 0)
{
  if (comp == 1) { uint4 v = __utex2Dgather<1>(t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } else { uint4 v = __utex2Dgather<0>(t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); };
}

static __forceinline __declspec(__device__) float4 tex2Dgather(texture<char3, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, int comp = 0)
{
  if (comp == 2) { int4 v = __itex2Dgather<2>(t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } else if (comp == 1) { int4 v = __itex2Dgather<1>(t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } else { int4 v = __itex2Dgather<0>(t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); };
}

static __forceinline __declspec(__device__) float4 tex2Dgather(texture<uchar3, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, int comp = 0)
{
  if (comp == 2) { uint4 v = __utex2Dgather<2>(t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } else if (comp == 1) { uint4 v = __utex2Dgather<1>(t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } else { uint4 v = __utex2Dgather<0>(t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); };
}

static __forceinline __declspec(__device__) float4 tex2Dgather(texture<char4, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, int comp = 0)
{
  if (comp == 3) { int4 v = __itex2Dgather<3>(t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } else if (comp == 2) { int4 v = __itex2Dgather<2>(t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } else if (comp == 1) { int4 v = __itex2Dgather<1>(t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } else { int4 v = __itex2Dgather<0>(t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); };
}

static __forceinline __declspec(__device__) float4 tex2Dgather(texture<uchar4, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, int comp = 0)
{
  if (comp == 3) { uint4 v = __utex2Dgather<3>(t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } else if (comp == 2) { uint4 v = __utex2Dgather<2>(t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } else if (comp == 1) { uint4 v = __utex2Dgather<1>(t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } else { uint4 v = __utex2Dgather<0>(t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); };
}

static __forceinline __declspec(__device__) float4 tex2Dgather(texture<signed short, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, int comp = 0)
{
  { int4 v = __itex2Dgather<0>(t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); };
}

static __forceinline __declspec(__device__) float4 tex2Dgather(texture<unsigned short, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, int comp = 0)
{
  { uint4 v = __utex2Dgather<0>(t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); };
}

static __forceinline __declspec(__device__) float4 tex2Dgather(texture<short1, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, int comp = 0)
{
  { int4 v = __itex2Dgather<0>(t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); };
}

static __forceinline __declspec(__device__) float4 tex2Dgather(texture<ushort1, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, int comp = 0)
{
  { uint4 v = __utex2Dgather<0>(t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); };
}

static __forceinline __declspec(__device__) float4 tex2Dgather(texture<short2, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, int comp = 0)
{
  if (comp == 1) { int4 v = __itex2Dgather<1>(t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } else { int4 v = __itex2Dgather<0>(t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); };
}

static __forceinline __declspec(__device__) float4 tex2Dgather(texture<ushort2, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, int comp = 0)
{
  if (comp == 1) { uint4 v = __utex2Dgather<1>(t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } else { uint4 v = __utex2Dgather<0>(t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); };
}

static __forceinline __declspec(__device__) float4 tex2Dgather(texture<short3, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, int comp = 0)
{
  if (comp == 2) { int4 v = __itex2Dgather<2>(t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } else if (comp == 1) { int4 v = __itex2Dgather<1>(t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } else { int4 v = __itex2Dgather<0>(t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); };
}

static __forceinline __declspec(__device__) float4 tex2Dgather(texture<ushort3, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, int comp = 0)
{
  if (comp == 2) { uint4 v = __utex2Dgather<2>(t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } else if (comp == 1) { uint4 v = __utex2Dgather<1>(t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } else { uint4 v = __utex2Dgather<0>(t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); };
}

static __forceinline __declspec(__device__) float4 tex2Dgather(texture<short4, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, int comp = 0)
{
  if (comp == 3) { int4 v = __itex2Dgather<3>(t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } else if (comp == 2) { int4 v = __itex2Dgather<2>(t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } else if (comp == 1) { int4 v = __itex2Dgather<1>(t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } else { int4 v = __itex2Dgather<0>(t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); };
}

static __forceinline __declspec(__device__) float4 tex2Dgather(texture<ushort4, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, int comp = 0)
{
  if (comp == 3) { uint4 v = __utex2Dgather<3>(t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } else if (comp == 2) { uint4 v = __utex2Dgather<2>(t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } else if (comp == 1) { uint4 v = __utex2Dgather<1>(t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); } else { uint4 v = __utex2Dgather<0>(t, make_float2(x, y)); return make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w)); };
}







template<class T, int texType, enum cudaTextureReadMode readMode> extern __declspec(__device__) __declspec(__device_builtin__)  uint4 __utexfetchlod(texture<T, texType, readMode> t, float4 i, float level, int d = texType);
template<class T, int texType, enum cudaTextureReadMode readMode> extern __declspec(__device__) __declspec(__device_builtin__)   int4 __itexfetchlod(texture<T, texType, readMode> t, float4 i, float level, int d = texType);
template<class T, int texType, enum cudaTextureReadMode readMode> extern __declspec(__device__) __declspec(__device_builtin__) float4 __ftexfetchlod(texture<T, texType, readMode> t, float4 i, float level, int d = texType);
template<class T, int texType, enum cudaTextureReadMode readMode> extern __declspec(__device__) __declspec(__device_builtin__)  uint4 __utexfetchlodc(texture<T, texType, readMode> t, float4 i, float level);
template<class T, int texType, enum cudaTextureReadMode readMode> extern __declspec(__device__) __declspec(__device_builtin__)   int4 __itexfetchlodc(texture<T, texType, readMode> t, float4 i, float level);
template<class T, int texType, enum cudaTextureReadMode readMode> extern __declspec(__device__) __declspec(__device_builtin__) float4 __ftexfetchlodc(texture<T, texType, readMode> t, float4 i, float level);
template<class T, int texType, enum cudaTextureReadMode readMode> extern __declspec(__device__) __declspec(__device_builtin__)  uint4 __utexfetchlodl(texture<T, texType, readMode> t, float4 i, int l, float level, int d = (texType & 0xF));
template<class T, int texType, enum cudaTextureReadMode readMode> extern __declspec(__device__) __declspec(__device_builtin__)   int4 __itexfetchlodl(texture<T, texType, readMode> t, float4 i, int l, float level, int d = (texType & 0xF));
template<class T, int texType, enum cudaTextureReadMode readMode> extern __declspec(__device__) __declspec(__device_builtin__) float4 __ftexfetchlodl(texture<T, texType, readMode> t, float4 i, int l, float level, int d = (texType & 0xF));
template<class T, int texType, enum cudaTextureReadMode readMode> extern __declspec(__device__) __declspec(__device_builtin__)  uint4 __utexfetchlodlc(texture<T, texType, readMode> t, float4 i, int l, float level);
template<class T, int texType, enum cudaTextureReadMode readMode> extern __declspec(__device__) __declspec(__device_builtin__)   int4 __itexfetchlodlc(texture<T, texType, readMode> t, float4 i, int l, float level);
template<class T, int texType, enum cudaTextureReadMode readMode> extern __declspec(__device__) __declspec(__device_builtin__) float4 __ftexfetchlodlc(texture<T, texType, readMode> t, float4 i, int l, float level);







static __forceinline __declspec(__device__) char tex1DLod(texture<char, 0x01, cudaReadModeElementType> t, float x, float level)
{


#line 4129 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_fetch_functions.h"
  int4 v  = __itexfetchlod(t, make_float4(x, 0, 0, 0), level);
#line 4131 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_fetch_functions.h"

  return (char)v.x;
}

static __forceinline __declspec(__device__) signed char tex1DLod(texture<signed char, 0x01, cudaReadModeElementType> t, float x, float level)
{
  int4 v = __itexfetchlod(t, make_float4(x, 0, 0, 0), level);

  return (signed char)v.x;
}

static __forceinline __declspec(__device__) unsigned char tex1DLod(texture<unsigned char, 0x01, cudaReadModeElementType> t, float x, float level)
{
  uint4 v = __utexfetchlod(t, make_float4(x, 0, 0, 0), level);

  return (unsigned char)v.x;
}

static __forceinline __declspec(__device__) char1 tex1DLod(texture<char1, 0x01, cudaReadModeElementType> t, float x, float level)
{
  int4 v = __itexfetchlod(t, make_float4(x, 0, 0, 0), level);

  return make_char1(v.x);
}

static __forceinline __declspec(__device__) uchar1 tex1DLod(texture<uchar1, 0x01, cudaReadModeElementType> t, float x, float level)
{
  uint4 v = __utexfetchlod(t, make_float4(x, 0, 0, 0), level);

  return make_uchar1(v.x);
}

static __forceinline __declspec(__device__) char2 tex1DLod(texture<char2, 0x01, cudaReadModeElementType> t, float x, float level)
{
  int4 v = __itexfetchlod(t, make_float4(x, 0, 0, 0), level);

  return make_char2(v.x, v.y);
}

static __forceinline __declspec(__device__) uchar2 tex1DLod(texture<uchar2, 0x01, cudaReadModeElementType> t, float x, float level)
{
  uint4 v = __utexfetchlod(t, make_float4(x, 0, 0, 0), level);

  return make_uchar2(v.x, v.y);
}

static __forceinline __declspec(__device__) char4 tex1DLod(texture<char4, 0x01, cudaReadModeElementType> t, float x, float level)
{
  int4 v = __itexfetchlod(t, make_float4(x, 0, 0, 0), level);

  return make_char4(v.x, v.y, v.z, v.w);
}

static __forceinline __declspec(__device__) uchar4 tex1DLod(texture<uchar4, 0x01, cudaReadModeElementType> t, float x, float level)
{
  uint4 v = __utexfetchlod(t, make_float4(x, 0, 0, 0), level);

  return make_uchar4(v.x, v.y, v.z, v.w);
}







static __forceinline __declspec(__device__) short tex1DLod(texture<short, 0x01, cudaReadModeElementType> t, float x, float level)
{
  int4 v = __itexfetchlod(t, make_float4(x, 0, 0, 0), level);

  return (short)v.x;
}

static __forceinline __declspec(__device__) unsigned short tex1DLod(texture<unsigned short, 0x01, cudaReadModeElementType> t, float x, float level)
{
  uint4 v = __utexfetchlod(t, make_float4(x, 0, 0, 0), level);

  return (unsigned short)v.x;
}

static __forceinline __declspec(__device__) short1 tex1DLod(texture<short1, 0x01, cudaReadModeElementType> t, float x, float level)
{
  int4 v = __itexfetchlod(t, make_float4(x, 0, 0, 0), level);

  return make_short1(v.x);
}

static __forceinline __declspec(__device__) ushort1 tex1DLod(texture<ushort1, 0x01, cudaReadModeElementType> t, float x, float level)
{
  uint4 v = __utexfetchlod(t, make_float4(x, 0, 0, 0), level);

  return make_ushort1(v.x);
}

static __forceinline __declspec(__device__) short2 tex1DLod(texture<short2, 0x01, cudaReadModeElementType> t, float x, float level)
{
  int4 v = __itexfetchlod(t, make_float4(x, 0, 0, 0), level);

  return make_short2(v.x, v.y);
}

static __forceinline __declspec(__device__) ushort2 tex1DLod(texture<ushort2, 0x01, cudaReadModeElementType> t, float x, float level)
{
  uint4 v = __utexfetchlod(t, make_float4(x, 0, 0, 0), level);

  return make_ushort2(v.x, v.y);
}

static __forceinline __declspec(__device__) short4 tex1DLod(texture<short4, 0x01, cudaReadModeElementType> t, float x, float level)
{
  int4 v = __itexfetchlod(t, make_float4(x, 0, 0, 0), level);

  return make_short4(v.x, v.y, v.z, v.w);
}

static __forceinline __declspec(__device__) ushort4 tex1DLod(texture<ushort4, 0x01, cudaReadModeElementType> t, float x, float level)
{
  uint4 v = __utexfetchlod(t, make_float4(x, 0, 0, 0), level);

  return make_ushort4(v.x, v.y, v.z, v.w);
}







static __forceinline __declspec(__device__) int tex1DLod(texture<int, 0x01, cudaReadModeElementType> t, float x, float level)
{
  int4 v = __itexfetchlod(t, make_float4(x, 0, 0, 0), level);

  return (int)v.x;
}

static __forceinline __declspec(__device__) unsigned int tex1DLod(texture<unsigned int, 0x01, cudaReadModeElementType> t, float x, float level)
{
  uint4 v = __utexfetchlod(t, make_float4(x, 0, 0, 0), level);

  return (unsigned int)v.x;
}

static __forceinline __declspec(__device__) int1 tex1DLod(texture<int1, 0x01, cudaReadModeElementType> t, float x, float level)
{
  int4 v = __itexfetchlod(t, make_float4(x, 0, 0, 0), level);

  return make_int1(v.x);
}

static __forceinline __declspec(__device__) uint1 tex1DLod(texture<uint1, 0x01, cudaReadModeElementType> t, float x, float level)
{
  uint4 v = __utexfetchlod(t, make_float4(x, 0, 0, 0), level);

  return make_uint1(v.x);
}

static __forceinline __declspec(__device__) int2 tex1DLod(texture<int2, 0x01, cudaReadModeElementType> t, float x, float level)
{
  int4 v = __itexfetchlod(t, make_float4(x, 0, 0, 0), level);

  return make_int2(v.x, v.y);
}

static __forceinline __declspec(__device__) uint2 tex1DLod(texture<uint2, 0x01, cudaReadModeElementType> t, float x, float level)
{
  uint4 v = __utexfetchlod(t, make_float4(x, 0, 0, 0), level);

  return make_uint2(v.x, v.y);
}

static __forceinline __declspec(__device__) int4 tex1DLod(texture<int4, 0x01, cudaReadModeElementType> t, float x, float level)
{
  int4 v = __itexfetchlod(t, make_float4(x, 0, 0, 0), level);

  return make_int4(v.x, v.y, v.z, v.w);
}

static __forceinline __declspec(__device__) uint4 tex1DLod(texture<uint4, 0x01, cudaReadModeElementType> t, float x, float level)
{
  uint4 v = __utexfetchlod(t, make_float4(x, 0, 0, 0), level);

  return make_uint4(v.x, v.y, v.z, v.w);
}















static __forceinline __declspec(__device__) long tex1DLod(texture<long, 0x01, cudaReadModeElementType> t, float x, float level)
{
  int4 v = __itexfetchlod(t, make_float4(x, 0, 0, 0), level);

  return (long)v.x;
}

static __forceinline __declspec(__device__) unsigned long tex1DLod(texture<unsigned long, 0x01, cudaReadModeElementType> t, float x, float level)
{
  uint4 v = __utexfetchlod(t, make_float4(x, 0, 0, 0), level);

  return (unsigned long)v.x;
}

static __forceinline __declspec(__device__) long1 tex1DLod(texture<long1, 0x01, cudaReadModeElementType> t, float x, float level)
{
  int4 v = __itexfetchlod(t, make_float4(x, 0, 0, 0), level);

  return make_long1(v.x);
}

static __forceinline __declspec(__device__) ulong1 tex1DLod(texture<ulong1, 0x01, cudaReadModeElementType> t, float x, float level)
{
  uint4 v = __utexfetchlod(t, make_float4(x, 0, 0, 0), level);

  return make_ulong1(v.x);
}

static __forceinline __declspec(__device__) long2 tex1DLod(texture<long2, 0x01, cudaReadModeElementType> t, float x, float level)
{
  int4 v = __itexfetchlod(t, make_float4(x, 0, 0, 0), level);

  return make_long2(v.x, v.y);
}

static __forceinline __declspec(__device__) ulong2 tex1DLod(texture<ulong2, 0x01, cudaReadModeElementType> t, float x, float level)
{
  uint4 v = __utexfetchlod(t, make_float4(x, 0, 0, 0), level);

  return make_ulong2(v.x, v.y);
}

static __forceinline __declspec(__device__) long4 tex1DLod(texture<long4, 0x01, cudaReadModeElementType> t, float x, float level)
{
  int4 v = __itexfetchlod(t, make_float4(x, 0, 0, 0), level);

  return make_long4(v.x, v.y, v.z, v.w);
}

static __forceinline __declspec(__device__) ulong4 tex1DLod(texture<ulong4, 0x01, cudaReadModeElementType> t, float x, float level)
{
  uint4 v = __utexfetchlod(t, make_float4(x, 0, 0, 0), level);

  return make_ulong4(v.x, v.y, v.z, v.w);
}

#line 4386 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_fetch_functions.h"







static __forceinline __declspec(__device__) float tex1DLod(texture<float, 0x01, cudaReadModeElementType> t, float x, float level)
{
  float4 v = __ftexfetchlod(t, make_float4(x, 0, 0, 0), level);

  return v.x;
}

static __forceinline __declspec(__device__) float1 tex1DLod(texture<float1, 0x01, cudaReadModeElementType> t, float x, float level)
{
  float4 v = __ftexfetchlod(t, make_float4(x, 0, 0, 0), level);

  return make_float1(v.x);
}

static __forceinline __declspec(__device__) float2 tex1DLod(texture<float2, 0x01, cudaReadModeElementType> t, float x, float level)
{
  float4 v = __ftexfetchlod(t, make_float4(x, 0, 0, 0), level);

  return make_float2(v.x, v.y);
}

static __forceinline __declspec(__device__) float4 tex1DLod(texture<float4, 0x01, cudaReadModeElementType> t, float x, float level)
{
  float4 v = __ftexfetchlod(t, make_float4(x, 0, 0, 0), level);

  return make_float4(v.x, v.y, v.z, v.w);
}







static __forceinline __declspec(__device__) float tex1DLod(texture<char, 0x01, cudaReadModeNormalizedFloat> t, float x, float level)
{


#line 4432 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_fetch_functions.h"
  int4 v   = __itexfetchlod(t, make_float4(x, 0, 0, 0), level);
#line 4434 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_fetch_functions.h"
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __forceinline __declspec(__device__) float tex1DLod(texture<signed char, 0x01, cudaReadModeNormalizedFloat> t, float x, float level)
{
  int4 v   = __itexfetchlod(t, make_float4(x, 0, 0, 0), level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __forceinline __declspec(__device__) float tex1DLod(texture<unsigned char, 0x01, cudaReadModeNormalizedFloat> t, float x, float level)
{
  uint4 v  = __utexfetchlod(t, make_float4(x, 0, 0, 0), level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __forceinline __declspec(__device__) float1 tex1DLod(texture<char1, 0x01, cudaReadModeNormalizedFloat> t, float x, float level)
{
  int4 v   = __itexfetchlod(t, make_float4(x, 0, 0, 0), level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __forceinline __declspec(__device__) float1 tex1DLod(texture<uchar1, 0x01, cudaReadModeNormalizedFloat> t, float x, float level)
{
  uint4 v  = __utexfetchlod(t, make_float4(x, 0, 0, 0), level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __forceinline __declspec(__device__) float2 tex1DLod(texture<char2, 0x01, cudaReadModeNormalizedFloat> t, float x, float level)
{
  int4 v   = __itexfetchlod(t, make_float4(x, 0, 0, 0), level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __forceinline __declspec(__device__) float2 tex1DLod(texture<uchar2, 0x01, cudaReadModeNormalizedFloat> t, float x, float level)
{
  uint4 v  = __utexfetchlod(t, make_float4(x, 0, 0, 0), level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __forceinline __declspec(__device__) float4 tex1DLod(texture<char4, 0x01, cudaReadModeNormalizedFloat> t, float x, float level)
{
  int4 v   = __itexfetchlod(t, make_float4(x, 0, 0, 0), level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}

static __forceinline __declspec(__device__) float4 tex1DLod(texture<uchar4, 0x01, cudaReadModeNormalizedFloat> t, float x, float level)
{
  uint4 v  = __utexfetchlod(t, make_float4(x, 0, 0, 0), level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}







static __forceinline __declspec(__device__) float tex1DLod(texture<short, 0x01, cudaReadModeNormalizedFloat> t, float x, float level)
{
  int4 v   = __itexfetchlod(t, make_float4(x, 0, 0, 0), level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __forceinline __declspec(__device__) float tex1DLod(texture<unsigned short, 0x01, cudaReadModeNormalizedFloat> t, float x, float level)
{
  uint4 v  = __utexfetchlod(t, make_float4(x, 0, 0, 0), level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __forceinline __declspec(__device__) float1 tex1DLod(texture<short1, 0x01, cudaReadModeNormalizedFloat> t, float x, float level)
{
  int4 v   = __itexfetchlod(t, make_float4(x, 0, 0, 0), level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __forceinline __declspec(__device__) float1 tex1DLod(texture<ushort1, 0x01, cudaReadModeNormalizedFloat> t, float x, float level)
{
  uint4 v  = __utexfetchlod(t, make_float4(x, 0, 0, 0), level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __forceinline __declspec(__device__) float2 tex1DLod(texture<short2, 0x01, cudaReadModeNormalizedFloat> t, float x, float level)
{
  int4 v   = __itexfetchlod(t, make_float4(x, 0, 0, 0), level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __forceinline __declspec(__device__) float2 tex1DLod(texture<ushort2, 0x01, cudaReadModeNormalizedFloat> t, float x, float level)
{
  uint4 v  = __utexfetchlod(t, make_float4(x, 0, 0, 0), level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __forceinline __declspec(__device__) float4 tex1DLod(texture<short4, 0x01, cudaReadModeNormalizedFloat> t, float x, float level)
{
  int4 v   = __itexfetchlod(t, make_float4(x, 0, 0, 0), level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}

static __forceinline __declspec(__device__) float4 tex1DLod(texture<ushort4, 0x01, cudaReadModeNormalizedFloat> t, float x, float level)
{
  uint4 v   = __utexfetchlod(t, make_float4(x, 0, 0, 0), level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}







static __forceinline __declspec(__device__) char tex2DLod(texture<char, 0x02, cudaReadModeElementType> t, float x, float y, float level)
{


#line 4584 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_fetch_functions.h"
  int4 v  = __itexfetchlod(t, make_float4(x, y, 0, 0), level);
#line 4586 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_fetch_functions.h"

  return (char)v.x;
}

static __forceinline __declspec(__device__) signed char tex2DLod(texture<signed char, 0x02, cudaReadModeElementType> t, float x, float y, float level)
{
  int4 v = __itexfetchlod(t, make_float4(x, y, 0, 0), level);

  return (signed char)v.x;
}

static __forceinline __declspec(__device__) unsigned char tex2DLod(texture<unsigned char, 0x02, cudaReadModeElementType> t, float x, float y, float level)
{
  uint4 v = __utexfetchlod(t, make_float4(x, y, 0, 0), level);

  return (unsigned char)v.x;
}

static __forceinline __declspec(__device__) char1 tex2DLod(texture<char1, 0x02, cudaReadModeElementType> t, float x, float y, float level)
{
  int4 v = __itexfetchlod(t, make_float4(x, y, 0, 0), level);

  return make_char1(v.x);
}

static __forceinline __declspec(__device__) uchar1 tex2DLod(texture<uchar1, 0x02, cudaReadModeElementType> t, float x, float y, float level)
{
  uint4 v = __utexfetchlod(t, make_float4(x, y, 0, 0), level);

  return make_uchar1(v.x);
}

static __forceinline __declspec(__device__) char2 tex2DLod(texture<char2, 0x02, cudaReadModeElementType> t, float x, float y, float level)
{
  int4 v = __itexfetchlod(t, make_float4(x, y, 0, 0), level);

  return make_char2(v.x, v.y);
}

static __forceinline __declspec(__device__) uchar2 tex2DLod(texture<uchar2, 0x02, cudaReadModeElementType> t, float x, float y, float level)
{
  uint4 v = __utexfetchlod(t, make_float4(x, y, 0, 0), level);

  return make_uchar2(v.x, v.y);
}

static __forceinline __declspec(__device__) char4 tex2DLod(texture<char4, 0x02, cudaReadModeElementType> t, float x, float y, float level)
{
  int4 v = __itexfetchlod(t, make_float4(x, y, 0, 0), level);

  return make_char4(v.x, v.y, v.z, v.w);
}

static __forceinline __declspec(__device__) uchar4 tex2DLod(texture<uchar4, 0x02, cudaReadModeElementType> t, float x, float y, float level)
{
  uint4 v = __utexfetchlod(t, make_float4(x, y, 0, 0), level);

  return make_uchar4(v.x, v.y, v.z, v.w);
}







static __forceinline __declspec(__device__) short tex2DLod(texture<short, 0x02, cudaReadModeElementType> t, float x, float y, float level)
{
  int4 v = __itexfetchlod(t, make_float4(x, y, 0, 0), level);

  return (short)v.x;
}

static __forceinline __declspec(__device__) unsigned short tex2DLod(texture<unsigned short, 0x02, cudaReadModeElementType> t, float x, float y, float level)
{
  uint4 v = __utexfetchlod(t, make_float4(x, y, 0, 0), level);

  return (unsigned short)v.x;
}

static __forceinline __declspec(__device__) short1 tex2DLod(texture<short1, 0x02, cudaReadModeElementType> t, float x, float y, float level)
{
  int4 v = __itexfetchlod(t, make_float4(x, y, 0, 0), level);

  return make_short1(v.x);
}

static __forceinline __declspec(__device__) ushort1 tex2DLod(texture<ushort1, 0x02, cudaReadModeElementType> t, float x, float y, float level)
{
  uint4 v = __utexfetchlod(t, make_float4(x, y, 0, 0), level);

  return make_ushort1(v.x);
}

static __forceinline __declspec(__device__) short2 tex2DLod(texture<short2, 0x02, cudaReadModeElementType> t, float x, float y, float level)
{
  int4 v = __itexfetchlod(t, make_float4(x, y, 0, 0), level);

  return make_short2(v.x, v.y);
}

static __forceinline __declspec(__device__) ushort2 tex2DLod(texture<ushort2, 0x02, cudaReadModeElementType> t, float x, float y, float level)
{
  uint4 v = __utexfetchlod(t, make_float4(x, y, 0, 0), level);

  return make_ushort2(v.x, v.y);
}

static __forceinline __declspec(__device__) short4 tex2DLod(texture<short4, 0x02, cudaReadModeElementType> t, float x, float y, float level)
{
  int4 v = __itexfetchlod(t, make_float4(x, y, 0, 0), level);

  return make_short4(v.x, v.y, v.z, v.w);
}

static __forceinline __declspec(__device__) ushort4 tex2DLod(texture<ushort4, 0x02, cudaReadModeElementType> t, float x, float y, float level)
{
  uint4 v = __utexfetchlod(t, make_float4(x, y, 0, 0), level);

  return make_ushort4(v.x, v.y, v.z, v.w);
}







static __forceinline __declspec(__device__) int tex2DLod(texture<int, 0x02, cudaReadModeElementType> t, float x, float y, float level)
{
  int4 v = __itexfetchlod(t, make_float4(x, y, 0, 0), level);

  return (int)v.x;
}

static __forceinline __declspec(__device__) unsigned int tex2DLod(texture<unsigned int, 0x02, cudaReadModeElementType> t, float x, float y, float level)
{
  uint4 v = __utexfetchlod(t, make_float4(x, y, 0, 0), level);

  return (unsigned int)v.x;
}

static __forceinline __declspec(__device__) int1 tex2DLod(texture<int1, 0x02, cudaReadModeElementType> t, float x, float y, float level)
{
  int4 v = __itexfetchlod(t, make_float4(x, y, 0, 0), level);

  return make_int1(v.x);
}

static __forceinline __declspec(__device__) uint1 tex2DLod(texture<uint1, 0x02, cudaReadModeElementType> t, float x, float y, float level)
{
  uint4 v = __utexfetchlod(t, make_float4(x, y, 0, 0), level);

  return make_uint1(v.x);
}

static __forceinline __declspec(__device__) int2 tex2DLod(texture<int2, 0x02, cudaReadModeElementType> t, float x, float y, float level)
{
  int4 v = __itexfetchlod(t, make_float4(x, y, 0, 0), level);

  return make_int2(v.x, v.y);
}

static __forceinline __declspec(__device__) uint2 tex2DLod(texture<uint2, 0x02, cudaReadModeElementType> t, float x, float y, float level)
{
  uint4 v = __utexfetchlod(t, make_float4(x, y, 0, 0), level);

  return make_uint2(v.x, v.y);
}

static __forceinline __declspec(__device__) int4 tex2DLod(texture<int4, 0x02, cudaReadModeElementType> t, float x, float y, float level)
{
  int4 v = __itexfetchlod(t, make_float4(x, y, 0, 0), level);

  return make_int4(v.x, v.y, v.z, v.w);
}

static __forceinline __declspec(__device__) uint4 tex2DLod(texture<uint4, 0x02, cudaReadModeElementType> t, float x, float y, float level)
{
  uint4 v = __utexfetchlod(t, make_float4(x, y, 0, 0), level);

  return make_uint4(v.x, v.y, v.z, v.w);
}









static __forceinline __declspec(__device__) long tex2DLod(texture<long, 0x02, cudaReadModeElementType> t, float x, float y, float level)
{
  int4 v = __itexfetchlod(t, make_float4(x, y, 0, 0), level);

  return (long)v.x;
}

static __forceinline __declspec(__device__) unsigned long tex2DLod(texture<unsigned long, 0x02, cudaReadModeElementType> t, float x, float y, float level)
{
  uint4 v = __utexfetchlod(t, make_float4(x, y, 0, 0), level);

  return (unsigned long)v.x;
}

static __forceinline __declspec(__device__) long1 tex2DLod(texture<long1, 0x02, cudaReadModeElementType> t, float x, float y, float level)
{
  int4 v = __itexfetchlod(t, make_float4(x, y, 0, 0), level);

  return make_long1(v.x);
}

static __forceinline __declspec(__device__) ulong1 tex2DLod(texture<ulong1, 0x02, cudaReadModeElementType> t, float x, float y, float level)
{
  uint4 v = __utexfetchlod(t, make_float4(x, y, 0, 0), level);

  return make_ulong1(v.x);
}

static __forceinline __declspec(__device__) long2 tex2DLod(texture<long2, 0x02, cudaReadModeElementType> t, float x, float y, float level)
{
  int4 v = __itexfetchlod(t, make_float4(x, y, 0, 0), level);

  return make_long2(v.x, v.y);
}

static __forceinline __declspec(__device__) ulong2 tex2DLod(texture<ulong2, 0x02, cudaReadModeElementType> t, float x, float y, float level)
{
  uint4 v = __utexfetchlod(t, make_float4(x, y, 0, 0), level);

  return make_ulong2(v.x, v.y);
}

static __forceinline __declspec(__device__) long4 tex2DLod(texture<long4, 0x02, cudaReadModeElementType> t, float x, float y, float level)
{
  int4 v = __itexfetchlod(t, make_float4(x, y, 0, 0), level);

  return make_long4(v.x, v.y, v.z, v.w);
}

static __forceinline __declspec(__device__) ulong4 tex2DLod(texture<ulong4, 0x02, cudaReadModeElementType> t, float x, float y, float level)
{
  uint4 v = __utexfetchlod(t, make_float4(x, y, 0, 0), level);

  return make_ulong4(v.x, v.y, v.z, v.w);
}

#line 4835 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_fetch_functions.h"







static __forceinline __declspec(__device__) float tex2DLod(texture<float, 0x02, cudaReadModeElementType> t, float x, float y, float level)
{
  float4 v = __ftexfetchlod(t, make_float4(x, y, 0, 0), level);

  return v.x;
}

static __forceinline __declspec(__device__) float1 tex2DLod(texture<float1, 0x02, cudaReadModeElementType> t, float x, float y, float level)
{
  float4 v = __ftexfetchlod(t, make_float4(x, y, 0, 0), level);

  return make_float1(v.x);
}

static __forceinline __declspec(__device__) float2 tex2DLod(texture<float2, 0x02, cudaReadModeElementType> t, float x, float y, float level)
{
  float4 v = __ftexfetchlod(t, make_float4(x, y, 0, 0), level);

  return make_float2(v.x, v.y);
}

static __forceinline __declspec(__device__) float4 tex2DLod(texture<float4, 0x02, cudaReadModeElementType> t, float x, float y, float level)
{
  float4 v = __ftexfetchlod(t, make_float4(x, y, 0, 0), level);

  return make_float4(v.x, v.y, v.z, v.w);
}







static __forceinline __declspec(__device__) float tex2DLod(texture<char, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float level)
{


#line 4881 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_fetch_functions.h"
  int4 v   = __itexfetchlod(t, make_float4(x, y, 0, 0), level);
#line 4883 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_fetch_functions.h"
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __forceinline __declspec(__device__) float tex2DLod(texture<signed char, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float level)
{
  int4 v   = __itexfetchlod(t, make_float4(x, y, 0, 0), level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __forceinline __declspec(__device__) float tex2DLod(texture<unsigned char, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float level)
{
  uint4 v  = __utexfetchlod(t, make_float4(x, y, 0, 0), level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __forceinline __declspec(__device__) float1 tex2DLod(texture<char1, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float level)
{
  int4 v   = __itexfetchlod(t, make_float4(x, y, 0, 0), level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __forceinline __declspec(__device__) float1 tex2DLod(texture<uchar1, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float level)
{
  uint4 v  = __utexfetchlod(t, make_float4(x, y, 0, 0), level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __forceinline __declspec(__device__) float2 tex2DLod(texture<char2, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float level)
{
  int4 v   = __itexfetchlod(t, make_float4(x, y, 0, 0), level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __forceinline __declspec(__device__) float2 tex2DLod(texture<uchar2, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float level)
{
  uint4 v  = __utexfetchlod(t, make_float4(x, y, 0, 0), level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __forceinline __declspec(__device__) float4 tex2DLod(texture<char4, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float level)
{
  int4 v   = __itexfetchlod(t, make_float4(x, y, 0, 0), level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}

static __forceinline __declspec(__device__) float4 tex2DLod(texture<uchar4, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float level)
{
  uint4 v  = __utexfetchlod(t, make_float4(x, y, 0, 0), level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}







static __forceinline __declspec(__device__) float tex2DLod(texture<short, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float level)
{
  int4 v   = __itexfetchlod(t, make_float4(x, y, 0, 0), level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __forceinline __declspec(__device__) float tex2DLod(texture<unsigned short, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float level)
{
  uint4 v  = __utexfetchlod(t, make_float4(x, y, 0, 0), level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __forceinline __declspec(__device__) float1 tex2DLod(texture<short1, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float level)
{
  int4 v   = __itexfetchlod(t, make_float4(x, y, 0, 0), level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __forceinline __declspec(__device__) float1 tex2DLod(texture<ushort1, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float level)
{
  uint4 v  = __utexfetchlod(t, make_float4(x, y, 0, 0), level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __forceinline __declspec(__device__) float2 tex2DLod(texture<short2, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float level)
{
  int4 v   = __itexfetchlod(t, make_float4(x, y, 0, 0), level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __forceinline __declspec(__device__) float2 tex2DLod(texture<ushort2, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float level)
{
  uint4 v  = __utexfetchlod(t, make_float4(x, y, 0, 0), level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __forceinline __declspec(__device__) float4 tex2DLod(texture<short4, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float level)
{
  int4 v   = __itexfetchlod(t, make_float4(x, y, 0, 0), level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}

static __forceinline __declspec(__device__) float4 tex2DLod(texture<ushort4, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float level)
{
  uint4 v   = __utexfetchlod(t, make_float4(x, y, 0, 0), level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}







static __forceinline __declspec(__device__) char tex1DLayeredLod(texture<char, 0xF1, cudaReadModeElementType> t, float x, int layer, float level)
{


#line 5033 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_fetch_functions.h"
  int4 v  = __itexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level);
#line 5035 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_fetch_functions.h"

  return (char)v.x;
}

static __forceinline __declspec(__device__) signed char tex1DLayeredLod(texture<signed char, 0xF1, cudaReadModeElementType> t, float x, int layer, float level)
{
  int4 v = __itexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level);

  return (signed char)v.x;
}

static __forceinline __declspec(__device__) unsigned char tex1DLayeredLod(texture<unsigned char, 0xF1, cudaReadModeElementType> t, float x, int layer, float level)
{
  uint4 v = __utexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level);

  return (unsigned char)v.x;
}

static __forceinline __declspec(__device__) char1 tex1DLayeredLod(texture<char1, 0xF1, cudaReadModeElementType> t, float x, int layer, float level)
{
  int4 v = __itexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level);

  return make_char1(v.x);
}

static __forceinline __declspec(__device__) uchar1 tex1DLayeredLod(texture<uchar1, 0xF1, cudaReadModeElementType> t, float x, int layer, float level)
{
  uint4 v = __utexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level);

  return make_uchar1(v.x);
}

static __forceinline __declspec(__device__) char2 tex1DLayeredLod(texture<char2, 0xF1, cudaReadModeElementType> t, float x, int layer, float level)
{
  int4 v = __itexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level);

  return make_char2(v.x, v.y);
}

static __forceinline __declspec(__device__) uchar2 tex1DLayeredLod(texture<uchar2, 0xF1, cudaReadModeElementType> t, float x, int layer, float level)
{
  uint4 v = __utexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level);

  return make_uchar2(v.x, v.y);
}

static __forceinline __declspec(__device__) char4 tex1DLayeredLod(texture<char4, 0xF1, cudaReadModeElementType> t, float x, int layer, float level)
{
  int4 v = __itexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level);

  return make_char4(v.x, v.y, v.z, v.w);
}

static __forceinline __declspec(__device__) uchar4 tex1DLayeredLod(texture<uchar4, 0xF1, cudaReadModeElementType> t, float x, int layer, float level)
{
  uint4 v = __utexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level);

  return make_uchar4(v.x, v.y, v.z, v.w);
}







static __forceinline __declspec(__device__) short tex1DLayeredLod(texture<short, 0xF1, cudaReadModeElementType> t, float x, int layer, float level)
{
  int4 v = __itexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level);

  return (short)v.x;
}

static __forceinline __declspec(__device__) unsigned short tex1DLayeredLod(texture<unsigned short, 0xF1, cudaReadModeElementType> t, float x, int layer, float level)
{
  uint4 v = __utexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level);

  return (unsigned short)v.x;
}

static __forceinline __declspec(__device__) short1 tex1DLayeredLod(texture<short1, 0xF1, cudaReadModeElementType> t, float x, int layer, float level)
{
  int4 v = __itexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level);

  return make_short1(v.x);
}

static __forceinline __declspec(__device__) ushort1 tex1DLayeredLod(texture<ushort1, 0xF1, cudaReadModeElementType> t, float x, int layer, float level)
{
  uint4 v = __utexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level);

  return make_ushort1(v.x);
}

static __forceinline __declspec(__device__) short2 tex1DLayeredLod(texture<short2, 0xF1, cudaReadModeElementType> t, float x, int layer, float level)
{
  int4 v = __itexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level);

  return make_short2(v.x, v.y);
}

static __forceinline __declspec(__device__) ushort2 tex1DLayeredLod(texture<ushort2, 0xF1, cudaReadModeElementType> t, float x, int layer, float level)
{
  uint4 v = __utexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level);

  return make_ushort2(v.x, v.y);
}

static __forceinline __declspec(__device__) short4 tex1DLayeredLod(texture<short4, 0xF1, cudaReadModeElementType> t, float x, int layer, float level)
{
  int4 v = __itexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level);

  return make_short4(v.x, v.y, v.z, v.w);
}

static __forceinline __declspec(__device__) ushort4 tex1DLayeredLod(texture<ushort4, 0xF1, cudaReadModeElementType> t, float x, int layer, float level)
{
  uint4 v = __utexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level);

  return make_ushort4(v.x, v.y, v.z, v.w);
}







static __forceinline __declspec(__device__) int tex1DLayeredLod(texture<int, 0xF1, cudaReadModeElementType> t, float x, int layer, float level)
{
  int4 v = __itexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level);

  return (int)v.x;
}

static __forceinline __declspec(__device__) unsigned int tex1DLayeredLod(texture<unsigned int, 0xF1, cudaReadModeElementType> t, float x, int layer, float level)
{
  uint4 v = __utexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level);

  return (unsigned int)v.x;
}

static __forceinline __declspec(__device__) int1 tex1DLayeredLod(texture<int1, 0xF1, cudaReadModeElementType> t, float x, int layer, float level)
{
  int4 v = __itexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level);

  return make_int1(v.x);
}

static __forceinline __declspec(__device__) uint1 tex1DLayeredLod(texture<uint1, 0xF1, cudaReadModeElementType> t, float x, int layer, float level)
{
  uint4 v = __utexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level);

  return make_uint1(v.x);
}

static __forceinline __declspec(__device__) int2 tex1DLayeredLod(texture<int2, 0xF1, cudaReadModeElementType> t, float x, int layer, float level)
{
  int4 v = __itexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level);

  return make_int2(v.x, v.y);
}

static __forceinline __declspec(__device__) uint2 tex1DLayeredLod(texture<uint2, 0xF1, cudaReadModeElementType> t, float x, int layer, float level)
{
  uint4 v = __utexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level);

  return make_uint2(v.x, v.y);
}

static __forceinline __declspec(__device__) int4 tex1DLayeredLod(texture<int4, 0xF1, cudaReadModeElementType> t, float x, int layer, float level)
{
  int4 v = __itexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level);

  return make_int4(v.x, v.y, v.z, v.w);
}

static __forceinline __declspec(__device__) uint4 tex1DLayeredLod(texture<uint4, 0xF1, cudaReadModeElementType> t, float x, int layer, float level)
{
  uint4 v = __utexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level);

  return make_uint4(v.x, v.y, v.z, v.w);
}









static __forceinline __declspec(__device__) long tex1DLayeredLod(texture<long, 0xF1, cudaReadModeElementType> t, float x, int layer, float level)
{
  int4 v = __itexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level);

  return (long)v.x;
}

static __forceinline __declspec(__device__) unsigned long tex1DLayeredLod(texture<unsigned long, 0xF1, cudaReadModeElementType> t, float x, int layer, float level)
{
  uint4 v = __utexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level);

  return (unsigned long)v.x;
}

static __forceinline __declspec(__device__) long1 tex1DLayeredLod(texture<long1, 0xF1, cudaReadModeElementType> t, float x, int layer, float level)
{
  int4 v = __itexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level);

  return make_long1(v.x);
}

static __forceinline __declspec(__device__) ulong1 tex1DLayeredLod(texture<ulong1, 0xF1, cudaReadModeElementType> t, float x, int layer, float level)
{
  uint4 v = __utexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level);

  return make_ulong1(v.x);
}

static __forceinline __declspec(__device__) long2 tex1DLayeredLod(texture<long2, 0xF1, cudaReadModeElementType> t, float x, int layer, float level)
{
  int4 v = __itexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level);

  return make_long2(v.x, v.y);
}

static __forceinline __declspec(__device__) ulong2 tex1DLayeredLod(texture<ulong2, 0xF1, cudaReadModeElementType> t, float x, int layer, float level)
{
  uint4 v = __utexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level);

  return make_ulong2(v.x, v.y);
}

static __forceinline __declspec(__device__) long4 tex1DLayeredLod(texture<long4, 0xF1, cudaReadModeElementType> t, float x, int layer, float level)
{
  int4 v = __itexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level);

  return make_long4(v.x, v.y, v.z, v.w);
}

static __forceinline __declspec(__device__) ulong4 tex1DLayeredLod(texture<ulong4, 0xF1, cudaReadModeElementType> t, float x, int layer, float level)
{
  uint4 v = __utexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level);

  return make_ulong4(v.x, v.y, v.z, v.w);
}

#line 5284 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_fetch_functions.h"







static __forceinline __declspec(__device__) float tex1DLayeredLod(texture<float, 0xF1, cudaReadModeElementType> t, float x, int layer, float level)
{
  float4 v = __ftexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level);

  return v.x;
}

static __forceinline __declspec(__device__) float1 tex1DLayeredLod(texture<float1, 0xF1, cudaReadModeElementType> t, float x, int layer, float level)
{
  float4 v = __ftexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level);

  return make_float1(v.x);
}

static __forceinline __declspec(__device__) float2 tex1DLayeredLod(texture<float2, 0xF1, cudaReadModeElementType> t, float x, int layer, float level)
{
  float4 v = __ftexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level);

  return make_float2(v.x, v.y);
}

static __forceinline __declspec(__device__) float4 tex1DLayeredLod(texture<float4, 0xF1, cudaReadModeElementType> t, float x, int layer, float level)
{
  float4 v = __ftexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level);

  return make_float4(v.x, v.y, v.z, v.w);
}







static __forceinline __declspec(__device__) float tex1DLayeredLod(texture<char, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float level)
{


#line 5330 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_fetch_functions.h"
  int4 v   = __itexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level);
#line 5332 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_fetch_functions.h"
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __forceinline __declspec(__device__) float tex1DLayeredLod(texture<signed char, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float level)
{
  int4 v   = __itexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __forceinline __declspec(__device__) float tex1DLayeredLod(texture<unsigned char, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float level)
{
  uint4 v  = __utexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __forceinline __declspec(__device__) float1 tex1DLayeredLod(texture<char1, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float level)
{
  int4 v   = __itexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __forceinline __declspec(__device__) float1 tex1DLayeredLod(texture<uchar1, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float level)
{
  uint4 v  = __utexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __forceinline __declspec(__device__) float2 tex1DLayeredLod(texture<char2, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float level)
{
  int4 v   = __itexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __forceinline __declspec(__device__) float2 tex1DLayeredLod(texture<uchar2, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float level)
{
  uint4 v  = __utexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __forceinline __declspec(__device__) float4 tex1DLayeredLod(texture<char4, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float level)
{
  int4 v   = __itexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}

static __forceinline __declspec(__device__) float4 tex1DLayeredLod(texture<uchar4, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float level)
{
  uint4 v  = __utexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}







static __forceinline __declspec(__device__) float tex1DLayeredLod(texture<short, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float level)
{
  int4 v   = __itexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __forceinline __declspec(__device__) float tex1DLayeredLod(texture<unsigned short, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float level)
{
  uint4 v  = __utexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __forceinline __declspec(__device__) float1 tex1DLayeredLod(texture<short1, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float level)
{
  int4 v   = __itexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __forceinline __declspec(__device__) float1 tex1DLayeredLod(texture<ushort1, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float level)
{
  uint4 v  = __utexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __forceinline __declspec(__device__) float2 tex1DLayeredLod(texture<short2, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float level)
{
  int4 v   = __itexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __forceinline __declspec(__device__) float2 tex1DLayeredLod(texture<ushort2, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float level)
{
  uint4 v  = __utexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __forceinline __declspec(__device__) float4 tex1DLayeredLod(texture<short4, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float level)
{
  int4 v   = __itexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}

static __forceinline __declspec(__device__) float4 tex1DLayeredLod(texture<ushort4, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float level)
{
  uint4 v   = __utexfetchlodl(t, make_float4(x, 0, 0, 0), layer, level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}







static __forceinline __declspec(__device__) char tex2DLayeredLod(texture<char, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level)
{


#line 5482 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_fetch_functions.h"
  int4 v  = __itexfetchlodl(t, make_float4(x, y, 0, 0), layer, level);
#line 5484 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_fetch_functions.h"

  return (char)v.x;
}

static __forceinline __declspec(__device__) signed char tex2DLayeredLod(texture<signed char, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level)
{
  int4 v = __itexfetchlodl(t, make_float4(x, y, 0, 0), layer, level);

  return (signed char)v.x;
}

static __forceinline __declspec(__device__) unsigned char tex2DLayeredLod(texture<unsigned char, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level)
{
  uint4 v = __utexfetchlodl(t, make_float4(x, y, 0, 0), layer, level);

  return (unsigned char)v.x;
}

static __forceinline __declspec(__device__) char1 tex2DLayeredLod(texture<char1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level)
{
  int4 v = __itexfetchlodl(t, make_float4(x, y, 0, 0), layer, level);

  return make_char1(v.x);
}

static __forceinline __declspec(__device__) uchar1 tex2DLayeredLod(texture<uchar1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level)
{
  uint4 v = __utexfetchlodl(t, make_float4(x, y, 0, 0), layer, level);

  return make_uchar1(v.x);
}

static __forceinline __declspec(__device__) char2 tex2DLayeredLod(texture<char2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level)
{
  int4 v = __itexfetchlodl(t, make_float4(x, y, 0, 0), layer, level);

  return make_char2(v.x, v.y);
}

static __forceinline __declspec(__device__) uchar2 tex2DLayeredLod(texture<uchar2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level)
{
  uint4 v = __utexfetchlodl(t, make_float4(x, y, 0, 0), layer, level);

  return make_uchar2(v.x, v.y);
}

static __forceinline __declspec(__device__) char4 tex2DLayeredLod(texture<char4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level)
{
  int4 v = __itexfetchlodl(t, make_float4(x, y, 0, 0), layer, level);

  return make_char4(v.x, v.y, v.z, v.w);
}

static __forceinline __declspec(__device__) uchar4 tex2DLayeredLod(texture<uchar4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level)
{
  uint4 v = __utexfetchlodl(t, make_float4(x, y, 0, 0), layer, level);

  return make_uchar4(v.x, v.y, v.z, v.w);
}







static __forceinline __declspec(__device__) short tex2DLayeredLod(texture<short, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level)
{
  int4 v = __itexfetchlodl(t, make_float4(x, y, 0, 0), layer, level);

  return (short)v.x;
}

static __forceinline __declspec(__device__) unsigned short tex2DLayeredLod(texture<unsigned short, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level)
{
  uint4 v = __utexfetchlodl(t, make_float4(x, y, 0, 0), layer, level);

  return (unsigned short)v.x;
}

static __forceinline __declspec(__device__) short1 tex2DLayeredLod(texture<short1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level)
{
  int4 v = __itexfetchlodl(t, make_float4(x, y, 0, 0), layer, level);

  return make_short1(v.x);
}

static __forceinline __declspec(__device__) ushort1 tex2DLayeredLod(texture<ushort1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level)
{
  uint4 v = __utexfetchlodl(t, make_float4(x, y, 0, 0), layer, level);

  return make_ushort1(v.x);
}

static __forceinline __declspec(__device__) short2 tex2DLayeredLod(texture<short2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level)
{
  int4 v = __itexfetchlodl(t, make_float4(x, y, 0, 0), layer, level);

  return make_short2(v.x, v.y);
}

static __forceinline __declspec(__device__) ushort2 tex2DLayeredLod(texture<ushort2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level)
{
  uint4 v = __utexfetchlodl(t, make_float4(x, y, 0, 0), layer, level);

  return make_ushort2(v.x, v.y);
}

static __forceinline __declspec(__device__) short4 tex2DLayeredLod(texture<short4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level)
{
  int4 v = __itexfetchlodl(t, make_float4(x, y, 0, 0), layer, level);

  return make_short4(v.x, v.y, v.z, v.w);
}

static __forceinline __declspec(__device__) ushort4 tex2DLayeredLod(texture<ushort4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level)
{
  uint4 v = __utexfetchlodl(t, make_float4(x, y, 0, 0), layer, level);

  return make_ushort4(v.x, v.y, v.z, v.w);
}







static __forceinline __declspec(__device__) int tex2DLayeredLod(texture<int, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level)
{
  int4 v = __itexfetchlodl(t, make_float4(x, y, 0, 0), layer, level);

  return (int)v.x;
}

static __forceinline __declspec(__device__) unsigned int tex2DLayeredLod(texture<unsigned int, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level)
{
  uint4 v = __utexfetchlodl(t, make_float4(x, y, 0, 0), layer, level);

  return (unsigned int)v.x;
}

static __forceinline __declspec(__device__) int1 tex2DLayeredLod(texture<int1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level)
{
  int4 v = __itexfetchlodl(t, make_float4(x, y, 0, 0), layer, level);

  return make_int1(v.x);
}

static __forceinline __declspec(__device__) uint1 tex2DLayeredLod(texture<uint1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level)
{
  uint4 v = __utexfetchlodl(t, make_float4(x, y, 0, 0), layer, level);

  return make_uint1(v.x);
}

static __forceinline __declspec(__device__) int2 tex2DLayeredLod(texture<int2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level)
{
  int4 v = __itexfetchlodl(t, make_float4(x, y, 0, 0), layer, level);

  return make_int2(v.x, v.y);
}

static __forceinline __declspec(__device__) uint2 tex2DLayeredLod(texture<uint2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level)
{
  uint4 v = __utexfetchlodl(t, make_float4(x, y, 0, 0), layer, level);

  return make_uint2(v.x, v.y);
}

static __forceinline __declspec(__device__) int4 tex2DLayeredLod(texture<int4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level)
{
  int4 v = __itexfetchlodl(t, make_float4(x, y, 0, 0), layer, level);

  return make_int4(v.x, v.y, v.z, v.w);
}

static __forceinline __declspec(__device__) uint4 tex2DLayeredLod(texture<uint4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level)
{
  uint4 v = __utexfetchlodl(t, make_float4(x, y, 0, 0), layer, level);

  return make_uint4(v.x, v.y, v.z, v.w);
}









static __forceinline __declspec(__device__) long tex2DLayeredLod(texture<long, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level)
{
  int4 v = __itexfetchlodl(t, make_float4(x, y, 0, 0), layer, level);

  return (long)v.x;
}

static __forceinline __declspec(__device__) unsigned long tex2DLayeredLod(texture<unsigned long, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level)
{
  uint4 v = __utexfetchlodl(t, make_float4(x, y, 0, 0), layer, level);

  return (unsigned long)v.x;
}

static __forceinline __declspec(__device__) long1 tex2DLayeredLod(texture<long1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level)
{
  int4 v = __itexfetchlodl(t, make_float4(x, y, 0, 0), layer, level);

  return make_long1(v.x);
}

static __forceinline __declspec(__device__) ulong1 tex2DLayeredLod(texture<ulong1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level)
{
  uint4 v = __utexfetchlodl(t, make_float4(x, y, 0, 0), layer, level);

  return make_ulong1(v.x);
}

static __forceinline __declspec(__device__) long2 tex2DLayeredLod(texture<long2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level)
{
  int4 v = __itexfetchlodl(t, make_float4(x, y, 0, 0), layer, level);

  return make_long2(v.x, v.y);
}

static __forceinline __declspec(__device__) ulong2 tex2DLayeredLod(texture<ulong2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level)
{
  uint4 v = __utexfetchlodl(t, make_float4(x, y, 0, 0), layer, level);

  return make_ulong2(v.x, v.y);
}

static __forceinline __declspec(__device__) long4 tex2DLayeredLod(texture<long4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level)
{
  int4 v = __itexfetchlodl(t, make_float4(x, y, 0, 0), layer, level);

  return make_long4(v.x, v.y, v.z, v.w);
}

static __forceinline __declspec(__device__) ulong4 tex2DLayeredLod(texture<ulong4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level)
{
  uint4 v = __utexfetchlodl(t, make_float4(x, y, 0, 0), layer, level);

  return make_ulong4(v.x, v.y, v.z, v.w);
}

#line 5733 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_fetch_functions.h"







static __forceinline __declspec(__device__) float tex2DLayeredLod(texture<float, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level)
{
  float4 v = __ftexfetchlodl(t, make_float4(x, y, 0, 0), layer, level);

  return v.x;
}

static __forceinline __declspec(__device__) float1 tex2DLayeredLod(texture<float1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level)
{
  float4 v = __ftexfetchlodl(t, make_float4(x, y, 0, 0), layer, level);

  return make_float1(v.x);
}

static __forceinline __declspec(__device__) float2 tex2DLayeredLod(texture<float2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level)
{
  float4 v = __ftexfetchlodl(t, make_float4(x, y, 0, 0), layer, level);

  return make_float2(v.x, v.y);
}

static __forceinline __declspec(__device__) float4 tex2DLayeredLod(texture<float4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float level)
{
  float4 v = __ftexfetchlodl(t, make_float4(x, y, 0, 0), layer, level);

  return make_float4(v.x, v.y, v.z, v.w);
}







static __forceinline __declspec(__device__) float tex2DLayeredLod(texture<char, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float level)
{


#line 5779 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_fetch_functions.h"
  int4 v   = __itexfetchlodl(t, make_float4(x, y, 0, 0), layer, level);
#line 5781 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_fetch_functions.h"
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __forceinline __declspec(__device__) float tex2DLayeredLod(texture<signed char, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float level)
{
  int4 v   = __itexfetchlodl(t, make_float4(x, y, 0, 0), layer, level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __forceinline __declspec(__device__) float tex2DLayeredLod(texture<unsigned char, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float level)
{
  uint4 v  = __utexfetchlodl(t, make_float4(x, y, 0, 0), layer, level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __forceinline __declspec(__device__) float1 tex2DLayeredLod(texture<char1, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float level)
{
  int4 v   = __itexfetchlodl(t, make_float4(x, y, 0, 0), layer, level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __forceinline __declspec(__device__) float1 tex2DLayeredLod(texture<uchar1, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float level)
{
  uint4 v  = __utexfetchlodl(t, make_float4(x, y, 0, 0), layer, level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __forceinline __declspec(__device__) float2 tex2DLayeredLod(texture<char2, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float level)
{
  int4 v   = __itexfetchlodl(t, make_float4(x, y, 0, 0), layer, level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __forceinline __declspec(__device__) float2 tex2DLayeredLod(texture<uchar2, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float level)
{
  uint4 v  = __utexfetchlodl(t, make_float4(x, y, 0, 0), layer, level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __forceinline __declspec(__device__) float4 tex2DLayeredLod(texture<char4, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float level)
{
  int4 v   = __itexfetchlodl(t, make_float4(x, y, 0, 0), layer, level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}

static __forceinline __declspec(__device__) float4 tex2DLayeredLod(texture<uchar4, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float level)
{
  uint4 v  = __utexfetchlodl(t, make_float4(x, y, 0, 0), layer, level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}







static __forceinline __declspec(__device__) float tex2DLayeredLod(texture<short, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float level)
{
  int4 v   = __itexfetchlodl(t, make_float4(x, y, 0, 0), layer, level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __forceinline __declspec(__device__) float tex2DLayeredLod(texture<unsigned short, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float level)
{
  uint4 v  = __utexfetchlodl(t, make_float4(x, y, 0, 0), layer, level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __forceinline __declspec(__device__) float1 tex2DLayeredLod(texture<short1, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float level)
{
  int4 v   = __itexfetchlodl(t, make_float4(x, y, 0, 0), layer, level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __forceinline __declspec(__device__) float1 tex2DLayeredLod(texture<ushort1, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float level)
{
  uint4 v  = __utexfetchlodl(t, make_float4(x, y, 0, 0), layer, level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __forceinline __declspec(__device__) float2 tex2DLayeredLod(texture<short2, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float level)
{
  int4 v   = __itexfetchlodl(t, make_float4(x, y, 0, 0), layer, level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __forceinline __declspec(__device__) float2 tex2DLayeredLod(texture<ushort2, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float level)
{
  uint4 v  = __utexfetchlodl(t, make_float4(x, y, 0, 0), layer, level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __forceinline __declspec(__device__) float4 tex2DLayeredLod(texture<short4, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float level)
{
  int4 v   = __itexfetchlodl(t, make_float4(x, y, 0, 0), layer, level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}

static __forceinline __declspec(__device__) float4 tex2DLayeredLod(texture<ushort4, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float level)
{
  uint4 v   = __utexfetchlodl(t, make_float4(x, y, 0, 0), layer, level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}







static __forceinline __declspec(__device__) char tex3DLod(texture<char, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level)
{


#line 5931 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_fetch_functions.h"
  int4 v  = __itexfetchlod(t, make_float4(x, y, z, 0), level);
#line 5933 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_fetch_functions.h"

  return (char)v.x;
}

static __forceinline __declspec(__device__) signed char tex3DLod(texture<signed char, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level)
{
  int4 v = __itexfetchlod(t, make_float4(x, y, z, 0), level);

  return (signed char)v.x;
}

static __forceinline __declspec(__device__) unsigned char tex3DLod(texture<unsigned char, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level)
{
  uint4 v = __utexfetchlod(t, make_float4(x, y, z, 0), level);

  return (unsigned char)v.x;
}

static __forceinline __declspec(__device__) char1 tex3DLod(texture<char1, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level)
{
  int4 v = __itexfetchlod(t, make_float4(x, y, z, 0), level);

  return make_char1(v.x);
}

static __forceinline __declspec(__device__) uchar1 tex3DLod(texture<uchar1, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level)
{
  uint4 v = __utexfetchlod(t, make_float4(x, y, z, 0), level);

  return make_uchar1(v.x);
}

static __forceinline __declspec(__device__) char2 tex3DLod(texture<char2, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level)
{
  int4 v = __itexfetchlod(t, make_float4(x, y, z, 0), level);

  return make_char2(v.x, v.y);
}

static __forceinline __declspec(__device__) uchar2 tex3DLod(texture<uchar2, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level)
{
  uint4 v = __utexfetchlod(t, make_float4(x, y, z, 0), level);

  return make_uchar2(v.x, v.y);
}

static __forceinline __declspec(__device__) char4 tex3DLod(texture<char4, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level)
{
  int4 v = __itexfetchlod(t, make_float4(x, y, z, 0), level);

  return make_char4(v.x, v.y, v.z, v.w);
}

static __forceinline __declspec(__device__) uchar4 tex3DLod(texture<uchar4, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level)
{
  uint4 v = __utexfetchlod(t, make_float4(x, y, z, 0), level);

  return make_uchar4(v.x, v.y, v.z, v.w);
}







static __forceinline __declspec(__device__) short tex3DLod(texture<short, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level)
{
  int4 v = __itexfetchlod(t, make_float4(x, y, z, 0), level);

  return (short)v.x;
}

static __forceinline __declspec(__device__) unsigned short tex3DLod(texture<unsigned short, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level)
{
  uint4 v = __utexfetchlod(t, make_float4(x, y, z, 0), level);

  return (unsigned short)v.x;
}

static __forceinline __declspec(__device__) short1 tex3DLod(texture<short1, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level)
{
  int4 v = __itexfetchlod(t, make_float4(x, y, z, 0), level);

  return make_short1(v.x);
}

static __forceinline __declspec(__device__) ushort1 tex3DLod(texture<ushort1, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level)
{
  uint4 v = __utexfetchlod(t, make_float4(x, y, z, 0), level);

  return make_ushort1(v.x);
}

static __forceinline __declspec(__device__) short2 tex3DLod(texture<short2, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level)
{
  int4 v = __itexfetchlod(t, make_float4(x, y, z, 0), level);

  return make_short2(v.x, v.y);
}

static __forceinline __declspec(__device__) ushort2 tex3DLod(texture<ushort2, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level)
{
  uint4 v = __utexfetchlod(t, make_float4(x, y, z, 0), level);

  return make_ushort2(v.x, v.y);
}

static __forceinline __declspec(__device__) short4 tex3DLod(texture<short4, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level)
{
  int4 v = __itexfetchlod(t, make_float4(x, y, z, 0), level);

  return make_short4(v.x, v.y, v.z, v.w);
}

static __forceinline __declspec(__device__) ushort4 tex3DLod(texture<ushort4, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level)
{
  uint4 v = __utexfetchlod(t, make_float4(x, y, z, 0), level);

  return make_ushort4(v.x, v.y, v.z, v.w);
}







static __forceinline __declspec(__device__) int tex3DLod(texture<int, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level)
{
  int4 v = __itexfetchlod(t, make_float4(x, y, z, 0), level);

  return (int)v.x;
}

static __forceinline __declspec(__device__) unsigned int tex3DLod(texture<unsigned int, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level)
{
  uint4 v = __utexfetchlod(t, make_float4(x, y, z, 0), level);

  return (unsigned int)v.x;
}

static __forceinline __declspec(__device__) int1 tex3DLod(texture<int1, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level)
{
  int4 v = __itexfetchlod(t, make_float4(x, y, z, 0), level);

  return make_int1(v.x);
}

static __forceinline __declspec(__device__) uint1 tex3DLod(texture<uint1, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level)
{
  uint4 v = __utexfetchlod(t, make_float4(x, y, z, 0), level);

  return make_uint1(v.x);
}

static __forceinline __declspec(__device__) int2 tex3DLod(texture<int2, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level)
{
  int4 v = __itexfetchlod(t, make_float4(x, y, z, 0), level);

  return make_int2(v.x, v.y);
}

static __forceinline __declspec(__device__) uint2 tex3DLod(texture<uint2, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level)
{
  uint4 v = __utexfetchlod(t, make_float4(x, y, z, 0), level);

  return make_uint2(v.x, v.y);
}

static __forceinline __declspec(__device__) int4 tex3DLod(texture<int4, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level)
{
  int4 v = __itexfetchlod(t, make_float4(x, y, z, 0), level);

  return make_int4(v.x, v.y, v.z, v.w);
}

static __forceinline __declspec(__device__) uint4 tex3DLod(texture<uint4, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level)
{
  uint4 v = __utexfetchlod(t, make_float4(x, y, z, 0), level);

  return make_uint4(v.x, v.y, v.z, v.w);
}









static __forceinline __declspec(__device__) long tex3DLod(texture<long, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level)
{
  int4 v = __itexfetchlod(t, make_float4(x, y, z, 0), level);

  return (long)v.x;
}

static __forceinline __declspec(__device__) unsigned long tex3DLod(texture<unsigned long, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level)
{
  uint4 v = __utexfetchlod(t, make_float4(x, y, z, 0), level);

  return (unsigned long)v.x;
}

static __forceinline __declspec(__device__) long1 tex3DLod(texture<long1, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level)
{
  int4 v = __itexfetchlod(t, make_float4(x, y, z, 0), level);

  return make_long1(v.x);
}

static __forceinline __declspec(__device__) ulong1 tex3DLod(texture<ulong1, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level)
{
  uint4 v = __utexfetchlod(t, make_float4(x, y, z, 0), level);

  return make_ulong1(v.x);
}

static __forceinline __declspec(__device__) long2 tex3DLod(texture<long2, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level)
{
  int4 v = __itexfetchlod(t, make_float4(x, y, z, 0), level);

  return make_long2(v.x, v.y);
}

static __forceinline __declspec(__device__) ulong2 tex3DLod(texture<ulong2, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level)
{
  uint4 v = __utexfetchlod(t, make_float4(x, y, z, 0), level);

  return make_ulong2(v.x, v.y);
}

static __forceinline __declspec(__device__) long4 tex3DLod(texture<long4, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level)
{
  int4 v = __itexfetchlod(t, make_float4(x, y, z, 0), level);

  return make_long4(v.x, v.y, v.z, v.w);
}

static __forceinline __declspec(__device__) ulong4 tex3DLod(texture<ulong4, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level)
{
  uint4 v = __utexfetchlod(t, make_float4(x, y, z, 0), level);

  return make_ulong4(v.x, v.y, v.z, v.w);
}

#line 6182 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_fetch_functions.h"







static __forceinline __declspec(__device__) float tex3DLod(texture<float, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level)
{
  float4 v = __ftexfetchlod(t, make_float4(x, y, z, 0), level);

  return v.x;
}

static __forceinline __declspec(__device__) float1 tex3DLod(texture<float1, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level)
{
  float4 v = __ftexfetchlod(t, make_float4(x, y, z, 0), level);

  return make_float1(v.x);
}

static __forceinline __declspec(__device__) float2 tex3DLod(texture<float2, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level)
{
  float4 v = __ftexfetchlod(t, make_float4(x, y, z, 0), level);

  return make_float2(v.x, v.y);
}

static __forceinline __declspec(__device__) float4 tex3DLod(texture<float4, 0x03, cudaReadModeElementType> t, float x, float y, float z, float level)
{
  float4 v = __ftexfetchlod(t, make_float4(x, y, z, 0), level);

  return make_float4(v.x, v.y, v.z, v.w);
}







static __forceinline __declspec(__device__) float tex3DLod(texture<char, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level)
{


#line 6228 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_fetch_functions.h"
  int4 v   = __itexfetchlod(t, make_float4(x, y, z, 0), level);
#line 6230 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_fetch_functions.h"
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __forceinline __declspec(__device__) float tex3DLod(texture<signed char, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level)
{
  int4 v   = __itexfetchlod(t, make_float4(x, y, z, 0), level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __forceinline __declspec(__device__) float tex3DLod(texture<unsigned char, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level)
{
  uint4 v  = __utexfetchlod(t, make_float4(x, y, z, 0), level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __forceinline __declspec(__device__) float1 tex3DLod(texture<char1, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level)
{
  int4 v   = __itexfetchlod(t, make_float4(x, y, z, 0), level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __forceinline __declspec(__device__) float1 tex3DLod(texture<uchar1, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level)
{
  uint4 v  = __utexfetchlod(t, make_float4(x, y, z, 0), level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __forceinline __declspec(__device__) float2 tex3DLod(texture<char2, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level)
{
  int4 v   = __itexfetchlod(t, make_float4(x, y, z, 0), level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __forceinline __declspec(__device__) float2 tex3DLod(texture<uchar2, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level)
{
  uint4 v  = __utexfetchlod(t, make_float4(x, y, z, 0), level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __forceinline __declspec(__device__) float4 tex3DLod(texture<char4, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level)
{
  int4 v   = __itexfetchlod(t, make_float4(x, y, z, 0), level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}

static __forceinline __declspec(__device__) float4 tex3DLod(texture<uchar4, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level)
{
  uint4 v  = __utexfetchlod(t, make_float4(x, y, z, 0), level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}







static __forceinline __declspec(__device__) float tex3DLod(texture<short, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level)
{
  int4 v   = __itexfetchlod(t, make_float4(x, y, z, 0), level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __forceinline __declspec(__device__) float tex3DLod(texture<unsigned short, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level)
{
  uint4 v  = __utexfetchlod(t, make_float4(x, y, z, 0), level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __forceinline __declspec(__device__) float1 tex3DLod(texture<short1, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level)
{
  int4 v   = __itexfetchlod(t, make_float4(x, y, z, 0), level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __forceinline __declspec(__device__) float1 tex3DLod(texture<ushort1, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level)
{
  uint4 v  = __utexfetchlod(t, make_float4(x, y, z, 0), level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __forceinline __declspec(__device__) float2 tex3DLod(texture<short2, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level)
{
  int4 v   = __itexfetchlod(t, make_float4(x, y, z, 0), level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __forceinline __declspec(__device__) float2 tex3DLod(texture<ushort2, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level)
{
  uint4 v  = __utexfetchlod(t, make_float4(x, y, z, 0), level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __forceinline __declspec(__device__) float4 tex3DLod(texture<short4, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level)
{
  int4 v   = __itexfetchlod(t, make_float4(x, y, z, 0), level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}

static __forceinline __declspec(__device__) float4 tex3DLod(texture<ushort4, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level)
{
  uint4 v   = __utexfetchlod(t, make_float4(x, y, z, 0), level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}







static __forceinline __declspec(__device__) char texCubemapLod(texture<char, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level)
{


#line 6380 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_fetch_functions.h"
  int4 v  = __itexfetchlodc(t, make_float4(x, y, z, 0), level);
#line 6382 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_fetch_functions.h"

  return (char)v.x;
}

static __forceinline __declspec(__device__) signed char texCubemapLod(texture<signed char, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level)
{
  int4 v = __itexfetchlodc(t, make_float4(x, y, z, 0), level);

  return (signed char)v.x;
}

static __forceinline __declspec(__device__) unsigned char texCubemapLod(texture<unsigned char, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level)
{
  uint4 v = __utexfetchlodc(t, make_float4(x, y, z, 0), level);

  return (unsigned char)v.x;
}

static __forceinline __declspec(__device__) char1 texCubemapLod(texture<char1, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level)
{
  int4 v = __itexfetchlodc(t, make_float4(x, y, z, 0), level);

  return make_char1(v.x);
}

static __forceinline __declspec(__device__) uchar1 texCubemapLod(texture<uchar1, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level)
{
  uint4 v = __utexfetchlodc(t, make_float4(x, y, z, 0), level);

  return make_uchar1(v.x);
}

static __forceinline __declspec(__device__) char2 texCubemapLod(texture<char2, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level)
{
  int4 v = __itexfetchlodc(t, make_float4(x, y, z, 0), level);

  return make_char2(v.x, v.y);
}

static __forceinline __declspec(__device__) uchar2 texCubemapLod(texture<uchar2, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level)
{
  uint4 v = __utexfetchlodc(t, make_float4(x, y, z, 0), level);

  return make_uchar2(v.x, v.y);
}

static __forceinline __declspec(__device__) char4 texCubemapLod(texture<char4, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level)
{
  int4 v = __itexfetchlodc(t, make_float4(x, y, z, 0), level);

  return make_char4(v.x, v.y, v.z, v.w);
}

static __forceinline __declspec(__device__) uchar4 texCubemapLod(texture<uchar4, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level)
{
  uint4 v = __utexfetchlodc(t, make_float4(x, y, z, 0), level);

  return make_uchar4(v.x, v.y, v.z, v.w);
}







static __forceinline __declspec(__device__) short texCubemapLod(texture<short, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level)
{
  int4 v = __itexfetchlodc(t, make_float4(x, y, z, 0), level);

  return (short)v.x;
}

static __forceinline __declspec(__device__) unsigned short texCubemapLod(texture<unsigned short, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level)
{
  uint4 v = __utexfetchlodc(t, make_float4(x, y, z, 0), level);

  return (unsigned short)v.x;
}

static __forceinline __declspec(__device__) short1 texCubemapLod(texture<short1, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level)
{
  int4 v = __itexfetchlodc(t, make_float4(x, y, z, 0), level);

  return make_short1(v.x);
}

static __forceinline __declspec(__device__) ushort1 texCubemapLod(texture<ushort1, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level)
{
  uint4 v = __utexfetchlodc(t, make_float4(x, y, z, 0), level);

  return make_ushort1(v.x);
}

static __forceinline __declspec(__device__) short2 texCubemapLod(texture<short2, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level)
{
  int4 v = __itexfetchlodc(t, make_float4(x, y, z, 0), level);

  return make_short2(v.x, v.y);
}

static __forceinline __declspec(__device__) ushort2 texCubemapLod(texture<ushort2, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level)
{
  uint4 v = __utexfetchlodc(t, make_float4(x, y, z, 0), level);

  return make_ushort2(v.x, v.y);
}

static __forceinline __declspec(__device__) short4 texCubemapLod(texture<short4, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level)
{
  int4 v = __itexfetchlodc(t, make_float4(x, y, z, 0), level);

  return make_short4(v.x, v.y, v.z, v.w);
}

static __forceinline __declspec(__device__) ushort4 texCubemapLod(texture<ushort4, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level)
{
  uint4 v = __utexfetchlodc(t, make_float4(x, y, z, 0), level);

  return make_ushort4(v.x, v.y, v.z, v.w);
}







static __forceinline __declspec(__device__) int texCubemapLod(texture<int, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level)
{
  int4 v = __itexfetchlodc(t, make_float4(x, y, z, 0), level);

  return (int)v.x;
}

static __forceinline __declspec(__device__) unsigned int texCubemapLod(texture<unsigned int, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level)
{
  uint4 v = __utexfetchlodc(t, make_float4(x, y, z, 0), level);

  return (unsigned int)v.x;
}

static __forceinline __declspec(__device__) int1 texCubemapLod(texture<int1, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level)
{
  int4 v = __itexfetchlodc(t, make_float4(x, y, z, 0), level);

  return make_int1(v.x);
}

static __forceinline __declspec(__device__) uint1 texCubemapLod(texture<uint1, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level)
{
  uint4 v = __utexfetchlodc(t, make_float4(x, y, z, 0), level);

  return make_uint1(v.x);
}

static __forceinline __declspec(__device__) int2 texCubemapLod(texture<int2, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level)
{
  int4 v = __itexfetchlodc(t, make_float4(x, y, z, 0), level);

  return make_int2(v.x, v.y);
}

static __forceinline __declspec(__device__) uint2 texCubemapLod(texture<uint2, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level)
{
  uint4 v = __utexfetchlodc(t, make_float4(x, y, z, 0), level);

  return make_uint2(v.x, v.y);
}

static __forceinline __declspec(__device__) int4 texCubemapLod(texture<int4, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level)
{
  int4 v = __itexfetchlodc(t, make_float4(x, y, z, 0), level);

  return make_int4(v.x, v.y, v.z, v.w);
}

static __forceinline __declspec(__device__) uint4 texCubemapLod(texture<uint4, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level)
{
  uint4 v = __utexfetchlodc(t, make_float4(x, y, z, 0), level);

  return make_uint4(v.x, v.y, v.z, v.w);
}









static __forceinline __declspec(__device__) long texCubemapLod(texture<long, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level)
{
  int4 v = __itexfetchlodc(t, make_float4(x, y, z, 0), level);

  return (long)v.x;
}

static __forceinline __declspec(__device__) unsigned long texCubemapLod(texture<unsigned long, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level)
{
  uint4 v = __utexfetchlodc(t, make_float4(x, y, z, 0), level);

  return (unsigned long)v.x;
}

static __forceinline __declspec(__device__) long1 texCubemapLod(texture<long1, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level)
{
  int4 v = __itexfetchlodc(t, make_float4(x, y, z, 0), level);

  return make_long1(v.x);
}

static __forceinline __declspec(__device__) ulong1 texCubemapLod(texture<ulong1, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level)
{
  uint4 v = __utexfetchlodc(t, make_float4(x, y, z, 0), level);

  return make_ulong1(v.x);
}

static __forceinline __declspec(__device__) long2 texCubemapLod(texture<long2, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level)
{
  int4 v = __itexfetchlodc(t, make_float4(x, y, z, 0), level);

  return make_long2(v.x, v.y);
}

static __forceinline __declspec(__device__) ulong2 texCubemapLod(texture<ulong2, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level)
{
  uint4 v = __utexfetchlodc(t, make_float4(x, y, z, 0), level);

  return make_ulong2(v.x, v.y);
}

static __forceinline __declspec(__device__) long4 texCubemapLod(texture<long4, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level)
{
  int4 v = __itexfetchlodc(t, make_float4(x, y, z, 0), level);

  return make_long4(v.x, v.y, v.z, v.w);
}

static __forceinline __declspec(__device__) ulong4 texCubemapLod(texture<ulong4, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level)
{
  uint4 v = __utexfetchlodc(t, make_float4(x, y, z, 0), level);

  return make_ulong4(v.x, v.y, v.z, v.w);
}

#line 6631 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_fetch_functions.h"







static __forceinline __declspec(__device__) float texCubemapLod(texture<float, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level)
{
  float4 v = __ftexfetchlodc(t, make_float4(x, y, z, 0), level);

  return v.x;
}

static __forceinline __declspec(__device__) float1 texCubemapLod(texture<float1, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level)
{
  float4 v = __ftexfetchlodc(t, make_float4(x, y, z, 0), level);

  return make_float1(v.x);
}

static __forceinline __declspec(__device__) float2 texCubemapLod(texture<float2, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level)
{
  float4 v = __ftexfetchlodc(t, make_float4(x, y, z, 0), level);

  return make_float2(v.x, v.y);
}

static __forceinline __declspec(__device__) float4 texCubemapLod(texture<float4, 0x0C, cudaReadModeElementType> t, float x, float y, float z, float level)
{
  float4 v = __ftexfetchlodc(t, make_float4(x, y, z, 0), level);

  return make_float4(v.x, v.y, v.z, v.w);
}







static __forceinline __declspec(__device__) float texCubemapLod(texture<char, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level)
{


#line 6677 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_fetch_functions.h"
  int4 v   = __itexfetchlodc(t, make_float4(x, y, z, 0), level);
#line 6679 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_fetch_functions.h"
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __forceinline __declspec(__device__) float texCubemapLod(texture<signed char, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level)
{
  int4 v   = __itexfetchlodc(t, make_float4(x, y, z, 0), level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __forceinline __declspec(__device__) float texCubemapLod(texture<unsigned char, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level)
{
  uint4 v  = __utexfetchlodc(t, make_float4(x, y, z, 0), level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __forceinline __declspec(__device__) float1 texCubemapLod(texture<char1, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level)
{
  int4 v   = __itexfetchlodc(t, make_float4(x, y, z, 0), level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __forceinline __declspec(__device__) float1 texCubemapLod(texture<uchar1, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level)
{
  uint4 v  = __utexfetchlodc(t, make_float4(x, y, z, 0), level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __forceinline __declspec(__device__) float2 texCubemapLod(texture<char2, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level)
{
  int4 v   = __itexfetchlodc(t, make_float4(x, y, z, 0), level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __forceinline __declspec(__device__) float2 texCubemapLod(texture<uchar2, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level)
{
  uint4 v  = __utexfetchlodc(t, make_float4(x, y, z, 0), level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __forceinline __declspec(__device__) float4 texCubemapLod(texture<char4, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level)
{
  int4 v   = __itexfetchlodc(t, make_float4(x, y, z, 0), level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}

static __forceinline __declspec(__device__) float4 texCubemapLod(texture<uchar4, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level)
{
  uint4 v  = __utexfetchlodc(t, make_float4(x, y, z, 0), level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}







static __forceinline __declspec(__device__) float texCubemapLod(texture<short, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level)
{
  int4 v   = __itexfetchlodc(t, make_float4(x, y, z, 0), level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __forceinline __declspec(__device__) float texCubemapLod(texture<unsigned short, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level)
{
  uint4 v  = __utexfetchlodc(t, make_float4(x, y, z, 0), level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __forceinline __declspec(__device__) float1 texCubemapLod(texture<short1, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level)
{
  int4 v   = __itexfetchlodc(t, make_float4(x, y, z, 0), level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __forceinline __declspec(__device__) float1 texCubemapLod(texture<ushort1, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level)
{
  uint4 v  = __utexfetchlodc(t, make_float4(x, y, z, 0), level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __forceinline __declspec(__device__) float2 texCubemapLod(texture<short2, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level)
{
  int4 v   = __itexfetchlodc(t, make_float4(x, y, z, 0), level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __forceinline __declspec(__device__) float2 texCubemapLod(texture<ushort2, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level)
{
  uint4 v  = __utexfetchlodc(t, make_float4(x, y, z, 0), level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __forceinline __declspec(__device__) float4 texCubemapLod(texture<short4, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level)
{
  int4 v   = __itexfetchlodc(t, make_float4(x, y, z, 0), level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}

static __forceinline __declspec(__device__) float4 texCubemapLod(texture<ushort4, 0x0C, cudaReadModeNormalizedFloat> t, float x, float y, float z, float level)
{
  uint4 v   = __utexfetchlodc(t, make_float4(x, y, z, 0), level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}







static __forceinline __declspec(__device__) char texCubemapLayeredLod(texture<char, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level)
{


#line 6829 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_fetch_functions.h"
  int4 v  = __itexfetchlodlc(t, make_float4(x, y, z, 0), layer, level);
#line 6831 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_fetch_functions.h"

  return (char)v.x;
}

static __forceinline __declspec(__device__) signed char texCubemapLayeredLod(texture<signed char, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level)
{
  int4 v = __itexfetchlodlc(t, make_float4(x, y, z, 0), layer, level);

  return (signed char)v.x;
}

static __forceinline __declspec(__device__) unsigned char texCubemapLayeredLod(texture<unsigned char, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level)
{
  uint4 v = __utexfetchlodlc(t, make_float4(x, y, z, 0), layer, level);

  return (unsigned char)v.x;
}

static __forceinline __declspec(__device__) char1 texCubemapLayeredLod(texture<char1, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level)
{
  int4 v = __itexfetchlodlc(t, make_float4(x, y, z, 0), layer, level);

  return make_char1(v.x);
}

static __forceinline __declspec(__device__) uchar1 texCubemapLayeredLod(texture<uchar1, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level)
{
  uint4 v = __utexfetchlodlc(t, make_float4(x, y, z, 0), layer, level);

  return make_uchar1(v.x);
}

static __forceinline __declspec(__device__) char2 texCubemapLayeredLod(texture<char2, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level)
{
  int4 v = __itexfetchlodlc(t, make_float4(x, y, z, 0), layer, level);

  return make_char2(v.x, v.y);
}

static __forceinline __declspec(__device__) uchar2 texCubemapLayeredLod(texture<uchar2, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level)
{
  uint4 v = __utexfetchlodlc(t, make_float4(x, y, z, 0), layer, level);

  return make_uchar2(v.x, v.y);
}

static __forceinline __declspec(__device__) char4 texCubemapLayeredLod(texture<char4, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level)
{
  int4 v = __itexfetchlodlc(t, make_float4(x, y, z, 0), layer, level);

  return make_char4(v.x, v.y, v.z, v.w);
}

static __forceinline __declspec(__device__) uchar4 texCubemapLayeredLod(texture<uchar4, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level)
{
  uint4 v = __utexfetchlodlc(t, make_float4(x, y, z, 0), layer, level);

  return make_uchar4(v.x, v.y, v.z, v.w);
}







static __forceinline __declspec(__device__) short texCubemapLayeredLod(texture<short, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level)
{
  int4 v = __itexfetchlodlc(t, make_float4(x, y, z, 0), layer, level);

  return (short)v.x;
}

static __forceinline __declspec(__device__) unsigned short texCubemapLayeredLod(texture<unsigned short, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level)
{
  uint4 v = __utexfetchlodlc(t, make_float4(x, y, z, 0), layer, level);

  return (unsigned short)v.x;
}

static __forceinline __declspec(__device__) short1 texCubemapLayeredLod(texture<short1, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level)
{
  int4 v = __itexfetchlodlc(t, make_float4(x, y, z, 0), layer, level);

  return make_short1(v.x);
}

static __forceinline __declspec(__device__) ushort1 texCubemapLayeredLod(texture<ushort1, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level)
{
  uint4 v = __utexfetchlodlc(t, make_float4(x, y, z, 0), layer, level);

  return make_ushort1(v.x);
}

static __forceinline __declspec(__device__) short2 texCubemapLayeredLod(texture<short2, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level)
{
  int4 v = __itexfetchlodlc(t, make_float4(x, y, z, 0), layer, level);

  return make_short2(v.x, v.y);
}

static __forceinline __declspec(__device__) ushort2 texCubemapLayeredLod(texture<ushort2, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level)
{
  uint4 v = __utexfetchlodlc(t, make_float4(x, y, z, 0), layer, level);

  return make_ushort2(v.x, v.y);
}

static __forceinline __declspec(__device__) short4 texCubemapLayeredLod(texture<short4, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level)
{
  int4 v = __itexfetchlodlc(t, make_float4(x, y, z, 0), layer, level);

  return make_short4(v.x, v.y, v.z, v.w);
}

static __forceinline __declspec(__device__) ushort4 texCubemapLayeredLod(texture<ushort4, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level)
{
  uint4 v = __utexfetchlodlc(t, make_float4(x, y, z, 0), layer, level);

  return make_ushort4(v.x, v.y, v.z, v.w);
}







static __forceinline __declspec(__device__) int texCubemapLayeredLod(texture<int, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level)
{
  int4 v = __itexfetchlodlc(t, make_float4(x, y, z, 0), layer, level);

  return (int)v.x;
}

static __forceinline __declspec(__device__) unsigned int texCubemapLayeredLod(texture<unsigned int, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level)
{
  uint4 v = __utexfetchlodlc(t, make_float4(x, y, z, 0), layer, level);

  return (unsigned int)v.x;
}

static __forceinline __declspec(__device__) int1 texCubemapLayeredLod(texture<int1, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level)
{
  int4 v = __itexfetchlodlc(t, make_float4(x, y, z, 0), layer, level);

  return make_int1(v.x);
}

static __forceinline __declspec(__device__) uint1 texCubemapLayeredLod(texture<uint1, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level)
{
  uint4 v = __utexfetchlodlc(t, make_float4(x, y, z, 0), layer, level);

  return make_uint1(v.x);
}

static __forceinline __declspec(__device__) int2 texCubemapLayeredLod(texture<int2, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level)
{
  int4 v = __itexfetchlodlc(t, make_float4(x, y, z, 0), layer, level);

  return make_int2(v.x, v.y);
}

static __forceinline __declspec(__device__) uint2 texCubemapLayeredLod(texture<uint2, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level)
{
  uint4 v = __utexfetchlodlc(t, make_float4(x, y, z, 0), layer, level);

  return make_uint2(v.x, v.y);
}

static __forceinline __declspec(__device__) int4 texCubemapLayeredLod(texture<int4, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level)
{
  int4 v = __itexfetchlodlc(t, make_float4(x, y, z, 0), layer, level);

  return make_int4(v.x, v.y, v.z, v.w);
}

static __forceinline __declspec(__device__) uint4 texCubemapLayeredLod(texture<uint4, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level)
{
  uint4 v = __utexfetchlodlc(t, make_float4(x, y, z, 0), layer, level);

  return make_uint4(v.x, v.y, v.z, v.w);
}









static __forceinline __declspec(__device__) long texCubemapLayeredLod(texture<long, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level)
{
  int4 v = __itexfetchlodlc(t, make_float4(x, y, z, 0), layer, level);

  return (long)v.x;
}

static __forceinline __declspec(__device__) unsigned long texCubemapLayeredLod(texture<unsigned long, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level)
{
  uint4 v = __utexfetchlodlc(t, make_float4(x, y, z, 0), layer, level);

  return (unsigned long)v.x;
}

static __forceinline __declspec(__device__) long1 texCubemapLayeredLod(texture<long1, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level)
{
  int4 v = __itexfetchlodlc(t, make_float4(x, y, z, 0), layer, level);

  return make_long1(v.x);
}

static __forceinline __declspec(__device__) ulong1 texCubemapLayeredLod(texture<ulong1, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level)
{
  uint4 v = __utexfetchlodlc(t, make_float4(x, y, z, 0), layer, level);

  return make_ulong1(v.x);
}

static __forceinline __declspec(__device__) long2 texCubemapLayeredLod(texture<long2, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level)
{
  int4 v = __itexfetchlodlc(t, make_float4(x, y, z, 0), layer, level);

  return make_long2(v.x, v.y);
}

static __forceinline __declspec(__device__) ulong2 texCubemapLayeredLod(texture<ulong2, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level)
{
  uint4 v = __utexfetchlodlc(t, make_float4(x, y, z, 0), layer, level);

  return make_ulong2(v.x, v.y);
}

static __forceinline __declspec(__device__) long4 texCubemapLayeredLod(texture<long4, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level)
{
  int4 v = __itexfetchlodlc(t, make_float4(x, y, z, 0), layer, level);

  return make_long4(v.x, v.y, v.z, v.w);
}

static __forceinline __declspec(__device__) ulong4 texCubemapLayeredLod(texture<ulong4, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level)
{
  uint4 v = __utexfetchlodlc(t, make_float4(x, y, z, 0), layer, level);

  return make_ulong4(v.x, v.y, v.z, v.w);
}

#line 7080 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_fetch_functions.h"







static __forceinline __declspec(__device__) float texCubemapLayeredLod(texture<float, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level)
{
  float4 v = __ftexfetchlodlc(t, make_float4(x, y, z, 0), layer, level);

  return v.x;
}

static __forceinline __declspec(__device__) float1 texCubemapLayeredLod(texture<float1, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level)
{
  float4 v = __ftexfetchlodlc(t, make_float4(x, y, z, 0), layer, level);

  return make_float1(v.x);
}

static __forceinline __declspec(__device__) float2 texCubemapLayeredLod(texture<float2, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level)
{
  float4 v = __ftexfetchlodlc(t, make_float4(x, y, z, 0), layer, level);

  return make_float2(v.x, v.y);
}

static __forceinline __declspec(__device__) float4 texCubemapLayeredLod(texture<float4, 0xFC, cudaReadModeElementType> t, float x, float y, float z, int layer, float level)
{
  float4 v = __ftexfetchlodlc(t, make_float4(x, y, z, 0), layer, level);

  return make_float4(v.x, v.y, v.z, v.w);
}







static __forceinline __declspec(__device__) float texCubemapLayeredLod(texture<char, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer, float level)
{


#line 7126 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_fetch_functions.h"
  int4 v   = __itexfetchlodlc(t, make_float4(x, y, z, 0), layer, level);
#line 7128 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_fetch_functions.h"
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __forceinline __declspec(__device__) float texCubemapLayeredLod(texture<signed char, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer, float level)
{
  int4 v   = __itexfetchlodlc(t, make_float4(x, y, z, 0), layer, level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __forceinline __declspec(__device__) float texCubemapLayeredLod(texture<unsigned char, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer, float level)
{
  uint4 v  = __utexfetchlodlc(t, make_float4(x, y, z, 0), layer, level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __forceinline __declspec(__device__) float1 texCubemapLayeredLod(texture<char1, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer, float level)
{
  int4 v   = __itexfetchlodlc(t, make_float4(x, y, z, 0), layer, level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __forceinline __declspec(__device__) float1 texCubemapLayeredLod(texture<uchar1, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer, float level)
{
  uint4 v  = __utexfetchlodlc(t, make_float4(x, y, z, 0), layer, level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __forceinline __declspec(__device__) float2 texCubemapLayeredLod(texture<char2, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer, float level)
{
  int4 v   = __itexfetchlodlc(t, make_float4(x, y, z, 0), layer, level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __forceinline __declspec(__device__) float2 texCubemapLayeredLod(texture<uchar2, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer, float level)
{
  uint4 v  = __utexfetchlodlc(t, make_float4(x, y, z, 0), layer, level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __forceinline __declspec(__device__) float4 texCubemapLayeredLod(texture<char4, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer, float level)
{
  int4 v   = __itexfetchlodlc(t, make_float4(x, y, z, 0), layer, level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}

static __forceinline __declspec(__device__) float4 texCubemapLayeredLod(texture<uchar4, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer, float level)
{
  uint4 v  = __utexfetchlodlc(t, make_float4(x, y, z, 0), layer, level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}







static __forceinline __declspec(__device__) float texCubemapLayeredLod(texture<short, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer, float level)
{
  int4 v   = __itexfetchlodlc(t, make_float4(x, y, z, 0), layer, level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __forceinline __declspec(__device__) float texCubemapLayeredLod(texture<unsigned short, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer, float level)
{
  uint4 v  = __utexfetchlodlc(t, make_float4(x, y, z, 0), layer, level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __forceinline __declspec(__device__) float1 texCubemapLayeredLod(texture<short1, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer, float level)
{
  int4 v   = __itexfetchlodlc(t, make_float4(x, y, z, 0), layer, level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __forceinline __declspec(__device__) float1 texCubemapLayeredLod(texture<ushort1, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer, float level)
{
  uint4 v  = __utexfetchlodlc(t, make_float4(x, y, z, 0), layer, level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __forceinline __declspec(__device__) float2 texCubemapLayeredLod(texture<short2, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer, float level)
{
  int4 v   = __itexfetchlodlc(t, make_float4(x, y, z, 0), layer, level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __forceinline __declspec(__device__) float2 texCubemapLayeredLod(texture<ushort2, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer, float level)
{
  uint4 v  = __utexfetchlodlc(t, make_float4(x, y, z, 0), layer, level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __forceinline __declspec(__device__) float4 texCubemapLayeredLod(texture<short4, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer, float level)
{
  int4 v   = __itexfetchlodlc(t, make_float4(x, y, z, 0), layer, level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}

static __forceinline __declspec(__device__) float4 texCubemapLayeredLod(texture<ushort4, 0xFC, cudaReadModeNormalizedFloat> t, float x, float y, float z, int layer, float level)
{
  uint4 v   = __utexfetchlodlc(t, make_float4(x, y, z, 0), layer, level);
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}


template<class T, int texType, enum cudaTextureReadMode readMode> extern __declspec(__device__) __declspec(__device_builtin__)  uint4 __utexfetchgrad(texture<T, texType, readMode> t, float4 i, float4 dPdx, float4 dPdy, int d = texType);
template<class T, int texType, enum cudaTextureReadMode readMode> extern __declspec(__device__) __declspec(__device_builtin__)   int4 __itexfetchgrad(texture<T, texType, readMode> t, float4 i, float4 dPdx, float4 dPdy, int d = texType);
template<class T, int texType, enum cudaTextureReadMode readMode> extern __declspec(__device__) __declspec(__device_builtin__) float4 __ftexfetchgrad(texture<T, texType, readMode> t, float4 i, float4 dPdx, float4 dPdy, int d = texType);
template<class T, int texType, enum cudaTextureReadMode readMode> extern __declspec(__device__) __declspec(__device_builtin__)  uint4 __utexfetchgradl(texture<T, texType, readMode> t, float4 i, int l, float4 dPdx, float4 dPdy, int d = (texType & 0xF));
template<class T, int texType, enum cudaTextureReadMode readMode> extern __declspec(__device__) __declspec(__device_builtin__)   int4 __itexfetchgradl(texture<T, texType, readMode> t, float4 i, int l, float4 dPdx, float4 dPdy, int d = (texType & 0xF));
template<class T, int texType, enum cudaTextureReadMode readMode> extern __declspec(__device__) __declspec(__device_builtin__) float4 __ftexfetchgradl(texture<T, texType, readMode> t, float4 i, int l, float4 dPdx, float4 dPdy, int d = (texType & 0xF));







static __forceinline __declspec(__device__) char tex1DGrad(texture<char, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy)
{


#line 7286 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_fetch_functions.h"
  int4 v  = __itexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));
#line 7288 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_fetch_functions.h"

  return (char)v.x;
}

static __forceinline __declspec(__device__) signed char tex1DGrad(texture<signed char, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy)
{
  int4 v = __itexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));

  return (signed char)v.x;
}

static __forceinline __declspec(__device__) unsigned char tex1DGrad(texture<unsigned char, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy)
{
  uint4 v = __utexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));

  return (unsigned char)v.x;
}

static __forceinline __declspec(__device__) char1 tex1DGrad(texture<char1, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy)
{
  int4 v = __itexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));

  return make_char1(v.x);
}

static __forceinline __declspec(__device__) uchar1 tex1DGrad(texture<uchar1, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy)
{
  uint4 v = __utexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));

  return make_uchar1(v.x);
}

static __forceinline __declspec(__device__) char2 tex1DGrad(texture<char2, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy)
{
  int4 v = __itexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));

  return make_char2(v.x, v.y);
}

static __forceinline __declspec(__device__) uchar2 tex1DGrad(texture<uchar2, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy)
{
  uint4 v = __utexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));

  return make_uchar2(v.x, v.y);
}

static __forceinline __declspec(__device__) char4 tex1DGrad(texture<char4, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy)
{
  int4 v = __itexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));

  return make_char4(v.x, v.y, v.z, v.w);
}

static __forceinline __declspec(__device__) uchar4 tex1DGrad(texture<uchar4, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy)
{
  uint4 v = __utexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));

  return make_uchar4(v.x, v.y, v.z, v.w);
}







static __forceinline __declspec(__device__) short tex1DGrad(texture<short, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy)
{
  int4 v = __itexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));

  return (short)v.x;
}

static __forceinline __declspec(__device__) unsigned short tex1DGrad(texture<unsigned short, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy)
{
  uint4 v = __utexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));

  return (unsigned short)v.x;
}

static __forceinline __declspec(__device__) short1 tex1DGrad(texture<short1, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy)
{
  int4 v = __itexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));

  return make_short1(v.x);
}

static __forceinline __declspec(__device__) ushort1 tex1DGrad(texture<ushort1, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy)
{
  uint4 v = __utexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));

  return make_ushort1(v.x);
}

static __forceinline __declspec(__device__) short2 tex1DGrad(texture<short2, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy)
{
  int4 v = __itexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));

  return make_short2(v.x, v.y);
}

static __forceinline __declspec(__device__) ushort2 tex1DGrad(texture<ushort2, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy)
{
  uint4 v = __utexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));

  return make_ushort2(v.x, v.y);
}

static __forceinline __declspec(__device__) short4 tex1DGrad(texture<short4, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy)
{
  int4 v = __itexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));

  return make_short4(v.x, v.y, v.z, v.w);
}

static __forceinline __declspec(__device__) ushort4 tex1DGrad(texture<ushort4, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy)
{
  uint4 v = __utexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));

  return make_ushort4(v.x, v.y, v.z, v.w);
}







static __forceinline __declspec(__device__) int tex1DGrad(texture<int, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy)
{
  int4 v = __itexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));

  return (int)v.x;
}

static __forceinline __declspec(__device__) unsigned int tex1DGrad(texture<unsigned int, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy)
{
  uint4 v = __utexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));

  return (unsigned int)v.x;
}

static __forceinline __declspec(__device__) int1 tex1DGrad(texture<int1, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy)
{
  int4 v = __itexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));

  return make_int1(v.x);
}

static __forceinline __declspec(__device__) uint1 tex1DGrad(texture<uint1, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy)
{
  uint4 v = __utexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));

  return make_uint1(v.x);
}

static __forceinline __declspec(__device__) int2 tex1DGrad(texture<int2, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy)
{
  int4 v = __itexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));

  return make_int2(v.x, v.y);
}

static __forceinline __declspec(__device__) uint2 tex1DGrad(texture<uint2, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy)
{
  uint4 v = __utexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));

  return make_uint2(v.x, v.y);
}

static __forceinline __declspec(__device__) int4 tex1DGrad(texture<int4, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy)
{
  int4 v = __itexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));

  return make_int4(v.x, v.y, v.z, v.w);
}

static __forceinline __declspec(__device__) uint4 tex1DGrad(texture<uint4, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy)
{
  uint4 v = __utexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));

  return make_uint4(v.x, v.y, v.z, v.w);
}















static __forceinline __declspec(__device__) long tex1DGrad(texture<long, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy)
{
  int4 v = __itexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));

  return (long)v.x;
}

static __forceinline __declspec(__device__) unsigned long tex1DGrad(texture<unsigned long, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy)
{
  uint4 v = __utexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));

  return (unsigned long)v.x;
}

static __forceinline __declspec(__device__) long1 tex1DGrad(texture<long1, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy)
{
  int4 v = __itexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));

  return make_long1(v.x);
}

static __forceinline __declspec(__device__) ulong1 tex1DGrad(texture<ulong1, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy)
{
  uint4 v = __utexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));

  return make_ulong1(v.x);
}

static __forceinline __declspec(__device__) long2 tex1DGrad(texture<long2, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy)
{
  int4 v = __itexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));

  return make_long2(v.x, v.y);
}

static __forceinline __declspec(__device__) ulong2 tex1DGrad(texture<ulong2, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy)
{
  uint4 v = __utexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));

  return make_ulong2(v.x, v.y);
}

static __forceinline __declspec(__device__) long4 tex1DGrad(texture<long4, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy)
{
  int4 v = __itexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));

  return make_long4(v.x, v.y, v.z, v.w);
}

static __forceinline __declspec(__device__) ulong4 tex1DGrad(texture<ulong4, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy)
{
  uint4 v = __utexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));

  return make_ulong4(v.x, v.y, v.z, v.w);
}

#line 7543 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_fetch_functions.h"







static __forceinline __declspec(__device__) float tex1DGrad(texture<float, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy)
{
  float4 v = __ftexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));

  return v.x;
}

static __forceinline __declspec(__device__) float1 tex1DGrad(texture<float1, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy)
{
  float4 v = __ftexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));

  return make_float1(v.x);
}

static __forceinline __declspec(__device__) float2 tex1DGrad(texture<float2, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy)
{
  float4 v = __ftexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));

  return make_float2(v.x, v.y);
}

static __forceinline __declspec(__device__) float4 tex1DGrad(texture<float4, 0x01, cudaReadModeElementType> t, float x, float dPdx, float dPdy)
{
  float4 v = __ftexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));

  return make_float4(v.x, v.y, v.z, v.w);
}







static __forceinline __declspec(__device__) float tex1DGrad(texture<char, 0x01, cudaReadModeNormalizedFloat> t, float x, float dPdx, float dPdy)
{


#line 7589 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_fetch_functions.h"
  int4 v   = __itexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));
#line 7591 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_fetch_functions.h"
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __forceinline __declspec(__device__) float tex1DGrad(texture<signed char, 0x01, cudaReadModeNormalizedFloat> t, float x, float dPdx, float dPdy)
{
  int4 v   = __itexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __forceinline __declspec(__device__) float tex1DGrad(texture<unsigned char, 0x01, cudaReadModeNormalizedFloat> t, float x, float dPdx, float dPdy)
{
  uint4 v  = __utexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __forceinline __declspec(__device__) float1 tex1DGrad(texture<char1, 0x01, cudaReadModeNormalizedFloat> t, float x, float dPdx, float dPdy)
{
  int4 v   = __itexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __forceinline __declspec(__device__) float1 tex1DGrad(texture<uchar1, 0x01, cudaReadModeNormalizedFloat> t, float x, float dPdx, float dPdy)
{
  uint4 v  = __utexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __forceinline __declspec(__device__) float2 tex1DGrad(texture<char2, 0x01, cudaReadModeNormalizedFloat> t, float x, float dPdx, float dPdy)
{
  int4 v   = __itexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __forceinline __declspec(__device__) float2 tex1DGrad(texture<uchar2, 0x01, cudaReadModeNormalizedFloat> t, float x, float dPdx, float dPdy)
{
  uint4 v  = __utexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __forceinline __declspec(__device__) float4 tex1DGrad(texture<char4, 0x01, cudaReadModeNormalizedFloat> t, float x, float dPdx, float dPdy)
{
  int4 v   = __itexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}

static __forceinline __declspec(__device__) float4 tex1DGrad(texture<uchar4, 0x01, cudaReadModeNormalizedFloat> t, float x, float dPdx, float dPdy)
{
  uint4 v  = __utexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}







static __forceinline __declspec(__device__) float tex1DGrad(texture<short, 0x01, cudaReadModeNormalizedFloat> t, float x, float dPdx, float dPdy)
{
  int4 v   = __itexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __forceinline __declspec(__device__) float tex1DGrad(texture<unsigned short, 0x01, cudaReadModeNormalizedFloat> t, float x, float dPdx, float dPdy)
{
  uint4 v  = __utexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __forceinline __declspec(__device__) float1 tex1DGrad(texture<short1, 0x01, cudaReadModeNormalizedFloat> t, float x, float dPdx, float dPdy)
{
  int4 v   = __itexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __forceinline __declspec(__device__) float1 tex1DGrad(texture<ushort1, 0x01, cudaReadModeNormalizedFloat> t, float x, float dPdx, float dPdy)
{
  uint4 v  = __utexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __forceinline __declspec(__device__) float2 tex1DGrad(texture<short2, 0x01, cudaReadModeNormalizedFloat> t, float x, float dPdx, float dPdy)
{
  int4 v   = __itexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __forceinline __declspec(__device__) float2 tex1DGrad(texture<ushort2, 0x01, cudaReadModeNormalizedFloat> t, float x, float dPdx, float dPdy)
{
  uint4 v  = __utexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __forceinline __declspec(__device__) float4 tex1DGrad(texture<short4, 0x01, cudaReadModeNormalizedFloat> t, float x, float dPdx, float dPdy)
{
  int4 v   = __itexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}

static __forceinline __declspec(__device__) float4 tex1DGrad(texture<ushort4, 0x01, cudaReadModeNormalizedFloat> t, float x, float dPdx, float dPdy)
{
  uint4 v   = __utexfetchgrad(t, make_float4(x, 0, 0, 0), make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}







static __forceinline __declspec(__device__) char tex2DGrad(texture<char, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy)
{


#line 7741 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_fetch_functions.h"
  int4 v  = __itexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));
#line 7743 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_fetch_functions.h"

  return (char)v.x;
}

static __forceinline __declspec(__device__) signed char tex2DGrad(texture<signed char, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy)
{
  int4 v = __itexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));

  return (signed char)v.x;
}

static __forceinline __declspec(__device__) unsigned char tex2DGrad(texture<unsigned char, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy)
{
  uint4 v = __utexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));

  return (unsigned char)v.x;
}

static __forceinline __declspec(__device__) char1 tex2DGrad(texture<char1, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy)
{
  int4 v = __itexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));

  return make_char1(v.x);
}

static __forceinline __declspec(__device__) uchar1 tex2DGrad(texture<uchar1, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy)
{
  uint4 v = __utexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));

  return make_uchar1(v.x);
}

static __forceinline __declspec(__device__) char2 tex2DGrad(texture<char2, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy)
{
  int4 v = __itexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));

  return make_char2(v.x, v.y);
}

static __forceinline __declspec(__device__) uchar2 tex2DGrad(texture<uchar2, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy)
{
  uint4 v = __utexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));

  return make_uchar2(v.x, v.y);
}

static __forceinline __declspec(__device__) char4 tex2DGrad(texture<char4, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy)
{
  int4 v = __itexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));

  return make_char4(v.x, v.y, v.z, v.w);
}

static __forceinline __declspec(__device__) uchar4 tex2DGrad(texture<uchar4, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy)
{
  uint4 v = __utexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));

  return make_uchar4(v.x, v.y, v.z, v.w);
}







static __forceinline __declspec(__device__) short tex2DGrad(texture<short, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy)
{
  int4 v = __itexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));

  return (short)v.x;
}

static __forceinline __declspec(__device__) unsigned short tex2DGrad(texture<unsigned short, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy)
{
  uint4 v = __utexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));

  return (unsigned short)v.x;
}

static __forceinline __declspec(__device__) short1 tex2DGrad(texture<short1, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy)
{
  int4 v = __itexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));

  return make_short1(v.x);
}

static __forceinline __declspec(__device__) ushort1 tex2DGrad(texture<ushort1, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy)
{
  uint4 v = __utexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));

  return make_ushort1(v.x);
}

static __forceinline __declspec(__device__) short2 tex2DGrad(texture<short2, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy)
{
  int4 v = __itexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));

  return make_short2(v.x, v.y);
}

static __forceinline __declspec(__device__) ushort2 tex2DGrad(texture<ushort2, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy)
{
  uint4 v = __utexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));

  return make_ushort2(v.x, v.y);
}

static __forceinline __declspec(__device__) short4 tex2DGrad(texture<short4, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy)
{
  int4 v = __itexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));

  return make_short4(v.x, v.y, v.z, v.w);
}

static __forceinline __declspec(__device__) ushort4 tex2DGrad(texture<ushort4, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy)
{
  uint4 v = __utexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));

  return make_ushort4(v.x, v.y, v.z, v.w);
}







static __forceinline __declspec(__device__) int tex2DGrad(texture<int, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy)
{
  int4 v = __itexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));

  return (int)v.x;
}

static __forceinline __declspec(__device__) unsigned int tex2DGrad(texture<unsigned int, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy)
{
  uint4 v = __utexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));

  return (unsigned int)v.x;
}

static __forceinline __declspec(__device__) int1 tex2DGrad(texture<int1, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy)
{
  int4 v = __itexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));

  return make_int1(v.x);
}

static __forceinline __declspec(__device__) uint1 tex2DGrad(texture<uint1, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy)
{
  uint4 v = __utexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));

  return make_uint1(v.x);
}

static __forceinline __declspec(__device__) int2 tex2DGrad(texture<int2, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy)
{
  int4 v = __itexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));

  return make_int2(v.x, v.y);
}

static __forceinline __declspec(__device__) uint2 tex2DGrad(texture<uint2, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy)
{
  uint4 v = __utexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));

  return make_uint2(v.x, v.y);
}

static __forceinline __declspec(__device__) int4 tex2DGrad(texture<int4, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy)
{
  int4 v = __itexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));

  return make_int4(v.x, v.y, v.z, v.w);
}

static __forceinline __declspec(__device__) uint4 tex2DGrad(texture<uint4, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy)
{
  uint4 v = __utexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));

  return make_uint4(v.x, v.y, v.z, v.w);
}









static __forceinline __declspec(__device__) long tex2DGrad(texture<long, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy)
{
  int4 v = __itexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));

  return (long)v.x;
}

static __forceinline __declspec(__device__) unsigned long tex2DGrad(texture<unsigned long, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy)
{
  uint4 v = __utexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));

  return (unsigned long)v.x;
}

static __forceinline __declspec(__device__) long1 tex2DGrad(texture<long1, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy)
{
  int4 v = __itexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));

  return make_long1(v.x);
}

static __forceinline __declspec(__device__) ulong1 tex2DGrad(texture<ulong1, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy)
{
  uint4 v = __utexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));

  return make_ulong1(v.x);
}

static __forceinline __declspec(__device__) long2 tex2DGrad(texture<long2, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy)
{
  int4 v = __itexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));

  return make_long2(v.x, v.y);
}

static __forceinline __declspec(__device__) ulong2 tex2DGrad(texture<ulong2, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy)
{
  uint4 v = __utexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));

  return make_ulong2(v.x, v.y);
}

static __forceinline __declspec(__device__) long4 tex2DGrad(texture<long4, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy)
{
  int4 v = __itexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));

  return make_long4(v.x, v.y, v.z, v.w);
}

static __forceinline __declspec(__device__) ulong4 tex2DGrad(texture<ulong4, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy)
{
  uint4 v = __utexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));

  return make_ulong4(v.x, v.y, v.z, v.w);
}

#line 7992 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_fetch_functions.h"







static __forceinline __declspec(__device__) float tex2DGrad(texture<float, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy)
{
  float4 v = __ftexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));

  return v.x;
}

static __forceinline __declspec(__device__) float1 tex2DGrad(texture<float1, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy)
{
  float4 v = __ftexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));

  return make_float1(v.x);
}

static __forceinline __declspec(__device__) float2 tex2DGrad(texture<float2, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy)
{
  float4 v = __ftexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));

  return make_float2(v.x, v.y);
}

static __forceinline __declspec(__device__) float4 tex2DGrad(texture<float4, 0x02, cudaReadModeElementType> t, float x, float y, float2 dPdx, float2 dPdy)
{
  float4 v = __ftexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));

  return make_float4(v.x, v.y, v.z, v.w);
}







static __forceinline __declspec(__device__) float tex2DGrad(texture<char, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float2 dPdx, float2 dPdy)
{


#line 8038 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_fetch_functions.h"
  int4 v   = __itexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));
#line 8040 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_fetch_functions.h"
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __forceinline __declspec(__device__) float tex2DGrad(texture<signed char, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float2 dPdx, float2 dPdy)
{
  int4 v   = __itexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __forceinline __declspec(__device__) float tex2DGrad(texture<unsigned char, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float2 dPdx, float2 dPdy)
{
  uint4 v  = __utexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __forceinline __declspec(__device__) float1 tex2DGrad(texture<char1, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float2 dPdx, float2 dPdy)
{
  int4 v   = __itexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __forceinline __declspec(__device__) float1 tex2DGrad(texture<uchar1, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float2 dPdx, float2 dPdy)
{
  uint4 v  = __utexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __forceinline __declspec(__device__) float2 tex2DGrad(texture<char2, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float2 dPdx, float2 dPdy)
{
  int4 v   = __itexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __forceinline __declspec(__device__) float2 tex2DGrad(texture<uchar2, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float2 dPdx, float2 dPdy)
{
  uint4 v  = __utexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __forceinline __declspec(__device__) float4 tex2DGrad(texture<char4, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float2 dPdx, float2 dPdy)
{
  int4 v   = __itexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}

static __forceinline __declspec(__device__) float4 tex2DGrad(texture<uchar4, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float2 dPdx, float2 dPdy)
{
  uint4 v  = __utexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}







static __forceinline __declspec(__device__) float tex2DGrad(texture<short, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float2 dPdx, float2 dPdy)
{
  int4 v   = __itexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __forceinline __declspec(__device__) float tex2DGrad(texture<unsigned short, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float2 dPdx, float2 dPdy)
{
  uint4 v  = __utexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __forceinline __declspec(__device__) float1 tex2DGrad(texture<short1, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float2 dPdx, float2 dPdy)
{
  int4 v   = __itexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __forceinline __declspec(__device__) float1 tex2DGrad(texture<ushort1, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float2 dPdx, float2 dPdy)
{
  uint4 v  = __utexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __forceinline __declspec(__device__) float2 tex2DGrad(texture<short2, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float2 dPdx, float2 dPdy)
{
  int4 v   = __itexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __forceinline __declspec(__device__) float2 tex2DGrad(texture<ushort2, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float2 dPdx, float2 dPdy)
{
  uint4 v  = __utexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __forceinline __declspec(__device__) float4 tex2DGrad(texture<short4, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float2 dPdx, float2 dPdy)
{
  int4 v   = __itexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}

static __forceinline __declspec(__device__) float4 tex2DGrad(texture<ushort4, 0x02, cudaReadModeNormalizedFloat> t, float x, float y, float2 dPdx, float2 dPdy)
{
  uint4 v   = __utexfetchgrad(t, make_float4(x, y, 0, 0), make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}







static __forceinline __declspec(__device__) char tex1DLayeredGrad(texture<char, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy)
{


#line 8190 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_fetch_functions.h"
  int4 v  = __itexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));
#line 8192 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_fetch_functions.h"

  return (char)v.x;
}

static __forceinline __declspec(__device__) signed char tex1DLayeredGrad(texture<signed char, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy)
{
  int4 v = __itexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));

  return (signed char)v.x;
}

static __forceinline __declspec(__device__) unsigned char tex1DLayeredGrad(texture<unsigned char, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy)
{
  uint4 v = __utexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));

  return (unsigned char)v.x;
}

static __forceinline __declspec(__device__) char1 tex1DLayeredGrad(texture<char1, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy)
{
  int4 v = __itexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));

  return make_char1(v.x);
}

static __forceinline __declspec(__device__) uchar1 tex1DLayeredGrad(texture<uchar1, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy)
{
  uint4 v = __utexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));

  return make_uchar1(v.x);
}

static __forceinline __declspec(__device__) char2 tex1DLayeredGrad(texture<char2, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy)
{
  int4 v = __itexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));

  return make_char2(v.x, v.y);
}

static __forceinline __declspec(__device__) uchar2 tex1DLayeredGrad(texture<uchar2, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy)
{
  uint4 v = __utexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));

  return make_uchar2(v.x, v.y);
}

static __forceinline __declspec(__device__) char4 tex1DLayeredGrad(texture<char4, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy)
{
  int4 v = __itexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));

  return make_char4(v.x, v.y, v.z, v.w);
}

static __forceinline __declspec(__device__) uchar4 tex1DLayeredGrad(texture<uchar4, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy)
{
  uint4 v = __utexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));

  return make_uchar4(v.x, v.y, v.z, v.w);
}







static __forceinline __declspec(__device__) short tex1DLayeredGrad(texture<short, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy)
{
  int4 v = __itexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));

  return (short)v.x;
}

static __forceinline __declspec(__device__) unsigned short tex1DLayeredGrad(texture<unsigned short, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy)
{
  uint4 v = __utexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));

  return (unsigned short)v.x;
}

static __forceinline __declspec(__device__) short1 tex1DLayeredGrad(texture<short1, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy)
{
  int4 v = __itexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));

  return make_short1(v.x);
}

static __forceinline __declspec(__device__) ushort1 tex1DLayeredGrad(texture<ushort1, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy)
{
  uint4 v = __utexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));

  return make_ushort1(v.x);
}

static __forceinline __declspec(__device__) short2 tex1DLayeredGrad(texture<short2, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy)
{
  int4 v = __itexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));

  return make_short2(v.x, v.y);
}

static __forceinline __declspec(__device__) ushort2 tex1DLayeredGrad(texture<ushort2, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy)
{
  uint4 v = __utexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));

  return make_ushort2(v.x, v.y);
}

static __forceinline __declspec(__device__) short4 tex1DLayeredGrad(texture<short4, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy)
{
  int4 v = __itexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));

  return make_short4(v.x, v.y, v.z, v.w);
}

static __forceinline __declspec(__device__) ushort4 tex1DLayeredGrad(texture<ushort4, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy)
{
  uint4 v = __utexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));

  return make_ushort4(v.x, v.y, v.z, v.w);
}







static __forceinline __declspec(__device__) int tex1DLayeredGrad(texture<int, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy)
{
  int4 v = __itexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));

  return (int)v.x;
}

static __forceinline __declspec(__device__) unsigned int tex1DLayeredGrad(texture<unsigned int, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy)
{
  uint4 v = __utexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));

  return (unsigned int)v.x;
}

static __forceinline __declspec(__device__) int1 tex1DLayeredGrad(texture<int1, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy)
{
  int4 v = __itexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));

  return make_int1(v.x);
}

static __forceinline __declspec(__device__) uint1 tex1DLayeredGrad(texture<uint1, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy)
{
  uint4 v = __utexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));

  return make_uint1(v.x);
}

static __forceinline __declspec(__device__) int2 tex1DLayeredGrad(texture<int2, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy)
{
  int4 v = __itexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));

  return make_int2(v.x, v.y);
}

static __forceinline __declspec(__device__) uint2 tex1DLayeredGrad(texture<uint2, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy)
{
  uint4 v = __utexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));

  return make_uint2(v.x, v.y);
}

static __forceinline __declspec(__device__) int4 tex1DLayeredGrad(texture<int4, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy)
{
  int4 v = __itexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));

  return make_int4(v.x, v.y, v.z, v.w);
}

static __forceinline __declspec(__device__) uint4 tex1DLayeredGrad(texture<uint4, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy)
{
  uint4 v = __utexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));

  return make_uint4(v.x, v.y, v.z, v.w);
}









static __forceinline __declspec(__device__) long tex1DLayeredGrad(texture<long, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy)
{
  int4 v = __itexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));

  return (long)v.x;
}

static __forceinline __declspec(__device__) unsigned long tex1DLayeredGrad(texture<unsigned long, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy)
{
  uint4 v = __utexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));

  return (unsigned long)v.x;
}

static __forceinline __declspec(__device__) long1 tex1DLayeredGrad(texture<long1, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy)
{
  int4 v = __itexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));

  return make_long1(v.x);
}

static __forceinline __declspec(__device__) ulong1 tex1DLayeredGrad(texture<ulong1, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy)
{
  uint4 v = __utexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));

  return make_ulong1(v.x);
}

static __forceinline __declspec(__device__) long2 tex1DLayeredGrad(texture<long2, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy)
{
  int4 v = __itexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));

  return make_long2(v.x, v.y);
}

static __forceinline __declspec(__device__) ulong2 tex1DLayeredGrad(texture<ulong2, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy)
{
  uint4 v = __utexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));

  return make_ulong2(v.x, v.y);
}

static __forceinline __declspec(__device__) long4 tex1DLayeredGrad(texture<long4, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy)
{
  int4 v = __itexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));

  return make_long4(v.x, v.y, v.z, v.w);
}

static __forceinline __declspec(__device__) ulong4 tex1DLayeredGrad(texture<ulong4, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy)
{
  uint4 v = __utexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));

  return make_ulong4(v.x, v.y, v.z, v.w);
}

#line 8441 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_fetch_functions.h"







static __forceinline __declspec(__device__) float tex1DLayeredGrad(texture<float, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy)
{
  float4 v = __ftexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));

  return v.x;
}

static __forceinline __declspec(__device__) float1 tex1DLayeredGrad(texture<float1, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy)
{
  float4 v = __ftexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));

  return make_float1(v.x);
}

static __forceinline __declspec(__device__) float2 tex1DLayeredGrad(texture<float2, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy)
{
  float4 v = __ftexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));

  return make_float2(v.x, v.y);
}

static __forceinline __declspec(__device__) float4 tex1DLayeredGrad(texture<float4, 0xF1, cudaReadModeElementType> t, float x, int layer, float dPdx, float dPdy)
{
  float4 v = __ftexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));

  return make_float4(v.x, v.y, v.z, v.w);
}







static __forceinline __declspec(__device__) float tex1DLayeredGrad(texture<char, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float dPdx, float dPdy)
{


#line 8487 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_fetch_functions.h"
  int4 v   = __itexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));
#line 8489 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_fetch_functions.h"
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __forceinline __declspec(__device__) float tex1DLayeredGrad(texture<signed char, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float dPdx, float dPdy)
{
  int4 v   = __itexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __forceinline __declspec(__device__) float tex1DLayeredGrad(texture<unsigned char, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float dPdx, float dPdy)
{
  uint4 v  = __utexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __forceinline __declspec(__device__) float1 tex1DLayeredGrad(texture<char1, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float dPdx, float dPdy)
{
  int4 v   = __itexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __forceinline __declspec(__device__) float1 tex1DLayeredGrad(texture<uchar1, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float dPdx, float dPdy)
{
  uint4 v  = __utexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __forceinline __declspec(__device__) float2 tex1DLayeredGrad(texture<char2, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float dPdx, float dPdy)
{
  int4 v   = __itexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __forceinline __declspec(__device__) float2 tex1DLayeredGrad(texture<uchar2, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float dPdx, float dPdy)
{
  uint4 v  = __utexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __forceinline __declspec(__device__) float4 tex1DLayeredGrad(texture<char4, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float dPdx, float dPdy)
{
  int4 v   = __itexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}

static __forceinline __declspec(__device__) float4 tex1DLayeredGrad(texture<uchar4, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float dPdx, float dPdy)
{
  uint4 v  = __utexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}







static __forceinline __declspec(__device__) float tex1DLayeredGrad(texture<short, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float dPdx, float dPdy)
{
  int4 v   = __itexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __forceinline __declspec(__device__) float tex1DLayeredGrad(texture<unsigned short, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float dPdx, float dPdy)
{
  uint4 v  = __utexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __forceinline __declspec(__device__) float1 tex1DLayeredGrad(texture<short1, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float dPdx, float dPdy)
{
  int4 v   = __itexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __forceinline __declspec(__device__) float1 tex1DLayeredGrad(texture<ushort1, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float dPdx, float dPdy)
{
  uint4 v  = __utexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __forceinline __declspec(__device__) float2 tex1DLayeredGrad(texture<short2, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float dPdx, float dPdy)
{
  int4 v   = __itexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __forceinline __declspec(__device__) float2 tex1DLayeredGrad(texture<ushort2, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float dPdx, float dPdy)
{
  uint4 v  = __utexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __forceinline __declspec(__device__) float4 tex1DLayeredGrad(texture<short4, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float dPdx, float dPdy)
{
  int4 v   = __itexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}

static __forceinline __declspec(__device__) float4 tex1DLayeredGrad(texture<ushort4, 0xF1, cudaReadModeNormalizedFloat> t, float x, int layer, float dPdx, float dPdy)
{
  uint4 v   = __utexfetchgradl(t, make_float4(x, 0, 0, 0), layer, make_float4(dPdx, 0, 0, 0), make_float4(dPdy, 0, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}







static __forceinline __declspec(__device__) char tex2DLayeredGrad(texture<char, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy)
{


#line 8639 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_fetch_functions.h"
  int4 v  = __itexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));
#line 8641 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_fetch_functions.h"

  return (char)v.x;
}

static __forceinline __declspec(__device__) signed char tex2DLayeredGrad(texture<signed char, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
  int4 v = __itexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));

  return (signed char)v.x;
}

static __forceinline __declspec(__device__) unsigned char tex2DLayeredGrad(texture<unsigned char, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
  uint4 v = __utexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));

  return (unsigned char)v.x;
}

static __forceinline __declspec(__device__) char1 tex2DLayeredGrad(texture<char1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
  int4 v = __itexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));

  return make_char1(v.x);
}

static __forceinline __declspec(__device__) uchar1 tex2DLayeredGrad(texture<uchar1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
  uint4 v = __utexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));

  return make_uchar1(v.x);
}

static __forceinline __declspec(__device__) char2 tex2DLayeredGrad(texture<char2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
  int4 v = __itexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));

  return make_char2(v.x, v.y);
}

static __forceinline __declspec(__device__) uchar2 tex2DLayeredGrad(texture<uchar2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
  uint4 v = __utexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));

  return make_uchar2(v.x, v.y);
}

static __forceinline __declspec(__device__) char4 tex2DLayeredGrad(texture<char4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
  int4 v = __itexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));

  return make_char4(v.x, v.y, v.z, v.w);
}

static __forceinline __declspec(__device__) uchar4 tex2DLayeredGrad(texture<uchar4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
  uint4 v = __utexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));

  return make_uchar4(v.x, v.y, v.z, v.w);
}







static __forceinline __declspec(__device__) short tex2DLayeredGrad(texture<short, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
  int4 v = __itexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));

  return (short)v.x;
}

static __forceinline __declspec(__device__) unsigned short tex2DLayeredGrad(texture<unsigned short, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
  uint4 v = __utexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));

  return (unsigned short)v.x;
}

static __forceinline __declspec(__device__) short1 tex2DLayeredGrad(texture<short1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
  int4 v = __itexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));

  return make_short1(v.x);
}

static __forceinline __declspec(__device__) ushort1 tex2DLayeredGrad(texture<ushort1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
  uint4 v = __utexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));

  return make_ushort1(v.x);
}

static __forceinline __declspec(__device__) short2 tex2DLayeredGrad(texture<short2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
  int4 v = __itexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));

  return make_short2(v.x, v.y);
}

static __forceinline __declspec(__device__) ushort2 tex2DLayeredGrad(texture<ushort2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
  uint4 v = __utexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));

  return make_ushort2(v.x, v.y);
}

static __forceinline __declspec(__device__) short4 tex2DLayeredGrad(texture<short4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
  int4 v = __itexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));

  return make_short4(v.x, v.y, v.z, v.w);
}

static __forceinline __declspec(__device__) ushort4 tex2DLayeredGrad(texture<ushort4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
  uint4 v = __utexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));

  return make_ushort4(v.x, v.y, v.z, v.w);
}







static __forceinline __declspec(__device__) int tex2DLayeredGrad(texture<int, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
  int4 v = __itexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));

  return (int)v.x;
}

static __forceinline __declspec(__device__) unsigned int tex2DLayeredGrad(texture<unsigned int, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
  uint4 v = __utexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));

  return (unsigned int)v.x;
}

static __forceinline __declspec(__device__) int1 tex2DLayeredGrad(texture<int1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
  int4 v = __itexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));

  return make_int1(v.x);
}

static __forceinline __declspec(__device__) uint1 tex2DLayeredGrad(texture<uint1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
  uint4 v = __utexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));

  return make_uint1(v.x);
}

static __forceinline __declspec(__device__) int2 tex2DLayeredGrad(texture<int2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
  int4 v = __itexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));

  return make_int2(v.x, v.y);
}

static __forceinline __declspec(__device__) uint2 tex2DLayeredGrad(texture<uint2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
  uint4 v = __utexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));

  return make_uint2(v.x, v.y);
}

static __forceinline __declspec(__device__) int4 tex2DLayeredGrad(texture<int4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
  int4 v = __itexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));

  return make_int4(v.x, v.y, v.z, v.w);
}

static __forceinline __declspec(__device__) uint4 tex2DLayeredGrad(texture<uint4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
  uint4 v = __utexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));

  return make_uint4(v.x, v.y, v.z, v.w);
}









static __forceinline __declspec(__device__) long tex2DLayeredGrad(texture<long, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
  int4 v = __itexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));

  return (long)v.x;
}

static __forceinline __declspec(__device__) unsigned long tex2DLayeredGrad(texture<unsigned long, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
  uint4 v = __utexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));

  return (unsigned long)v.x;
}

static __forceinline __declspec(__device__) long1 tex2DLayeredGrad(texture<long1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
  int4 v = __itexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));

  return make_long1(v.x);
}

static __forceinline __declspec(__device__) ulong1 tex2DLayeredGrad(texture<ulong1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
  uint4 v = __utexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));

  return make_ulong1(v.x);
}

static __forceinline __declspec(__device__) long2 tex2DLayeredGrad(texture<long2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
  int4 v = __itexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));

  return make_long2(v.x, v.y);
}

static __forceinline __declspec(__device__) ulong2 tex2DLayeredGrad(texture<ulong2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
  uint4 v = __utexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));

  return make_ulong2(v.x, v.y);
}

static __forceinline __declspec(__device__) long4 tex2DLayeredGrad(texture<long4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
  int4 v = __itexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));

  return make_long4(v.x, v.y, v.z, v.w);
}

static __forceinline __declspec(__device__) ulong4 tex2DLayeredGrad(texture<ulong4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
  uint4 v = __utexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));

  return make_ulong4(v.x, v.y, v.z, v.w);
}

#line 8890 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_fetch_functions.h"







static __forceinline __declspec(__device__) float tex2DLayeredGrad(texture<float, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
  float4 v = __ftexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));

  return v.x;
}

static __forceinline __declspec(__device__) float1 tex2DLayeredGrad(texture<float1, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
  float4 v = __ftexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));

  return make_float1(v.x);
}

static __forceinline __declspec(__device__) float2 tex2DLayeredGrad(texture<float2, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
  float4 v = __ftexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));

  return make_float2(v.x, v.y);
}

static __forceinline __declspec(__device__) float4 tex2DLayeredGrad(texture<float4, 0xF2, cudaReadModeElementType> t, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
  float4 v = __ftexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));

  return make_float4(v.x, v.y, v.z, v.w);
}







static __forceinline __declspec(__device__) float tex2DLayeredGrad(texture<char, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float2 dPdx, float2 dPdy)
{


#line 8936 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_fetch_functions.h"
  int4 v   = __itexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));
#line 8938 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_fetch_functions.h"
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __forceinline __declspec(__device__) float tex2DLayeredGrad(texture<signed char, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
  int4 v   = __itexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __forceinline __declspec(__device__) float tex2DLayeredGrad(texture<unsigned char, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
  uint4 v  = __utexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __forceinline __declspec(__device__) float1 tex2DLayeredGrad(texture<char1, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
  int4 v   = __itexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __forceinline __declspec(__device__) float1 tex2DLayeredGrad(texture<uchar1, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
  uint4 v  = __utexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __forceinline __declspec(__device__) float2 tex2DLayeredGrad(texture<char2, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
  int4 v   = __itexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __forceinline __declspec(__device__) float2 tex2DLayeredGrad(texture<uchar2, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
  uint4 v  = __utexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __forceinline __declspec(__device__) float4 tex2DLayeredGrad(texture<char4, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
  int4 v   = __itexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}

static __forceinline __declspec(__device__) float4 tex2DLayeredGrad(texture<uchar4, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
  uint4 v  = __utexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}







static __forceinline __declspec(__device__) float tex2DLayeredGrad(texture<short, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
  int4 v   = __itexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __forceinline __declspec(__device__) float tex2DLayeredGrad(texture<unsigned short, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
  uint4 v  = __utexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __forceinline __declspec(__device__) float1 tex2DLayeredGrad(texture<short1, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
  int4 v   = __itexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __forceinline __declspec(__device__) float1 tex2DLayeredGrad(texture<ushort1, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
  uint4 v  = __utexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __forceinline __declspec(__device__) float2 tex2DLayeredGrad(texture<short2, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
  int4 v   = __itexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __forceinline __declspec(__device__) float2 tex2DLayeredGrad(texture<ushort2, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
  uint4 v  = __utexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __forceinline __declspec(__device__) float4 tex2DLayeredGrad(texture<short4, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
  int4 v   = __itexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}

static __forceinline __declspec(__device__) float4 tex2DLayeredGrad(texture<ushort4, 0xF2, cudaReadModeNormalizedFloat> t, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
  uint4 v   = __utexfetchgradl(t, make_float4(x, y, 0, 0), layer, make_float4(dPdx.x, dPdx.y, 0, 0), make_float4(dPdy.x, dPdy.y, 0, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}







static __forceinline __declspec(__device__) char tex3DGrad(texture<char, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy)
{


#line 9088 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_fetch_functions.h"
  int4 v  = __itexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0));
#line 9090 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_fetch_functions.h"

  return (char)v.x;
}

static __forceinline __declspec(__device__) signed char tex3DGrad(texture<signed char, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy)
{
  int4 v = __itexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0));

  return (signed char)v.x;
}

static __forceinline __declspec(__device__) unsigned char tex3DGrad(texture<unsigned char, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy)
{
  uint4 v = __utexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0));

  return (unsigned char)v.x;
}

static __forceinline __declspec(__device__) char1 tex3DGrad(texture<char1, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy)
{
  int4 v = __itexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0));

  return make_char1(v.x);
}

static __forceinline __declspec(__device__) uchar1 tex3DGrad(texture<uchar1, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy)
{
  uint4 v = __utexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0));

  return make_uchar1(v.x);
}

static __forceinline __declspec(__device__) char2 tex3DGrad(texture<char2, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy)
{
  int4 v = __itexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0));

  return make_char2(v.x, v.y);
}

static __forceinline __declspec(__device__) uchar2 tex3DGrad(texture<uchar2, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy)
{
  uint4 v = __utexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0));

  return make_uchar2(v.x, v.y);
}

static __forceinline __declspec(__device__) char4 tex3DGrad(texture<char4, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy)
{
  int4 v = __itexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0));

  return make_char4(v.x, v.y, v.z, v.w);
}

static __forceinline __declspec(__device__) uchar4 tex3DGrad(texture<uchar4, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy)
{
  uint4 v = __utexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0));

  return make_uchar4(v.x, v.y, v.z, v.w);
}







static __forceinline __declspec(__device__) short tex3DGrad(texture<short, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy)
{
  int4 v = __itexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0));

  return (short)v.x;
}

static __forceinline __declspec(__device__) unsigned short tex3DGrad(texture<unsigned short, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy)
{
  uint4 v = __utexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0));

  return (unsigned short)v.x;
}

static __forceinline __declspec(__device__) short1 tex3DGrad(texture<short1, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy)
{
  int4 v = __itexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0));

  return make_short1(v.x);
}

static __forceinline __declspec(__device__) ushort1 tex3DGrad(texture<ushort1, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy)
{
  uint4 v = __utexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0));

  return make_ushort1(v.x);
}

static __forceinline __declspec(__device__) short2 tex3DGrad(texture<short2, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy)
{
  int4 v = __itexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0));

  return make_short2(v.x, v.y);
}

static __forceinline __declspec(__device__) ushort2 tex3DGrad(texture<ushort2, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy)
{
  uint4 v = __utexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0));

  return make_ushort2(v.x, v.y);
}

static __forceinline __declspec(__device__) short4 tex3DGrad(texture<short4, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy)
{
  int4 v = __itexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0));

  return make_short4(v.x, v.y, v.z, v.w);
}

static __forceinline __declspec(__device__) ushort4 tex3DGrad(texture<ushort4, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy)
{
  uint4 v = __utexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0));

  return make_ushort4(v.x, v.y, v.z, v.w);
}







static __forceinline __declspec(__device__) int tex3DGrad(texture<int, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy)
{
  int4 v = __itexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0));

  return (int)v.x;
}

static __forceinline __declspec(__device__) unsigned int tex3DGrad(texture<unsigned int, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy)
{
  uint4 v = __utexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0));

  return (unsigned int)v.x;
}

static __forceinline __declspec(__device__) int1 tex3DGrad(texture<int1, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy)
{
  int4 v = __itexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0));

  return make_int1(v.x);
}

static __forceinline __declspec(__device__) uint1 tex3DGrad(texture<uint1, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy)
{
  uint4 v = __utexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0));

  return make_uint1(v.x);
}

static __forceinline __declspec(__device__) int2 tex3DGrad(texture<int2, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy)
{
  int4 v = __itexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0));

  return make_int2(v.x, v.y);
}

static __forceinline __declspec(__device__) uint2 tex3DGrad(texture<uint2, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy)
{
  uint4 v = __utexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0));

  return make_uint2(v.x, v.y);
}

static __forceinline __declspec(__device__) int4 tex3DGrad(texture<int4, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy)
{
  int4 v = __itexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0));

  return make_int4(v.x, v.y, v.z, v.w);
}

static __forceinline __declspec(__device__) uint4 tex3DGrad(texture<uint4, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy)
{
  uint4 v = __utexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0));

  return make_uint4(v.x, v.y, v.z, v.w);
}









static __forceinline __declspec(__device__) long tex3DGrad(texture<long, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy)
{
  int4 v = __itexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0));

  return (long)v.x;
}

static __forceinline __declspec(__device__) unsigned long tex3DGrad(texture<unsigned long, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy)
{
  uint4 v = __utexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0));

  return (unsigned long)v.x;
}

static __forceinline __declspec(__device__) long1 tex3DGrad(texture<long1, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy)
{
  int4 v = __itexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0));

  return make_long1(v.x);
}

static __forceinline __declspec(__device__) ulong1 tex3DGrad(texture<ulong1, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy)
{
  uint4 v = __utexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0));

  return make_ulong1(v.x);
}

static __forceinline __declspec(__device__) long2 tex3DGrad(texture<long2, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy)
{
  int4 v = __itexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0));

  return make_long2(v.x, v.y);
}

static __forceinline __declspec(__device__) ulong2 tex3DGrad(texture<ulong2, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy)
{
  uint4 v = __utexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0));

  return make_ulong2(v.x, v.y);
}

static __forceinline __declspec(__device__) long4 tex3DGrad(texture<long4, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy)
{
  int4 v = __itexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0));

  return make_long4(v.x, v.y, v.z, v.w);
}

static __forceinline __declspec(__device__) ulong4 tex3DGrad(texture<ulong4, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy)
{
  uint4 v = __utexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0));

  return make_ulong4(v.x, v.y, v.z, v.w);
}

#line 9339 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_fetch_functions.h"







static __forceinline __declspec(__device__) float tex3DGrad(texture<float, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy)
{
  float4 v = __ftexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0));

  return v.x;
}

static __forceinline __declspec(__device__) float1 tex3DGrad(texture<float1, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy)
{
  float4 v = __ftexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0));

  return make_float1(v.x);
}

static __forceinline __declspec(__device__) float2 tex3DGrad(texture<float2, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy)
{
  float4 v = __ftexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0));

  return make_float2(v.x, v.y);
}

static __forceinline __declspec(__device__) float4 tex3DGrad(texture<float4, 0x03, cudaReadModeElementType> t, float x, float y, float z, float4 dPdx, float4 dPdy)
{
  float4 v = __ftexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0));

  return make_float4(v.x, v.y, v.z, v.w);
}







static __forceinline __declspec(__device__) float tex3DGrad(texture<char, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float4 dPdx, float4 dPdy)
{


#line 9385 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_fetch_functions.h"
  int4 v   = __itexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0));
#line 9387 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_fetch_functions.h"
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __forceinline __declspec(__device__) float tex3DGrad(texture<signed char, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float4 dPdx, float4 dPdy)
{
  int4 v   = __itexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __forceinline __declspec(__device__) float tex3DGrad(texture<unsigned char, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float4 dPdx, float4 dPdy)
{
  uint4 v  = __utexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __forceinline __declspec(__device__) float1 tex3DGrad(texture<char1, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float4 dPdx, float4 dPdy)
{
  int4 v   = __itexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __forceinline __declspec(__device__) float1 tex3DGrad(texture<uchar1, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float4 dPdx, float4 dPdy)
{
  uint4 v  = __utexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __forceinline __declspec(__device__) float2 tex3DGrad(texture<char2, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float4 dPdx, float4 dPdy)
{
  int4 v   = __itexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __forceinline __declspec(__device__) float2 tex3DGrad(texture<uchar2, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float4 dPdx, float4 dPdy)
{
  uint4 v  = __utexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __forceinline __declspec(__device__) float4 tex3DGrad(texture<char4, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float4 dPdx, float4 dPdy)
{
  int4 v   = __itexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}

static __forceinline __declspec(__device__) float4 tex3DGrad(texture<uchar4, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float4 dPdx, float4 dPdy)
{
  uint4 v  = __utexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}







static __forceinline __declspec(__device__) float tex3DGrad(texture<short, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float4 dPdx, float4 dPdy)
{
  int4 v   = __itexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __forceinline __declspec(__device__) float tex3DGrad(texture<unsigned short, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float4 dPdx, float4 dPdy)
{
  uint4 v  = __utexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return w.x;
}

static __forceinline __declspec(__device__) float1 tex3DGrad(texture<short1, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float4 dPdx, float4 dPdy)
{
  int4 v   = __itexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __forceinline __declspec(__device__) float1 tex3DGrad(texture<ushort1, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float4 dPdx, float4 dPdy)
{
  uint4 v  = __utexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float1(w.x);
}

static __forceinline __declspec(__device__) float2 tex3DGrad(texture<short2, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float4 dPdx, float4 dPdy)
{
  int4 v   = __itexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __forceinline __declspec(__device__) float2 tex3DGrad(texture<ushort2, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float4 dPdx, float4 dPdy)
{
  uint4 v  = __utexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float2(w.x, w.y);
}

static __forceinline __declspec(__device__) float4 tex3DGrad(texture<short4, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float4 dPdx, float4 dPdy)
{
  int4 v   = __itexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}

static __forceinline __declspec(__device__) float4 tex3DGrad(texture<ushort4, 0x03, cudaReadModeNormalizedFloat> t, float x, float y, float z, float4 dPdx, float4 dPdy)
{
  uint4 v   = __utexfetchgrad(t, make_float4(x, y, z, 0), make_float4(dPdx.x, dPdx.y, dPdx.z, 0), make_float4(dPdy.x, dPdy.y, dPdy.z, 0));
  float4 w = make_float4(__int_as_float(v.x), __int_as_float(v.y), __int_as_float(v.z), __int_as_float(v.w));

  return make_float4(w.x, w.y, w.z, w.w);
}

#line 9527 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_fetch_functions.h"



















































































































#line 9643 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_fetch_functions.h"

#line 9645 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_fetch_functions.h"


#line 9417 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\device_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_indirect_functions.h"


























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\builtin_types.h"























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\device_types.h"




































































#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\device_types.h"
#line 57 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\driver_types.h"




































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1414 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\driver_types.h"

#line 58 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\surface_types.h"






















































































































#line 120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\surface_types.h"
#line 59 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_types.h"




















































































































































































































#line 214 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_types.h"
#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\vector_types.h"












































































































































































































































































































































































































































#line 430 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\vector_types.h"
#line 61 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\builtin_types.h"
#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_indirect_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\host_defines.h"












































































































































































































#line 206 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\host_defines.h"
#line 61 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_indirect_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\vector_functions.h"




















































































































































































































































































































#line 310 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\vector_functions.h"
#line 62 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_indirect_functions.h"








static __forceinline __declspec(__device__) void tex1Dfetch(char *retVal, cudaTextureObject_t texObject, int x)
{



#line 76 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_indirect_functions.h"
    int4 tmp;
    asm volatile ("tex.1d.v4.s32.s32 {%0, %1, %2, %3}, [%4, {%5}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(x));
#line 79 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_indirect_functions.h"
    *retVal = (char)tmp.x;
}
static __forceinline __declspec(__device__) void tex1Dfetch(signed char *retVal, cudaTextureObject_t texObject, int x)
{
   int4 tmp;
   asm volatile ("tex.1d.v4.s32.s32 {%0, %1, %2, %3}, [%4, {%5}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(x));
   *retVal = (signed char)(tmp.x);
}

static __forceinline __declspec(__device__) void tex1Dfetch(char1 *retVal, cudaTextureObject_t texObject, int x)
{
   int4 tmp;
   asm volatile ("tex.1d.v4.s32.s32 {%0, %1, %2, %3}, [%4, {%5}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(x));
   *retVal = make_char1(tmp.x);
}

static __forceinline __declspec(__device__) void tex1Dfetch(char2 *retVal, cudaTextureObject_t texObject, int x)
{
   int4 tmp;
   asm volatile ("tex.1d.v4.s32.s32 {%0, %1, %2, %3}, [%4, {%5}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(x));
   *retVal = make_char2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void tex1Dfetch(char4 *retVal, cudaTextureObject_t texObject, int x)
{
   int4 tmp;
   asm volatile ("tex.1d.v4.s32.s32 {%0, %1, %2, %3}, [%4, {%5}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(x));
   *retVal = make_char4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __forceinline __declspec(__device__) void tex1Dfetch(unsigned char *retVal, cudaTextureObject_t texObject, int x)
{
   uint4 tmp;
   asm volatile ("tex.1d.v4.u32.s32 {%0, %1, %2, %3}, [%4, {%5}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(x));
   *retVal = (unsigned char)(tmp.x);
}

static __forceinline __declspec(__device__) void tex1Dfetch(uchar1 *retVal, cudaTextureObject_t texObject, int x)
{
   uint4 tmp;
   asm volatile ("tex.1d.v4.u32.s32 {%0, %1, %2, %3}, [%4, {%5}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(x));
   *retVal = make_uchar1(tmp.x);
}

static __forceinline __declspec(__device__) void tex1Dfetch(uchar2 *retVal, cudaTextureObject_t texObject, int x)
{
   uint4 tmp;
   asm volatile ("tex.1d.v4.u32.s32 {%0, %1, %2, %3}, [%4, {%5}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(x));
   *retVal = make_uchar2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void tex1Dfetch(uchar4 *retVal, cudaTextureObject_t texObject, int x)
{
   uint4 tmp;
   asm volatile ("tex.1d.v4.u32.s32 {%0, %1, %2, %3}, [%4, {%5}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(x));
   *retVal = make_uchar4(tmp.x, tmp.y, tmp.z, tmp.w);
}







static __forceinline __declspec(__device__) void tex1Dfetch(short *retVal, cudaTextureObject_t texObject, int x)
{
   int4 tmp;
   asm volatile ("tex.1d.v4.s32.s32 {%0, %1, %2, %3}, [%4, {%5}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(x));
   *retVal = (short)(tmp.x);
}

static __forceinline __declspec(__device__) void tex1Dfetch(short1 *retVal, cudaTextureObject_t texObject, int x)
{
   int4 tmp;
   asm volatile ("tex.1d.v4.s32.s32 {%0, %1, %2, %3}, [%4, {%5}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(x));
   *retVal = make_short1(tmp.x);
}

static __forceinline __declspec(__device__) void tex1Dfetch(short2 *retVal, cudaTextureObject_t texObject, int x)
{
   int4 tmp;
   asm volatile ("tex.1d.v4.s32.s32 {%0, %1, %2, %3}, [%4, {%5}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(x));
   *retVal = make_short2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void tex1Dfetch(short4 *retVal, cudaTextureObject_t texObject, int x)
{
   int4 tmp;
   asm volatile ("tex.1d.v4.s32.s32 {%0, %1, %2, %3}, [%4, {%5}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(x));
   *retVal = make_short4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __forceinline __declspec(__device__) void tex1Dfetch(unsigned short *retVal, cudaTextureObject_t texObject, int x)
{
   uint4 tmp;
   asm volatile ("tex.1d.v4.u32.s32 {%0, %1, %2, %3}, [%4, {%5}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(x));
   *retVal = (unsigned short)(tmp.x);
}

static __forceinline __declspec(__device__) void tex1Dfetch(ushort1 *retVal, cudaTextureObject_t texObject, int x)
{
   uint4 tmp;
   asm volatile ("tex.1d.v4.u32.s32 {%0, %1, %2, %3}, [%4, {%5}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(x));
   *retVal = make_ushort1(tmp.x);
}

static __forceinline __declspec(__device__) void tex1Dfetch(ushort2 *retVal, cudaTextureObject_t texObject, int x)
{
   uint4 tmp;
   asm volatile ("tex.1d.v4.u32.s32 {%0, %1, %2, %3}, [%4, {%5}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(x));
   *retVal = make_ushort2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void tex1Dfetch(ushort4 *retVal, cudaTextureObject_t texObject, int x)
{
   uint4 tmp;
   asm volatile ("tex.1d.v4.u32.s32 {%0, %1, %2, %3}, [%4, {%5}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(x));
   *retVal = make_ushort4(tmp.x, tmp.y, tmp.z, tmp.w);
}







static __forceinline __declspec(__device__) void tex1Dfetch(int *retVal, cudaTextureObject_t texObject, int x)
{
   int4 tmp;
   asm volatile ("tex.1d.v4.s32.s32 {%0, %1, %2, %3}, [%4, {%5}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(x));
   *retVal = (int)(tmp.x);
}

static __forceinline __declspec(__device__) void tex1Dfetch(int1 *retVal, cudaTextureObject_t texObject, int x)
{
   int4 tmp;
   asm volatile ("tex.1d.v4.s32.s32 {%0, %1, %2, %3}, [%4, {%5}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(x));
   *retVal = make_int1(tmp.x);
}

static __forceinline __declspec(__device__) void tex1Dfetch(int2 *retVal, cudaTextureObject_t texObject, int x)
{
   int4 tmp;
   asm volatile ("tex.1d.v4.s32.s32 {%0, %1, %2, %3}, [%4, {%5}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(x));
   *retVal = make_int2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void tex1Dfetch(int4 *retVal, cudaTextureObject_t texObject, int x)
{
   int4 tmp;
   asm volatile ("tex.1d.v4.s32.s32 {%0, %1, %2, %3}, [%4, {%5}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(x));
   *retVal = make_int4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __forceinline __declspec(__device__) void tex1Dfetch(unsigned int *retVal, cudaTextureObject_t texObject, int x)
{
   uint4 tmp;
   asm volatile ("tex.1d.v4.u32.s32 {%0, %1, %2, %3}, [%4, {%5}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(x));
   *retVal = (unsigned int)(tmp.x);
}

static __forceinline __declspec(__device__) void tex1Dfetch(uint1 *retVal, cudaTextureObject_t texObject, int x)
{
   uint4 tmp;
   asm volatile ("tex.1d.v4.u32.s32 {%0, %1, %2, %3}, [%4, {%5}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(x));
   *retVal = make_uint1(tmp.x);
}

static __forceinline __declspec(__device__) void tex1Dfetch(uint2 *retVal, cudaTextureObject_t texObject, int x)
{
   uint4 tmp;
   asm volatile ("tex.1d.v4.u32.s32 {%0, %1, %2, %3}, [%4, {%5}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(x));
   *retVal = make_uint2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void tex1Dfetch(uint4 *retVal, cudaTextureObject_t texObject, int x)
{
   uint4 tmp;
   asm volatile ("tex.1d.v4.u32.s32 {%0, %1, %2, %3}, [%4, {%5}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(x));
   *retVal = make_uint4(tmp.x, tmp.y, tmp.z, tmp.w);
}









static __forceinline __declspec(__device__) void tex1Dfetch(long *retVal, cudaTextureObject_t texObject, int x)
{
   int4 tmp;
   asm volatile ("tex.1d.v4.s32.s32 {%0, %1, %2, %3}, [%4, {%5}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(x));
   *retVal = (long)(tmp.x);
}

static __forceinline __declspec(__device__) void tex1Dfetch(long1 *retVal, cudaTextureObject_t texObject, int x)
{
   int4 tmp;
   asm volatile ("tex.1d.v4.s32.s32 {%0, %1, %2, %3}, [%4, {%5}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(x));
   *retVal = make_long1(tmp.x);
}

static __forceinline __declspec(__device__) void tex1Dfetch(long2 *retVal, cudaTextureObject_t texObject, int x)
{
   int4 tmp;
   asm volatile ("tex.1d.v4.s32.s32 {%0, %1, %2, %3}, [%4, {%5}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(x));
   *retVal = make_long2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void tex1Dfetch(long4 *retVal, cudaTextureObject_t texObject, int x)
{
   int4 tmp;
   asm volatile ("tex.1d.v4.s32.s32 {%0, %1, %2, %3}, [%4, {%5}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(x));
   *retVal = make_long4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __forceinline __declspec(__device__) void tex1Dfetch(unsigned long *retVal, cudaTextureObject_t texObject, int x)
{
   uint4 tmp;
   asm volatile ("tex.1d.v4.u32.s32 {%0, %1, %2, %3}, [%4, {%5}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(x));
   *retVal = (unsigned long)(tmp.x);
}

static __forceinline __declspec(__device__) void tex1Dfetch(ulong1 *retVal, cudaTextureObject_t texObject, int x)
{
   uint4 tmp;
   asm volatile ("tex.1d.v4.u32.s32 {%0, %1, %2, %3}, [%4, {%5}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(x));
   *retVal = make_ulong1(tmp.x);
}

static __forceinline __declspec(__device__) void tex1Dfetch(ulong2 *retVal, cudaTextureObject_t texObject, int x)
{
   uint4 tmp;
   asm volatile ("tex.1d.v4.u32.s32 {%0, %1, %2, %3}, [%4, {%5}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(x));
   *retVal = make_ulong2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void tex1Dfetch(ulong4 *retVal, cudaTextureObject_t texObject, int x)
{
   uint4 tmp;
   asm volatile ("tex.1d.v4.u32.s32 {%0, %1, %2, %3}, [%4, {%5}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(x));
   *retVal = make_ulong4(tmp.x, tmp.y, tmp.z, tmp.w);
}

#line 326 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_indirect_functions.h"








static __forceinline __declspec(__device__) void tex1Dfetch(float *retVal, cudaTextureObject_t texObject, int x)
{
   float4 tmp;
   asm volatile ("tex.1d.v4.f32.s32 {%0, %1, %2, %3}, [%4, {%5}];" : "=f"(tmp.x), "=f"(tmp.y), "=f"(tmp.z), "=f"(tmp.w) : "l"(texObject), "r"(x));
   *retVal = (float)(tmp.x);
}

static __forceinline __declspec(__device__) void tex1Dfetch(float1 *retVal, cudaTextureObject_t texObject, int x)
{
   float4 tmp;
   asm volatile ("tex.1d.v4.f32.s32 {%0, %1, %2, %3}, [%4, {%5}];" : "=f"(tmp.x), "=f"(tmp.y), "=f"(tmp.z), "=f"(tmp.w) : "l"(texObject), "r"(x));
   *retVal = make_float1(tmp.x);
}

static __forceinline __declspec(__device__) void tex1Dfetch(float2 *retVal, cudaTextureObject_t texObject, int x)
{
   float4 tmp;
   asm volatile ("tex.1d.v4.f32.s32 {%0, %1, %2, %3}, [%4, {%5}];" : "=f"(tmp.x), "=f"(tmp.y), "=f"(tmp.z), "=f"(tmp.w) : "l"(texObject), "r"(x));
   *retVal = make_float2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void tex1Dfetch(float4 *retVal, cudaTextureObject_t texObject, int x)
{
   float4 tmp;
   asm volatile ("tex.1d.v4.f32.s32 {%0, %1, %2, %3}, [%4, {%5}];" : "=f"(tmp.x), "=f"(tmp.y), "=f"(tmp.z), "=f"(tmp.w) : "l"(texObject), "r"(x));
   *retVal = make_float4(tmp.x, tmp.y, tmp.z, tmp.w);
}







template <class T>
static __forceinline __declspec(__device__) T tex1Dfetch(cudaTextureObject_t texObject, int x)
{
   T ret;
   tex1Dfetch(&ret, texObject, x);
   return ret;
}







static __forceinline __declspec(__device__) void tex1D(char *retVal, cudaTextureObject_t texObject, float x)
{



#line 388 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_indirect_functions.h"
    int4 tmp;
    asm volatile ("tex.1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x));
#line 391 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_indirect_functions.h"
    *retVal = (char)tmp.x;
}
static __forceinline __declspec(__device__) void tex1D(signed char *retVal, cudaTextureObject_t texObject, float x)
{
   int4 tmp;
   asm volatile ("tex.1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x));
   *retVal = (signed char)(tmp.x);
}

static __forceinline __declspec(__device__) void tex1D(char1 *retVal, cudaTextureObject_t texObject, float x)
{
   int4 tmp;
   asm volatile ("tex.1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x));
   *retVal = make_char1(tmp.x);
}

static __forceinline __declspec(__device__) void tex1D(char2 *retVal, cudaTextureObject_t texObject, float x)
{
   int4 tmp;
   asm volatile ("tex.1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x));
   *retVal = make_char2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void tex1D(char4 *retVal, cudaTextureObject_t texObject, float x)
{
   int4 tmp;
   asm volatile ("tex.1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x));
   *retVal = make_char4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __forceinline __declspec(__device__) void tex1D(unsigned char *retVal, cudaTextureObject_t texObject, float x)
{
   uint4 tmp;
   asm volatile ("tex.1d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x));
   *retVal = (unsigned char)(tmp.x);
}

static __forceinline __declspec(__device__) void tex1D(uchar1 *retVal, cudaTextureObject_t texObject, float x)
{
   uint4 tmp;
   asm volatile ("tex.1d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x));
   *retVal = make_uchar1(tmp.x);
}

static __forceinline __declspec(__device__) void tex1D(uchar2 *retVal, cudaTextureObject_t texObject, float x)
{
   uint4 tmp;
   asm volatile ("tex.1d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x));
   *retVal = make_uchar2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void tex1D(uchar4 *retVal, cudaTextureObject_t texObject, float x)
{
   uint4 tmp;
   asm volatile ("tex.1d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x));
   *retVal = make_uchar4(tmp.x, tmp.y, tmp.z, tmp.w);
}







static __forceinline __declspec(__device__) void tex1D(short *retVal, cudaTextureObject_t texObject, float x)
{
   int4 tmp;
   asm volatile ("tex.1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x));
   *retVal = (short)(tmp.x);
}

static __forceinline __declspec(__device__) void tex1D(short1 *retVal, cudaTextureObject_t texObject, float x)
{
   int4 tmp;
   asm volatile ("tex.1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x));
   *retVal = make_short1(tmp.x);
}

static __forceinline __declspec(__device__) void tex1D(short2 *retVal, cudaTextureObject_t texObject, float x)
{
   int4 tmp;
   asm volatile ("tex.1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x));
   *retVal = make_short2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void tex1D(short4 *retVal, cudaTextureObject_t texObject, float x)
{
   int4 tmp;
   asm volatile ("tex.1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x));
   *retVal = make_short4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __forceinline __declspec(__device__) void tex1D(unsigned short *retVal, cudaTextureObject_t texObject, float x)
{
   uint4 tmp;
   asm volatile ("tex.1d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x));
   *retVal = (unsigned short)(tmp.x);
}

static __forceinline __declspec(__device__) void tex1D(ushort1 *retVal, cudaTextureObject_t texObject, float x)
{
   uint4 tmp;
   asm volatile ("tex.1d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x));
   *retVal = make_ushort1(tmp.x);
}

static __forceinline __declspec(__device__) void tex1D(ushort2 *retVal, cudaTextureObject_t texObject, float x)
{
   uint4 tmp;
   asm volatile ("tex.1d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x));
   *retVal = make_ushort2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void tex1D(ushort4 *retVal, cudaTextureObject_t texObject, float x)
{
   uint4 tmp;
   asm volatile ("tex.1d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x));
   *retVal = make_ushort4(tmp.x, tmp.y, tmp.z, tmp.w);
}







static __forceinline __declspec(__device__) void tex1D(int *retVal, cudaTextureObject_t texObject, float x)
{
   int4 tmp;
   asm volatile ("tex.1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x));
   *retVal = (int)(tmp.x);
}

static __forceinline __declspec(__device__) void tex1D(int1 *retVal, cudaTextureObject_t texObject, float x)
{
   int4 tmp;
   asm volatile ("tex.1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x));
   *retVal = make_int1(tmp.x);
}

static __forceinline __declspec(__device__) void tex1D(int2 *retVal, cudaTextureObject_t texObject, float x)
{
   int4 tmp;
   asm volatile ("tex.1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x));
   *retVal = make_int2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void tex1D(int4 *retVal, cudaTextureObject_t texObject, float x)
{
   int4 tmp;
   asm volatile ("tex.1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x));
   *retVal = make_int4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __forceinline __declspec(__device__) void tex1D(unsigned int *retVal, cudaTextureObject_t texObject, float x)
{
   uint4 tmp;
   asm volatile ("tex.1d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x));
   *retVal = (unsigned int)(tmp.x);
}

static __forceinline __declspec(__device__) void tex1D(uint1 *retVal, cudaTextureObject_t texObject, float x)
{
   uint4 tmp;
   asm volatile ("tex.1d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x));
   *retVal = make_uint1(tmp.x);
}

static __forceinline __declspec(__device__) void tex1D(uint2 *retVal, cudaTextureObject_t texObject, float x)
{
   uint4 tmp;
   asm volatile ("tex.1d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x));
   *retVal = make_uint2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void tex1D(uint4 *retVal, cudaTextureObject_t texObject, float x)
{
   uint4 tmp;
   asm volatile ("tex.1d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x));
   *retVal = make_uint4(tmp.x, tmp.y, tmp.z, tmp.w);
}









static __forceinline __declspec(__device__) void tex1D(long *retVal, cudaTextureObject_t texObject, float x)
{
   int4 tmp;
   asm volatile ("tex.1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x));
   *retVal = (long)(tmp.x);
}

static __forceinline __declspec(__device__) void tex1D(long1 *retVal, cudaTextureObject_t texObject, float x)
{
   int4 tmp;
   asm volatile ("tex.1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x));
   *retVal = make_long1(tmp.x);
}

static __forceinline __declspec(__device__) void tex1D(long2 *retVal, cudaTextureObject_t texObject, float x)
{
   int4 tmp;
   asm volatile ("tex.1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x));
   *retVal = make_long2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void tex1D(long4 *retVal, cudaTextureObject_t texObject, float x)
{
   int4 tmp;
   asm volatile ("tex.1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x));
   *retVal = make_long4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __forceinline __declspec(__device__) void tex1D(unsigned long *retVal, cudaTextureObject_t texObject, float x)
{
   uint4 tmp;
   asm volatile ("tex.1d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x));
   *retVal = (unsigned long)(tmp.x);
}

static __forceinline __declspec(__device__) void tex1D(ulong1 *retVal, cudaTextureObject_t texObject, float x)
{
   uint4 tmp;
   asm volatile ("tex.1d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x));
   *retVal = make_ulong1(tmp.x);
}

static __forceinline __declspec(__device__) void tex1D(ulong2 *retVal, cudaTextureObject_t texObject, float x)
{
   uint4 tmp;
   asm volatile ("tex.1d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x));
   *retVal = make_ulong2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void tex1D(ulong4 *retVal, cudaTextureObject_t texObject, float x)
{
   uint4 tmp;
   asm volatile ("tex.1d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x));
   *retVal = make_ulong4(tmp.x, tmp.y, tmp.z, tmp.w);
}

#line 638 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_indirect_functions.h"








static __forceinline __declspec(__device__) void tex1D(float *retVal, cudaTextureObject_t texObject, float x)
{
   float4 tmp;
   asm volatile ("tex.1d.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5}];" : "=f"(tmp.x), "=f"(tmp.y), "=f"(tmp.z), "=f"(tmp.w) : "l"(texObject), "f"(x));
   *retVal = (float)(tmp.x);
}

static __forceinline __declspec(__device__) void tex1D(float1 *retVal, cudaTextureObject_t texObject, float x)
{
   float4 tmp;
   asm volatile ("tex.1d.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5}];" : "=f"(tmp.x), "=f"(tmp.y), "=f"(tmp.z), "=f"(tmp.w) : "l"(texObject), "f"(x));
   *retVal = make_float1(tmp.x);
}

static __forceinline __declspec(__device__) void tex1D(float2 *retVal, cudaTextureObject_t texObject, float x)
{
   float4 tmp;
   asm volatile ("tex.1d.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5}];" : "=f"(tmp.x), "=f"(tmp.y), "=f"(tmp.z), "=f"(tmp.w) : "l"(texObject), "f"(x));
   *retVal = make_float2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void tex1D(float4 *retVal, cudaTextureObject_t texObject, float x)
{
   float4 tmp;
   asm volatile ("tex.1d.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5}];" : "=f"(tmp.x), "=f"(tmp.y), "=f"(tmp.z), "=f"(tmp.w) : "l"(texObject), "f"(x));
   *retVal = make_float4(tmp.x, tmp.y, tmp.z, tmp.w);
}







template <class T>
static __forceinline __declspec(__device__) T tex1D(cudaTextureObject_t texObject, float x)
{
   T ret;
   tex1D(&ret, texObject, x);
   return ret;
}







static __forceinline __declspec(__device__) void tex2D(char *retVal, cudaTextureObject_t texObject, float x, float y)
{



#line 700 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_indirect_functions.h"
    int4 tmp;
    asm volatile ("tex.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
#line 703 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_indirect_functions.h"
    *retVal = (char)tmp.x;
}
static __forceinline __declspec(__device__) void tex2D(signed char *retVal, cudaTextureObject_t texObject, float x, float y)
{
   int4 tmp;
   asm volatile ("tex.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   *retVal = (signed char)(tmp.x);
}

static __forceinline __declspec(__device__) void tex2D(char1 *retVal, cudaTextureObject_t texObject, float x, float y)
{
   int4 tmp;
   asm volatile ("tex.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   *retVal = make_char1(tmp.x);
}

static __forceinline __declspec(__device__) void tex2D(char2 *retVal, cudaTextureObject_t texObject, float x, float y)
{
   int4 tmp;
   asm volatile ("tex.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   *retVal = make_char2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void tex2D(char4 *retVal, cudaTextureObject_t texObject, float x, float y)
{
   int4 tmp;
   asm volatile ("tex.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   *retVal = make_char4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __forceinline __declspec(__device__) void tex2D(unsigned char *retVal, cudaTextureObject_t texObject, float x, float y)
{
   uint4 tmp;
   asm volatile ("tex.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   *retVal = (unsigned char)(tmp.x);
}

static __forceinline __declspec(__device__) void tex2D(uchar1 *retVal, cudaTextureObject_t texObject, float x, float y)
{
   uint4 tmp;
   asm volatile ("tex.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   *retVal = make_uchar1(tmp.x);
}

static __forceinline __declspec(__device__) void tex2D(uchar2 *retVal, cudaTextureObject_t texObject, float x, float y)
{
   uint4 tmp;
   asm volatile ("tex.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   *retVal = make_uchar2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void tex2D(uchar4 *retVal, cudaTextureObject_t texObject, float x, float y)
{
   uint4 tmp;
   asm volatile ("tex.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   *retVal = make_uchar4(tmp.x, tmp.y, tmp.z, tmp.w);
}







static __forceinline __declspec(__device__) void tex2D(short *retVal, cudaTextureObject_t texObject, float x, float y)
{
   int4 tmp;
   asm volatile ("tex.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   *retVal = (short)(tmp.x);
}

static __forceinline __declspec(__device__) void tex2D(short1 *retVal, cudaTextureObject_t texObject, float x, float y)
{
   int4 tmp;
   asm volatile ("tex.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   *retVal = make_short1(tmp.x);
}

static __forceinline __declspec(__device__) void tex2D(short2 *retVal, cudaTextureObject_t texObject, float x, float y)
{
   int4 tmp;
   asm volatile ("tex.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   *retVal = make_short2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void tex2D(short4 *retVal, cudaTextureObject_t texObject, float x, float y)
{
   int4 tmp;
   asm volatile ("tex.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   *retVal = make_short4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __forceinline __declspec(__device__) void tex2D(unsigned short *retVal, cudaTextureObject_t texObject, float x, float y)
{
   uint4 tmp;
   asm volatile ("tex.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   *retVal = (unsigned short)(tmp.x);
}

static __forceinline __declspec(__device__) void tex2D(ushort1 *retVal, cudaTextureObject_t texObject, float x, float y)
{
   uint4 tmp;
   asm volatile ("tex.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   *retVal = make_ushort1(tmp.x);
}

static __forceinline __declspec(__device__) void tex2D(ushort2 *retVal, cudaTextureObject_t texObject, float x, float y)
{
   uint4 tmp;
   asm volatile ("tex.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   *retVal = make_ushort2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void tex2D(ushort4 *retVal, cudaTextureObject_t texObject, float x, float y)
{
   uint4 tmp;
   asm volatile ("tex.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   *retVal = make_ushort4(tmp.x, tmp.y, tmp.z, tmp.w);
}







static __forceinline __declspec(__device__) void tex2D(int *retVal, cudaTextureObject_t texObject, float x, float y)
{
   int4 tmp;
   asm volatile ("tex.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   *retVal = (int)(tmp.x);
}

static __forceinline __declspec(__device__) void tex2D(int1 *retVal, cudaTextureObject_t texObject, float x, float y)
{
   int4 tmp;
   asm volatile ("tex.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   *retVal = make_int1(tmp.x);
}

static __forceinline __declspec(__device__) void tex2D(int2 *retVal, cudaTextureObject_t texObject, float x, float y)
{
   int4 tmp;
   asm volatile ("tex.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   *retVal = make_int2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void tex2D(int4 *retVal, cudaTextureObject_t texObject, float x, float y)
{
   int4 tmp;
   asm volatile ("tex.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   *retVal = make_int4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __forceinline __declspec(__device__) void tex2D(unsigned int *retVal, cudaTextureObject_t texObject, float x, float y)
{
   uint4 tmp;
   asm volatile ("tex.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   *retVal = (unsigned int)(tmp.x);
}

static __forceinline __declspec(__device__) void tex2D(uint1 *retVal, cudaTextureObject_t texObject, float x, float y)
{
   uint4 tmp;
   asm volatile ("tex.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   *retVal = make_uint1(tmp.x);
}

static __forceinline __declspec(__device__) void tex2D(uint2 *retVal, cudaTextureObject_t texObject, float x, float y)
{
   uint4 tmp;
   asm volatile ("tex.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   *retVal = make_uint2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void tex2D(uint4 *retVal, cudaTextureObject_t texObject, float x, float y)
{
   uint4 tmp;
   asm volatile ("tex.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   *retVal = make_uint4(tmp.x, tmp.y, tmp.z, tmp.w);
}









static __forceinline __declspec(__device__) void tex2D(long *retVal, cudaTextureObject_t texObject, float x, float y)
{
   int4 tmp;
   asm volatile ("tex.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   *retVal = (long)(tmp.x);
}

static __forceinline __declspec(__device__) void tex2D(long1 *retVal, cudaTextureObject_t texObject, float x, float y)
{
   int4 tmp;
   asm volatile ("tex.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   *retVal = make_long1(tmp.x);
}

static __forceinline __declspec(__device__) void tex2D(long2 *retVal, cudaTextureObject_t texObject, float x, float y)
{
   int4 tmp;
   asm volatile ("tex.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   *retVal = make_long2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void tex2D(long4 *retVal, cudaTextureObject_t texObject, float x, float y)
{
   int4 tmp;
   asm volatile ("tex.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   *retVal = make_long4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __forceinline __declspec(__device__) void tex2D(unsigned long *retVal, cudaTextureObject_t texObject, float x, float y)
{
   uint4 tmp;
   asm volatile ("tex.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   *retVal = (unsigned long)(tmp.x);
}

static __forceinline __declspec(__device__) void tex2D(ulong1 *retVal, cudaTextureObject_t texObject, float x, float y)
{
   uint4 tmp;
   asm volatile ("tex.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   *retVal = make_ulong1(tmp.x);
}

static __forceinline __declspec(__device__) void tex2D(ulong2 *retVal, cudaTextureObject_t texObject, float x, float y)
{
   uint4 tmp;
   asm volatile ("tex.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   *retVal = make_ulong2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void tex2D(ulong4 *retVal, cudaTextureObject_t texObject, float x, float y)
{
   uint4 tmp;
   asm volatile ("tex.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   *retVal = make_ulong4(tmp.x, tmp.y, tmp.z, tmp.w);
}

#line 950 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_indirect_functions.h"








static __forceinline __declspec(__device__) void tex2D(float *retVal, cudaTextureObject_t texObject, float x, float y)
{
   float4 tmp;
   asm volatile ("tex.2d.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=f"(tmp.x), "=f"(tmp.y), "=f"(tmp.z), "=f"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   *retVal = (float)(tmp.x);
}

static __forceinline __declspec(__device__) void tex2D(float1 *retVal, cudaTextureObject_t texObject, float x, float y)
{
   float4 tmp;
   asm volatile ("tex.2d.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=f"(tmp.x), "=f"(tmp.y), "=f"(tmp.z), "=f"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   *retVal = make_float1(tmp.x);
}

static __forceinline __declspec(__device__) void tex2D(float2 *retVal, cudaTextureObject_t texObject, float x, float y)
{
   float4 tmp;
   asm volatile ("tex.2d.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=f"(tmp.x), "=f"(tmp.y), "=f"(tmp.z), "=f"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   *retVal = make_float2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void tex2D(float4 *retVal, cudaTextureObject_t texObject, float x, float y)
{
   float4 tmp;
   asm volatile ("tex.2d.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=f"(tmp.x), "=f"(tmp.y), "=f"(tmp.z), "=f"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   *retVal = make_float4(tmp.x, tmp.y, tmp.z, tmp.w);
}







template <class T>
static __forceinline __declspec(__device__) T tex2D(cudaTextureObject_t texObject, float x, float y)
{
   T ret;
   tex2D(&ret, texObject, x, y);
   return ret;
}







static __forceinline __declspec(__device__) void tex3D(char *retVal, cudaTextureObject_t texObject, float x, float y, float z)
{



#line 1012 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_indirect_functions.h"
    int4 tmp;
    asm volatile ("tex.3d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z));
#line 1015 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_indirect_functions.h"
    *retVal = (char)tmp.x;
}
static __forceinline __declspec(__device__) void tex3D(signed char *retVal, cudaTextureObject_t texObject, float x, float y, float z)
{
   int4 tmp;
   asm volatile ("tex.3d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z));
   *retVal = (signed char)(tmp.x);
}

static __forceinline __declspec(__device__) void tex3D(char1 *retVal, cudaTextureObject_t texObject, float x, float y, float z)
{
   int4 tmp;
   asm volatile ("tex.3d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z));
   *retVal = make_char1(tmp.x);
}

static __forceinline __declspec(__device__) void tex3D(char2 *retVal, cudaTextureObject_t texObject, float x, float y, float z)
{
   int4 tmp;
   asm volatile ("tex.3d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z));
   *retVal = make_char2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void tex3D(char4 *retVal, cudaTextureObject_t texObject, float x, float y, float z)
{
   int4 tmp;
   asm volatile ("tex.3d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z));
   *retVal = make_char4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __forceinline __declspec(__device__) void tex3D(unsigned char *retVal, cudaTextureObject_t texObject, float x, float y, float z)
{
   uint4 tmp;
   asm volatile ("tex.3d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z));
   *retVal = (unsigned char)(tmp.x);
}

static __forceinline __declspec(__device__) void tex3D(uchar1 *retVal, cudaTextureObject_t texObject, float x, float y, float z)
{
   uint4 tmp;
   asm volatile ("tex.3d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z));
   *retVal = make_uchar1(tmp.x);
}

static __forceinline __declspec(__device__) void tex3D(uchar2 *retVal, cudaTextureObject_t texObject, float x, float y, float z)
{
   uint4 tmp;
   asm volatile ("tex.3d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z));
   *retVal = make_uchar2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void tex3D(uchar4 *retVal, cudaTextureObject_t texObject, float x, float y, float z)
{
   uint4 tmp;
   asm volatile ("tex.3d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z));
   *retVal = make_uchar4(tmp.x, tmp.y, tmp.z, tmp.w);
}







static __forceinline __declspec(__device__) void tex3D(short *retVal, cudaTextureObject_t texObject, float x, float y, float z)
{
   int4 tmp;
   asm volatile ("tex.3d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z));
   *retVal = (short)(tmp.x);
}

static __forceinline __declspec(__device__) void tex3D(short1 *retVal, cudaTextureObject_t texObject, float x, float y, float z)
{
   int4 tmp;
   asm volatile ("tex.3d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z));
   *retVal = make_short1(tmp.x);
}

static __forceinline __declspec(__device__) void tex3D(short2 *retVal, cudaTextureObject_t texObject, float x, float y, float z)
{
   int4 tmp;
   asm volatile ("tex.3d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z));
   *retVal = make_short2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void tex3D(short4 *retVal, cudaTextureObject_t texObject, float x, float y, float z)
{
   int4 tmp;
   asm volatile ("tex.3d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z));
   *retVal = make_short4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __forceinline __declspec(__device__) void tex3D(unsigned short *retVal, cudaTextureObject_t texObject, float x, float y, float z)
{
   uint4 tmp;
   asm volatile ("tex.3d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z));
   *retVal = (unsigned short)(tmp.x);
}

static __forceinline __declspec(__device__) void tex3D(ushort1 *retVal, cudaTextureObject_t texObject, float x, float y, float z)
{
   uint4 tmp;
   asm volatile ("tex.3d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z));
   *retVal = make_ushort1(tmp.x);
}

static __forceinline __declspec(__device__) void tex3D(ushort2 *retVal, cudaTextureObject_t texObject, float x, float y, float z)
{
   uint4 tmp;
   asm volatile ("tex.3d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z));
   *retVal = make_ushort2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void tex3D(ushort4 *retVal, cudaTextureObject_t texObject, float x, float y, float z)
{
   uint4 tmp;
   asm volatile ("tex.3d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z));
   *retVal = make_ushort4(tmp.x, tmp.y, tmp.z, tmp.w);
}







static __forceinline __declspec(__device__) void tex3D(int *retVal, cudaTextureObject_t texObject, float x, float y, float z)
{
   int4 tmp;
   asm volatile ("tex.3d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z));
   *retVal = (int)(tmp.x);
}

static __forceinline __declspec(__device__) void tex3D(int1 *retVal, cudaTextureObject_t texObject, float x, float y, float z)
{
   int4 tmp;
   asm volatile ("tex.3d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z));
   *retVal = make_int1(tmp.x);
}

static __forceinline __declspec(__device__) void tex3D(int2 *retVal, cudaTextureObject_t texObject, float x, float y, float z)
{
   int4 tmp;
   asm volatile ("tex.3d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z));
   *retVal = make_int2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void tex3D(int4 *retVal, cudaTextureObject_t texObject, float x, float y, float z)
{
   int4 tmp;
   asm volatile ("tex.3d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z));
   *retVal = make_int4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __forceinline __declspec(__device__) void tex3D(unsigned int *retVal, cudaTextureObject_t texObject, float x, float y, float z)
{
   uint4 tmp;
   asm volatile ("tex.3d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z));
   *retVal = (unsigned int)(tmp.x);
}

static __forceinline __declspec(__device__) void tex3D(uint1 *retVal, cudaTextureObject_t texObject, float x, float y, float z)
{
   uint4 tmp;
   asm volatile ("tex.3d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z));
   *retVal = make_uint1(tmp.x);
}

static __forceinline __declspec(__device__) void tex3D(uint2 *retVal, cudaTextureObject_t texObject, float x, float y, float z)
{
   uint4 tmp;
   asm volatile ("tex.3d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z));
   *retVal = make_uint2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void tex3D(uint4 *retVal, cudaTextureObject_t texObject, float x, float y, float z)
{
   uint4 tmp;
   asm volatile ("tex.3d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z));
   *retVal = make_uint4(tmp.x, tmp.y, tmp.z, tmp.w);
}









static __forceinline __declspec(__device__) void tex3D(long *retVal, cudaTextureObject_t texObject, float x, float y, float z)
{
   int4 tmp;
   asm volatile ("tex.3d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z));
   *retVal = (long)(tmp.x);
}

static __forceinline __declspec(__device__) void tex3D(long1 *retVal, cudaTextureObject_t texObject, float x, float y, float z)
{
   int4 tmp;
   asm volatile ("tex.3d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z));
   *retVal = make_long1(tmp.x);
}

static __forceinline __declspec(__device__) void tex3D(long2 *retVal, cudaTextureObject_t texObject, float x, float y, float z)
{
   int4 tmp;
   asm volatile ("tex.3d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z));
   *retVal = make_long2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void tex3D(long4 *retVal, cudaTextureObject_t texObject, float x, float y, float z)
{
   int4 tmp;
   asm volatile ("tex.3d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z));
   *retVal = make_long4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __forceinline __declspec(__device__) void tex3D(unsigned long *retVal, cudaTextureObject_t texObject, float x, float y, float z)
{
   uint4 tmp;
   asm volatile ("tex.3d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z));
   *retVal = (unsigned long)(tmp.x);
}

static __forceinline __declspec(__device__) void tex3D(ulong1 *retVal, cudaTextureObject_t texObject, float x, float y, float z)
{
   uint4 tmp;
   asm volatile ("tex.3d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z));
   *retVal = make_ulong1(tmp.x);
}

static __forceinline __declspec(__device__) void tex3D(ulong2 *retVal, cudaTextureObject_t texObject, float x, float y, float z)
{
   uint4 tmp;
   asm volatile ("tex.3d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z));
   *retVal = make_ulong2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void tex3D(ulong4 *retVal, cudaTextureObject_t texObject, float x, float y, float z)
{
   uint4 tmp;
   asm volatile ("tex.3d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z));
   *retVal = make_ulong4(tmp.x, tmp.y, tmp.z, tmp.w);
}

#line 1262 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_indirect_functions.h"








static __forceinline __declspec(__device__) void tex3D(float *retVal, cudaTextureObject_t texObject, float x, float y, float z)
{
   float4 tmp;
   asm volatile ("tex.3d.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=f"(tmp.x), "=f"(tmp.y), "=f"(tmp.z), "=f"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z));
   *retVal = (float)(tmp.x);
}

static __forceinline __declspec(__device__) void tex3D(float1 *retVal, cudaTextureObject_t texObject, float x, float y, float z)
{
   float4 tmp;
   asm volatile ("tex.3d.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=f"(tmp.x), "=f"(tmp.y), "=f"(tmp.z), "=f"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z));
   *retVal = make_float1(tmp.x);
}

static __forceinline __declspec(__device__) void tex3D(float2 *retVal, cudaTextureObject_t texObject, float x, float y, float z)
{
   float4 tmp;
   asm volatile ("tex.3d.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=f"(tmp.x), "=f"(tmp.y), "=f"(tmp.z), "=f"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z));
   *retVal = make_float2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void tex3D(float4 *retVal, cudaTextureObject_t texObject, float x, float y, float z)
{
   float4 tmp;
   asm volatile ("tex.3d.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=f"(tmp.x), "=f"(tmp.y), "=f"(tmp.z), "=f"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z));
   *retVal = make_float4(tmp.x, tmp.y, tmp.z, tmp.w);
}







template <class T>
static __forceinline __declspec(__device__) T tex3D(cudaTextureObject_t texObject, float x, float y, float z)
{
   T ret;
   tex3D(&ret, texObject, x, y, z);
   return ret;
}







static __forceinline __declspec(__device__) void tex1DLayered(char *retVal, cudaTextureObject_t texObject, float x, int layer)
{



#line 1324 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_indirect_functions.h"
    int4 tmp;
    asm volatile ("tex.a1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x));
#line 1327 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_indirect_functions.h"
    *retVal = (char)tmp.x;
}
static __forceinline __declspec(__device__) void tex1DLayered(signed char *retVal, cudaTextureObject_t texObject, float x, int layer)
{
   int4 tmp;
   asm volatile ("tex.a1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x));
   *retVal = (signed char)(tmp.x);
}

static __forceinline __declspec(__device__) void tex1DLayered(char1 *retVal, cudaTextureObject_t texObject, float x, int layer)
{
   int4 tmp;
   asm volatile ("tex.a1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x));
   *retVal = make_char1(tmp.x);
}

static __forceinline __declspec(__device__) void tex1DLayered(char2 *retVal, cudaTextureObject_t texObject, float x, int layer)
{
   int4 tmp;
   asm volatile ("tex.a1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x));
   *retVal = make_char2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void tex1DLayered(char4 *retVal, cudaTextureObject_t texObject, float x, int layer)
{
   int4 tmp;
   asm volatile ("tex.a1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x));
   *retVal = make_char4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __forceinline __declspec(__device__) void tex1DLayered(unsigned char *retVal, cudaTextureObject_t texObject, float x, int layer)
{
   uint4 tmp;
   asm volatile ("tex.a1d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x));
   *retVal = (unsigned char)(tmp.x);
}

static __forceinline __declspec(__device__) void tex1DLayered(uchar1 *retVal, cudaTextureObject_t texObject, float x, int layer)
{
   uint4 tmp;
   asm volatile ("tex.a1d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x));
   *retVal = make_uchar1(tmp.x);
}

static __forceinline __declspec(__device__) void tex1DLayered(uchar2 *retVal, cudaTextureObject_t texObject, float x, int layer)
{
   uint4 tmp;
   asm volatile ("tex.a1d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x));
   *retVal = make_uchar2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void tex1DLayered(uchar4 *retVal, cudaTextureObject_t texObject, float x, int layer)
{
   uint4 tmp;
   asm volatile ("tex.a1d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x));
   *retVal = make_uchar4(tmp.x, tmp.y, tmp.z, tmp.w);
}







static __forceinline __declspec(__device__) void tex1DLayered(short *retVal, cudaTextureObject_t texObject, float x, int layer)
{
   int4 tmp;
   asm volatile ("tex.a1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x));
   *retVal = (short)(tmp.x);
}

static __forceinline __declspec(__device__) void tex1DLayered(short1 *retVal, cudaTextureObject_t texObject, float x, int layer)
{
   int4 tmp;
   asm volatile ("tex.a1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x));
   *retVal = make_short1(tmp.x);
}

static __forceinline __declspec(__device__) void tex1DLayered(short2 *retVal, cudaTextureObject_t texObject, float x, int layer)
{
   int4 tmp;
   asm volatile ("tex.a1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x));
   *retVal = make_short2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void tex1DLayered(short4 *retVal, cudaTextureObject_t texObject, float x, int layer)
{
   int4 tmp;
   asm volatile ("tex.a1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x));
   *retVal = make_short4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __forceinline __declspec(__device__) void tex1DLayered(unsigned short *retVal, cudaTextureObject_t texObject, float x, int layer)
{
   uint4 tmp;
   asm volatile ("tex.a1d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x));
   *retVal = (unsigned short)(tmp.x);
}

static __forceinline __declspec(__device__) void tex1DLayered(ushort1 *retVal, cudaTextureObject_t texObject, float x, int layer)
{
   uint4 tmp;
   asm volatile ("tex.a1d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x));
   *retVal = make_ushort1(tmp.x);
}

static __forceinline __declspec(__device__) void tex1DLayered(ushort2 *retVal, cudaTextureObject_t texObject, float x, int layer)
{
   uint4 tmp;
   asm volatile ("tex.a1d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x));
   *retVal = make_ushort2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void tex1DLayered(ushort4 *retVal, cudaTextureObject_t texObject, float x, int layer)
{
   uint4 tmp;
   asm volatile ("tex.a1d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x));
   *retVal = make_ushort4(tmp.x, tmp.y, tmp.z, tmp.w);
}







static __forceinline __declspec(__device__) void tex1DLayered(int *retVal, cudaTextureObject_t texObject, float x, int layer)
{
   int4 tmp;
   asm volatile ("tex.a1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x));
   *retVal = (int)(tmp.x);
}

static __forceinline __declspec(__device__) void tex1DLayered(int1 *retVal, cudaTextureObject_t texObject, float x, int layer)
{
   int4 tmp;
   asm volatile ("tex.a1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x));
   *retVal = make_int1(tmp.x);
}

static __forceinline __declspec(__device__) void tex1DLayered(int2 *retVal, cudaTextureObject_t texObject, float x, int layer)
{
   int4 tmp;
   asm volatile ("tex.a1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x));
   *retVal = make_int2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void tex1DLayered(int4 *retVal, cudaTextureObject_t texObject, float x, int layer)
{
   int4 tmp;
   asm volatile ("tex.a1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x));
   *retVal = make_int4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __forceinline __declspec(__device__) void tex1DLayered(unsigned int *retVal, cudaTextureObject_t texObject, float x, int layer)
{
   uint4 tmp;
   asm volatile ("tex.a1d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x));
   *retVal = (unsigned int)(tmp.x);
}

static __forceinline __declspec(__device__) void tex1DLayered(uint1 *retVal, cudaTextureObject_t texObject, float x, int layer)
{
   uint4 tmp;
   asm volatile ("tex.a1d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x));
   *retVal = make_uint1(tmp.x);
}

static __forceinline __declspec(__device__) void tex1DLayered(uint2 *retVal, cudaTextureObject_t texObject, float x, int layer)
{
   uint4 tmp;
   asm volatile ("tex.a1d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x));
   *retVal = make_uint2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void tex1DLayered(uint4 *retVal, cudaTextureObject_t texObject, float x, int layer)
{
   uint4 tmp;
   asm volatile ("tex.a1d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x));
   *retVal = make_uint4(tmp.x, tmp.y, tmp.z, tmp.w);
}









static __forceinline __declspec(__device__) void tex1DLayered(long *retVal, cudaTextureObject_t texObject, float x, int layer)
{
   int4 tmp;
   asm volatile ("tex.a1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x));
   *retVal = (long)(tmp.x);
}

static __forceinline __declspec(__device__) void tex1DLayered(long1 *retVal, cudaTextureObject_t texObject, float x, int layer)
{
   int4 tmp;
   asm volatile ("tex.a1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x));
   *retVal = make_long1(tmp.x);
}

static __forceinline __declspec(__device__) void tex1DLayered(long2 *retVal, cudaTextureObject_t texObject, float x, int layer)
{
   int4 tmp;
   asm volatile ("tex.a1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x));
   *retVal = make_long2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void tex1DLayered(long4 *retVal, cudaTextureObject_t texObject, float x, int layer)
{
   int4 tmp;
   asm volatile ("tex.a1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x));
   *retVal = make_long4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __forceinline __declspec(__device__) void tex1DLayered(unsigned long *retVal, cudaTextureObject_t texObject, float x, int layer)
{
   uint4 tmp;
   asm volatile ("tex.a1d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x));
   *retVal = (unsigned long)(tmp.x);
}

static __forceinline __declspec(__device__) void tex1DLayered(ulong1 *retVal, cudaTextureObject_t texObject, float x, int layer)
{
   uint4 tmp;
   asm volatile ("tex.a1d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x));
   *retVal = make_ulong1(tmp.x);
}

static __forceinline __declspec(__device__) void tex1DLayered(ulong2 *retVal, cudaTextureObject_t texObject, float x, int layer)
{
   uint4 tmp;
   asm volatile ("tex.a1d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x));
   *retVal = make_ulong2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void tex1DLayered(ulong4 *retVal, cudaTextureObject_t texObject, float x, int layer)
{
   uint4 tmp;
   asm volatile ("tex.a1d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x));
   *retVal = make_ulong4(tmp.x, tmp.y, tmp.z, tmp.w);
}

#line 1574 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_indirect_functions.h"








static __forceinline __declspec(__device__) void tex1DLayered(float *retVal, cudaTextureObject_t texObject, float x, int layer)
{
   float4 tmp;
   asm volatile ("tex.a1d.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=f"(tmp.x), "=f"(tmp.y), "=f"(tmp.z), "=f"(tmp.w) : "l"(texObject), "r"(layer), "f"(x));
   *retVal = (float)(tmp.x);
}

static __forceinline __declspec(__device__) void tex1DLayered(float1 *retVal, cudaTextureObject_t texObject, float x, int layer)
{
   float4 tmp;
   asm volatile ("tex.a1d.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=f"(tmp.x), "=f"(tmp.y), "=f"(tmp.z), "=f"(tmp.w) : "l"(texObject), "r"(layer), "f"(x));
   *retVal = make_float1(tmp.x);
}

static __forceinline __declspec(__device__) void tex1DLayered(float2 *retVal, cudaTextureObject_t texObject, float x, int layer)
{
   float4 tmp;
   asm volatile ("tex.a1d.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=f"(tmp.x), "=f"(tmp.y), "=f"(tmp.z), "=f"(tmp.w) : "l"(texObject), "r"(layer), "f"(x));
   *retVal = make_float2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void tex1DLayered(float4 *retVal, cudaTextureObject_t texObject, float x, int layer)
{
   float4 tmp;
   asm volatile ("tex.a1d.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=f"(tmp.x), "=f"(tmp.y), "=f"(tmp.z), "=f"(tmp.w) : "l"(texObject), "r"(layer), "f"(x));
   *retVal = make_float4(tmp.x, tmp.y, tmp.z, tmp.w);
}







template <class T>
static __forceinline __declspec(__device__) T tex1DLayered(cudaTextureObject_t texObject, float x, int layer)
{
   T ret;
   tex1DLayered(&ret, texObject, x, layer);
   return ret;
}







static __forceinline __declspec(__device__) void tex2DLayered(char *retVal, cudaTextureObject_t texObject, float x, float y, int layer)
{



#line 1636 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_indirect_functions.h"
    int4 tmp;
    asm volatile ("tex.a2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y));
#line 1639 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_indirect_functions.h"
    *retVal = (char)tmp.x;
}
static __forceinline __declspec(__device__) void tex2DLayered(signed char *retVal, cudaTextureObject_t texObject, float x, float y, int layer)
{
   int4 tmp;
   asm volatile ("tex.a2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y));
   *retVal = (signed char)(tmp.x);
}

static __forceinline __declspec(__device__) void tex2DLayered(char1 *retVal, cudaTextureObject_t texObject, float x, float y, int layer)
{
   int4 tmp;
   asm volatile ("tex.a2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y));
   *retVal = make_char1(tmp.x);
}

static __forceinline __declspec(__device__) void tex2DLayered(char2 *retVal, cudaTextureObject_t texObject, float x, float y, int layer)
{
   int4 tmp;
   asm volatile ("tex.a2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y));
   *retVal = make_char2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void tex2DLayered(char4 *retVal, cudaTextureObject_t texObject, float x, float y, int layer)
{
   int4 tmp;
   asm volatile ("tex.a2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y));
   *retVal = make_char4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __forceinline __declspec(__device__) void tex2DLayered(unsigned char *retVal, cudaTextureObject_t texObject, float x, float y, int layer)
{
   uint4 tmp;
   asm volatile ("tex.a2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y));
   *retVal = (unsigned char)(tmp.x);
}

static __forceinline __declspec(__device__) void tex2DLayered(uchar1 *retVal, cudaTextureObject_t texObject, float x, float y, int layer)
{
   uint4 tmp;
   asm volatile ("tex.a2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y));
   *retVal = make_uchar1(tmp.x);
}

static __forceinline __declspec(__device__) void tex2DLayered(uchar2 *retVal, cudaTextureObject_t texObject, float x, float y, int layer)
{
   uint4 tmp;
   asm volatile ("tex.a2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y));
   *retVal = make_uchar2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void tex2DLayered(uchar4 *retVal, cudaTextureObject_t texObject, float x, float y, int layer)
{
   uint4 tmp;
   asm volatile ("tex.a2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y));
   *retVal = make_uchar4(tmp.x, tmp.y, tmp.z, tmp.w);
}







static __forceinline __declspec(__device__) void tex2DLayered(short *retVal, cudaTextureObject_t texObject, float x, float y, int layer)
{
   int4 tmp;
   asm volatile ("tex.a2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y));
   *retVal = (short)(tmp.x);
}

static __forceinline __declspec(__device__) void tex2DLayered(short1 *retVal, cudaTextureObject_t texObject, float x, float y, int layer)
{
   int4 tmp;
   asm volatile ("tex.a2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y));
   *retVal = make_short1(tmp.x);
}

static __forceinline __declspec(__device__) void tex2DLayered(short2 *retVal, cudaTextureObject_t texObject, float x, float y, int layer)
{
   int4 tmp;
   asm volatile ("tex.a2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y));
   *retVal = make_short2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void tex2DLayered(short4 *retVal, cudaTextureObject_t texObject, float x, float y, int layer)
{
   int4 tmp;
   asm volatile ("tex.a2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y));
   *retVal = make_short4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __forceinline __declspec(__device__) void tex2DLayered(unsigned short *retVal, cudaTextureObject_t texObject, float x, float y, int layer)
{
   uint4 tmp;
   asm volatile ("tex.a2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y));
   *retVal = (unsigned short)(tmp.x);
}

static __forceinline __declspec(__device__) void tex2DLayered(ushort1 *retVal, cudaTextureObject_t texObject, float x, float y, int layer)
{
   uint4 tmp;
   asm volatile ("tex.a2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y));
   *retVal = make_ushort1(tmp.x);
}

static __forceinline __declspec(__device__) void tex2DLayered(ushort2 *retVal, cudaTextureObject_t texObject, float x, float y, int layer)
{
   uint4 tmp;
   asm volatile ("tex.a2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y));
   *retVal = make_ushort2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void tex2DLayered(ushort4 *retVal, cudaTextureObject_t texObject, float x, float y, int layer)
{
   uint4 tmp;
   asm volatile ("tex.a2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y));
   *retVal = make_ushort4(tmp.x, tmp.y, tmp.z, tmp.w);
}







static __forceinline __declspec(__device__) void tex2DLayered(int *retVal, cudaTextureObject_t texObject, float x, float y, int layer)
{
   int4 tmp;
   asm volatile ("tex.a2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y));
   *retVal = (int)(tmp.x);
}

static __forceinline __declspec(__device__) void tex2DLayered(int1 *retVal, cudaTextureObject_t texObject, float x, float y, int layer)
{
   int4 tmp;
   asm volatile ("tex.a2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y));
   *retVal = make_int1(tmp.x);
}

static __forceinline __declspec(__device__) void tex2DLayered(int2 *retVal, cudaTextureObject_t texObject, float x, float y, int layer)
{
   int4 tmp;
   asm volatile ("tex.a2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y));
   *retVal = make_int2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void tex2DLayered(int4 *retVal, cudaTextureObject_t texObject, float x, float y, int layer)
{
   int4 tmp;
   asm volatile ("tex.a2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y));
   *retVal = make_int4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __forceinline __declspec(__device__) void tex2DLayered(unsigned int *retVal, cudaTextureObject_t texObject, float x, float y, int layer)
{
   uint4 tmp;
   asm volatile ("tex.a2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y));
   *retVal = (unsigned int)(tmp.x);
}

static __forceinline __declspec(__device__) void tex2DLayered(uint1 *retVal, cudaTextureObject_t texObject, float x, float y, int layer)
{
   uint4 tmp;
   asm volatile ("tex.a2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y));
   *retVal = make_uint1(tmp.x);
}

static __forceinline __declspec(__device__) void tex2DLayered(uint2 *retVal, cudaTextureObject_t texObject, float x, float y, int layer)
{
   uint4 tmp;
   asm volatile ("tex.a2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y));
   *retVal = make_uint2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void tex2DLayered(uint4 *retVal, cudaTextureObject_t texObject, float x, float y, int layer)
{
   uint4 tmp;
   asm volatile ("tex.a2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y));
   *retVal = make_uint4(tmp.x, tmp.y, tmp.z, tmp.w);
}









static __forceinline __declspec(__device__) void tex2DLayered(long *retVal, cudaTextureObject_t texObject, float x, float y, int layer)
{
   int4 tmp;
   asm volatile ("tex.a2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y));
   *retVal = (long)(tmp.x);
}

static __forceinline __declspec(__device__) void tex2DLayered(long1 *retVal, cudaTextureObject_t texObject, float x, float y, int layer)
{
   int4 tmp;
   asm volatile ("tex.a2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y));
   *retVal = make_long1(tmp.x);
}

static __forceinline __declspec(__device__) void tex2DLayered(long2 *retVal, cudaTextureObject_t texObject, float x, float y, int layer)
{
   int4 tmp;
   asm volatile ("tex.a2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y));
   *retVal = make_long2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void tex2DLayered(long4 *retVal, cudaTextureObject_t texObject, float x, float y, int layer)
{
   int4 tmp;
   asm volatile ("tex.a2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y));
   *retVal = make_long4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __forceinline __declspec(__device__) void tex2DLayered(unsigned long *retVal, cudaTextureObject_t texObject, float x, float y, int layer)
{
   uint4 tmp;
   asm volatile ("tex.a2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y));
   *retVal = (unsigned long)(tmp.x);
}

static __forceinline __declspec(__device__) void tex2DLayered(ulong1 *retVal, cudaTextureObject_t texObject, float x, float y, int layer)
{
   uint4 tmp;
   asm volatile ("tex.a2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y));
   *retVal = make_ulong1(tmp.x);
}

static __forceinline __declspec(__device__) void tex2DLayered(ulong2 *retVal, cudaTextureObject_t texObject, float x, float y, int layer)
{
   uint4 tmp;
   asm volatile ("tex.a2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y));
   *retVal = make_ulong2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void tex2DLayered(ulong4 *retVal, cudaTextureObject_t texObject, float x, float y, int layer)
{
   uint4 tmp;
   asm volatile ("tex.a2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y));
   *retVal = make_ulong4(tmp.x, tmp.y, tmp.z, tmp.w);
}

#line 1886 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_indirect_functions.h"








static __forceinline __declspec(__device__) void tex2DLayered(float *retVal, cudaTextureObject_t texObject, float x, float y, int layer)
{
   float4 tmp;
   asm volatile ("tex.a2d.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=f"(tmp.x), "=f"(tmp.y), "=f"(tmp.z), "=f"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y));
   *retVal = (float)(tmp.x);
}

static __forceinline __declspec(__device__) void tex2DLayered(float1 *retVal, cudaTextureObject_t texObject, float x, float y, int layer)
{
   float4 tmp;
   asm volatile ("tex.a2d.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=f"(tmp.x), "=f"(tmp.y), "=f"(tmp.z), "=f"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y));
   *retVal = make_float1(tmp.x);
}

static __forceinline __declspec(__device__) void tex2DLayered(float2 *retVal, cudaTextureObject_t texObject, float x, float y, int layer)
{
   float4 tmp;
   asm volatile ("tex.a2d.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=f"(tmp.x), "=f"(tmp.y), "=f"(tmp.z), "=f"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y));
   *retVal = make_float2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void tex2DLayered(float4 *retVal, cudaTextureObject_t texObject, float x, float y, int layer)
{
   float4 tmp;
   asm volatile ("tex.a2d.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=f"(tmp.x), "=f"(tmp.y), "=f"(tmp.z), "=f"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y));
   *retVal = make_float4(tmp.x, tmp.y, tmp.z, tmp.w);
}







template <class T>
static __forceinline __declspec(__device__) T tex2DLayered(cudaTextureObject_t texObject, float x, float y, int layer)
{
   T ret;
   tex2DLayered(&ret, texObject, x, y, layer);
   return ret;
}







static __forceinline __declspec(__device__) void texCubemap(char *retVal, cudaTextureObject_t texObject, float x, float y, float z)
{



#line 1948 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_indirect_functions.h"
    int4 tmp;
    asm volatile ("tex.cube.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z));
#line 1951 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_indirect_functions.h"
    *retVal = (char)tmp.x;
}
static __forceinline __declspec(__device__) void texCubemap(signed char *retVal, cudaTextureObject_t texObject, float x, float y, float z)
{
   int4 tmp;
   asm volatile ("tex.cube.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z));
   *retVal = (signed char)(tmp.x);
}

static __forceinline __declspec(__device__) void texCubemap(char1 *retVal, cudaTextureObject_t texObject, float x, float y, float z)
{
   int4 tmp;
   asm volatile ("tex.cube.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z));
   *retVal = make_char1(tmp.x);
}

static __forceinline __declspec(__device__) void texCubemap(char2 *retVal, cudaTextureObject_t texObject, float x, float y, float z)
{
   int4 tmp;
   asm volatile ("tex.cube.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z));
   *retVal = make_char2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void texCubemap(char4 *retVal, cudaTextureObject_t texObject, float x, float y, float z)
{
   int4 tmp;
   asm volatile ("tex.cube.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z));
   *retVal = make_char4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __forceinline __declspec(__device__) void texCubemap(unsigned char *retVal, cudaTextureObject_t texObject, float x, float y, float z)
{
   uint4 tmp;
   asm volatile ("tex.cube.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z));
   *retVal = (unsigned char)(tmp.x);
}

static __forceinline __declspec(__device__) void texCubemap(uchar1 *retVal, cudaTextureObject_t texObject, float x, float y, float z)
{
   uint4 tmp;
   asm volatile ("tex.cube.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z));
   *retVal = make_uchar1(tmp.x);
}

static __forceinline __declspec(__device__) void texCubemap(uchar2 *retVal, cudaTextureObject_t texObject, float x, float y, float z)
{
   uint4 tmp;
   asm volatile ("tex.cube.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z));
   *retVal = make_uchar2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void texCubemap(uchar4 *retVal, cudaTextureObject_t texObject, float x, float y, float z)
{
   uint4 tmp;
   asm volatile ("tex.cube.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z));
   *retVal = make_uchar4(tmp.x, tmp.y, tmp.z, tmp.w);
}







static __forceinline __declspec(__device__) void texCubemap(short *retVal, cudaTextureObject_t texObject, float x, float y, float z)
{
   int4 tmp;
   asm volatile ("tex.cube.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z));
   *retVal = (short)(tmp.x);
}

static __forceinline __declspec(__device__) void texCubemap(short1 *retVal, cudaTextureObject_t texObject, float x, float y, float z)
{
   int4 tmp;
   asm volatile ("tex.cube.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z));
   *retVal = make_short1(tmp.x);
}

static __forceinline __declspec(__device__) void texCubemap(short2 *retVal, cudaTextureObject_t texObject, float x, float y, float z)
{
   int4 tmp;
   asm volatile ("tex.cube.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z));
   *retVal = make_short2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void texCubemap(short4 *retVal, cudaTextureObject_t texObject, float x, float y, float z)
{
   int4 tmp;
   asm volatile ("tex.cube.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z));
   *retVal = make_short4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __forceinline __declspec(__device__) void texCubemap(unsigned short *retVal, cudaTextureObject_t texObject, float x, float y, float z)
{
   uint4 tmp;
   asm volatile ("tex.cube.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z));
   *retVal = (unsigned short)(tmp.x);
}

static __forceinline __declspec(__device__) void texCubemap(ushort1 *retVal, cudaTextureObject_t texObject, float x, float y, float z)
{
   uint4 tmp;
   asm volatile ("tex.cube.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z));
   *retVal = make_ushort1(tmp.x);
}

static __forceinline __declspec(__device__) void texCubemap(ushort2 *retVal, cudaTextureObject_t texObject, float x, float y, float z)
{
   uint4 tmp;
   asm volatile ("tex.cube.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z));
   *retVal = make_ushort2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void texCubemap(ushort4 *retVal, cudaTextureObject_t texObject, float x, float y, float z)
{
   uint4 tmp;
   asm volatile ("tex.cube.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z));
   *retVal = make_ushort4(tmp.x, tmp.y, tmp.z, tmp.w);
}







static __forceinline __declspec(__device__) void texCubemap(int *retVal, cudaTextureObject_t texObject, float x, float y, float z)
{
   int4 tmp;
   asm volatile ("tex.cube.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z));
   *retVal = (int)(tmp.x);
}

static __forceinline __declspec(__device__) void texCubemap(int1 *retVal, cudaTextureObject_t texObject, float x, float y, float z)
{
   int4 tmp;
   asm volatile ("tex.cube.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z));
   *retVal = make_int1(tmp.x);
}

static __forceinline __declspec(__device__) void texCubemap(int2 *retVal, cudaTextureObject_t texObject, float x, float y, float z)
{
   int4 tmp;
   asm volatile ("tex.cube.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z));
   *retVal = make_int2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void texCubemap(int4 *retVal, cudaTextureObject_t texObject, float x, float y, float z)
{
   int4 tmp;
   asm volatile ("tex.cube.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z));
   *retVal = make_int4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __forceinline __declspec(__device__) void texCubemap(unsigned int *retVal, cudaTextureObject_t texObject, float x, float y, float z)
{
   uint4 tmp;
   asm volatile ("tex.cube.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z));
   *retVal = (unsigned int)(tmp.x);
}

static __forceinline __declspec(__device__) void texCubemap(uint1 *retVal, cudaTextureObject_t texObject, float x, float y, float z)
{
   uint4 tmp;
   asm volatile ("tex.cube.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z));
   *retVal = make_uint1(tmp.x);
}

static __forceinline __declspec(__device__) void texCubemap(uint2 *retVal, cudaTextureObject_t texObject, float x, float y, float z)
{
   uint4 tmp;
   asm volatile ("tex.cube.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z));
   *retVal = make_uint2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void texCubemap(uint4 *retVal, cudaTextureObject_t texObject, float x, float y, float z)
{
   uint4 tmp;
   asm volatile ("tex.cube.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z));
   *retVal = make_uint4(tmp.x, tmp.y, tmp.z, tmp.w);
}









static __forceinline __declspec(__device__) void texCubemap(long *retVal, cudaTextureObject_t texObject, float x, float y, float z)
{
   int4 tmp;
   asm volatile ("tex.cube.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z));
   *retVal = (long)(tmp.x);
}

static __forceinline __declspec(__device__) void texCubemap(long1 *retVal, cudaTextureObject_t texObject, float x, float y, float z)
{
   int4 tmp;
   asm volatile ("tex.cube.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z));
   *retVal = make_long1(tmp.x);
}

static __forceinline __declspec(__device__) void texCubemap(long2 *retVal, cudaTextureObject_t texObject, float x, float y, float z)
{
   int4 tmp;
   asm volatile ("tex.cube.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z));
   *retVal = make_long2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void texCubemap(long4 *retVal, cudaTextureObject_t texObject, float x, float y, float z)
{
   int4 tmp;
   asm volatile ("tex.cube.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z));
   *retVal = make_long4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __forceinline __declspec(__device__) void texCubemap(unsigned long *retVal, cudaTextureObject_t texObject, float x, float y, float z)
{
   uint4 tmp;
   asm volatile ("tex.cube.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z));
   *retVal = (unsigned long)(tmp.x);
}

static __forceinline __declspec(__device__) void texCubemap(ulong1 *retVal, cudaTextureObject_t texObject, float x, float y, float z)
{
   uint4 tmp;
   asm volatile ("tex.cube.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z));
   *retVal = make_ulong1(tmp.x);
}

static __forceinline __declspec(__device__) void texCubemap(ulong2 *retVal, cudaTextureObject_t texObject, float x, float y, float z)
{
   uint4 tmp;
   asm volatile ("tex.cube.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z));
   *retVal = make_ulong2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void texCubemap(ulong4 *retVal, cudaTextureObject_t texObject, float x, float y, float z)
{
   uint4 tmp;
   asm volatile ("tex.cube.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z));
   *retVal = make_ulong4(tmp.x, tmp.y, tmp.z, tmp.w);
}

#line 2198 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_indirect_functions.h"








static __forceinline __declspec(__device__) void texCubemap(float *retVal, cudaTextureObject_t texObject, float x, float y, float z)
{
   float4 tmp;
   asm volatile ("tex.cube.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=f"(tmp.x), "=f"(tmp.y), "=f"(tmp.z), "=f"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z));
   *retVal = (float)(tmp.x);
}

static __forceinline __declspec(__device__) void texCubemap(float1 *retVal, cudaTextureObject_t texObject, float x, float y, float z)
{
   float4 tmp;
   asm volatile ("tex.cube.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=f"(tmp.x), "=f"(tmp.y), "=f"(tmp.z), "=f"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z));
   *retVal = make_float1(tmp.x);
}

static __forceinline __declspec(__device__) void texCubemap(float2 *retVal, cudaTextureObject_t texObject, float x, float y, float z)
{
   float4 tmp;
   asm volatile ("tex.cube.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=f"(tmp.x), "=f"(tmp.y), "=f"(tmp.z), "=f"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z));
   *retVal = make_float2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void texCubemap(float4 *retVal, cudaTextureObject_t texObject, float x, float y, float z)
{
   float4 tmp;
   asm volatile ("tex.cube.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=f"(tmp.x), "=f"(tmp.y), "=f"(tmp.z), "=f"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z));
   *retVal = make_float4(tmp.x, tmp.y, tmp.z, tmp.w);
}







template <class T>
static __forceinline __declspec(__device__) T texCubemap(cudaTextureObject_t texObject, float x, float y, float z)
{
   T ret;
   texCubemap(&ret, texObject, x, y, z);
   return ret;
}







static __forceinline __declspec(__device__) void texCubemapLayered(char *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer)
{



#line 2260 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_indirect_functions.h"
    int4 tmp;
    asm volatile ("tex.acube.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %8}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y), "f"(z));
#line 2263 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_indirect_functions.h"
    *retVal = (char)tmp.x;
}
static __forceinline __declspec(__device__) void texCubemapLayered(signed char *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer)
{
   int4 tmp;
   asm volatile ("tex.acube.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %8}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y), "f"(z));
   *retVal = (signed char)(tmp.x);
}

static __forceinline __declspec(__device__) void texCubemapLayered(char1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer)
{
   int4 tmp;
   asm volatile ("tex.acube.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %8}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y), "f"(z));
   *retVal = make_char1(tmp.x);
}

static __forceinline __declspec(__device__) void texCubemapLayered(char2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer)
{
   int4 tmp;
   asm volatile ("tex.acube.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %8}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y), "f"(z));
   *retVal = make_char2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void texCubemapLayered(char4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer)
{
   int4 tmp;
   asm volatile ("tex.acube.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %8}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y), "f"(z));
   *retVal = make_char4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __forceinline __declspec(__device__) void texCubemapLayered(unsigned char *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer)
{
   uint4 tmp;
   asm volatile ("tex.acube.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %8}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y), "f"(z));
   *retVal = (unsigned char)(tmp.x);
}

static __forceinline __declspec(__device__) void texCubemapLayered(uchar1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer)
{
   uint4 tmp;
   asm volatile ("tex.acube.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %8}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y), "f"(z));
   *retVal = make_uchar1(tmp.x);
}

static __forceinline __declspec(__device__) void texCubemapLayered(uchar2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer)
{
   uint4 tmp;
   asm volatile ("tex.acube.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %8}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y), "f"(z));
   *retVal = make_uchar2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void texCubemapLayered(uchar4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer)
{
   uint4 tmp;
   asm volatile ("tex.acube.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %8}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y), "f"(z));
   *retVal = make_uchar4(tmp.x, tmp.y, tmp.z, tmp.w);
}







static __forceinline __declspec(__device__) void texCubemapLayered(short *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer)
{
   int4 tmp;
   asm volatile ("tex.acube.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %8}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y), "f"(z));
   *retVal = (short)(tmp.x);
}

static __forceinline __declspec(__device__) void texCubemapLayered(short1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer)
{
   int4 tmp;
   asm volatile ("tex.acube.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %8}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y), "f"(z));
   *retVal = make_short1(tmp.x);
}

static __forceinline __declspec(__device__) void texCubemapLayered(short2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer)
{
   int4 tmp;
   asm volatile ("tex.acube.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %8}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y), "f"(z));
   *retVal = make_short2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void texCubemapLayered(short4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer)
{
   int4 tmp;
   asm volatile ("tex.acube.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %8}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y), "f"(z));
   *retVal = make_short4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __forceinline __declspec(__device__) void texCubemapLayered(unsigned short *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer)
{
   uint4 tmp;
   asm volatile ("tex.acube.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %8}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y), "f"(z));
   *retVal = (unsigned short)(tmp.x);
}

static __forceinline __declspec(__device__) void texCubemapLayered(ushort1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer)
{
   uint4 tmp;
   asm volatile ("tex.acube.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %8}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y), "f"(z));
   *retVal = make_ushort1(tmp.x);
}

static __forceinline __declspec(__device__) void texCubemapLayered(ushort2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer)
{
   uint4 tmp;
   asm volatile ("tex.acube.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %8}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y), "f"(z));
   *retVal = make_ushort2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void texCubemapLayered(ushort4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer)
{
   uint4 tmp;
   asm volatile ("tex.acube.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %8}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y), "f"(z));
   *retVal = make_ushort4(tmp.x, tmp.y, tmp.z, tmp.w);
}







static __forceinline __declspec(__device__) void texCubemapLayered(int *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer)
{
   int4 tmp;
   asm volatile ("tex.acube.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %8}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y), "f"(z));
   *retVal = (int)(tmp.x);
}

static __forceinline __declspec(__device__) void texCubemapLayered(int1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer)
{
   int4 tmp;
   asm volatile ("tex.acube.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %8}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y), "f"(z));
   *retVal = make_int1(tmp.x);
}

static __forceinline __declspec(__device__) void texCubemapLayered(int2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer)
{
   int4 tmp;
   asm volatile ("tex.acube.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %8}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y), "f"(z));
   *retVal = make_int2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void texCubemapLayered(int4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer)
{
   int4 tmp;
   asm volatile ("tex.acube.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %8}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y), "f"(z));
   *retVal = make_int4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __forceinline __declspec(__device__) void texCubemapLayered(unsigned int *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer)
{
   uint4 tmp;
   asm volatile ("tex.acube.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %8}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y), "f"(z));
   *retVal = (unsigned int)(tmp.x);
}

static __forceinline __declspec(__device__) void texCubemapLayered(uint1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer)
{
   uint4 tmp;
   asm volatile ("tex.acube.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %8}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y), "f"(z));
   *retVal = make_uint1(tmp.x);
}

static __forceinline __declspec(__device__) void texCubemapLayered(uint2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer)
{
   uint4 tmp;
   asm volatile ("tex.acube.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %8}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y), "f"(z));
   *retVal = make_uint2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void texCubemapLayered(uint4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer)
{
   uint4 tmp;
   asm volatile ("tex.acube.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %8}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y), "f"(z));
   *retVal = make_uint4(tmp.x, tmp.y, tmp.z, tmp.w);
}









static __forceinline __declspec(__device__) void texCubemapLayered(long *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer)
{
   int4 tmp;
   asm volatile ("tex.acube.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %8}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y), "f"(z));
   *retVal = (long)(tmp.x);
}

static __forceinline __declspec(__device__) void texCubemapLayered(long1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer)
{
   int4 tmp;
   asm volatile ("tex.acube.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %8}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y), "f"(z));
   *retVal = make_long1(tmp.x);
}

static __forceinline __declspec(__device__) void texCubemapLayered(long2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer)
{
   int4 tmp;
   asm volatile ("tex.acube.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %8}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y), "f"(z));
   *retVal = make_long2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void texCubemapLayered(long4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer)
{
   int4 tmp;
   asm volatile ("tex.acube.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %8}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y), "f"(z));
   *retVal = make_long4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __forceinline __declspec(__device__) void texCubemapLayered(unsigned long *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer)
{
   uint4 tmp;
   asm volatile ("tex.acube.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %8}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y), "f"(z));
   *retVal = (unsigned long)(tmp.x);
}

static __forceinline __declspec(__device__) void texCubemapLayered(ulong1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer)
{
   uint4 tmp;
   asm volatile ("tex.acube.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %8}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y), "f"(z));
   *retVal = make_ulong1(tmp.x);
}

static __forceinline __declspec(__device__) void texCubemapLayered(ulong2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer)
{
   uint4 tmp;
   asm volatile ("tex.acube.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %8}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y), "f"(z));
   *retVal = make_ulong2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void texCubemapLayered(ulong4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer)
{
   uint4 tmp;
   asm volatile ("tex.acube.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %8}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y), "f"(z));
   *retVal = make_ulong4(tmp.x, tmp.y, tmp.z, tmp.w);
}

#line 2510 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_indirect_functions.h"








static __forceinline __declspec(__device__) void texCubemapLayered(float *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer)
{
   float4 tmp;
   asm volatile ("tex.acube.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %8}];" : "=f"(tmp.x), "=f"(tmp.y), "=f"(tmp.z), "=f"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y), "f"(z));
   *retVal = (float)(tmp.x);
}

static __forceinline __declspec(__device__) void texCubemapLayered(float1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer)
{
   float4 tmp;
   asm volatile ("tex.acube.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %8}];" : "=f"(tmp.x), "=f"(tmp.y), "=f"(tmp.z), "=f"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y), "f"(z));
   *retVal = make_float1(tmp.x);
}

static __forceinline __declspec(__device__) void texCubemapLayered(float2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer)
{
   float4 tmp;
   asm volatile ("tex.acube.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %8}];" : "=f"(tmp.x), "=f"(tmp.y), "=f"(tmp.z), "=f"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y), "f"(z));
   *retVal = make_float2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void texCubemapLayered(float4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer)
{
   float4 tmp;
   asm volatile ("tex.acube.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %8}];" : "=f"(tmp.x), "=f"(tmp.y), "=f"(tmp.z), "=f"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y), "f"(z));
   *retVal = make_float4(tmp.x, tmp.y, tmp.z, tmp.w);
}







template <class T>
static __forceinline __declspec(__device__) T texCubemapLayered(cudaTextureObject_t texObject, float x, float y, float z, int layer)
{
   T ret;
   texCubemapLayered(&ret, texObject, x, y, z, layer);
   return ret;
}







static __forceinline __declspec(__device__) void tex2Dgather(char *retVal, cudaTextureObject_t texObject, float x, float y, int comp = 0)
{
   int4 tmp;
   if (comp == 0) {
       asm volatile ("tld4.r.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   }
   else if (comp == 1) {
       asm volatile ("tld4.g.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   }
   else if (comp == 2) {
       asm volatile ("tld4.b.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   }
   else if (comp == 3) {
       asm volatile ("tld4.a.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   }
   *retVal = (char)(tmp.x);
}

static __forceinline __declspec(__device__) void tex2Dgather(signed char *retVal, cudaTextureObject_t texObject, float x, float y, int comp = 0)
{
   int4 tmp;
   if (comp == 0) {
       asm volatile ("tld4.r.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   }
   else if (comp == 1) {
       asm volatile ("tld4.g.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   }
   else if (comp == 2) {
       asm volatile ("tld4.b.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   }
   else if (comp == 3) {
       asm volatile ("tld4.a.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   }
   *retVal = (signed char)(tmp.x);
}

static __forceinline __declspec(__device__) void tex2Dgather(char1 *retVal, cudaTextureObject_t texObject, float x, float y, int comp = 0)
{
   int4 tmp;
   if (comp == 0) {
       asm volatile ("tld4.r.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   }
   else if (comp == 1) {
       asm volatile ("tld4.g.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   }
   else if (comp == 2) {
       asm volatile ("tld4.b.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   }
   else if (comp == 3) {
       asm volatile ("tld4.a.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   }
   *retVal = make_char1(tmp.x);
}

static __forceinline __declspec(__device__) void tex2Dgather(char2 *retVal, cudaTextureObject_t texObject, float x, float y, int comp = 0)
{
   int4 tmp;
   if (comp == 0) {
       asm volatile ("tld4.r.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   }
   else if (comp == 1) {
       asm volatile ("tld4.g.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   }
   else if (comp == 2) {
       asm volatile ("tld4.b.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   }
   else if (comp == 3) {
       asm volatile ("tld4.a.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   }
   *retVal = make_char2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void tex2Dgather(char4 *retVal, cudaTextureObject_t texObject, float x, float y, int comp = 0)
{
   int4 tmp;
   if (comp == 0) {
       asm volatile ("tld4.r.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   }
   else if (comp == 1) {
       asm volatile ("tld4.g.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   }
   else if (comp == 2) {
       asm volatile ("tld4.b.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   }
   else if (comp == 3) {
       asm volatile ("tld4.a.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   }
   *retVal = make_char4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __forceinline __declspec(__device__) void tex2Dgather(unsigned char *retVal, cudaTextureObject_t texObject, float x, float y, int comp = 0)
{
   uint4 tmp;
   if (comp == 0) {
       asm volatile ("tld4.r.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   }
   else if (comp == 1) {
       asm volatile ("tld4.g.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   }
   else if (comp == 2) {
       asm volatile ("tld4.b.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   }
   else if (comp == 3) {
       asm volatile ("tld4.a.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   }
   *retVal = (unsigned char)(tmp.x);
}

static __forceinline __declspec(__device__) void tex2Dgather(uchar1 *retVal, cudaTextureObject_t texObject, float x, float y, int comp = 0)
{
   uint4 tmp;
   if (comp == 0) {
       asm volatile ("tld4.r.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   }
   else if (comp == 1) {
       asm volatile ("tld4.g.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   }
   else if (comp == 2) {
       asm volatile ("tld4.b.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   }
   else if (comp == 3) {
       asm volatile ("tld4.a.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   }
   *retVal = make_uchar1(tmp.x);
}

static __forceinline __declspec(__device__) void tex2Dgather(uchar2 *retVal, cudaTextureObject_t texObject, float x, float y, int comp = 0)
{
   uint4 tmp;
   if (comp == 0) {
       asm volatile ("tld4.r.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   }
   else if (comp == 1) {
       asm volatile ("tld4.g.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   }
   else if (comp == 2) {
       asm volatile ("tld4.b.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   }
   else if (comp == 3) {
       asm volatile ("tld4.a.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   }
   *retVal = make_uchar2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void tex2Dgather(uchar4 *retVal, cudaTextureObject_t texObject, float x, float y, int comp = 0)
{
   uint4 tmp;
   if (comp == 0) {
       asm volatile ("tld4.r.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   }
   else if (comp == 1) {
       asm volatile ("tld4.g.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   }
   else if (comp == 2) {
       asm volatile ("tld4.b.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   }
   else if (comp == 3) {
       asm volatile ("tld4.a.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   }
   *retVal = make_uchar4(tmp.x, tmp.y, tmp.z, tmp.w);
}







static __forceinline __declspec(__device__) void tex2Dgather(short *retVal, cudaTextureObject_t texObject, float x, float y, int comp = 0)
{
   int4 tmp;
   if (comp == 0) {
       asm volatile ("tld4.r.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   }
   else if (comp == 1) {
       asm volatile ("tld4.g.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   }
   else if (comp == 2) {
       asm volatile ("tld4.b.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   }
   else if (comp == 3) {
       asm volatile ("tld4.a.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   }
   *retVal = (short)(tmp.x);
}

static __forceinline __declspec(__device__) void tex2Dgather(short1 *retVal, cudaTextureObject_t texObject, float x, float y, int comp = 0)
{
   int4 tmp;
   if (comp == 0) {
       asm volatile ("tld4.r.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   }
   else if (comp == 1) {
       asm volatile ("tld4.g.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   }
   else if (comp == 2) {
       asm volatile ("tld4.b.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   }
   else if (comp == 3) {
       asm volatile ("tld4.a.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   }
   *retVal = make_short1(tmp.x);
}

static __forceinline __declspec(__device__) void tex2Dgather(short2 *retVal, cudaTextureObject_t texObject, float x, float y, int comp = 0)
{
   int4 tmp;
   if (comp == 0) {
       asm volatile ("tld4.r.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   }
   else if (comp == 1) {
       asm volatile ("tld4.g.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   }
   else if (comp == 2) {
       asm volatile ("tld4.b.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   }
   else if (comp == 3) {
       asm volatile ("tld4.a.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   }
   *retVal = make_short2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void tex2Dgather(short4 *retVal, cudaTextureObject_t texObject, float x, float y, int comp = 0)
{
   int4 tmp;
   if (comp == 0) {
       asm volatile ("tld4.r.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   }
   else if (comp == 1) {
       asm volatile ("tld4.g.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   }
   else if (comp == 2) {
       asm volatile ("tld4.b.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   }
   else if (comp == 3) {
       asm volatile ("tld4.a.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   }
   *retVal = make_short4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __forceinline __declspec(__device__) void tex2Dgather(unsigned short *retVal, cudaTextureObject_t texObject, float x, float y, int comp = 0)
{
   uint4 tmp;
   if (comp == 0) {
       asm volatile ("tld4.r.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   }
   else if (comp == 1) {
       asm volatile ("tld4.g.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   }
   else if (comp == 2) {
       asm volatile ("tld4.b.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   }
   else if (comp == 3) {
       asm volatile ("tld4.a.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   }
   *retVal = (unsigned short)(tmp.x);
}

static __forceinline __declspec(__device__) void tex2Dgather(ushort1 *retVal, cudaTextureObject_t texObject, float x, float y, int comp = 0)
{
   uint4 tmp;
   if (comp == 0) {
       asm volatile ("tld4.r.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   }
   else if (comp == 1) {
       asm volatile ("tld4.g.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   }
   else if (comp == 2) {
       asm volatile ("tld4.b.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   }
   else if (comp == 3) {
       asm volatile ("tld4.a.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   }
   *retVal = make_ushort1(tmp.x);
}

static __forceinline __declspec(__device__) void tex2Dgather(ushort2 *retVal, cudaTextureObject_t texObject, float x, float y, int comp = 0)
{
   uint4 tmp;
   if (comp == 0) {
       asm volatile ("tld4.r.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   }
   else if (comp == 1) {
       asm volatile ("tld4.g.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   }
   else if (comp == 2) {
       asm volatile ("tld4.b.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   }
   else if (comp == 3) {
       asm volatile ("tld4.a.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   }
   *retVal = make_ushort2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void tex2Dgather(ushort4 *retVal, cudaTextureObject_t texObject, float x, float y, int comp = 0)
{
   uint4 tmp;
   if (comp == 0) {
       asm volatile ("tld4.r.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   }
   else if (comp == 1) {
       asm volatile ("tld4.g.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   }
   else if (comp == 2) {
       asm volatile ("tld4.b.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   }
   else if (comp == 3) {
       asm volatile ("tld4.a.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   }
   *retVal = make_ushort4(tmp.x, tmp.y, tmp.z, tmp.w);
}







static __forceinline __declspec(__device__) void tex2Dgather(int *retVal, cudaTextureObject_t texObject, float x, float y, int comp = 0)
{
   int4 tmp;
   if (comp == 0) {
       asm volatile ("tld4.r.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   }
   else if (comp == 1) {
       asm volatile ("tld4.g.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   }
   else if (comp == 2) {
       asm volatile ("tld4.b.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   }
   else if (comp == 3) {
       asm volatile ("tld4.a.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   }
   *retVal = (int)(tmp.x);
}

static __forceinline __declspec(__device__) void tex2Dgather(int1 *retVal, cudaTextureObject_t texObject, float x, float y, int comp = 0)
{
   int4 tmp;
   if (comp == 0) {
       asm volatile ("tld4.r.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   }
   else if (comp == 1) {
       asm volatile ("tld4.g.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   }
   else if (comp == 2) {
       asm volatile ("tld4.b.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   }
   else if (comp == 3) {
       asm volatile ("tld4.a.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   }
   *retVal = make_int1(tmp.x);
}

static __forceinline __declspec(__device__) void tex2Dgather(int2 *retVal, cudaTextureObject_t texObject, float x, float y, int comp = 0)
{
   int4 tmp;
   if (comp == 0) {
       asm volatile ("tld4.r.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   }
   else if (comp == 1) {
       asm volatile ("tld4.g.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   }
   else if (comp == 2) {
       asm volatile ("tld4.b.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   }
   else if (comp == 3) {
       asm volatile ("tld4.a.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   }
   *retVal = make_int2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void tex2Dgather(int4 *retVal, cudaTextureObject_t texObject, float x, float y, int comp = 0)
{
   int4 tmp;
   if (comp == 0) {
       asm volatile ("tld4.r.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   }
   else if (comp == 1) {
       asm volatile ("tld4.g.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   }
   else if (comp == 2) {
       asm volatile ("tld4.b.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   }
   else if (comp == 3) {
       asm volatile ("tld4.a.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   }
   *retVal = make_int4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __forceinline __declspec(__device__) void tex2Dgather(unsigned int *retVal, cudaTextureObject_t texObject, float x, float y, int comp = 0)
{
   uint4 tmp;
   if (comp == 0) {
       asm volatile ("tld4.r.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   }
   else if (comp == 1) {
       asm volatile ("tld4.g.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   }
   else if (comp == 2) {
       asm volatile ("tld4.b.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   }
   else if (comp == 3) {
       asm volatile ("tld4.a.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   }
   *retVal = (unsigned int)(tmp.x);
}

static __forceinline __declspec(__device__) void tex2Dgather(uint1 *retVal, cudaTextureObject_t texObject, float x, float y, int comp = 0)
{
   uint4 tmp;
   if (comp == 0) {
       asm volatile ("tld4.r.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   }
   else if (comp == 1) {
       asm volatile ("tld4.g.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   }
   else if (comp == 2) {
       asm volatile ("tld4.b.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   }
   else if (comp == 3) {
       asm volatile ("tld4.a.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   }
   *retVal = make_uint1(tmp.x);
}

static __forceinline __declspec(__device__) void tex2Dgather(uint2 *retVal, cudaTextureObject_t texObject, float x, float y, int comp = 0)
{
   uint4 tmp;
   if (comp == 0) {
       asm volatile ("tld4.r.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   }
   else if (comp == 1) {
       asm volatile ("tld4.g.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   }
   else if (comp == 2) {
       asm volatile ("tld4.b.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   }
   else if (comp == 3) {
       asm volatile ("tld4.a.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   }
   *retVal = make_uint2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void tex2Dgather(uint4 *retVal, cudaTextureObject_t texObject, float x, float y, int comp = 0)
{
   uint4 tmp;
   if (comp == 0) {
       asm volatile ("tld4.r.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   }
   else if (comp == 1) {
       asm volatile ("tld4.g.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   }
   else if (comp == 2) {
       asm volatile ("tld4.b.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   }
   else if (comp == 3) {
       asm volatile ("tld4.a.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   }
   *retVal = make_uint4(tmp.x, tmp.y, tmp.z, tmp.w);
}







static __forceinline __declspec(__device__) void tex2Dgather(long *retVal, cudaTextureObject_t texObject, float x, float y, int comp = 0)
{
   int4 tmp;
   if (comp == 0) {
       asm volatile ("tld4.r.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   }
   else if (comp == 1) {
       asm volatile ("tld4.g.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   }
   else if (comp == 2) {
       asm volatile ("tld4.b.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   }
   else if (comp == 3) {
       asm volatile ("tld4.a.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   }
   *retVal = (long)(tmp.x);
}

static __forceinline __declspec(__device__) void tex2Dgather(long1 *retVal, cudaTextureObject_t texObject, float x, float y, int comp = 0)
{
   int4 tmp;
   if (comp == 0) {
       asm volatile ("tld4.r.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   }
   else if (comp == 1) {
       asm volatile ("tld4.g.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   }
   else if (comp == 2) {
       asm volatile ("tld4.b.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   }
   else if (comp == 3) {
       asm volatile ("tld4.a.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   }
   *retVal = make_long1(tmp.x);
}

static __forceinline __declspec(__device__) void tex2Dgather(long2 *retVal, cudaTextureObject_t texObject, float x, float y, int comp = 0)
{
   int4 tmp;
   if (comp == 0) {
       asm volatile ("tld4.r.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   }
   else if (comp == 1) {
       asm volatile ("tld4.g.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   }
   else if (comp == 2) {
       asm volatile ("tld4.b.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   }
   else if (comp == 3) {
       asm volatile ("tld4.a.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   }
   *retVal = make_long2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void tex2Dgather(long4 *retVal, cudaTextureObject_t texObject, float x, float y, int comp = 0)
{
   int4 tmp;
   if (comp == 0) {
       asm volatile ("tld4.r.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   }
   else if (comp == 1) {
       asm volatile ("tld4.g.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   }
   else if (comp == 2) {
       asm volatile ("tld4.b.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   }
   else if (comp == 3) {
       asm volatile ("tld4.a.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   }
   *retVal = make_long4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __forceinline __declspec(__device__) void tex2Dgather(unsigned long *retVal, cudaTextureObject_t texObject, float x, float y, int comp = 0)
{
   uint4 tmp;
   if (comp == 0) {
       asm volatile ("tld4.r.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   }
   else if (comp == 1) {
       asm volatile ("tld4.g.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   }
   else if (comp == 2) {
       asm volatile ("tld4.b.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   }
   else if (comp == 3) {
       asm volatile ("tld4.a.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   }
   *retVal = (unsigned long)(tmp.x);
}

static __forceinline __declspec(__device__) void tex2Dgather(ulong1 *retVal, cudaTextureObject_t texObject, float x, float y, int comp = 0)
{
   uint4 tmp;
   if (comp == 0) {
       asm volatile ("tld4.r.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   }
   else if (comp == 1) {
       asm volatile ("tld4.g.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   }
   else if (comp == 2) {
       asm volatile ("tld4.b.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   }
   else if (comp == 3) {
       asm volatile ("tld4.a.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   }
   *retVal = make_ulong1(tmp.x);
}

static __forceinline __declspec(__device__) void tex2Dgather(ulong2 *retVal, cudaTextureObject_t texObject, float x, float y, int comp = 0)
{
   uint4 tmp;
   if (comp == 0) {
       asm volatile ("tld4.r.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   }
   else if (comp == 1) {
       asm volatile ("tld4.g.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   }
   else if (comp == 2) {
       asm volatile ("tld4.b.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   }
   else if (comp == 3) {
       asm volatile ("tld4.a.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   }
   *retVal = make_ulong2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void tex2Dgather(ulong4 *retVal, cudaTextureObject_t texObject, float x, float y, int comp = 0)
{
   uint4 tmp;
   if (comp == 0) {
       asm volatile ("tld4.r.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   }
   else if (comp == 1) {
       asm volatile ("tld4.g.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   }
   else if (comp == 2) {
       asm volatile ("tld4.b.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   }
   else if (comp == 3) {
       asm volatile ("tld4.a.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   }
   *retVal = make_ulong4(tmp.x, tmp.y, tmp.z, tmp.w);
}







static __forceinline __declspec(__device__) void tex2Dgather(float *retVal, cudaTextureObject_t texObject, float x, float y, int comp = 0)
{
   float4 tmp;
   if (comp == 0) {
       asm volatile ("tld4.r.2d.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=f"(tmp.x), "=f"(tmp.y), "=f"(tmp.z), "=f"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   }
   else if (comp == 1) {
       asm volatile ("tld4.g.2d.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=f"(tmp.x), "=f"(tmp.y), "=f"(tmp.z), "=f"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   }
   else if (comp == 2) {
       asm volatile ("tld4.b.2d.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=f"(tmp.x), "=f"(tmp.y), "=f"(tmp.z), "=f"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   }
   else if (comp == 3) {
       asm volatile ("tld4.a.2d.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=f"(tmp.x), "=f"(tmp.y), "=f"(tmp.z), "=f"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   }
   *retVal = (float)(tmp.x);
}

static __forceinline __declspec(__device__) void tex2Dgather(float1 *retVal, cudaTextureObject_t texObject, float x, float y, int comp = 0)
{
   float4 tmp;
   if (comp == 0) {
       asm volatile ("tld4.r.2d.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=f"(tmp.x), "=f"(tmp.y), "=f"(tmp.z), "=f"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   }
   else if (comp == 1) {
       asm volatile ("tld4.g.2d.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=f"(tmp.x), "=f"(tmp.y), "=f"(tmp.z), "=f"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   }
   else if (comp == 2) {
       asm volatile ("tld4.b.2d.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=f"(tmp.x), "=f"(tmp.y), "=f"(tmp.z), "=f"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   }
   else if (comp == 3) {
       asm volatile ("tld4.a.2d.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=f"(tmp.x), "=f"(tmp.y), "=f"(tmp.z), "=f"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   }
   *retVal = make_float1(tmp.x);
}

static __forceinline __declspec(__device__) void tex2Dgather(float2 *retVal, cudaTextureObject_t texObject, float x, float y, int comp = 0)
{
   float4 tmp;
   if (comp == 0) {
       asm volatile ("tld4.r.2d.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=f"(tmp.x), "=f"(tmp.y), "=f"(tmp.z), "=f"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   }
   else if (comp == 1) {
       asm volatile ("tld4.g.2d.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=f"(tmp.x), "=f"(tmp.y), "=f"(tmp.z), "=f"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   }
   else if (comp == 2) {
       asm volatile ("tld4.b.2d.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=f"(tmp.x), "=f"(tmp.y), "=f"(tmp.z), "=f"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   }
   else if (comp == 3) {
       asm volatile ("tld4.a.2d.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=f"(tmp.x), "=f"(tmp.y), "=f"(tmp.z), "=f"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   }
   *retVal = make_float2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void tex2Dgather(float4 *retVal, cudaTextureObject_t texObject, float x, float y, int comp = 0)
{
   float4 tmp;
   if (comp == 0) {
       asm volatile ("tld4.r.2d.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=f"(tmp.x), "=f"(tmp.y), "=f"(tmp.z), "=f"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   }
   else if (comp == 1) {
       asm volatile ("tld4.g.2d.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=f"(tmp.x), "=f"(tmp.y), "=f"(tmp.z), "=f"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   }
   else if (comp == 2) {
       asm volatile ("tld4.b.2d.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=f"(tmp.x), "=f"(tmp.y), "=f"(tmp.z), "=f"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   }
   else if (comp == 3) {
       asm volatile ("tld4.a.2d.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=f"(tmp.x), "=f"(tmp.y), "=f"(tmp.z), "=f"(tmp.w) : "l"(texObject), "f"(x), "f"(y));
   }
   *retVal = make_float4(tmp.x, tmp.y, tmp.z, tmp.w);
}







template <class T>
static __forceinline __declspec(__device__) T tex2Dgather(cudaTextureObject_t to, float x, float y, int comp = 0)
{
   T ret;
   tex2Dgather(&ret, to, x, y, comp);
   return ret;
}







static __forceinline __declspec(__device__) void tex1DLod(char *retVal, cudaTextureObject_t texObject, float x, float level)
{



#line 3282 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_indirect_functions.h"
    int4 tmp;
    asm volatile ("tex.level.1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5}], %6;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(level));
#line 3285 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_indirect_functions.h"
    *retVal = (char)tmp.x;
}
static __forceinline __declspec(__device__) void tex1DLod(signed char *retVal, cudaTextureObject_t texObject, float x, float level)
{
   int4 tmp;
   asm volatile ("tex.level.1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5}], %6;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(level));
   *retVal = (signed char)(tmp.x);
}

static __forceinline __declspec(__device__) void tex1DLod(char1 *retVal, cudaTextureObject_t texObject, float x, float level)
{
   int4 tmp;
   asm volatile ("tex.level.1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5}], %6;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(level));
   *retVal = make_char1(tmp.x);
}

static __forceinline __declspec(__device__) void tex1DLod(char2 *retVal, cudaTextureObject_t texObject, float x, float level)
{
   int4 tmp;
   asm volatile ("tex.level.1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5}], %6;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(level));
   *retVal = make_char2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void tex1DLod(char4 *retVal, cudaTextureObject_t texObject, float x, float level)
{
   int4 tmp;
   asm volatile ("tex.level.1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5}], %6;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(level));
   *retVal = make_char4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __forceinline __declspec(__device__) void tex1DLod(unsigned char *retVal, cudaTextureObject_t texObject, float x, float level)
{
   uint4 tmp;
   asm volatile ("tex.level.1d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5}], %6;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(level));
   *retVal = (unsigned char)(tmp.x);
}

static __forceinline __declspec(__device__) void tex1DLod(uchar1 *retVal, cudaTextureObject_t texObject, float x, float level)
{
   uint4 tmp;
   asm volatile ("tex.level.1d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5}], %6;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(level));
   *retVal = make_uchar1(tmp.x);
}

static __forceinline __declspec(__device__) void tex1DLod(uchar2 *retVal, cudaTextureObject_t texObject, float x, float level)
{
   uint4 tmp;
   asm volatile ("tex.level.1d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5}], %6;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(level));
   *retVal = make_uchar2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void tex1DLod(uchar4 *retVal, cudaTextureObject_t texObject, float x, float level)
{
   uint4 tmp;
   asm volatile ("tex.level.1d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5}], %6;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(level));
   *retVal = make_uchar4(tmp.x, tmp.y, tmp.z, tmp.w);
}







static __forceinline __declspec(__device__) void tex1DLod(short *retVal, cudaTextureObject_t texObject, float x, float level)
{
   int4 tmp;
   asm volatile ("tex.level.1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5}], %6;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(level));
   *retVal = (short)(tmp.x);
}

static __forceinline __declspec(__device__) void tex1DLod(short1 *retVal, cudaTextureObject_t texObject, float x, float level)
{
   int4 tmp;
   asm volatile ("tex.level.1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5}], %6;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(level));
   *retVal = make_short1(tmp.x);
}

static __forceinline __declspec(__device__) void tex1DLod(short2 *retVal, cudaTextureObject_t texObject, float x, float level)
{
   int4 tmp;
   asm volatile ("tex.level.1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5}], %6;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(level));
   *retVal = make_short2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void tex1DLod(short4 *retVal, cudaTextureObject_t texObject, float x, float level)
{
   int4 tmp;
   asm volatile ("tex.level.1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5}], %6;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(level));
   *retVal = make_short4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __forceinline __declspec(__device__) void tex1DLod(unsigned short *retVal, cudaTextureObject_t texObject, float x, float level)
{
   uint4 tmp;
   asm volatile ("tex.level.1d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5}], %6;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(level));
   *retVal = (unsigned short)(tmp.x);
}

static __forceinline __declspec(__device__) void tex1DLod(ushort1 *retVal, cudaTextureObject_t texObject, float x, float level)
{
   uint4 tmp;
   asm volatile ("tex.level.1d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5}], %6;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(level));
   *retVal = make_ushort1(tmp.x);
}

static __forceinline __declspec(__device__) void tex1DLod(ushort2 *retVal, cudaTextureObject_t texObject, float x, float level)
{
   uint4 tmp;
   asm volatile ("tex.level.1d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5}], %6;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(level));
   *retVal = make_ushort2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void tex1DLod(ushort4 *retVal, cudaTextureObject_t texObject, float x, float level)
{
   uint4 tmp;
   asm volatile ("tex.level.1d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5}], %6;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(level));
   *retVal = make_ushort4(tmp.x, tmp.y, tmp.z, tmp.w);
}







static __forceinline __declspec(__device__) void tex1DLod(int *retVal, cudaTextureObject_t texObject, float x, float level)
{
   int4 tmp;
   asm volatile ("tex.level.1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5}], %6;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(level));
   *retVal = (int)(tmp.x);
}

static __forceinline __declspec(__device__) void tex1DLod(int1 *retVal, cudaTextureObject_t texObject, float x, float level)
{
   int4 tmp;
   asm volatile ("tex.level.1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5}], %6;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(level));
   *retVal = make_int1(tmp.x);
}

static __forceinline __declspec(__device__) void tex1DLod(int2 *retVal, cudaTextureObject_t texObject, float x, float level)
{
   int4 tmp;
   asm volatile ("tex.level.1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5}], %6;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(level));
   *retVal = make_int2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void tex1DLod(int4 *retVal, cudaTextureObject_t texObject, float x, float level)
{
   int4 tmp;
   asm volatile ("tex.level.1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5}], %6;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(level));
   *retVal = make_int4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __forceinline __declspec(__device__) void tex1DLod(unsigned int *retVal, cudaTextureObject_t texObject, float x, float level)
{
   uint4 tmp;
   asm volatile ("tex.level.1d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5}], %6;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(level));
   *retVal = (unsigned int)(tmp.x);
}

static __forceinline __declspec(__device__) void tex1DLod(uint1 *retVal, cudaTextureObject_t texObject, float x, float level)
{
   uint4 tmp;
   asm volatile ("tex.level.1d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5}], %6;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(level));
   *retVal = make_uint1(tmp.x);
}

static __forceinline __declspec(__device__) void tex1DLod(uint2 *retVal, cudaTextureObject_t texObject, float x, float level)
{
   uint4 tmp;
   asm volatile ("tex.level.1d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5}], %6;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(level));
   *retVal = make_uint2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void tex1DLod(uint4 *retVal, cudaTextureObject_t texObject, float x, float level)
{
   uint4 tmp;
   asm volatile ("tex.level.1d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5}], %6;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(level));
   *retVal = make_uint4(tmp.x, tmp.y, tmp.z, tmp.w);
}









static __forceinline __declspec(__device__) void tex1DLod(long *retVal, cudaTextureObject_t texObject, float x, float level)
{
   int4 tmp;
   asm volatile ("tex.level.1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5}], %6;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(level));
   *retVal = (long)(tmp.x);
}

static __forceinline __declspec(__device__) void tex1DLod(long1 *retVal, cudaTextureObject_t texObject, float x, float level)
{
   int4 tmp;
   asm volatile ("tex.level.1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5}], %6;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(level));
   *retVal = make_long1(tmp.x);
}

static __forceinline __declspec(__device__) void tex1DLod(long2 *retVal, cudaTextureObject_t texObject, float x, float level)
{
   int4 tmp;
   asm volatile ("tex.level.1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5}], %6;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(level));
   *retVal = make_long2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void tex1DLod(long4 *retVal, cudaTextureObject_t texObject, float x, float level)
{
   int4 tmp;
   asm volatile ("tex.level.1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5}], %6;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(level));
   *retVal = make_long4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __forceinline __declspec(__device__) void tex1DLod(unsigned long *retVal, cudaTextureObject_t texObject, float x, float level)
{
   uint4 tmp;
   asm volatile ("tex.level.1d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5}], %6;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(level));
   *retVal = (unsigned long)(tmp.x);
}

static __forceinline __declspec(__device__) void tex1DLod(ulong1 *retVal, cudaTextureObject_t texObject, float x, float level)
{
   uint4 tmp;
   asm volatile ("tex.level.1d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5}], %6;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(level));
   *retVal = make_ulong1(tmp.x);
}

static __forceinline __declspec(__device__) void tex1DLod(ulong2 *retVal, cudaTextureObject_t texObject, float x, float level)
{
   uint4 tmp;
   asm volatile ("tex.level.1d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5}], %6;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(level));
   *retVal = make_ulong2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void tex1DLod(ulong4 *retVal, cudaTextureObject_t texObject, float x, float level)
{
   uint4 tmp;
   asm volatile ("tex.level.1d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5}], %6;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(level));
   *retVal = make_ulong4(tmp.x, tmp.y, tmp.z, tmp.w);
}

#line 3532 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_indirect_functions.h"








static __forceinline __declspec(__device__) void tex1DLod(float *retVal, cudaTextureObject_t texObject, float x, float level)
{
   float4 tmp;
   asm volatile ("tex.level.1d.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5}], %6;" : "=f"(tmp.x), "=f"(tmp.y), "=f"(tmp.z), "=f"(tmp.w) : "l"(texObject), "f"(x), "f"(level));
   *retVal = (float)(tmp.x);
}

static __forceinline __declspec(__device__) void tex1DLod(float1 *retVal, cudaTextureObject_t texObject, float x, float level)
{
   float4 tmp;
   asm volatile ("tex.level.1d.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5}], %6;" : "=f"(tmp.x), "=f"(tmp.y), "=f"(tmp.z), "=f"(tmp.w) : "l"(texObject), "f"(x), "f"(level));
   *retVal = make_float1(tmp.x);
}

static __forceinline __declspec(__device__) void tex1DLod(float2 *retVal, cudaTextureObject_t texObject, float x, float level)
{
   float4 tmp;
   asm volatile ("tex.level.1d.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5}], %6;" : "=f"(tmp.x), "=f"(tmp.y), "=f"(tmp.z), "=f"(tmp.w) : "l"(texObject), "f"(x), "f"(level));
   *retVal = make_float2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void tex1DLod(float4 *retVal, cudaTextureObject_t texObject, float x, float level)
{
   float4 tmp;
   asm volatile ("tex.level.1d.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5}], %6;" : "=f"(tmp.x), "=f"(tmp.y), "=f"(tmp.z), "=f"(tmp.w) : "l"(texObject), "f"(x), "f"(level));
   *retVal = make_float4(tmp.x, tmp.y, tmp.z, tmp.w);
}







template <class T>
static __forceinline __declspec(__device__) T tex1DLod(cudaTextureObject_t texObject, float x, float level)
{
   T ret;
   tex1DLod(&ret, texObject, x, level);
   return ret;
}







static __forceinline __declspec(__device__) void tex2DLod(char *retVal, cudaTextureObject_t texObject, float x, float y, float level)
{



#line 3594 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_indirect_functions.h"
    int4 tmp;
    asm volatile ("tex.level.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], %7;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(level));
#line 3597 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_indirect_functions.h"
    *retVal = (char)tmp.x;
}
static __forceinline __declspec(__device__) void tex2DLod(signed char *retVal, cudaTextureObject_t texObject, float x, float y, float level)
{
   int4 tmp;
   asm volatile ("tex.level.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], %7;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(level));
   *retVal = (signed char)(tmp.x);
}

static __forceinline __declspec(__device__) void tex2DLod(char1 *retVal, cudaTextureObject_t texObject, float x, float y, float level)
{
   int4 tmp;
   asm volatile ("tex.level.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], %7;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(level));
   *retVal = make_char1(tmp.x);
}

static __forceinline __declspec(__device__) void tex2DLod(char2 *retVal, cudaTextureObject_t texObject, float x, float y, float level)
{
   int4 tmp;
   asm volatile ("tex.level.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], %7;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(level));
   *retVal = make_char2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void tex2DLod(char4 *retVal, cudaTextureObject_t texObject, float x, float y, float level)
{
   int4 tmp;
   asm volatile ("tex.level.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], %7;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(level));
   *retVal = make_char4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __forceinline __declspec(__device__) void tex2DLod(unsigned char *retVal, cudaTextureObject_t texObject, float x, float y, float level)
{
   uint4 tmp;
   asm volatile ("tex.level.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], %7;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(level));
   *retVal = (unsigned char)(tmp.x);
}

static __forceinline __declspec(__device__) void tex2DLod(uchar1 *retVal, cudaTextureObject_t texObject, float x, float y, float level)
{
   uint4 tmp;
   asm volatile ("tex.level.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], %7;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(level));
   *retVal = make_uchar1(tmp.x);
}

static __forceinline __declspec(__device__) void tex2DLod(uchar2 *retVal, cudaTextureObject_t texObject, float x, float y, float level)
{
   uint4 tmp;
   asm volatile ("tex.level.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], %7;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(level));
   *retVal = make_uchar2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void tex2DLod(uchar4 *retVal, cudaTextureObject_t texObject, float x, float y, float level)
{
   uint4 tmp;
   asm volatile ("tex.level.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], %7;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(level));
   *retVal = make_uchar4(tmp.x, tmp.y, tmp.z, tmp.w);
}







static __forceinline __declspec(__device__) void tex2DLod(short *retVal, cudaTextureObject_t texObject, float x, float y, float level)
{
   int4 tmp;
   asm volatile ("tex.level.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], %7;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(level));
   *retVal = (short)(tmp.x);
}

static __forceinline __declspec(__device__) void tex2DLod(short1 *retVal, cudaTextureObject_t texObject, float x, float y, float level)
{
   int4 tmp;
   asm volatile ("tex.level.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], %7;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(level));
   *retVal = make_short1(tmp.x);
}

static __forceinline __declspec(__device__) void tex2DLod(short2 *retVal, cudaTextureObject_t texObject, float x, float y, float level)
{
   int4 tmp;
   asm volatile ("tex.level.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], %7;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(level));
   *retVal = make_short2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void tex2DLod(short4 *retVal, cudaTextureObject_t texObject, float x, float y, float level)
{
   int4 tmp;
   asm volatile ("tex.level.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], %7;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(level));
   *retVal = make_short4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __forceinline __declspec(__device__) void tex2DLod(unsigned short *retVal, cudaTextureObject_t texObject, float x, float y, float level)
{
   uint4 tmp;
   asm volatile ("tex.level.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], %7;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(level));
   *retVal = (unsigned short)(tmp.x);
}

static __forceinline __declspec(__device__) void tex2DLod(ushort1 *retVal, cudaTextureObject_t texObject, float x, float y, float level)
{
   uint4 tmp;
   asm volatile ("tex.level.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], %7;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(level));
   *retVal = make_ushort1(tmp.x);
}

static __forceinline __declspec(__device__) void tex2DLod(ushort2 *retVal, cudaTextureObject_t texObject, float x, float y, float level)
{
   uint4 tmp;
   asm volatile ("tex.level.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], %7;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(level));
   *retVal = make_ushort2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void tex2DLod(ushort4 *retVal, cudaTextureObject_t texObject, float x, float y, float level)
{
   uint4 tmp;
   asm volatile ("tex.level.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], %7;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(level));
   *retVal = make_ushort4(tmp.x, tmp.y, tmp.z, tmp.w);
}







static __forceinline __declspec(__device__) void tex2DLod(int *retVal, cudaTextureObject_t texObject, float x, float y, float level)
{
   int4 tmp;
   asm volatile ("tex.level.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], %7;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(level));
   *retVal = (int)(tmp.x);
}

static __forceinline __declspec(__device__) void tex2DLod(int1 *retVal, cudaTextureObject_t texObject, float x, float y, float level)
{
   int4 tmp;
   asm volatile ("tex.level.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], %7;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(level));
   *retVal = make_int1(tmp.x);
}

static __forceinline __declspec(__device__) void tex2DLod(int2 *retVal, cudaTextureObject_t texObject, float x, float y, float level)
{
   int4 tmp;
   asm volatile ("tex.level.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], %7;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(level));
   *retVal = make_int2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void tex2DLod(int4 *retVal, cudaTextureObject_t texObject, float x, float y, float level)
{
   int4 tmp;
   asm volatile ("tex.level.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], %7;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(level));
   *retVal = make_int4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __forceinline __declspec(__device__) void tex2DLod(unsigned int *retVal, cudaTextureObject_t texObject, float x, float y, float level)
{
   uint4 tmp;
   asm volatile ("tex.level.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], %7;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(level));
   *retVal = (unsigned int)(tmp.x);
}

static __forceinline __declspec(__device__) void tex2DLod(uint1 *retVal, cudaTextureObject_t texObject, float x, float y, float level)
{
   uint4 tmp;
   asm volatile ("tex.level.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], %7;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(level));
   *retVal = make_uint1(tmp.x);
}

static __forceinline __declspec(__device__) void tex2DLod(uint2 *retVal, cudaTextureObject_t texObject, float x, float y, float level)
{
   uint4 tmp;
   asm volatile ("tex.level.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], %7;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(level));
   *retVal = make_uint2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void tex2DLod(uint4 *retVal, cudaTextureObject_t texObject, float x, float y, float level)
{
   uint4 tmp;
   asm volatile ("tex.level.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], %7;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(level));
   *retVal = make_uint4(tmp.x, tmp.y, tmp.z, tmp.w);
}









static __forceinline __declspec(__device__) void tex2DLod(long *retVal, cudaTextureObject_t texObject, float x, float y, float level)
{
   int4 tmp;
   asm volatile ("tex.level.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], %7;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(level));
   *retVal = (long)(tmp.x);
}

static __forceinline __declspec(__device__) void tex2DLod(long1 *retVal, cudaTextureObject_t texObject, float x, float y, float level)
{
   int4 tmp;
   asm volatile ("tex.level.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], %7;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(level));
   *retVal = make_long1(tmp.x);
}

static __forceinline __declspec(__device__) void tex2DLod(long2 *retVal, cudaTextureObject_t texObject, float x, float y, float level)
{
   int4 tmp;
   asm volatile ("tex.level.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], %7;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(level));
   *retVal = make_long2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void tex2DLod(long4 *retVal, cudaTextureObject_t texObject, float x, float y, float level)
{
   int4 tmp;
   asm volatile ("tex.level.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], %7;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(level));
   *retVal = make_long4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __forceinline __declspec(__device__) void tex2DLod(unsigned long *retVal, cudaTextureObject_t texObject, float x, float y, float level)
{
   uint4 tmp;
   asm volatile ("tex.level.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], %7;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(level));
   *retVal = (unsigned long)(tmp.x);
}

static __forceinline __declspec(__device__) void tex2DLod(ulong1 *retVal, cudaTextureObject_t texObject, float x, float y, float level)
{
   uint4 tmp;
   asm volatile ("tex.level.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], %7;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(level));
   *retVal = make_ulong1(tmp.x);
}

static __forceinline __declspec(__device__) void tex2DLod(ulong2 *retVal, cudaTextureObject_t texObject, float x, float y, float level)
{
   uint4 tmp;
   asm volatile ("tex.level.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], %7;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(level));
   *retVal = make_ulong2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void tex2DLod(ulong4 *retVal, cudaTextureObject_t texObject, float x, float y, float level)
{
   uint4 tmp;
   asm volatile ("tex.level.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], %7;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(level));
   *retVal = make_ulong4(tmp.x, tmp.y, tmp.z, tmp.w);
}

#line 3844 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_indirect_functions.h"








static __forceinline __declspec(__device__) void tex2DLod(float *retVal, cudaTextureObject_t texObject, float x, float y, float level)
{
   float4 tmp;
   asm volatile ("tex.level.2d.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], %7;" : "=f"(tmp.x), "=f"(tmp.y), "=f"(tmp.z), "=f"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(level));
   *retVal = (float)(tmp.x);
}

static __forceinline __declspec(__device__) void tex2DLod(float1 *retVal, cudaTextureObject_t texObject, float x, float y, float level)
{
   float4 tmp;
   asm volatile ("tex.level.2d.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], %7;" : "=f"(tmp.x), "=f"(tmp.y), "=f"(tmp.z), "=f"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(level));
   *retVal = make_float1(tmp.x);
}

static __forceinline __declspec(__device__) void tex2DLod(float2 *retVal, cudaTextureObject_t texObject, float x, float y, float level)
{
   float4 tmp;
   asm volatile ("tex.level.2d.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], %7;" : "=f"(tmp.x), "=f"(tmp.y), "=f"(tmp.z), "=f"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(level));
   *retVal = make_float2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void tex2DLod(float4 *retVal, cudaTextureObject_t texObject, float x, float y, float level)
{
   float4 tmp;
   asm volatile ("tex.level.2d.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], %7;" : "=f"(tmp.x), "=f"(tmp.y), "=f"(tmp.z), "=f"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(level));
   *retVal = make_float4(tmp.x, tmp.y, tmp.z, tmp.w);
}







template <class T>
static __forceinline __declspec(__device__) T tex2DLod(cudaTextureObject_t texObject, float x, float y, float level)
{
   T ret;
   tex2DLod(&ret, texObject, x, y, level);
   return ret;
}







static __forceinline __declspec(__device__) void tex3DLod(char *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level)
{



#line 3906 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_indirect_functions.h"
    int4 tmp;
    asm volatile ("tex.level.3d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z), "f"(level));
#line 3909 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_indirect_functions.h"
    *retVal = (char)tmp.x;
}
static __forceinline __declspec(__device__) void tex3DLod(signed char *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level)
{
   int4 tmp;
   asm volatile ("tex.level.3d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z), "f"(level));
   *retVal = (signed char)(tmp.x);
}

static __forceinline __declspec(__device__) void tex3DLod(char1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level)
{
   int4 tmp;
   asm volatile ("tex.level.3d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z), "f"(level));
   *retVal = make_char1(tmp.x);
}

static __forceinline __declspec(__device__) void tex3DLod(char2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level)
{
   int4 tmp;
   asm volatile ("tex.level.3d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z), "f"(level));
   *retVal = make_char2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void tex3DLod(char4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level)
{
   int4 tmp;
   asm volatile ("tex.level.3d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z), "f"(level));
   *retVal = make_char4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __forceinline __declspec(__device__) void tex3DLod(unsigned char *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level)
{
   uint4 tmp;
   asm volatile ("tex.level.3d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z), "f"(level));
   *retVal = (unsigned char)(tmp.x);
}

static __forceinline __declspec(__device__) void tex3DLod(uchar1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level)
{
   uint4 tmp;
   asm volatile ("tex.level.3d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z), "f"(level));
   *retVal = make_uchar1(tmp.x);
}

static __forceinline __declspec(__device__) void tex3DLod(uchar2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level)
{
   uint4 tmp;
   asm volatile ("tex.level.3d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z), "f"(level));
   *retVal = make_uchar2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void tex3DLod(uchar4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level)
{
   uint4 tmp;
   asm volatile ("tex.level.3d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z), "f"(level));
   *retVal = make_uchar4(tmp.x, tmp.y, tmp.z, tmp.w);
}







static __forceinline __declspec(__device__) void tex3DLod(short *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level)
{
   int4 tmp;
   asm volatile ("tex.level.3d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z), "f"(level));
   *retVal = (short)(tmp.x);
}

static __forceinline __declspec(__device__) void tex3DLod(short1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level)
{
   int4 tmp;
   asm volatile ("tex.level.3d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z), "f"(level));
   *retVal = make_short1(tmp.x);
}

static __forceinline __declspec(__device__) void tex3DLod(short2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level)
{
   int4 tmp;
   asm volatile ("tex.level.3d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z), "f"(level));
   *retVal = make_short2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void tex3DLod(short4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level)
{
   int4 tmp;
   asm volatile ("tex.level.3d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z), "f"(level));
   *retVal = make_short4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __forceinline __declspec(__device__) void tex3DLod(unsigned short *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level)
{
   uint4 tmp;
   asm volatile ("tex.level.3d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z), "f"(level));
   *retVal = (unsigned short)(tmp.x);
}

static __forceinline __declspec(__device__) void tex3DLod(ushort1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level)
{
   uint4 tmp;
   asm volatile ("tex.level.3d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z), "f"(level));
   *retVal = make_ushort1(tmp.x);
}

static __forceinline __declspec(__device__) void tex3DLod(ushort2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level)
{
   uint4 tmp;
   asm volatile ("tex.level.3d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z), "f"(level));
   *retVal = make_ushort2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void tex3DLod(ushort4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level)
{
   uint4 tmp;
   asm volatile ("tex.level.3d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z), "f"(level));
   *retVal = make_ushort4(tmp.x, tmp.y, tmp.z, tmp.w);
}







static __forceinline __declspec(__device__) void tex3DLod(int *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level)
{
   int4 tmp;
   asm volatile ("tex.level.3d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z), "f"(level));
   *retVal = (int)(tmp.x);
}

static __forceinline __declspec(__device__) void tex3DLod(int1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level)
{
   int4 tmp;
   asm volatile ("tex.level.3d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z), "f"(level));
   *retVal = make_int1(tmp.x);
}

static __forceinline __declspec(__device__) void tex3DLod(int2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level)
{
   int4 tmp;
   asm volatile ("tex.level.3d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z), "f"(level));
   *retVal = make_int2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void tex3DLod(int4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level)
{
   int4 tmp;
   asm volatile ("tex.level.3d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z), "f"(level));
   *retVal = make_int4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __forceinline __declspec(__device__) void tex3DLod(unsigned int *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level)
{
   uint4 tmp;
   asm volatile ("tex.level.3d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z), "f"(level));
   *retVal = (unsigned int)(tmp.x);
}

static __forceinline __declspec(__device__) void tex3DLod(uint1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level)
{
   uint4 tmp;
   asm volatile ("tex.level.3d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z), "f"(level));
   *retVal = make_uint1(tmp.x);
}

static __forceinline __declspec(__device__) void tex3DLod(uint2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level)
{
   uint4 tmp;
   asm volatile ("tex.level.3d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z), "f"(level));
   *retVal = make_uint2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void tex3DLod(uint4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level)
{
   uint4 tmp;
   asm volatile ("tex.level.3d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z), "f"(level));
   *retVal = make_uint4(tmp.x, tmp.y, tmp.z, tmp.w);
}









static __forceinline __declspec(__device__) void tex3DLod(long *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level)
{
   int4 tmp;
   asm volatile ("tex.level.3d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z), "f"(level));
   *retVal = (long)(tmp.x);
}

static __forceinline __declspec(__device__) void tex3DLod(long1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level)
{
   int4 tmp;
   asm volatile ("tex.level.3d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z), "f"(level));
   *retVal = make_long1(tmp.x);
}

static __forceinline __declspec(__device__) void tex3DLod(long2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level)
{
   int4 tmp;
   asm volatile ("tex.level.3d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z), "f"(level));
   *retVal = make_long2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void tex3DLod(long4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level)
{
   int4 tmp;
   asm volatile ("tex.level.3d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z), "f"(level));
   *retVal = make_long4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __forceinline __declspec(__device__) void tex3DLod(unsigned long *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level)
{
   uint4 tmp;
   asm volatile ("tex.level.3d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z), "f"(level));
   *retVal = (unsigned long)(tmp.x);
}

static __forceinline __declspec(__device__) void tex3DLod(ulong1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level)
{
   uint4 tmp;
   asm volatile ("tex.level.3d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z), "f"(level));
   *retVal = make_ulong1(tmp.x);
}

static __forceinline __declspec(__device__) void tex3DLod(ulong2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level)
{
   uint4 tmp;
   asm volatile ("tex.level.3d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z), "f"(level));
   *retVal = make_ulong2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void tex3DLod(ulong4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level)
{
   uint4 tmp;
   asm volatile ("tex.level.3d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z), "f"(level));
   *retVal = make_ulong4(tmp.x, tmp.y, tmp.z, tmp.w);
}

#line 4156 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_indirect_functions.h"








static __forceinline __declspec(__device__) void tex3DLod(float *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level)
{
   float4 tmp;
   asm volatile ("tex.level.3d.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=f"(tmp.x), "=f"(tmp.y), "=f"(tmp.z), "=f"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z), "f"(level));
   *retVal = (float)(tmp.x);
}

static __forceinline __declspec(__device__) void tex3DLod(float1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level)
{
   float4 tmp;
   asm volatile ("tex.level.3d.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=f"(tmp.x), "=f"(tmp.y), "=f"(tmp.z), "=f"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z), "f"(level));
   *retVal = make_float1(tmp.x);
}

static __forceinline __declspec(__device__) void tex3DLod(float2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level)
{
   float4 tmp;
   asm volatile ("tex.level.3d.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=f"(tmp.x), "=f"(tmp.y), "=f"(tmp.z), "=f"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z), "f"(level));
   *retVal = make_float2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void tex3DLod(float4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level)
{
   float4 tmp;
   asm volatile ("tex.level.3d.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=f"(tmp.x), "=f"(tmp.y), "=f"(tmp.z), "=f"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z), "f"(level));
   *retVal = make_float4(tmp.x, tmp.y, tmp.z, tmp.w);
}







template <class T>
static __forceinline __declspec(__device__) T tex3DLod(cudaTextureObject_t texObject, float x, float y, float z, float level)
{
   T ret;
   tex3DLod(&ret, texObject, x, y, z, level);
   return ret;
}







static __forceinline __declspec(__device__) void tex1DLayeredLod(char *retVal, cudaTextureObject_t texObject, float x, int layer, float level)
{



#line 4218 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_indirect_functions.h"
    int4 tmp;
    asm volatile ("tex.level.a1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], %7;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(level));
#line 4221 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_indirect_functions.h"
    *retVal = (char)tmp.x;
}
static __forceinline __declspec(__device__) void tex1DLayeredLod(signed char *retVal, cudaTextureObject_t texObject, float x, int layer, float level)
{
   int4 tmp;
   asm volatile ("tex.level.a1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], %7;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(level));
   *retVal = (signed char)(tmp.x);
}

static __forceinline __declspec(__device__) void tex1DLayeredLod(char1 *retVal, cudaTextureObject_t texObject, float x, int layer, float level)
{
   int4 tmp;
   asm volatile ("tex.level.a1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], %7;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(level));
   *retVal = make_char1(tmp.x);
}

static __forceinline __declspec(__device__) void tex1DLayeredLod(char2 *retVal, cudaTextureObject_t texObject, float x, int layer, float level)
{
   int4 tmp;
   asm volatile ("tex.level.a1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], %7;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(level));
   *retVal = make_char2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void tex1DLayeredLod(char4 *retVal, cudaTextureObject_t texObject, float x, int layer, float level)
{
   int4 tmp;
   asm volatile ("tex.level.a1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], %7;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(level));
   *retVal = make_char4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __forceinline __declspec(__device__) void tex1DLayeredLod(unsigned char *retVal, cudaTextureObject_t texObject, float x, int layer, float level)
{
   uint4 tmp;
   asm volatile ("tex.level.a1d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], %7;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(level));
   *retVal = (unsigned char)(tmp.x);
}

static __forceinline __declspec(__device__) void tex1DLayeredLod(uchar1 *retVal, cudaTextureObject_t texObject, float x, int layer, float level)
{
   uint4 tmp;
   asm volatile ("tex.level.a1d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], %7;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(level));
   *retVal = make_uchar1(tmp.x);
}

static __forceinline __declspec(__device__) void tex1DLayeredLod(uchar2 *retVal, cudaTextureObject_t texObject, float x, int layer, float level)
{
   uint4 tmp;
   asm volatile ("tex.level.a1d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], %7;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(level));
   *retVal = make_uchar2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void tex1DLayeredLod(uchar4 *retVal, cudaTextureObject_t texObject, float x, int layer, float level)
{
   uint4 tmp;
   asm volatile ("tex.level.a1d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], %7;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(level));
   *retVal = make_uchar4(tmp.x, tmp.y, tmp.z, tmp.w);
}







static __forceinline __declspec(__device__) void tex1DLayeredLod(short *retVal, cudaTextureObject_t texObject, float x, int layer, float level)
{
   int4 tmp;
   asm volatile ("tex.level.a1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], %7;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(level));
   *retVal = (short)(tmp.x);
}

static __forceinline __declspec(__device__) void tex1DLayeredLod(short1 *retVal, cudaTextureObject_t texObject, float x, int layer, float level)
{
   int4 tmp;
   asm volatile ("tex.level.a1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], %7;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(level));
   *retVal = make_short1(tmp.x);
}

static __forceinline __declspec(__device__) void tex1DLayeredLod(short2 *retVal, cudaTextureObject_t texObject, float x, int layer, float level)
{
   int4 tmp;
   asm volatile ("tex.level.a1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], %7;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(level));
   *retVal = make_short2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void tex1DLayeredLod(short4 *retVal, cudaTextureObject_t texObject, float x, int layer, float level)
{
   int4 tmp;
   asm volatile ("tex.level.a1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], %7;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(level));
   *retVal = make_short4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __forceinline __declspec(__device__) void tex1DLayeredLod(unsigned short *retVal, cudaTextureObject_t texObject, float x, int layer, float level)
{
   uint4 tmp;
   asm volatile ("tex.level.a1d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], %7;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(level));
   *retVal = (unsigned short)(tmp.x);
}

static __forceinline __declspec(__device__) void tex1DLayeredLod(ushort1 *retVal, cudaTextureObject_t texObject, float x, int layer, float level)
{
   uint4 tmp;
   asm volatile ("tex.level.a1d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], %7;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(level));
   *retVal = make_ushort1(tmp.x);
}

static __forceinline __declspec(__device__) void tex1DLayeredLod(ushort2 *retVal, cudaTextureObject_t texObject, float x, int layer, float level)
{
   uint4 tmp;
   asm volatile ("tex.level.a1d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], %7;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(level));
   *retVal = make_ushort2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void tex1DLayeredLod(ushort4 *retVal, cudaTextureObject_t texObject, float x, int layer, float level)
{
   uint4 tmp;
   asm volatile ("tex.level.a1d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], %7;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(level));
   *retVal = make_ushort4(tmp.x, tmp.y, tmp.z, tmp.w);
}







static __forceinline __declspec(__device__) void tex1DLayeredLod(int *retVal, cudaTextureObject_t texObject, float x, int layer, float level)
{
   int4 tmp;
   asm volatile ("tex.level.a1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], %7;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(level));
   *retVal = (int)(tmp.x);
}

static __forceinline __declspec(__device__) void tex1DLayeredLod(int1 *retVal, cudaTextureObject_t texObject, float x, int layer, float level)
{
   int4 tmp;
   asm volatile ("tex.level.a1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], %7;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(level));
   *retVal = make_int1(tmp.x);
}

static __forceinline __declspec(__device__) void tex1DLayeredLod(int2 *retVal, cudaTextureObject_t texObject, float x, int layer, float level)
{
   int4 tmp;
   asm volatile ("tex.level.a1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], %7;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(level));
   *retVal = make_int2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void tex1DLayeredLod(int4 *retVal, cudaTextureObject_t texObject, float x, int layer, float level)
{
   int4 tmp;
   asm volatile ("tex.level.a1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], %7;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(level));
   *retVal = make_int4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __forceinline __declspec(__device__) void tex1DLayeredLod(unsigned int *retVal, cudaTextureObject_t texObject, float x, int layer, float level)
{
   uint4 tmp;
   asm volatile ("tex.level.a1d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], %7;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(level));
   *retVal = (unsigned int)(tmp.x);
}

static __forceinline __declspec(__device__) void tex1DLayeredLod(uint1 *retVal, cudaTextureObject_t texObject, float x, int layer, float level)
{
   uint4 tmp;
   asm volatile ("tex.level.a1d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], %7;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(level));
   *retVal = make_uint1(tmp.x);
}

static __forceinline __declspec(__device__) void tex1DLayeredLod(uint2 *retVal, cudaTextureObject_t texObject, float x, int layer, float level)
{
   uint4 tmp;
   asm volatile ("tex.level.a1d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], %7;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(level));
   *retVal = make_uint2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void tex1DLayeredLod(uint4 *retVal, cudaTextureObject_t texObject, float x, int layer, float level)
{
   uint4 tmp;
   asm volatile ("tex.level.a1d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], %7;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(level));
   *retVal = make_uint4(tmp.x, tmp.y, tmp.z, tmp.w);
}









static __forceinline __declspec(__device__) void tex1DLayeredLod(long *retVal, cudaTextureObject_t texObject, float x, int layer, float level)
{
   int4 tmp;
   asm volatile ("tex.level.a1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], %7;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(level));
   *retVal = (long)(tmp.x);
}

static __forceinline __declspec(__device__) void tex1DLayeredLod(long1 *retVal, cudaTextureObject_t texObject, float x, int layer, float level)
{
   int4 tmp;
   asm volatile ("tex.level.a1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], %7;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(level));
   *retVal = make_long1(tmp.x);
}

static __forceinline __declspec(__device__) void tex1DLayeredLod(long2 *retVal, cudaTextureObject_t texObject, float x, int layer, float level)
{
   int4 tmp;
   asm volatile ("tex.level.a1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], %7;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(level));
   *retVal = make_long2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void tex1DLayeredLod(long4 *retVal, cudaTextureObject_t texObject, float x, int layer, float level)
{
   int4 tmp;
   asm volatile ("tex.level.a1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], %7;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(level));
   *retVal = make_long4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __forceinline __declspec(__device__) void tex1DLayeredLod(unsigned long *retVal, cudaTextureObject_t texObject, float x, int layer, float level)
{
   uint4 tmp;
   asm volatile ("tex.level.a1d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], %7;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(level));
   *retVal = (unsigned long)(tmp.x);
}

static __forceinline __declspec(__device__) void tex1DLayeredLod(ulong1 *retVal, cudaTextureObject_t texObject, float x, int layer, float level)
{
   uint4 tmp;
   asm volatile ("tex.level.a1d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], %7;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(level));
   *retVal = make_ulong1(tmp.x);
}

static __forceinline __declspec(__device__) void tex1DLayeredLod(ulong2 *retVal, cudaTextureObject_t texObject, float x, int layer, float level)
{
   uint4 tmp;
   asm volatile ("tex.level.a1d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], %7;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(level));
   *retVal = make_ulong2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void tex1DLayeredLod(ulong4 *retVal, cudaTextureObject_t texObject, float x, int layer, float level)
{
   uint4 tmp;
   asm volatile ("tex.level.a1d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], %7;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(level));
   *retVal = make_ulong4(tmp.x, tmp.y, tmp.z, tmp.w);
}

#line 4468 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_indirect_functions.h"








static __forceinline __declspec(__device__) void tex1DLayeredLod(float *retVal, cudaTextureObject_t texObject, float x, int layer, float level)
{
   float4 tmp;
   asm volatile ("tex.level.a1d.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], %7;" : "=f"(tmp.x), "=f"(tmp.y), "=f"(tmp.z), "=f"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(level));
   *retVal = (float)(tmp.x);
}

static __forceinline __declspec(__device__) void tex1DLayeredLod(float1 *retVal, cudaTextureObject_t texObject, float x, int layer, float level)
{
   float4 tmp;
   asm volatile ("tex.level.a1d.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], %7;" : "=f"(tmp.x), "=f"(tmp.y), "=f"(tmp.z), "=f"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(level));
   *retVal = make_float1(tmp.x);
}

static __forceinline __declspec(__device__) void tex1DLayeredLod(float2 *retVal, cudaTextureObject_t texObject, float x, int layer, float level)
{
   float4 tmp;
   asm volatile ("tex.level.a1d.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], %7;" : "=f"(tmp.x), "=f"(tmp.y), "=f"(tmp.z), "=f"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(level));
   *retVal = make_float2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void tex1DLayeredLod(float4 *retVal, cudaTextureObject_t texObject, float x, int layer, float level)
{
   float4 tmp;
   asm volatile ("tex.level.a1d.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], %7;" : "=f"(tmp.x), "=f"(tmp.y), "=f"(tmp.z), "=f"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(level));
   *retVal = make_float4(tmp.x, tmp.y, tmp.z, tmp.w);
}







template <class T>
static __forceinline __declspec(__device__) T tex1DLayeredLod(cudaTextureObject_t texObject, float x, int layer, float level)
{
   T ret;
   tex1DLayeredLod(&ret, texObject, x, layer, level);
   return ret;
}







static __forceinline __declspec(__device__) void tex2DLayeredLod(char *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level)
{



#line 4530 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_indirect_functions.h"
    int4 tmp;
    asm volatile ("tex.level.a2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y), "f"(level));
#line 4533 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_indirect_functions.h"
    *retVal = (char)tmp.x;
}
static __forceinline __declspec(__device__) void tex2DLayeredLod(signed char *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level)
{
   int4 tmp;
   asm volatile ("tex.level.a2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y), "f"(level));
   *retVal = (signed char)(tmp.x);
}

static __forceinline __declspec(__device__) void tex2DLayeredLod(char1 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level)
{
   int4 tmp;
   asm volatile ("tex.level.a2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y), "f"(level));
   *retVal = make_char1(tmp.x);
}

static __forceinline __declspec(__device__) void tex2DLayeredLod(char2 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level)
{
   int4 tmp;
   asm volatile ("tex.level.a2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y), "f"(level));
   *retVal = make_char2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void tex2DLayeredLod(char4 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level)
{
   int4 tmp;
   asm volatile ("tex.level.a2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y), "f"(level));
   *retVal = make_char4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __forceinline __declspec(__device__) void tex2DLayeredLod(unsigned char *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level)
{
   uint4 tmp;
   asm volatile ("tex.level.a2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y), "f"(level));
   *retVal = (unsigned char)(tmp.x);
}

static __forceinline __declspec(__device__) void tex2DLayeredLod(uchar1 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level)
{
   uint4 tmp;
   asm volatile ("tex.level.a2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y), "f"(level));
   *retVal = make_uchar1(tmp.x);
}

static __forceinline __declspec(__device__) void tex2DLayeredLod(uchar2 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level)
{
   uint4 tmp;
   asm volatile ("tex.level.a2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y), "f"(level));
   *retVal = make_uchar2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void tex2DLayeredLod(uchar4 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level)
{
   uint4 tmp;
   asm volatile ("tex.level.a2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y), "f"(level));
   *retVal = make_uchar4(tmp.x, tmp.y, tmp.z, tmp.w);
}







static __forceinline __declspec(__device__) void tex2DLayeredLod(short *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level)
{
   int4 tmp;
   asm volatile ("tex.level.a2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y), "f"(level));
   *retVal = (short)(tmp.x);
}

static __forceinline __declspec(__device__) void tex2DLayeredLod(short1 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level)
{
   int4 tmp;
   asm volatile ("tex.level.a2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y), "f"(level));
   *retVal = make_short1(tmp.x);
}

static __forceinline __declspec(__device__) void tex2DLayeredLod(short2 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level)
{
   int4 tmp;
   asm volatile ("tex.level.a2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y), "f"(level));
   *retVal = make_short2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void tex2DLayeredLod(short4 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level)
{
   int4 tmp;
   asm volatile ("tex.level.a2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y), "f"(level));
   *retVal = make_short4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __forceinline __declspec(__device__) void tex2DLayeredLod(unsigned short *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level)
{
   uint4 tmp;
   asm volatile ("tex.level.a2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y), "f"(level));
   *retVal = (unsigned short)(tmp.x);
}

static __forceinline __declspec(__device__) void tex2DLayeredLod(ushort1 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level)
{
   uint4 tmp;
   asm volatile ("tex.level.a2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y), "f"(level));
   *retVal = make_ushort1(tmp.x);
}

static __forceinline __declspec(__device__) void tex2DLayeredLod(ushort2 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level)
{
   uint4 tmp;
   asm volatile ("tex.level.a2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y), "f"(level));
   *retVal = make_ushort2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void tex2DLayeredLod(ushort4 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level)
{
   uint4 tmp;
   asm volatile ("tex.level.a2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y), "f"(level));
   *retVal = make_ushort4(tmp.x, tmp.y, tmp.z, tmp.w);
}







static __forceinline __declspec(__device__) void tex2DLayeredLod(int *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level)
{
   int4 tmp;
   asm volatile ("tex.level.a2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y), "f"(level));
   *retVal = (int)(tmp.x);
}

static __forceinline __declspec(__device__) void tex2DLayeredLod(int1 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level)
{
   int4 tmp;
   asm volatile ("tex.level.a2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y), "f"(level));
   *retVal = make_int1(tmp.x);
}

static __forceinline __declspec(__device__) void tex2DLayeredLod(int2 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level)
{
   int4 tmp;
   asm volatile ("tex.level.a2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y), "f"(level));
   *retVal = make_int2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void tex2DLayeredLod(int4 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level)
{
   int4 tmp;
   asm volatile ("tex.level.a2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y), "f"(level));
   *retVal = make_int4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __forceinline __declspec(__device__) void tex2DLayeredLod(unsigned int *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level)
{
   uint4 tmp;
   asm volatile ("tex.level.a2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y), "f"(level));
   *retVal = (unsigned int)(tmp.x);
}

static __forceinline __declspec(__device__) void tex2DLayeredLod(uint1 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level)
{
   uint4 tmp;
   asm volatile ("tex.level.a2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y), "f"(level));
   *retVal = make_uint1(tmp.x);
}

static __forceinline __declspec(__device__) void tex2DLayeredLod(uint2 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level)
{
   uint4 tmp;
   asm volatile ("tex.level.a2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y), "f"(level));
   *retVal = make_uint2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void tex2DLayeredLod(uint4 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level)
{
   uint4 tmp;
   asm volatile ("tex.level.a2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y), "f"(level));
   *retVal = make_uint4(tmp.x, tmp.y, tmp.z, tmp.w);
}









static __forceinline __declspec(__device__) void tex2DLayeredLod(long *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level)
{
   int4 tmp;
   asm volatile ("tex.level.a2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y), "f"(level));
   *retVal = (long)(tmp.x);
}

static __forceinline __declspec(__device__) void tex2DLayeredLod(long1 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level)
{
   int4 tmp;
   asm volatile ("tex.level.a2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y), "f"(level));
   *retVal = make_long1(tmp.x);
}

static __forceinline __declspec(__device__) void tex2DLayeredLod(long2 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level)
{
   int4 tmp;
   asm volatile ("tex.level.a2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y), "f"(level));
   *retVal = make_long2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void tex2DLayeredLod(long4 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level)
{
   int4 tmp;
   asm volatile ("tex.level.a2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y), "f"(level));
   *retVal = make_long4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __forceinline __declspec(__device__) void tex2DLayeredLod(unsigned long *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level)
{
   uint4 tmp;
   asm volatile ("tex.level.a2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y), "f"(level));
   *retVal = (unsigned long)(tmp.x);
}

static __forceinline __declspec(__device__) void tex2DLayeredLod(ulong1 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level)
{
   uint4 tmp;
   asm volatile ("tex.level.a2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y), "f"(level));
   *retVal = make_ulong1(tmp.x);
}

static __forceinline __declspec(__device__) void tex2DLayeredLod(ulong2 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level)
{
   uint4 tmp;
   asm volatile ("tex.level.a2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y), "f"(level));
   *retVal = make_ulong2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void tex2DLayeredLod(ulong4 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level)
{
   uint4 tmp;
   asm volatile ("tex.level.a2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y), "f"(level));
   *retVal = make_ulong4(tmp.x, tmp.y, tmp.z, tmp.w);
}

#line 4780 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_indirect_functions.h"








static __forceinline __declspec(__device__) void tex2DLayeredLod(float *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level)
{
   float4 tmp;
   asm volatile ("tex.level.a2d.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=f"(tmp.x), "=f"(tmp.y), "=f"(tmp.z), "=f"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y), "f"(level));
   *retVal = (float)(tmp.x);
}

static __forceinline __declspec(__device__) void tex2DLayeredLod(float1 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level)
{
   float4 tmp;
   asm volatile ("tex.level.a2d.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=f"(tmp.x), "=f"(tmp.y), "=f"(tmp.z), "=f"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y), "f"(level));
   *retVal = make_float1(tmp.x);
}

static __forceinline __declspec(__device__) void tex2DLayeredLod(float2 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level)
{
   float4 tmp;
   asm volatile ("tex.level.a2d.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=f"(tmp.x), "=f"(tmp.y), "=f"(tmp.z), "=f"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y), "f"(level));
   *retVal = make_float2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void tex2DLayeredLod(float4 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float level)
{
   float4 tmp;
   asm volatile ("tex.level.a2d.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=f"(tmp.x), "=f"(tmp.y), "=f"(tmp.z), "=f"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y), "f"(level));
   *retVal = make_float4(tmp.x, tmp.y, tmp.z, tmp.w);
}







template <class T>
static __forceinline __declspec(__device__) T tex2DLayeredLod(cudaTextureObject_t texObject, float x, float y, int layer, float level)
{
   T ret;
   tex2DLayeredLod(&ret, texObject, x, y, layer, level);
   return ret;
}







static __forceinline __declspec(__device__) void texCubemapLod(char *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level)
{



#line 4842 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_indirect_functions.h"
    int4 tmp;
    asm volatile ("tex.level.cube.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z), "f"(level));
#line 4845 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_indirect_functions.h"
    *retVal = (char)tmp.x;
}
static __forceinline __declspec(__device__) void texCubemapLod(signed char *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level)
{
   int4 tmp;
   asm volatile ("tex.level.cube.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z), "f"(level));
   *retVal = (signed char)(tmp.x);
}

static __forceinline __declspec(__device__) void texCubemapLod(char1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level)
{
   int4 tmp;
   asm volatile ("tex.level.cube.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z), "f"(level));
   *retVal = make_char1(tmp.x);
}

static __forceinline __declspec(__device__) void texCubemapLod(char2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level)
{
   int4 tmp;
   asm volatile ("tex.level.cube.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z), "f"(level));
   *retVal = make_char2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void texCubemapLod(char4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level)
{
   int4 tmp;
   asm volatile ("tex.level.cube.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z), "f"(level));
   *retVal = make_char4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __forceinline __declspec(__device__) void texCubemapLod(unsigned char *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level)
{
   uint4 tmp;
   asm volatile ("tex.level.cube.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z), "f"(level));
   *retVal = (unsigned char)(tmp.x);
}

static __forceinline __declspec(__device__) void texCubemapLod(uchar1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level)
{
   uint4 tmp;
   asm volatile ("tex.level.cube.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z), "f"(level));
   *retVal = make_uchar1(tmp.x);
}

static __forceinline __declspec(__device__) void texCubemapLod(uchar2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level)
{
   uint4 tmp;
   asm volatile ("tex.level.cube.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z), "f"(level));
   *retVal = make_uchar2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void texCubemapLod(uchar4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level)
{
   uint4 tmp;
   asm volatile ("tex.level.cube.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z), "f"(level));
   *retVal = make_uchar4(tmp.x, tmp.y, tmp.z, tmp.w);
}







static __forceinline __declspec(__device__) void texCubemapLod(short *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level)
{
   int4 tmp;
   asm volatile ("tex.level.cube.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z), "f"(level));
   *retVal = (short)(tmp.x);
}

static __forceinline __declspec(__device__) void texCubemapLod(short1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level)
{
   int4 tmp;
   asm volatile ("tex.level.cube.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z), "f"(level));
   *retVal = make_short1(tmp.x);
}

static __forceinline __declspec(__device__) void texCubemapLod(short2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level)
{
   int4 tmp;
   asm volatile ("tex.level.cube.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z), "f"(level));
   *retVal = make_short2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void texCubemapLod(short4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level)
{
   int4 tmp;
   asm volatile ("tex.level.cube.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z), "f"(level));
   *retVal = make_short4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __forceinline __declspec(__device__) void texCubemapLod(unsigned short *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level)
{
   uint4 tmp;
   asm volatile ("tex.level.cube.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z), "f"(level));
   *retVal = (unsigned short)(tmp.x);
}

static __forceinline __declspec(__device__) void texCubemapLod(ushort1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level)
{
   uint4 tmp;
   asm volatile ("tex.level.cube.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z), "f"(level));
   *retVal = make_ushort1(tmp.x);
}

static __forceinline __declspec(__device__) void texCubemapLod(ushort2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level)
{
   uint4 tmp;
   asm volatile ("tex.level.cube.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z), "f"(level));
   *retVal = make_ushort2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void texCubemapLod(ushort4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level)
{
   uint4 tmp;
   asm volatile ("tex.level.cube.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z), "f"(level));
   *retVal = make_ushort4(tmp.x, tmp.y, tmp.z, tmp.w);
}







static __forceinline __declspec(__device__) void texCubemapLod(int *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level)
{
   int4 tmp;
   asm volatile ("tex.level.cube.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z), "f"(level));
   *retVal = (int)(tmp.x);
}

static __forceinline __declspec(__device__) void texCubemapLod(int1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level)
{
   int4 tmp;
   asm volatile ("tex.level.cube.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z), "f"(level));
   *retVal = make_int1(tmp.x);
}

static __forceinline __declspec(__device__) void texCubemapLod(int2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level)
{
   int4 tmp;
   asm volatile ("tex.level.cube.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z), "f"(level));
   *retVal = make_int2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void texCubemapLod(int4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level)
{
   int4 tmp;
   asm volatile ("tex.level.cube.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z), "f"(level));
   *retVal = make_int4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __forceinline __declspec(__device__) void texCubemapLod(unsigned int *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level)
{
   uint4 tmp;
   asm volatile ("tex.level.cube.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z), "f"(level));
   *retVal = (unsigned int)(tmp.x);
}

static __forceinline __declspec(__device__) void texCubemapLod(uint1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level)
{
   uint4 tmp;
   asm volatile ("tex.level.cube.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z), "f"(level));
   *retVal = make_uint1(tmp.x);
}

static __forceinline __declspec(__device__) void texCubemapLod(uint2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level)
{
   uint4 tmp;
   asm volatile ("tex.level.cube.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z), "f"(level));
   *retVal = make_uint2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void texCubemapLod(uint4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level)
{
   uint4 tmp;
   asm volatile ("tex.level.cube.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z), "f"(level));
   *retVal = make_uint4(tmp.x, tmp.y, tmp.z, tmp.w);
}









static __forceinline __declspec(__device__) void texCubemapLod(long *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level)
{
   int4 tmp;
   asm volatile ("tex.level.cube.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z), "f"(level));
   *retVal = (long)(tmp.x);
}

static __forceinline __declspec(__device__) void texCubemapLod(long1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level)
{
   int4 tmp;
   asm volatile ("tex.level.cube.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z), "f"(level));
   *retVal = make_long1(tmp.x);
}

static __forceinline __declspec(__device__) void texCubemapLod(long2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level)
{
   int4 tmp;
   asm volatile ("tex.level.cube.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z), "f"(level));
   *retVal = make_long2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void texCubemapLod(long4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level)
{
   int4 tmp;
   asm volatile ("tex.level.cube.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z), "f"(level));
   *retVal = make_long4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __forceinline __declspec(__device__) void texCubemapLod(unsigned long *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level)
{
   uint4 tmp;
   asm volatile ("tex.level.cube.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z), "f"(level));
   *retVal = (unsigned long)(tmp.x);
}

static __forceinline __declspec(__device__) void texCubemapLod(ulong1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level)
{
   uint4 tmp;
   asm volatile ("tex.level.cube.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z), "f"(level));
   *retVal = make_ulong1(tmp.x);
}

static __forceinline __declspec(__device__) void texCubemapLod(ulong2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level)
{
   uint4 tmp;
   asm volatile ("tex.level.cube.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z), "f"(level));
   *retVal = make_ulong2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void texCubemapLod(ulong4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level)
{
   uint4 tmp;
   asm volatile ("tex.level.cube.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z), "f"(level));
   *retVal = make_ulong4(tmp.x, tmp.y, tmp.z, tmp.w);
}

#line 5092 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_indirect_functions.h"








static __forceinline __declspec(__device__) void texCubemapLod(float *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level)
{
   float4 tmp;
   asm volatile ("tex.level.cube.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=f"(tmp.x), "=f"(tmp.y), "=f"(tmp.z), "=f"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z), "f"(level));
   *retVal = (float)(tmp.x);
}

static __forceinline __declspec(__device__) void texCubemapLod(float1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level)
{
   float4 tmp;
   asm volatile ("tex.level.cube.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=f"(tmp.x), "=f"(tmp.y), "=f"(tmp.z), "=f"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z), "f"(level));
   *retVal = make_float1(tmp.x);
}

static __forceinline __declspec(__device__) void texCubemapLod(float2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level)
{
   float4 tmp;
   asm volatile ("tex.level.cube.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=f"(tmp.x), "=f"(tmp.y), "=f"(tmp.z), "=f"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z), "f"(level));
   *retVal = make_float2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void texCubemapLod(float4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float level)
{
   float4 tmp;
   asm volatile ("tex.level.cube.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], %8;" : "=f"(tmp.x), "=f"(tmp.y), "=f"(tmp.z), "=f"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z), "f"(level));
   *retVal = make_float4(tmp.x, tmp.y, tmp.z, tmp.w);
}







template <class T>
static __forceinline __declspec(__device__) T texCubemapLod(cudaTextureObject_t texObject, float x, float y, float z, float level)
{
   T ret;
   texCubemapLod(&ret, texObject, x, y, z, level);
   return ret;
}







static __forceinline __declspec(__device__) void texCubemapLayeredLod(char *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level)
{



#line 5154 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_indirect_functions.h"
    int4 tmp;
    asm volatile ("tex.level.acube.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %8}], %9;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y), "f"(z), "f"(level));
#line 5157 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_indirect_functions.h"
    *retVal = (char)tmp.x;
}
static __forceinline __declspec(__device__) void texCubemapLayeredLod(signed char *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level)
{
   int4 tmp;
   asm volatile ("tex.level.acube.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %8}], %9;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y), "f"(z), "f"(level));
   *retVal = (signed char)(tmp.x);
}

static __forceinline __declspec(__device__) void texCubemapLayeredLod(char1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level)
{
   int4 tmp;
   asm volatile ("tex.level.acube.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %8}], %9;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y), "f"(z), "f"(level));
   *retVal = make_char1(tmp.x);
}

static __forceinline __declspec(__device__) void texCubemapLayeredLod(char2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level)
{
   int4 tmp;
   asm volatile ("tex.level.acube.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %8}], %9;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y), "f"(z), "f"(level));
   *retVal = make_char2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void texCubemapLayeredLod(char4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level)
{
   int4 tmp;
   asm volatile ("tex.level.acube.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %8}], %9;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y), "f"(z), "f"(level));
   *retVal = make_char4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __forceinline __declspec(__device__) void texCubemapLayeredLod(unsigned char *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level)
{
   uint4 tmp;
   asm volatile ("tex.level.acube.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %8}], %9;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y), "f"(z), "f"(level));
   *retVal = (unsigned char)(tmp.x);
}

static __forceinline __declspec(__device__) void texCubemapLayeredLod(uchar1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level)
{
   uint4 tmp;
   asm volatile ("tex.level.acube.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %8}], %9;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y), "f"(z), "f"(level));
   *retVal = make_uchar1(tmp.x);
}

static __forceinline __declspec(__device__) void texCubemapLayeredLod(uchar2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level)
{
   uint4 tmp;
   asm volatile ("tex.level.acube.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %8}], %9;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y), "f"(z), "f"(level));
   *retVal = make_uchar2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void texCubemapLayeredLod(uchar4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level)
{
   uint4 tmp;
   asm volatile ("tex.level.acube.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %8}], %9;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y), "f"(z), "f"(level));
   *retVal = make_uchar4(tmp.x, tmp.y, tmp.z, tmp.w);
}







static __forceinline __declspec(__device__) void texCubemapLayeredLod(short *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level)
{
   int4 tmp;
   asm volatile ("tex.level.acube.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %8}], %9;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y), "f"(z), "f"(level));
   *retVal = (short)(tmp.x);
}

static __forceinline __declspec(__device__) void texCubemapLayeredLod(short1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level)
{
   int4 tmp;
   asm volatile ("tex.level.acube.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %8}], %9;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y), "f"(z), "f"(level));
   *retVal = make_short1(tmp.x);
}

static __forceinline __declspec(__device__) void texCubemapLayeredLod(short2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level)
{
   int4 tmp;
   asm volatile ("tex.level.acube.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %8}], %9;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y), "f"(z), "f"(level));
   *retVal = make_short2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void texCubemapLayeredLod(short4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level)
{
   int4 tmp;
   asm volatile ("tex.level.acube.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %8}], %9;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y), "f"(z), "f"(level));
   *retVal = make_short4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __forceinline __declspec(__device__) void texCubemapLayeredLod(unsigned short *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level)
{
   uint4 tmp;
   asm volatile ("tex.level.acube.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %8}], %9;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y), "f"(z), "f"(level));
   *retVal = (unsigned short)(tmp.x);
}

static __forceinline __declspec(__device__) void texCubemapLayeredLod(ushort1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level)
{
   uint4 tmp;
   asm volatile ("tex.level.acube.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %8}], %9;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y), "f"(z), "f"(level));
   *retVal = make_ushort1(tmp.x);
}

static __forceinline __declspec(__device__) void texCubemapLayeredLod(ushort2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level)
{
   uint4 tmp;
   asm volatile ("tex.level.acube.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %8}], %9;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y), "f"(z), "f"(level));
   *retVal = make_ushort2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void texCubemapLayeredLod(ushort4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level)
{
   uint4 tmp;
   asm volatile ("tex.level.acube.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %8}], %9;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y), "f"(z), "f"(level));
   *retVal = make_ushort4(tmp.x, tmp.y, tmp.z, tmp.w);
}







static __forceinline __declspec(__device__) void texCubemapLayeredLod(int *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level)
{
   int4 tmp;
   asm volatile ("tex.level.acube.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %8}], %9;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y), "f"(z), "f"(level));
   *retVal = (int)(tmp.x);
}

static __forceinline __declspec(__device__) void texCubemapLayeredLod(int1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level)
{
   int4 tmp;
   asm volatile ("tex.level.acube.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %8}], %9;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y), "f"(z), "f"(level));
   *retVal = make_int1(tmp.x);
}

static __forceinline __declspec(__device__) void texCubemapLayeredLod(int2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level)
{
   int4 tmp;
   asm volatile ("tex.level.acube.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %8}], %9;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y), "f"(z), "f"(level));
   *retVal = make_int2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void texCubemapLayeredLod(int4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level)
{
   int4 tmp;
   asm volatile ("tex.level.acube.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %8}], %9;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y), "f"(z), "f"(level));
   *retVal = make_int4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __forceinline __declspec(__device__) void texCubemapLayeredLod(unsigned int *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level)
{
   uint4 tmp;
   asm volatile ("tex.level.acube.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %8}], %9;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y), "f"(z), "f"(level));
   *retVal = (unsigned int)(tmp.x);
}

static __forceinline __declspec(__device__) void texCubemapLayeredLod(uint1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level)
{
   uint4 tmp;
   asm volatile ("tex.level.acube.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %8}], %9;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y), "f"(z), "f"(level));
   *retVal = make_uint1(tmp.x);
}

static __forceinline __declspec(__device__) void texCubemapLayeredLod(uint2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level)
{
   uint4 tmp;
   asm volatile ("tex.level.acube.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %8}], %9;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y), "f"(z), "f"(level));
   *retVal = make_uint2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void texCubemapLayeredLod(uint4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level)
{
   uint4 tmp;
   asm volatile ("tex.level.acube.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %8}], %9;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y), "f"(z), "f"(level));
   *retVal = make_uint4(tmp.x, tmp.y, tmp.z, tmp.w);
}









static __forceinline __declspec(__device__) void texCubemapLayeredLod(long *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level)
{
   int4 tmp;
   asm volatile ("tex.level.acube.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %8}], %9;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y), "f"(z), "f"(level));
   *retVal = (long)(tmp.x);
}

static __forceinline __declspec(__device__) void texCubemapLayeredLod(long1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level)
{
   int4 tmp;
   asm volatile ("tex.level.acube.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %8}], %9;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y), "f"(z), "f"(level));
   *retVal = make_long1(tmp.x);
}

static __forceinline __declspec(__device__) void texCubemapLayeredLod(long2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level)
{
   int4 tmp;
   asm volatile ("tex.level.acube.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %8}], %9;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y), "f"(z), "f"(level));
   *retVal = make_long2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void texCubemapLayeredLod(long4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level)
{
   int4 tmp;
   asm volatile ("tex.level.acube.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %8}], %9;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y), "f"(z), "f"(level));
   *retVal = make_long4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __forceinline __declspec(__device__) void texCubemapLayeredLod(unsigned long *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level)
{
   uint4 tmp;
   asm volatile ("tex.level.acube.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %8}], %9;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y), "f"(z), "f"(level));
   *retVal = (unsigned long)(tmp.x);
}

static __forceinline __declspec(__device__) void texCubemapLayeredLod(ulong1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level)
{
   uint4 tmp;
   asm volatile ("tex.level.acube.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %8}], %9;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y), "f"(z), "f"(level));
   *retVal = make_ulong1(tmp.x);
}

static __forceinline __declspec(__device__) void texCubemapLayeredLod(ulong2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level)
{
   uint4 tmp;
   asm volatile ("tex.level.acube.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %8}], %9;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y), "f"(z), "f"(level));
   *retVal = make_ulong2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void texCubemapLayeredLod(ulong4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level)
{
   uint4 tmp;
   asm volatile ("tex.level.acube.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %8}], %9;" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y), "f"(z), "f"(level));
   *retVal = make_ulong4(tmp.x, tmp.y, tmp.z, tmp.w);
}

#line 5404 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_indirect_functions.h"








static __forceinline __declspec(__device__) void texCubemapLayeredLod(float *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level)
{
   float4 tmp;
   asm volatile ("tex.level.acube.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %8}], %9;" : "=f"(tmp.x), "=f"(tmp.y), "=f"(tmp.z), "=f"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y), "f"(z), "f"(level));
   *retVal = (float)(tmp.x);
}

static __forceinline __declspec(__device__) void texCubemapLayeredLod(float1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level)
{
   float4 tmp;
   asm volatile ("tex.level.acube.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %8}], %9;" : "=f"(tmp.x), "=f"(tmp.y), "=f"(tmp.z), "=f"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y), "f"(z), "f"(level));
   *retVal = make_float1(tmp.x);
}

static __forceinline __declspec(__device__) void texCubemapLayeredLod(float2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level)
{
   float4 tmp;
   asm volatile ("tex.level.acube.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %8}], %9;" : "=f"(tmp.x), "=f"(tmp.y), "=f"(tmp.z), "=f"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y), "f"(z), "f"(level));
   *retVal = make_float2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void texCubemapLayeredLod(float4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, int layer, float level)
{
   float4 tmp;
   asm volatile ("tex.level.acube.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %8}], %9;" : "=f"(tmp.x), "=f"(tmp.y), "=f"(tmp.z), "=f"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y), "f"(z), "f"(level));
   *retVal = make_float4(tmp.x, tmp.y, tmp.z, tmp.w);
}







template <class T>
static __forceinline __declspec(__device__) T texCubemapLayeredLod(cudaTextureObject_t texObject, float x, float y, float z, int layer, float level)
{
   T ret;
   texCubemapLayeredLod(&ret, texObject, x, y, z, layer, level);
   return ret;
}







static __forceinline __declspec(__device__) void tex1DGrad(char *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy)
{



#line 5466 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_indirect_functions.h"
    int4 tmp;
    asm volatile ("tex.grad.1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5}], {%6}, {%7};" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(dPdx), "f"(dPdy));
#line 5469 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_indirect_functions.h"
    *retVal = (char)tmp.x;
}
static __forceinline __declspec(__device__) void tex1DGrad(signed char *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy)
{
   int4 tmp;
   asm volatile ("tex.grad.1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5}], {%6}, {%7};" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(dPdx), "f"(dPdy));
   *retVal = (signed char)(tmp.x);
}

static __forceinline __declspec(__device__) void tex1DGrad(char1 *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy)
{
   int4 tmp;
   asm volatile ("tex.grad.1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5}], {%6}, {%7};" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(dPdx), "f"(dPdy));
   *retVal = make_char1(tmp.x);
}

static __forceinline __declspec(__device__) void tex1DGrad(char2 *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy)
{
   int4 tmp;
   asm volatile ("tex.grad.1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5}], {%6}, {%7};" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(dPdx), "f"(dPdy));
   *retVal = make_char2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void tex1DGrad(char4 *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy)
{
   int4 tmp;
   asm volatile ("tex.grad.1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5}], {%6}, {%7};" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(dPdx), "f"(dPdy));
   *retVal = make_char4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __forceinline __declspec(__device__) void tex1DGrad(unsigned char *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy)
{
   uint4 tmp;
   asm volatile ("tex.grad.1d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5}], {%6}, {%7};" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(dPdx), "f"(dPdy));
   *retVal = (unsigned char)(tmp.x);
}

static __forceinline __declspec(__device__) void tex1DGrad(uchar1 *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy)
{
   uint4 tmp;
   asm volatile ("tex.grad.1d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5}], {%6}, {%7};" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(dPdx), "f"(dPdy));
   *retVal = make_uchar1(tmp.x);
}

static __forceinline __declspec(__device__) void tex1DGrad(uchar2 *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy)
{
   uint4 tmp;
   asm volatile ("tex.grad.1d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5}], {%6}, {%7};" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(dPdx), "f"(dPdy));
   *retVal = make_uchar2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void tex1DGrad(uchar4 *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy)
{
   uint4 tmp;
   asm volatile ("tex.grad.1d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5}], {%6}, {%7};" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(dPdx), "f"(dPdy));
   *retVal = make_uchar4(tmp.x, tmp.y, tmp.z, tmp.w);
}







static __forceinline __declspec(__device__) void tex1DGrad(short *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy)
{
   int4 tmp;
   asm volatile ("tex.grad.1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5}], {%6}, {%7};" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(dPdx), "f"(dPdy));
   *retVal = (short)(tmp.x);
}

static __forceinline __declspec(__device__) void tex1DGrad(short1 *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy)
{
   int4 tmp;
   asm volatile ("tex.grad.1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5}], {%6}, {%7};" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(dPdx), "f"(dPdy));
   *retVal = make_short1(tmp.x);
}

static __forceinline __declspec(__device__) void tex1DGrad(short2 *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy)
{
   int4 tmp;
   asm volatile ("tex.grad.1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5}], {%6}, {%7};" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(dPdx), "f"(dPdy));
   *retVal = make_short2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void tex1DGrad(short4 *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy)
{
   int4 tmp;
   asm volatile ("tex.grad.1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5}], {%6}, {%7};" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(dPdx), "f"(dPdy));
   *retVal = make_short4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __forceinline __declspec(__device__) void tex1DGrad(unsigned short *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy)
{
   uint4 tmp;
   asm volatile ("tex.grad.1d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5}], {%6}, {%7};" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(dPdx), "f"(dPdy));
   *retVal = (unsigned short)(tmp.x);
}

static __forceinline __declspec(__device__) void tex1DGrad(ushort1 *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy)
{
   uint4 tmp;
   asm volatile ("tex.grad.1d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5}], {%6}, {%7};" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(dPdx), "f"(dPdy));
   *retVal = make_ushort1(tmp.x);
}

static __forceinline __declspec(__device__) void tex1DGrad(ushort2 *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy)
{
   uint4 tmp;
   asm volatile ("tex.grad.1d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5}], {%6}, {%7};" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(dPdx), "f"(dPdy));
   *retVal = make_ushort2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void tex1DGrad(ushort4 *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy)
{
   uint4 tmp;
   asm volatile ("tex.grad.1d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5}], {%6}, {%7};" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(dPdx), "f"(dPdy));
   *retVal = make_ushort4(tmp.x, tmp.y, tmp.z, tmp.w);
}







static __forceinline __declspec(__device__) void tex1DGrad(int *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy)
{
   int4 tmp;
   asm volatile ("tex.grad.1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5}], {%6}, {%7};" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(dPdx), "f"(dPdy));
   *retVal = (int)(tmp.x);
}

static __forceinline __declspec(__device__) void tex1DGrad(int1 *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy)
{
   int4 tmp;
   asm volatile ("tex.grad.1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5}], {%6}, {%7};" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(dPdx), "f"(dPdy));
   *retVal = make_int1(tmp.x);
}

static __forceinline __declspec(__device__) void tex1DGrad(int2 *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy)
{
   int4 tmp;
   asm volatile ("tex.grad.1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5}], {%6}, {%7};" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(dPdx), "f"(dPdy));
   *retVal = make_int2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void tex1DGrad(int4 *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy)
{
   int4 tmp;
   asm volatile ("tex.grad.1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5}], {%6}, {%7};" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(dPdx), "f"(dPdy));
   *retVal = make_int4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __forceinline __declspec(__device__) void tex1DGrad(unsigned int *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy)
{
   uint4 tmp;
   asm volatile ("tex.grad.1d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5}], {%6}, {%7};" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(dPdx), "f"(dPdy));
   *retVal = (unsigned int)(tmp.x);
}

static __forceinline __declspec(__device__) void tex1DGrad(uint1 *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy)
{
   uint4 tmp;
   asm volatile ("tex.grad.1d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5}], {%6}, {%7};" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(dPdx), "f"(dPdy));
   *retVal = make_uint1(tmp.x);
}

static __forceinline __declspec(__device__) void tex1DGrad(uint2 *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy)
{
   uint4 tmp;
   asm volatile ("tex.grad.1d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5}], {%6}, {%7};" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(dPdx), "f"(dPdy));
   *retVal = make_uint2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void tex1DGrad(uint4 *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy)
{
   uint4 tmp;
   asm volatile ("tex.grad.1d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5}], {%6}, {%7};" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(dPdx), "f"(dPdy));
   *retVal = make_uint4(tmp.x, tmp.y, tmp.z, tmp.w);
}









static __forceinline __declspec(__device__) void tex1DGrad(long *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy)
{
   int4 tmp;
   asm volatile ("tex.grad.1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5}], {%6}, {%7};" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(dPdx), "f"(dPdy));
   *retVal = (long)(tmp.x);
}

static __forceinline __declspec(__device__) void tex1DGrad(long1 *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy)
{
   int4 tmp;
   asm volatile ("tex.grad.1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5}], {%6}, {%7};" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(dPdx), "f"(dPdy));
   *retVal = make_long1(tmp.x);
}

static __forceinline __declspec(__device__) void tex1DGrad(long2 *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy)
{
   int4 tmp;
   asm volatile ("tex.grad.1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5}], {%6}, {%7};" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(dPdx), "f"(dPdy));
   *retVal = make_long2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void tex1DGrad(long4 *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy)
{
   int4 tmp;
   asm volatile ("tex.grad.1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5}], {%6}, {%7};" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(dPdx), "f"(dPdy));
   *retVal = make_long4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __forceinline __declspec(__device__) void tex1DGrad(unsigned long *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy)
{
   uint4 tmp;
   asm volatile ("tex.grad.1d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5}], {%6}, {%7};" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(dPdx), "f"(dPdy));
   *retVal = (unsigned long)(tmp.x);
}

static __forceinline __declspec(__device__) void tex1DGrad(ulong1 *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy)
{
   uint4 tmp;
   asm volatile ("tex.grad.1d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5}], {%6}, {%7};" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(dPdx), "f"(dPdy));
   *retVal = make_ulong1(tmp.x);
}

static __forceinline __declspec(__device__) void tex1DGrad(ulong2 *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy)
{
   uint4 tmp;
   asm volatile ("tex.grad.1d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5}], {%6}, {%7};" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(dPdx), "f"(dPdy));
   *retVal = make_ulong2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void tex1DGrad(ulong4 *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy)
{
   uint4 tmp;
   asm volatile ("tex.grad.1d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5}], {%6}, {%7};" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(dPdx), "f"(dPdy));
   *retVal = make_ulong4(tmp.x, tmp.y, tmp.z, tmp.w);
}

#line 5716 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_indirect_functions.h"








static __forceinline __declspec(__device__) void tex1DGrad(float *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy)
{
   float4 tmp;
   asm volatile ("tex.grad.1d.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5}], {%6}, {%7};" : "=f"(tmp.x), "=f"(tmp.y), "=f"(tmp.z), "=f"(tmp.w) : "l"(texObject), "f"(x), "f"(dPdx), "f"(dPdy));
   *retVal = (float)(tmp.x);
}

static __forceinline __declspec(__device__) void tex1DGrad(float1 *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy)
{
   float4 tmp;
   asm volatile ("tex.grad.1d.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5}], {%6}, {%7};" : "=f"(tmp.x), "=f"(tmp.y), "=f"(tmp.z), "=f"(tmp.w) : "l"(texObject), "f"(x), "f"(dPdx), "f"(dPdy));
   *retVal = make_float1(tmp.x);
}

static __forceinline __declspec(__device__) void tex1DGrad(float2 *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy)
{
   float4 tmp;
   asm volatile ("tex.grad.1d.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5}], {%6}, {%7};" : "=f"(tmp.x), "=f"(tmp.y), "=f"(tmp.z), "=f"(tmp.w) : "l"(texObject), "f"(x), "f"(dPdx), "f"(dPdy));
   *retVal = make_float2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void tex1DGrad(float4 *retVal, cudaTextureObject_t texObject, float x, float dPdx, float dPdy)
{
   float4 tmp;
   asm volatile ("tex.grad.1d.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5}], {%6}, {%7};" : "=f"(tmp.x), "=f"(tmp.y), "=f"(tmp.z), "=f"(tmp.w) : "l"(texObject), "f"(x), "f"(dPdx), "f"(dPdy));
   *retVal = make_float4(tmp.x, tmp.y, tmp.z, tmp.w);
}







template <class T>
static __forceinline __declspec(__device__) T tex1DGrad(cudaTextureObject_t texObject, float x, float dPdx, float dPdy)
{
   T ret;
   tex1DGrad(&ret, texObject, x, dPdx, dPdy);
   return ret;
}







static __forceinline __declspec(__device__) void tex2DGrad(char *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy)
{



#line 5778 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_indirect_functions.h"
    int4 tmp;
    asm volatile ("tex.grad.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], {%7, %8}, {%9, %10};" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(dPdx.x), "f"(dPdx.y), "f"(dPdy.x), "f"(dPdy.y));
#line 5781 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_indirect_functions.h"
    *retVal = (char)tmp.x;
}
static __forceinline __declspec(__device__) void tex2DGrad(signed char *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy)
{
   int4 tmp;
   asm volatile ("tex.grad.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], {%7, %8}, {%9, %10};" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(dPdx.x), "f"(dPdx.y), "f"(dPdy.x), "f"(dPdy.y));
   *retVal = (signed char)(tmp.x);
}

static __forceinline __declspec(__device__) void tex2DGrad(char1 *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy)
{
   int4 tmp;
   asm volatile ("tex.grad.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], {%7, %8}, {%9, %10};" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(dPdx.x), "f"(dPdx.y), "f"(dPdy.x), "f"(dPdy.y));
   *retVal = make_char1(tmp.x);
}

static __forceinline __declspec(__device__) void tex2DGrad(char2 *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy)
{
   int4 tmp;
   asm volatile ("tex.grad.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], {%7, %8}, {%9, %10};" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(dPdx.x), "f"(dPdx.y), "f"(dPdy.x), "f"(dPdy.y));
   *retVal = make_char2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void tex2DGrad(char4 *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy)
{
   int4 tmp;
   asm volatile ("tex.grad.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], {%7, %8}, {%9, %10};" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(dPdx.x), "f"(dPdx.y), "f"(dPdy.x), "f"(dPdy.y));
   *retVal = make_char4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __forceinline __declspec(__device__) void tex2DGrad(unsigned char *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy)
{
   uint4 tmp;
   asm volatile ("tex.grad.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], {%7, %8}, {%9, %10};" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(dPdx.x), "f"(dPdx.y), "f"(dPdy.x), "f"(dPdy.y));
   *retVal = (unsigned char)(tmp.x);
}

static __forceinline __declspec(__device__) void tex2DGrad(uchar1 *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy)
{
   uint4 tmp;
   asm volatile ("tex.grad.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], {%7, %8}, {%9, %10};" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(dPdx.x), "f"(dPdx.y), "f"(dPdy.x), "f"(dPdy.y));
   *retVal = make_uchar1(tmp.x);
}

static __forceinline __declspec(__device__) void tex2DGrad(uchar2 *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy)
{
   uint4 tmp;
   asm volatile ("tex.grad.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], {%7, %8}, {%9, %10};" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(dPdx.x), "f"(dPdx.y), "f"(dPdy.x), "f"(dPdy.y));
   *retVal = make_uchar2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void tex2DGrad(uchar4 *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy)
{
   uint4 tmp;
   asm volatile ("tex.grad.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], {%7, %8}, {%9, %10};" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(dPdx.x), "f"(dPdx.y), "f"(dPdy.x), "f"(dPdy.y));
   *retVal = make_uchar4(tmp.x, tmp.y, tmp.z, tmp.w);
}







static __forceinline __declspec(__device__) void tex2DGrad(short *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy)
{
   int4 tmp;
   asm volatile ("tex.grad.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], {%7, %8}, {%9, %10};" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(dPdx.x), "f"(dPdx.y), "f"(dPdy.x), "f"(dPdy.y));
   *retVal = (short)(tmp.x);
}

static __forceinline __declspec(__device__) void tex2DGrad(short1 *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy)
{
   int4 tmp;
   asm volatile ("tex.grad.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], {%7, %8}, {%9, %10};" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(dPdx.x), "f"(dPdx.y), "f"(dPdy.x), "f"(dPdy.y));
   *retVal = make_short1(tmp.x);
}

static __forceinline __declspec(__device__) void tex2DGrad(short2 *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy)
{
   int4 tmp;
   asm volatile ("tex.grad.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], {%7, %8}, {%9, %10};" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(dPdx.x), "f"(dPdx.y), "f"(dPdy.x), "f"(dPdy.y));
   *retVal = make_short2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void tex2DGrad(short4 *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy)
{
   int4 tmp;
   asm volatile ("tex.grad.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], {%7, %8}, {%9, %10};" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(dPdx.x), "f"(dPdx.y), "f"(dPdy.x), "f"(dPdy.y));
   *retVal = make_short4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __forceinline __declspec(__device__) void tex2DGrad(unsigned short *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy)
{
   uint4 tmp;
   asm volatile ("tex.grad.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], {%7, %8}, {%9, %10};" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(dPdx.x), "f"(dPdx.y), "f"(dPdy.x), "f"(dPdy.y));
   *retVal = (unsigned short)(tmp.x);
}

static __forceinline __declspec(__device__) void tex2DGrad(ushort1 *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy)
{
   uint4 tmp;
   asm volatile ("tex.grad.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], {%7, %8}, {%9, %10};" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(dPdx.x), "f"(dPdx.y), "f"(dPdy.x), "f"(dPdy.y));
   *retVal = make_ushort1(tmp.x);
}

static __forceinline __declspec(__device__) void tex2DGrad(ushort2 *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy)
{
   uint4 tmp;
   asm volatile ("tex.grad.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], {%7, %8}, {%9, %10};" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(dPdx.x), "f"(dPdx.y), "f"(dPdy.x), "f"(dPdy.y));
   *retVal = make_ushort2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void tex2DGrad(ushort4 *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy)
{
   uint4 tmp;
   asm volatile ("tex.grad.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], {%7, %8}, {%9, %10};" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(dPdx.x), "f"(dPdx.y), "f"(dPdy.x), "f"(dPdy.y));
   *retVal = make_ushort4(tmp.x, tmp.y, tmp.z, tmp.w);
}







static __forceinline __declspec(__device__) void tex2DGrad(int *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy)
{
   int4 tmp;
   asm volatile ("tex.grad.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], {%7, %8}, {%9, %10};" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(dPdx.x), "f"(dPdx.y), "f"(dPdy.x), "f"(dPdy.y));
   *retVal = (int)(tmp.x);
}

static __forceinline __declspec(__device__) void tex2DGrad(int1 *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy)
{
   int4 tmp;
   asm volatile ("tex.grad.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], {%7, %8}, {%9, %10};" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(dPdx.x), "f"(dPdx.y), "f"(dPdy.x), "f"(dPdy.y));
   *retVal = make_int1(tmp.x);
}

static __forceinline __declspec(__device__) void tex2DGrad(int2 *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy)
{
   int4 tmp;
   asm volatile ("tex.grad.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], {%7, %8}, {%9, %10};" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(dPdx.x), "f"(dPdx.y), "f"(dPdy.x), "f"(dPdy.y));
   *retVal = make_int2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void tex2DGrad(int4 *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy)
{
   int4 tmp;
   asm volatile ("tex.grad.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], {%7, %8}, {%9, %10};" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(dPdx.x), "f"(dPdx.y), "f"(dPdy.x), "f"(dPdy.y));
   *retVal = make_int4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __forceinline __declspec(__device__) void tex2DGrad(unsigned int *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy)
{
   uint4 tmp;
   asm volatile ("tex.grad.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], {%7, %8}, {%9, %10};" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(dPdx.x), "f"(dPdx.y), "f"(dPdy.x), "f"(dPdy.y));
   *retVal = (unsigned int)(tmp.x);
}

static __forceinline __declspec(__device__) void tex2DGrad(uint1 *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy)
{
   uint4 tmp;
   asm volatile ("tex.grad.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], {%7, %8}, {%9, %10};" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(dPdx.x), "f"(dPdx.y), "f"(dPdy.x), "f"(dPdy.y));
   *retVal = make_uint1(tmp.x);
}

static __forceinline __declspec(__device__) void tex2DGrad(uint2 *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy)
{
   uint4 tmp;
   asm volatile ("tex.grad.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], {%7, %8}, {%9, %10};" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(dPdx.x), "f"(dPdx.y), "f"(dPdy.x), "f"(dPdy.y));
   *retVal = make_uint2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void tex2DGrad(uint4 *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy)
{
   uint4 tmp;
   asm volatile ("tex.grad.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], {%7, %8}, {%9, %10};" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(dPdx.x), "f"(dPdx.y), "f"(dPdy.x), "f"(dPdy.y));
   *retVal = make_uint4(tmp.x, tmp.y, tmp.z, tmp.w);
}









static __forceinline __declspec(__device__) void tex2DGrad(long *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy)
{
   int4 tmp;
   asm volatile ("tex.grad.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], {%7, %8}, {%9, %10};" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(dPdx.x), "f"(dPdx.y), "f"(dPdy.x), "f"(dPdy.y));
   *retVal = (long)(tmp.x);
}

static __forceinline __declspec(__device__) void tex2DGrad(long1 *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy)
{
   int4 tmp;
   asm volatile ("tex.grad.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], {%7, %8}, {%9, %10};" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(dPdx.x), "f"(dPdx.y), "f"(dPdy.x), "f"(dPdy.y));
   *retVal = make_long1(tmp.x);
}

static __forceinline __declspec(__device__) void tex2DGrad(long2 *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy)
{
   int4 tmp;
   asm volatile ("tex.grad.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], {%7, %8}, {%9, %10};" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(dPdx.x), "f"(dPdx.y), "f"(dPdy.x), "f"(dPdy.y));
   *retVal = make_long2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void tex2DGrad(long4 *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy)
{
   int4 tmp;
   asm volatile ("tex.grad.2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], {%7, %8}, {%9, %10};" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(dPdx.x), "f"(dPdx.y), "f"(dPdy.x), "f"(dPdy.y));
   *retVal = make_long4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __forceinline __declspec(__device__) void tex2DGrad(unsigned long *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy)
{
   uint4 tmp;
   asm volatile ("tex.grad.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], {%7, %8}, {%9, %10};" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(dPdx.x), "f"(dPdx.y), "f"(dPdy.x), "f"(dPdy.y));
   *retVal = (unsigned long)(tmp.x);
}

static __forceinline __declspec(__device__) void tex2DGrad(ulong1 *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy)
{
   uint4 tmp;
   asm volatile ("tex.grad.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], {%7, %8}, {%9, %10};" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(dPdx.x), "f"(dPdx.y), "f"(dPdy.x), "f"(dPdy.y));
   *retVal = make_ulong1(tmp.x);
}

static __forceinline __declspec(__device__) void tex2DGrad(ulong2 *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy)
{
   uint4 tmp;
   asm volatile ("tex.grad.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], {%7, %8}, {%9, %10};" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(dPdx.x), "f"(dPdx.y), "f"(dPdy.x), "f"(dPdy.y));
   *retVal = make_ulong2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void tex2DGrad(ulong4 *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy)
{
   uint4 tmp;
   asm volatile ("tex.grad.2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], {%7, %8}, {%9, %10};" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(dPdx.x), "f"(dPdx.y), "f"(dPdy.x), "f"(dPdy.y));
   *retVal = make_ulong4(tmp.x, tmp.y, tmp.z, tmp.w);
}

#line 6028 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_indirect_functions.h"








static __forceinline __declspec(__device__) void tex2DGrad(float *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy)
{
   float4 tmp;
   asm volatile ("tex.grad.2d.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], {%7, %8}, {%9, %10};" : "=f"(tmp.x), "=f"(tmp.y), "=f"(tmp.z), "=f"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(dPdx.x), "f"(dPdx.y), "f"(dPdy.x), "f"(dPdy.y));
   *retVal = (float)(tmp.x);
}

static __forceinline __declspec(__device__) void tex2DGrad(float1 *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy)
{
   float4 tmp;
   asm volatile ("tex.grad.2d.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], {%7, %8}, {%9, %10};" : "=f"(tmp.x), "=f"(tmp.y), "=f"(tmp.z), "=f"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(dPdx.x), "f"(dPdx.y), "f"(dPdy.x), "f"(dPdy.y));
   *retVal = make_float1(tmp.x);
}

static __forceinline __declspec(__device__) void tex2DGrad(float2 *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy)
{
   float4 tmp;
   asm volatile ("tex.grad.2d.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], {%7, %8}, {%9, %10};" : "=f"(tmp.x), "=f"(tmp.y), "=f"(tmp.z), "=f"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(dPdx.x), "f"(dPdx.y), "f"(dPdy.x), "f"(dPdy.y));
   *retVal = make_float2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void tex2DGrad(float4 *retVal, cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy)
{
   float4 tmp;
   asm volatile ("tex.grad.2d.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], {%7, %8}, {%9, %10};" : "=f"(tmp.x), "=f"(tmp.y), "=f"(tmp.z), "=f"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(dPdx.x), "f"(dPdx.y), "f"(dPdy.x), "f"(dPdy.y));
   *retVal = make_float4(tmp.x, tmp.y, tmp.z, tmp.w);
}







template <class T>
static __forceinline __declspec(__device__) T tex2DGrad(cudaTextureObject_t texObject, float x, float y, float2 dPdx, float2 dPdy)
{
   T ret;
   tex2DGrad(&ret, texObject, x, y, dPdx, dPdy);
   return ret;
}







static __forceinline __declspec(__device__) void tex3DGrad(char *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy)
{



#line 6090 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_indirect_functions.h"
    int4 tmp;
    asm volatile ("tex.grad.3d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], {%8, %9, %10, %10}, {%11, %12, %13, %13};" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z), "f"(dPdx.x), "f"(dPdx.y), "f"(dPdx.z), "f"(dPdy.x), "f"(dPdy.y), "f"(dPdy.z));
#line 6093 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_indirect_functions.h"
    *retVal = (char)tmp.x;
}
static __forceinline __declspec(__device__) void tex3DGrad(signed char *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy)
{
   int4 tmp;
   asm volatile ("tex.grad.3d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], {%8, %9, %10, %10}, {%11, %12, %13, %13};" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z), "f"(dPdx.x), "f"(dPdx.y), "f"(dPdx.z), "f"(dPdy.x), "f"(dPdy.y), "f"(dPdy.z));
   *retVal = (signed char)(tmp.x);
}

static __forceinline __declspec(__device__) void tex3DGrad(char1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy)
{
   int4 tmp;
   asm volatile ("tex.grad.3d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], {%8, %9, %10, %10}, {%11, %12, %13, %13};" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z), "f"(dPdx.x), "f"(dPdx.y), "f"(dPdx.z), "f"(dPdy.x), "f"(dPdy.y), "f"(dPdy.z));
   *retVal = make_char1(tmp.x);
}

static __forceinline __declspec(__device__) void tex3DGrad(char2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy)
{
   int4 tmp;
   asm volatile ("tex.grad.3d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], {%8, %9, %10, %10}, {%11, %12, %13, %13};" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z), "f"(dPdx.x), "f"(dPdx.y), "f"(dPdx.z), "f"(dPdy.x), "f"(dPdy.y), "f"(dPdy.z));
   *retVal = make_char2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void tex3DGrad(char4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy)
{
   int4 tmp;
   asm volatile ("tex.grad.3d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], {%8, %9, %10, %10}, {%11, %12, %13, %13};" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z), "f"(dPdx.x), "f"(dPdx.y), "f"(dPdx.z), "f"(dPdy.x), "f"(dPdy.y), "f"(dPdy.z));
   *retVal = make_char4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __forceinline __declspec(__device__) void tex3DGrad(unsigned char *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy)
{
   uint4 tmp;
   asm volatile ("tex.grad.3d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], {%8, %9, %10, %10}, {%11, %12, %13, %13};" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z), "f"(dPdx.x), "f"(dPdx.y), "f"(dPdx.z), "f"(dPdy.x), "f"(dPdy.y), "f"(dPdy.z));
   *retVal = (unsigned char)(tmp.x);
}

static __forceinline __declspec(__device__) void tex3DGrad(uchar1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy)
{
   uint4 tmp;
   asm volatile ("tex.grad.3d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], {%8, %9, %10, %10}, {%11, %12, %13, %13};" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z), "f"(dPdx.x), "f"(dPdx.y), "f"(dPdx.z), "f"(dPdy.x), "f"(dPdy.y), "f"(dPdy.z));
   *retVal = make_uchar1(tmp.x);
}

static __forceinline __declspec(__device__) void tex3DGrad(uchar2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy)
{
   uint4 tmp;
   asm volatile ("tex.grad.3d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], {%8, %9, %10, %10}, {%11, %12, %13, %13};" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z), "f"(dPdx.x), "f"(dPdx.y), "f"(dPdx.z), "f"(dPdy.x), "f"(dPdy.y), "f"(dPdy.z));
   *retVal = make_uchar2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void tex3DGrad(uchar4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy)
{
   uint4 tmp;
   asm volatile ("tex.grad.3d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], {%8, %9, %10, %10}, {%11, %12, %13, %13};" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z), "f"(dPdx.x), "f"(dPdx.y), "f"(dPdx.z), "f"(dPdy.x), "f"(dPdy.y), "f"(dPdy.z));
   *retVal = make_uchar4(tmp.x, tmp.y, tmp.z, tmp.w);
}







static __forceinline __declspec(__device__) void tex3DGrad(short *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy)
{
   int4 tmp;
   asm volatile ("tex.grad.3d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], {%8, %9, %10, %10}, {%11, %12, %13, %13};" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z), "f"(dPdx.x), "f"(dPdx.y), "f"(dPdx.z), "f"(dPdy.x), "f"(dPdy.y), "f"(dPdy.z));
   *retVal = (short)(tmp.x);
}

static __forceinline __declspec(__device__) void tex3DGrad(short1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy)
{
   int4 tmp;
   asm volatile ("tex.grad.3d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], {%8, %9, %10, %10}, {%11, %12, %13, %13};" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z), "f"(dPdx.x), "f"(dPdx.y), "f"(dPdx.z), "f"(dPdy.x), "f"(dPdy.y), "f"(dPdy.z));
   *retVal = make_short1(tmp.x);
}

static __forceinline __declspec(__device__) void tex3DGrad(short2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy)
{
   int4 tmp;
   asm volatile ("tex.grad.3d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], {%8, %9, %10, %10}, {%11, %12, %13, %13};" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z), "f"(dPdx.x), "f"(dPdx.y), "f"(dPdx.z), "f"(dPdy.x), "f"(dPdy.y), "f"(dPdy.z));
   *retVal = make_short2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void tex3DGrad(short4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy)
{
   int4 tmp;
   asm volatile ("tex.grad.3d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], {%8, %9, %10, %10}, {%11, %12, %13, %13};" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z), "f"(dPdx.x), "f"(dPdx.y), "f"(dPdx.z), "f"(dPdy.x), "f"(dPdy.y), "f"(dPdy.z));
   *retVal = make_short4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __forceinline __declspec(__device__) void tex3DGrad(unsigned short *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy)
{
   uint4 tmp;
   asm volatile ("tex.grad.3d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], {%8, %9, %10, %10}, {%11, %12, %13, %13};" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z), "f"(dPdx.x), "f"(dPdx.y), "f"(dPdx.z), "f"(dPdy.x), "f"(dPdy.y), "f"(dPdy.z));
   *retVal = (unsigned short)(tmp.x);
}

static __forceinline __declspec(__device__) void tex3DGrad(ushort1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy)
{
   uint4 tmp;
   asm volatile ("tex.grad.3d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], {%8, %9, %10, %10}, {%11, %12, %13, %13};" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z), "f"(dPdx.x), "f"(dPdx.y), "f"(dPdx.z), "f"(dPdy.x), "f"(dPdy.y), "f"(dPdy.z));
   *retVal = make_ushort1(tmp.x);
}

static __forceinline __declspec(__device__) void tex3DGrad(ushort2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy)
{
   uint4 tmp;
   asm volatile ("tex.grad.3d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], {%8, %9, %10, %10}, {%11, %12, %13, %13};" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z), "f"(dPdx.x), "f"(dPdx.y), "f"(dPdx.z), "f"(dPdy.x), "f"(dPdy.y), "f"(dPdy.z));
   *retVal = make_ushort2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void tex3DGrad(ushort4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy)
{
   uint4 tmp;
   asm volatile ("tex.grad.3d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], {%8, %9, %10, %10}, {%11, %12, %13, %13};" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z), "f"(dPdx.x), "f"(dPdx.y), "f"(dPdx.z), "f"(dPdy.x), "f"(dPdy.y), "f"(dPdy.z));
   *retVal = make_ushort4(tmp.x, tmp.y, tmp.z, tmp.w);
}







static __forceinline __declspec(__device__) void tex3DGrad(int *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy)
{
   int4 tmp;
   asm volatile ("tex.grad.3d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], {%8, %9, %10, %10}, {%11, %12, %13, %13};" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z), "f"(dPdx.x), "f"(dPdx.y), "f"(dPdx.z), "f"(dPdy.x), "f"(dPdy.y), "f"(dPdy.z));
   *retVal = (int)(tmp.x);
}

static __forceinline __declspec(__device__) void tex3DGrad(int1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy)
{
   int4 tmp;
   asm volatile ("tex.grad.3d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], {%8, %9, %10, %10}, {%11, %12, %13, %13};" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z), "f"(dPdx.x), "f"(dPdx.y), "f"(dPdx.z), "f"(dPdy.x), "f"(dPdy.y), "f"(dPdy.z));
   *retVal = make_int1(tmp.x);
}

static __forceinline __declspec(__device__) void tex3DGrad(int2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy)
{
   int4 tmp;
   asm volatile ("tex.grad.3d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], {%8, %9, %10, %10}, {%11, %12, %13, %13};" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z), "f"(dPdx.x), "f"(dPdx.y), "f"(dPdx.z), "f"(dPdy.x), "f"(dPdy.y), "f"(dPdy.z));
   *retVal = make_int2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void tex3DGrad(int4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy)
{
   int4 tmp;
   asm volatile ("tex.grad.3d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], {%8, %9, %10, %10}, {%11, %12, %13, %13};" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z), "f"(dPdx.x), "f"(dPdx.y), "f"(dPdx.z), "f"(dPdy.x), "f"(dPdy.y), "f"(dPdy.z));
   *retVal = make_int4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __forceinline __declspec(__device__) void tex3DGrad(unsigned int *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy)
{
   uint4 tmp;
   asm volatile ("tex.grad.3d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], {%8, %9, %10, %10}, {%11, %12, %13, %13};" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z), "f"(dPdx.x), "f"(dPdx.y), "f"(dPdx.z), "f"(dPdy.x), "f"(dPdy.y), "f"(dPdy.z));
   *retVal = (unsigned int)(tmp.x);
}

static __forceinline __declspec(__device__) void tex3DGrad(uint1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy)
{
   uint4 tmp;
   asm volatile ("tex.grad.3d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], {%8, %9, %10, %10}, {%11, %12, %13, %13};" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z), "f"(dPdx.x), "f"(dPdx.y), "f"(dPdx.z), "f"(dPdy.x), "f"(dPdy.y), "f"(dPdy.z));
   *retVal = make_uint1(tmp.x);
}

static __forceinline __declspec(__device__) void tex3DGrad(uint2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy)
{
   uint4 tmp;
   asm volatile ("tex.grad.3d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], {%8, %9, %10, %10}, {%11, %12, %13, %13};" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z), "f"(dPdx.x), "f"(dPdx.y), "f"(dPdx.z), "f"(dPdy.x), "f"(dPdy.y), "f"(dPdy.z));
   *retVal = make_uint2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void tex3DGrad(uint4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy)
{
   uint4 tmp;
   asm volatile ("tex.grad.3d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], {%8, %9, %10, %10}, {%11, %12, %13, %13};" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z), "f"(dPdx.x), "f"(dPdx.y), "f"(dPdx.z), "f"(dPdy.x), "f"(dPdy.y), "f"(dPdy.z));
   *retVal = make_uint4(tmp.x, tmp.y, tmp.z, tmp.w);
}









static __forceinline __declspec(__device__) void tex3DGrad(long *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy)
{
   int4 tmp;
   asm volatile ("tex.grad.3d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], {%8, %9, %10, %10}, {%11, %12, %13, %13};" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z), "f"(dPdx.x), "f"(dPdx.y), "f"(dPdx.z), "f"(dPdy.x), "f"(dPdy.y), "f"(dPdy.z));
   *retVal = (long)(tmp.x);
}

static __forceinline __declspec(__device__) void tex3DGrad(long1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy)
{
   int4 tmp;
   asm volatile ("tex.grad.3d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], {%8, %9, %10, %10}, {%11, %12, %13, %13};" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z), "f"(dPdx.x), "f"(dPdx.y), "f"(dPdx.z), "f"(dPdy.x), "f"(dPdy.y), "f"(dPdy.z));
   *retVal = make_long1(tmp.x);
}

static __forceinline __declspec(__device__) void tex3DGrad(long2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy)
{
   int4 tmp;
   asm volatile ("tex.grad.3d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], {%8, %9, %10, %10}, {%11, %12, %13, %13};" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z), "f"(dPdx.x), "f"(dPdx.y), "f"(dPdx.z), "f"(dPdy.x), "f"(dPdy.y), "f"(dPdy.z));
   *retVal = make_long2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void tex3DGrad(long4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy)
{
   int4 tmp;
   asm volatile ("tex.grad.3d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], {%8, %9, %10, %10}, {%11, %12, %13, %13};" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z), "f"(dPdx.x), "f"(dPdx.y), "f"(dPdx.z), "f"(dPdy.x), "f"(dPdy.y), "f"(dPdy.z));
   *retVal = make_long4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __forceinline __declspec(__device__) void tex3DGrad(unsigned long *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy)
{
   uint4 tmp;
   asm volatile ("tex.grad.3d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], {%8, %9, %10, %10}, {%11, %12, %13, %13};" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z), "f"(dPdx.x), "f"(dPdx.y), "f"(dPdx.z), "f"(dPdy.x), "f"(dPdy.y), "f"(dPdy.z));
   *retVal = (unsigned long)(tmp.x);
}

static __forceinline __declspec(__device__) void tex3DGrad(ulong1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy)
{
   uint4 tmp;
   asm volatile ("tex.grad.3d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], {%8, %9, %10, %10}, {%11, %12, %13, %13};" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z), "f"(dPdx.x), "f"(dPdx.y), "f"(dPdx.z), "f"(dPdy.x), "f"(dPdy.y), "f"(dPdy.z));
   *retVal = make_ulong1(tmp.x);
}

static __forceinline __declspec(__device__) void tex3DGrad(ulong2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy)
{
   uint4 tmp;
   asm volatile ("tex.grad.3d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], {%8, %9, %10, %10}, {%11, %12, %13, %13};" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z), "f"(dPdx.x), "f"(dPdx.y), "f"(dPdx.z), "f"(dPdy.x), "f"(dPdy.y), "f"(dPdy.z));
   *retVal = make_ulong2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void tex3DGrad(ulong4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy)
{
   uint4 tmp;
   asm volatile ("tex.grad.3d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], {%8, %9, %10, %10}, {%11, %12, %13, %13};" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z), "f"(dPdx.x), "f"(dPdx.y), "f"(dPdx.z), "f"(dPdy.x), "f"(dPdy.y), "f"(dPdy.z));
   *retVal = make_ulong4(tmp.x, tmp.y, tmp.z, tmp.w);
}

#line 6340 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_indirect_functions.h"








static __forceinline __declspec(__device__) void tex3DGrad(float *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy)
{
   float4 tmp;
   asm volatile ("tex.grad.3d.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], {%8, %9, %10, %10}, {%11, %12, %13, %13};" : "=f"(tmp.x), "=f"(tmp.y), "=f"(tmp.z), "=f"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z), "f"(dPdx.x), "f"(dPdx.y), "f"(dPdx.z), "f"(dPdy.x), "f"(dPdy.y), "f"(dPdy.z));
   *retVal = (float)(tmp.x);
}

static __forceinline __declspec(__device__) void tex3DGrad(float1 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy)
{
   float4 tmp;
   asm volatile ("tex.grad.3d.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], {%8, %9, %10, %10}, {%11, %12, %13, %13};" : "=f"(tmp.x), "=f"(tmp.y), "=f"(tmp.z), "=f"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z), "f"(dPdx.x), "f"(dPdx.y), "f"(dPdx.z), "f"(dPdy.x), "f"(dPdy.y), "f"(dPdy.z));
   *retVal = make_float1(tmp.x);
}

static __forceinline __declspec(__device__) void tex3DGrad(float2 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy)
{
   float4 tmp;
   asm volatile ("tex.grad.3d.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], {%8, %9, %10, %10}, {%11, %12, %13, %13};" : "=f"(tmp.x), "=f"(tmp.y), "=f"(tmp.z), "=f"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z), "f"(dPdx.x), "f"(dPdx.y), "f"(dPdx.z), "f"(dPdy.x), "f"(dPdy.y), "f"(dPdy.z));
   *retVal = make_float2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void tex3DGrad(float4 *retVal, cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy)
{
   float4 tmp;
   asm volatile ("tex.grad.3d.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], {%8, %9, %10, %10}, {%11, %12, %13, %13};" : "=f"(tmp.x), "=f"(tmp.y), "=f"(tmp.z), "=f"(tmp.w) : "l"(texObject), "f"(x), "f"(y), "f"(z), "f"(dPdx.x), "f"(dPdx.y), "f"(dPdx.z), "f"(dPdy.x), "f"(dPdy.y), "f"(dPdy.z));
   *retVal = make_float4(tmp.x, tmp.y, tmp.z, tmp.w);
}







template <class T>
static __forceinline __declspec(__device__) T tex3DGrad(cudaTextureObject_t texObject, float x, float y, float z, float4 dPdx, float4 dPdy)
{
   T ret;
   tex3DGrad(&ret, texObject, x, y, z, dPdx, dPdy);
   return ret;
}







static __forceinline __declspec(__device__) void tex1DLayeredGrad(char *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy)
{



#line 6402 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_indirect_functions.h"
    int4 tmp;
    asm volatile ("tex.grad.a1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], {%7}, {%8};" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(dPdx), "f"(dPdy));
#line 6405 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_indirect_functions.h"
    *retVal = (char)tmp.x;
}
static __forceinline __declspec(__device__) void tex1DLayeredGrad(signed char *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy)
{
   int4 tmp;
   asm volatile ("tex.grad.a1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], {%7}, {%8};" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(dPdx), "f"(dPdy));
   *retVal = (signed char)(tmp.x);
}

static __forceinline __declspec(__device__) void tex1DLayeredGrad(char1 *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy)
{
   int4 tmp;
   asm volatile ("tex.grad.a1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], {%7}, {%8};" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(dPdx), "f"(dPdy));
   *retVal = make_char1(tmp.x);
}

static __forceinline __declspec(__device__) void tex1DLayeredGrad(char2 *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy)
{
   int4 tmp;
   asm volatile ("tex.grad.a1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], {%7}, {%8};" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(dPdx), "f"(dPdy));
   *retVal = make_char2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void tex1DLayeredGrad(char4 *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy)
{
   int4 tmp;
   asm volatile ("tex.grad.a1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], {%7}, {%8};" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(dPdx), "f"(dPdy));
   *retVal = make_char4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __forceinline __declspec(__device__) void tex1DLayeredGrad(unsigned char *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy)
{
   uint4 tmp;
   asm volatile ("tex.grad.a1d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], {%7}, {%8};" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(dPdx), "f"(dPdy));
   *retVal = (unsigned char)(tmp.x);
}

static __forceinline __declspec(__device__) void tex1DLayeredGrad(uchar1 *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy)
{
   uint4 tmp;
   asm volatile ("tex.grad.a1d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], {%7}, {%8};" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(dPdx), "f"(dPdy));
   *retVal = make_uchar1(tmp.x);
}

static __forceinline __declspec(__device__) void tex1DLayeredGrad(uchar2 *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy)
{
   uint4 tmp;
   asm volatile ("tex.grad.a1d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], {%7}, {%8};" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(dPdx), "f"(dPdy));
   *retVal = make_uchar2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void tex1DLayeredGrad(uchar4 *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy)
{
   uint4 tmp;
   asm volatile ("tex.grad.a1d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], {%7}, {%8};" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(dPdx), "f"(dPdy));
   *retVal = make_uchar4(tmp.x, tmp.y, tmp.z, tmp.w);
}







static __forceinline __declspec(__device__) void tex1DLayeredGrad(short *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy)
{
   int4 tmp;
   asm volatile ("tex.grad.a1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], {%7}, {%8};" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(dPdx), "f"(dPdy));
   *retVal = (short)(tmp.x);
}

static __forceinline __declspec(__device__) void tex1DLayeredGrad(short1 *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy)
{
   int4 tmp;
   asm volatile ("tex.grad.a1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], {%7}, {%8};" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(dPdx), "f"(dPdy));
   *retVal = make_short1(tmp.x);
}

static __forceinline __declspec(__device__) void tex1DLayeredGrad(short2 *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy)
{
   int4 tmp;
   asm volatile ("tex.grad.a1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], {%7}, {%8};" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(dPdx), "f"(dPdy));
   *retVal = make_short2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void tex1DLayeredGrad(short4 *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy)
{
   int4 tmp;
   asm volatile ("tex.grad.a1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], {%7}, {%8};" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(dPdx), "f"(dPdy));
   *retVal = make_short4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __forceinline __declspec(__device__) void tex1DLayeredGrad(unsigned short *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy)
{
   uint4 tmp;
   asm volatile ("tex.grad.a1d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], {%7}, {%8};" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(dPdx), "f"(dPdy));
   *retVal = (unsigned short)(tmp.x);
}

static __forceinline __declspec(__device__) void tex1DLayeredGrad(ushort1 *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy)
{
   uint4 tmp;
   asm volatile ("tex.grad.a1d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], {%7}, {%8};" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(dPdx), "f"(dPdy));
   *retVal = make_ushort1(tmp.x);
}

static __forceinline __declspec(__device__) void tex1DLayeredGrad(ushort2 *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy)
{
   uint4 tmp;
   asm volatile ("tex.grad.a1d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], {%7}, {%8};" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(dPdx), "f"(dPdy));
   *retVal = make_ushort2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void tex1DLayeredGrad(ushort4 *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy)
{
   uint4 tmp;
   asm volatile ("tex.grad.a1d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], {%7}, {%8};" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(dPdx), "f"(dPdy));
   *retVal = make_ushort4(tmp.x, tmp.y, tmp.z, tmp.w);
}







static __forceinline __declspec(__device__) void tex1DLayeredGrad(int *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy)
{
   int4 tmp;
   asm volatile ("tex.grad.a1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], {%7}, {%8};" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(dPdx), "f"(dPdy));
   *retVal = (int)(tmp.x);
}

static __forceinline __declspec(__device__) void tex1DLayeredGrad(int1 *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy)
{
   int4 tmp;
   asm volatile ("tex.grad.a1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], {%7}, {%8};" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(dPdx), "f"(dPdy));
   *retVal = make_int1(tmp.x);
}

static __forceinline __declspec(__device__) void tex1DLayeredGrad(int2 *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy)
{
   int4 tmp;
   asm volatile ("tex.grad.a1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], {%7}, {%8};" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(dPdx), "f"(dPdy));
   *retVal = make_int2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void tex1DLayeredGrad(int4 *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy)
{
   int4 tmp;
   asm volatile ("tex.grad.a1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], {%7}, {%8};" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(dPdx), "f"(dPdy));
   *retVal = make_int4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __forceinline __declspec(__device__) void tex1DLayeredGrad(unsigned int *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy)
{
   uint4 tmp;
   asm volatile ("tex.grad.a1d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], {%7}, {%8};" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(dPdx), "f"(dPdy));
   *retVal = (unsigned int)(tmp.x);
}

static __forceinline __declspec(__device__) void tex1DLayeredGrad(uint1 *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy)
{
   uint4 tmp;
   asm volatile ("tex.grad.a1d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], {%7}, {%8};" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(dPdx), "f"(dPdy));
   *retVal = make_uint1(tmp.x);
}

static __forceinline __declspec(__device__) void tex1DLayeredGrad(uint2 *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy)
{
   uint4 tmp;
   asm volatile ("tex.grad.a1d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], {%7}, {%8};" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(dPdx), "f"(dPdy));
   *retVal = make_uint2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void tex1DLayeredGrad(uint4 *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy)
{
   uint4 tmp;
   asm volatile ("tex.grad.a1d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], {%7}, {%8};" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(dPdx), "f"(dPdy));
   *retVal = make_uint4(tmp.x, tmp.y, tmp.z, tmp.w);
}









static __forceinline __declspec(__device__) void tex1DLayeredGrad(long *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy)
{
   int4 tmp;
   asm volatile ("tex.grad.a1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], {%7}, {%8};" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(dPdx), "f"(dPdy));
   *retVal = (long)(tmp.x);
}

static __forceinline __declspec(__device__) void tex1DLayeredGrad(long1 *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy)
{
   int4 tmp;
   asm volatile ("tex.grad.a1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], {%7}, {%8};" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(dPdx), "f"(dPdy));
   *retVal = make_long1(tmp.x);
}

static __forceinline __declspec(__device__) void tex1DLayeredGrad(long2 *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy)
{
   int4 tmp;
   asm volatile ("tex.grad.a1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], {%7}, {%8};" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(dPdx), "f"(dPdy));
   *retVal = make_long2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void tex1DLayeredGrad(long4 *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy)
{
   int4 tmp;
   asm volatile ("tex.grad.a1d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], {%7}, {%8};" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(dPdx), "f"(dPdy));
   *retVal = make_long4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __forceinline __declspec(__device__) void tex1DLayeredGrad(unsigned long *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy)
{
   uint4 tmp;
   asm volatile ("tex.grad.a1d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], {%7}, {%8};" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(dPdx), "f"(dPdy));
   *retVal = (unsigned long)(tmp.x);
}

static __forceinline __declspec(__device__) void tex1DLayeredGrad(ulong1 *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy)
{
   uint4 tmp;
   asm volatile ("tex.grad.a1d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], {%7}, {%8};" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(dPdx), "f"(dPdy));
   *retVal = make_ulong1(tmp.x);
}

static __forceinline __declspec(__device__) void tex1DLayeredGrad(ulong2 *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy)
{
   uint4 tmp;
   asm volatile ("tex.grad.a1d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], {%7}, {%8};" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(dPdx), "f"(dPdy));
   *retVal = make_ulong2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void tex1DLayeredGrad(ulong4 *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy)
{
   uint4 tmp;
   asm volatile ("tex.grad.a1d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], {%7}, {%8};" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(dPdx), "f"(dPdy));
   *retVal = make_ulong4(tmp.x, tmp.y, tmp.z, tmp.w);
}

#line 6652 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_indirect_functions.h"








static __forceinline __declspec(__device__) void tex1DLayeredGrad(float *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy)
{
   float4 tmp;
   asm volatile ("tex.grad.a1d.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], {%7}, {%8};" : "=f"(tmp.x), "=f"(tmp.y), "=f"(tmp.z), "=f"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(dPdx), "f"(dPdy));
   *retVal = (float)(tmp.x);
}

static __forceinline __declspec(__device__) void tex1DLayeredGrad(float1 *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy)
{
   float4 tmp;
   asm volatile ("tex.grad.a1d.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], {%7}, {%8};" : "=f"(tmp.x), "=f"(tmp.y), "=f"(tmp.z), "=f"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(dPdx), "f"(dPdy));
   *retVal = make_float1(tmp.x);
}

static __forceinline __declspec(__device__) void tex1DLayeredGrad(float2 *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy)
{
   float4 tmp;
   asm volatile ("tex.grad.a1d.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], {%7}, {%8};" : "=f"(tmp.x), "=f"(tmp.y), "=f"(tmp.z), "=f"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(dPdx), "f"(dPdy));
   *retVal = make_float2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void tex1DLayeredGrad(float4 *retVal, cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy)
{
   float4 tmp;
   asm volatile ("tex.grad.a1d.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5, %6}], {%7}, {%8};" : "=f"(tmp.x), "=f"(tmp.y), "=f"(tmp.z), "=f"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(dPdx), "f"(dPdy));
   *retVal = make_float4(tmp.x, tmp.y, tmp.z, tmp.w);
}







template <class T>
static __forceinline __declspec(__device__) T tex1DLayeredGrad(cudaTextureObject_t texObject, float x, int layer, float dPdx, float dPdy)
{
   T ret;
   tex1DLayeredGrad(&ret, texObject, x, layer, dPdx, dPdy);
   return ret;
}







static __forceinline __declspec(__device__) void tex2DLayeredGrad(char *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy)
{



#line 6714 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_indirect_functions.h"
    int4 tmp;
    asm volatile ("tex.grad.a2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], {%8, %9}, {%10, %11};" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y), "f"(dPdx.x), "f"(dPdx.y), "f"(dPdy.x), "f"(dPdy.y));
#line 6717 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_indirect_functions.h"
    *retVal = (char)tmp.x;
}
static __forceinline __declspec(__device__) void tex2DLayeredGrad(signed char *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
   int4 tmp;
   asm volatile ("tex.grad.a2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], {%8, %9}, {%10, %11};" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y), "f"(dPdx.x), "f"(dPdx.y), "f"(dPdy.x), "f"(dPdy.y));
   *retVal = (signed char)(tmp.x);
}

static __forceinline __declspec(__device__) void tex2DLayeredGrad(char1 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
   int4 tmp;
   asm volatile ("tex.grad.a2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], {%8, %9}, {%10, %11};" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y), "f"(dPdx.x), "f"(dPdx.y), "f"(dPdy.x), "f"(dPdy.y));
   *retVal = make_char1(tmp.x);
}

static __forceinline __declspec(__device__) void tex2DLayeredGrad(char2 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
   int4 tmp;
   asm volatile ("tex.grad.a2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], {%8, %9}, {%10, %11};" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y), "f"(dPdx.x), "f"(dPdx.y), "f"(dPdy.x), "f"(dPdy.y));
   *retVal = make_char2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void tex2DLayeredGrad(char4 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
   int4 tmp;
   asm volatile ("tex.grad.a2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], {%8, %9}, {%10, %11};" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y), "f"(dPdx.x), "f"(dPdx.y), "f"(dPdy.x), "f"(dPdy.y));
   *retVal = make_char4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __forceinline __declspec(__device__) void tex2DLayeredGrad(unsigned char *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
   uint4 tmp;
   asm volatile ("tex.grad.a2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], {%8, %9}, {%10, %11};" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y), "f"(dPdx.x), "f"(dPdx.y), "f"(dPdy.x), "f"(dPdy.y));
   *retVal = (unsigned char)(tmp.x);
}

static __forceinline __declspec(__device__) void tex2DLayeredGrad(uchar1 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
   uint4 tmp;
   asm volatile ("tex.grad.a2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], {%8, %9}, {%10, %11};" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y), "f"(dPdx.x), "f"(dPdx.y), "f"(dPdy.x), "f"(dPdy.y));
   *retVal = make_uchar1(tmp.x);
}

static __forceinline __declspec(__device__) void tex2DLayeredGrad(uchar2 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
   uint4 tmp;
   asm volatile ("tex.grad.a2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], {%8, %9}, {%10, %11};" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y), "f"(dPdx.x), "f"(dPdx.y), "f"(dPdy.x), "f"(dPdy.y));
   *retVal = make_uchar2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void tex2DLayeredGrad(uchar4 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
   uint4 tmp;
   asm volatile ("tex.grad.a2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], {%8, %9}, {%10, %11};" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y), "f"(dPdx.x), "f"(dPdx.y), "f"(dPdy.x), "f"(dPdy.y));
   *retVal = make_uchar4(tmp.x, tmp.y, tmp.z, tmp.w);
}







static __forceinline __declspec(__device__) void tex2DLayeredGrad(short *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
   int4 tmp;
   asm volatile ("tex.grad.a2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], {%8, %9}, {%10, %11};" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y), "f"(dPdx.x), "f"(dPdx.y), "f"(dPdy.x), "f"(dPdy.y));
   *retVal = (short)(tmp.x);
}

static __forceinline __declspec(__device__) void tex2DLayeredGrad(short1 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
   int4 tmp;
   asm volatile ("tex.grad.a2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], {%8, %9}, {%10, %11};" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y), "f"(dPdx.x), "f"(dPdx.y), "f"(dPdy.x), "f"(dPdy.y));
   *retVal = make_short1(tmp.x);
}

static __forceinline __declspec(__device__) void tex2DLayeredGrad(short2 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
   int4 tmp;
   asm volatile ("tex.grad.a2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], {%8, %9}, {%10, %11};" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y), "f"(dPdx.x), "f"(dPdx.y), "f"(dPdy.x), "f"(dPdy.y));
   *retVal = make_short2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void tex2DLayeredGrad(short4 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
   int4 tmp;
   asm volatile ("tex.grad.a2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], {%8, %9}, {%10, %11};" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y), "f"(dPdx.x), "f"(dPdx.y), "f"(dPdy.x), "f"(dPdy.y));
   *retVal = make_short4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __forceinline __declspec(__device__) void tex2DLayeredGrad(unsigned short *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
   uint4 tmp;
   asm volatile ("tex.grad.a2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], {%8, %9}, {%10, %11};" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y), "f"(dPdx.x), "f"(dPdx.y), "f"(dPdy.x), "f"(dPdy.y));
   *retVal = (unsigned short)(tmp.x);
}

static __forceinline __declspec(__device__) void tex2DLayeredGrad(ushort1 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
   uint4 tmp;
   asm volatile ("tex.grad.a2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], {%8, %9}, {%10, %11};" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y), "f"(dPdx.x), "f"(dPdx.y), "f"(dPdy.x), "f"(dPdy.y));
   *retVal = make_ushort1(tmp.x);
}

static __forceinline __declspec(__device__) void tex2DLayeredGrad(ushort2 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
   uint4 tmp;
   asm volatile ("tex.grad.a2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], {%8, %9}, {%10, %11};" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y), "f"(dPdx.x), "f"(dPdx.y), "f"(dPdy.x), "f"(dPdy.y));
   *retVal = make_ushort2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void tex2DLayeredGrad(ushort4 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
   uint4 tmp;
   asm volatile ("tex.grad.a2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], {%8, %9}, {%10, %11};" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y), "f"(dPdx.x), "f"(dPdx.y), "f"(dPdy.x), "f"(dPdy.y));
   *retVal = make_ushort4(tmp.x, tmp.y, tmp.z, tmp.w);
}







static __forceinline __declspec(__device__) void tex2DLayeredGrad(int *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
   int4 tmp;
   asm volatile ("tex.grad.a2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], {%8, %9}, {%10, %11};" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y), "f"(dPdx.x), "f"(dPdx.y), "f"(dPdy.x), "f"(dPdy.y));
   *retVal = (int)(tmp.x);
}

static __forceinline __declspec(__device__) void tex2DLayeredGrad(int1 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
   int4 tmp;
   asm volatile ("tex.grad.a2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], {%8, %9}, {%10, %11};" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y), "f"(dPdx.x), "f"(dPdx.y), "f"(dPdy.x), "f"(dPdy.y));
   *retVal = make_int1(tmp.x);
}

static __forceinline __declspec(__device__) void tex2DLayeredGrad(int2 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
   int4 tmp;
   asm volatile ("tex.grad.a2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], {%8, %9}, {%10, %11};" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y), "f"(dPdx.x), "f"(dPdx.y), "f"(dPdy.x), "f"(dPdy.y));
   *retVal = make_int2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void tex2DLayeredGrad(int4 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
   int4 tmp;
   asm volatile ("tex.grad.a2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], {%8, %9}, {%10, %11};" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y), "f"(dPdx.x), "f"(dPdx.y), "f"(dPdy.x), "f"(dPdy.y));
   *retVal = make_int4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __forceinline __declspec(__device__) void tex2DLayeredGrad(unsigned int *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
   uint4 tmp;
   asm volatile ("tex.grad.a2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], {%8, %9}, {%10, %11};" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y), "f"(dPdx.x), "f"(dPdx.y), "f"(dPdy.x), "f"(dPdy.y));
   *retVal = (unsigned int)(tmp.x);
}

static __forceinline __declspec(__device__) void tex2DLayeredGrad(uint1 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
   uint4 tmp;
   asm volatile ("tex.grad.a2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], {%8, %9}, {%10, %11};" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y), "f"(dPdx.x), "f"(dPdx.y), "f"(dPdy.x), "f"(dPdy.y));
   *retVal = make_uint1(tmp.x);
}

static __forceinline __declspec(__device__) void tex2DLayeredGrad(uint2 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
   uint4 tmp;
   asm volatile ("tex.grad.a2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], {%8, %9}, {%10, %11};" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y), "f"(dPdx.x), "f"(dPdx.y), "f"(dPdy.x), "f"(dPdy.y));
   *retVal = make_uint2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void tex2DLayeredGrad(uint4 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
   uint4 tmp;
   asm volatile ("tex.grad.a2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], {%8, %9}, {%10, %11};" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y), "f"(dPdx.x), "f"(dPdx.y), "f"(dPdy.x), "f"(dPdy.y));
   *retVal = make_uint4(tmp.x, tmp.y, tmp.z, tmp.w);
}









static __forceinline __declspec(__device__) void tex2DLayeredGrad(long *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
   int4 tmp;
   asm volatile ("tex.grad.a2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], {%8, %9}, {%10, %11};" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y), "f"(dPdx.x), "f"(dPdx.y), "f"(dPdy.x), "f"(dPdy.y));
   *retVal = (long)(tmp.x);
}

static __forceinline __declspec(__device__) void tex2DLayeredGrad(long1 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
   int4 tmp;
   asm volatile ("tex.grad.a2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], {%8, %9}, {%10, %11};" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y), "f"(dPdx.x), "f"(dPdx.y), "f"(dPdy.x), "f"(dPdy.y));
   *retVal = make_long1(tmp.x);
}

static __forceinline __declspec(__device__) void tex2DLayeredGrad(long2 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
   int4 tmp;
   asm volatile ("tex.grad.a2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], {%8, %9}, {%10, %11};" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y), "f"(dPdx.x), "f"(dPdx.y), "f"(dPdy.x), "f"(dPdy.y));
   *retVal = make_long2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void tex2DLayeredGrad(long4 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
   int4 tmp;
   asm volatile ("tex.grad.a2d.v4.s32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], {%8, %9}, {%10, %11};" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y), "f"(dPdx.x), "f"(dPdx.y), "f"(dPdy.x), "f"(dPdy.y));
   *retVal = make_long4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __forceinline __declspec(__device__) void tex2DLayeredGrad(unsigned long *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
   uint4 tmp;
   asm volatile ("tex.grad.a2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], {%8, %9}, {%10, %11};" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y), "f"(dPdx.x), "f"(dPdx.y), "f"(dPdy.x), "f"(dPdy.y));
   *retVal = (unsigned long)(tmp.x);
}

static __forceinline __declspec(__device__) void tex2DLayeredGrad(ulong1 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
   uint4 tmp;
   asm volatile ("tex.grad.a2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], {%8, %9}, {%10, %11};" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y), "f"(dPdx.x), "f"(dPdx.y), "f"(dPdy.x), "f"(dPdy.y));
   *retVal = make_ulong1(tmp.x);
}

static __forceinline __declspec(__device__) void tex2DLayeredGrad(ulong2 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
   uint4 tmp;
   asm volatile ("tex.grad.a2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], {%8, %9}, {%10, %11};" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y), "f"(dPdx.x), "f"(dPdx.y), "f"(dPdy.x), "f"(dPdy.y));
   *retVal = make_ulong2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void tex2DLayeredGrad(ulong4 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
   uint4 tmp;
   asm volatile ("tex.grad.a2d.v4.u32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], {%8, %9}, {%10, %11};" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y), "f"(dPdx.x), "f"(dPdx.y), "f"(dPdy.x), "f"(dPdy.y));
   *retVal = make_ulong4(tmp.x, tmp.y, tmp.z, tmp.w);
}

#line 6964 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_indirect_functions.h"








static __forceinline __declspec(__device__) void tex2DLayeredGrad(float *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
   float4 tmp;
   asm volatile ("tex.grad.a2d.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], {%8, %9}, {%10, %11};" : "=f"(tmp.x), "=f"(tmp.y), "=f"(tmp.z), "=f"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y), "f"(dPdx.x), "f"(dPdx.y), "f"(dPdy.x), "f"(dPdy.y));
   *retVal = (float)(tmp.x);
}

static __forceinline __declspec(__device__) void tex2DLayeredGrad(float1 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
   float4 tmp;
   asm volatile ("tex.grad.a2d.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], {%8, %9}, {%10, %11};" : "=f"(tmp.x), "=f"(tmp.y), "=f"(tmp.z), "=f"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y), "f"(dPdx.x), "f"(dPdx.y), "f"(dPdy.x), "f"(dPdy.y));
   *retVal = make_float1(tmp.x);
}

static __forceinline __declspec(__device__) void tex2DLayeredGrad(float2 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
   float4 tmp;
   asm volatile ("tex.grad.a2d.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], {%8, %9}, {%10, %11};" : "=f"(tmp.x), "=f"(tmp.y), "=f"(tmp.z), "=f"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y), "f"(dPdx.x), "f"(dPdx.y), "f"(dPdy.x), "f"(dPdy.y));
   *retVal = make_float2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void tex2DLayeredGrad(float4 *retVal, cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
   float4 tmp;
   asm volatile ("tex.grad.a2d.v4.f32.f32 {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}], {%8, %9}, {%10, %11};" : "=f"(tmp.x), "=f"(tmp.y), "=f"(tmp.z), "=f"(tmp.w) : "l"(texObject), "r"(layer), "f"(x), "f"(y), "f"(dPdx.x), "f"(dPdx.y), "f"(dPdy.x), "f"(dPdy.y));
   *retVal = make_float4(tmp.x, tmp.y, tmp.z, tmp.w);
}







template <class T>
static __forceinline __declspec(__device__) T tex2DLayeredGrad(cudaTextureObject_t texObject, float x, float y, int layer, float2 dPdx, float2 dPdy)
{
   T ret;
   tex2DLayeredGrad(&ret, texObject, x, y, layer, dPdx, dPdy);
   return ret;
}

#line 7015 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_indirect_functions.h"

#line 7017 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_indirect_functions.h"

#line 7019 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_indirect_functions.h"



#line 9418 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\device_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\surface_indirect_functions.h"


























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\builtin_types.h"























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\device_types.h"




































































#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\device_types.h"
#line 57 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\driver_types.h"




































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1414 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\driver_types.h"

#line 58 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\surface_types.h"






















































































































#line 120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\surface_types.h"
#line 59 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_types.h"




















































































































































































































#line 214 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\texture_types.h"
#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\vector_types.h"












































































































































































































































































































































































































































#line 430 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\vector_types.h"
#line 61 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\builtin_types.h"
#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\surface_indirect_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\host_defines.h"












































































































































































































#line 206 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\host_defines.h"
#line 61 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\surface_indirect_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\vector_functions.h"




















































































































































































































































































































#line 310 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\vector_functions.h"
#line 62 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\surface_indirect_functions.h"








static __forceinline __declspec(__device__) void surf1Dread(char *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   int tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.1d.b8.trap  {%0}, [%1, {%2}];" : "=r"(tmp) : "l"(surfObject), "r"(x));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.1d.b8.clamp {%0}, [%1, {%2}];" : "=r"(tmp) : "l"(surfObject), "r"(x));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.1d.b8.zero  {%0}, [%1, {%2}];" : "=r"(tmp) : "l"(surfObject), "r"(x));
   }
   *retVal = (char)(tmp);
}

static __forceinline __declspec(__device__) void surf1Dread(signed char *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   int tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.1d.b8.trap  {%0}, [%1, {%2}];" : "=r"(tmp) : "l"(surfObject), "r"(x));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.1d.b8.clamp {%0}, [%1, {%2}];" : "=r"(tmp) : "l"(surfObject), "r"(x));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.1d.b8.zero  {%0}, [%1, {%2}];" : "=r"(tmp) : "l"(surfObject), "r"(x));
   }
   *retVal = (signed char)(tmp);
}

static __forceinline __declspec(__device__) void surf1Dread(char1 *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   int1 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.1d.b8.trap  {%0}, [%1, {%2}];" : "=r"(tmp.x) : "l"(surfObject), "r"(x));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.1d.b8.clamp {%0}, [%1, {%2}];" : "=r"(tmp.x) : "l"(surfObject), "r"(x));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.1d.b8.zero  {%0}, [%1, {%2}];" : "=r"(tmp.x) : "l"(surfObject), "r"(x));
   }
   *retVal = make_char1(tmp.x);
}

static __forceinline __declspec(__device__) void surf1Dread(unsigned char *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   unsigned int tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.1d.b8.trap  {%0}, [%1, {%2}];" : "=r"(tmp) : "l"(surfObject), "r"(x));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.1d.b8.clamp {%0}, [%1, {%2}];" : "=r"(tmp) : "l"(surfObject), "r"(x));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.1d.b8.zero  {%0}, [%1, {%2}];" : "=r"(tmp) : "l"(surfObject), "r"(x));
   }
   *retVal = (unsigned char)(tmp);
}

static __forceinline __declspec(__device__) void surf1Dread(uchar1 *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   uint1 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.1d.b8.trap  {%0}, [%1, {%2}];" : "=r"(tmp.x) : "l"(surfObject), "r"(x));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.1d.b8.clamp {%0}, [%1, {%2}];" : "=r"(tmp.x) : "l"(surfObject), "r"(x));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.1d.b8.zero  {%0}, [%1, {%2}];" : "=r"(tmp.x) : "l"(surfObject), "r"(x));
   }
   *retVal = make_uchar1(tmp.x);
}

static __forceinline __declspec(__device__) void surf1Dread(short *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   short tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.1d.b16.trap  {%0}, [%1, {%2}];" : "=h"(tmp) : "l"(surfObject), "r"(x));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.1d.b16.clamp {%0}, [%1, {%2}];" : "=h"(tmp) : "l"(surfObject), "r"(x));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.1d.b16.zero  {%0}, [%1, {%2}];" : "=h"(tmp) : "l"(surfObject), "r"(x));
   }
   *retVal = (short)(tmp);
}

static __forceinline __declspec(__device__) void surf1Dread(short1 *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   short1 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.1d.b16.trap  {%0}, [%1, {%2}];" : "=h"(tmp.x) : "l"(surfObject), "r"(x));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.1d.b16.clamp {%0}, [%1, {%2}];" : "=h"(tmp.x) : "l"(surfObject), "r"(x));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.1d.b16.zero  {%0}, [%1, {%2}];" : "=h"(tmp.x) : "l"(surfObject), "r"(x));
   }
   *retVal = make_short1(tmp.x);
}

static __forceinline __declspec(__device__) void surf1Dread(unsigned short *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   unsigned short tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.1d.b16.trap  {%0}, [%1, {%2}];" : "=h"(tmp) : "l"(surfObject), "r"(x));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.1d.b16.clamp {%0}, [%1, {%2}];" : "=h"(tmp) : "l"(surfObject), "r"(x));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.1d.b16.zero  {%0}, [%1, {%2}];" : "=h"(tmp) : "l"(surfObject), "r"(x));
   }
   *retVal = (unsigned short)(tmp);
}

static __forceinline __declspec(__device__) void surf1Dread(ushort1 *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   ushort1 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.1d.b16.trap  {%0}, [%1, {%2}];" : "=h"(tmp.x) : "l"(surfObject), "r"(x));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.1d.b16.clamp {%0}, [%1, {%2}];" : "=h"(tmp.x) : "l"(surfObject), "r"(x));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.1d.b16.zero  {%0}, [%1, {%2}];" : "=h"(tmp.x) : "l"(surfObject), "r"(x));
   }
   *retVal = make_ushort1(tmp.x);
}

static __forceinline __declspec(__device__) void surf1Dread(int *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   int tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.1d.b32.trap  {%0}, [%1, {%2}];" : "=r"(tmp) : "l"(surfObject), "r"(x));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.1d.b32.clamp {%0}, [%1, {%2}];" : "=r"(tmp) : "l"(surfObject), "r"(x));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.1d.b32.zero  {%0}, [%1, {%2}];" : "=r"(tmp) : "l"(surfObject), "r"(x));
   }
   *retVal = (int)(tmp);
}

static __forceinline __declspec(__device__) void surf1Dread(int1 *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   int1 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.1d.b32.trap  {%0}, [%1, {%2}];" : "=r"(tmp.x) : "l"(surfObject), "r"(x));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.1d.b32.clamp {%0}, [%1, {%2}];" : "=r"(tmp.x) : "l"(surfObject), "r"(x));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.1d.b32.zero  {%0}, [%1, {%2}];" : "=r"(tmp.x) : "l"(surfObject), "r"(x));
   }
   *retVal = make_int1(tmp.x);
}

static __forceinline __declspec(__device__) void surf1Dread(unsigned int *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   unsigned int tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.1d.b32.trap  {%0}, [%1, {%2}];" : "=r"(tmp) : "l"(surfObject), "r"(x));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.1d.b32.clamp {%0}, [%1, {%2}];" : "=r"(tmp) : "l"(surfObject), "r"(x));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.1d.b32.zero  {%0}, [%1, {%2}];" : "=r"(tmp) : "l"(surfObject), "r"(x));
   }
   *retVal = (unsigned int)(tmp);
}

static __forceinline __declspec(__device__) void surf1Dread(uint1 *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   uint1 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.1d.b32.trap  {%0}, [%1, {%2}];" : "=r"(tmp.x) : "l"(surfObject), "r"(x));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.1d.b32.clamp {%0}, [%1, {%2}];" : "=r"(tmp.x) : "l"(surfObject), "r"(x));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.1d.b32.zero  {%0}, [%1, {%2}];" : "=r"(tmp.x) : "l"(surfObject), "r"(x));
   }
   *retVal = make_uint1(tmp.x);
}

static __forceinline __declspec(__device__) void surf1Dread(long long *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   long long tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.1d.b64.trap  {%0}, [%1, {%2}];" : "=l"(tmp) : "l"(surfObject), "r"(x));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.1d.b64.clamp {%0}, [%1, {%2}];" : "=l"(tmp) : "l"(surfObject), "r"(x));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.1d.b64.zero  {%0}, [%1, {%2}];" : "=l"(tmp) : "l"(surfObject), "r"(x));
   }
   *retVal = (long long)(tmp);
}

static __forceinline __declspec(__device__) void surf1Dread(longlong1 *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   longlong1 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.1d.b64.trap  {%0}, [%1, {%2}];" : "=l"(tmp.x) : "l"(surfObject), "r"(x));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.1d.b64.clamp {%0}, [%1, {%2}];" : "=l"(tmp.x) : "l"(surfObject), "r"(x));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.1d.b64.zero  {%0}, [%1, {%2}];" : "=l"(tmp.x) : "l"(surfObject), "r"(x));
   }
   *retVal = make_longlong1(tmp.x);
}

static __forceinline __declspec(__device__) void surf1Dread(unsigned long long *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   unsigned long long tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.1d.b64.trap  {%0}, [%1, {%2}];" : "=l"(tmp) : "l"(surfObject), "r"(x));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.1d.b64.clamp {%0}, [%1, {%2}];" : "=l"(tmp) : "l"(surfObject), "r"(x));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.1d.b64.zero  {%0}, [%1, {%2}];" : "=l"(tmp) : "l"(surfObject), "r"(x));
   }
   *retVal = (unsigned long long)(tmp);
}

static __forceinline __declspec(__device__) void surf1Dread(ulonglong1 *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   ulonglong1 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.1d.b64.trap  {%0}, [%1, {%2}];" : "=l"(tmp.x) : "l"(surfObject), "r"(x));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.1d.b64.clamp {%0}, [%1, {%2}];" : "=l"(tmp.x) : "l"(surfObject), "r"(x));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.1d.b64.zero  {%0}, [%1, {%2}];" : "=l"(tmp.x) : "l"(surfObject), "r"(x));
   }
   *retVal = make_ulonglong1(tmp.x);
}

static __forceinline __declspec(__device__) void surf1Dread(float *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   float tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.1d.b32.trap  {%0}, [%1, {%2}];" : "=f"(tmp) : "l"(surfObject), "r"(x));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.1d.b32.clamp {%0}, [%1, {%2}];" : "=f"(tmp) : "l"(surfObject), "r"(x));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.1d.b32.zero  {%0}, [%1, {%2}];" : "=f"(tmp) : "l"(surfObject), "r"(x));
   }
   *retVal = (float)(tmp);
}

static __forceinline __declspec(__device__) void surf1Dread(float1 *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   float1 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.1d.b32.trap  {%0}, [%1, {%2}];" : "=f"(tmp.x) : "l"(surfObject), "r"(x));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.1d.b32.clamp {%0}, [%1, {%2}];" : "=f"(tmp.x) : "l"(surfObject), "r"(x));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.1d.b32.zero  {%0}, [%1, {%2}];" : "=f"(tmp.x) : "l"(surfObject), "r"(x));
   }
   *retVal = make_float1(tmp.x);
}







static __forceinline __declspec(__device__) void surf1Dread(char2 *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   int2 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.1d.v2.b8.trap  {%0, %1}, [%2, {%3}];" : "=r"(tmp.x), "=r"(tmp.y) : "l"(surfObject), "r"(x));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.1d.v2.b8.clamp {%0, %1}, [%2, {%3}];" : "=r"(tmp.x), "=r"(tmp.y) : "l"(surfObject), "r"(x));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.1d.v2.b8.zero  {%0, %1}, [%2, {%3}];" : "=r"(tmp.x), "=r"(tmp.y) : "l"(surfObject), "r"(x));
   }
   *retVal = make_char2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void surf1Dread(uchar2 *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   uint2 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.1d.v2.b8.trap  {%0, %1}, [%2, {%3}];" : "=r"(tmp.x), "=r"(tmp.y) : "l"(surfObject), "r"(x));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.1d.v2.b8.clamp {%0, %1}, [%2, {%3}];" : "=r"(tmp.x), "=r"(tmp.y) : "l"(surfObject), "r"(x));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.1d.v2.b8.zero  {%0, %1}, [%2, {%3}];" : "=r"(tmp.x), "=r"(tmp.y) : "l"(surfObject), "r"(x));
   }
   *retVal = make_uchar2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void surf1Dread(short2 *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   short2 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.1d.v2.b16.trap  {%0, %1}, [%2, {%3}];" : "=h"(tmp.x), "=h"(tmp.y) : "l"(surfObject), "r"(x));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.1d.v2.b16.clamp {%0, %1}, [%2, {%3}];" : "=h"(tmp.x), "=h"(tmp.y) : "l"(surfObject), "r"(x));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.1d.v2.b16.zero  {%0, %1}, [%2, {%3}];" : "=h"(tmp.x), "=h"(tmp.y) : "l"(surfObject), "r"(x));
   }
   *retVal = make_short2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void surf1Dread(ushort2 *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   ushort2 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.1d.v2.b16.trap  {%0, %1}, [%2, {%3}];" : "=h"(tmp.x), "=h"(tmp.y) : "l"(surfObject), "r"(x));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.1d.v2.b16.clamp {%0, %1}, [%2, {%3}];" : "=h"(tmp.x), "=h"(tmp.y) : "l"(surfObject), "r"(x));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.1d.v2.b16.zero  {%0, %1}, [%2, {%3}];" : "=h"(tmp.x), "=h"(tmp.y) : "l"(surfObject), "r"(x));
   }
   *retVal = make_ushort2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void surf1Dread(int2 *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   int2 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.1d.v2.b32.trap  {%0, %1}, [%2, {%3}];" : "=r"(tmp.x), "=r"(tmp.y) : "l"(surfObject), "r"(x));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.1d.v2.b32.clamp {%0, %1}, [%2, {%3}];" : "=r"(tmp.x), "=r"(tmp.y) : "l"(surfObject), "r"(x));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.1d.v2.b32.zero  {%0, %1}, [%2, {%3}];" : "=r"(tmp.x), "=r"(tmp.y) : "l"(surfObject), "r"(x));
   }
   *retVal = make_int2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void surf1Dread(uint2 *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   uint2 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.1d.v2.b32.trap  {%0, %1}, [%2, {%3}];" : "=r"(tmp.x), "=r"(tmp.y) : "l"(surfObject), "r"(x));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.1d.v2.b32.clamp {%0, %1}, [%2, {%3}];" : "=r"(tmp.x), "=r"(tmp.y) : "l"(surfObject), "r"(x));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.1d.v2.b32.zero  {%0, %1}, [%2, {%3}];" : "=r"(tmp.x), "=r"(tmp.y) : "l"(surfObject), "r"(x));
   }
   *retVal = make_uint2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void surf1Dread(longlong2 *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   longlong2 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.1d.v2.b64.trap  {%0, %1}, [%2, {%3}];" : "=l"(tmp.x), "=l"(tmp.y) : "l"(surfObject), "r"(x));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.1d.v2.b64.clamp {%0, %1}, [%2, {%3}];" : "=l"(tmp.x), "=l"(tmp.y) : "l"(surfObject), "r"(x));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.1d.v2.b64.zero  {%0, %1}, [%2, {%3}];" : "=l"(tmp.x), "=l"(tmp.y) : "l"(surfObject), "r"(x));
   }
   *retVal = make_longlong2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void surf1Dread(ulonglong2 *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   ulonglong2 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.1d.v2.b64.trap  {%0, %1}, [%2, {%3}];" : "=l"(tmp.x), "=l"(tmp.y) : "l"(surfObject), "r"(x));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.1d.v2.b64.clamp {%0, %1}, [%2, {%3}];" : "=l"(tmp.x), "=l"(tmp.y) : "l"(surfObject), "r"(x));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.1d.v2.b64.zero  {%0, %1}, [%2, {%3}];" : "=l"(tmp.x), "=l"(tmp.y) : "l"(surfObject), "r"(x));
   }
   *retVal = make_ulonglong2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void surf1Dread(float2 *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   float2 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.1d.v2.b32.trap  {%0, %1}, [%2, {%3}];" : "=f"(tmp.x), "=f"(tmp.y) : "l"(surfObject), "r"(x));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.1d.v2.b32.clamp {%0, %1}, [%2, {%3}];" : "=f"(tmp.x), "=f"(tmp.y) : "l"(surfObject), "r"(x));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.1d.v2.b32.zero  {%0, %1}, [%2, {%3}];" : "=f"(tmp.x), "=f"(tmp.y) : "l"(surfObject), "r"(x));
   }
   *retVal = make_float2(tmp.x, tmp.y);
}







static __forceinline __declspec(__device__) void surf1Dread(char4 *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   int4 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.1d.v4.b8.trap  {%0, %1, %2, %3}, [%4, {%5}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(surfObject), "r"(x));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.1d.v4.b8.clamp {%0, %1, %2, %3}, [%4, {%5}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(surfObject), "r"(x));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.1d.v4.b8.zero  {%0, %1, %2, %3}, [%4, {%5}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(surfObject), "r"(x));
   }
   *retVal = make_char4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __forceinline __declspec(__device__) void surf1Dread(uchar4 *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   uint4 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.1d.v4.b8.trap  {%0, %1, %2, %3}, [%4, {%5}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(surfObject), "r"(x));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.1d.v4.b8.clamp {%0, %1, %2, %3}, [%4, {%5}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(surfObject), "r"(x));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.1d.v4.b8.zero  {%0, %1, %2, %3}, [%4, {%5}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(surfObject), "r"(x));
   }
   *retVal = make_uchar4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __forceinline __declspec(__device__) void surf1Dread(short4 *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   short4 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.1d.v4.b16.trap  {%0, %1, %2, %3}, [%4, {%5}];" : "=h"(tmp.x), "=h"(tmp.y), "=h"(tmp.z), "=h"(tmp.w) : "l"(surfObject), "r"(x));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.1d.v4.b16.clamp {%0, %1, %2, %3}, [%4, {%5}];" : "=h"(tmp.x), "=h"(tmp.y), "=h"(tmp.z), "=h"(tmp.w) : "l"(surfObject), "r"(x));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.1d.v4.b16.zero  {%0, %1, %2, %3}, [%4, {%5}];" : "=h"(tmp.x), "=h"(tmp.y), "=h"(tmp.z), "=h"(tmp.w) : "l"(surfObject), "r"(x));
   }
   *retVal = make_short4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __forceinline __declspec(__device__) void surf1Dread(ushort4 *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   ushort4 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.1d.v4.b16.trap  {%0, %1, %2, %3}, [%4, {%5}];" : "=h"(tmp.x), "=h"(tmp.y), "=h"(tmp.z), "=h"(tmp.w) : "l"(surfObject), "r"(x));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.1d.v4.b16.clamp {%0, %1, %2, %3}, [%4, {%5}];" : "=h"(tmp.x), "=h"(tmp.y), "=h"(tmp.z), "=h"(tmp.w) : "l"(surfObject), "r"(x));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.1d.v4.b16.zero  {%0, %1, %2, %3}, [%4, {%5}];" : "=h"(tmp.x), "=h"(tmp.y), "=h"(tmp.z), "=h"(tmp.w) : "l"(surfObject), "r"(x));
   }
   *retVal = make_ushort4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __forceinline __declspec(__device__) void surf1Dread(int4 *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   int4 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.1d.v4.b32.trap  {%0, %1, %2, %3}, [%4, {%5}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(surfObject), "r"(x));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.1d.v4.b32.clamp {%0, %1, %2, %3}, [%4, {%5}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(surfObject), "r"(x));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.1d.v4.b32.zero  {%0, %1, %2, %3}, [%4, {%5}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(surfObject), "r"(x));
   }
   *retVal = make_int4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __forceinline __declspec(__device__) void surf1Dread(uint4 *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   uint4 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.1d.v4.b32.trap  {%0, %1, %2, %3}, [%4, {%5}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(surfObject), "r"(x));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.1d.v4.b32.clamp {%0, %1, %2, %3}, [%4, {%5}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(surfObject), "r"(x));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.1d.v4.b32.zero  {%0, %1, %2, %3}, [%4, {%5}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(surfObject), "r"(x));
   }
   *retVal = make_uint4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __forceinline __declspec(__device__) void surf1Dread(float4 *retVal, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   float4 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.1d.v4.b32.trap  {%0, %1, %2, %3}, [%4, {%5}];" : "=f"(tmp.x), "=f"(tmp.y), "=f"(tmp.z), "=f"(tmp.w) : "l"(surfObject), "r"(x));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.1d.v4.b32.clamp {%0, %1, %2, %3}, [%4, {%5}];" : "=f"(tmp.x), "=f"(tmp.y), "=f"(tmp.z), "=f"(tmp.w) : "l"(surfObject), "r"(x));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.1d.v4.b32.zero  {%0, %1, %2, %3}, [%4, {%5}];" : "=f"(tmp.x), "=f"(tmp.y), "=f"(tmp.z), "=f"(tmp.w) : "l"(surfObject), "r"(x));
   }
   *retVal = make_float4(tmp.x, tmp.y, tmp.z, tmp.w);
}







template <class T>
static __forceinline __declspec(__device__) T surf1Dread(cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   T ret;
   surf1Dread(&ret, surfObject, x, boundaryMode);
   return ret;
}







static __forceinline __declspec(__device__) void surf2Dread(char *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   int tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.2d.b8.trap  {%0}, [%1, {%2, %3}];" : "=r"(tmp) : "l"(surfObject), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.2d.b8.clamp {%0}, [%1, {%2, %3}];" : "=r"(tmp) : "l"(surfObject), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.2d.b8.zero  {%0}, [%1, {%2, %3}];" : "=r"(tmp) : "l"(surfObject), "r"(x), "r"(y));
   }
   *retVal = (char)(tmp);
}

static __forceinline __declspec(__device__) void surf2Dread(signed char *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   int tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.2d.b8.trap  {%0}, [%1, {%2, %3}];" : "=r"(tmp) : "l"(surfObject), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.2d.b8.clamp {%0}, [%1, {%2, %3}];" : "=r"(tmp) : "l"(surfObject), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.2d.b8.zero  {%0}, [%1, {%2, %3}];" : "=r"(tmp) : "l"(surfObject), "r"(x), "r"(y));
   }
   *retVal = (signed char)(tmp);
}

static __forceinline __declspec(__device__) void surf2Dread(char1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   int1 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.2d.b8.trap  {%0}, [%1, {%2, %3}];" : "=r"(tmp.x) : "l"(surfObject), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.2d.b8.clamp {%0}, [%1, {%2, %3}];" : "=r"(tmp.x) : "l"(surfObject), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.2d.b8.zero  {%0}, [%1, {%2, %3}];" : "=r"(tmp.x) : "l"(surfObject), "r"(x), "r"(y));
   }
   *retVal = make_char1(tmp.x);
}

static __forceinline __declspec(__device__) void surf2Dread(unsigned char *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   unsigned int tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.2d.b8.trap  {%0}, [%1, {%2, %3}];" : "=r"(tmp) : "l"(surfObject), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.2d.b8.clamp {%0}, [%1, {%2, %3}];" : "=r"(tmp) : "l"(surfObject), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.2d.b8.zero  {%0}, [%1, {%2, %3}];" : "=r"(tmp) : "l"(surfObject), "r"(x), "r"(y));
   }
   *retVal = (unsigned char)(tmp);
}

static __forceinline __declspec(__device__) void surf2Dread(uchar1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   uint1 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.2d.b8.trap  {%0}, [%1, {%2, %3}];" : "=r"(tmp.x) : "l"(surfObject), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.2d.b8.clamp {%0}, [%1, {%2, %3}];" : "=r"(tmp.x) : "l"(surfObject), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.2d.b8.zero  {%0}, [%1, {%2, %3}];" : "=r"(tmp.x) : "l"(surfObject), "r"(x), "r"(y));
   }
   *retVal = make_uchar1(tmp.x);
}

static __forceinline __declspec(__device__) void surf2Dread(short *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   short tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.2d.b16.trap  {%0}, [%1, {%2, %3}];" : "=h"(tmp) : "l"(surfObject), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.2d.b16.clamp {%0}, [%1, {%2, %3}];" : "=h"(tmp) : "l"(surfObject), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.2d.b16.zero  {%0}, [%1, {%2, %3}];" : "=h"(tmp) : "l"(surfObject), "r"(x), "r"(y));
   }
   *retVal = (short)(tmp);
}

static __forceinline __declspec(__device__) void surf2Dread(short1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   short1 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.2d.b16.trap  {%0}, [%1, {%2, %3}];" : "=h"(tmp.x) : "l"(surfObject), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.2d.b16.clamp {%0}, [%1, {%2, %3}];" : "=h"(tmp.x) : "l"(surfObject), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.2d.b16.zero  {%0}, [%1, {%2, %3}];" : "=h"(tmp.x) : "l"(surfObject), "r"(x), "r"(y));
   }
   *retVal = make_short1(tmp.x);
}

static __forceinline __declspec(__device__) void surf2Dread(unsigned short *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   unsigned short tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.2d.b16.trap  {%0}, [%1, {%2, %3}];" : "=h"(tmp) : "l"(surfObject), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.2d.b16.clamp {%0}, [%1, {%2, %3}];" : "=h"(tmp) : "l"(surfObject), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.2d.b16.zero  {%0}, [%1, {%2, %3}];" : "=h"(tmp) : "l"(surfObject), "r"(x), "r"(y));
   }
   *retVal = (unsigned short)(tmp);
}

static __forceinline __declspec(__device__) void surf2Dread(ushort1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   ushort1 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.2d.b16.trap  {%0}, [%1, {%2, %3}];" : "=h"(tmp.x) : "l"(surfObject), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.2d.b16.clamp {%0}, [%1, {%2, %3}];" : "=h"(tmp.x) : "l"(surfObject), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.2d.b16.zero  {%0}, [%1, {%2, %3}];" : "=h"(tmp.x) : "l"(surfObject), "r"(x), "r"(y));
   }
   *retVal = make_ushort1(tmp.x);
}

static __forceinline __declspec(__device__) void surf2Dread(int *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   int tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.2d.b32.trap  {%0}, [%1, {%2, %3}];" : "=r"(tmp) : "l"(surfObject), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.2d.b32.clamp {%0}, [%1, {%2, %3}];" : "=r"(tmp) : "l"(surfObject), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.2d.b32.zero  {%0}, [%1, {%2, %3}];" : "=r"(tmp) : "l"(surfObject), "r"(x), "r"(y));
   }
   *retVal = (int)(tmp);
}

static __forceinline __declspec(__device__) void surf2Dread(int1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   int1 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.2d.b32.trap  {%0}, [%1, {%2, %3}];" : "=r"(tmp.x) : "l"(surfObject), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.2d.b32.clamp {%0}, [%1, {%2, %3}];" : "=r"(tmp.x) : "l"(surfObject), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.2d.b32.zero  {%0}, [%1, {%2, %3}];" : "=r"(tmp.x) : "l"(surfObject), "r"(x), "r"(y));
   }
   *retVal = make_int1(tmp.x);
}

static __forceinline __declspec(__device__) void surf2Dread(unsigned int *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   unsigned int tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.2d.b32.trap  {%0}, [%1, {%2, %3}];" : "=r"(tmp) : "l"(surfObject), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.2d.b32.clamp {%0}, [%1, {%2, %3}];" : "=r"(tmp) : "l"(surfObject), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.2d.b32.zero  {%0}, [%1, {%2, %3}];" : "=r"(tmp) : "l"(surfObject), "r"(x), "r"(y));
   }
   *retVal = (unsigned int)(tmp);
}

static __forceinline __declspec(__device__) void surf2Dread(uint1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   uint1 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.2d.b32.trap  {%0}, [%1, {%2, %3}];" : "=r"(tmp.x) : "l"(surfObject), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.2d.b32.clamp {%0}, [%1, {%2, %3}];" : "=r"(tmp.x) : "l"(surfObject), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.2d.b32.zero  {%0}, [%1, {%2, %3}];" : "=r"(tmp.x) : "l"(surfObject), "r"(x), "r"(y));
   }
   *retVal = make_uint1(tmp.x);
}

static __forceinline __declspec(__device__) void surf2Dread(long long *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   long long tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.2d.b64.trap  {%0}, [%1, {%2, %3}];" : "=l"(tmp) : "l"(surfObject), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.2d.b64.clamp {%0}, [%1, {%2, %3}];" : "=l"(tmp) : "l"(surfObject), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.2d.b64.zero  {%0}, [%1, {%2, %3}];" : "=l"(tmp) : "l"(surfObject), "r"(x), "r"(y));
   }
   *retVal = (long long)(tmp);
}

static __forceinline __declspec(__device__) void surf2Dread(longlong1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   longlong1 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.2d.b64.trap  {%0}, [%1, {%2, %3}];" : "=l"(tmp.x) : "l"(surfObject), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.2d.b64.clamp {%0}, [%1, {%2, %3}];" : "=l"(tmp.x) : "l"(surfObject), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.2d.b64.zero  {%0}, [%1, {%2, %3}];" : "=l"(tmp.x) : "l"(surfObject), "r"(x), "r"(y));
   }
   *retVal = make_longlong1(tmp.x);
}

static __forceinline __declspec(__device__) void surf2Dread(unsigned long long *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   unsigned long long tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.2d.b64.trap  {%0}, [%1, {%2, %3}];" : "=l"(tmp) : "l"(surfObject), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.2d.b64.clamp {%0}, [%1, {%2, %3}];" : "=l"(tmp) : "l"(surfObject), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.2d.b64.zero  {%0}, [%1, {%2, %3}];" : "=l"(tmp) : "l"(surfObject), "r"(x), "r"(y));
   }
   *retVal = (unsigned long long)(tmp);
}

static __forceinline __declspec(__device__) void surf2Dread(ulonglong1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   ulonglong1 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.2d.b64.trap  {%0}, [%1, {%2, %3}];" : "=l"(tmp.x) : "l"(surfObject), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.2d.b64.clamp {%0}, [%1, {%2, %3}];" : "=l"(tmp.x) : "l"(surfObject), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.2d.b64.zero  {%0}, [%1, {%2, %3}];" : "=l"(tmp.x) : "l"(surfObject), "r"(x), "r"(y));
   }
   *retVal = make_ulonglong1(tmp.x);
}

static __forceinline __declspec(__device__) void surf2Dread(float *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   float tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.2d.b32.trap  {%0}, [%1, {%2, %3}];" : "=f"(tmp) : "l"(surfObject), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.2d.b32.clamp {%0}, [%1, {%2, %3}];" : "=f"(tmp) : "l"(surfObject), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.2d.b32.zero  {%0}, [%1, {%2, %3}];" : "=f"(tmp) : "l"(surfObject), "r"(x), "r"(y));
   }
   *retVal = (float)(tmp);
}

static __forceinline __declspec(__device__) void surf2Dread(float1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   float1 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.2d.b32.trap  {%0}, [%1, {%2, %3}];" : "=f"(tmp.x) : "l"(surfObject), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.2d.b32.clamp {%0}, [%1, {%2, %3}];" : "=f"(tmp.x) : "l"(surfObject), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.2d.b32.zero  {%0}, [%1, {%2, %3}];" : "=f"(tmp.x) : "l"(surfObject), "r"(x), "r"(y));
   }
   *retVal = make_float1(tmp.x);
}







static __forceinline __declspec(__device__) void surf2Dread(char2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   int2 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.2d.v2.b8.trap  {%0, %1}, [%2, {%3, %4}];" : "=r"(tmp.x), "=r"(tmp.y) : "l"(surfObject), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.2d.v2.b8.clamp {%0, %1}, [%2, {%3, %4}];" : "=r"(tmp.x), "=r"(tmp.y) : "l"(surfObject), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.2d.v2.b8.zero  {%0, %1}, [%2, {%3, %4}];" : "=r"(tmp.x), "=r"(tmp.y) : "l"(surfObject), "r"(x), "r"(y));
   }
   *retVal = make_char2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void surf2Dread(uchar2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   uint2 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.2d.v2.b8.trap  {%0, %1}, [%2, {%3, %4}];" : "=r"(tmp.x), "=r"(tmp.y) : "l"(surfObject), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.2d.v2.b8.clamp {%0, %1}, [%2, {%3, %4}];" : "=r"(tmp.x), "=r"(tmp.y) : "l"(surfObject), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.2d.v2.b8.zero  {%0, %1}, [%2, {%3, %4}];" : "=r"(tmp.x), "=r"(tmp.y) : "l"(surfObject), "r"(x), "r"(y));
   }
   *retVal = make_uchar2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void surf2Dread(short2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   short2 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.2d.v2.b16.trap  {%0, %1}, [%2, {%3, %4}];" : "=h"(tmp.x), "=h"(tmp.y) : "l"(surfObject), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.2d.v2.b16.clamp {%0, %1}, [%2, {%3, %4}];" : "=h"(tmp.x), "=h"(tmp.y) : "l"(surfObject), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.2d.v2.b16.zero  {%0, %1}, [%2, {%3, %4}];" : "=h"(tmp.x), "=h"(tmp.y) : "l"(surfObject), "r"(x), "r"(y));
   }
   *retVal = make_short2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void surf2Dread(ushort2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   ushort2 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.2d.v2.b16.trap  {%0, %1}, [%2, {%3, %4}];" : "=h"(tmp.x), "=h"(tmp.y) : "l"(surfObject), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.2d.v2.b16.clamp {%0, %1}, [%2, {%3, %4}];" : "=h"(tmp.x), "=h"(tmp.y) : "l"(surfObject), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.2d.v2.b16.zero  {%0, %1}, [%2, {%3, %4}];" : "=h"(tmp.x), "=h"(tmp.y) : "l"(surfObject), "r"(x), "r"(y));
   }
   *retVal = make_ushort2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void surf2Dread(int2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   int2 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.2d.v2.b32.trap  {%0, %1}, [%2, {%3, %4}];" : "=r"(tmp.x), "=r"(tmp.y) : "l"(surfObject), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.2d.v2.b32.clamp {%0, %1}, [%2, {%3, %4}];" : "=r"(tmp.x), "=r"(tmp.y) : "l"(surfObject), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.2d.v2.b32.zero  {%0, %1}, [%2, {%3, %4}];" : "=r"(tmp.x), "=r"(tmp.y) : "l"(surfObject), "r"(x), "r"(y));
   }
   *retVal = make_int2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void surf2Dread(uint2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   uint2 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.2d.v2.b32.trap  {%0, %1}, [%2, {%3, %4}];" : "=r"(tmp.x), "=r"(tmp.y) : "l"(surfObject), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.2d.v2.b32.clamp {%0, %1}, [%2, {%3, %4}];" : "=r"(tmp.x), "=r"(tmp.y) : "l"(surfObject), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.2d.v2.b32.zero  {%0, %1}, [%2, {%3, %4}];" : "=r"(tmp.x), "=r"(tmp.y) : "l"(surfObject), "r"(x), "r"(y));
   }
   *retVal = make_uint2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void surf2Dread(longlong2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   longlong2 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.2d.v2.b64.trap  {%0, %1}, [%2, {%3, %4}];" : "=l"(tmp.x), "=l"(tmp.y) : "l"(surfObject), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.2d.v2.b64.clamp {%0, %1}, [%2, {%3, %4}];" : "=l"(tmp.x), "=l"(tmp.y) : "l"(surfObject), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.2d.v2.b64.zero  {%0, %1}, [%2, {%3, %4}];" : "=l"(tmp.x), "=l"(tmp.y) : "l"(surfObject), "r"(x), "r"(y));
   }
   *retVal = make_longlong2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void surf2Dread(ulonglong2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   ulonglong2 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.2d.v2.b64.trap  {%0, %1}, [%2, {%3, %4}];" : "=l"(tmp.x), "=l"(tmp.y) : "l"(surfObject), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.2d.v2.b64.clamp {%0, %1}, [%2, {%3, %4}];" : "=l"(tmp.x), "=l"(tmp.y) : "l"(surfObject), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.2d.v2.b64.zero  {%0, %1}, [%2, {%3, %4}];" : "=l"(tmp.x), "=l"(tmp.y) : "l"(surfObject), "r"(x), "r"(y));
   }
   *retVal = make_ulonglong2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void surf2Dread(float2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   float2 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.2d.v2.b32.trap  {%0, %1}, [%2, {%3, %4}];" : "=f"(tmp.x), "=f"(tmp.y) : "l"(surfObject), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.2d.v2.b32.clamp {%0, %1}, [%2, {%3, %4}];" : "=f"(tmp.x), "=f"(tmp.y) : "l"(surfObject), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.2d.v2.b32.zero  {%0, %1}, [%2, {%3, %4}];" : "=f"(tmp.x), "=f"(tmp.y) : "l"(surfObject), "r"(x), "r"(y));
   }
   *retVal = make_float2(tmp.x, tmp.y);
}







static __forceinline __declspec(__device__) void surf2Dread(char4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   int4 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.2d.v4.b8.trap  {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(surfObject), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.2d.v4.b8.clamp {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(surfObject), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.2d.v4.b8.zero  {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(surfObject), "r"(x), "r"(y));
   }
   *retVal = make_char4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __forceinline __declspec(__device__) void surf2Dread(uchar4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   uint4 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.2d.v4.b8.trap  {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(surfObject), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.2d.v4.b8.clamp {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(surfObject), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.2d.v4.b8.zero  {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(surfObject), "r"(x), "r"(y));
   }
   *retVal = make_uchar4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __forceinline __declspec(__device__) void surf2Dread(short4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   short4 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.2d.v4.b16.trap  {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=h"(tmp.x), "=h"(tmp.y), "=h"(tmp.z), "=h"(tmp.w) : "l"(surfObject), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.2d.v4.b16.clamp {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=h"(tmp.x), "=h"(tmp.y), "=h"(tmp.z), "=h"(tmp.w) : "l"(surfObject), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.2d.v4.b16.zero  {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=h"(tmp.x), "=h"(tmp.y), "=h"(tmp.z), "=h"(tmp.w) : "l"(surfObject), "r"(x), "r"(y));
   }
   *retVal = make_short4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __forceinline __declspec(__device__) void surf2Dread(ushort4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   ushort4 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.2d.v4.b16.trap  {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=h"(tmp.x), "=h"(tmp.y), "=h"(tmp.z), "=h"(tmp.w) : "l"(surfObject), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.2d.v4.b16.clamp {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=h"(tmp.x), "=h"(tmp.y), "=h"(tmp.z), "=h"(tmp.w) : "l"(surfObject), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.2d.v4.b16.zero  {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=h"(tmp.x), "=h"(tmp.y), "=h"(tmp.z), "=h"(tmp.w) : "l"(surfObject), "r"(x), "r"(y));
   }
   *retVal = make_ushort4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __forceinline __declspec(__device__) void surf2Dread(int4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   int4 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.2d.v4.b32.trap  {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(surfObject), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.2d.v4.b32.clamp {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(surfObject), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.2d.v4.b32.zero  {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(surfObject), "r"(x), "r"(y));
   }
   *retVal = make_int4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __forceinline __declspec(__device__) void surf2Dread(uint4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   uint4 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.2d.v4.b32.trap  {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(surfObject), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.2d.v4.b32.clamp {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(surfObject), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.2d.v4.b32.zero  {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(surfObject), "r"(x), "r"(y));
   }
   *retVal = make_uint4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __forceinline __declspec(__device__) void surf2Dread(float4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   float4 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.2d.v4.b32.trap  {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=f"(tmp.x), "=f"(tmp.y), "=f"(tmp.z), "=f"(tmp.w) : "l"(surfObject), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.2d.v4.b32.clamp {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=f"(tmp.x), "=f"(tmp.y), "=f"(tmp.z), "=f"(tmp.w) : "l"(surfObject), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.2d.v4.b32.zero  {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=f"(tmp.x), "=f"(tmp.y), "=f"(tmp.z), "=f"(tmp.w) : "l"(surfObject), "r"(x), "r"(y));
   }
   *retVal = make_float4(tmp.x, tmp.y, tmp.z, tmp.w);
}







template <class T>
static __forceinline __declspec(__device__) T surf2Dread(cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   T ret;
   surf2Dread(&ret, surfObject, x, y, boundaryMode);
   return ret;
}







static __forceinline __declspec(__device__) void surf3Dread(char *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   int tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.3d.b8.trap  {%0}, [%1, {%2, %3, %4, %4}];" : "=r"(tmp) : "l"(surfObject), "r"(x), "r"(y), "r"(z));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.3d.b8.clamp {%0}, [%1, {%2, %3, %4, %4}];" : "=r"(tmp) : "l"(surfObject), "r"(x), "r"(y), "r"(z));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.3d.b8.zero  {%0}, [%1, {%2, %3, %4, %4}];" : "=r"(tmp) : "l"(surfObject), "r"(x), "r"(y), "r"(z));
   }
   *retVal = (char)(tmp);
}

static __forceinline __declspec(__device__) void surf3Dread(signed char *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   int tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.3d.b8.trap  {%0}, [%1, {%2, %3, %4, %4}];" : "=r"(tmp) : "l"(surfObject), "r"(x), "r"(y), "r"(z));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.3d.b8.clamp {%0}, [%1, {%2, %3, %4, %4}];" : "=r"(tmp) : "l"(surfObject), "r"(x), "r"(y), "r"(z));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.3d.b8.zero  {%0}, [%1, {%2, %3, %4, %4}];" : "=r"(tmp) : "l"(surfObject), "r"(x), "r"(y), "r"(z));
   }
   *retVal = (signed char)(tmp);
}

static __forceinline __declspec(__device__) void surf3Dread(char1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   int1 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.3d.b8.trap  {%0}, [%1, {%2, %3, %4, %4}];" : "=r"(tmp.x) : "l"(surfObject), "r"(x), "r"(y), "r"(z));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.3d.b8.clamp {%0}, [%1, {%2, %3, %4, %4}];" : "=r"(tmp.x) : "l"(surfObject), "r"(x), "r"(y), "r"(z));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.3d.b8.zero  {%0}, [%1, {%2, %3, %4, %4}];" : "=r"(tmp.x) : "l"(surfObject), "r"(x), "r"(y), "r"(z));
   }
   *retVal = make_char1(tmp.x);
}

static __forceinline __declspec(__device__) void surf3Dread(unsigned char *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   unsigned int tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.3d.b8.trap  {%0}, [%1, {%2, %3, %4, %4}];" : "=r"(tmp) : "l"(surfObject), "r"(x), "r"(y), "r"(z));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.3d.b8.clamp {%0}, [%1, {%2, %3, %4, %4}];" : "=r"(tmp) : "l"(surfObject), "r"(x), "r"(y), "r"(z));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.3d.b8.zero  {%0}, [%1, {%2, %3, %4, %4}];" : "=r"(tmp) : "l"(surfObject), "r"(x), "r"(y), "r"(z));
   }
   *retVal = (unsigned char)(tmp);
}

static __forceinline __declspec(__device__) void surf3Dread(uchar1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   uint1 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.3d.b8.trap  {%0}, [%1, {%2, %3, %4, %4}];" : "=r"(tmp.x) : "l"(surfObject), "r"(x), "r"(y), "r"(z));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.3d.b8.clamp {%0}, [%1, {%2, %3, %4, %4}];" : "=r"(tmp.x) : "l"(surfObject), "r"(x), "r"(y), "r"(z));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.3d.b8.zero  {%0}, [%1, {%2, %3, %4, %4}];" : "=r"(tmp.x) : "l"(surfObject), "r"(x), "r"(y), "r"(z));
   }
   *retVal = make_uchar1(tmp.x);
}

static __forceinline __declspec(__device__) void surf3Dread(short *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   short tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.3d.b16.trap  {%0}, [%1, {%2, %3, %4, %4}];" : "=h"(tmp) : "l"(surfObject), "r"(x), "r"(y), "r"(z));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.3d.b16.clamp {%0}, [%1, {%2, %3, %4, %4}];" : "=h"(tmp) : "l"(surfObject), "r"(x), "r"(y), "r"(z));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.3d.b16.zero  {%0}, [%1, {%2, %3, %4, %4}];" : "=h"(tmp) : "l"(surfObject), "r"(x), "r"(y), "r"(z));
   }
   *retVal = (short)(tmp);
}

static __forceinline __declspec(__device__) void surf3Dread(short1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   short1 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.3d.b16.trap  {%0}, [%1, {%2, %3, %4, %4}];" : "=h"(tmp.x) : "l"(surfObject), "r"(x), "r"(y), "r"(z));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.3d.b16.clamp {%0}, [%1, {%2, %3, %4, %4}];" : "=h"(tmp.x) : "l"(surfObject), "r"(x), "r"(y), "r"(z));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.3d.b16.zero  {%0}, [%1, {%2, %3, %4, %4}];" : "=h"(tmp.x) : "l"(surfObject), "r"(x), "r"(y), "r"(z));
   }
   *retVal = make_short1(tmp.x);
}

static __forceinline __declspec(__device__) void surf3Dread(unsigned short *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   unsigned short tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.3d.b16.trap  {%0}, [%1, {%2, %3, %4, %4}];" : "=h"(tmp) : "l"(surfObject), "r"(x), "r"(y), "r"(z));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.3d.b16.clamp {%0}, [%1, {%2, %3, %4, %4}];" : "=h"(tmp) : "l"(surfObject), "r"(x), "r"(y), "r"(z));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.3d.b16.zero  {%0}, [%1, {%2, %3, %4, %4}];" : "=h"(tmp) : "l"(surfObject), "r"(x), "r"(y), "r"(z));
   }
   *retVal = (unsigned short)(tmp);
}

static __forceinline __declspec(__device__) void surf3Dread(ushort1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   ushort1 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.3d.b16.trap  {%0}, [%1, {%2, %3, %4, %4}];" : "=h"(tmp.x) : "l"(surfObject), "r"(x), "r"(y), "r"(z));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.3d.b16.clamp {%0}, [%1, {%2, %3, %4, %4}];" : "=h"(tmp.x) : "l"(surfObject), "r"(x), "r"(y), "r"(z));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.3d.b16.zero  {%0}, [%1, {%2, %3, %4, %4}];" : "=h"(tmp.x) : "l"(surfObject), "r"(x), "r"(y), "r"(z));
   }
   *retVal = make_ushort1(tmp.x);
}

static __forceinline __declspec(__device__) void surf3Dread(int *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   int tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.3d.b32.trap  {%0}, [%1, {%2, %3, %4, %4}];" : "=r"(tmp) : "l"(surfObject), "r"(x), "r"(y), "r"(z));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.3d.b32.clamp {%0}, [%1, {%2, %3, %4, %4}];" : "=r"(tmp) : "l"(surfObject), "r"(x), "r"(y), "r"(z));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.3d.b32.zero  {%0}, [%1, {%2, %3, %4, %4}];" : "=r"(tmp) : "l"(surfObject), "r"(x), "r"(y), "r"(z));
   }
   *retVal = (int)(tmp);
}

static __forceinline __declspec(__device__) void surf3Dread(int1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   int1 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.3d.b32.trap  {%0}, [%1, {%2, %3, %4, %4}];" : "=r"(tmp.x) : "l"(surfObject), "r"(x), "r"(y), "r"(z));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.3d.b32.clamp {%0}, [%1, {%2, %3, %4, %4}];" : "=r"(tmp.x) : "l"(surfObject), "r"(x), "r"(y), "r"(z));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.3d.b32.zero  {%0}, [%1, {%2, %3, %4, %4}];" : "=r"(tmp.x) : "l"(surfObject), "r"(x), "r"(y), "r"(z));
   }
   *retVal = make_int1(tmp.x);
}

static __forceinline __declspec(__device__) void surf3Dread(unsigned int *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   unsigned int tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.3d.b32.trap  {%0}, [%1, {%2, %3, %4, %4}];" : "=r"(tmp) : "l"(surfObject), "r"(x), "r"(y), "r"(z));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.3d.b32.clamp {%0}, [%1, {%2, %3, %4, %4}];" : "=r"(tmp) : "l"(surfObject), "r"(x), "r"(y), "r"(z));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.3d.b32.zero  {%0}, [%1, {%2, %3, %4, %4}];" : "=r"(tmp) : "l"(surfObject), "r"(x), "r"(y), "r"(z));
   }
   *retVal = (unsigned int)(tmp);
}

static __forceinline __declspec(__device__) void surf3Dread(uint1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   uint1 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.3d.b32.trap  {%0}, [%1, {%2, %3, %4, %4}];" : "=r"(tmp.x) : "l"(surfObject), "r"(x), "r"(y), "r"(z));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.3d.b32.clamp {%0}, [%1, {%2, %3, %4, %4}];" : "=r"(tmp.x) : "l"(surfObject), "r"(x), "r"(y), "r"(z));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.3d.b32.zero  {%0}, [%1, {%2, %3, %4, %4}];" : "=r"(tmp.x) : "l"(surfObject), "r"(x), "r"(y), "r"(z));
   }
   *retVal = make_uint1(tmp.x);
}

static __forceinline __declspec(__device__) void surf3Dread(long long *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   long long tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.3d.b64.trap  {%0}, [%1, {%2, %3, %4, %4}];" : "=l"(tmp) : "l"(surfObject), "r"(x), "r"(y), "r"(z));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.3d.b64.clamp {%0}, [%1, {%2, %3, %4, %4}];" : "=l"(tmp) : "l"(surfObject), "r"(x), "r"(y), "r"(z));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.3d.b64.zero  {%0}, [%1, {%2, %3, %4, %4}];" : "=l"(tmp) : "l"(surfObject), "r"(x), "r"(y), "r"(z));
   }
   *retVal = (long long)(tmp);
}

static __forceinline __declspec(__device__) void surf3Dread(longlong1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   longlong1 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.3d.b64.trap  {%0}, [%1, {%2, %3, %4, %4}];" : "=l"(tmp.x) : "l"(surfObject), "r"(x), "r"(y), "r"(z));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.3d.b64.clamp {%0}, [%1, {%2, %3, %4, %4}];" : "=l"(tmp.x) : "l"(surfObject), "r"(x), "r"(y), "r"(z));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.3d.b64.zero  {%0}, [%1, {%2, %3, %4, %4}];" : "=l"(tmp.x) : "l"(surfObject), "r"(x), "r"(y), "r"(z));
   }
   *retVal = make_longlong1(tmp.x);
}

static __forceinline __declspec(__device__) void surf3Dread(unsigned long long *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   unsigned long long tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.3d.b64.trap  {%0}, [%1, {%2, %3, %4, %4}];" : "=l"(tmp) : "l"(surfObject), "r"(x), "r"(y), "r"(z));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.3d.b64.clamp {%0}, [%1, {%2, %3, %4, %4}];" : "=l"(tmp) : "l"(surfObject), "r"(x), "r"(y), "r"(z));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.3d.b64.zero  {%0}, [%1, {%2, %3, %4, %4}];" : "=l"(tmp) : "l"(surfObject), "r"(x), "r"(y), "r"(z));
   }
   *retVal = (unsigned long long)(tmp);
}

static __forceinline __declspec(__device__) void surf3Dread(ulonglong1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   ulonglong1 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.3d.b64.trap  {%0}, [%1, {%2, %3, %4, %4}];" : "=l"(tmp.x) : "l"(surfObject), "r"(x), "r"(y), "r"(z));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.3d.b64.clamp {%0}, [%1, {%2, %3, %4, %4}];" : "=l"(tmp.x) : "l"(surfObject), "r"(x), "r"(y), "r"(z));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.3d.b64.zero  {%0}, [%1, {%2, %3, %4, %4}];" : "=l"(tmp.x) : "l"(surfObject), "r"(x), "r"(y), "r"(z));
   }
   *retVal = make_ulonglong1(tmp.x);
}

static __forceinline __declspec(__device__) void surf3Dread(float *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   float tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.3d.b32.trap  {%0}, [%1, {%2, %3, %4, %4}];" : "=f"(tmp) : "l"(surfObject), "r"(x), "r"(y), "r"(z));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.3d.b32.clamp {%0}, [%1, {%2, %3, %4, %4}];" : "=f"(tmp) : "l"(surfObject), "r"(x), "r"(y), "r"(z));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.3d.b32.zero  {%0}, [%1, {%2, %3, %4, %4}];" : "=f"(tmp) : "l"(surfObject), "r"(x), "r"(y), "r"(z));
   }
   *retVal = (float)(tmp);
}

static __forceinline __declspec(__device__) void surf3Dread(float1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   float1 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.3d.b32.trap  {%0}, [%1, {%2, %3, %4, %4}];" : "=f"(tmp.x) : "l"(surfObject), "r"(x), "r"(y), "r"(z));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.3d.b32.clamp {%0}, [%1, {%2, %3, %4, %4}];" : "=f"(tmp.x) : "l"(surfObject), "r"(x), "r"(y), "r"(z));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.3d.b32.zero  {%0}, [%1, {%2, %3, %4, %4}];" : "=f"(tmp.x) : "l"(surfObject), "r"(x), "r"(y), "r"(z));
   }
   *retVal = make_float1(tmp.x);
}







static __forceinline __declspec(__device__) void surf3Dread(char2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   int2 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.3d.v2.b8.trap  {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=r"(tmp.x), "=r"(tmp.y) : "l"(surfObject), "r"(x), "r"(y), "r"(z));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.3d.v2.b8.clamp {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=r"(tmp.x), "=r"(tmp.y) : "l"(surfObject), "r"(x), "r"(y), "r"(z));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.3d.v2.b8.zero  {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=r"(tmp.x), "=r"(tmp.y) : "l"(surfObject), "r"(x), "r"(y), "r"(z));
   }
   *retVal = make_char2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void surf3Dread(uchar2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   uint2 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.3d.v2.b8.trap  {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=r"(tmp.x), "=r"(tmp.y) : "l"(surfObject), "r"(x), "r"(y), "r"(z));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.3d.v2.b8.clamp {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=r"(tmp.x), "=r"(tmp.y) : "l"(surfObject), "r"(x), "r"(y), "r"(z));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.3d.v2.b8.zero  {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=r"(tmp.x), "=r"(tmp.y) : "l"(surfObject), "r"(x), "r"(y), "r"(z));
   }
   *retVal = make_uchar2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void surf3Dread(short2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   short2 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.3d.v2.b16.trap  {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=h"(tmp.x), "=h"(tmp.y) : "l"(surfObject), "r"(x), "r"(y), "r"(z));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.3d.v2.b16.clamp {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=h"(tmp.x), "=h"(tmp.y) : "l"(surfObject), "r"(x), "r"(y), "r"(z));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.3d.v2.b16.zero  {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=h"(tmp.x), "=h"(tmp.y) : "l"(surfObject), "r"(x), "r"(y), "r"(z));
   }
   *retVal = make_short2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void surf3Dread(ushort2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   ushort2 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.3d.v2.b16.trap  {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=h"(tmp.x), "=h"(tmp.y) : "l"(surfObject), "r"(x), "r"(y), "r"(z));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.3d.v2.b16.clamp {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=h"(tmp.x), "=h"(tmp.y) : "l"(surfObject), "r"(x), "r"(y), "r"(z));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.3d.v2.b16.zero  {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=h"(tmp.x), "=h"(tmp.y) : "l"(surfObject), "r"(x), "r"(y), "r"(z));
   }
   *retVal = make_ushort2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void surf3Dread(int2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   int2 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.3d.v2.b32.trap  {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=r"(tmp.x), "=r"(tmp.y) : "l"(surfObject), "r"(x), "r"(y), "r"(z));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.3d.v2.b32.clamp {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=r"(tmp.x), "=r"(tmp.y) : "l"(surfObject), "r"(x), "r"(y), "r"(z));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.3d.v2.b32.zero  {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=r"(tmp.x), "=r"(tmp.y) : "l"(surfObject), "r"(x), "r"(y), "r"(z));
   }
   *retVal = make_int2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void surf3Dread(uint2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   uint2 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.3d.v2.b32.trap  {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=r"(tmp.x), "=r"(tmp.y) : "l"(surfObject), "r"(x), "r"(y), "r"(z));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.3d.v2.b32.clamp {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=r"(tmp.x), "=r"(tmp.y) : "l"(surfObject), "r"(x), "r"(y), "r"(z));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.3d.v2.b32.zero  {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=r"(tmp.x), "=r"(tmp.y) : "l"(surfObject), "r"(x), "r"(y), "r"(z));
   }
   *retVal = make_uint2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void surf3Dread(longlong2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   longlong2 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.3d.v2.b64.trap  {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=l"(tmp.x), "=l"(tmp.y) : "l"(surfObject), "r"(x), "r"(y), "r"(z));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.3d.v2.b64.clamp {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=l"(tmp.x), "=l"(tmp.y) : "l"(surfObject), "r"(x), "r"(y), "r"(z));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.3d.v2.b64.zero  {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=l"(tmp.x), "=l"(tmp.y) : "l"(surfObject), "r"(x), "r"(y), "r"(z));
   }
   *retVal = make_longlong2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void surf3Dread(ulonglong2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   ulonglong2 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.3d.v2.b64.trap  {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=l"(tmp.x), "=l"(tmp.y) : "l"(surfObject), "r"(x), "r"(y), "r"(z));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.3d.v2.b64.clamp {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=l"(tmp.x), "=l"(tmp.y) : "l"(surfObject), "r"(x), "r"(y), "r"(z));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.3d.v2.b64.zero  {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=l"(tmp.x), "=l"(tmp.y) : "l"(surfObject), "r"(x), "r"(y), "r"(z));
   }
   *retVal = make_ulonglong2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void surf3Dread(float2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   float2 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.3d.v2.b32.trap  {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=f"(tmp.x), "=f"(tmp.y) : "l"(surfObject), "r"(x), "r"(y), "r"(z));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.3d.v2.b32.clamp {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=f"(tmp.x), "=f"(tmp.y) : "l"(surfObject), "r"(x), "r"(y), "r"(z));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.3d.v2.b32.zero  {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=f"(tmp.x), "=f"(tmp.y) : "l"(surfObject), "r"(x), "r"(y), "r"(z));
   }
   *retVal = make_float2(tmp.x, tmp.y);
}







static __forceinline __declspec(__device__) void surf3Dread(char4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   int4 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.3d.v4.b8.trap  {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(surfObject), "r"(x), "r"(y), "r"(z));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.3d.v4.b8.clamp {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(surfObject), "r"(x), "r"(y), "r"(z));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.3d.v4.b8.zero  {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(surfObject), "r"(x), "r"(y), "r"(z));
   }
   *retVal = make_char4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __forceinline __declspec(__device__) void surf3Dread(uchar4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   uint4 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.3d.v4.b8.trap  {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(surfObject), "r"(x), "r"(y), "r"(z));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.3d.v4.b8.clamp {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(surfObject), "r"(x), "r"(y), "r"(z));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.3d.v4.b8.zero  {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(surfObject), "r"(x), "r"(y), "r"(z));
   }
   *retVal = make_uchar4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __forceinline __declspec(__device__) void surf3Dread(short4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   short4 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.3d.v4.b16.trap  {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=h"(tmp.x), "=h"(tmp.y), "=h"(tmp.z), "=h"(tmp.w) : "l"(surfObject), "r"(x), "r"(y), "r"(z));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.3d.v4.b16.clamp {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=h"(tmp.x), "=h"(tmp.y), "=h"(tmp.z), "=h"(tmp.w) : "l"(surfObject), "r"(x), "r"(y), "r"(z));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.3d.v4.b16.zero  {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=h"(tmp.x), "=h"(tmp.y), "=h"(tmp.z), "=h"(tmp.w) : "l"(surfObject), "r"(x), "r"(y), "r"(z));
   }
   *retVal = make_short4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __forceinline __declspec(__device__) void surf3Dread(ushort4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   ushort4 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.3d.v4.b16.trap  {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=h"(tmp.x), "=h"(tmp.y), "=h"(tmp.z), "=h"(tmp.w) : "l"(surfObject), "r"(x), "r"(y), "r"(z));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.3d.v4.b16.clamp {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=h"(tmp.x), "=h"(tmp.y), "=h"(tmp.z), "=h"(tmp.w) : "l"(surfObject), "r"(x), "r"(y), "r"(z));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.3d.v4.b16.zero  {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=h"(tmp.x), "=h"(tmp.y), "=h"(tmp.z), "=h"(tmp.w) : "l"(surfObject), "r"(x), "r"(y), "r"(z));
   }
   *retVal = make_ushort4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __forceinline __declspec(__device__) void surf3Dread(int4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   int4 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.3d.v4.b32.trap  {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(surfObject), "r"(x), "r"(y), "r"(z));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.3d.v4.b32.clamp {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(surfObject), "r"(x), "r"(y), "r"(z));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.3d.v4.b32.zero  {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(surfObject), "r"(x), "r"(y), "r"(z));
   }
   *retVal = make_int4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __forceinline __declspec(__device__) void surf3Dread(uint4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   uint4 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.3d.v4.b32.trap  {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(surfObject), "r"(x), "r"(y), "r"(z));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.3d.v4.b32.clamp {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(surfObject), "r"(x), "r"(y), "r"(z));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.3d.v4.b32.zero  {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(surfObject), "r"(x), "r"(y), "r"(z));
   }
   *retVal = make_uint4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __forceinline __declspec(__device__) void surf3Dread(float4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   float4 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.3d.v4.b32.trap  {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=f"(tmp.x), "=f"(tmp.y), "=f"(tmp.z), "=f"(tmp.w) : "l"(surfObject), "r"(x), "r"(y), "r"(z));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.3d.v4.b32.clamp {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=f"(tmp.x), "=f"(tmp.y), "=f"(tmp.z), "=f"(tmp.w) : "l"(surfObject), "r"(x), "r"(y), "r"(z));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.3d.v4.b32.zero  {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=f"(tmp.x), "=f"(tmp.y), "=f"(tmp.z), "=f"(tmp.w) : "l"(surfObject), "r"(x), "r"(y), "r"(z));
   }
   *retVal = make_float4(tmp.x, tmp.y, tmp.z, tmp.w);
}







template <class T>
static __forceinline __declspec(__device__) T surf3Dread(cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   T ret;
   surf3Dread(&ret, surfObject, x, y, z, boundaryMode);
   return ret;
}







static __forceinline __declspec(__device__) void surf1DLayeredread(char *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   int tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.a1d.b8.trap  {%0}, [%1, {%2, %3}];" : "=r"(tmp) : "l"(surfObject), "r"(layer), "r"(x));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.a1d.b8.clamp {%0}, [%1, {%2, %3}];" : "=r"(tmp) : "l"(surfObject), "r"(layer), "r"(x));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.a1d.b8.zero  {%0}, [%1, {%2, %3}];" : "=r"(tmp) : "l"(surfObject), "r"(layer), "r"(x));
   }
   *retVal = (char)(tmp);
}

static __forceinline __declspec(__device__) void surf1DLayeredread(signed char *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   int tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.a1d.b8.trap  {%0}, [%1, {%2, %3}];" : "=r"(tmp) : "l"(surfObject), "r"(layer), "r"(x));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.a1d.b8.clamp {%0}, [%1, {%2, %3}];" : "=r"(tmp) : "l"(surfObject), "r"(layer), "r"(x));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.a1d.b8.zero  {%0}, [%1, {%2, %3}];" : "=r"(tmp) : "l"(surfObject), "r"(layer), "r"(x));
   }
   *retVal = (signed char)(tmp);
}

static __forceinline __declspec(__device__) void surf1DLayeredread(char1 *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   int1 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.a1d.b8.trap  {%0}, [%1, {%2, %3}];" : "=r"(tmp.x) : "l"(surfObject), "r"(layer), "r"(x));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.a1d.b8.clamp {%0}, [%1, {%2, %3}];" : "=r"(tmp.x) : "l"(surfObject), "r"(layer), "r"(x));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.a1d.b8.zero  {%0}, [%1, {%2, %3}];" : "=r"(tmp.x) : "l"(surfObject), "r"(layer), "r"(x));
   }
   *retVal = make_char1(tmp.x);
}

static __forceinline __declspec(__device__) void surf1DLayeredread(unsigned char *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   unsigned int tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.a1d.b8.trap  {%0}, [%1, {%2, %3}];" : "=r"(tmp) : "l"(surfObject), "r"(layer), "r"(x));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.a1d.b8.clamp {%0}, [%1, {%2, %3}];" : "=r"(tmp) : "l"(surfObject), "r"(layer), "r"(x));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.a1d.b8.zero  {%0}, [%1, {%2, %3}];" : "=r"(tmp) : "l"(surfObject), "r"(layer), "r"(x));
   }
   *retVal = (unsigned char)(tmp);
}

static __forceinline __declspec(__device__) void surf1DLayeredread(uchar1 *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   uint1 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.a1d.b8.trap  {%0}, [%1, {%2, %3}];" : "=r"(tmp.x) : "l"(surfObject), "r"(layer), "r"(x));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.a1d.b8.clamp {%0}, [%1, {%2, %3}];" : "=r"(tmp.x) : "l"(surfObject), "r"(layer), "r"(x));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.a1d.b8.zero  {%0}, [%1, {%2, %3}];" : "=r"(tmp.x) : "l"(surfObject), "r"(layer), "r"(x));
   }
   *retVal = make_uchar1(tmp.x);
}

static __forceinline __declspec(__device__) void surf1DLayeredread(short *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   short tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.a1d.b16.trap  {%0}, [%1, {%2, %3}];" : "=h"(tmp) : "l"(surfObject), "r"(layer), "r"(x));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.a1d.b16.clamp {%0}, [%1, {%2, %3}];" : "=h"(tmp) : "l"(surfObject), "r"(layer), "r"(x));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.a1d.b16.zero  {%0}, [%1, {%2, %3}];" : "=h"(tmp) : "l"(surfObject), "r"(layer), "r"(x));
   }
   *retVal = (short)(tmp);
}

static __forceinline __declspec(__device__) void surf1DLayeredread(short1 *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   short1 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.a1d.b16.trap  {%0}, [%1, {%2, %3}];" : "=h"(tmp.x) : "l"(surfObject), "r"(layer), "r"(x));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.a1d.b16.clamp {%0}, [%1, {%2, %3}];" : "=h"(tmp.x) : "l"(surfObject), "r"(layer), "r"(x));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.a1d.b16.zero  {%0}, [%1, {%2, %3}];" : "=h"(tmp.x) : "l"(surfObject), "r"(layer), "r"(x));
   }
   *retVal = make_short1(tmp.x);
}

static __forceinline __declspec(__device__) void surf1DLayeredread(unsigned short *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   unsigned short tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.a1d.b16.trap  {%0}, [%1, {%2, %3}];" : "=h"(tmp) : "l"(surfObject), "r"(layer), "r"(x));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.a1d.b16.clamp {%0}, [%1, {%2, %3}];" : "=h"(tmp) : "l"(surfObject), "r"(layer), "r"(x));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.a1d.b16.zero  {%0}, [%1, {%2, %3}];" : "=h"(tmp) : "l"(surfObject), "r"(layer), "r"(x));
   }
   *retVal = (unsigned short)(tmp);
}

static __forceinline __declspec(__device__) void surf1DLayeredread(ushort1 *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   ushort1 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.a1d.b16.trap  {%0}, [%1, {%2, %3}];" : "=h"(tmp.x) : "l"(surfObject), "r"(layer), "r"(x));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.a1d.b16.clamp {%0}, [%1, {%2, %3}];" : "=h"(tmp.x) : "l"(surfObject), "r"(layer), "r"(x));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.a1d.b16.zero  {%0}, [%1, {%2, %3}];" : "=h"(tmp.x) : "l"(surfObject), "r"(layer), "r"(x));
   }
   *retVal = make_ushort1(tmp.x);
}

static __forceinline __declspec(__device__) void surf1DLayeredread(int *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   int tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.a1d.b32.trap  {%0}, [%1, {%2, %3}];" : "=r"(tmp) : "l"(surfObject), "r"(layer), "r"(x));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.a1d.b32.clamp {%0}, [%1, {%2, %3}];" : "=r"(tmp) : "l"(surfObject), "r"(layer), "r"(x));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.a1d.b32.zero  {%0}, [%1, {%2, %3}];" : "=r"(tmp) : "l"(surfObject), "r"(layer), "r"(x));
   }
   *retVal = (int)(tmp);
}

static __forceinline __declspec(__device__) void surf1DLayeredread(int1 *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   int1 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.a1d.b32.trap  {%0}, [%1, {%2, %3}];" : "=r"(tmp.x) : "l"(surfObject), "r"(layer), "r"(x));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.a1d.b32.clamp {%0}, [%1, {%2, %3}];" : "=r"(tmp.x) : "l"(surfObject), "r"(layer), "r"(x));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.a1d.b32.zero  {%0}, [%1, {%2, %3}];" : "=r"(tmp.x) : "l"(surfObject), "r"(layer), "r"(x));
   }
   *retVal = make_int1(tmp.x);
}

static __forceinline __declspec(__device__) void surf1DLayeredread(unsigned int *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   unsigned int tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.a1d.b32.trap  {%0}, [%1, {%2, %3}];" : "=r"(tmp) : "l"(surfObject), "r"(layer), "r"(x));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.a1d.b32.clamp {%0}, [%1, {%2, %3}];" : "=r"(tmp) : "l"(surfObject), "r"(layer), "r"(x));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.a1d.b32.zero  {%0}, [%1, {%2, %3}];" : "=r"(tmp) : "l"(surfObject), "r"(layer), "r"(x));
   }
   *retVal = (unsigned int)(tmp);
}

static __forceinline __declspec(__device__) void surf1DLayeredread(uint1 *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   uint1 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.a1d.b32.trap  {%0}, [%1, {%2, %3}];" : "=r"(tmp.x) : "l"(surfObject), "r"(layer), "r"(x));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.a1d.b32.clamp {%0}, [%1, {%2, %3}];" : "=r"(tmp.x) : "l"(surfObject), "r"(layer), "r"(x));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.a1d.b32.zero  {%0}, [%1, {%2, %3}];" : "=r"(tmp.x) : "l"(surfObject), "r"(layer), "r"(x));
   }
   *retVal = make_uint1(tmp.x);
}

static __forceinline __declspec(__device__) void surf1DLayeredread(long long *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   long long tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.a1d.b64.trap  {%0}, [%1, {%2, %3}];" : "=l"(tmp) : "l"(surfObject), "r"(layer), "r"(x));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.a1d.b64.clamp {%0}, [%1, {%2, %3}];" : "=l"(tmp) : "l"(surfObject), "r"(layer), "r"(x));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.a1d.b64.zero  {%0}, [%1, {%2, %3}];" : "=l"(tmp) : "l"(surfObject), "r"(layer), "r"(x));
   }
   *retVal = (long long)(tmp);
}

static __forceinline __declspec(__device__) void surf1DLayeredread(longlong1 *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   longlong1 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.a1d.b64.trap  {%0}, [%1, {%2, %3}];" : "=l"(tmp.x) : "l"(surfObject), "r"(layer), "r"(x));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.a1d.b64.clamp {%0}, [%1, {%2, %3}];" : "=l"(tmp.x) : "l"(surfObject), "r"(layer), "r"(x));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.a1d.b64.zero  {%0}, [%1, {%2, %3}];" : "=l"(tmp.x) : "l"(surfObject), "r"(layer), "r"(x));
   }
   *retVal = make_longlong1(tmp.x);
}

static __forceinline __declspec(__device__) void surf1DLayeredread(unsigned long long *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   unsigned long long tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.a1d.b64.trap  {%0}, [%1, {%2, %3}];" : "=l"(tmp) : "l"(surfObject), "r"(layer), "r"(x));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.a1d.b64.clamp {%0}, [%1, {%2, %3}];" : "=l"(tmp) : "l"(surfObject), "r"(layer), "r"(x));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.a1d.b64.zero  {%0}, [%1, {%2, %3}];" : "=l"(tmp) : "l"(surfObject), "r"(layer), "r"(x));
   }
   *retVal = (unsigned long long)(tmp);
}

static __forceinline __declspec(__device__) void surf1DLayeredread(ulonglong1 *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   ulonglong1 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.a1d.b64.trap  {%0}, [%1, {%2, %3}];" : "=l"(tmp.x) : "l"(surfObject), "r"(layer), "r"(x));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.a1d.b64.clamp {%0}, [%1, {%2, %3}];" : "=l"(tmp.x) : "l"(surfObject), "r"(layer), "r"(x));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.a1d.b64.zero  {%0}, [%1, {%2, %3}];" : "=l"(tmp.x) : "l"(surfObject), "r"(layer), "r"(x));
   }
   *retVal = make_ulonglong1(tmp.x);
}

static __forceinline __declspec(__device__) void surf1DLayeredread(float *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   float tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.a1d.b32.trap  {%0}, [%1, {%2, %3}];" : "=f"(tmp) : "l"(surfObject), "r"(layer), "r"(x));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.a1d.b32.clamp {%0}, [%1, {%2, %3}];" : "=f"(tmp) : "l"(surfObject), "r"(layer), "r"(x));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.a1d.b32.zero  {%0}, [%1, {%2, %3}];" : "=f"(tmp) : "l"(surfObject), "r"(layer), "r"(x));
   }
   *retVal = (float)(tmp);
}

static __forceinline __declspec(__device__) void surf1DLayeredread(float1 *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   float1 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.a1d.b32.trap  {%0}, [%1, {%2, %3}];" : "=f"(tmp.x) : "l"(surfObject), "r"(layer), "r"(x));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.a1d.b32.clamp {%0}, [%1, {%2, %3}];" : "=f"(tmp.x) : "l"(surfObject), "r"(layer), "r"(x));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.a1d.b32.zero  {%0}, [%1, {%2, %3}];" : "=f"(tmp.x) : "l"(surfObject), "r"(layer), "r"(x));
   }
   *retVal = make_float1(tmp.x);
}







static __forceinline __declspec(__device__) void surf1DLayeredread(char2 *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   int2 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.a1d.v2.b8.trap  {%0, %1}, [%2, {%3, %4}];" : "=r"(tmp.x), "=r"(tmp.y) : "l"(surfObject), "r"(layer), "r"(x));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.a1d.v2.b8.clamp {%0, %1}, [%2, {%3, %4}];" : "=r"(tmp.x), "=r"(tmp.y) : "l"(surfObject), "r"(layer), "r"(x));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.a1d.v2.b8.zero  {%0, %1}, [%2, {%3, %4}];" : "=r"(tmp.x), "=r"(tmp.y) : "l"(surfObject), "r"(layer), "r"(x));
   }
   *retVal = make_char2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void surf1DLayeredread(uchar2 *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   uint2 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.a1d.v2.b8.trap  {%0, %1}, [%2, {%3, %4}];" : "=r"(tmp.x), "=r"(tmp.y) : "l"(surfObject), "r"(layer), "r"(x));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.a1d.v2.b8.clamp {%0, %1}, [%2, {%3, %4}];" : "=r"(tmp.x), "=r"(tmp.y) : "l"(surfObject), "r"(layer), "r"(x));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.a1d.v2.b8.zero  {%0, %1}, [%2, {%3, %4}];" : "=r"(tmp.x), "=r"(tmp.y) : "l"(surfObject), "r"(layer), "r"(x));
   }
   *retVal = make_uchar2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void surf1DLayeredread(short2 *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   short2 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.a1d.v2.b16.trap  {%0, %1}, [%2, {%3, %4}];" : "=h"(tmp.x), "=h"(tmp.y) : "l"(surfObject), "r"(layer), "r"(x));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.a1d.v2.b16.clamp {%0, %1}, [%2, {%3, %4}];" : "=h"(tmp.x), "=h"(tmp.y) : "l"(surfObject), "r"(layer), "r"(x));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.a1d.v2.b16.zero  {%0, %1}, [%2, {%3, %4}];" : "=h"(tmp.x), "=h"(tmp.y) : "l"(surfObject), "r"(layer), "r"(x));
   }
   *retVal = make_short2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void surf1DLayeredread(ushort2 *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   ushort2 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.a1d.v2.b16.trap  {%0, %1}, [%2, {%3, %4}];" : "=h"(tmp.x), "=h"(tmp.y) : "l"(surfObject), "r"(layer), "r"(x));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.a1d.v2.b16.clamp {%0, %1}, [%2, {%3, %4}];" : "=h"(tmp.x), "=h"(tmp.y) : "l"(surfObject), "r"(layer), "r"(x));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.a1d.v2.b16.zero  {%0, %1}, [%2, {%3, %4}];" : "=h"(tmp.x), "=h"(tmp.y) : "l"(surfObject), "r"(layer), "r"(x));
   }
   *retVal = make_ushort2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void surf1DLayeredread(int2 *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   int2 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.a1d.v2.b32.trap  {%0, %1}, [%2, {%3, %4}];" : "=r"(tmp.x), "=r"(tmp.y) : "l"(surfObject), "r"(layer), "r"(x));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.a1d.v2.b32.clamp {%0, %1}, [%2, {%3, %4}];" : "=r"(tmp.x), "=r"(tmp.y) : "l"(surfObject), "r"(layer), "r"(x));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.a1d.v2.b32.zero  {%0, %1}, [%2, {%3, %4}];" : "=r"(tmp.x), "=r"(tmp.y) : "l"(surfObject), "r"(layer), "r"(x));
   }
   *retVal = make_int2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void surf1DLayeredread(uint2 *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   uint2 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.a1d.v2.b32.trap  {%0, %1}, [%2, {%3, %4}];" : "=r"(tmp.x), "=r"(tmp.y) : "l"(surfObject), "r"(layer), "r"(x));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.a1d.v2.b32.clamp {%0, %1}, [%2, {%3, %4}];" : "=r"(tmp.x), "=r"(tmp.y) : "l"(surfObject), "r"(layer), "r"(x));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.a1d.v2.b32.zero  {%0, %1}, [%2, {%3, %4}];" : "=r"(tmp.x), "=r"(tmp.y) : "l"(surfObject), "r"(layer), "r"(x));
   }
   *retVal = make_uint2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void surf1DLayeredread(longlong2 *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   longlong2 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.a1d.v2.b64.trap  {%0, %1}, [%2, {%3, %4}];" : "=l"(tmp.x), "=l"(tmp.y) : "l"(surfObject), "r"(layer), "r"(x));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.a1d.v2.b64.clamp {%0, %1}, [%2, {%3, %4}];" : "=l"(tmp.x), "=l"(tmp.y) : "l"(surfObject), "r"(layer), "r"(x));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.a1d.v2.b64.zero  {%0, %1}, [%2, {%3, %4}];" : "=l"(tmp.x), "=l"(tmp.y) : "l"(surfObject), "r"(layer), "r"(x));
   }
   *retVal = make_longlong2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void surf1DLayeredread(ulonglong2 *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   ulonglong2 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.a1d.v2.b64.trap  {%0, %1}, [%2, {%3, %4}];" : "=l"(tmp.x), "=l"(tmp.y) : "l"(surfObject), "r"(layer), "r"(x));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.a1d.v2.b64.clamp {%0, %1}, [%2, {%3, %4}];" : "=l"(tmp.x), "=l"(tmp.y) : "l"(surfObject), "r"(layer), "r"(x));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.a1d.v2.b64.zero  {%0, %1}, [%2, {%3, %4}];" : "=l"(tmp.x), "=l"(tmp.y) : "l"(surfObject), "r"(layer), "r"(x));
   }
   *retVal = make_ulonglong2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void surf1DLayeredread(float2 *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   float2 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.a1d.v2.b32.trap  {%0, %1}, [%2, {%3, %4}];" : "=f"(tmp.x), "=f"(tmp.y) : "l"(surfObject), "r"(layer), "r"(x));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.a1d.v2.b32.clamp {%0, %1}, [%2, {%3, %4}];" : "=f"(tmp.x), "=f"(tmp.y) : "l"(surfObject), "r"(layer), "r"(x));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.a1d.v2.b32.zero  {%0, %1}, [%2, {%3, %4}];" : "=f"(tmp.x), "=f"(tmp.y) : "l"(surfObject), "r"(layer), "r"(x));
   }
   *retVal = make_float2(tmp.x, tmp.y);
}







static __forceinline __declspec(__device__) void surf1DLayeredread(char4 *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   int4 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.a1d.v4.b8.trap  {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(surfObject), "r"(layer), "r"(x));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.a1d.v4.b8.clamp {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(surfObject), "r"(layer), "r"(x));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.a1d.v4.b8.zero  {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(surfObject), "r"(layer), "r"(x));
   }
   *retVal = make_char4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __forceinline __declspec(__device__) void surf1DLayeredread(uchar4 *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   uint4 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.a1d.v4.b8.trap  {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(surfObject), "r"(layer), "r"(x));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.a1d.v4.b8.clamp {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(surfObject), "r"(layer), "r"(x));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.a1d.v4.b8.zero  {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(surfObject), "r"(layer), "r"(x));
   }
   *retVal = make_uchar4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __forceinline __declspec(__device__) void surf1DLayeredread(short4 *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   short4 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.a1d.v4.b16.trap  {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=h"(tmp.x), "=h"(tmp.y), "=h"(tmp.z), "=h"(tmp.w) : "l"(surfObject), "r"(layer), "r"(x));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.a1d.v4.b16.clamp {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=h"(tmp.x), "=h"(tmp.y), "=h"(tmp.z), "=h"(tmp.w) : "l"(surfObject), "r"(layer), "r"(x));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.a1d.v4.b16.zero  {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=h"(tmp.x), "=h"(tmp.y), "=h"(tmp.z), "=h"(tmp.w) : "l"(surfObject), "r"(layer), "r"(x));
   }
   *retVal = make_short4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __forceinline __declspec(__device__) void surf1DLayeredread(ushort4 *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   ushort4 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.a1d.v4.b16.trap  {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=h"(tmp.x), "=h"(tmp.y), "=h"(tmp.z), "=h"(tmp.w) : "l"(surfObject), "r"(layer), "r"(x));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.a1d.v4.b16.clamp {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=h"(tmp.x), "=h"(tmp.y), "=h"(tmp.z), "=h"(tmp.w) : "l"(surfObject), "r"(layer), "r"(x));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.a1d.v4.b16.zero  {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=h"(tmp.x), "=h"(tmp.y), "=h"(tmp.z), "=h"(tmp.w) : "l"(surfObject), "r"(layer), "r"(x));
   }
   *retVal = make_ushort4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __forceinline __declspec(__device__) void surf1DLayeredread(int4 *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   int4 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.a1d.v4.b32.trap  {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(surfObject), "r"(layer), "r"(x));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.a1d.v4.b32.clamp {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(surfObject), "r"(layer), "r"(x));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.a1d.v4.b32.zero  {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(surfObject), "r"(layer), "r"(x));
   }
   *retVal = make_int4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __forceinline __declspec(__device__) void surf1DLayeredread(uint4 *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   uint4 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.a1d.v4.b32.trap  {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(surfObject), "r"(layer), "r"(x));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.a1d.v4.b32.clamp {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(surfObject), "r"(layer), "r"(x));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.a1d.v4.b32.zero  {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(surfObject), "r"(layer), "r"(x));
   }
   *retVal = make_uint4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __forceinline __declspec(__device__) void surf1DLayeredread(float4 *retVal, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   float4 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.a1d.v4.b32.trap  {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=f"(tmp.x), "=f"(tmp.y), "=f"(tmp.z), "=f"(tmp.w) : "l"(surfObject), "r"(layer), "r"(x));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.a1d.v4.b32.clamp {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=f"(tmp.x), "=f"(tmp.y), "=f"(tmp.z), "=f"(tmp.w) : "l"(surfObject), "r"(layer), "r"(x));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.a1d.v4.b32.zero  {%0, %1, %2, %3}, [%4, {%5, %6}];" : "=f"(tmp.x), "=f"(tmp.y), "=f"(tmp.z), "=f"(tmp.w) : "l"(surfObject), "r"(layer), "r"(x));
   }
   *retVal = make_float4(tmp.x, tmp.y, tmp.z, tmp.w);
}







template <class T>
static __forceinline __declspec(__device__) T surf1DLayeredread(cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   T ret;
   surf1DLayeredread(&ret, surfObject, x, layer, boundaryMode);
   return ret;
}







static __forceinline __declspec(__device__) void surf2DLayeredread(char *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   int tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.a2d.b8.trap  {%0}, [%1, {%2, %3, %4, %4}];" : "=r"(tmp) : "l"(surfObject), "r"(layer), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.a2d.b8.clamp {%0}, [%1, {%2, %3, %4, %4}];" : "=r"(tmp) : "l"(surfObject), "r"(layer), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.a2d.b8.zero  {%0}, [%1, {%2, %3, %4, %4}];" : "=r"(tmp) : "l"(surfObject), "r"(layer), "r"(x), "r"(y));
   }
   *retVal = (char)(tmp);
}

static __forceinline __declspec(__device__) void surf2DLayeredread(signed char *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   int tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.a2d.b8.trap  {%0}, [%1, {%2, %3, %4, %4}];" : "=r"(tmp) : "l"(surfObject), "r"(layer), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.a2d.b8.clamp {%0}, [%1, {%2, %3, %4, %4}];" : "=r"(tmp) : "l"(surfObject), "r"(layer), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.a2d.b8.zero  {%0}, [%1, {%2, %3, %4, %4}];" : "=r"(tmp) : "l"(surfObject), "r"(layer), "r"(x), "r"(y));
   }
   *retVal = (signed char)(tmp);
}

static __forceinline __declspec(__device__) void surf2DLayeredread(char1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   int1 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.a2d.b8.trap  {%0}, [%1, {%2, %3, %4, %4}];" : "=r"(tmp.x) : "l"(surfObject), "r"(layer), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.a2d.b8.clamp {%0}, [%1, {%2, %3, %4, %4}];" : "=r"(tmp.x) : "l"(surfObject), "r"(layer), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.a2d.b8.zero  {%0}, [%1, {%2, %3, %4, %4}];" : "=r"(tmp.x) : "l"(surfObject), "r"(layer), "r"(x), "r"(y));
   }
   *retVal = make_char1(tmp.x);
}

static __forceinline __declspec(__device__) void surf2DLayeredread(unsigned char *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   unsigned int tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.a2d.b8.trap  {%0}, [%1, {%2, %3, %4, %4}];" : "=r"(tmp) : "l"(surfObject), "r"(layer), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.a2d.b8.clamp {%0}, [%1, {%2, %3, %4, %4}];" : "=r"(tmp) : "l"(surfObject), "r"(layer), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.a2d.b8.zero  {%0}, [%1, {%2, %3, %4, %4}];" : "=r"(tmp) : "l"(surfObject), "r"(layer), "r"(x), "r"(y));
   }
   *retVal = (unsigned char)(tmp);
}

static __forceinline __declspec(__device__) void surf2DLayeredread(uchar1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   uint1 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.a2d.b8.trap  {%0}, [%1, {%2, %3, %4, %4}];" : "=r"(tmp.x) : "l"(surfObject), "r"(layer), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.a2d.b8.clamp {%0}, [%1, {%2, %3, %4, %4}];" : "=r"(tmp.x) : "l"(surfObject), "r"(layer), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.a2d.b8.zero  {%0}, [%1, {%2, %3, %4, %4}];" : "=r"(tmp.x) : "l"(surfObject), "r"(layer), "r"(x), "r"(y));
   }
   *retVal = make_uchar1(tmp.x);
}

static __forceinline __declspec(__device__) void surf2DLayeredread(short *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   short tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.a2d.b16.trap  {%0}, [%1, {%2, %3, %4, %4}];" : "=h"(tmp) : "l"(surfObject), "r"(layer), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.a2d.b16.clamp {%0}, [%1, {%2, %3, %4, %4}];" : "=h"(tmp) : "l"(surfObject), "r"(layer), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.a2d.b16.zero  {%0}, [%1, {%2, %3, %4, %4}];" : "=h"(tmp) : "l"(surfObject), "r"(layer), "r"(x), "r"(y));
   }
   *retVal = (short)(tmp);
}

static __forceinline __declspec(__device__) void surf2DLayeredread(short1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   short1 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.a2d.b16.trap  {%0}, [%1, {%2, %3, %4, %4}];" : "=h"(tmp.x) : "l"(surfObject), "r"(layer), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.a2d.b16.clamp {%0}, [%1, {%2, %3, %4, %4}];" : "=h"(tmp.x) : "l"(surfObject), "r"(layer), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.a2d.b16.zero  {%0}, [%1, {%2, %3, %4, %4}];" : "=h"(tmp.x) : "l"(surfObject), "r"(layer), "r"(x), "r"(y));
   }
   *retVal = make_short1(tmp.x);
}

static __forceinline __declspec(__device__) void surf2DLayeredread(unsigned short *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   unsigned short tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.a2d.b16.trap  {%0}, [%1, {%2, %3, %4, %4}];" : "=h"(tmp) : "l"(surfObject), "r"(layer), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.a2d.b16.clamp {%0}, [%1, {%2, %3, %4, %4}];" : "=h"(tmp) : "l"(surfObject), "r"(layer), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.a2d.b16.zero  {%0}, [%1, {%2, %3, %4, %4}];" : "=h"(tmp) : "l"(surfObject), "r"(layer), "r"(x), "r"(y));
   }
   *retVal = (unsigned short)(tmp);
}

static __forceinline __declspec(__device__) void surf2DLayeredread(ushort1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   ushort1 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.a2d.b16.trap  {%0}, [%1, {%2, %3, %4, %4}];" : "=h"(tmp.x) : "l"(surfObject), "r"(layer), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.a2d.b16.clamp {%0}, [%1, {%2, %3, %4, %4}];" : "=h"(tmp.x) : "l"(surfObject), "r"(layer), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.a2d.b16.zero  {%0}, [%1, {%2, %3, %4, %4}];" : "=h"(tmp.x) : "l"(surfObject), "r"(layer), "r"(x), "r"(y));
   }
   *retVal = make_ushort1(tmp.x);
}

static __forceinline __declspec(__device__) void surf2DLayeredread(int *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   int tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.a2d.b32.trap  {%0}, [%1, {%2, %3, %4, %4}];" : "=r"(tmp) : "l"(surfObject), "r"(layer), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.a2d.b32.clamp {%0}, [%1, {%2, %3, %4, %4}];" : "=r"(tmp) : "l"(surfObject), "r"(layer), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.a2d.b32.zero  {%0}, [%1, {%2, %3, %4, %4}];" : "=r"(tmp) : "l"(surfObject), "r"(layer), "r"(x), "r"(y));
   }
   *retVal = (int)(tmp);
}

static __forceinline __declspec(__device__) void surf2DLayeredread(int1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   int1 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.a2d.b32.trap  {%0}, [%1, {%2, %3, %4, %4}];" : "=r"(tmp.x) : "l"(surfObject), "r"(layer), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.a2d.b32.clamp {%0}, [%1, {%2, %3, %4, %4}];" : "=r"(tmp.x) : "l"(surfObject), "r"(layer), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.a2d.b32.zero  {%0}, [%1, {%2, %3, %4, %4}];" : "=r"(tmp.x) : "l"(surfObject), "r"(layer), "r"(x), "r"(y));
   }
   *retVal = make_int1(tmp.x);
}

static __forceinline __declspec(__device__) void surf2DLayeredread(unsigned int *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   unsigned int tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.a2d.b32.trap  {%0}, [%1, {%2, %3, %4, %4}];" : "=r"(tmp) : "l"(surfObject), "r"(layer), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.a2d.b32.clamp {%0}, [%1, {%2, %3, %4, %4}];" : "=r"(tmp) : "l"(surfObject), "r"(layer), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.a2d.b32.zero  {%0}, [%1, {%2, %3, %4, %4}];" : "=r"(tmp) : "l"(surfObject), "r"(layer), "r"(x), "r"(y));
   }
   *retVal = (unsigned int)(tmp);
}

static __forceinline __declspec(__device__) void surf2DLayeredread(uint1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   uint1 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.a2d.b32.trap  {%0}, [%1, {%2, %3, %4, %4}];" : "=r"(tmp.x) : "l"(surfObject), "r"(layer), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.a2d.b32.clamp {%0}, [%1, {%2, %3, %4, %4}];" : "=r"(tmp.x) : "l"(surfObject), "r"(layer), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.a2d.b32.zero  {%0}, [%1, {%2, %3, %4, %4}];" : "=r"(tmp.x) : "l"(surfObject), "r"(layer), "r"(x), "r"(y));
   }
   *retVal = make_uint1(tmp.x);
}

static __forceinline __declspec(__device__) void surf2DLayeredread(long long *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   long long tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.a2d.b64.trap  {%0}, [%1, {%2, %3, %4, %4}];" : "=l"(tmp) : "l"(surfObject), "r"(layer), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.a2d.b64.clamp {%0}, [%1, {%2, %3, %4, %4}];" : "=l"(tmp) : "l"(surfObject), "r"(layer), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.a2d.b64.zero  {%0}, [%1, {%2, %3, %4, %4}];" : "=l"(tmp) : "l"(surfObject), "r"(layer), "r"(x), "r"(y));
   }
   *retVal = (long long)(tmp);
}

static __forceinline __declspec(__device__) void surf2DLayeredread(longlong1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   longlong1 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.a2d.b64.trap  {%0}, [%1, {%2, %3, %4, %4}];" : "=l"(tmp.x) : "l"(surfObject), "r"(layer), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.a2d.b64.clamp {%0}, [%1, {%2, %3, %4, %4}];" : "=l"(tmp.x) : "l"(surfObject), "r"(layer), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.a2d.b64.zero  {%0}, [%1, {%2, %3, %4, %4}];" : "=l"(tmp.x) : "l"(surfObject), "r"(layer), "r"(x), "r"(y));
   }
   *retVal = make_longlong1(tmp.x);
}

static __forceinline __declspec(__device__) void surf2DLayeredread(unsigned long long *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   unsigned long long tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.a2d.b64.trap  {%0}, [%1, {%2, %3, %4, %4}];" : "=l"(tmp) : "l"(surfObject), "r"(layer), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.a2d.b64.clamp {%0}, [%1, {%2, %3, %4, %4}];" : "=l"(tmp) : "l"(surfObject), "r"(layer), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.a2d.b64.zero  {%0}, [%1, {%2, %3, %4, %4}];" : "=l"(tmp) : "l"(surfObject), "r"(layer), "r"(x), "r"(y));
   }
   *retVal = (unsigned long long)(tmp);
}

static __forceinline __declspec(__device__) void surf2DLayeredread(ulonglong1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   ulonglong1 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.a2d.b64.trap  {%0}, [%1, {%2, %3, %4, %4}];" : "=l"(tmp.x) : "l"(surfObject), "r"(layer), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.a2d.b64.clamp {%0}, [%1, {%2, %3, %4, %4}];" : "=l"(tmp.x) : "l"(surfObject), "r"(layer), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.a2d.b64.zero  {%0}, [%1, {%2, %3, %4, %4}];" : "=l"(tmp.x) : "l"(surfObject), "r"(layer), "r"(x), "r"(y));
   }
   *retVal = make_ulonglong1(tmp.x);
}

static __forceinline __declspec(__device__) void surf2DLayeredread(float *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   float tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.a2d.b32.trap  {%0}, [%1, {%2, %3, %4, %4}];" : "=f"(tmp) : "l"(surfObject), "r"(layer), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.a2d.b32.clamp {%0}, [%1, {%2, %3, %4, %4}];" : "=f"(tmp) : "l"(surfObject), "r"(layer), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.a2d.b32.zero  {%0}, [%1, {%2, %3, %4, %4}];" : "=f"(tmp) : "l"(surfObject), "r"(layer), "r"(x), "r"(y));
   }
   *retVal = (float)(tmp);
}

static __forceinline __declspec(__device__) void surf2DLayeredread(float1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   float1 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.a2d.b32.trap  {%0}, [%1, {%2, %3, %4, %4}];" : "=f"(tmp.x) : "l"(surfObject), "r"(layer), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.a2d.b32.clamp {%0}, [%1, {%2, %3, %4, %4}];" : "=f"(tmp.x) : "l"(surfObject), "r"(layer), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.a2d.b32.zero  {%0}, [%1, {%2, %3, %4, %4}];" : "=f"(tmp.x) : "l"(surfObject), "r"(layer), "r"(x), "r"(y));
   }
   *retVal = make_float1(tmp.x);
}







static __forceinline __declspec(__device__) void surf2DLayeredread(char2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   int2 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.a2d.v2.b8.trap  {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=r"(tmp.x), "=r"(tmp.y) : "l"(surfObject), "r"(layer), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.a2d.v2.b8.clamp {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=r"(tmp.x), "=r"(tmp.y) : "l"(surfObject), "r"(layer), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.a2d.v2.b8.zero  {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=r"(tmp.x), "=r"(tmp.y) : "l"(surfObject), "r"(layer), "r"(x), "r"(y));
   }
   *retVal = make_char2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void surf2DLayeredread(uchar2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   uint2 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.a2d.v2.b8.trap  {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=r"(tmp.x), "=r"(tmp.y) : "l"(surfObject), "r"(layer), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.a2d.v2.b8.clamp {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=r"(tmp.x), "=r"(tmp.y) : "l"(surfObject), "r"(layer), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.a2d.v2.b8.zero  {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=r"(tmp.x), "=r"(tmp.y) : "l"(surfObject), "r"(layer), "r"(x), "r"(y));
   }
   *retVal = make_uchar2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void surf2DLayeredread(short2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   short2 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.a2d.v2.b16.trap  {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=h"(tmp.x), "=h"(tmp.y) : "l"(surfObject), "r"(layer), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.a2d.v2.b16.clamp {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=h"(tmp.x), "=h"(tmp.y) : "l"(surfObject), "r"(layer), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.a2d.v2.b16.zero  {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=h"(tmp.x), "=h"(tmp.y) : "l"(surfObject), "r"(layer), "r"(x), "r"(y));
   }
   *retVal = make_short2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void surf2DLayeredread(ushort2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   ushort2 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.a2d.v2.b16.trap  {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=h"(tmp.x), "=h"(tmp.y) : "l"(surfObject), "r"(layer), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.a2d.v2.b16.clamp {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=h"(tmp.x), "=h"(tmp.y) : "l"(surfObject), "r"(layer), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.a2d.v2.b16.zero  {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=h"(tmp.x), "=h"(tmp.y) : "l"(surfObject), "r"(layer), "r"(x), "r"(y));
   }
   *retVal = make_ushort2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void surf2DLayeredread(int2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   int2 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.a2d.v2.b32.trap  {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=r"(tmp.x), "=r"(tmp.y) : "l"(surfObject), "r"(layer), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.a2d.v2.b32.clamp {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=r"(tmp.x), "=r"(tmp.y) : "l"(surfObject), "r"(layer), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.a2d.v2.b32.zero  {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=r"(tmp.x), "=r"(tmp.y) : "l"(surfObject), "r"(layer), "r"(x), "r"(y));
   }
   *retVal = make_int2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void surf2DLayeredread(uint2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   uint2 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.a2d.v2.b32.trap  {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=r"(tmp.x), "=r"(tmp.y) : "l"(surfObject), "r"(layer), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.a2d.v2.b32.clamp {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=r"(tmp.x), "=r"(tmp.y) : "l"(surfObject), "r"(layer), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.a2d.v2.b32.zero  {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=r"(tmp.x), "=r"(tmp.y) : "l"(surfObject), "r"(layer), "r"(x), "r"(y));
   }
   *retVal = make_uint2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void surf2DLayeredread(longlong2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   longlong2 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.a2d.v2.b64.trap  {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=l"(tmp.x), "=l"(tmp.y) : "l"(surfObject), "r"(layer), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.a2d.v2.b64.clamp {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=l"(tmp.x), "=l"(tmp.y) : "l"(surfObject), "r"(layer), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.a2d.v2.b64.zero  {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=l"(tmp.x), "=l"(tmp.y) : "l"(surfObject), "r"(layer), "r"(x), "r"(y));
   }
   *retVal = make_longlong2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void surf2DLayeredread(ulonglong2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   ulonglong2 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.a2d.v2.b64.trap  {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=l"(tmp.x), "=l"(tmp.y) : "l"(surfObject), "r"(layer), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.a2d.v2.b64.clamp {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=l"(tmp.x), "=l"(tmp.y) : "l"(surfObject), "r"(layer), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.a2d.v2.b64.zero  {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=l"(tmp.x), "=l"(tmp.y) : "l"(surfObject), "r"(layer), "r"(x), "r"(y));
   }
   *retVal = make_ulonglong2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void surf2DLayeredread(float2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   float2 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.a2d.v2.b32.trap  {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=f"(tmp.x), "=f"(tmp.y) : "l"(surfObject), "r"(layer), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.a2d.v2.b32.clamp {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=f"(tmp.x), "=f"(tmp.y) : "l"(surfObject), "r"(layer), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.a2d.v2.b32.zero  {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=f"(tmp.x), "=f"(tmp.y) : "l"(surfObject), "r"(layer), "r"(x), "r"(y));
   }
   *retVal = make_float2(tmp.x, tmp.y);
}







static __forceinline __declspec(__device__) void surf2DLayeredread(char4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   int4 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.a2d.v4.b8.trap  {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(surfObject), "r"(layer), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.a2d.v4.b8.clamp {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(surfObject), "r"(layer), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.a2d.v4.b8.zero  {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(surfObject), "r"(layer), "r"(x), "r"(y));
   }
   *retVal = make_char4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __forceinline __declspec(__device__) void surf2DLayeredread(uchar4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   uint4 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.a2d.v4.b8.trap  {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(surfObject), "r"(layer), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.a2d.v4.b8.clamp {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(surfObject), "r"(layer), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.a2d.v4.b8.zero  {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(surfObject), "r"(layer), "r"(x), "r"(y));
   }
   *retVal = make_uchar4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __forceinline __declspec(__device__) void surf2DLayeredread(short4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   short4 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.a2d.v4.b16.trap  {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=h"(tmp.x), "=h"(tmp.y), "=h"(tmp.z), "=h"(tmp.w) : "l"(surfObject), "r"(layer), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.a2d.v4.b16.clamp {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=h"(tmp.x), "=h"(tmp.y), "=h"(tmp.z), "=h"(tmp.w) : "l"(surfObject), "r"(layer), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.a2d.v4.b16.zero  {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=h"(tmp.x), "=h"(tmp.y), "=h"(tmp.z), "=h"(tmp.w) : "l"(surfObject), "r"(layer), "r"(x), "r"(y));
   }
   *retVal = make_short4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __forceinline __declspec(__device__) void surf2DLayeredread(ushort4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   ushort4 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.a2d.v4.b16.trap  {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=h"(tmp.x), "=h"(tmp.y), "=h"(tmp.z), "=h"(tmp.w) : "l"(surfObject), "r"(layer), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.a2d.v4.b16.clamp {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=h"(tmp.x), "=h"(tmp.y), "=h"(tmp.z), "=h"(tmp.w) : "l"(surfObject), "r"(layer), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.a2d.v4.b16.zero  {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=h"(tmp.x), "=h"(tmp.y), "=h"(tmp.z), "=h"(tmp.w) : "l"(surfObject), "r"(layer), "r"(x), "r"(y));
   }
   *retVal = make_ushort4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __forceinline __declspec(__device__) void surf2DLayeredread(int4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   int4 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.a2d.v4.b32.trap  {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(surfObject), "r"(layer), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.a2d.v4.b32.clamp {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(surfObject), "r"(layer), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.a2d.v4.b32.zero  {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(surfObject), "r"(layer), "r"(x), "r"(y));
   }
   *retVal = make_int4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __forceinline __declspec(__device__) void surf2DLayeredread(uint4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   uint4 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.a2d.v4.b32.trap  {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(surfObject), "r"(layer), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.a2d.v4.b32.clamp {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(surfObject), "r"(layer), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.a2d.v4.b32.zero  {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(surfObject), "r"(layer), "r"(x), "r"(y));
   }
   *retVal = make_uint4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __forceinline __declspec(__device__) void surf2DLayeredread(float4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   float4 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.a2d.v4.b32.trap  {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=f"(tmp.x), "=f"(tmp.y), "=f"(tmp.z), "=f"(tmp.w) : "l"(surfObject), "r"(layer), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.a2d.v4.b32.clamp {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=f"(tmp.x), "=f"(tmp.y), "=f"(tmp.z), "=f"(tmp.w) : "l"(surfObject), "r"(layer), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.a2d.v4.b32.zero  {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=f"(tmp.x), "=f"(tmp.y), "=f"(tmp.z), "=f"(tmp.w) : "l"(surfObject), "r"(layer), "r"(x), "r"(y));
   }
   *retVal = make_float4(tmp.x, tmp.y, tmp.z, tmp.w);
}







template <class T>
static __forceinline __declspec(__device__) T surf2DLayeredread(cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   T ret;
   surf2DLayeredread(&ret, surfObject, x, y, layer, boundaryMode);
   return ret;
}







static __forceinline __declspec(__device__) void surfCubemapread(char *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   int tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.a2d.b8.trap  {%0}, [%1, {%2, %3, %4, %4}];" : "=r"(tmp) : "l"(surfObject), "r"(face), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.a2d.b8.clamp {%0}, [%1, {%2, %3, %4, %4}];" : "=r"(tmp) : "l"(surfObject), "r"(face), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.a2d.b8.zero  {%0}, [%1, {%2, %3, %4, %4}];" : "=r"(tmp) : "l"(surfObject), "r"(face), "r"(x), "r"(y));
   }
   *retVal = (char)(tmp);
}

static __forceinline __declspec(__device__) void surfCubemapread(signed char *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   int tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.a2d.b8.trap  {%0}, [%1, {%2, %3, %4, %4}];" : "=r"(tmp) : "l"(surfObject), "r"(face), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.a2d.b8.clamp {%0}, [%1, {%2, %3, %4, %4}];" : "=r"(tmp) : "l"(surfObject), "r"(face), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.a2d.b8.zero  {%0}, [%1, {%2, %3, %4, %4}];" : "=r"(tmp) : "l"(surfObject), "r"(face), "r"(x), "r"(y));
   }
   *retVal = (signed char)(tmp);
}

static __forceinline __declspec(__device__) void surfCubemapread(char1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   int1 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.a2d.b8.trap  {%0}, [%1, {%2, %3, %4, %4}];" : "=r"(tmp.x) : "l"(surfObject), "r"(face), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.a2d.b8.clamp {%0}, [%1, {%2, %3, %4, %4}];" : "=r"(tmp.x) : "l"(surfObject), "r"(face), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.a2d.b8.zero  {%0}, [%1, {%2, %3, %4, %4}];" : "=r"(tmp.x) : "l"(surfObject), "r"(face), "r"(x), "r"(y));
   }
   *retVal = make_char1(tmp.x);
}

static __forceinline __declspec(__device__) void surfCubemapread(unsigned char *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   unsigned int tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.a2d.b8.trap  {%0}, [%1, {%2, %3, %4, %4}];" : "=r"(tmp) : "l"(surfObject), "r"(face), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.a2d.b8.clamp {%0}, [%1, {%2, %3, %4, %4}];" : "=r"(tmp) : "l"(surfObject), "r"(face), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.a2d.b8.zero  {%0}, [%1, {%2, %3, %4, %4}];" : "=r"(tmp) : "l"(surfObject), "r"(face), "r"(x), "r"(y));
   }
   *retVal = (unsigned char)(tmp);
}

static __forceinline __declspec(__device__) void surfCubemapread(uchar1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   uint1 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.a2d.b8.trap  {%0}, [%1, {%2, %3, %4, %4}];" : "=r"(tmp.x) : "l"(surfObject), "r"(face), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.a2d.b8.clamp {%0}, [%1, {%2, %3, %4, %4}];" : "=r"(tmp.x) : "l"(surfObject), "r"(face), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.a2d.b8.zero  {%0}, [%1, {%2, %3, %4, %4}];" : "=r"(tmp.x) : "l"(surfObject), "r"(face), "r"(x), "r"(y));
   }
   *retVal = make_uchar1(tmp.x);
}

static __forceinline __declspec(__device__) void surfCubemapread(short *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   short tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.a2d.b16.trap  {%0}, [%1, {%2, %3, %4, %4}];" : "=h"(tmp) : "l"(surfObject), "r"(face), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.a2d.b16.clamp {%0}, [%1, {%2, %3, %4, %4}];" : "=h"(tmp) : "l"(surfObject), "r"(face), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.a2d.b16.zero  {%0}, [%1, {%2, %3, %4, %4}];" : "=h"(tmp) : "l"(surfObject), "r"(face), "r"(x), "r"(y));
   }
   *retVal = (short)(tmp);
}

static __forceinline __declspec(__device__) void surfCubemapread(short1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   short1 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.a2d.b16.trap  {%0}, [%1, {%2, %3, %4, %4}];" : "=h"(tmp.x) : "l"(surfObject), "r"(face), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.a2d.b16.clamp {%0}, [%1, {%2, %3, %4, %4}];" : "=h"(tmp.x) : "l"(surfObject), "r"(face), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.a2d.b16.zero  {%0}, [%1, {%2, %3, %4, %4}];" : "=h"(tmp.x) : "l"(surfObject), "r"(face), "r"(x), "r"(y));
   }
   *retVal = make_short1(tmp.x);
}

static __forceinline __declspec(__device__) void surfCubemapread(unsigned short *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   unsigned short tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.a2d.b16.trap  {%0}, [%1, {%2, %3, %4, %4}];" : "=h"(tmp) : "l"(surfObject), "r"(face), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.a2d.b16.clamp {%0}, [%1, {%2, %3, %4, %4}];" : "=h"(tmp) : "l"(surfObject), "r"(face), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.a2d.b16.zero  {%0}, [%1, {%2, %3, %4, %4}];" : "=h"(tmp) : "l"(surfObject), "r"(face), "r"(x), "r"(y));
   }
   *retVal = (unsigned short)(tmp);
}

static __forceinline __declspec(__device__) void surfCubemapread(ushort1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   ushort1 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.a2d.b16.trap  {%0}, [%1, {%2, %3, %4, %4}];" : "=h"(tmp.x) : "l"(surfObject), "r"(face), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.a2d.b16.clamp {%0}, [%1, {%2, %3, %4, %4}];" : "=h"(tmp.x) : "l"(surfObject), "r"(face), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.a2d.b16.zero  {%0}, [%1, {%2, %3, %4, %4}];" : "=h"(tmp.x) : "l"(surfObject), "r"(face), "r"(x), "r"(y));
   }
   *retVal = make_ushort1(tmp.x);
}

static __forceinline __declspec(__device__) void surfCubemapread(int *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   int tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.a2d.b32.trap  {%0}, [%1, {%2, %3, %4, %4}];" : "=r"(tmp) : "l"(surfObject), "r"(face), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.a2d.b32.clamp {%0}, [%1, {%2, %3, %4, %4}];" : "=r"(tmp) : "l"(surfObject), "r"(face), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.a2d.b32.zero  {%0}, [%1, {%2, %3, %4, %4}];" : "=r"(tmp) : "l"(surfObject), "r"(face), "r"(x), "r"(y));
   }
   *retVal = (int)(tmp);
}

static __forceinline __declspec(__device__) void surfCubemapread(int1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   int1 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.a2d.b32.trap  {%0}, [%1, {%2, %3, %4, %4}];" : "=r"(tmp.x) : "l"(surfObject), "r"(face), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.a2d.b32.clamp {%0}, [%1, {%2, %3, %4, %4}];" : "=r"(tmp.x) : "l"(surfObject), "r"(face), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.a2d.b32.zero  {%0}, [%1, {%2, %3, %4, %4}];" : "=r"(tmp.x) : "l"(surfObject), "r"(face), "r"(x), "r"(y));
   }
   *retVal = make_int1(tmp.x);
}

static __forceinline __declspec(__device__) void surfCubemapread(unsigned int *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   unsigned int tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.a2d.b32.trap  {%0}, [%1, {%2, %3, %4, %4}];" : "=r"(tmp) : "l"(surfObject), "r"(face), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.a2d.b32.clamp {%0}, [%1, {%2, %3, %4, %4}];" : "=r"(tmp) : "l"(surfObject), "r"(face), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.a2d.b32.zero  {%0}, [%1, {%2, %3, %4, %4}];" : "=r"(tmp) : "l"(surfObject), "r"(face), "r"(x), "r"(y));
   }
   *retVal = (unsigned int)(tmp);
}

static __forceinline __declspec(__device__) void surfCubemapread(uint1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   uint1 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.a2d.b32.trap  {%0}, [%1, {%2, %3, %4, %4}];" : "=r"(tmp.x) : "l"(surfObject), "r"(face), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.a2d.b32.clamp {%0}, [%1, {%2, %3, %4, %4}];" : "=r"(tmp.x) : "l"(surfObject), "r"(face), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.a2d.b32.zero  {%0}, [%1, {%2, %3, %4, %4}];" : "=r"(tmp.x) : "l"(surfObject), "r"(face), "r"(x), "r"(y));
   }
   *retVal = make_uint1(tmp.x);
}

static __forceinline __declspec(__device__) void surfCubemapread(long long *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   long long tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.a2d.b64.trap  {%0}, [%1, {%2, %3, %4, %4}];" : "=l"(tmp) : "l"(surfObject), "r"(face), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.a2d.b64.clamp {%0}, [%1, {%2, %3, %4, %4}];" : "=l"(tmp) : "l"(surfObject), "r"(face), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.a2d.b64.zero  {%0}, [%1, {%2, %3, %4, %4}];" : "=l"(tmp) : "l"(surfObject), "r"(face), "r"(x), "r"(y));
   }
   *retVal = (long long)(tmp);
}

static __forceinline __declspec(__device__) void surfCubemapread(longlong1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   longlong1 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.a2d.b64.trap  {%0}, [%1, {%2, %3, %4, %4}];" : "=l"(tmp.x) : "l"(surfObject), "r"(face), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.a2d.b64.clamp {%0}, [%1, {%2, %3, %4, %4}];" : "=l"(tmp.x) : "l"(surfObject), "r"(face), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.a2d.b64.zero  {%0}, [%1, {%2, %3, %4, %4}];" : "=l"(tmp.x) : "l"(surfObject), "r"(face), "r"(x), "r"(y));
   }
   *retVal = make_longlong1(tmp.x);
}

static __forceinline __declspec(__device__) void surfCubemapread(unsigned long long *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   unsigned long long tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.a2d.b64.trap  {%0}, [%1, {%2, %3, %4, %4}];" : "=l"(tmp) : "l"(surfObject), "r"(face), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.a2d.b64.clamp {%0}, [%1, {%2, %3, %4, %4}];" : "=l"(tmp) : "l"(surfObject), "r"(face), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.a2d.b64.zero  {%0}, [%1, {%2, %3, %4, %4}];" : "=l"(tmp) : "l"(surfObject), "r"(face), "r"(x), "r"(y));
   }
   *retVal = (unsigned long long)(tmp);
}

static __forceinline __declspec(__device__) void surfCubemapread(ulonglong1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   ulonglong1 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.a2d.b64.trap  {%0}, [%1, {%2, %3, %4, %4}];" : "=l"(tmp.x) : "l"(surfObject), "r"(face), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.a2d.b64.clamp {%0}, [%1, {%2, %3, %4, %4}];" : "=l"(tmp.x) : "l"(surfObject), "r"(face), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.a2d.b64.zero  {%0}, [%1, {%2, %3, %4, %4}];" : "=l"(tmp.x) : "l"(surfObject), "r"(face), "r"(x), "r"(y));
   }
   *retVal = make_ulonglong1(tmp.x);
}

static __forceinline __declspec(__device__) void surfCubemapread(float *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   float tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.a2d.b32.trap  {%0}, [%1, {%2, %3, %4, %4}];" : "=f"(tmp) : "l"(surfObject), "r"(face), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.a2d.b32.clamp {%0}, [%1, {%2, %3, %4, %4}];" : "=f"(tmp) : "l"(surfObject), "r"(face), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.a2d.b32.zero  {%0}, [%1, {%2, %3, %4, %4}];" : "=f"(tmp) : "l"(surfObject), "r"(face), "r"(x), "r"(y));
   }
   *retVal = (float)(tmp);
}

static __forceinline __declspec(__device__) void surfCubemapread(float1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   float1 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.a2d.b32.trap  {%0}, [%1, {%2, %3, %4, %4}];" : "=f"(tmp.x) : "l"(surfObject), "r"(face), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.a2d.b32.clamp {%0}, [%1, {%2, %3, %4, %4}];" : "=f"(tmp.x) : "l"(surfObject), "r"(face), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.a2d.b32.zero  {%0}, [%1, {%2, %3, %4, %4}];" : "=f"(tmp.x) : "l"(surfObject), "r"(face), "r"(x), "r"(y));
   }
   *retVal = make_float1(tmp.x);
}







static __forceinline __declspec(__device__) void surfCubemapread(char2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   int2 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.a2d.v2.b8.trap  {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=r"(tmp.x), "=r"(tmp.y) : "l"(surfObject), "r"(face), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.a2d.v2.b8.clamp {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=r"(tmp.x), "=r"(tmp.y) : "l"(surfObject), "r"(face), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.a2d.v2.b8.zero  {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=r"(tmp.x), "=r"(tmp.y) : "l"(surfObject), "r"(face), "r"(x), "r"(y));
   }
   *retVal = make_char2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void surfCubemapread(uchar2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   uint2 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.a2d.v2.b8.trap  {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=r"(tmp.x), "=r"(tmp.y) : "l"(surfObject), "r"(face), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.a2d.v2.b8.clamp {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=r"(tmp.x), "=r"(tmp.y) : "l"(surfObject), "r"(face), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.a2d.v2.b8.zero  {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=r"(tmp.x), "=r"(tmp.y) : "l"(surfObject), "r"(face), "r"(x), "r"(y));
   }
   *retVal = make_uchar2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void surfCubemapread(short2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   short2 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.a2d.v2.b16.trap  {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=h"(tmp.x), "=h"(tmp.y) : "l"(surfObject), "r"(face), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.a2d.v2.b16.clamp {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=h"(tmp.x), "=h"(tmp.y) : "l"(surfObject), "r"(face), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.a2d.v2.b16.zero  {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=h"(tmp.x), "=h"(tmp.y) : "l"(surfObject), "r"(face), "r"(x), "r"(y));
   }
   *retVal = make_short2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void surfCubemapread(ushort2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   ushort2 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.a2d.v2.b16.trap  {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=h"(tmp.x), "=h"(tmp.y) : "l"(surfObject), "r"(face), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.a2d.v2.b16.clamp {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=h"(tmp.x), "=h"(tmp.y) : "l"(surfObject), "r"(face), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.a2d.v2.b16.zero  {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=h"(tmp.x), "=h"(tmp.y) : "l"(surfObject), "r"(face), "r"(x), "r"(y));
   }
   *retVal = make_ushort2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void surfCubemapread(int2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   int2 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.a2d.v2.b32.trap  {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=r"(tmp.x), "=r"(tmp.y) : "l"(surfObject), "r"(face), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.a2d.v2.b32.clamp {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=r"(tmp.x), "=r"(tmp.y) : "l"(surfObject), "r"(face), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.a2d.v2.b32.zero  {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=r"(tmp.x), "=r"(tmp.y) : "l"(surfObject), "r"(face), "r"(x), "r"(y));
   }
   *retVal = make_int2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void surfCubemapread(uint2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   uint2 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.a2d.v2.b32.trap  {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=r"(tmp.x), "=r"(tmp.y) : "l"(surfObject), "r"(face), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.a2d.v2.b32.clamp {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=r"(tmp.x), "=r"(tmp.y) : "l"(surfObject), "r"(face), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.a2d.v2.b32.zero  {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=r"(tmp.x), "=r"(tmp.y) : "l"(surfObject), "r"(face), "r"(x), "r"(y));
   }
   *retVal = make_uint2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void surfCubemapread(longlong2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   longlong2 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.a2d.v2.b64.trap  {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=l"(tmp.x), "=l"(tmp.y) : "l"(surfObject), "r"(face), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.a2d.v2.b64.clamp {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=l"(tmp.x), "=l"(tmp.y) : "l"(surfObject), "r"(face), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.a2d.v2.b64.zero  {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=l"(tmp.x), "=l"(tmp.y) : "l"(surfObject), "r"(face), "r"(x), "r"(y));
   }
   *retVal = make_longlong2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void surfCubemapread(ulonglong2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   ulonglong2 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.a2d.v2.b64.trap  {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=l"(tmp.x), "=l"(tmp.y) : "l"(surfObject), "r"(face), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.a2d.v2.b64.clamp {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=l"(tmp.x), "=l"(tmp.y) : "l"(surfObject), "r"(face), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.a2d.v2.b64.zero  {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=l"(tmp.x), "=l"(tmp.y) : "l"(surfObject), "r"(face), "r"(x), "r"(y));
   }
   *retVal = make_ulonglong2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void surfCubemapread(float2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   float2 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.a2d.v2.b32.trap  {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=f"(tmp.x), "=f"(tmp.y) : "l"(surfObject), "r"(face), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.a2d.v2.b32.clamp {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=f"(tmp.x), "=f"(tmp.y) : "l"(surfObject), "r"(face), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.a2d.v2.b32.zero  {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=f"(tmp.x), "=f"(tmp.y) : "l"(surfObject), "r"(face), "r"(x), "r"(y));
   }
   *retVal = make_float2(tmp.x, tmp.y);
}







static __forceinline __declspec(__device__) void surfCubemapread(char4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   int4 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.a2d.v4.b8.trap  {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(surfObject), "r"(face), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.a2d.v4.b8.clamp {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(surfObject), "r"(face), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.a2d.v4.b8.zero  {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(surfObject), "r"(face), "r"(x), "r"(y));
   }
   *retVal = make_char4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __forceinline __declspec(__device__) void surfCubemapread(uchar4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   uint4 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.a2d.v4.b8.trap  {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(surfObject), "r"(face), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.a2d.v4.b8.clamp {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(surfObject), "r"(face), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.a2d.v4.b8.zero  {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(surfObject), "r"(face), "r"(x), "r"(y));
   }
   *retVal = make_uchar4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __forceinline __declspec(__device__) void surfCubemapread(short4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   short4 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.a2d.v4.b16.trap  {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=h"(tmp.x), "=h"(tmp.y), "=h"(tmp.z), "=h"(tmp.w) : "l"(surfObject), "r"(face), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.a2d.v4.b16.clamp {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=h"(tmp.x), "=h"(tmp.y), "=h"(tmp.z), "=h"(tmp.w) : "l"(surfObject), "r"(face), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.a2d.v4.b16.zero  {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=h"(tmp.x), "=h"(tmp.y), "=h"(tmp.z), "=h"(tmp.w) : "l"(surfObject), "r"(face), "r"(x), "r"(y));
   }
   *retVal = make_short4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __forceinline __declspec(__device__) void surfCubemapread(ushort4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   ushort4 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.a2d.v4.b16.trap  {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=h"(tmp.x), "=h"(tmp.y), "=h"(tmp.z), "=h"(tmp.w) : "l"(surfObject), "r"(face), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.a2d.v4.b16.clamp {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=h"(tmp.x), "=h"(tmp.y), "=h"(tmp.z), "=h"(tmp.w) : "l"(surfObject), "r"(face), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.a2d.v4.b16.zero  {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=h"(tmp.x), "=h"(tmp.y), "=h"(tmp.z), "=h"(tmp.w) : "l"(surfObject), "r"(face), "r"(x), "r"(y));
   }
   *retVal = make_ushort4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __forceinline __declspec(__device__) void surfCubemapread(int4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   int4 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.a2d.v4.b32.trap  {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(surfObject), "r"(face), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.a2d.v4.b32.clamp {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(surfObject), "r"(face), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.a2d.v4.b32.zero  {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(surfObject), "r"(face), "r"(x), "r"(y));
   }
   *retVal = make_int4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __forceinline __declspec(__device__) void surfCubemapread(uint4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   uint4 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.a2d.v4.b32.trap  {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(surfObject), "r"(face), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.a2d.v4.b32.clamp {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(surfObject), "r"(face), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.a2d.v4.b32.zero  {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(surfObject), "r"(face), "r"(x), "r"(y));
   }
   *retVal = make_uint4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __forceinline __declspec(__device__) void surfCubemapread(float4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   float4 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.a2d.v4.b32.trap  {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=f"(tmp.x), "=f"(tmp.y), "=f"(tmp.z), "=f"(tmp.w) : "l"(surfObject), "r"(face), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.a2d.v4.b32.clamp {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=f"(tmp.x), "=f"(tmp.y), "=f"(tmp.z), "=f"(tmp.w) : "l"(surfObject), "r"(face), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.a2d.v4.b32.zero  {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=f"(tmp.x), "=f"(tmp.y), "=f"(tmp.z), "=f"(tmp.w) : "l"(surfObject), "r"(face), "r"(x), "r"(y));
   }
   *retVal = make_float4(tmp.x, tmp.y, tmp.z, tmp.w);
}







template <class T>
static __forceinline __declspec(__device__) T surfCubemapread(cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   T ret;
   surfCubemapread(&ret, surfObject, face, x, y, boundaryMode);
   return ret;
}







static __forceinline __declspec(__device__) void surfCubemapLayeredread(char *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   int tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.a2d.b8.trap  {%0}, [%1, {%2, %3, %4, %4}];" : "=r"(tmp) : "l"(surfObject), "r"(layerface), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.a2d.b8.clamp {%0}, [%1, {%2, %3, %4, %4}];" : "=r"(tmp) : "l"(surfObject), "r"(layerface), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.a2d.b8.zero  {%0}, [%1, {%2, %3, %4, %4}];" : "=r"(tmp) : "l"(surfObject), "r"(layerface), "r"(x), "r"(y));
   }
   *retVal = (char)(tmp);
}

static __forceinline __declspec(__device__) void surfCubemapLayeredread(signed char *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   int tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.a2d.b8.trap  {%0}, [%1, {%2, %3, %4, %4}];" : "=r"(tmp) : "l"(surfObject), "r"(layerface), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.a2d.b8.clamp {%0}, [%1, {%2, %3, %4, %4}];" : "=r"(tmp) : "l"(surfObject), "r"(layerface), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.a2d.b8.zero  {%0}, [%1, {%2, %3, %4, %4}];" : "=r"(tmp) : "l"(surfObject), "r"(layerface), "r"(x), "r"(y));
   }
   *retVal = (signed char)(tmp);
}

static __forceinline __declspec(__device__) void surfCubemapLayeredread(char1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   int1 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.a2d.b8.trap  {%0}, [%1, {%2, %3, %4, %4}];" : "=r"(tmp.x) : "l"(surfObject), "r"(layerface), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.a2d.b8.clamp {%0}, [%1, {%2, %3, %4, %4}];" : "=r"(tmp.x) : "l"(surfObject), "r"(layerface), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.a2d.b8.zero  {%0}, [%1, {%2, %3, %4, %4}];" : "=r"(tmp.x) : "l"(surfObject), "r"(layerface), "r"(x), "r"(y));
   }
   *retVal = make_char1(tmp.x);
}

static __forceinline __declspec(__device__) void surfCubemapLayeredread(unsigned char *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   unsigned int tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.a2d.b8.trap  {%0}, [%1, {%2, %3, %4, %4}];" : "=r"(tmp) : "l"(surfObject), "r"(layerface), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.a2d.b8.clamp {%0}, [%1, {%2, %3, %4, %4}];" : "=r"(tmp) : "l"(surfObject), "r"(layerface), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.a2d.b8.zero  {%0}, [%1, {%2, %3, %4, %4}];" : "=r"(tmp) : "l"(surfObject), "r"(layerface), "r"(x), "r"(y));
   }
   *retVal = (unsigned char)(tmp);
}

static __forceinline __declspec(__device__) void surfCubemapLayeredread(uchar1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   uint1 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.a2d.b8.trap  {%0}, [%1, {%2, %3, %4, %4}];" : "=r"(tmp.x) : "l"(surfObject), "r"(layerface), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.a2d.b8.clamp {%0}, [%1, {%2, %3, %4, %4}];" : "=r"(tmp.x) : "l"(surfObject), "r"(layerface), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.a2d.b8.zero  {%0}, [%1, {%2, %3, %4, %4}];" : "=r"(tmp.x) : "l"(surfObject), "r"(layerface), "r"(x), "r"(y));
   }
   *retVal = make_uchar1(tmp.x);
}

static __forceinline __declspec(__device__) void surfCubemapLayeredread(short *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   short tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.a2d.b16.trap  {%0}, [%1, {%2, %3, %4, %4}];" : "=h"(tmp) : "l"(surfObject), "r"(layerface), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.a2d.b16.clamp {%0}, [%1, {%2, %3, %4, %4}];" : "=h"(tmp) : "l"(surfObject), "r"(layerface), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.a2d.b16.zero  {%0}, [%1, {%2, %3, %4, %4}];" : "=h"(tmp) : "l"(surfObject), "r"(layerface), "r"(x), "r"(y));
   }
   *retVal = (short)(tmp);
}

static __forceinline __declspec(__device__) void surfCubemapLayeredread(short1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   short1 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.a2d.b16.trap  {%0}, [%1, {%2, %3, %4, %4}];" : "=h"(tmp.x) : "l"(surfObject), "r"(layerface), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.a2d.b16.clamp {%0}, [%1, {%2, %3, %4, %4}];" : "=h"(tmp.x) : "l"(surfObject), "r"(layerface), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.a2d.b16.zero  {%0}, [%1, {%2, %3, %4, %4}];" : "=h"(tmp.x) : "l"(surfObject), "r"(layerface), "r"(x), "r"(y));
   }
   *retVal = make_short1(tmp.x);
}

static __forceinline __declspec(__device__) void surfCubemapLayeredread(unsigned short *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   unsigned short tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.a2d.b16.trap  {%0}, [%1, {%2, %3, %4, %4}];" : "=h"(tmp) : "l"(surfObject), "r"(layerface), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.a2d.b16.clamp {%0}, [%1, {%2, %3, %4, %4}];" : "=h"(tmp) : "l"(surfObject), "r"(layerface), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.a2d.b16.zero  {%0}, [%1, {%2, %3, %4, %4}];" : "=h"(tmp) : "l"(surfObject), "r"(layerface), "r"(x), "r"(y));
   }
   *retVal = (unsigned short)(tmp);
}

static __forceinline __declspec(__device__) void surfCubemapLayeredread(ushort1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   ushort1 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.a2d.b16.trap  {%0}, [%1, {%2, %3, %4, %4}];" : "=h"(tmp.x) : "l"(surfObject), "r"(layerface), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.a2d.b16.clamp {%0}, [%1, {%2, %3, %4, %4}];" : "=h"(tmp.x) : "l"(surfObject), "r"(layerface), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.a2d.b16.zero  {%0}, [%1, {%2, %3, %4, %4}];" : "=h"(tmp.x) : "l"(surfObject), "r"(layerface), "r"(x), "r"(y));
   }
   *retVal = make_ushort1(tmp.x);
}

static __forceinline __declspec(__device__) void surfCubemapLayeredread(int *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   int tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.a2d.b32.trap  {%0}, [%1, {%2, %3, %4, %4}];" : "=r"(tmp) : "l"(surfObject), "r"(layerface), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.a2d.b32.clamp {%0}, [%1, {%2, %3, %4, %4}];" : "=r"(tmp) : "l"(surfObject), "r"(layerface), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.a2d.b32.zero  {%0}, [%1, {%2, %3, %4, %4}];" : "=r"(tmp) : "l"(surfObject), "r"(layerface), "r"(x), "r"(y));
   }
   *retVal = (int)(tmp);
}

static __forceinline __declspec(__device__) void surfCubemapLayeredread(int1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   int1 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.a2d.b32.trap  {%0}, [%1, {%2, %3, %4, %4}];" : "=r"(tmp.x) : "l"(surfObject), "r"(layerface), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.a2d.b32.clamp {%0}, [%1, {%2, %3, %4, %4}];" : "=r"(tmp.x) : "l"(surfObject), "r"(layerface), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.a2d.b32.zero  {%0}, [%1, {%2, %3, %4, %4}];" : "=r"(tmp.x) : "l"(surfObject), "r"(layerface), "r"(x), "r"(y));
   }
   *retVal = make_int1(tmp.x);
}

static __forceinline __declspec(__device__) void surfCubemapLayeredread(unsigned int *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   unsigned int tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.a2d.b32.trap  {%0}, [%1, {%2, %3, %4, %4}];" : "=r"(tmp) : "l"(surfObject), "r"(layerface), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.a2d.b32.clamp {%0}, [%1, {%2, %3, %4, %4}];" : "=r"(tmp) : "l"(surfObject), "r"(layerface), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.a2d.b32.zero  {%0}, [%1, {%2, %3, %4, %4}];" : "=r"(tmp) : "l"(surfObject), "r"(layerface), "r"(x), "r"(y));
   }
   *retVal = (unsigned int)(tmp);
}

static __forceinline __declspec(__device__) void surfCubemapLayeredread(uint1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   uint1 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.a2d.b32.trap  {%0}, [%1, {%2, %3, %4, %4}];" : "=r"(tmp.x) : "l"(surfObject), "r"(layerface), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.a2d.b32.clamp {%0}, [%1, {%2, %3, %4, %4}];" : "=r"(tmp.x) : "l"(surfObject), "r"(layerface), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.a2d.b32.zero  {%0}, [%1, {%2, %3, %4, %4}];" : "=r"(tmp.x) : "l"(surfObject), "r"(layerface), "r"(x), "r"(y));
   }
   *retVal = make_uint1(tmp.x);
}

static __forceinline __declspec(__device__) void surfCubemapLayeredread(long long *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   long long tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.a2d.b64.trap  {%0}, [%1, {%2, %3, %4, %4}];" : "=l"(tmp) : "l"(surfObject), "r"(layerface), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.a2d.b64.clamp {%0}, [%1, {%2, %3, %4, %4}];" : "=l"(tmp) : "l"(surfObject), "r"(layerface), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.a2d.b64.zero  {%0}, [%1, {%2, %3, %4, %4}];" : "=l"(tmp) : "l"(surfObject), "r"(layerface), "r"(x), "r"(y));
   }
   *retVal = (long long)(tmp);
}

static __forceinline __declspec(__device__) void surfCubemapLayeredread(longlong1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   longlong1 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.a2d.b64.trap  {%0}, [%1, {%2, %3, %4, %4}];" : "=l"(tmp.x) : "l"(surfObject), "r"(layerface), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.a2d.b64.clamp {%0}, [%1, {%2, %3, %4, %4}];" : "=l"(tmp.x) : "l"(surfObject), "r"(layerface), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.a2d.b64.zero  {%0}, [%1, {%2, %3, %4, %4}];" : "=l"(tmp.x) : "l"(surfObject), "r"(layerface), "r"(x), "r"(y));
   }
   *retVal = make_longlong1(tmp.x);
}

static __forceinline __declspec(__device__) void surfCubemapLayeredread(unsigned long long *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   unsigned long long tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.a2d.b64.trap  {%0}, [%1, {%2, %3, %4, %4}];" : "=l"(tmp) : "l"(surfObject), "r"(layerface), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.a2d.b64.clamp {%0}, [%1, {%2, %3, %4, %4}];" : "=l"(tmp) : "l"(surfObject), "r"(layerface), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.a2d.b64.zero  {%0}, [%1, {%2, %3, %4, %4}];" : "=l"(tmp) : "l"(surfObject), "r"(layerface), "r"(x), "r"(y));
   }
   *retVal = (unsigned long long)(tmp);
}

static __forceinline __declspec(__device__) void surfCubemapLayeredread(ulonglong1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   ulonglong1 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.a2d.b64.trap  {%0}, [%1, {%2, %3, %4, %4}];" : "=l"(tmp.x) : "l"(surfObject), "r"(layerface), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.a2d.b64.clamp {%0}, [%1, {%2, %3, %4, %4}];" : "=l"(tmp.x) : "l"(surfObject), "r"(layerface), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.a2d.b64.zero  {%0}, [%1, {%2, %3, %4, %4}];" : "=l"(tmp.x) : "l"(surfObject), "r"(layerface), "r"(x), "r"(y));
   }
   *retVal = make_ulonglong1(tmp.x);
}

static __forceinline __declspec(__device__) void surfCubemapLayeredread(float *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   float tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.a2d.b32.trap  {%0}, [%1, {%2, %3, %4, %4}];" : "=f"(tmp) : "l"(surfObject), "r"(layerface), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.a2d.b32.clamp {%0}, [%1, {%2, %3, %4, %4}];" : "=f"(tmp) : "l"(surfObject), "r"(layerface), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.a2d.b32.zero  {%0}, [%1, {%2, %3, %4, %4}];" : "=f"(tmp) : "l"(surfObject), "r"(layerface), "r"(x), "r"(y));
   }
   *retVal = (float)(tmp);
}

static __forceinline __declspec(__device__) void surfCubemapLayeredread(float1 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   float1 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.a2d.b32.trap  {%0}, [%1, {%2, %3, %4, %4}];" : "=f"(tmp.x) : "l"(surfObject), "r"(layerface), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.a2d.b32.clamp {%0}, [%1, {%2, %3, %4, %4}];" : "=f"(tmp.x) : "l"(surfObject), "r"(layerface), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.a2d.b32.zero  {%0}, [%1, {%2, %3, %4, %4}];" : "=f"(tmp.x) : "l"(surfObject), "r"(layerface), "r"(x), "r"(y));
   }
   *retVal = make_float1(tmp.x);
}







static __forceinline __declspec(__device__) void surfCubemapLayeredread(char2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   int2 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.a2d.v2.b8.trap  {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=r"(tmp.x), "=r"(tmp.y) : "l"(surfObject), "r"(layerface), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.a2d.v2.b8.clamp {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=r"(tmp.x), "=r"(tmp.y) : "l"(surfObject), "r"(layerface), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.a2d.v2.b8.zero  {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=r"(tmp.x), "=r"(tmp.y) : "l"(surfObject), "r"(layerface), "r"(x), "r"(y));
   }
   *retVal = make_char2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void surfCubemapLayeredread(uchar2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   uint2 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.a2d.v2.b8.trap  {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=r"(tmp.x), "=r"(tmp.y) : "l"(surfObject), "r"(layerface), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.a2d.v2.b8.clamp {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=r"(tmp.x), "=r"(tmp.y) : "l"(surfObject), "r"(layerface), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.a2d.v2.b8.zero  {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=r"(tmp.x), "=r"(tmp.y) : "l"(surfObject), "r"(layerface), "r"(x), "r"(y));
   }
   *retVal = make_uchar2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void surfCubemapLayeredread(short2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   short2 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.a2d.v2.b16.trap  {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=h"(tmp.x), "=h"(tmp.y) : "l"(surfObject), "r"(layerface), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.a2d.v2.b16.clamp {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=h"(tmp.x), "=h"(tmp.y) : "l"(surfObject), "r"(layerface), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.a2d.v2.b16.zero  {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=h"(tmp.x), "=h"(tmp.y) : "l"(surfObject), "r"(layerface), "r"(x), "r"(y));
   }
   *retVal = make_short2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void surfCubemapLayeredread(ushort2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   ushort2 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.a2d.v2.b16.trap  {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=h"(tmp.x), "=h"(tmp.y) : "l"(surfObject), "r"(layerface), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.a2d.v2.b16.clamp {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=h"(tmp.x), "=h"(tmp.y) : "l"(surfObject), "r"(layerface), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.a2d.v2.b16.zero  {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=h"(tmp.x), "=h"(tmp.y) : "l"(surfObject), "r"(layerface), "r"(x), "r"(y));
   }
   *retVal = make_ushort2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void surfCubemapLayeredread(int2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   int2 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.a2d.v2.b32.trap  {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=r"(tmp.x), "=r"(tmp.y) : "l"(surfObject), "r"(layerface), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.a2d.v2.b32.clamp {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=r"(tmp.x), "=r"(tmp.y) : "l"(surfObject), "r"(layerface), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.a2d.v2.b32.zero  {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=r"(tmp.x), "=r"(tmp.y) : "l"(surfObject), "r"(layerface), "r"(x), "r"(y));
   }
   *retVal = make_int2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void surfCubemapLayeredread(uint2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   uint2 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.a2d.v2.b32.trap  {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=r"(tmp.x), "=r"(tmp.y) : "l"(surfObject), "r"(layerface), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.a2d.v2.b32.clamp {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=r"(tmp.x), "=r"(tmp.y) : "l"(surfObject), "r"(layerface), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.a2d.v2.b32.zero  {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=r"(tmp.x), "=r"(tmp.y) : "l"(surfObject), "r"(layerface), "r"(x), "r"(y));
   }
   *retVal = make_uint2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void surfCubemapLayeredread(longlong2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   longlong2 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.a2d.v2.b64.trap  {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=l"(tmp.x), "=l"(tmp.y) : "l"(surfObject), "r"(layerface), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.a2d.v2.b64.clamp {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=l"(tmp.x), "=l"(tmp.y) : "l"(surfObject), "r"(layerface), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.a2d.v2.b64.zero  {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=l"(tmp.x), "=l"(tmp.y) : "l"(surfObject), "r"(layerface), "r"(x), "r"(y));
   }
   *retVal = make_longlong2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void surfCubemapLayeredread(ulonglong2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   ulonglong2 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.a2d.v2.b64.trap  {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=l"(tmp.x), "=l"(tmp.y) : "l"(surfObject), "r"(layerface), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.a2d.v2.b64.clamp {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=l"(tmp.x), "=l"(tmp.y) : "l"(surfObject), "r"(layerface), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.a2d.v2.b64.zero  {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=l"(tmp.x), "=l"(tmp.y) : "l"(surfObject), "r"(layerface), "r"(x), "r"(y));
   }
   *retVal = make_ulonglong2(tmp.x, tmp.y);
}

static __forceinline __declspec(__device__) void surfCubemapLayeredread(float2 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   float2 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.a2d.v2.b32.trap  {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=f"(tmp.x), "=f"(tmp.y) : "l"(surfObject), "r"(layerface), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.a2d.v2.b32.clamp {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=f"(tmp.x), "=f"(tmp.y) : "l"(surfObject), "r"(layerface), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.a2d.v2.b32.zero  {%0, %1}, [%2, {%3, %4, %5, %5}];" : "=f"(tmp.x), "=f"(tmp.y) : "l"(surfObject), "r"(layerface), "r"(x), "r"(y));
   }
   *retVal = make_float2(tmp.x, tmp.y);
}







static __forceinline __declspec(__device__) void surfCubemapLayeredread(char4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   int4 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.a2d.v4.b8.trap  {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(surfObject), "r"(layerface), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.a2d.v4.b8.clamp {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(surfObject), "r"(layerface), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.a2d.v4.b8.zero  {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(surfObject), "r"(layerface), "r"(x), "r"(y));
   }
   *retVal = make_char4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __forceinline __declspec(__device__) void surfCubemapLayeredread(uchar4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   uint4 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.a2d.v4.b8.trap  {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(surfObject), "r"(layerface), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.a2d.v4.b8.clamp {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(surfObject), "r"(layerface), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.a2d.v4.b8.zero  {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(surfObject), "r"(layerface), "r"(x), "r"(y));
   }
   *retVal = make_uchar4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __forceinline __declspec(__device__) void surfCubemapLayeredread(short4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   short4 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.a2d.v4.b16.trap  {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=h"(tmp.x), "=h"(tmp.y), "=h"(tmp.z), "=h"(tmp.w) : "l"(surfObject), "r"(layerface), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.a2d.v4.b16.clamp {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=h"(tmp.x), "=h"(tmp.y), "=h"(tmp.z), "=h"(tmp.w) : "l"(surfObject), "r"(layerface), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.a2d.v4.b16.zero  {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=h"(tmp.x), "=h"(tmp.y), "=h"(tmp.z), "=h"(tmp.w) : "l"(surfObject), "r"(layerface), "r"(x), "r"(y));
   }
   *retVal = make_short4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __forceinline __declspec(__device__) void surfCubemapLayeredread(ushort4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   ushort4 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.a2d.v4.b16.trap  {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=h"(tmp.x), "=h"(tmp.y), "=h"(tmp.z), "=h"(tmp.w) : "l"(surfObject), "r"(layerface), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.a2d.v4.b16.clamp {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=h"(tmp.x), "=h"(tmp.y), "=h"(tmp.z), "=h"(tmp.w) : "l"(surfObject), "r"(layerface), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.a2d.v4.b16.zero  {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=h"(tmp.x), "=h"(tmp.y), "=h"(tmp.z), "=h"(tmp.w) : "l"(surfObject), "r"(layerface), "r"(x), "r"(y));
   }
   *retVal = make_ushort4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __forceinline __declspec(__device__) void surfCubemapLayeredread(int4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   int4 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.a2d.v4.b32.trap  {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(surfObject), "r"(layerface), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.a2d.v4.b32.clamp {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(surfObject), "r"(layerface), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.a2d.v4.b32.zero  {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(surfObject), "r"(layerface), "r"(x), "r"(y));
   }
   *retVal = make_int4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __forceinline __declspec(__device__) void surfCubemapLayeredread(uint4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   uint4 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.a2d.v4.b32.trap  {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(surfObject), "r"(layerface), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.a2d.v4.b32.clamp {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(surfObject), "r"(layerface), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.a2d.v4.b32.zero  {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=r"(tmp.x), "=r"(tmp.y), "=r"(tmp.z), "=r"(tmp.w) : "l"(surfObject), "r"(layerface), "r"(x), "r"(y));
   }
   *retVal = make_uint4(tmp.x, tmp.y, tmp.z, tmp.w);
}

static __forceinline __declspec(__device__) void surfCubemapLayeredread(float4 *retVal, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   float4 tmp;
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("suld.b.a2d.v4.b32.trap  {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=f"(tmp.x), "=f"(tmp.y), "=f"(tmp.z), "=f"(tmp.w) : "l"(surfObject), "r"(layerface), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("suld.b.a2d.v4.b32.clamp {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=f"(tmp.x), "=f"(tmp.y), "=f"(tmp.z), "=f"(tmp.w) : "l"(surfObject), "r"(layerface), "r"(x), "r"(y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("suld.b.a2d.v4.b32.zero  {%0, %1, %2, %3}, [%4, {%5, %6, %7, %7}];" : "=f"(tmp.x), "=f"(tmp.y), "=f"(tmp.z), "=f"(tmp.w) : "l"(surfObject), "r"(layerface), "r"(x), "r"(y));
   }
   *retVal = make_float4(tmp.x, tmp.y, tmp.z, tmp.w);
}







template <class T>
static __forceinline __declspec(__device__) T surfCubemapLayeredread(cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   T ret;
   surfCubemapLayeredread(&ret, surfObject, x, y, z, layerface, boundaryMode);
   return ret;
}







static __forceinline __declspec(__device__) void surf1Dwrite(char data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.1d.b8.trap  [%0, {%1}], {%2};" : : "l"(surfObject), "r"(x), "r"((int)data));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.1d.b8.clamp [%0, {%1}], {%2};" : : "l"(surfObject), "r"(x), "r"((int)data));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.1d.b8.zero  [%0, {%1}], {%2};" : : "l"(surfObject), "r"(x), "r"((int)data));
   }
}

static __forceinline __declspec(__device__) void surf1Dwrite(signed char data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.1d.b8.trap  [%0, {%1}], {%2};" : : "l"(surfObject), "r"(x), "r"((int)data));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.1d.b8.clamp [%0, {%1}], {%2};" : : "l"(surfObject), "r"(x), "r"((int)data));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.1d.b8.zero  [%0, {%1}], {%2};" : : "l"(surfObject), "r"(x), "r"((int)data));
   }
}

static __forceinline __declspec(__device__) void surf1Dwrite(char1 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.1d.b8.trap  [%0, {%1}], {%2};" : : "l"(surfObject), "r"(x), "r"((int)data.x));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.1d.b8.clamp [%0, {%1}], {%2};" : : "l"(surfObject), "r"(x), "r"((int)data.x));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.1d.b8.zero  [%0, {%1}], {%2};" : : "l"(surfObject), "r"(x), "r"((int)data.x));
   }
}

static __forceinline __declspec(__device__) void surf1Dwrite(unsigned char data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.1d.b8.trap  [%0, {%1}], {%2};" : : "l"(surfObject), "r"(x), "r"((unsigned int)data));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.1d.b8.clamp [%0, {%1}], {%2};" : : "l"(surfObject), "r"(x), "r"((unsigned int)data));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.1d.b8.zero  [%0, {%1}], {%2};" : : "l"(surfObject), "r"(x), "r"((unsigned int)data));
   }
}

static __forceinline __declspec(__device__) void surf1Dwrite(uchar1 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.1d.b8.trap  [%0, {%1}], {%2};" : : "l"(surfObject), "r"(x), "r"((unsigned int)data.x));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.1d.b8.clamp [%0, {%1}], {%2};" : : "l"(surfObject), "r"(x), "r"((unsigned int)data.x));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.1d.b8.zero  [%0, {%1}], {%2};" : : "l"(surfObject), "r"(x), "r"((unsigned int)data.x));
   }
}

static __forceinline __declspec(__device__) void surf1Dwrite(short data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.1d.b16.trap  [%0, {%1}], {%2};" : : "l"(surfObject), "r"(x), "h"(data));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.1d.b16.clamp [%0, {%1}], {%2};" : : "l"(surfObject), "r"(x), "h"(data));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.1d.b16.zero  [%0, {%1}], {%2};" : : "l"(surfObject), "r"(x), "h"(data));
   }
}

static __forceinline __declspec(__device__) void surf1Dwrite(short1 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.1d.b16.trap  [%0, {%1}], {%2};" : : "l"(surfObject), "r"(x), "h"(data.x));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.1d.b16.clamp [%0, {%1}], {%2};" : : "l"(surfObject), "r"(x), "h"(data.x));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.1d.b16.zero  [%0, {%1}], {%2};" : : "l"(surfObject), "r"(x), "h"(data.x));
   }
}

static __forceinline __declspec(__device__) void surf1Dwrite(unsigned short data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.1d.b16.trap  [%0, {%1}], {%2};" : : "l"(surfObject), "r"(x), "h"(data));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.1d.b16.clamp [%0, {%1}], {%2};" : : "l"(surfObject), "r"(x), "h"(data));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.1d.b16.zero  [%0, {%1}], {%2};" : : "l"(surfObject), "r"(x), "h"(data));
   }
}

static __forceinline __declspec(__device__) void surf1Dwrite(ushort1 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.1d.b16.trap  [%0, {%1}], {%2};" : : "l"(surfObject), "r"(x), "h"(data.x));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.1d.b16.clamp [%0, {%1}], {%2};" : : "l"(surfObject), "r"(x), "h"(data.x));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.1d.b16.zero  [%0, {%1}], {%2};" : : "l"(surfObject), "r"(x), "h"(data.x));
   }
}

static __forceinline __declspec(__device__) void surf1Dwrite(int data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.1d.b32.trap  [%0, {%1}], {%2};" : : "l"(surfObject), "r"(x), "r"(data));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.1d.b32.clamp [%0, {%1}], {%2};" : : "l"(surfObject), "r"(x), "r"(data));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.1d.b32.zero  [%0, {%1}], {%2};" : : "l"(surfObject), "r"(x), "r"(data));
   }
}

static __forceinline __declspec(__device__) void surf1Dwrite(int1 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.1d.b32.trap  [%0, {%1}], {%2};" : : "l"(surfObject), "r"(x), "r"(data.x));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.1d.b32.clamp [%0, {%1}], {%2};" : : "l"(surfObject), "r"(x), "r"(data.x));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.1d.b32.zero  [%0, {%1}], {%2};" : : "l"(surfObject), "r"(x), "r"(data.x));
   }
}

static __forceinline __declspec(__device__) void surf1Dwrite(unsigned int data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.1d.b32.trap  [%0, {%1}], {%2};" : : "l"(surfObject), "r"(x), "r"(data));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.1d.b32.clamp [%0, {%1}], {%2};" : : "l"(surfObject), "r"(x), "r"(data));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.1d.b32.zero  [%0, {%1}], {%2};" : : "l"(surfObject), "r"(x), "r"(data));
   }
}

static __forceinline __declspec(__device__) void surf1Dwrite(uint1 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.1d.b32.trap  [%0, {%1}], {%2};" : : "l"(surfObject), "r"(x), "r"(data.x));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.1d.b32.clamp [%0, {%1}], {%2};" : : "l"(surfObject), "r"(x), "r"(data.x));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.1d.b32.zero  [%0, {%1}], {%2};" : : "l"(surfObject), "r"(x), "r"(data.x));
   }
}

static __forceinline __declspec(__device__) void surf1Dwrite(long long data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.1d.b64.trap  [%0, {%1}], {%2};" : : "l"(surfObject), "r"(x), "l"(data));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.1d.b64.clamp [%0, {%1}], {%2};" : : "l"(surfObject), "r"(x), "l"(data));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.1d.b64.zero  [%0, {%1}], {%2};" : : "l"(surfObject), "r"(x), "l"(data));
   }
}

static __forceinline __declspec(__device__) void surf1Dwrite(longlong1 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.1d.b64.trap  [%0, {%1}], {%2};" : : "l"(surfObject), "r"(x), "l"(data.x));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.1d.b64.clamp [%0, {%1}], {%2};" : : "l"(surfObject), "r"(x), "l"(data.x));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.1d.b64.zero  [%0, {%1}], {%2};" : : "l"(surfObject), "r"(x), "l"(data.x));
   }
}

static __forceinline __declspec(__device__) void surf1Dwrite(unsigned long long data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.1d.b64.trap  [%0, {%1}], {%2};" : : "l"(surfObject), "r"(x), "l"(data));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.1d.b64.clamp [%0, {%1}], {%2};" : : "l"(surfObject), "r"(x), "l"(data));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.1d.b64.zero  [%0, {%1}], {%2};" : : "l"(surfObject), "r"(x), "l"(data));
   }
}

static __forceinline __declspec(__device__) void surf1Dwrite(ulonglong1 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.1d.b64.trap  [%0, {%1}], {%2};" : : "l"(surfObject), "r"(x), "l"(data.x));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.1d.b64.clamp [%0, {%1}], {%2};" : : "l"(surfObject), "r"(x), "l"(data.x));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.1d.b64.zero  [%0, {%1}], {%2};" : : "l"(surfObject), "r"(x), "l"(data.x));
   }
}

static __forceinline __declspec(__device__) void surf1Dwrite(float data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.1d.b32.trap  [%0, {%1}], {%2};" : : "l"(surfObject), "r"(x), "f"(data));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.1d.b32.clamp [%0, {%1}], {%2};" : : "l"(surfObject), "r"(x), "f"(data));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.1d.b32.zero  [%0, {%1}], {%2};" : : "l"(surfObject), "r"(x), "f"(data));
   }
}

static __forceinline __declspec(__device__) void surf1Dwrite(float1 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.1d.b32.trap  [%0, {%1}], {%2};" : : "l"(surfObject), "r"(x), "f"(data.x));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.1d.b32.clamp [%0, {%1}], {%2};" : : "l"(surfObject), "r"(x), "f"(data.x));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.1d.b32.zero  [%0, {%1}], {%2};" : : "l"(surfObject), "r"(x), "f"(data.x));
   }
}







static __forceinline __declspec(__device__) void surf1Dwrite(char2 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.1d.v2.b8.trap  [%0, {%1}], {%2, %3};" : : "l"(surfObject), "r"(x), "r"((int)data.x), "r"((int)data.y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.1d.v2.b8.clamp [%0, {%1}], {%2, %3};" : : "l"(surfObject), "r"(x), "r"((int)data.x), "r"((int)data.y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.1d.v2.b8.zero  [%0, {%1}], {%2, %3};" : : "l"(surfObject), "r"(x), "r"((int)data.x), "r"((int)data.y));
   }
}

static __forceinline __declspec(__device__) void surf1Dwrite(uchar2 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.1d.v2.b8.trap  [%0, {%1}], {%2, %3};" : : "l"(surfObject), "r"(x), "r"((unsigned int)data.x), "r"((unsigned int)data.y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.1d.v2.b8.clamp [%0, {%1}], {%2, %3};" : : "l"(surfObject), "r"(x), "r"((unsigned int)data.x), "r"((unsigned int)data.y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.1d.v2.b8.zero  [%0, {%1}], {%2, %3};" : : "l"(surfObject), "r"(x), "r"((unsigned int)data.x), "r"((unsigned int)data.y));
   }
}

static __forceinline __declspec(__device__) void surf1Dwrite(short2 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.1d.v2.b16.trap  [%0, {%1}], {%2, %3};" : : "l"(surfObject), "r"(x), "h"(data.x), "h"(data.y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.1d.v2.b16.clamp [%0, {%1}], {%2, %3};" : : "l"(surfObject), "r"(x), "h"(data.x), "h"(data.y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.1d.v2.b16.zero  [%0, {%1}], {%2, %3};" : : "l"(surfObject), "r"(x), "h"(data.x), "h"(data.y));
   }
}

static __forceinline __declspec(__device__) void surf1Dwrite(ushort2 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.1d.v2.b16.trap  [%0, {%1}], {%2, %3};" : : "l"(surfObject), "r"(x), "h"(data.x), "h"(data.y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.1d.v2.b16.clamp [%0, {%1}], {%2, %3};" : : "l"(surfObject), "r"(x), "h"(data.x), "h"(data.y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.1d.v2.b16.zero  [%0, {%1}], {%2, %3};" : : "l"(surfObject), "r"(x), "h"(data.x), "h"(data.y));
   }
}

static __forceinline __declspec(__device__) void surf1Dwrite(int2 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.1d.v2.b32.trap  [%0, {%1}], {%2, %3};" : : "l"(surfObject), "r"(x), "r"(data.x), "r"(data.y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.1d.v2.b32.clamp [%0, {%1}], {%2, %3};" : : "l"(surfObject), "r"(x), "r"(data.x), "r"(data.y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.1d.v2.b32.zero  [%0, {%1}], {%2, %3};" : : "l"(surfObject), "r"(x), "r"(data.x), "r"(data.y));
   }
}

static __forceinline __declspec(__device__) void surf1Dwrite(uint2 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.1d.v2.b32.trap  [%0, {%1}], {%2, %3};" : : "l"(surfObject), "r"(x), "r"(data.x), "r"(data.y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.1d.v2.b32.clamp [%0, {%1}], {%2, %3};" : : "l"(surfObject), "r"(x), "r"(data.x), "r"(data.y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.1d.v2.b32.zero  [%0, {%1}], {%2, %3};" : : "l"(surfObject), "r"(x), "r"(data.x), "r"(data.y));
   }
}

static __forceinline __declspec(__device__) void surf1Dwrite(longlong2 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.1d.v2.b64.trap  [%0, {%1}], {%2, %3};" : : "l"(surfObject), "r"(x), "l"(data.x), "l"(data.y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.1d.v2.b64.clamp [%0, {%1}], {%2, %3};" : : "l"(surfObject), "r"(x), "l"(data.x), "l"(data.y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.1d.v2.b64.zero  [%0, {%1}], {%2, %3};" : : "l"(surfObject), "r"(x), "l"(data.x), "l"(data.y));
   }
}

static __forceinline __declspec(__device__) void surf1Dwrite(ulonglong2 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.1d.v2.b64.trap  [%0, {%1}], {%2, %3};" : : "l"(surfObject), "r"(x), "l"(data.x), "l"(data.y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.1d.v2.b64.clamp [%0, {%1}], {%2, %3};" : : "l"(surfObject), "r"(x), "l"(data.x), "l"(data.y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.1d.v2.b64.zero  [%0, {%1}], {%2, %3};" : : "l"(surfObject), "r"(x), "l"(data.x), "l"(data.y));
   }
}

static __forceinline __declspec(__device__) void surf1Dwrite(float2 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.1d.v2.b32.trap  [%0, {%1}], {%2, %3};" : : "l"(surfObject), "r"(x), "f"(data.x), "f"(data.y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.1d.v2.b32.clamp [%0, {%1}], {%2, %3};" : : "l"(surfObject), "r"(x), "f"(data.x), "f"(data.y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.1d.v2.b32.zero  [%0, {%1}], {%2, %3};" : : "l"(surfObject), "r"(x), "f"(data.x), "f"(data.y));
   }
}







static __forceinline __declspec(__device__) void surf1Dwrite(char4 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.1d.v4.b8.trap  [%0, {%1}], {%2, %3, %4, %5};" : : "l"(surfObject), "r"(x), "r"((int)data.x), "r"((int)data.y), "r"((int)data.z), "r"((int)data.w));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.1d.v4.b8.clamp [%0, {%1}], {%2, %3, %4, %5};" : : "l"(surfObject), "r"(x), "r"((int)data.x), "r"((int)data.y), "r"((int)data.z), "r"((int)data.w));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.1d.v4.b8.zero  [%0, {%1}], {%2, %3, %4, %5};" : : "l"(surfObject), "r"(x), "r"((int)data.x), "r"((int)data.y), "r"((int)data.z), "r"((int)data.w));
   }
}

static __forceinline __declspec(__device__) void surf1Dwrite(uchar4 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.1d.v4.b8.trap  [%0, {%1}], {%2, %3, %4, %5};" : : "l"(surfObject), "r"(x), "r"((unsigned int)data.x), "r"((unsigned int)data.y), "r"((unsigned int)data.z), "r"((unsigned int)data.w));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.1d.v4.b8.clamp [%0, {%1}], {%2, %3, %4, %5};" : : "l"(surfObject), "r"(x), "r"((unsigned int)data.x), "r"((unsigned int)data.y), "r"((unsigned int)data.z), "r"((unsigned int)data.w));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.1d.v4.b8.zero  [%0, {%1}], {%2, %3, %4, %5};" : : "l"(surfObject), "r"(x), "r"((unsigned int)data.x), "r"((unsigned int)data.y), "r"((unsigned int)data.z), "r"((unsigned int)data.w));
   }
}

static __forceinline __declspec(__device__) void surf1Dwrite(short4 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.1d.v4.b16.trap  [%0, {%1}], {%2, %3, %4, %5};" : : "l"(surfObject), "r"(x), "h"(data.x), "h"(data.y), "h"(data.z), "h"(data.w));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.1d.v4.b16.clamp [%0, {%1}], {%2, %3, %4, %5};" : : "l"(surfObject), "r"(x), "h"(data.x), "h"(data.y), "h"(data.z), "h"(data.w));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.1d.v4.b16.zero  [%0, {%1}], {%2, %3, %4, %5};" : : "l"(surfObject), "r"(x), "h"(data.x), "h"(data.y), "h"(data.z), "h"(data.w));
   }
}

static __forceinline __declspec(__device__) void surf1Dwrite(ushort4 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.1d.v4.b16.trap  [%0, {%1}], {%2, %3, %4, %5};" : : "l"(surfObject), "r"(x), "h"(data.x), "h"(data.y), "h"(data.z), "h"(data.w));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.1d.v4.b16.clamp [%0, {%1}], {%2, %3, %4, %5};" : : "l"(surfObject), "r"(x), "h"(data.x), "h"(data.y), "h"(data.z), "h"(data.w));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.1d.v4.b16.zero  [%0, {%1}], {%2, %3, %4, %5};" : : "l"(surfObject), "r"(x), "h"(data.x), "h"(data.y), "h"(data.z), "h"(data.w));
   }
}

static __forceinline __declspec(__device__) void surf1Dwrite(int4 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.1d.v4.b32.trap  [%0, {%1}], {%2, %3, %4, %5};" : : "l"(surfObject), "r"(x), "r"(data.x), "r"(data.y), "r"(data.z), "r"(data.w));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.1d.v4.b32.clamp [%0, {%1}], {%2, %3, %4, %5};" : : "l"(surfObject), "r"(x), "r"(data.x), "r"(data.y), "r"(data.z), "r"(data.w));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.1d.v4.b32.zero  [%0, {%1}], {%2, %3, %4, %5};" : : "l"(surfObject), "r"(x), "r"(data.x), "r"(data.y), "r"(data.z), "r"(data.w));
   }
}

static __forceinline __declspec(__device__) void surf1Dwrite(uint4 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.1d.v4.b32.trap  [%0, {%1}], {%2, %3, %4, %5};" : : "l"(surfObject), "r"(x), "r"(data.x), "r"(data.y), "r"(data.z), "r"(data.w));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.1d.v4.b32.clamp [%0, {%1}], {%2, %3, %4, %5};" : : "l"(surfObject), "r"(x), "r"(data.x), "r"(data.y), "r"(data.z), "r"(data.w));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.1d.v4.b32.zero  [%0, {%1}], {%2, %3, %4, %5};" : : "l"(surfObject), "r"(x), "r"(data.x), "r"(data.y), "r"(data.z), "r"(data.w));
   }
}

static __forceinline __declspec(__device__) void surf1Dwrite(float4 data, cudaSurfaceObject_t surfObject, int x, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.1d.v4.b32.trap  [%0, {%1}], {%2, %3, %4, %5};" : : "l"(surfObject), "r"(x), "f"(data.x), "f"(data.y), "f"(data.z), "f"(data.w));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.1d.v4.b32.clamp [%0, {%1}], {%2, %3, %4, %5};" : : "l"(surfObject), "r"(x), "f"(data.x), "f"(data.y), "f"(data.z), "f"(data.w));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.1d.v4.b32.zero  [%0, {%1}], {%2, %3, %4, %5};" : : "l"(surfObject), "r"(x), "f"(data.x), "f"(data.y), "f"(data.z), "f"(data.w));
   }
}







static __forceinline __declspec(__device__) void surf2Dwrite(char data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.2d.b8.trap  [%0, {%1, %2}], {%3};" : : "l"(surfObject), "r"(x), "r"(y), "r"((int)data));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.2d.b8.clamp [%0, {%1, %2}], {%3};" : : "l"(surfObject), "r"(x), "r"(y), "r"((int)data));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.2d.b8.zero  [%0, {%1, %2}], {%3};" : : "l"(surfObject), "r"(x), "r"(y), "r"((int)data));
   }
}

static __forceinline __declspec(__device__) void surf2Dwrite(signed char data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.2d.b8.trap  [%0, {%1, %2}], {%3};" : : "l"(surfObject), "r"(x), "r"(y), "r"((int)data));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.2d.b8.clamp [%0, {%1, %2}], {%3};" : : "l"(surfObject), "r"(x), "r"(y), "r"((int)data));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.2d.b8.zero  [%0, {%1, %2}], {%3};" : : "l"(surfObject), "r"(x), "r"(y), "r"((int)data));
   }
}

static __forceinline __declspec(__device__) void surf2Dwrite(char1 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.2d.b8.trap  [%0, {%1, %2}], {%3};" : : "l"(surfObject), "r"(x), "r"(y), "r"((int)data.x));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.2d.b8.clamp [%0, {%1, %2}], {%3};" : : "l"(surfObject), "r"(x), "r"(y), "r"((int)data.x));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.2d.b8.zero  [%0, {%1, %2}], {%3};" : : "l"(surfObject), "r"(x), "r"(y), "r"((int)data.x));
   }
}

static __forceinline __declspec(__device__) void surf2Dwrite(unsigned char data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.2d.b8.trap  [%0, {%1, %2}], {%3};" : : "l"(surfObject), "r"(x), "r"(y), "r"((unsigned int)data));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.2d.b8.clamp [%0, {%1, %2}], {%3};" : : "l"(surfObject), "r"(x), "r"(y), "r"((unsigned int)data));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.2d.b8.zero  [%0, {%1, %2}], {%3};" : : "l"(surfObject), "r"(x), "r"(y), "r"((unsigned int)data));
   }
}

static __forceinline __declspec(__device__) void surf2Dwrite(uchar1 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.2d.b8.trap  [%0, {%1, %2}], {%3};" : : "l"(surfObject), "r"(x), "r"(y), "r"((unsigned int)data.x));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.2d.b8.clamp [%0, {%1, %2}], {%3};" : : "l"(surfObject), "r"(x), "r"(y), "r"((unsigned int)data.x));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.2d.b8.zero  [%0, {%1, %2}], {%3};" : : "l"(surfObject), "r"(x), "r"(y), "r"((unsigned int)data.x));
   }
}

static __forceinline __declspec(__device__) void surf2Dwrite(short data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.2d.b16.trap  [%0, {%1, %2}], {%3};" : : "l"(surfObject), "r"(x), "r"(y), "h"(data));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.2d.b16.clamp [%0, {%1, %2}], {%3};" : : "l"(surfObject), "r"(x), "r"(y), "h"(data));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.2d.b16.zero  [%0, {%1, %2}], {%3};" : : "l"(surfObject), "r"(x), "r"(y), "h"(data));
   }
}

static __forceinline __declspec(__device__) void surf2Dwrite(short1 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.2d.b16.trap  [%0, {%1, %2}], {%3};" : : "l"(surfObject), "r"(x), "r"(y), "h"(data.x));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.2d.b16.clamp [%0, {%1, %2}], {%3};" : : "l"(surfObject), "r"(x), "r"(y), "h"(data.x));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.2d.b16.zero  [%0, {%1, %2}], {%3};" : : "l"(surfObject), "r"(x), "r"(y), "h"(data.x));
   }
}

static __forceinline __declspec(__device__) void surf2Dwrite(unsigned short data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.2d.b16.trap  [%0, {%1, %2}], {%3};" : : "l"(surfObject), "r"(x), "r"(y), "h"(data));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.2d.b16.clamp [%0, {%1, %2}], {%3};" : : "l"(surfObject), "r"(x), "r"(y), "h"(data));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.2d.b16.zero  [%0, {%1, %2}], {%3};" : : "l"(surfObject), "r"(x), "r"(y), "h"(data));
   }
}

static __forceinline __declspec(__device__) void surf2Dwrite(ushort1 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.2d.b16.trap  [%0, {%1, %2}], {%3};" : : "l"(surfObject), "r"(x), "r"(y), "h"(data.x));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.2d.b16.clamp [%0, {%1, %2}], {%3};" : : "l"(surfObject), "r"(x), "r"(y), "h"(data.x));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.2d.b16.zero  [%0, {%1, %2}], {%3};" : : "l"(surfObject), "r"(x), "r"(y), "h"(data.x));
   }
}

static __forceinline __declspec(__device__) void surf2Dwrite(int data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.2d.b32.trap  [%0, {%1, %2}], {%3};" : : "l"(surfObject), "r"(x), "r"(y), "r"(data));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.2d.b32.clamp [%0, {%1, %2}], {%3};" : : "l"(surfObject), "r"(x), "r"(y), "r"(data));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.2d.b32.zero  [%0, {%1, %2}], {%3};" : : "l"(surfObject), "r"(x), "r"(y), "r"(data));
   }
}

static __forceinline __declspec(__device__) void surf2Dwrite(int1 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.2d.b32.trap  [%0, {%1, %2}], {%3};" : : "l"(surfObject), "r"(x), "r"(y), "r"(data.x));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.2d.b32.clamp [%0, {%1, %2}], {%3};" : : "l"(surfObject), "r"(x), "r"(y), "r"(data.x));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.2d.b32.zero  [%0, {%1, %2}], {%3};" : : "l"(surfObject), "r"(x), "r"(y), "r"(data.x));
   }
}

static __forceinline __declspec(__device__) void surf2Dwrite(unsigned int data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.2d.b32.trap  [%0, {%1, %2}], {%3};" : : "l"(surfObject), "r"(x), "r"(y), "r"(data));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.2d.b32.clamp [%0, {%1, %2}], {%3};" : : "l"(surfObject), "r"(x), "r"(y), "r"(data));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.2d.b32.zero  [%0, {%1, %2}], {%3};" : : "l"(surfObject), "r"(x), "r"(y), "r"(data));
   }
}

static __forceinline __declspec(__device__) void surf2Dwrite(uint1 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.2d.b32.trap  [%0, {%1, %2}], {%3};" : : "l"(surfObject), "r"(x), "r"(y), "r"(data.x));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.2d.b32.clamp [%0, {%1, %2}], {%3};" : : "l"(surfObject), "r"(x), "r"(y), "r"(data.x));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.2d.b32.zero  [%0, {%1, %2}], {%3};" : : "l"(surfObject), "r"(x), "r"(y), "r"(data.x));
   }
}

static __forceinline __declspec(__device__) void surf2Dwrite(long long data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.2d.b64.trap  [%0, {%1, %2}], {%3};" : : "l"(surfObject), "r"(x), "r"(y), "l"(data));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.2d.b64.clamp [%0, {%1, %2}], {%3};" : : "l"(surfObject), "r"(x), "r"(y), "l"(data));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.2d.b64.zero  [%0, {%1, %2}], {%3};" : : "l"(surfObject), "r"(x), "r"(y), "l"(data));
   }
}

static __forceinline __declspec(__device__) void surf2Dwrite(longlong1 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.2d.b64.trap  [%0, {%1, %2}], {%3};" : : "l"(surfObject), "r"(x), "r"(y), "l"(data.x));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.2d.b64.clamp [%0, {%1, %2}], {%3};" : : "l"(surfObject), "r"(x), "r"(y), "l"(data.x));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.2d.b64.zero  [%0, {%1, %2}], {%3};" : : "l"(surfObject), "r"(x), "r"(y), "l"(data.x));
   }
}

static __forceinline __declspec(__device__) void surf2Dwrite(unsigned long long data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.2d.b64.trap  [%0, {%1, %2}], {%3};" : : "l"(surfObject), "r"(x), "r"(y), "l"(data));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.2d.b64.clamp [%0, {%1, %2}], {%3};" : : "l"(surfObject), "r"(x), "r"(y), "l"(data));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.2d.b64.zero  [%0, {%1, %2}], {%3};" : : "l"(surfObject), "r"(x), "r"(y), "l"(data));
   }
}

static __forceinline __declspec(__device__) void surf2Dwrite(ulonglong1 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.2d.b64.trap  [%0, {%1, %2}], {%3};" : : "l"(surfObject), "r"(x), "r"(y), "l"(data.x));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.2d.b64.clamp [%0, {%1, %2}], {%3};" : : "l"(surfObject), "r"(x), "r"(y), "l"(data.x));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.2d.b64.zero  [%0, {%1, %2}], {%3};" : : "l"(surfObject), "r"(x), "r"(y), "l"(data.x));
   }
}

static __forceinline __declspec(__device__) void surf2Dwrite(float data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.2d.b32.trap  [%0, {%1, %2}], {%3};" : : "l"(surfObject), "r"(x), "r"(y), "f"(data));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.2d.b32.clamp [%0, {%1, %2}], {%3};" : : "l"(surfObject), "r"(x), "r"(y), "f"(data));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.2d.b32.zero  [%0, {%1, %2}], {%3};" : : "l"(surfObject), "r"(x), "r"(y), "f"(data));
   }
}

static __forceinline __declspec(__device__) void surf2Dwrite(float1 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.2d.b32.trap  [%0, {%1, %2}], {%3};" : : "l"(surfObject), "r"(x), "r"(y), "f"(data.x));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.2d.b32.clamp [%0, {%1, %2}], {%3};" : : "l"(surfObject), "r"(x), "r"(y), "f"(data.x));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.2d.b32.zero  [%0, {%1, %2}], {%3};" : : "l"(surfObject), "r"(x), "r"(y), "f"(data.x));
   }
}







static __forceinline __declspec(__device__) void surf2Dwrite(char2 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.2d.v2.b8.trap  [%0, {%1, %2}], {%3, %4};" : : "l"(surfObject), "r"(x), "r"(y), "r"((int)data.x), "r"((int)data.y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.2d.v2.b8.clamp [%0, {%1, %2}], {%3, %4};" : : "l"(surfObject), "r"(x), "r"(y), "r"((int)data.x), "r"((int)data.y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.2d.v2.b8.zero  [%0, {%1, %2}], {%3, %4};" : : "l"(surfObject), "r"(x), "r"(y), "r"((int)data.x), "r"((int)data.y));
   }
}

static __forceinline __declspec(__device__) void surf2Dwrite(uchar2 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.2d.v2.b8.trap  [%0, {%1, %2}], {%3, %4};" : : "l"(surfObject), "r"(x), "r"(y), "r"((unsigned int)data.x), "r"((unsigned int)data.y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.2d.v2.b8.clamp [%0, {%1, %2}], {%3, %4};" : : "l"(surfObject), "r"(x), "r"(y), "r"((unsigned int)data.x), "r"((unsigned int)data.y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.2d.v2.b8.zero  [%0, {%1, %2}], {%3, %4};" : : "l"(surfObject), "r"(x), "r"(y), "r"((unsigned int)data.x), "r"((unsigned int)data.y));
   }
}

static __forceinline __declspec(__device__) void surf2Dwrite(short2 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.2d.v2.b16.trap  [%0, {%1, %2}], {%3, %4};" : : "l"(surfObject), "r"(x), "r"(y), "h"(data.x), "h"(data.y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.2d.v2.b16.clamp [%0, {%1, %2}], {%3, %4};" : : "l"(surfObject), "r"(x), "r"(y), "h"(data.x), "h"(data.y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.2d.v2.b16.zero  [%0, {%1, %2}], {%3, %4};" : : "l"(surfObject), "r"(x), "r"(y), "h"(data.x), "h"(data.y));
   }
}

static __forceinline __declspec(__device__) void surf2Dwrite(ushort2 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.2d.v2.b16.trap  [%0, {%1, %2}], {%3, %4};" : : "l"(surfObject), "r"(x), "r"(y), "h"(data.x), "h"(data.y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.2d.v2.b16.clamp [%0, {%1, %2}], {%3, %4};" : : "l"(surfObject), "r"(x), "r"(y), "h"(data.x), "h"(data.y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.2d.v2.b16.zero  [%0, {%1, %2}], {%3, %4};" : : "l"(surfObject), "r"(x), "r"(y), "h"(data.x), "h"(data.y));
   }
}

static __forceinline __declspec(__device__) void surf2Dwrite(int2 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.2d.v2.b32.trap  [%0, {%1, %2}], {%3, %4};" : : "l"(surfObject), "r"(x), "r"(y), "r"(data.x), "r"(data.y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.2d.v2.b32.clamp [%0, {%1, %2}], {%3, %4};" : : "l"(surfObject), "r"(x), "r"(y), "r"(data.x), "r"(data.y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.2d.v2.b32.zero  [%0, {%1, %2}], {%3, %4};" : : "l"(surfObject), "r"(x), "r"(y), "r"(data.x), "r"(data.y));
   }
}

static __forceinline __declspec(__device__) void surf2Dwrite(uint2 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.2d.v2.b32.trap  [%0, {%1, %2}], {%3, %4};" : : "l"(surfObject), "r"(x), "r"(y), "r"(data.x), "r"(data.y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.2d.v2.b32.clamp [%0, {%1, %2}], {%3, %4};" : : "l"(surfObject), "r"(x), "r"(y), "r"(data.x), "r"(data.y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.2d.v2.b32.zero  [%0, {%1, %2}], {%3, %4};" : : "l"(surfObject), "r"(x), "r"(y), "r"(data.x), "r"(data.y));
   }
}

static __forceinline __declspec(__device__) void surf2Dwrite(longlong2 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.2d.v2.b64.trap  [%0, {%1, %2}], {%3, %4};" : : "l"(surfObject), "r"(x), "r"(y), "l"(data.x), "l"(data.y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.2d.v2.b64.clamp [%0, {%1, %2}], {%3, %4};" : : "l"(surfObject), "r"(x), "r"(y), "l"(data.x), "l"(data.y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.2d.v2.b64.zero  [%0, {%1, %2}], {%3, %4};" : : "l"(surfObject), "r"(x), "r"(y), "l"(data.x), "l"(data.y));
   }
}

static __forceinline __declspec(__device__) void surf2Dwrite(ulonglong2 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.2d.v2.b64.trap  [%0, {%1, %2}], {%3, %4};" : : "l"(surfObject), "r"(x), "r"(y), "l"(data.x), "l"(data.y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.2d.v2.b64.clamp [%0, {%1, %2}], {%3, %4};" : : "l"(surfObject), "r"(x), "r"(y), "l"(data.x), "l"(data.y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.2d.v2.b64.zero  [%0, {%1, %2}], {%3, %4};" : : "l"(surfObject), "r"(x), "r"(y), "l"(data.x), "l"(data.y));
   }
}

static __forceinline __declspec(__device__) void surf2Dwrite(float2 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.2d.v2.b32.trap  [%0, {%1, %2}], {%3, %4};" : : "l"(surfObject), "r"(x), "r"(y), "f"(data.x), "f"(data.y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.2d.v2.b32.clamp [%0, {%1, %2}], {%3, %4};" : : "l"(surfObject), "r"(x), "r"(y), "f"(data.x), "f"(data.y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.2d.v2.b32.zero  [%0, {%1, %2}], {%3, %4};" : : "l"(surfObject), "r"(x), "r"(y), "f"(data.x), "f"(data.y));
   }
}







static __forceinline __declspec(__device__) void surf2Dwrite(char4 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.2d.v4.b8.trap  [%0, {%1, %2}], {%3, %4, %5, %6};" : : "l"(surfObject), "r"(x), "r"(y), "r"((int)data.x), "r"((int)data.y), "r"((int)data.z), "r"((int)data.w));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.2d.v4.b8.clamp [%0, {%1, %2}], {%3, %4, %5, %6};" : : "l"(surfObject), "r"(x), "r"(y), "r"((int)data.x), "r"((int)data.y), "r"((int)data.z), "r"((int)data.w));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.2d.v4.b8.zero  [%0, {%1, %2}], {%3, %4, %5, %6};" : : "l"(surfObject), "r"(x), "r"(y), "r"((int)data.x), "r"((int)data.y), "r"((int)data.z), "r"((int)data.w));
   }
}

static __forceinline __declspec(__device__) void surf2Dwrite(uchar4 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.2d.v4.b8.trap  [%0, {%1, %2}], {%3, %4, %5, %6};" : : "l"(surfObject), "r"(x), "r"(y), "r"((unsigned int)data.x), "r"((unsigned int)data.y), "r"((unsigned int)data.z), "r"((unsigned int)data.w));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.2d.v4.b8.clamp [%0, {%1, %2}], {%3, %4, %5, %6};" : : "l"(surfObject), "r"(x), "r"(y), "r"((unsigned int)data.x), "r"((unsigned int)data.y), "r"((unsigned int)data.z), "r"((unsigned int)data.w));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.2d.v4.b8.zero  [%0, {%1, %2}], {%3, %4, %5, %6};" : : "l"(surfObject), "r"(x), "r"(y), "r"((unsigned int)data.x), "r"((unsigned int)data.y), "r"((unsigned int)data.z), "r"((unsigned int)data.w));
   }
}

static __forceinline __declspec(__device__) void surf2Dwrite(short4 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.2d.v4.b16.trap  [%0, {%1, %2}], {%3, %4, %5, %6};" : : "l"(surfObject), "r"(x), "r"(y), "h"(data.x), "h"(data.y), "h"(data.z), "h"(data.w));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.2d.v4.b16.clamp [%0, {%1, %2}], {%3, %4, %5, %6};" : : "l"(surfObject), "r"(x), "r"(y), "h"(data.x), "h"(data.y), "h"(data.z), "h"(data.w));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.2d.v4.b16.zero  [%0, {%1, %2}], {%3, %4, %5, %6};" : : "l"(surfObject), "r"(x), "r"(y), "h"(data.x), "h"(data.y), "h"(data.z), "h"(data.w));
   }
}

static __forceinline __declspec(__device__) void surf2Dwrite(ushort4 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.2d.v4.b16.trap  [%0, {%1, %2}], {%3, %4, %5, %6};" : : "l"(surfObject), "r"(x), "r"(y), "h"(data.x), "h"(data.y), "h"(data.z), "h"(data.w));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.2d.v4.b16.clamp [%0, {%1, %2}], {%3, %4, %5, %6};" : : "l"(surfObject), "r"(x), "r"(y), "h"(data.x), "h"(data.y), "h"(data.z), "h"(data.w));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.2d.v4.b16.zero  [%0, {%1, %2}], {%3, %4, %5, %6};" : : "l"(surfObject), "r"(x), "r"(y), "h"(data.x), "h"(data.y), "h"(data.z), "h"(data.w));
   }
}

static __forceinline __declspec(__device__) void surf2Dwrite(int4 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.2d.v4.b32.trap  [%0, {%1, %2}], {%3, %4, %5, %6};" : : "l"(surfObject), "r"(x), "r"(y), "r"(data.x), "r"(data.y), "r"(data.z), "r"(data.w));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.2d.v4.b32.clamp [%0, {%1, %2}], {%3, %4, %5, %6};" : : "l"(surfObject), "r"(x), "r"(y), "r"(data.x), "r"(data.y), "r"(data.z), "r"(data.w));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.2d.v4.b32.zero  [%0, {%1, %2}], {%3, %4, %5, %6};" : : "l"(surfObject), "r"(x), "r"(y), "r"(data.x), "r"(data.y), "r"(data.z), "r"(data.w));
   }
}

static __forceinline __declspec(__device__) void surf2Dwrite(uint4 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.2d.v4.b32.trap  [%0, {%1, %2}], {%3, %4, %5, %6};" : : "l"(surfObject), "r"(x), "r"(y), "r"(data.x), "r"(data.y), "r"(data.z), "r"(data.w));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.2d.v4.b32.clamp [%0, {%1, %2}], {%3, %4, %5, %6};" : : "l"(surfObject), "r"(x), "r"(y), "r"(data.x), "r"(data.y), "r"(data.z), "r"(data.w));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.2d.v4.b32.zero  [%0, {%1, %2}], {%3, %4, %5, %6};" : : "l"(surfObject), "r"(x), "r"(y), "r"(data.x), "r"(data.y), "r"(data.z), "r"(data.w));
   }
}

static __forceinline __declspec(__device__) void surf2Dwrite(float4 data, cudaSurfaceObject_t surfObject, int x, int y, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.2d.v4.b32.trap  [%0, {%1, %2}], {%3, %4, %5, %6};" : : "l"(surfObject), "r"(x), "r"(y), "f"(data.x), "f"(data.y), "f"(data.z), "f"(data.w));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.2d.v4.b32.clamp [%0, {%1, %2}], {%3, %4, %5, %6};" : : "l"(surfObject), "r"(x), "r"(y), "f"(data.x), "f"(data.y), "f"(data.z), "f"(data.w));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.2d.v4.b32.zero  [%0, {%1, %2}], {%3, %4, %5, %6};" : : "l"(surfObject), "r"(x), "r"(y), "f"(data.x), "f"(data.y), "f"(data.z), "f"(data.w));
   }
}







static __forceinline __declspec(__device__) void surf3Dwrite(char data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.3d.b8.trap  [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(x), "r"(y), "r"(z), "r"((int)data));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.3d.b8.clamp [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(x), "r"(y), "r"(z), "r"((int)data));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.3d.b8.zero  [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(x), "r"(y), "r"(z), "r"((int)data));
   }
}

static __forceinline __declspec(__device__) void surf3Dwrite(signed char data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.3d.b8.trap  [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(x), "r"(y), "r"(z), "r"((int)data));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.3d.b8.clamp [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(x), "r"(y), "r"(z), "r"((int)data));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.3d.b8.zero  [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(x), "r"(y), "r"(z), "r"((int)data));
   }
}

static __forceinline __declspec(__device__) void surf3Dwrite(char1 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.3d.b8.trap  [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(x), "r"(y), "r"(z), "r"((int)data.x));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.3d.b8.clamp [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(x), "r"(y), "r"(z), "r"((int)data.x));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.3d.b8.zero  [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(x), "r"(y), "r"(z), "r"((int)data.x));
   }
}

static __forceinline __declspec(__device__) void surf3Dwrite(unsigned char data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.3d.b8.trap  [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(x), "r"(y), "r"(z), "r"((unsigned int)data));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.3d.b8.clamp [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(x), "r"(y), "r"(z), "r"((unsigned int)data));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.3d.b8.zero  [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(x), "r"(y), "r"(z), "r"((unsigned int)data));
   }
}

static __forceinline __declspec(__device__) void surf3Dwrite(uchar1 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.3d.b8.trap  [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(x), "r"(y), "r"(z), "r"((unsigned int)data.x));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.3d.b8.clamp [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(x), "r"(y), "r"(z), "r"((unsigned int)data.x));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.3d.b8.zero  [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(x), "r"(y), "r"(z), "r"((unsigned int)data.x));
   }
}

static __forceinline __declspec(__device__) void surf3Dwrite(short data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.3d.b16.trap  [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(x), "r"(y), "r"(z), "h"(data));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.3d.b16.clamp [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(x), "r"(y), "r"(z), "h"(data));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.3d.b16.zero  [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(x), "r"(y), "r"(z), "h"(data));
   }
}

static __forceinline __declspec(__device__) void surf3Dwrite(short1 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.3d.b16.trap  [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(x), "r"(y), "r"(z), "h"(data.x));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.3d.b16.clamp [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(x), "r"(y), "r"(z), "h"(data.x));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.3d.b16.zero  [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(x), "r"(y), "r"(z), "h"(data.x));
   }
}

static __forceinline __declspec(__device__) void surf3Dwrite(unsigned short data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.3d.b16.trap  [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(x), "r"(y), "r"(z), "h"(data));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.3d.b16.clamp [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(x), "r"(y), "r"(z), "h"(data));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.3d.b16.zero  [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(x), "r"(y), "r"(z), "h"(data));
   }
}

static __forceinline __declspec(__device__) void surf3Dwrite(ushort1 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.3d.b16.trap  [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(x), "r"(y), "r"(z), "h"(data.x));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.3d.b16.clamp [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(x), "r"(y), "r"(z), "h"(data.x));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.3d.b16.zero  [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(x), "r"(y), "r"(z), "h"(data.x));
   }
}

static __forceinline __declspec(__device__) void surf3Dwrite(int data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.3d.b32.trap  [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(x), "r"(y), "r"(z), "r"(data));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.3d.b32.clamp [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(x), "r"(y), "r"(z), "r"(data));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.3d.b32.zero  [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(x), "r"(y), "r"(z), "r"(data));
   }
}

static __forceinline __declspec(__device__) void surf3Dwrite(int1 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.3d.b32.trap  [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(x), "r"(y), "r"(z), "r"(data.x));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.3d.b32.clamp [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(x), "r"(y), "r"(z), "r"(data.x));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.3d.b32.zero  [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(x), "r"(y), "r"(z), "r"(data.x));
   }
}

static __forceinline __declspec(__device__) void surf3Dwrite(unsigned int data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.3d.b32.trap  [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(x), "r"(y), "r"(z), "r"(data));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.3d.b32.clamp [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(x), "r"(y), "r"(z), "r"(data));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.3d.b32.zero  [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(x), "r"(y), "r"(z), "r"(data));
   }
}

static __forceinline __declspec(__device__) void surf3Dwrite(uint1 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.3d.b32.trap  [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(x), "r"(y), "r"(z), "r"(data.x));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.3d.b32.clamp [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(x), "r"(y), "r"(z), "r"(data.x));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.3d.b32.zero  [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(x), "r"(y), "r"(z), "r"(data.x));
   }
}

static __forceinline __declspec(__device__) void surf3Dwrite(long long data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.3d.b64.trap  [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(x), "r"(y), "r"(z), "l"(data));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.3d.b64.clamp [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(x), "r"(y), "r"(z), "l"(data));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.3d.b64.zero  [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(x), "r"(y), "r"(z), "l"(data));
   }
}

static __forceinline __declspec(__device__) void surf3Dwrite(longlong1 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.3d.b64.trap  [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(x), "r"(y), "r"(z), "l"(data.x));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.3d.b64.clamp [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(x), "r"(y), "r"(z), "l"(data.x));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.3d.b64.zero  [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(x), "r"(y), "r"(z), "l"(data.x));
   }
}

static __forceinline __declspec(__device__) void surf3Dwrite(unsigned long long data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.3d.b64.trap  [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(x), "r"(y), "r"(z), "l"(data));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.3d.b64.clamp [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(x), "r"(y), "r"(z), "l"(data));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.3d.b64.zero  [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(x), "r"(y), "r"(z), "l"(data));
   }
}

static __forceinline __declspec(__device__) void surf3Dwrite(ulonglong1 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.3d.b64.trap  [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(x), "r"(y), "r"(z), "l"(data.x));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.3d.b64.clamp [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(x), "r"(y), "r"(z), "l"(data.x));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.3d.b64.zero  [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(x), "r"(y), "r"(z), "l"(data.x));
   }
}

static __forceinline __declspec(__device__) void surf3Dwrite(float data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.3d.b32.trap  [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(x), "r"(y), "r"(z), "f"(data));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.3d.b32.clamp [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(x), "r"(y), "r"(z), "f"(data));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.3d.b32.zero  [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(x), "r"(y), "r"(z), "f"(data));
   }
}

static __forceinline __declspec(__device__) void surf3Dwrite(float1 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.3d.b32.trap  [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(x), "r"(y), "r"(z), "f"(data.x));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.3d.b32.clamp [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(x), "r"(y), "r"(z), "f"(data.x));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.3d.b32.zero  [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(x), "r"(y), "r"(z), "f"(data.x));
   }
}







static __forceinline __declspec(__device__) void surf3Dwrite(char2 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.3d.v2.b8.trap  [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l"(surfObject), "r"(x), "r"(y), "r"(z), "r"((int)data.x), "r"((int)data.y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.3d.v2.b8.clamp [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l"(surfObject), "r"(x), "r"(y), "r"(z), "r"((int)data.x), "r"((int)data.y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.3d.v2.b8.zero  [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l"(surfObject), "r"(x), "r"(y), "r"(z), "r"((int)data.x), "r"((int)data.y));
   }
}

static __forceinline __declspec(__device__) void surf3Dwrite(uchar2 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.3d.v2.b8.trap  [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l"(surfObject), "r"(x), "r"(y), "r"(z), "r"((unsigned int)data.x), "r"((unsigned int)data.y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.3d.v2.b8.clamp [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l"(surfObject), "r"(x), "r"(y), "r"(z), "r"((unsigned int)data.x), "r"((unsigned int)data.y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.3d.v2.b8.zero  [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l"(surfObject), "r"(x), "r"(y), "r"(z), "r"((unsigned int)data.x), "r"((unsigned int)data.y));
   }
}

static __forceinline __declspec(__device__) void surf3Dwrite(short2 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.3d.v2.b16.trap  [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l"(surfObject), "r"(x), "r"(y), "r"(z), "h"(data.x), "h"(data.y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.3d.v2.b16.clamp [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l"(surfObject), "r"(x), "r"(y), "r"(z), "h"(data.x), "h"(data.y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.3d.v2.b16.zero  [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l"(surfObject), "r"(x), "r"(y), "r"(z), "h"(data.x), "h"(data.y));
   }
}

static __forceinline __declspec(__device__) void surf3Dwrite(ushort2 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.3d.v2.b16.trap  [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l"(surfObject), "r"(x), "r"(y), "r"(z), "h"(data.x), "h"(data.y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.3d.v2.b16.clamp [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l"(surfObject), "r"(x), "r"(y), "r"(z), "h"(data.x), "h"(data.y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.3d.v2.b16.zero  [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l"(surfObject), "r"(x), "r"(y), "r"(z), "h"(data.x), "h"(data.y));
   }
}

static __forceinline __declspec(__device__) void surf3Dwrite(int2 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.3d.v2.b32.trap  [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l"(surfObject), "r"(x), "r"(y), "r"(z), "r"(data.x), "r"(data.y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.3d.v2.b32.clamp [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l"(surfObject), "r"(x), "r"(y), "r"(z), "r"(data.x), "r"(data.y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.3d.v2.b32.zero  [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l"(surfObject), "r"(x), "r"(y), "r"(z), "r"(data.x), "r"(data.y));
   }
}

static __forceinline __declspec(__device__) void surf3Dwrite(uint2 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.3d.v2.b32.trap  [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l"(surfObject), "r"(x), "r"(y), "r"(z), "r"(data.x), "r"(data.y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.3d.v2.b32.clamp [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l"(surfObject), "r"(x), "r"(y), "r"(z), "r"(data.x), "r"(data.y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.3d.v2.b32.zero  [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l"(surfObject), "r"(x), "r"(y), "r"(z), "r"(data.x), "r"(data.y));
   }
}

static __forceinline __declspec(__device__) void surf3Dwrite(longlong2 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.3d.v2.b64.trap  [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l"(surfObject), "r"(x), "r"(y), "r"(z), "l"(data.x), "l"(data.y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.3d.v2.b64.clamp [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l"(surfObject), "r"(x), "r"(y), "r"(z), "l"(data.x), "l"(data.y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.3d.v2.b64.zero  [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l"(surfObject), "r"(x), "r"(y), "r"(z), "l"(data.x), "l"(data.y));
   }
}

static __forceinline __declspec(__device__) void surf3Dwrite(ulonglong2 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.3d.v2.b64.trap  [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l"(surfObject), "r"(x), "r"(y), "r"(z), "l"(data.x), "l"(data.y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.3d.v2.b64.clamp [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l"(surfObject), "r"(x), "r"(y), "r"(z), "l"(data.x), "l"(data.y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.3d.v2.b64.zero  [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l"(surfObject), "r"(x), "r"(y), "r"(z), "l"(data.x), "l"(data.y));
   }
}

static __forceinline __declspec(__device__) void surf3Dwrite(float2 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.3d.v2.b32.trap  [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l"(surfObject), "r"(x), "r"(y), "r"(z), "f"(data.x), "f"(data.y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.3d.v2.b32.clamp [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l"(surfObject), "r"(x), "r"(y), "r"(z), "f"(data.x), "f"(data.y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.3d.v2.b32.zero  [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l"(surfObject), "r"(x), "r"(y), "r"(z), "f"(data.x), "f"(data.y));
   }
}







static __forceinline __declspec(__device__) void surf3Dwrite(char4 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.3d.v4.b8.trap  [%0, {%1, %2, %3, %3}], {%4, %5, %6, %7};" : : "l"(surfObject), "r"(x), "r"(y), "r"(z), "r"((int)data.x), "r"((int)data.y), "r"((int)data.z), "r"((int)data.w));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.3d.v4.b8.clamp [%0, {%1, %2, %3, %3}], {%4, %5, %6, %7};" : : "l"(surfObject), "r"(x), "r"(y), "r"(z), "r"((int)data.x), "r"((int)data.y), "r"((int)data.z), "r"((int)data.w));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.3d.v4.b8.zero  [%0, {%1, %2, %3, %3}], {%4, %5, %6, %7};" : : "l"(surfObject), "r"(x), "r"(y), "r"(z), "r"((int)data.x), "r"((int)data.y), "r"((int)data.z), "r"((int)data.w));
   }
}

static __forceinline __declspec(__device__) void surf3Dwrite(uchar4 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.3d.v4.b8.trap  [%0, {%1, %2, %3, %3}], {%4, %5, %6, %7};" : : "l"(surfObject), "r"(x), "r"(y), "r"(z), "r"((unsigned int)data.x), "r"((unsigned int)data.y), "r"((unsigned int)data.z), "r"((unsigned int)data.w));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.3d.v4.b8.clamp [%0, {%1, %2, %3, %3}], {%4, %5, %6, %7};" : : "l"(surfObject), "r"(x), "r"(y), "r"(z), "r"((unsigned int)data.x), "r"((unsigned int)data.y), "r"((unsigned int)data.z), "r"((unsigned int)data.w));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.3d.v4.b8.zero  [%0, {%1, %2, %3, %3}], {%4, %5, %6, %7};" : : "l"(surfObject), "r"(x), "r"(y), "r"(z), "r"((unsigned int)data.x), "r"((unsigned int)data.y), "r"((unsigned int)data.z), "r"((unsigned int)data.w));
   }
}

static __forceinline __declspec(__device__) void surf3Dwrite(short4 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.3d.v4.b16.trap  [%0, {%1, %2, %3, %3}], {%4, %5, %6, %7};" : : "l"(surfObject), "r"(x), "r"(y), "r"(z), "h"(data.x), "h"(data.y), "h"(data.z), "h"(data.w));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.3d.v4.b16.clamp [%0, {%1, %2, %3, %3}], {%4, %5, %6, %7};" : : "l"(surfObject), "r"(x), "r"(y), "r"(z), "h"(data.x), "h"(data.y), "h"(data.z), "h"(data.w));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.3d.v4.b16.zero  [%0, {%1, %2, %3, %3}], {%4, %5, %6, %7};" : : "l"(surfObject), "r"(x), "r"(y), "r"(z), "h"(data.x), "h"(data.y), "h"(data.z), "h"(data.w));
   }
}

static __forceinline __declspec(__device__) void surf3Dwrite(ushort4 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.3d.v4.b16.trap  [%0, {%1, %2, %3, %3}], {%4, %5, %6, %7};" : : "l"(surfObject), "r"(x), "r"(y), "r"(z), "h"(data.x), "h"(data.y), "h"(data.z), "h"(data.w));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.3d.v4.b16.clamp [%0, {%1, %2, %3, %3}], {%4, %5, %6, %7};" : : "l"(surfObject), "r"(x), "r"(y), "r"(z), "h"(data.x), "h"(data.y), "h"(data.z), "h"(data.w));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.3d.v4.b16.zero  [%0, {%1, %2, %3, %3}], {%4, %5, %6, %7};" : : "l"(surfObject), "r"(x), "r"(y), "r"(z), "h"(data.x), "h"(data.y), "h"(data.z), "h"(data.w));
   }
}

static __forceinline __declspec(__device__) void surf3Dwrite(int4 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.3d.v4.b32.trap  [%0, {%1, %2, %3, %3}], {%4, %5, %6, %7};" : : "l"(surfObject), "r"(x), "r"(y), "r"(z), "r"(data.x), "r"(data.y), "r"(data.z), "r"(data.w));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.3d.v4.b32.clamp [%0, {%1, %2, %3, %3}], {%4, %5, %6, %7};" : : "l"(surfObject), "r"(x), "r"(y), "r"(z), "r"(data.x), "r"(data.y), "r"(data.z), "r"(data.w));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.3d.v4.b32.zero  [%0, {%1, %2, %3, %3}], {%4, %5, %6, %7};" : : "l"(surfObject), "r"(x), "r"(y), "r"(z), "r"(data.x), "r"(data.y), "r"(data.z), "r"(data.w));
   }
}

static __forceinline __declspec(__device__) void surf3Dwrite(uint4 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.3d.v4.b32.trap  [%0, {%1, %2, %3, %3}], {%4, %5, %6, %7};" : : "l"(surfObject), "r"(x), "r"(y), "r"(z), "r"(data.x), "r"(data.y), "r"(data.z), "r"(data.w));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.3d.v4.b32.clamp [%0, {%1, %2, %3, %3}], {%4, %5, %6, %7};" : : "l"(surfObject), "r"(x), "r"(y), "r"(z), "r"(data.x), "r"(data.y), "r"(data.z), "r"(data.w));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.3d.v4.b32.zero  [%0, {%1, %2, %3, %3}], {%4, %5, %6, %7};" : : "l"(surfObject), "r"(x), "r"(y), "r"(z), "r"(data.x), "r"(data.y), "r"(data.z), "r"(data.w));
   }
}

static __forceinline __declspec(__device__) void surf3Dwrite(float4 data, cudaSurfaceObject_t surfObject, int x, int y, int z, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.3d.v4.b32.trap  [%0, {%1, %2, %3, %3}], {%4, %5, %6, %7};" : : "l"(surfObject), "r"(x), "r"(y), "r"(z), "f"(data.x), "f"(data.y), "f"(data.z), "f"(data.w));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.3d.v4.b32.clamp [%0, {%1, %2, %3, %3}], {%4, %5, %6, %7};" : : "l"(surfObject), "r"(x), "r"(y), "r"(z), "f"(data.x), "f"(data.y), "f"(data.z), "f"(data.w));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.3d.v4.b32.zero  [%0, {%1, %2, %3, %3}], {%4, %5, %6, %7};" : : "l"(surfObject), "r"(x), "r"(y), "r"(z), "f"(data.x), "f"(data.y), "f"(data.z), "f"(data.w));
   }
}







static __forceinline __declspec(__device__) void surf1DLayeredwrite(char data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.a1d.b8.trap  [%0, {%1, %2}], {%3};" : : "l"(surfObject), "r"(layer), "r"(x), "r"((int)data));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.a1d.b8.clamp [%0, {%1, %2}], {%3};" : : "l"(surfObject), "r"(layer), "r"(x), "r"((int)data));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.a1d.b8.zero  [%0, {%1, %2}], {%3};" : : "l"(surfObject), "r"(layer), "r"(x), "r"((int)data));
   }
}

static __forceinline __declspec(__device__) void surf1DLayeredwrite(signed char data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.a1d.b8.trap  [%0, {%1, %2}], {%3};" : : "l"(surfObject), "r"(layer), "r"(x), "r"((int)data));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.a1d.b8.clamp [%0, {%1, %2}], {%3};" : : "l"(surfObject), "r"(layer), "r"(x), "r"((int)data));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.a1d.b8.zero  [%0, {%1, %2}], {%3};" : : "l"(surfObject), "r"(layer), "r"(x), "r"((int)data));
   }
}

static __forceinline __declspec(__device__) void surf1DLayeredwrite(char1 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.a1d.b8.trap  [%0, {%1, %2}], {%3};" : : "l"(surfObject), "r"(layer), "r"(x), "r"((int)data.x));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.a1d.b8.clamp [%0, {%1, %2}], {%3};" : : "l"(surfObject), "r"(layer), "r"(x), "r"((int)data.x));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.a1d.b8.zero  [%0, {%1, %2}], {%3};" : : "l"(surfObject), "r"(layer), "r"(x), "r"((int)data.x));
   }
}

static __forceinline __declspec(__device__) void surf1DLayeredwrite(unsigned char data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.a1d.b8.trap  [%0, {%1, %2}], {%3};" : : "l"(surfObject), "r"(layer), "r"(x), "r"((unsigned int)data));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.a1d.b8.clamp [%0, {%1, %2}], {%3};" : : "l"(surfObject), "r"(layer), "r"(x), "r"((unsigned int)data));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.a1d.b8.zero  [%0, {%1, %2}], {%3};" : : "l"(surfObject), "r"(layer), "r"(x), "r"((unsigned int)data));
   }
}

static __forceinline __declspec(__device__) void surf1DLayeredwrite(uchar1 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.a1d.b8.trap  [%0, {%1, %2}], {%3};" : : "l"(surfObject), "r"(layer), "r"(x), "r"((unsigned int)data.x));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.a1d.b8.clamp [%0, {%1, %2}], {%3};" : : "l"(surfObject), "r"(layer), "r"(x), "r"((unsigned int)data.x));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.a1d.b8.zero  [%0, {%1, %2}], {%3};" : : "l"(surfObject), "r"(layer), "r"(x), "r"((unsigned int)data.x));
   }
}

static __forceinline __declspec(__device__) void surf1DLayeredwrite(short data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.a1d.b16.trap  [%0, {%1, %2}], {%3};" : : "l"(surfObject), "r"(layer), "r"(x), "h"(data));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.a1d.b16.clamp [%0, {%1, %2}], {%3};" : : "l"(surfObject), "r"(layer), "r"(x), "h"(data));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.a1d.b16.zero  [%0, {%1, %2}], {%3};" : : "l"(surfObject), "r"(layer), "r"(x), "h"(data));
   }
}

static __forceinline __declspec(__device__) void surf1DLayeredwrite(short1 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.a1d.b16.trap  [%0, {%1, %2}], {%3};" : : "l"(surfObject), "r"(layer), "r"(x), "h"(data.x));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.a1d.b16.clamp [%0, {%1, %2}], {%3};" : : "l"(surfObject), "r"(layer), "r"(x), "h"(data.x));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.a1d.b16.zero  [%0, {%1, %2}], {%3};" : : "l"(surfObject), "r"(layer), "r"(x), "h"(data.x));
   }
}

static __forceinline __declspec(__device__) void surf1DLayeredwrite(unsigned short data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.a1d.b16.trap  [%0, {%1, %2}], {%3};" : : "l"(surfObject), "r"(layer), "r"(x), "h"(data));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.a1d.b16.clamp [%0, {%1, %2}], {%3};" : : "l"(surfObject), "r"(layer), "r"(x), "h"(data));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.a1d.b16.zero  [%0, {%1, %2}], {%3};" : : "l"(surfObject), "r"(layer), "r"(x), "h"(data));
   }
}

static __forceinline __declspec(__device__) void surf1DLayeredwrite(ushort1 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.a1d.b16.trap  [%0, {%1, %2}], {%3};" : : "l"(surfObject), "r"(layer), "r"(x), "h"(data.x));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.a1d.b16.clamp [%0, {%1, %2}], {%3};" : : "l"(surfObject), "r"(layer), "r"(x), "h"(data.x));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.a1d.b16.zero  [%0, {%1, %2}], {%3};" : : "l"(surfObject), "r"(layer), "r"(x), "h"(data.x));
   }
}

static __forceinline __declspec(__device__) void surf1DLayeredwrite(int data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.a1d.b32.trap  [%0, {%1, %2}], {%3};" : : "l"(surfObject), "r"(layer), "r"(x), "r"(data));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.a1d.b32.clamp [%0, {%1, %2}], {%3};" : : "l"(surfObject), "r"(layer), "r"(x), "r"(data));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.a1d.b32.zero  [%0, {%1, %2}], {%3};" : : "l"(surfObject), "r"(layer), "r"(x), "r"(data));
   }
}

static __forceinline __declspec(__device__) void surf1DLayeredwrite(int1 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.a1d.b32.trap  [%0, {%1, %2}], {%3};" : : "l"(surfObject), "r"(layer), "r"(x), "r"(data.x));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.a1d.b32.clamp [%0, {%1, %2}], {%3};" : : "l"(surfObject), "r"(layer), "r"(x), "r"(data.x));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.a1d.b32.zero  [%0, {%1, %2}], {%3};" : : "l"(surfObject), "r"(layer), "r"(x), "r"(data.x));
   }
}

static __forceinline __declspec(__device__) void surf1DLayeredwrite(unsigned int data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.a1d.b32.trap  [%0, {%1, %2}], {%3};" : : "l"(surfObject), "r"(layer), "r"(x), "r"(data));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.a1d.b32.clamp [%0, {%1, %2}], {%3};" : : "l"(surfObject), "r"(layer), "r"(x), "r"(data));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.a1d.b32.zero  [%0, {%1, %2}], {%3};" : : "l"(surfObject), "r"(layer), "r"(x), "r"(data));
   }
}

static __forceinline __declspec(__device__) void surf1DLayeredwrite(uint1 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.a1d.b32.trap  [%0, {%1, %2}], {%3};" : : "l"(surfObject), "r"(layer), "r"(x), "r"(data.x));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.a1d.b32.clamp [%0, {%1, %2}], {%3};" : : "l"(surfObject), "r"(layer), "r"(x), "r"(data.x));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.a1d.b32.zero  [%0, {%1, %2}], {%3};" : : "l"(surfObject), "r"(layer), "r"(x), "r"(data.x));
   }
}

static __forceinline __declspec(__device__) void surf1DLayeredwrite(long long data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.a1d.b64.trap  [%0, {%1, %2}], {%3};" : : "l"(surfObject), "r"(layer), "r"(x), "l"(data));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.a1d.b64.clamp [%0, {%1, %2}], {%3};" : : "l"(surfObject), "r"(layer), "r"(x), "l"(data));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.a1d.b64.zero  [%0, {%1, %2}], {%3};" : : "l"(surfObject), "r"(layer), "r"(x), "l"(data));
   }
}

static __forceinline __declspec(__device__) void surf1DLayeredwrite(longlong1 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.a1d.b64.trap  [%0, {%1, %2}], {%3};" : : "l"(surfObject), "r"(layer), "r"(x), "l"(data.x));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.a1d.b64.clamp [%0, {%1, %2}], {%3};" : : "l"(surfObject), "r"(layer), "r"(x), "l"(data.x));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.a1d.b64.zero  [%0, {%1, %2}], {%3};" : : "l"(surfObject), "r"(layer), "r"(x), "l"(data.x));
   }
}

static __forceinline __declspec(__device__) void surf1DLayeredwrite(unsigned long long data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.a1d.b64.trap  [%0, {%1, %2}], {%3};" : : "l"(surfObject), "r"(layer), "r"(x), "l"(data));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.a1d.b64.clamp [%0, {%1, %2}], {%3};" : : "l"(surfObject), "r"(layer), "r"(x), "l"(data));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.a1d.b64.zero  [%0, {%1, %2}], {%3};" : : "l"(surfObject), "r"(layer), "r"(x), "l"(data));
   }
}

static __forceinline __declspec(__device__) void surf1DLayeredwrite(ulonglong1 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.a1d.b64.trap  [%0, {%1, %2}], {%3};" : : "l"(surfObject), "r"(layer), "r"(x), "l"(data.x));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.a1d.b64.clamp [%0, {%1, %2}], {%3};" : : "l"(surfObject), "r"(layer), "r"(x), "l"(data.x));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.a1d.b64.zero  [%0, {%1, %2}], {%3};" : : "l"(surfObject), "r"(layer), "r"(x), "l"(data.x));
   }
}

static __forceinline __declspec(__device__) void surf1DLayeredwrite(float data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.a1d.b32.trap  [%0, {%1, %2}], {%3};" : : "l"(surfObject), "r"(layer), "r"(x), "f"(data));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.a1d.b32.clamp [%0, {%1, %2}], {%3};" : : "l"(surfObject), "r"(layer), "r"(x), "f"(data));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.a1d.b32.zero  [%0, {%1, %2}], {%3};" : : "l"(surfObject), "r"(layer), "r"(x), "f"(data));
   }
}

static __forceinline __declspec(__device__) void surf1DLayeredwrite(float1 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.a1d.b32.trap  [%0, {%1, %2}], {%3};" : : "l"(surfObject), "r"(layer), "r"(x), "f"(data.x));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.a1d.b32.clamp [%0, {%1, %2}], {%3};" : : "l"(surfObject), "r"(layer), "r"(x), "f"(data.x));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.a1d.b32.zero  [%0, {%1, %2}], {%3};" : : "l"(surfObject), "r"(layer), "r"(x), "f"(data.x));
   }
}







static __forceinline __declspec(__device__) void surf1DLayeredwrite(char2 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.a1d.v2.b8.trap  [%0, {%1, %2}], {%3, %4};" : : "l"(surfObject), "r"(layer), "r"(x), "r"((int)data.x), "r"((int)data.y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.a1d.v2.b8.clamp [%0, {%1, %2}], {%3, %4};" : : "l"(surfObject), "r"(layer), "r"(x), "r"((int)data.x), "r"((int)data.y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.a1d.v2.b8.zero  [%0, {%1, %2}], {%3, %4};" : : "l"(surfObject), "r"(layer), "r"(x), "r"((int)data.x), "r"((int)data.y));
   }
}

static __forceinline __declspec(__device__) void surf1DLayeredwrite(uchar2 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.a1d.v2.b8.trap  [%0, {%1, %2}], {%3, %4};" : : "l"(surfObject), "r"(layer), "r"(x), "r"((unsigned int)data.x), "r"((unsigned int)data.y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.a1d.v2.b8.clamp [%0, {%1, %2}], {%3, %4};" : : "l"(surfObject), "r"(layer), "r"(x), "r"((unsigned int)data.x), "r"((unsigned int)data.y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.a1d.v2.b8.zero  [%0, {%1, %2}], {%3, %4};" : : "l"(surfObject), "r"(layer), "r"(x), "r"((unsigned int)data.x), "r"((unsigned int)data.y));
   }
}

static __forceinline __declspec(__device__) void surf1DLayeredwrite(short2 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.a1d.v2.b16.trap  [%0, {%1, %2}], {%3, %4};" : : "l"(surfObject), "r"(layer), "r"(x), "h"(data.x), "h"(data.y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.a1d.v2.b16.clamp [%0, {%1, %2}], {%3, %4};" : : "l"(surfObject), "r"(layer), "r"(x), "h"(data.x), "h"(data.y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.a1d.v2.b16.zero  [%0, {%1, %2}], {%3, %4};" : : "l"(surfObject), "r"(layer), "r"(x), "h"(data.x), "h"(data.y));
   }
}

static __forceinline __declspec(__device__) void surf1DLayeredwrite(ushort2 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.a1d.v2.b16.trap  [%0, {%1, %2}], {%3, %4};" : : "l"(surfObject), "r"(layer), "r"(x), "h"(data.x), "h"(data.y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.a1d.v2.b16.clamp [%0, {%1, %2}], {%3, %4};" : : "l"(surfObject), "r"(layer), "r"(x), "h"(data.x), "h"(data.y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.a1d.v2.b16.zero  [%0, {%1, %2}], {%3, %4};" : : "l"(surfObject), "r"(layer), "r"(x), "h"(data.x), "h"(data.y));
   }
}

static __forceinline __declspec(__device__) void surf1DLayeredwrite(int2 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.a1d.v2.b32.trap  [%0, {%1, %2}], {%3, %4};" : : "l"(surfObject), "r"(layer), "r"(x), "r"(data.x), "r"(data.y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.a1d.v2.b32.clamp [%0, {%1, %2}], {%3, %4};" : : "l"(surfObject), "r"(layer), "r"(x), "r"(data.x), "r"(data.y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.a1d.v2.b32.zero  [%0, {%1, %2}], {%3, %4};" : : "l"(surfObject), "r"(layer), "r"(x), "r"(data.x), "r"(data.y));
   }
}

static __forceinline __declspec(__device__) void surf1DLayeredwrite(uint2 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.a1d.v2.b32.trap  [%0, {%1, %2}], {%3, %4};" : : "l"(surfObject), "r"(layer), "r"(x), "r"(data.x), "r"(data.y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.a1d.v2.b32.clamp [%0, {%1, %2}], {%3, %4};" : : "l"(surfObject), "r"(layer), "r"(x), "r"(data.x), "r"(data.y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.a1d.v2.b32.zero  [%0, {%1, %2}], {%3, %4};" : : "l"(surfObject), "r"(layer), "r"(x), "r"(data.x), "r"(data.y));
   }
}

static __forceinline __declspec(__device__) void surf1DLayeredwrite(longlong2 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.a1d.v2.b64.trap  [%0, {%1, %2}], {%3, %4};" : : "l"(surfObject), "r"(layer), "r"(x), "l"(data.x), "l"(data.y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.a1d.v2.b64.clamp [%0, {%1, %2}], {%3, %4};" : : "l"(surfObject), "r"(layer), "r"(x), "l"(data.x), "l"(data.y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.a1d.v2.b64.zero  [%0, {%1, %2}], {%3, %4};" : : "l"(surfObject), "r"(layer), "r"(x), "l"(data.x), "l"(data.y));
   }
}

static __forceinline __declspec(__device__) void surf1DLayeredwrite(ulonglong2 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.a1d.v2.b64.trap  [%0, {%1, %2}], {%3, %4};" : : "l"(surfObject), "r"(layer), "r"(x), "l"(data.x), "l"(data.y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.a1d.v2.b64.clamp [%0, {%1, %2}], {%3, %4};" : : "l"(surfObject), "r"(layer), "r"(x), "l"(data.x), "l"(data.y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.a1d.v2.b64.zero  [%0, {%1, %2}], {%3, %4};" : : "l"(surfObject), "r"(layer), "r"(x), "l"(data.x), "l"(data.y));
   }
}

static __forceinline __declspec(__device__) void surf1DLayeredwrite(float2 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.a1d.v2.b32.trap  [%0, {%1, %2}], {%3, %4};" : : "l"(surfObject), "r"(layer), "r"(x), "f"(data.x), "f"(data.y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.a1d.v2.b32.clamp [%0, {%1, %2}], {%3, %4};" : : "l"(surfObject), "r"(layer), "r"(x), "f"(data.x), "f"(data.y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.a1d.v2.b32.zero  [%0, {%1, %2}], {%3, %4};" : : "l"(surfObject), "r"(layer), "r"(x), "f"(data.x), "f"(data.y));
   }
}







static __forceinline __declspec(__device__) void surf1DLayeredwrite(char4 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.a1d.v4.b8.trap  [%0, {%1, %2}], {%3, %4, %5, %6};" : : "l"(surfObject), "r"(layer), "r"(x), "r"((int)data.x), "r"((int)data.y), "r"((int)data.z), "r"((int)data.w));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.a1d.v4.b8.clamp [%0, {%1, %2}], {%3, %4, %5, %6};" : : "l"(surfObject), "r"(layer), "r"(x), "r"((int)data.x), "r"((int)data.y), "r"((int)data.z), "r"((int)data.w));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.a1d.v4.b8.zero  [%0, {%1, %2}], {%3, %4, %5, %6};" : : "l"(surfObject), "r"(layer), "r"(x), "r"((int)data.x), "r"((int)data.y), "r"((int)data.z), "r"((int)data.w));
   }
}

static __forceinline __declspec(__device__) void surf1DLayeredwrite(uchar4 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.a1d.v4.b8.trap  [%0, {%1, %2}], {%3, %4, %5, %6};" : : "l"(surfObject), "r"(layer), "r"(x), "r"((unsigned int)data.x), "r"((unsigned int)data.y), "r"((unsigned int)data.z), "r"((unsigned int)data.w));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.a1d.v4.b8.clamp [%0, {%1, %2}], {%3, %4, %5, %6};" : : "l"(surfObject), "r"(layer), "r"(x), "r"((unsigned int)data.x), "r"((unsigned int)data.y), "r"((unsigned int)data.z), "r"((unsigned int)data.w));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.a1d.v4.b8.zero  [%0, {%1, %2}], {%3, %4, %5, %6};" : : "l"(surfObject), "r"(layer), "r"(x), "r"((unsigned int)data.x), "r"((unsigned int)data.y), "r"((unsigned int)data.z), "r"((unsigned int)data.w));
   }
}

static __forceinline __declspec(__device__) void surf1DLayeredwrite(short4 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.a1d.v4.b16.trap  [%0, {%1, %2}], {%3, %4, %5, %6};" : : "l"(surfObject), "r"(layer), "r"(x), "h"(data.x), "h"(data.y), "h"(data.z), "h"(data.w));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.a1d.v4.b16.clamp [%0, {%1, %2}], {%3, %4, %5, %6};" : : "l"(surfObject), "r"(layer), "r"(x), "h"(data.x), "h"(data.y), "h"(data.z), "h"(data.w));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.a1d.v4.b16.zero  [%0, {%1, %2}], {%3, %4, %5, %6};" : : "l"(surfObject), "r"(layer), "r"(x), "h"(data.x), "h"(data.y), "h"(data.z), "h"(data.w));
   }
}

static __forceinline __declspec(__device__) void surf1DLayeredwrite(ushort4 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.a1d.v4.b16.trap  [%0, {%1, %2}], {%3, %4, %5, %6};" : : "l"(surfObject), "r"(layer), "r"(x), "h"(data.x), "h"(data.y), "h"(data.z), "h"(data.w));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.a1d.v4.b16.clamp [%0, {%1, %2}], {%3, %4, %5, %6};" : : "l"(surfObject), "r"(layer), "r"(x), "h"(data.x), "h"(data.y), "h"(data.z), "h"(data.w));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.a1d.v4.b16.zero  [%0, {%1, %2}], {%3, %4, %5, %6};" : : "l"(surfObject), "r"(layer), "r"(x), "h"(data.x), "h"(data.y), "h"(data.z), "h"(data.w));
   }
}

static __forceinline __declspec(__device__) void surf1DLayeredwrite(int4 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.a1d.v4.b32.trap  [%0, {%1, %2}], {%3, %4, %5, %6};" : : "l"(surfObject), "r"(layer), "r"(x), "r"(data.x), "r"(data.y), "r"(data.z), "r"(data.w));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.a1d.v4.b32.clamp [%0, {%1, %2}], {%3, %4, %5, %6};" : : "l"(surfObject), "r"(layer), "r"(x), "r"(data.x), "r"(data.y), "r"(data.z), "r"(data.w));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.a1d.v4.b32.zero  [%0, {%1, %2}], {%3, %4, %5, %6};" : : "l"(surfObject), "r"(layer), "r"(x), "r"(data.x), "r"(data.y), "r"(data.z), "r"(data.w));
   }
}

static __forceinline __declspec(__device__) void surf1DLayeredwrite(uint4 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.a1d.v4.b32.trap  [%0, {%1, %2}], {%3, %4, %5, %6};" : : "l"(surfObject), "r"(layer), "r"(x), "r"(data.x), "r"(data.y), "r"(data.z), "r"(data.w));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.a1d.v4.b32.clamp [%0, {%1, %2}], {%3, %4, %5, %6};" : : "l"(surfObject), "r"(layer), "r"(x), "r"(data.x), "r"(data.y), "r"(data.z), "r"(data.w));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.a1d.v4.b32.zero  [%0, {%1, %2}], {%3, %4, %5, %6};" : : "l"(surfObject), "r"(layer), "r"(x), "r"(data.x), "r"(data.y), "r"(data.z), "r"(data.w));
   }
}

static __forceinline __declspec(__device__) void surf1DLayeredwrite(float4 data, cudaSurfaceObject_t surfObject, int x, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.a1d.v4.b32.trap  [%0, {%1, %2}], {%3, %4, %5, %6};" : : "l"(surfObject), "r"(layer), "r"(x), "f"(data.x), "f"(data.y), "f"(data.z), "f"(data.w));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.a1d.v4.b32.clamp [%0, {%1, %2}], {%3, %4, %5, %6};" : : "l"(surfObject), "r"(layer), "r"(x), "f"(data.x), "f"(data.y), "f"(data.z), "f"(data.w));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.a1d.v4.b32.zero  [%0, {%1, %2}], {%3, %4, %5, %6};" : : "l"(surfObject), "r"(layer), "r"(x), "f"(data.x), "f"(data.y), "f"(data.z), "f"(data.w));
   }
}







static __forceinline __declspec(__device__) void surf2DLayeredwrite(char data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.a2d.b8.trap  [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(layer), "r"(x), "r"(y), "r"((int)data));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.a2d.b8.clamp [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(layer), "r"(x), "r"(y), "r"((int)data));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.a2d.b8.zero  [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(layer), "r"(x), "r"(y), "r"((int)data));
   }
}

static __forceinline __declspec(__device__) void surf2DLayeredwrite(signed char data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.a2d.b8.trap  [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(layer), "r"(x), "r"(y), "r"((int)data));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.a2d.b8.clamp [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(layer), "r"(x), "r"(y), "r"((int)data));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.a2d.b8.zero  [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(layer), "r"(x), "r"(y), "r"((int)data));
   }
}

static __forceinline __declspec(__device__) void surf2DLayeredwrite(char1 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.a2d.b8.trap  [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(layer), "r"(x), "r"(y), "r"((int)data.x));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.a2d.b8.clamp [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(layer), "r"(x), "r"(y), "r"((int)data.x));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.a2d.b8.zero  [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(layer), "r"(x), "r"(y), "r"((int)data.x));
   }
}

static __forceinline __declspec(__device__) void surf2DLayeredwrite(unsigned char data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.a2d.b8.trap  [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(layer), "r"(x), "r"(y), "r"((unsigned int)data));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.a2d.b8.clamp [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(layer), "r"(x), "r"(y), "r"((unsigned int)data));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.a2d.b8.zero  [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(layer), "r"(x), "r"(y), "r"((unsigned int)data));
   }
}

static __forceinline __declspec(__device__) void surf2DLayeredwrite(uchar1 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.a2d.b8.trap  [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(layer), "r"(x), "r"(y), "r"((unsigned int)data.x));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.a2d.b8.clamp [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(layer), "r"(x), "r"(y), "r"((unsigned int)data.x));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.a2d.b8.zero  [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(layer), "r"(x), "r"(y), "r"((unsigned int)data.x));
   }
}

static __forceinline __declspec(__device__) void surf2DLayeredwrite(short data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.a2d.b16.trap  [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(layer), "r"(x), "r"(y), "h"(data));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.a2d.b16.clamp [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(layer), "r"(x), "r"(y), "h"(data));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.a2d.b16.zero  [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(layer), "r"(x), "r"(y), "h"(data));
   }
}

static __forceinline __declspec(__device__) void surf2DLayeredwrite(short1 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.a2d.b16.trap  [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(layer), "r"(x), "r"(y), "h"(data.x));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.a2d.b16.clamp [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(layer), "r"(x), "r"(y), "h"(data.x));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.a2d.b16.zero  [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(layer), "r"(x), "r"(y), "h"(data.x));
   }
}

static __forceinline __declspec(__device__) void surf2DLayeredwrite(unsigned short data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.a2d.b16.trap  [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(layer), "r"(x), "r"(y), "h"(data));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.a2d.b16.clamp [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(layer), "r"(x), "r"(y), "h"(data));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.a2d.b16.zero  [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(layer), "r"(x), "r"(y), "h"(data));
   }
}

static __forceinline __declspec(__device__) void surf2DLayeredwrite(ushort1 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.a2d.b16.trap  [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(layer), "r"(x), "r"(y), "h"(data.x));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.a2d.b16.clamp [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(layer), "r"(x), "r"(y), "h"(data.x));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.a2d.b16.zero  [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(layer), "r"(x), "r"(y), "h"(data.x));
   }
}

static __forceinline __declspec(__device__) void surf2DLayeredwrite(int data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.a2d.b32.trap  [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(layer), "r"(x), "r"(y), "r"(data));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.a2d.b32.clamp [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(layer), "r"(x), "r"(y), "r"(data));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.a2d.b32.zero  [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(layer), "r"(x), "r"(y), "r"(data));
   }
}

static __forceinline __declspec(__device__) void surf2DLayeredwrite(int1 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.a2d.b32.trap  [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(layer), "r"(x), "r"(y), "r"(data.x));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.a2d.b32.clamp [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(layer), "r"(x), "r"(y), "r"(data.x));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.a2d.b32.zero  [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(layer), "r"(x), "r"(y), "r"(data.x));
   }
}

static __forceinline __declspec(__device__) void surf2DLayeredwrite(unsigned int data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.a2d.b32.trap  [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(layer), "r"(x), "r"(y), "r"(data));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.a2d.b32.clamp [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(layer), "r"(x), "r"(y), "r"(data));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.a2d.b32.zero  [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(layer), "r"(x), "r"(y), "r"(data));
   }
}

static __forceinline __declspec(__device__) void surf2DLayeredwrite(uint1 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.a2d.b32.trap  [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(layer), "r"(x), "r"(y), "r"(data.x));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.a2d.b32.clamp [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(layer), "r"(x), "r"(y), "r"(data.x));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.a2d.b32.zero  [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(layer), "r"(x), "r"(y), "r"(data.x));
   }
}

static __forceinline __declspec(__device__) void surf2DLayeredwrite(long long data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.a2d.b64.trap  [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(layer), "r"(x), "r"(y), "l"(data));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.a2d.b64.clamp [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(layer), "r"(x), "r"(y), "l"(data));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.a2d.b64.zero  [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(layer), "r"(x), "r"(y), "l"(data));
   }
}

static __forceinline __declspec(__device__) void surf2DLayeredwrite(longlong1 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.a2d.b64.trap  [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(layer), "r"(x), "r"(y), "l"(data.x));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.a2d.b64.clamp [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(layer), "r"(x), "r"(y), "l"(data.x));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.a2d.b64.zero  [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(layer), "r"(x), "r"(y), "l"(data.x));
   }
}

static __forceinline __declspec(__device__) void surf2DLayeredwrite(unsigned long long data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.a2d.b64.trap  [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(layer), "r"(x), "r"(y), "l"(data));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.a2d.b64.clamp [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(layer), "r"(x), "r"(y), "l"(data));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.a2d.b64.zero  [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(layer), "r"(x), "r"(y), "l"(data));
   }
}

static __forceinline __declspec(__device__) void surf2DLayeredwrite(ulonglong1 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.a2d.b64.trap  [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(layer), "r"(x), "r"(y), "l"(data.x));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.a2d.b64.clamp [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(layer), "r"(x), "r"(y), "l"(data.x));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.a2d.b64.zero  [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(layer), "r"(x), "r"(y), "l"(data.x));
   }
}

static __forceinline __declspec(__device__) void surf2DLayeredwrite(float data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.a2d.b32.trap  [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(layer), "r"(x), "r"(y), "f"(data));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.a2d.b32.clamp [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(layer), "r"(x), "r"(y), "f"(data));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.a2d.b32.zero  [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(layer), "r"(x), "r"(y), "f"(data));
   }
}

static __forceinline __declspec(__device__) void surf2DLayeredwrite(float1 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.a2d.b32.trap  [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(layer), "r"(x), "r"(y), "f"(data.x));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.a2d.b32.clamp [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(layer), "r"(x), "r"(y), "f"(data.x));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.a2d.b32.zero  [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(layer), "r"(x), "r"(y), "f"(data.x));
   }
}







static __forceinline __declspec(__device__) void surf2DLayeredwrite(char2 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.a2d.v2.b8.trap  [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l"(surfObject), "r"(layer), "r"(x), "r"(y), "r"((int)data.x), "r"((int)data.y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.a2d.v2.b8.clamp [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l"(surfObject), "r"(layer), "r"(x), "r"(y), "r"((int)data.x), "r"((int)data.y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.a2d.v2.b8.zero  [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l"(surfObject), "r"(layer), "r"(x), "r"(y), "r"((int)data.x), "r"((int)data.y));
   }
}

static __forceinline __declspec(__device__) void surf2DLayeredwrite(uchar2 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.a2d.v2.b8.trap  [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l"(surfObject), "r"(layer), "r"(x), "r"(y), "r"((unsigned int)data.x), "r"((unsigned int)data.y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.a2d.v2.b8.clamp [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l"(surfObject), "r"(layer), "r"(x), "r"(y), "r"((unsigned int)data.x), "r"((unsigned int)data.y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.a2d.v2.b8.zero  [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l"(surfObject), "r"(layer), "r"(x), "r"(y), "r"((unsigned int)data.x), "r"((unsigned int)data.y));
   }
}

static __forceinline __declspec(__device__) void surf2DLayeredwrite(short2 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.a2d.v2.b16.trap  [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l"(surfObject), "r"(layer), "r"(x), "r"(y), "h"(data.x), "h"(data.y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.a2d.v2.b16.clamp [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l"(surfObject), "r"(layer), "r"(x), "r"(y), "h"(data.x), "h"(data.y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.a2d.v2.b16.zero  [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l"(surfObject), "r"(layer), "r"(x), "r"(y), "h"(data.x), "h"(data.y));
   }
}

static __forceinline __declspec(__device__) void surf2DLayeredwrite(ushort2 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.a2d.v2.b16.trap  [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l"(surfObject), "r"(layer), "r"(x), "r"(y), "h"(data.x), "h"(data.y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.a2d.v2.b16.clamp [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l"(surfObject), "r"(layer), "r"(x), "r"(y), "h"(data.x), "h"(data.y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.a2d.v2.b16.zero  [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l"(surfObject), "r"(layer), "r"(x), "r"(y), "h"(data.x), "h"(data.y));
   }
}

static __forceinline __declspec(__device__) void surf2DLayeredwrite(int2 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.a2d.v2.b32.trap  [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l"(surfObject), "r"(layer), "r"(x), "r"(y), "r"(data.x), "r"(data.y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.a2d.v2.b32.clamp [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l"(surfObject), "r"(layer), "r"(x), "r"(y), "r"(data.x), "r"(data.y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.a2d.v2.b32.zero  [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l"(surfObject), "r"(layer), "r"(x), "r"(y), "r"(data.x), "r"(data.y));
   }
}

static __forceinline __declspec(__device__) void surf2DLayeredwrite(uint2 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.a2d.v2.b32.trap  [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l"(surfObject), "r"(layer), "r"(x), "r"(y), "r"(data.x), "r"(data.y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.a2d.v2.b32.clamp [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l"(surfObject), "r"(layer), "r"(x), "r"(y), "r"(data.x), "r"(data.y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.a2d.v2.b32.zero  [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l"(surfObject), "r"(layer), "r"(x), "r"(y), "r"(data.x), "r"(data.y));
   }
}

static __forceinline __declspec(__device__) void surf2DLayeredwrite(longlong2 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.a2d.v2.b64.trap  [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l"(surfObject), "r"(layer), "r"(x), "r"(y), "l"(data.x), "l"(data.y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.a2d.v2.b64.clamp [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l"(surfObject), "r"(layer), "r"(x), "r"(y), "l"(data.x), "l"(data.y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.a2d.v2.b64.zero  [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l"(surfObject), "r"(layer), "r"(x), "r"(y), "l"(data.x), "l"(data.y));
   }
}

static __forceinline __declspec(__device__) void surf2DLayeredwrite(ulonglong2 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.a2d.v2.b64.trap  [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l"(surfObject), "r"(layer), "r"(x), "r"(y), "l"(data.x), "l"(data.y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.a2d.v2.b64.clamp [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l"(surfObject), "r"(layer), "r"(x), "r"(y), "l"(data.x), "l"(data.y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.a2d.v2.b64.zero  [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l"(surfObject), "r"(layer), "r"(x), "r"(y), "l"(data.x), "l"(data.y));
   }
}

static __forceinline __declspec(__device__) void surf2DLayeredwrite(float2 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.a2d.v2.b32.trap  [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l"(surfObject), "r"(layer), "r"(x), "r"(y), "f"(data.x), "f"(data.y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.a2d.v2.b32.clamp [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l"(surfObject), "r"(layer), "r"(x), "r"(y), "f"(data.x), "f"(data.y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.a2d.v2.b32.zero  [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l"(surfObject), "r"(layer), "r"(x), "r"(y), "f"(data.x), "f"(data.y));
   }
}







static __forceinline __declspec(__device__) void surf2DLayeredwrite(char4 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.a2d.v4.b8.trap  [%0, {%1, %2, %3, %3}], {%4, %5, %6, %7};" : : "l"(surfObject), "r"(layer), "r"(x), "r"(y), "r"((int)data.x), "r"((int)data.y), "r"((int)data.z), "r"((int)data.w));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.a2d.v4.b8.clamp [%0, {%1, %2, %3, %3}], {%4, %5, %6, %7};" : : "l"(surfObject), "r"(layer), "r"(x), "r"(y), "r"((int)data.x), "r"((int)data.y), "r"((int)data.z), "r"((int)data.w));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.a2d.v4.b8.zero  [%0, {%1, %2, %3, %3}], {%4, %5, %6, %7};" : : "l"(surfObject), "r"(layer), "r"(x), "r"(y), "r"((int)data.x), "r"((int)data.y), "r"((int)data.z), "r"((int)data.w));
   }
}

static __forceinline __declspec(__device__) void surf2DLayeredwrite(uchar4 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.a2d.v4.b8.trap  [%0, {%1, %2, %3, %3}], {%4, %5, %6, %7};" : : "l"(surfObject), "r"(layer), "r"(x), "r"(y), "r"((unsigned int)data.x), "r"((unsigned int)data.y), "r"((unsigned int)data.z), "r"((unsigned int)data.w));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.a2d.v4.b8.clamp [%0, {%1, %2, %3, %3}], {%4, %5, %6, %7};" : : "l"(surfObject), "r"(layer), "r"(x), "r"(y), "r"((unsigned int)data.x), "r"((unsigned int)data.y), "r"((unsigned int)data.z), "r"((unsigned int)data.w));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.a2d.v4.b8.zero  [%0, {%1, %2, %3, %3}], {%4, %5, %6, %7};" : : "l"(surfObject), "r"(layer), "r"(x), "r"(y), "r"((unsigned int)data.x), "r"((unsigned int)data.y), "r"((unsigned int)data.z), "r"((unsigned int)data.w));
   }
}

static __forceinline __declspec(__device__) void surf2DLayeredwrite(short4 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.a2d.v4.b16.trap  [%0, {%1, %2, %3, %3}], {%4, %5, %6, %7};" : : "l"(surfObject), "r"(layer), "r"(x), "r"(y), "h"(data.x), "h"(data.y), "h"(data.z), "h"(data.w));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.a2d.v4.b16.clamp [%0, {%1, %2, %3, %3}], {%4, %5, %6, %7};" : : "l"(surfObject), "r"(layer), "r"(x), "r"(y), "h"(data.x), "h"(data.y), "h"(data.z), "h"(data.w));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.a2d.v4.b16.zero  [%0, {%1, %2, %3, %3}], {%4, %5, %6, %7};" : : "l"(surfObject), "r"(layer), "r"(x), "r"(y), "h"(data.x), "h"(data.y), "h"(data.z), "h"(data.w));
   }
}

static __forceinline __declspec(__device__) void surf2DLayeredwrite(ushort4 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.a2d.v4.b16.trap  [%0, {%1, %2, %3, %3}], {%4, %5, %6, %7};" : : "l"(surfObject), "r"(layer), "r"(x), "r"(y), "h"(data.x), "h"(data.y), "h"(data.z), "h"(data.w));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.a2d.v4.b16.clamp [%0, {%1, %2, %3, %3}], {%4, %5, %6, %7};" : : "l"(surfObject), "r"(layer), "r"(x), "r"(y), "h"(data.x), "h"(data.y), "h"(data.z), "h"(data.w));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.a2d.v4.b16.zero  [%0, {%1, %2, %3, %3}], {%4, %5, %6, %7};" : : "l"(surfObject), "r"(layer), "r"(x), "r"(y), "h"(data.x), "h"(data.y), "h"(data.z), "h"(data.w));
   }
}

static __forceinline __declspec(__device__) void surf2DLayeredwrite(int4 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.a2d.v4.b32.trap  [%0, {%1, %2, %3, %3}], {%4, %5, %6, %7};" : : "l"(surfObject), "r"(layer), "r"(x), "r"(y), "r"(data.x), "r"(data.y), "r"(data.z), "r"(data.w));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.a2d.v4.b32.clamp [%0, {%1, %2, %3, %3}], {%4, %5, %6, %7};" : : "l"(surfObject), "r"(layer), "r"(x), "r"(y), "r"(data.x), "r"(data.y), "r"(data.z), "r"(data.w));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.a2d.v4.b32.zero  [%0, {%1, %2, %3, %3}], {%4, %5, %6, %7};" : : "l"(surfObject), "r"(layer), "r"(x), "r"(y), "r"(data.x), "r"(data.y), "r"(data.z), "r"(data.w));
   }
}

static __forceinline __declspec(__device__) void surf2DLayeredwrite(uint4 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.a2d.v4.b32.trap  [%0, {%1, %2, %3, %3}], {%4, %5, %6, %7};" : : "l"(surfObject), "r"(layer), "r"(x), "r"(y), "r"(data.x), "r"(data.y), "r"(data.z), "r"(data.w));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.a2d.v4.b32.clamp [%0, {%1, %2, %3, %3}], {%4, %5, %6, %7};" : : "l"(surfObject), "r"(layer), "r"(x), "r"(y), "r"(data.x), "r"(data.y), "r"(data.z), "r"(data.w));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.a2d.v4.b32.zero  [%0, {%1, %2, %3, %3}], {%4, %5, %6, %7};" : : "l"(surfObject), "r"(layer), "r"(x), "r"(y), "r"(data.x), "r"(data.y), "r"(data.z), "r"(data.w));
   }
}

static __forceinline __declspec(__device__) void surf2DLayeredwrite(float4 data, cudaSurfaceObject_t surfObject, int x, int y, int layer, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.a2d.v4.b32.trap  [%0, {%1, %2, %3, %3}], {%4, %5, %6, %7};" : : "l"(surfObject), "r"(layer), "r"(x), "r"(y), "f"(data.x), "f"(data.y), "f"(data.z), "f"(data.w));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.a2d.v4.b32.clamp [%0, {%1, %2, %3, %3}], {%4, %5, %6, %7};" : : "l"(surfObject), "r"(layer), "r"(x), "r"(y), "f"(data.x), "f"(data.y), "f"(data.z), "f"(data.w));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.a2d.v4.b32.zero  [%0, {%1, %2, %3, %3}], {%4, %5, %6, %7};" : : "l"(surfObject), "r"(layer), "r"(x), "r"(y), "f"(data.x), "f"(data.y), "f"(data.z), "f"(data.w));
   }
}







static __forceinline __declspec(__device__) void surfCubemapwrite(char data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.a2d.b8.trap  [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(face), "r"(x), "r"(y), "r"((int)data));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.a2d.b8.clamp [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(face), "r"(x), "r"(y), "r"((int)data));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.a2d.b8.zero  [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(face), "r"(x), "r"(y), "r"((int)data));
   }
}

static __forceinline __declspec(__device__) void surfCubemapwrite(signed char data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.a2d.b8.trap  [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(face), "r"(x), "r"(y), "r"((int)data));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.a2d.b8.clamp [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(face), "r"(x), "r"(y), "r"((int)data));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.a2d.b8.zero  [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(face), "r"(x), "r"(y), "r"((int)data));
   }
}

static __forceinline __declspec(__device__) void surfCubemapwrite(char1 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.a2d.b8.trap  [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(face), "r"(x), "r"(y), "r"((int)data.x));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.a2d.b8.clamp [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(face), "r"(x), "r"(y), "r"((int)data.x));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.a2d.b8.zero  [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(face), "r"(x), "r"(y), "r"((int)data.x));
   }
}

static __forceinline __declspec(__device__) void surfCubemapwrite(unsigned char data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.a2d.b8.trap  [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(face), "r"(x), "r"(y), "r"((unsigned int)data));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.a2d.b8.clamp [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(face), "r"(x), "r"(y), "r"((unsigned int)data));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.a2d.b8.zero  [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(face), "r"(x), "r"(y), "r"((unsigned int)data));
   }
}

static __forceinline __declspec(__device__) void surfCubemapwrite(uchar1 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.a2d.b8.trap  [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(face), "r"(x), "r"(y), "r"((unsigned int)data.x));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.a2d.b8.clamp [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(face), "r"(x), "r"(y), "r"((unsigned int)data.x));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.a2d.b8.zero  [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(face), "r"(x), "r"(y), "r"((unsigned int)data.x));
   }
}

static __forceinline __declspec(__device__) void surfCubemapwrite(short data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.a2d.b16.trap  [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(face), "r"(x), "r"(y), "h"(data));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.a2d.b16.clamp [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(face), "r"(x), "r"(y), "h"(data));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.a2d.b16.zero  [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(face), "r"(x), "r"(y), "h"(data));
   }
}

static __forceinline __declspec(__device__) void surfCubemapwrite(short1 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.a2d.b16.trap  [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(face), "r"(x), "r"(y), "h"(data.x));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.a2d.b16.clamp [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(face), "r"(x), "r"(y), "h"(data.x));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.a2d.b16.zero  [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(face), "r"(x), "r"(y), "h"(data.x));
   }
}

static __forceinline __declspec(__device__) void surfCubemapwrite(unsigned short data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.a2d.b16.trap  [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(face), "r"(x), "r"(y), "h"(data));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.a2d.b16.clamp [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(face), "r"(x), "r"(y), "h"(data));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.a2d.b16.zero  [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(face), "r"(x), "r"(y), "h"(data));
   }
}

static __forceinline __declspec(__device__) void surfCubemapwrite(ushort1 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.a2d.b16.trap  [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(face), "r"(x), "r"(y), "h"(data.x));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.a2d.b16.clamp [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(face), "r"(x), "r"(y), "h"(data.x));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.a2d.b16.zero  [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(face), "r"(x), "r"(y), "h"(data.x));
   }
}

static __forceinline __declspec(__device__) void surfCubemapwrite(int data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.a2d.b32.trap  [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(face), "r"(x), "r"(y), "r"(data));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.a2d.b32.clamp [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(face), "r"(x), "r"(y), "r"(data));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.a2d.b32.zero  [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(face), "r"(x), "r"(y), "r"(data));
   }
}

static __forceinline __declspec(__device__) void surfCubemapwrite(int1 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.a2d.b32.trap  [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(face), "r"(x), "r"(y), "r"(data.x));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.a2d.b32.clamp [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(face), "r"(x), "r"(y), "r"(data.x));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.a2d.b32.zero  [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(face), "r"(x), "r"(y), "r"(data.x));
   }
}

static __forceinline __declspec(__device__) void surfCubemapwrite(unsigned int data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.a2d.b32.trap  [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(face), "r"(x), "r"(y), "r"(data));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.a2d.b32.clamp [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(face), "r"(x), "r"(y), "r"(data));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.a2d.b32.zero  [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(face), "r"(x), "r"(y), "r"(data));
   }
}

static __forceinline __declspec(__device__) void surfCubemapwrite(uint1 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.a2d.b32.trap  [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(face), "r"(x), "r"(y), "r"(data.x));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.a2d.b32.clamp [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(face), "r"(x), "r"(y), "r"(data.x));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.a2d.b32.zero  [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(face), "r"(x), "r"(y), "r"(data.x));
   }
}

static __forceinline __declspec(__device__) void surfCubemapwrite(long long data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.a2d.b64.trap  [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(face), "r"(x), "r"(y), "l"(data));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.a2d.b64.clamp [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(face), "r"(x), "r"(y), "l"(data));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.a2d.b64.zero  [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(face), "r"(x), "r"(y), "l"(data));
   }
}

static __forceinline __declspec(__device__) void surfCubemapwrite(longlong1 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.a2d.b64.trap  [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(face), "r"(x), "r"(y), "l"(data.x));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.a2d.b64.clamp [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(face), "r"(x), "r"(y), "l"(data.x));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.a2d.b64.zero  [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(face), "r"(x), "r"(y), "l"(data.x));
   }
}

static __forceinline __declspec(__device__) void surfCubemapwrite(unsigned long long data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.a2d.b64.trap  [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(face), "r"(x), "r"(y), "l"(data));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.a2d.b64.clamp [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(face), "r"(x), "r"(y), "l"(data));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.a2d.b64.zero  [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(face), "r"(x), "r"(y), "l"(data));
   }
}

static __forceinline __declspec(__device__) void surfCubemapwrite(ulonglong1 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.a2d.b64.trap  [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(face), "r"(x), "r"(y), "l"(data.x));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.a2d.b64.clamp [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(face), "r"(x), "r"(y), "l"(data.x));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.a2d.b64.zero  [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(face), "r"(x), "r"(y), "l"(data.x));
   }
}

static __forceinline __declspec(__device__) void surfCubemapwrite(float data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.a2d.b32.trap  [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(face), "r"(x), "r"(y), "f"(data));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.a2d.b32.clamp [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(face), "r"(x), "r"(y), "f"(data));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.a2d.b32.zero  [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(face), "r"(x), "r"(y), "f"(data));
   }
}

static __forceinline __declspec(__device__) void surfCubemapwrite(float1 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.a2d.b32.trap  [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(face), "r"(x), "r"(y), "f"(data.x));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.a2d.b32.clamp [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(face), "r"(x), "r"(y), "f"(data.x));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.a2d.b32.zero  [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(face), "r"(x), "r"(y), "f"(data.x));
   }
}







static __forceinline __declspec(__device__) void surfCubemapwrite(char2 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.a2d.v2.b8.trap  [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l"(surfObject), "r"(face), "r"(x), "r"(y), "r"((int)data.x), "r"((int)data.y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.a2d.v2.b8.clamp [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l"(surfObject), "r"(face), "r"(x), "r"(y), "r"((int)data.x), "r"((int)data.y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.a2d.v2.b8.zero  [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l"(surfObject), "r"(face), "r"(x), "r"(y), "r"((int)data.x), "r"((int)data.y));
   }
}

static __forceinline __declspec(__device__) void surfCubemapwrite(uchar2 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.a2d.v2.b8.trap  [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l"(surfObject), "r"(face), "r"(x), "r"(y), "r"((unsigned int)data.x), "r"((unsigned int)data.y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.a2d.v2.b8.clamp [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l"(surfObject), "r"(face), "r"(x), "r"(y), "r"((unsigned int)data.x), "r"((unsigned int)data.y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.a2d.v2.b8.zero  [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l"(surfObject), "r"(face), "r"(x), "r"(y), "r"((unsigned int)data.x), "r"((unsigned int)data.y));
   }
}

static __forceinline __declspec(__device__) void surfCubemapwrite(short2 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.a2d.v2.b16.trap  [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l"(surfObject), "r"(face), "r"(x), "r"(y), "h"(data.x), "h"(data.y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.a2d.v2.b16.clamp [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l"(surfObject), "r"(face), "r"(x), "r"(y), "h"(data.x), "h"(data.y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.a2d.v2.b16.zero  [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l"(surfObject), "r"(face), "r"(x), "r"(y), "h"(data.x), "h"(data.y));
   }
}

static __forceinline __declspec(__device__) void surfCubemapwrite(ushort2 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.a2d.v2.b16.trap  [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l"(surfObject), "r"(face), "r"(x), "r"(y), "h"(data.x), "h"(data.y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.a2d.v2.b16.clamp [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l"(surfObject), "r"(face), "r"(x), "r"(y), "h"(data.x), "h"(data.y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.a2d.v2.b16.zero  [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l"(surfObject), "r"(face), "r"(x), "r"(y), "h"(data.x), "h"(data.y));
   }
}

static __forceinline __declspec(__device__) void surfCubemapwrite(int2 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.a2d.v2.b32.trap  [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l"(surfObject), "r"(face), "r"(x), "r"(y), "r"(data.x), "r"(data.y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.a2d.v2.b32.clamp [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l"(surfObject), "r"(face), "r"(x), "r"(y), "r"(data.x), "r"(data.y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.a2d.v2.b32.zero  [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l"(surfObject), "r"(face), "r"(x), "r"(y), "r"(data.x), "r"(data.y));
   }
}

static __forceinline __declspec(__device__) void surfCubemapwrite(uint2 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.a2d.v2.b32.trap  [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l"(surfObject), "r"(face), "r"(x), "r"(y), "r"(data.x), "r"(data.y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.a2d.v2.b32.clamp [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l"(surfObject), "r"(face), "r"(x), "r"(y), "r"(data.x), "r"(data.y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.a2d.v2.b32.zero  [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l"(surfObject), "r"(face), "r"(x), "r"(y), "r"(data.x), "r"(data.y));
   }
}

static __forceinline __declspec(__device__) void surfCubemapwrite(longlong2 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.a2d.v2.b64.trap  [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l"(surfObject), "r"(face), "r"(x), "r"(y), "l"(data.x), "l"(data.y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.a2d.v2.b64.clamp [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l"(surfObject), "r"(face), "r"(x), "r"(y), "l"(data.x), "l"(data.y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.a2d.v2.b64.zero  [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l"(surfObject), "r"(face), "r"(x), "r"(y), "l"(data.x), "l"(data.y));
   }
}

static __forceinline __declspec(__device__) void surfCubemapwrite(ulonglong2 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.a2d.v2.b64.trap  [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l"(surfObject), "r"(face), "r"(x), "r"(y), "l"(data.x), "l"(data.y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.a2d.v2.b64.clamp [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l"(surfObject), "r"(face), "r"(x), "r"(y), "l"(data.x), "l"(data.y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.a2d.v2.b64.zero  [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l"(surfObject), "r"(face), "r"(x), "r"(y), "l"(data.x), "l"(data.y));
   }
}

static __forceinline __declspec(__device__) void surfCubemapwrite(float2 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.a2d.v2.b32.trap  [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l"(surfObject), "r"(face), "r"(x), "r"(y), "f"(data.x), "f"(data.y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.a2d.v2.b32.clamp [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l"(surfObject), "r"(face), "r"(x), "r"(y), "f"(data.x), "f"(data.y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.a2d.v2.b32.zero  [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l"(surfObject), "r"(face), "r"(x), "r"(y), "f"(data.x), "f"(data.y));
   }
}







static __forceinline __declspec(__device__) void surfCubemapwrite(char4 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.a2d.v4.b8.trap  [%0, {%1, %2, %3, %3}], {%4, %5, %6, %7};" : : "l"(surfObject), "r"(face), "r"(x), "r"(y), "r"((int)data.x), "r"((int)data.y), "r"((int)data.z), "r"((int)data.w));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.a2d.v4.b8.clamp [%0, {%1, %2, %3, %3}], {%4, %5, %6, %7};" : : "l"(surfObject), "r"(face), "r"(x), "r"(y), "r"((int)data.x), "r"((int)data.y), "r"((int)data.z), "r"((int)data.w));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.a2d.v4.b8.zero  [%0, {%1, %2, %3, %3}], {%4, %5, %6, %7};" : : "l"(surfObject), "r"(face), "r"(x), "r"(y), "r"((int)data.x), "r"((int)data.y), "r"((int)data.z), "r"((int)data.w));
   }
}

static __forceinline __declspec(__device__) void surfCubemapwrite(uchar4 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.a2d.v4.b8.trap  [%0, {%1, %2, %3, %3}], {%4, %5, %6, %7};" : : "l"(surfObject), "r"(face), "r"(x), "r"(y), "r"((unsigned int)data.x), "r"((unsigned int)data.y), "r"((unsigned int)data.z), "r"((unsigned int)data.w));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.a2d.v4.b8.clamp [%0, {%1, %2, %3, %3}], {%4, %5, %6, %7};" : : "l"(surfObject), "r"(face), "r"(x), "r"(y), "r"((unsigned int)data.x), "r"((unsigned int)data.y), "r"((unsigned int)data.z), "r"((unsigned int)data.w));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.a2d.v4.b8.zero  [%0, {%1, %2, %3, %3}], {%4, %5, %6, %7};" : : "l"(surfObject), "r"(face), "r"(x), "r"(y), "r"((unsigned int)data.x), "r"((unsigned int)data.y), "r"((unsigned int)data.z), "r"((unsigned int)data.w));
   }
}

static __forceinline __declspec(__device__) void surfCubemapwrite(short4 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.a2d.v4.b16.trap  [%0, {%1, %2, %3, %3}], {%4, %5, %6, %7};" : : "l"(surfObject), "r"(face), "r"(x), "r"(y), "h"(data.x), "h"(data.y), "h"(data.z), "h"(data.w));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.a2d.v4.b16.clamp [%0, {%1, %2, %3, %3}], {%4, %5, %6, %7};" : : "l"(surfObject), "r"(face), "r"(x), "r"(y), "h"(data.x), "h"(data.y), "h"(data.z), "h"(data.w));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.a2d.v4.b16.zero  [%0, {%1, %2, %3, %3}], {%4, %5, %6, %7};" : : "l"(surfObject), "r"(face), "r"(x), "r"(y), "h"(data.x), "h"(data.y), "h"(data.z), "h"(data.w));
   }
}

static __forceinline __declspec(__device__) void surfCubemapwrite(ushort4 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.a2d.v4.b16.trap  [%0, {%1, %2, %3, %3}], {%4, %5, %6, %7};" : : "l"(surfObject), "r"(face), "r"(x), "r"(y), "h"(data.x), "h"(data.y), "h"(data.z), "h"(data.w));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.a2d.v4.b16.clamp [%0, {%1, %2, %3, %3}], {%4, %5, %6, %7};" : : "l"(surfObject), "r"(face), "r"(x), "r"(y), "h"(data.x), "h"(data.y), "h"(data.z), "h"(data.w));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.a2d.v4.b16.zero  [%0, {%1, %2, %3, %3}], {%4, %5, %6, %7};" : : "l"(surfObject), "r"(face), "r"(x), "r"(y), "h"(data.x), "h"(data.y), "h"(data.z), "h"(data.w));
   }
}

static __forceinline __declspec(__device__) void surfCubemapwrite(int4 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.a2d.v4.b32.trap  [%0, {%1, %2, %3, %3}], {%4, %5, %6, %7};" : : "l"(surfObject), "r"(face), "r"(x), "r"(y), "r"(data.x), "r"(data.y), "r"(data.z), "r"(data.w));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.a2d.v4.b32.clamp [%0, {%1, %2, %3, %3}], {%4, %5, %6, %7};" : : "l"(surfObject), "r"(face), "r"(x), "r"(y), "r"(data.x), "r"(data.y), "r"(data.z), "r"(data.w));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.a2d.v4.b32.zero  [%0, {%1, %2, %3, %3}], {%4, %5, %6, %7};" : : "l"(surfObject), "r"(face), "r"(x), "r"(y), "r"(data.x), "r"(data.y), "r"(data.z), "r"(data.w));
   }
}

static __forceinline __declspec(__device__) void surfCubemapwrite(uint4 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.a2d.v4.b32.trap  [%0, {%1, %2, %3, %3}], {%4, %5, %6, %7};" : : "l"(surfObject), "r"(face), "r"(x), "r"(y), "r"(data.x), "r"(data.y), "r"(data.z), "r"(data.w));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.a2d.v4.b32.clamp [%0, {%1, %2, %3, %3}], {%4, %5, %6, %7};" : : "l"(surfObject), "r"(face), "r"(x), "r"(y), "r"(data.x), "r"(data.y), "r"(data.z), "r"(data.w));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.a2d.v4.b32.zero  [%0, {%1, %2, %3, %3}], {%4, %5, %6, %7};" : : "l"(surfObject), "r"(face), "r"(x), "r"(y), "r"(data.x), "r"(data.y), "r"(data.z), "r"(data.w));
   }
}

static __forceinline __declspec(__device__) void surfCubemapwrite(float4 data, cudaSurfaceObject_t surfObject, int x, int y, int face, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.a2d.v4.b32.trap  [%0, {%1, %2, %3, %3}], {%4, %5, %6, %7};" : : "l"(surfObject), "r"(face), "r"(x), "r"(y), "f"(data.x), "f"(data.y), "f"(data.z), "f"(data.w));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.a2d.v4.b32.clamp [%0, {%1, %2, %3, %3}], {%4, %5, %6, %7};" : : "l"(surfObject), "r"(face), "r"(x), "r"(y), "f"(data.x), "f"(data.y), "f"(data.z), "f"(data.w));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.a2d.v4.b32.zero  [%0, {%1, %2, %3, %3}], {%4, %5, %6, %7};" : : "l"(surfObject), "r"(face), "r"(x), "r"(y), "f"(data.x), "f"(data.y), "f"(data.z), "f"(data.w));
   }
}







static __forceinline __declspec(__device__) void surfCubemapLayeredwrite(char data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.a2d.b8.trap  [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(layerface), "r"(x), "r"(y), "r"((int)data));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.a2d.b8.clamp [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(layerface), "r"(x), "r"(y), "r"((int)data));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.a2d.b8.zero  [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(layerface), "r"(x), "r"(y), "r"((int)data));
   }
}

static __forceinline __declspec(__device__) void surfCubemapLayeredwrite(signed char data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.a2d.b8.trap  [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(layerface), "r"(x), "r"(y), "r"((int)data));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.a2d.b8.clamp [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(layerface), "r"(x), "r"(y), "r"((int)data));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.a2d.b8.zero  [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(layerface), "r"(x), "r"(y), "r"((int)data));
   }
}

static __forceinline __declspec(__device__) void surfCubemapLayeredwrite(char1 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.a2d.b8.trap  [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(layerface), "r"(x), "r"(y), "r"((int)data.x));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.a2d.b8.clamp [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(layerface), "r"(x), "r"(y), "r"((int)data.x));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.a2d.b8.zero  [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(layerface), "r"(x), "r"(y), "r"((int)data.x));
   }
}

static __forceinline __declspec(__device__) void surfCubemapLayeredwrite(unsigned char data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.a2d.b8.trap  [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(layerface), "r"(x), "r"(y), "r"((unsigned int)data));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.a2d.b8.clamp [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(layerface), "r"(x), "r"(y), "r"((unsigned int)data));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.a2d.b8.zero  [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(layerface), "r"(x), "r"(y), "r"((unsigned int)data));
   }
}

static __forceinline __declspec(__device__) void surfCubemapLayeredwrite(uchar1 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.a2d.b8.trap  [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(layerface), "r"(x), "r"(y), "r"((unsigned int)data.x));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.a2d.b8.clamp [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(layerface), "r"(x), "r"(y), "r"((unsigned int)data.x));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.a2d.b8.zero  [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(layerface), "r"(x), "r"(y), "r"((unsigned int)data.x));
   }
}

static __forceinline __declspec(__device__) void surfCubemapLayeredwrite(short data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.a2d.b16.trap  [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(layerface), "r"(x), "r"(y), "h"(data));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.a2d.b16.clamp [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(layerface), "r"(x), "r"(y), "h"(data));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.a2d.b16.zero  [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(layerface), "r"(x), "r"(y), "h"(data));
   }
}

static __forceinline __declspec(__device__) void surfCubemapLayeredwrite(short1 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.a2d.b16.trap  [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(layerface), "r"(x), "r"(y), "h"(data.x));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.a2d.b16.clamp [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(layerface), "r"(x), "r"(y), "h"(data.x));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.a2d.b16.zero  [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(layerface), "r"(x), "r"(y), "h"(data.x));
   }
}

static __forceinline __declspec(__device__) void surfCubemapLayeredwrite(unsigned short data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.a2d.b16.trap  [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(layerface), "r"(x), "r"(y), "h"(data));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.a2d.b16.clamp [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(layerface), "r"(x), "r"(y), "h"(data));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.a2d.b16.zero  [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(layerface), "r"(x), "r"(y), "h"(data));
   }
}

static __forceinline __declspec(__device__) void surfCubemapLayeredwrite(ushort1 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.a2d.b16.trap  [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(layerface), "r"(x), "r"(y), "h"(data.x));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.a2d.b16.clamp [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(layerface), "r"(x), "r"(y), "h"(data.x));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.a2d.b16.zero  [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(layerface), "r"(x), "r"(y), "h"(data.x));
   }
}

static __forceinline __declspec(__device__) void surfCubemapLayeredwrite(int data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.a2d.b32.trap  [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(layerface), "r"(x), "r"(y), "r"(data));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.a2d.b32.clamp [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(layerface), "r"(x), "r"(y), "r"(data));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.a2d.b32.zero  [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(layerface), "r"(x), "r"(y), "r"(data));
   }
}

static __forceinline __declspec(__device__) void surfCubemapLayeredwrite(int1 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.a2d.b32.trap  [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(layerface), "r"(x), "r"(y), "r"(data.x));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.a2d.b32.clamp [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(layerface), "r"(x), "r"(y), "r"(data.x));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.a2d.b32.zero  [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(layerface), "r"(x), "r"(y), "r"(data.x));
   }
}

static __forceinline __declspec(__device__) void surfCubemapLayeredwrite(unsigned int data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.a2d.b32.trap  [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(layerface), "r"(x), "r"(y), "r"(data));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.a2d.b32.clamp [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(layerface), "r"(x), "r"(y), "r"(data));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.a2d.b32.zero  [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(layerface), "r"(x), "r"(y), "r"(data));
   }
}

static __forceinline __declspec(__device__) void surfCubemapLayeredwrite(uint1 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.a2d.b32.trap  [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(layerface), "r"(x), "r"(y), "r"(data.x));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.a2d.b32.clamp [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(layerface), "r"(x), "r"(y), "r"(data.x));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.a2d.b32.zero  [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(layerface), "r"(x), "r"(y), "r"(data.x));
   }
}

static __forceinline __declspec(__device__) void surfCubemapLayeredwrite(long long data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.a2d.b64.trap  [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(layerface), "r"(x), "r"(y), "l"(data));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.a2d.b64.clamp [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(layerface), "r"(x), "r"(y), "l"(data));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.a2d.b64.zero  [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(layerface), "r"(x), "r"(y), "l"(data));
   }
}

static __forceinline __declspec(__device__) void surfCubemapLayeredwrite(longlong1 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.a2d.b64.trap  [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(layerface), "r"(x), "r"(y), "l"(data.x));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.a2d.b64.clamp [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(layerface), "r"(x), "r"(y), "l"(data.x));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.a2d.b64.zero  [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(layerface), "r"(x), "r"(y), "l"(data.x));
   }
}

static __forceinline __declspec(__device__) void surfCubemapLayeredwrite(unsigned long long data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.a2d.b64.trap  [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(layerface), "r"(x), "r"(y), "l"(data));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.a2d.b64.clamp [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(layerface), "r"(x), "r"(y), "l"(data));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.a2d.b64.zero  [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(layerface), "r"(x), "r"(y), "l"(data));
   }
}

static __forceinline __declspec(__device__) void surfCubemapLayeredwrite(ulonglong1 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.a2d.b64.trap  [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(layerface), "r"(x), "r"(y), "l"(data.x));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.a2d.b64.clamp [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(layerface), "r"(x), "r"(y), "l"(data.x));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.a2d.b64.zero  [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(layerface), "r"(x), "r"(y), "l"(data.x));
   }
}

static __forceinline __declspec(__device__) void surfCubemapLayeredwrite(float data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.a2d.b32.trap  [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(layerface), "r"(x), "r"(y), "f"(data));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.a2d.b32.clamp [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(layerface), "r"(x), "r"(y), "f"(data));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.a2d.b32.zero  [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(layerface), "r"(x), "r"(y), "f"(data));
   }
}

static __forceinline __declspec(__device__) void surfCubemapLayeredwrite(float1 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.a2d.b32.trap  [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(layerface), "r"(x), "r"(y), "f"(data.x));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.a2d.b32.clamp [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(layerface), "r"(x), "r"(y), "f"(data.x));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.a2d.b32.zero  [%0, {%1, %2, %3, %3}], {%4};" : : "l"(surfObject), "r"(layerface), "r"(x), "r"(y), "f"(data.x));
   }
}







static __forceinline __declspec(__device__) void surfCubemapLayeredwrite(char2 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.a2d.v2.b8.trap  [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l"(surfObject), "r"(layerface), "r"(x), "r"(y), "r"((int)data.x), "r"((int)data.y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.a2d.v2.b8.clamp [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l"(surfObject), "r"(layerface), "r"(x), "r"(y), "r"((int)data.x), "r"((int)data.y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.a2d.v2.b8.zero  [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l"(surfObject), "r"(layerface), "r"(x), "r"(y), "r"((int)data.x), "r"((int)data.y));
   }
}

static __forceinline __declspec(__device__) void surfCubemapLayeredwrite(uchar2 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.a2d.v2.b8.trap  [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l"(surfObject), "r"(layerface), "r"(x), "r"(y), "r"((unsigned int)data.x), "r"((unsigned int)data.y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.a2d.v2.b8.clamp [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l"(surfObject), "r"(layerface), "r"(x), "r"(y), "r"((unsigned int)data.x), "r"((unsigned int)data.y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.a2d.v2.b8.zero  [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l"(surfObject), "r"(layerface), "r"(x), "r"(y), "r"((unsigned int)data.x), "r"((unsigned int)data.y));
   }
}

static __forceinline __declspec(__device__) void surfCubemapLayeredwrite(short2 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.a2d.v2.b16.trap  [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l"(surfObject), "r"(layerface), "r"(x), "r"(y), "h"(data.x), "h"(data.y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.a2d.v2.b16.clamp [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l"(surfObject), "r"(layerface), "r"(x), "r"(y), "h"(data.x), "h"(data.y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.a2d.v2.b16.zero  [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l"(surfObject), "r"(layerface), "r"(x), "r"(y), "h"(data.x), "h"(data.y));
   }
}

static __forceinline __declspec(__device__) void surfCubemapLayeredwrite(ushort2 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.a2d.v2.b16.trap  [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l"(surfObject), "r"(layerface), "r"(x), "r"(y), "h"(data.x), "h"(data.y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.a2d.v2.b16.clamp [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l"(surfObject), "r"(layerface), "r"(x), "r"(y), "h"(data.x), "h"(data.y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.a2d.v2.b16.zero  [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l"(surfObject), "r"(layerface), "r"(x), "r"(y), "h"(data.x), "h"(data.y));
   }
}

static __forceinline __declspec(__device__) void surfCubemapLayeredwrite(int2 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.a2d.v2.b32.trap  [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l"(surfObject), "r"(layerface), "r"(x), "r"(y), "r"(data.x), "r"(data.y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.a2d.v2.b32.clamp [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l"(surfObject), "r"(layerface), "r"(x), "r"(y), "r"(data.x), "r"(data.y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.a2d.v2.b32.zero  [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l"(surfObject), "r"(layerface), "r"(x), "r"(y), "r"(data.x), "r"(data.y));
   }
}

static __forceinline __declspec(__device__) void surfCubemapLayeredwrite(uint2 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.a2d.v2.b32.trap  [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l"(surfObject), "r"(layerface), "r"(x), "r"(y), "r"(data.x), "r"(data.y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.a2d.v2.b32.clamp [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l"(surfObject), "r"(layerface), "r"(x), "r"(y), "r"(data.x), "r"(data.y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.a2d.v2.b32.zero  [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l"(surfObject), "r"(layerface), "r"(x), "r"(y), "r"(data.x), "r"(data.y));
   }
}

static __forceinline __declspec(__device__) void surfCubemapLayeredwrite(longlong2 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.a2d.v2.b64.trap  [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l"(surfObject), "r"(layerface), "r"(x), "r"(y), "l"(data.x), "l"(data.y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.a2d.v2.b64.clamp [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l"(surfObject), "r"(layerface), "r"(x), "r"(y), "l"(data.x), "l"(data.y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.a2d.v2.b64.zero  [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l"(surfObject), "r"(layerface), "r"(x), "r"(y), "l"(data.x), "l"(data.y));
   }
}

static __forceinline __declspec(__device__) void surfCubemapLayeredwrite(ulonglong2 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.a2d.v2.b64.trap  [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l"(surfObject), "r"(layerface), "r"(x), "r"(y), "l"(data.x), "l"(data.y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.a2d.v2.b64.clamp [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l"(surfObject), "r"(layerface), "r"(x), "r"(y), "l"(data.x), "l"(data.y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.a2d.v2.b64.zero  [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l"(surfObject), "r"(layerface), "r"(x), "r"(y), "l"(data.x), "l"(data.y));
   }
}

static __forceinline __declspec(__device__) void surfCubemapLayeredwrite(float2 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.a2d.v2.b32.trap  [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l"(surfObject), "r"(layerface), "r"(x), "r"(y), "f"(data.x), "f"(data.y));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.a2d.v2.b32.clamp [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l"(surfObject), "r"(layerface), "r"(x), "r"(y), "f"(data.x), "f"(data.y));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.a2d.v2.b32.zero  [%0, {%1, %2, %3, %3}], {%4, %5};" : : "l"(surfObject), "r"(layerface), "r"(x), "r"(y), "f"(data.x), "f"(data.y));
   }
}







static __forceinline __declspec(__device__) void surfCubemapLayeredwrite(char4 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.a2d.v4.b8.trap  [%0, {%1, %2, %3, %3}], {%4, %5, %6, %7};" : : "l"(surfObject), "r"(layerface), "r"(x), "r"(y), "r"((int)data.x), "r"((int)data.y), "r"((int)data.z), "r"((int)data.w));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.a2d.v4.b8.clamp [%0, {%1, %2, %3, %3}], {%4, %5, %6, %7};" : : "l"(surfObject), "r"(layerface), "r"(x), "r"(y), "r"((int)data.x), "r"((int)data.y), "r"((int)data.z), "r"((int)data.w));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.a2d.v4.b8.zero  [%0, {%1, %2, %3, %3}], {%4, %5, %6, %7};" : : "l"(surfObject), "r"(layerface), "r"(x), "r"(y), "r"((int)data.x), "r"((int)data.y), "r"((int)data.z), "r"((int)data.w));
   }
}

static __forceinline __declspec(__device__) void surfCubemapLayeredwrite(uchar4 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.a2d.v4.b8.trap  [%0, {%1, %2, %3, %3}], {%4, %5, %6, %7};" : : "l"(surfObject), "r"(layerface), "r"(x), "r"(y), "r"((unsigned int)data.x), "r"((unsigned int)data.y), "r"((unsigned int)data.z), "r"((unsigned int)data.w));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.a2d.v4.b8.clamp [%0, {%1, %2, %3, %3}], {%4, %5, %6, %7};" : : "l"(surfObject), "r"(layerface), "r"(x), "r"(y), "r"((unsigned int)data.x), "r"((unsigned int)data.y), "r"((unsigned int)data.z), "r"((unsigned int)data.w));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.a2d.v4.b8.zero  [%0, {%1, %2, %3, %3}], {%4, %5, %6, %7};" : : "l"(surfObject), "r"(layerface), "r"(x), "r"(y), "r"((unsigned int)data.x), "r"((unsigned int)data.y), "r"((unsigned int)data.z), "r"((unsigned int)data.w));
   }
}

static __forceinline __declspec(__device__) void surfCubemapLayeredwrite(short4 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.a2d.v4.b16.trap  [%0, {%1, %2, %3, %3}], {%4, %5, %6, %7};" : : "l"(surfObject), "r"(layerface), "r"(x), "r"(y), "h"(data.x), "h"(data.y), "h"(data.z), "h"(data.w));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.a2d.v4.b16.clamp [%0, {%1, %2, %3, %3}], {%4, %5, %6, %7};" : : "l"(surfObject), "r"(layerface), "r"(x), "r"(y), "h"(data.x), "h"(data.y), "h"(data.z), "h"(data.w));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.a2d.v4.b16.zero  [%0, {%1, %2, %3, %3}], {%4, %5, %6, %7};" : : "l"(surfObject), "r"(layerface), "r"(x), "r"(y), "h"(data.x), "h"(data.y), "h"(data.z), "h"(data.w));
   }
}

static __forceinline __declspec(__device__) void surfCubemapLayeredwrite(ushort4 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.a2d.v4.b16.trap  [%0, {%1, %2, %3, %3}], {%4, %5, %6, %7};" : : "l"(surfObject), "r"(layerface), "r"(x), "r"(y), "h"(data.x), "h"(data.y), "h"(data.z), "h"(data.w));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.a2d.v4.b16.clamp [%0, {%1, %2, %3, %3}], {%4, %5, %6, %7};" : : "l"(surfObject), "r"(layerface), "r"(x), "r"(y), "h"(data.x), "h"(data.y), "h"(data.z), "h"(data.w));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.a2d.v4.b16.zero  [%0, {%1, %2, %3, %3}], {%4, %5, %6, %7};" : : "l"(surfObject), "r"(layerface), "r"(x), "r"(y), "h"(data.x), "h"(data.y), "h"(data.z), "h"(data.w));
   }
}

static __forceinline __declspec(__device__) void surfCubemapLayeredwrite(int4 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.a2d.v4.b32.trap  [%0, {%1, %2, %3, %3}], {%4, %5, %6, %7};" : : "l"(surfObject), "r"(layerface), "r"(x), "r"(y), "r"(data.x), "r"(data.y), "r"(data.z), "r"(data.w));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.a2d.v4.b32.clamp [%0, {%1, %2, %3, %3}], {%4, %5, %6, %7};" : : "l"(surfObject), "r"(layerface), "r"(x), "r"(y), "r"(data.x), "r"(data.y), "r"(data.z), "r"(data.w));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.a2d.v4.b32.zero  [%0, {%1, %2, %3, %3}], {%4, %5, %6, %7};" : : "l"(surfObject), "r"(layerface), "r"(x), "r"(y), "r"(data.x), "r"(data.y), "r"(data.z), "r"(data.w));
   }
}

static __forceinline __declspec(__device__) void surfCubemapLayeredwrite(uint4 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.a2d.v4.b32.trap  [%0, {%1, %2, %3, %3}], {%4, %5, %6, %7};" : : "l"(surfObject), "r"(layerface), "r"(x), "r"(y), "r"(data.x), "r"(data.y), "r"(data.z), "r"(data.w));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.a2d.v4.b32.clamp [%0, {%1, %2, %3, %3}], {%4, %5, %6, %7};" : : "l"(surfObject), "r"(layerface), "r"(x), "r"(y), "r"(data.x), "r"(data.y), "r"(data.z), "r"(data.w));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.a2d.v4.b32.zero  [%0, {%1, %2, %3, %3}], {%4, %5, %6, %7};" : : "l"(surfObject), "r"(layerface), "r"(x), "r"(y), "r"(data.x), "r"(data.y), "r"(data.z), "r"(data.w));
   }
}

static __forceinline __declspec(__device__) void surfCubemapLayeredwrite(float4 data, cudaSurfaceObject_t surfObject, int x, int y, int z, int layerface, cudaSurfaceBoundaryMode boundaryMode = cudaBoundaryModeTrap)
{
   if (boundaryMode == cudaBoundaryModeTrap) {
       asm volatile ("sust.b.a2d.v4.b32.trap  [%0, {%1, %2, %3, %3}], {%4, %5, %6, %7};" : : "l"(surfObject), "r"(layerface), "r"(x), "r"(y), "f"(data.x), "f"(data.y), "f"(data.z), "f"(data.w));
   }
   else if (boundaryMode == cudaBoundaryModeClamp) {
       asm volatile ("sust.b.a2d.v4.b32.clamp [%0, {%1, %2, %3, %3}], {%4, %5, %6, %7};" : : "l"(surfObject), "r"(layerface), "r"(x), "r"(y), "f"(data.x), "f"(data.y), "f"(data.z), "f"(data.w));
   }
   else if (boundaryMode == cudaBoundaryModeZero) {
       asm volatile ("sust.b.a2d.v4.b32.zero  [%0, {%1, %2, %3, %3}], {%4, %5, %6, %7};" : : "l"(surfObject), "r"(layerface), "r"(x), "r"(y), "f"(data.x), "f"(data.y), "f"(data.z), "f"(data.w));
   }
}

#line 7275 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\surface_indirect_functions.h"

#line 7277 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\surface_indirect_functions.h"

#line 7279 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\surface_indirect_functions.h"



#line 9419 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\device_functions.h"

#line 9421 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\device_functions.h"

#line 80 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v6.0\\include\\cuda_runtime.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\device_launch_parameters.h"




















































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\vector_types.h"












































































































































































































































































































































































































































#line 430 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\vector_types.h"
#line 54 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\device_launch_parameters.h"






#line 61 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\device_launch_parameters.h"


extern "C" {
#line 65 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\device_launch_parameters.h"

uint3 __declspec(__device_builtin__) extern const threadIdx;
uint3 __declspec(__device_builtin__) extern const blockIdx;
dim3 __declspec(__device_builtin__) extern const blockDim;
dim3 __declspec(__device_builtin__) extern const gridDim;
int __declspec(__device_builtin__) extern const warpSize;




}
#line 77 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\device_launch_parameters.h"






#line 84 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\device_launch_parameters.h"






#line 91 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\device_launch_parameters.h"






#line 98 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\device_launch_parameters.h"






#line 105 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\device_launch_parameters.h"






#line 112 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\device_launch_parameters.h"

#line 114 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v6.0\\include\\device_launch_parameters.h"
#line 81 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v6.0\\include\\cuda_runtime.h"

#line 83 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v6.0\\include\\cuda_runtime.h"









namespace
{





























template<class T>
__inline __declspec(__host__) cudaError_t cudaSetupArgument(
  T      arg,
  size_t offset
)
{
  return ::cudaSetupArgument((const void*)&arg, sizeof(T), offset);
}































static __inline __declspec(__host__) cudaError_t cudaEventCreate(
  cudaEvent_t  *event,
  unsigned int  flags
)
{
  return ::cudaEventCreateWithFlags(event, flags);
}
























































__inline __declspec(__host__) cudaError_t cudaMallocHost(
  void         **ptr,
  size_t         size,
  unsigned int   flags
)
{
  return ::cudaHostAlloc(ptr, size, flags);
}

template<class T>
__inline __declspec(__host__) cudaError_t cudaHostAlloc(
  T            **ptr,
  size_t         size,
  unsigned int   flags
)
{
  return ::cudaHostAlloc((void**)(void*)ptr, size, flags);
}

template<class T>
__inline __declspec(__host__) cudaError_t cudaHostGetDevicePointer(
  T            **pDevice,
  void          *pHost,
  unsigned int   flags
)
{
  return ::cudaHostGetDevicePointer((void**)(void*)pDevice, pHost, flags);
}






































































template<class T>
__inline __declspec(__host__) cudaError_t cudaMallocManaged(
  T            **devPtr,
  size_t         size,
  unsigned int   flags = 0x01
)
{
  return ::cudaMallocManaged((void**)(void*)devPtr, size, flags);
}



































































template<class T>
__inline __declspec(__host__) cudaError_t cudaStreamAttachMemAsync(
  cudaStream_t   stream,
  T              *devPtr,
  size_t         length = 0,
  unsigned int   flags  = 0x04
)
{
  return ::cudaStreamAttachMemAsync(stream, (void*)devPtr, length, flags);
}

template<class T>
__inline __declspec(__host__) cudaError_t cudaMalloc(
  T      **devPtr,
  size_t   size
)
{
  return ::cudaMalloc((void**)(void*)devPtr, size);
}

template<class T>
__inline __declspec(__host__) cudaError_t cudaMallocHost(
  T            **ptr,
  size_t         size,
  unsigned int   flags = 0
)
{
  return cudaMallocHost((void**)(void*)ptr, size, flags);
}

template<class T>
__inline __declspec(__host__) cudaError_t cudaMallocPitch(
  T      **devPtr,
  size_t  *pitch,
  size_t   width,
  size_t   height
)
{
  return ::cudaMallocPitch((void**)(void*)devPtr, pitch, width, height);
}




































template<class T>
__inline __declspec(__host__) cudaError_t cudaMemcpyToSymbol(
  const T                   &symbol,
  const void                *src,
        size_t               count,
        size_t               offset = 0,
        enum cudaMemcpyKind  kind   = cudaMemcpyHostToDevice
)
{
  return ::cudaMemcpyToSymbol((const void*)&symbol, src, count, offset, kind);
}









































template<class T>
__inline __declspec(__host__) cudaError_t cudaMemcpyToSymbolAsync(
  const T                   &symbol,
  const void                *src,
        size_t               count,
        size_t               offset = 0,
        enum cudaMemcpyKind  kind   = cudaMemcpyHostToDevice,
        cudaStream_t         stream = 0
)
{
  return ::cudaMemcpyToSymbolAsync((const void*)&symbol, src, count, offset, kind, stream);
}


































template<class T>
__inline __declspec(__host__) cudaError_t cudaMemcpyFromSymbol(
        void                *dst,
  const T                   &symbol,
        size_t               count,
        size_t               offset = 0,
        enum cudaMemcpyKind  kind   = cudaMemcpyDeviceToHost
)
{
  return ::cudaMemcpyFromSymbol(dst, (const void*)&symbol, count, offset, kind);
}









































template<class T>
__inline __declspec(__host__) cudaError_t cudaMemcpyFromSymbolAsync(
        void                *dst,
  const T                   &symbol,
        size_t               count,
        size_t               offset = 0,
        enum cudaMemcpyKind  kind   = cudaMemcpyDeviceToHost,
        cudaStream_t         stream = 0
)
{
  return ::cudaMemcpyFromSymbolAsync(dst, (const void*)&symbol, count, offset, kind, stream);
}





















template<class T>
__inline __declspec(__host__) cudaError_t cudaGetSymbolAddress(
        void **devPtr,
  const T     &symbol
)
{
  return ::cudaGetSymbolAddress(devPtr, (const void*)&symbol);
}





















template<class T>
__inline __declspec(__host__) cudaError_t cudaGetSymbolSize(
        size_t *size,
  const T      &symbol
)
{
  return ::cudaGetSymbolSize(size, (const void*)&symbol);
}



































template<class T, int dim, enum cudaTextureReadMode readMode>
__inline __declspec(__host__) cudaError_t cudaBindTexture(
        size_t                           *offset,
  const struct texture<T, dim, readMode> &tex,
  const void                             *devPtr,
  const struct cudaChannelFormatDesc     &desc,
        size_t                            size = 0xffffffff
)
{
  return ::cudaBindTexture(offset, &tex, devPtr, &desc, size);
}


































template<class T, int dim, enum cudaTextureReadMode readMode>
__inline __declspec(__host__) cudaError_t cudaBindTexture(
        size_t                           *offset,
  const struct texture<T, dim, readMode> &tex,
  const void                             *devPtr,
        size_t                            size = 0xffffffff
)
{
  return cudaBindTexture(offset, tex, devPtr, tex.channelDesc, size);
}














































template<class T, int dim, enum cudaTextureReadMode readMode>
__inline __declspec(__host__) cudaError_t cudaBindTexture2D(
        size_t                           *offset,
  const struct texture<T, dim, readMode> &tex,
  const void                             *devPtr,
  const struct cudaChannelFormatDesc     &desc,
  size_t                                  width,
  size_t                                  height,
  size_t                                  pitch
)
{
  return ::cudaBindTexture2D(offset, &tex, devPtr, &desc, width, height, pitch);
}













































template<class T, int dim, enum cudaTextureReadMode readMode>
__inline __declspec(__host__) cudaError_t cudaBindTexture2D(
        size_t                           *offset,
  const struct texture<T, dim, readMode> &tex,
  const void                             *devPtr,
  size_t                                  width,
  size_t                                  height,
  size_t                                  pitch
)
{
  return ::cudaBindTexture2D(offset, &tex, devPtr, &tex.channelDesc, width, height, pitch);
}






























template<class T, int dim, enum cudaTextureReadMode readMode>
__inline __declspec(__host__) cudaError_t cudaBindTextureToArray(
  const struct texture<T, dim, readMode> &tex,
  cudaArray_const_t                       array,
  const struct cudaChannelFormatDesc     &desc
)
{
  return ::cudaBindTextureToArray(&tex, array, &desc);
}





























template<class T, int dim, enum cudaTextureReadMode readMode>
__inline __declspec(__host__) cudaError_t cudaBindTextureToArray(
  const struct texture<T, dim, readMode> &tex,
  cudaArray_const_t                       array
)
{
  struct cudaChannelFormatDesc desc;
  cudaError_t                  err = ::cudaGetChannelDesc(&desc, array);

  return err == cudaSuccess ? cudaBindTextureToArray(tex, array, desc) : err;
}






























template<class T, int dim, enum cudaTextureReadMode readMode>
__inline __declspec(__host__) cudaError_t cudaBindTextureToMipmappedArray(
  const struct texture<T, dim, readMode> &tex,
  cudaMipmappedArray_const_t              mipmappedArray,
  const struct cudaChannelFormatDesc     &desc
)
{
  return ::cudaBindTextureToMipmappedArray(&tex, mipmappedArray, &desc);
}





























template<class T, int dim, enum cudaTextureReadMode readMode>
__inline __declspec(__host__) cudaError_t cudaBindTextureToMipmappedArray(
  const struct texture<T, dim, readMode> &tex,
  cudaMipmappedArray_const_t              mipmappedArray
)
{
  struct cudaChannelFormatDesc desc;
  cudaArray_t                  levelArray;
  cudaError_t                  err = ::cudaGetMipmappedArrayLevel(&levelArray, mipmappedArray, 0);
  
  if (err != cudaSuccess) {
      return err;
  }
  err = ::cudaGetChannelDesc(&desc, levelArray);

  return err == cudaSuccess ? cudaBindTextureToMipmappedArray(tex, mipmappedArray, desc) : err;
}






















template<class T, int dim, enum cudaTextureReadMode readMode>
__inline __declspec(__host__) cudaError_t cudaUnbindTexture(
  const struct texture<T, dim, readMode> &tex
)
{
  return ::cudaUnbindTexture(&tex);
}



























template<class T, int dim, enum cudaTextureReadMode readMode>
__inline __declspec(__host__) cudaError_t cudaGetTextureAlignmentOffset(
        size_t                           *offset,
  const struct texture<T, dim, readMode> &tex
)
{
  return ::cudaGetTextureAlignmentOffset(offset, &tex);
}













































template<class T>
__inline __declspec(__host__) cudaError_t cudaFuncSetCacheConfig(
  T                  *func,
  enum cudaFuncCache  cacheConfig
)
{
  return ::cudaFuncSetCacheConfig((const void*)func, cacheConfig);
}

template<class T>
__inline __declspec(__host__) cudaError_t cudaFuncSetSharedMemConfig(
  T                        *func,
  enum cudaSharedMemConfig  config
)
{
  return ::cudaFuncSetSharedMemConfig((const void*)func, config);
}



































template<class T>
__inline __declspec(__host__) cudaError_t cudaLaunch(
  T *func
)
{
  return ::cudaLaunch((const void*)func);
}































template<class T>
__inline __declspec(__host__) cudaError_t cudaFuncGetAttributes(
  struct cudaFuncAttributes *attr,
  T                         *entry
)
{
  return ::cudaFuncGetAttributes(attr, (const void*)entry);
}





















template<class T, int dim>
__inline __declspec(__host__) cudaError_t cudaBindSurfaceToArray(
  const struct surface<T, dim>       &surf,
  cudaArray_const_t                   array,
  const struct cudaChannelFormatDesc &desc
)
{
  return ::cudaBindSurfaceToArray(&surf, array, &desc);
}




















template<class T, int dim>
__inline __declspec(__host__) cudaError_t cudaBindSurfaceToArray(
  const struct surface<T, dim> &surf,
  cudaArray_const_t             array
)
{
  struct cudaChannelFormatDesc desc;
  cudaError_t                  err = ::cudaGetChannelDesc(&desc, array);

  return err == cudaSuccess ? cudaBindSurfaceToArray(surf, array, desc) : err;
}

#line 1335 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v6.0\\include\\cuda_runtime.h"

 

} 

#line 1341 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v6.0\\include\\cuda_runtime.h"

#line 1343 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v6.0\\include\\cuda_runtime.h"

#line 1 "C:/Users/Blake/Documents/GitHub/pct-reconstruction/pCT_Reconstruction.cu"











#line 1 "c:\\users\\blake\\documents\\github\\pct-reconstruction\\pCT_Reconstruction_GPU.cu"





#line 1 "c:\\users\\blake\\documents\\github\\pct-reconstruction\\pCT_Reconstruction.h"





#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v6.0\\include\\cuda.h"































































#line 65 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v6.0\\include\\cuda.h"
    
#line 67 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v6.0\\include\\cuda.h"


    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
#line 111 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v6.0\\include\\cuda.h"

    
    
    
    
    
#line 118 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v6.0\\include\\cuda.h"

    
#line 121 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v6.0\\include\\cuda.h"




#line 126 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v6.0\\include\\cuda.h"
#line 127 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v6.0\\include\\cuda.h"

























extern "C" {
#line 154 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v6.0\\include\\cuda.h"



 



typedef unsigned long long CUdeviceptr;


#line 165 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v6.0\\include\\cuda.h"

#line 167 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v6.0\\include\\cuda.h"

typedef int CUdevice;                                     
typedef struct CUctx_st *CUcontext;                       
typedef struct CUmod_st *CUmodule;                        
typedef struct CUfunc_st *CUfunction;                     
typedef struct CUarray_st *CUarray;                       
typedef struct CUmipmappedArray_st *CUmipmappedArray;     
typedef struct CUtexref_st *CUtexref;                     
typedef struct CUsurfref_st *CUsurfref;                   
typedef struct CUevent_st *CUevent;                       
typedef struct CUstream_st *CUstream;                     
typedef struct CUgraphicsResource_st *CUgraphicsResource; 
typedef unsigned long long CUtexObject;                   
typedef unsigned long long CUsurfObject;                  

typedef struct CUuuid_st {                                
    char bytes[16];
} CUuuid;












typedef struct CUipcEventHandle_st {
    char reserved[64];
} CUipcEventHandle;




typedef struct CUipcMemHandle_st {
    char reserved[64];
} CUipcMemHandle;




typedef enum CUipcMem_flags_enum {
    CU_IPC_MEM_LAZY_ENABLE_PEER_ACCESS = 0x1 
} CUipcMem_flags;

#line 216 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v6.0\\include\\cuda.h"




typedef enum CUmemAttach_flags_enum {
    CU_MEM_ATTACH_GLOBAL = 0x1, 
    CU_MEM_ATTACH_HOST   = 0x2, 
    CU_MEM_ATTACH_SINGLE = 0x4  
} CUmemAttach_flags;




typedef enum CUctx_flags_enum {
    CU_CTX_SCHED_AUTO          = 0x00, 
    CU_CTX_SCHED_SPIN          = 0x01, 
    CU_CTX_SCHED_YIELD         = 0x02, 
    CU_CTX_SCHED_BLOCKING_SYNC = 0x04, 
    CU_CTX_BLOCKING_SYNC       = 0x04, 


    CU_CTX_SCHED_MASK          = 0x07, 
    CU_CTX_MAP_HOST            = 0x08, 
    CU_CTX_LMEM_RESIZE_TO_MAX  = 0x10, 
    CU_CTX_FLAGS_MASK          = 0x1f
} CUctx_flags;




typedef enum CUstream_flags_enum {
    CU_STREAM_DEFAULT      = 0x0, 
    CU_STREAM_NON_BLOCKING = 0x1  
} CUstream_flags;




typedef enum CUevent_flags_enum {
    CU_EVENT_DEFAULT        = 0x0, 
    CU_EVENT_BLOCKING_SYNC  = 0x1, 
    CU_EVENT_DISABLE_TIMING = 0x2, 
    CU_EVENT_INTERPROCESS   = 0x4  
} CUevent_flags;




typedef enum CUarray_format_enum {
    CU_AD_FORMAT_UNSIGNED_INT8  = 0x01, 
    CU_AD_FORMAT_UNSIGNED_INT16 = 0x02, 
    CU_AD_FORMAT_UNSIGNED_INT32 = 0x03, 
    CU_AD_FORMAT_SIGNED_INT8    = 0x08, 
    CU_AD_FORMAT_SIGNED_INT16   = 0x09, 
    CU_AD_FORMAT_SIGNED_INT32   = 0x0a, 
    CU_AD_FORMAT_HALF           = 0x10, 
    CU_AD_FORMAT_FLOAT          = 0x20  
} CUarray_format;




typedef enum CUaddress_mode_enum {
    CU_TR_ADDRESS_MODE_WRAP   = 0, 
    CU_TR_ADDRESS_MODE_CLAMP  = 1, 
    CU_TR_ADDRESS_MODE_MIRROR = 2, 
    CU_TR_ADDRESS_MODE_BORDER = 3  
} CUaddress_mode;




typedef enum CUfilter_mode_enum {
    CU_TR_FILTER_MODE_POINT  = 0, 
    CU_TR_FILTER_MODE_LINEAR = 1  
} CUfilter_mode;




typedef enum CUdevice_attribute_enum {
    CU_DEVICE_ATTRIBUTE_MAX_THREADS_PER_BLOCK = 1,              
    CU_DEVICE_ATTRIBUTE_MAX_BLOCK_DIM_X = 2,                    
    CU_DEVICE_ATTRIBUTE_MAX_BLOCK_DIM_Y = 3,                    
    CU_DEVICE_ATTRIBUTE_MAX_BLOCK_DIM_Z = 4,                    
    CU_DEVICE_ATTRIBUTE_MAX_GRID_DIM_X = 5,                     
    CU_DEVICE_ATTRIBUTE_MAX_GRID_DIM_Y = 6,                     
    CU_DEVICE_ATTRIBUTE_MAX_GRID_DIM_Z = 7,                     
    CU_DEVICE_ATTRIBUTE_MAX_SHARED_MEMORY_PER_BLOCK = 8,        
    CU_DEVICE_ATTRIBUTE_SHARED_MEMORY_PER_BLOCK = 8,            
    CU_DEVICE_ATTRIBUTE_TOTAL_CONSTANT_MEMORY = 9,              
    CU_DEVICE_ATTRIBUTE_WARP_SIZE = 10,                         
    CU_DEVICE_ATTRIBUTE_MAX_PITCH = 11,                         
    CU_DEVICE_ATTRIBUTE_MAX_REGISTERS_PER_BLOCK = 12,           
    CU_DEVICE_ATTRIBUTE_REGISTERS_PER_BLOCK = 12,               
    CU_DEVICE_ATTRIBUTE_CLOCK_RATE = 13,                        
    CU_DEVICE_ATTRIBUTE_TEXTURE_ALIGNMENT = 14,                 
    CU_DEVICE_ATTRIBUTE_GPU_OVERLAP = 15,                       
    CU_DEVICE_ATTRIBUTE_MULTIPROCESSOR_COUNT = 16,              
    CU_DEVICE_ATTRIBUTE_KERNEL_EXEC_TIMEOUT = 17,               
    CU_DEVICE_ATTRIBUTE_INTEGRATED = 18,                        
    CU_DEVICE_ATTRIBUTE_CAN_MAP_HOST_MEMORY = 19,               
    CU_DEVICE_ATTRIBUTE_COMPUTE_MODE = 20,                      
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE1D_WIDTH = 21,           
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_WIDTH = 22,           
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_HEIGHT = 23,          
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE3D_WIDTH = 24,           
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE3D_HEIGHT = 25,          
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE3D_DEPTH = 26,           
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_LAYERED_WIDTH = 27,   
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_LAYERED_HEIGHT = 28,  
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_LAYERED_LAYERS = 29,  
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_ARRAY_WIDTH = 27,     
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_ARRAY_HEIGHT = 28,    
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_ARRAY_NUMSLICES = 29, 
    CU_DEVICE_ATTRIBUTE_SURFACE_ALIGNMENT = 30,                 
    CU_DEVICE_ATTRIBUTE_CONCURRENT_KERNELS = 31,                
    CU_DEVICE_ATTRIBUTE_ECC_ENABLED = 32,                       
    CU_DEVICE_ATTRIBUTE_PCI_BUS_ID = 33,                        
    CU_DEVICE_ATTRIBUTE_PCI_DEVICE_ID = 34,                     
    CU_DEVICE_ATTRIBUTE_TCC_DRIVER = 35,                        
    CU_DEVICE_ATTRIBUTE_MEMORY_CLOCK_RATE = 36,                 
    CU_DEVICE_ATTRIBUTE_GLOBAL_MEMORY_BUS_WIDTH = 37,           
    CU_DEVICE_ATTRIBUTE_L2_CACHE_SIZE = 38,                     
    CU_DEVICE_ATTRIBUTE_MAX_THREADS_PER_MULTIPROCESSOR = 39,    
    CU_DEVICE_ATTRIBUTE_ASYNC_ENGINE_COUNT = 40,                
    CU_DEVICE_ATTRIBUTE_UNIFIED_ADDRESSING = 41,                    
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE1D_LAYERED_WIDTH = 42,   
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE1D_LAYERED_LAYERS = 43,  
    CU_DEVICE_ATTRIBUTE_CAN_TEX2D_GATHER = 44,                  
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_GATHER_WIDTH = 45,    
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_GATHER_HEIGHT = 46,   
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE3D_WIDTH_ALTERNATE = 47, 
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE3D_HEIGHT_ALTERNATE = 48,
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE3D_DEPTH_ALTERNATE = 49, 
    CU_DEVICE_ATTRIBUTE_PCI_DOMAIN_ID = 50,                     
    CU_DEVICE_ATTRIBUTE_TEXTURE_PITCH_ALIGNMENT = 51,           
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURECUBEMAP_WIDTH = 52,      
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURECUBEMAP_LAYERED_WIDTH = 53,  
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURECUBEMAP_LAYERED_LAYERS = 54, 
    CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE1D_WIDTH = 55,           
    CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE2D_WIDTH = 56,           
    CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE2D_HEIGHT = 57,          
    CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE3D_WIDTH = 58,           
    CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE3D_HEIGHT = 59,          
    CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE3D_DEPTH = 60,           
    CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE1D_LAYERED_WIDTH = 61,   
    CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE1D_LAYERED_LAYERS = 62,  
    CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE2D_LAYERED_WIDTH = 63,   
    CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE2D_LAYERED_HEIGHT = 64,  
    CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACE2D_LAYERED_LAYERS = 65,  
    CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACECUBEMAP_WIDTH = 66,      
    CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACECUBEMAP_LAYERED_WIDTH = 67,  
    CU_DEVICE_ATTRIBUTE_MAXIMUM_SURFACECUBEMAP_LAYERED_LAYERS = 68, 
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE1D_LINEAR_WIDTH = 69,    
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_LINEAR_WIDTH = 70,    
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_LINEAR_HEIGHT = 71,   
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_LINEAR_PITCH = 72,    
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_MIPMAPPED_WIDTH = 73, 
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE2D_MIPMAPPED_HEIGHT = 74,
    CU_DEVICE_ATTRIBUTE_COMPUTE_CAPABILITY_MAJOR = 75,               
    CU_DEVICE_ATTRIBUTE_COMPUTE_CAPABILITY_MINOR = 76,          
    CU_DEVICE_ATTRIBUTE_MAXIMUM_TEXTURE1D_MIPMAPPED_WIDTH = 77, 
    CU_DEVICE_ATTRIBUTE_STREAM_PRIORITIES_SUPPORTED = 78,       
    CU_DEVICE_ATTRIBUTE_GLOBAL_L1_CACHE_SUPPORTED = 79,         
    CU_DEVICE_ATTRIBUTE_LOCAL_L1_CACHE_SUPPORTED = 80,          
    CU_DEVICE_ATTRIBUTE_MAX_SHARED_MEMORY_PER_MULTIPROCESSOR = 81,  
    CU_DEVICE_ATTRIBUTE_MAX_REGISTERS_PER_MULTIPROCESSOR = 82,  
    CU_DEVICE_ATTRIBUTE_MANAGED_MEMORY = 83,                    
    CU_DEVICE_ATTRIBUTE_MULTI_GPU_BOARD = 84,                     
    CU_DEVICE_ATTRIBUTE_MULTI_GPU_BOARD_GROUP_ID = 85,           
    CU_DEVICE_ATTRIBUTE_MAX
} CUdevice_attribute;




typedef struct CUdevprop_st {
    int maxThreadsPerBlock;     
    int maxThreadsDim[3];       
    int maxGridSize[3];         
    int sharedMemPerBlock;      
    int totalConstantMemory;    
    int SIMDWidth;              
    int memPitch;               
    int regsPerBlock;           
    int clockRate;              
    int textureAlign;           
} CUdevprop;




typedef enum CUpointer_attribute_enum {
    CU_POINTER_ATTRIBUTE_CONTEXT = 1,        
    CU_POINTER_ATTRIBUTE_MEMORY_TYPE = 2,    
    CU_POINTER_ATTRIBUTE_DEVICE_POINTER = 3, 
    CU_POINTER_ATTRIBUTE_HOST_POINTER = 4,   
    CU_POINTER_ATTRIBUTE_P2P_TOKENS = 5,     
    CU_POINTER_ATTRIBUTE_SYNC_MEMOPS = 6,    
    CU_POINTER_ATTRIBUTE_BUFFER_ID = 7,      
    CU_POINTER_ATTRIBUTE_IS_MANAGED = 8      
} CUpointer_attribute;




typedef enum CUfunction_attribute_enum {
    




    CU_FUNC_ATTRIBUTE_MAX_THREADS_PER_BLOCK = 0,

    




    CU_FUNC_ATTRIBUTE_SHARED_SIZE_BYTES = 1,

    



    CU_FUNC_ATTRIBUTE_CONST_SIZE_BYTES = 2,

    


    CU_FUNC_ATTRIBUTE_LOCAL_SIZE_BYTES = 3,

    


    CU_FUNC_ATTRIBUTE_NUM_REGS = 4,

    






    CU_FUNC_ATTRIBUTE_PTX_VERSION = 5,

    






    CU_FUNC_ATTRIBUTE_BINARY_VERSION = 6,

    



    CU_FUNC_ATTRIBUTE_CACHE_MODE_CA = 7,

    CU_FUNC_ATTRIBUTE_MAX
} CUfunction_attribute;




typedef enum CUfunc_cache_enum {
    CU_FUNC_CACHE_PREFER_NONE    = 0x00, 
    CU_FUNC_CACHE_PREFER_SHARED  = 0x01, 
    CU_FUNC_CACHE_PREFER_L1      = 0x02, 
    CU_FUNC_CACHE_PREFER_EQUAL   = 0x03  
} CUfunc_cache;




typedef enum CUsharedconfig_enum {
    CU_SHARED_MEM_CONFIG_DEFAULT_BANK_SIZE    = 0x00, 
    CU_SHARED_MEM_CONFIG_FOUR_BYTE_BANK_SIZE  = 0x01, 
    CU_SHARED_MEM_CONFIG_EIGHT_BYTE_BANK_SIZE = 0x02  
} CUsharedconfig;




typedef enum CUmemorytype_enum {
    CU_MEMORYTYPE_HOST    = 0x01,    
    CU_MEMORYTYPE_DEVICE  = 0x02,    
    CU_MEMORYTYPE_ARRAY   = 0x03,    
    CU_MEMORYTYPE_UNIFIED = 0x04     
} CUmemorytype;




typedef enum CUcomputemode_enum {
    CU_COMPUTEMODE_DEFAULT           = 0, 
    CU_COMPUTEMODE_EXCLUSIVE         = 1, 
    CU_COMPUTEMODE_PROHIBITED        = 2, 
    CU_COMPUTEMODE_EXCLUSIVE_PROCESS = 3  
} CUcomputemode;




typedef enum CUjit_option_enum
{
    




    CU_JIT_MAX_REGISTERS = 0,

    












    CU_JIT_THREADS_PER_BLOCK,

    





    CU_JIT_WALL_TIME,

    






    CU_JIT_INFO_LOG_BUFFER,

    






    CU_JIT_INFO_LOG_BUFFER_SIZE_BYTES,

    






    CU_JIT_ERROR_LOG_BUFFER,

    






    CU_JIT_ERROR_LOG_BUFFER_SIZE_BYTES,

    





    CU_JIT_OPTIMIZATION_LEVEL,

    





    CU_JIT_TARGET_FROM_CUCONTEXT,

    





    CU_JIT_TARGET,

    





    CU_JIT_FALLBACK_STRATEGY,

    





    CU_JIT_GENERATE_DEBUG_INFO,

    




    CU_JIT_LOG_VERBOSE,

    




    CU_JIT_GENERATE_LINE_INFO,

    





    CU_JIT_CACHE_MODE,

    CU_JIT_NUM_OPTIONS

} CUjit_option;




typedef enum CUjit_target_enum
{
    CU_TARGET_COMPUTE_10 = 10,       
    CU_TARGET_COMPUTE_11 = 11,       
    CU_TARGET_COMPUTE_12 = 12,       
    CU_TARGET_COMPUTE_13 = 13,       
    CU_TARGET_COMPUTE_20 = 20,       
    CU_TARGET_COMPUTE_21 = 21,       
    CU_TARGET_COMPUTE_30 = 30,       
    CU_TARGET_COMPUTE_32 = 32,       
    CU_TARGET_COMPUTE_35 = 35,       
    CU_TARGET_COMPUTE_50 = 50       
} CUjit_target;




typedef enum CUjit_fallback_enum
{
    CU_PREFER_PTX = 0,  

    CU_PREFER_BINARY    

} CUjit_fallback;




typedef enum CUjit_cacheMode_enum
{
    CU_JIT_CACHE_OPTION_NONE = 0, 
    CU_JIT_CACHE_OPTION_CG,       
    CU_JIT_CACHE_OPTION_CA        
} CUjit_cacheMode;




typedef enum CUjitInputType_enum
{
    



    CU_JIT_INPUT_CUBIN = 0,

    



    CU_JIT_INPUT_PTX,

    



    CU_JIT_INPUT_FATBINARY,

    



    CU_JIT_INPUT_OBJECT,

    



    CU_JIT_INPUT_LIBRARY,

    CU_JIT_NUM_INPUT_TYPES
} CUjitInputType;


typedef struct CUlinkState_st *CUlinkState;
#line 736 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v6.0\\include\\cuda.h"




typedef enum CUgraphicsRegisterFlags_enum {
    CU_GRAPHICS_REGISTER_FLAGS_NONE           = 0x00,
    CU_GRAPHICS_REGISTER_FLAGS_READ_ONLY      = 0x01,
    CU_GRAPHICS_REGISTER_FLAGS_WRITE_DISCARD  = 0x02,
    CU_GRAPHICS_REGISTER_FLAGS_SURFACE_LDST   = 0x04,
    CU_GRAPHICS_REGISTER_FLAGS_TEXTURE_GATHER = 0x08
} CUgraphicsRegisterFlags;




typedef enum CUgraphicsMapResourceFlags_enum {
    CU_GRAPHICS_MAP_RESOURCE_FLAGS_NONE          = 0x00,
    CU_GRAPHICS_MAP_RESOURCE_FLAGS_READ_ONLY     = 0x01,
    CU_GRAPHICS_MAP_RESOURCE_FLAGS_WRITE_DISCARD = 0x02
} CUgraphicsMapResourceFlags;




typedef enum CUarray_cubemap_face_enum {
    CU_CUBEMAP_FACE_POSITIVE_X  = 0x00, 
    CU_CUBEMAP_FACE_NEGATIVE_X  = 0x01, 
    CU_CUBEMAP_FACE_POSITIVE_Y  = 0x02, 
    CU_CUBEMAP_FACE_NEGATIVE_Y  = 0x03, 
    CU_CUBEMAP_FACE_POSITIVE_Z  = 0x04, 
    CU_CUBEMAP_FACE_NEGATIVE_Z  = 0x05  
} CUarray_cubemap_face;




typedef enum CUlimit_enum {
    CU_LIMIT_STACK_SIZE                       = 0x00, 
    CU_LIMIT_PRINTF_FIFO_SIZE                 = 0x01, 
    CU_LIMIT_MALLOC_HEAP_SIZE                 = 0x02, 
    CU_LIMIT_DEV_RUNTIME_SYNC_DEPTH           = 0x03, 
    CU_LIMIT_DEV_RUNTIME_PENDING_LAUNCH_COUNT = 0x04, 
    CU_LIMIT_MAX
} CUlimit;




typedef enum CUresourcetype_enum {
    CU_RESOURCE_TYPE_ARRAY           = 0x00, 
    CU_RESOURCE_TYPE_MIPMAPPED_ARRAY = 0x01, 
    CU_RESOURCE_TYPE_LINEAR          = 0x02, 
    CU_RESOURCE_TYPE_PITCH2D         = 0x03  
} CUresourcetype;




typedef enum cudaError_enum {
    




    CUDA_SUCCESS                              = 0,

    



    CUDA_ERROR_INVALID_VALUE                  = 1,

    



    CUDA_ERROR_OUT_OF_MEMORY                  = 2,

    



    CUDA_ERROR_NOT_INITIALIZED                = 3,

    


    CUDA_ERROR_DEINITIALIZED                  = 4,

    




    CUDA_ERROR_PROFILER_DISABLED              = 5,

    





    CUDA_ERROR_PROFILER_NOT_INITIALIZED       = 6,

    




    CUDA_ERROR_PROFILER_ALREADY_STARTED       = 7,

    




    CUDA_ERROR_PROFILER_ALREADY_STOPPED       = 8,

    



    CUDA_ERROR_NO_DEVICE                      = 100,

    



    CUDA_ERROR_INVALID_DEVICE                 = 101,


    



    CUDA_ERROR_INVALID_IMAGE                  = 200,

    







    CUDA_ERROR_INVALID_CONTEXT                = 201,

    






    CUDA_ERROR_CONTEXT_ALREADY_CURRENT        = 202,

    


    CUDA_ERROR_MAP_FAILED                     = 205,

    


    CUDA_ERROR_UNMAP_FAILED                   = 206,

    



    CUDA_ERROR_ARRAY_IS_MAPPED                = 207,

    


    CUDA_ERROR_ALREADY_MAPPED                 = 208,

    





    CUDA_ERROR_NO_BINARY_FOR_GPU              = 209,

    


    CUDA_ERROR_ALREADY_ACQUIRED               = 210,

    


    CUDA_ERROR_NOT_MAPPED                     = 211,

    



    CUDA_ERROR_NOT_MAPPED_AS_ARRAY            = 212,

    



    CUDA_ERROR_NOT_MAPPED_AS_POINTER          = 213,

    



    CUDA_ERROR_ECC_UNCORRECTABLE              = 214,

    



    CUDA_ERROR_UNSUPPORTED_LIMIT              = 215,

    




    CUDA_ERROR_CONTEXT_ALREADY_IN_USE         = 216,

    



    CUDA_ERROR_PEER_ACCESS_UNSUPPORTED        = 217,

    


    CUDA_ERROR_INVALID_PTX                    = 218,

    


    CUDA_ERROR_INVALID_SOURCE                 = 300,

    


    CUDA_ERROR_FILE_NOT_FOUND                 = 301,

    


    CUDA_ERROR_SHARED_OBJECT_SYMBOL_NOT_FOUND = 302,

    


    CUDA_ERROR_SHARED_OBJECT_INIT_FAILED      = 303,

    


    CUDA_ERROR_OPERATING_SYSTEM               = 304,

    



    CUDA_ERROR_INVALID_HANDLE                 = 400,

    



    CUDA_ERROR_NOT_FOUND                      = 500,

    





    CUDA_ERROR_NOT_READY                      = 600,

    






    CUDA_ERROR_ILLEGAL_ADDRESS                = 700,

    








    CUDA_ERROR_LAUNCH_OUT_OF_RESOURCES        = 701,

    








    CUDA_ERROR_LAUNCH_TIMEOUT                 = 702,

    



    CUDA_ERROR_LAUNCH_INCOMPATIBLE_TEXTURING  = 703,
    
    




    CUDA_ERROR_PEER_ACCESS_ALREADY_ENABLED    = 704,

    




    CUDA_ERROR_PEER_ACCESS_NOT_ENABLED        = 705,

    



    CUDA_ERROR_PRIMARY_CONTEXT_ACTIVE         = 708,

    




    CUDA_ERROR_CONTEXT_IS_DESTROYED           = 709,

    





    CUDA_ERROR_ASSERT                         = 710,

    




    CUDA_ERROR_TOO_MANY_PEERS                 = 711,

    



    CUDA_ERROR_HOST_MEMORY_ALREADY_REGISTERED = 712,

    



    CUDA_ERROR_HOST_MEMORY_NOT_REGISTERED     = 713,

    






    CUDA_ERROR_HARDWARE_STACK_ERROR           = 714,

    





    CUDA_ERROR_ILLEGAL_INSTRUCTION            = 715,

    






    CUDA_ERROR_MISALIGNED_ADDRESS             = 716,

    








    CUDA_ERROR_INVALID_ADDRESS_SPACE          = 717,

    





    CUDA_ERROR_INVALID_PC                     = 718,

    







    CUDA_ERROR_LAUNCH_FAILED                  = 719,


    


    CUDA_ERROR_NOT_PERMITTED                  = 800,

    



    CUDA_ERROR_NOT_SUPPORTED                  = 801,

    


    CUDA_ERROR_UNKNOWN                        = 999
} CUresult;





#line 1187 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v6.0\\include\\cuda.h"







typedef void (__stdcall *CUstreamCallback)(CUstream hStream, CUresult status, void *userData);








































typedef struct CUDA_MEMCPY2D_st {
    size_t srcXInBytes;         
    size_t srcY;                

    CUmemorytype srcMemoryType; 
    const void *srcHost;        
    CUdeviceptr srcDevice;      
    CUarray srcArray;           
    size_t srcPitch;            

    size_t dstXInBytes;         
    size_t dstY;                

    CUmemorytype dstMemoryType; 
    void *dstHost;              
    CUdeviceptr dstDevice;      
    CUarray dstArray;           
    size_t dstPitch;            

    size_t WidthInBytes;        
    size_t Height;              
} CUDA_MEMCPY2D;




typedef struct CUDA_MEMCPY3D_st {
    size_t srcXInBytes;         
    size_t srcY;                
    size_t srcZ;                
    size_t srcLOD;              
    CUmemorytype srcMemoryType; 
    const void *srcHost;        
    CUdeviceptr srcDevice;      
    CUarray srcArray;           
    void *reserved0;            
    size_t srcPitch;            
    size_t srcHeight;           

    size_t dstXInBytes;         
    size_t dstY;                
    size_t dstZ;                
    size_t dstLOD;              
    CUmemorytype dstMemoryType; 
    void *dstHost;              
    CUdeviceptr dstDevice;      
    CUarray dstArray;           
    void *reserved1;            
    size_t dstPitch;            
    size_t dstHeight;           

    size_t WidthInBytes;        
    size_t Height;              
    size_t Depth;               
} CUDA_MEMCPY3D;




typedef struct CUDA_MEMCPY3D_PEER_st {
    size_t srcXInBytes;         
    size_t srcY;                
    size_t srcZ;                
    size_t srcLOD;              
    CUmemorytype srcMemoryType; 
    const void *srcHost;        
    CUdeviceptr srcDevice;      
    CUarray srcArray;           
    CUcontext srcContext;       
    size_t srcPitch;            
    size_t srcHeight;           

    size_t dstXInBytes;         
    size_t dstY;                
    size_t dstZ;                
    size_t dstLOD;              
    CUmemorytype dstMemoryType; 
    void *dstHost;              
    CUdeviceptr dstDevice;      
    CUarray dstArray;           
    CUcontext dstContext;       
    size_t dstPitch;            
    size_t dstHeight;           

    size_t WidthInBytes;        
    size_t Height;              
    size_t Depth;               
} CUDA_MEMCPY3D_PEER;




typedef struct CUDA_ARRAY_DESCRIPTOR_st
{
    size_t Width;             
    size_t Height;            

    CUarray_format Format;    
    unsigned int NumChannels; 
} CUDA_ARRAY_DESCRIPTOR;




typedef struct CUDA_ARRAY3D_DESCRIPTOR_st
{
    size_t Width;             
    size_t Height;            
    size_t Depth;             

    CUarray_format Format;    
    unsigned int NumChannels; 
    unsigned int Flags;       
} CUDA_ARRAY3D_DESCRIPTOR;

#line 1351 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v6.0\\include\\cuda.h"






typedef struct CUDA_RESOURCE_DESC_st
{
    CUresourcetype resType;                   

    union {
        struct {
            CUarray hArray;                   
        } array;
        struct {
            CUmipmappedArray hMipmappedArray; 
        } mipmap;
        struct {
            CUdeviceptr devPtr;               
            CUarray_format format;            
            unsigned int numChannels;         
            size_t sizeInBytes;               
        } linear;
        struct {
            CUdeviceptr devPtr;               
            CUarray_format format;            
            unsigned int numChannels;         
            size_t width;                     
            size_t height;                    
            size_t pitchInBytes;              
        } pitch2D;
        struct {
            int reserved[32];
        } reserved;
    } res;

    unsigned int flags;                       
} CUDA_RESOURCE_DESC;




typedef struct CUDA_TEXTURE_DESC_st {
    CUaddress_mode addressMode[3];  
    CUfilter_mode filterMode;       
    unsigned int flags;             
    unsigned int maxAnisotropy;     
    CUfilter_mode mipmapFilterMode; 
    float mipmapLevelBias;          
    float minMipmapLevelClamp;      
    float maxMipmapLevelClamp;      
    int reserved[16];
} CUDA_TEXTURE_DESC;




typedef enum CUresourceViewFormat_enum
{
    CU_RES_VIEW_FORMAT_NONE          = 0x00, 
    CU_RES_VIEW_FORMAT_UINT_1X8      = 0x01, 
    CU_RES_VIEW_FORMAT_UINT_2X8      = 0x02, 
    CU_RES_VIEW_FORMAT_UINT_4X8      = 0x03, 
    CU_RES_VIEW_FORMAT_SINT_1X8      = 0x04, 
    CU_RES_VIEW_FORMAT_SINT_2X8      = 0x05, 
    CU_RES_VIEW_FORMAT_SINT_4X8      = 0x06, 
    CU_RES_VIEW_FORMAT_UINT_1X16     = 0x07, 
    CU_RES_VIEW_FORMAT_UINT_2X16     = 0x08, 
    CU_RES_VIEW_FORMAT_UINT_4X16     = 0x09, 
    CU_RES_VIEW_FORMAT_SINT_1X16     = 0x0a, 
    CU_RES_VIEW_FORMAT_SINT_2X16     = 0x0b, 
    CU_RES_VIEW_FORMAT_SINT_4X16     = 0x0c, 
    CU_RES_VIEW_FORMAT_UINT_1X32     = 0x0d, 
    CU_RES_VIEW_FORMAT_UINT_2X32     = 0x0e, 
    CU_RES_VIEW_FORMAT_UINT_4X32     = 0x0f, 
    CU_RES_VIEW_FORMAT_SINT_1X32     = 0x10, 
    CU_RES_VIEW_FORMAT_SINT_2X32     = 0x11, 
    CU_RES_VIEW_FORMAT_SINT_4X32     = 0x12, 
    CU_RES_VIEW_FORMAT_FLOAT_1X16    = 0x13, 
    CU_RES_VIEW_FORMAT_FLOAT_2X16    = 0x14, 
    CU_RES_VIEW_FORMAT_FLOAT_4X16    = 0x15, 
    CU_RES_VIEW_FORMAT_FLOAT_1X32    = 0x16, 
    CU_RES_VIEW_FORMAT_FLOAT_2X32    = 0x17, 
    CU_RES_VIEW_FORMAT_FLOAT_4X32    = 0x18, 
    CU_RES_VIEW_FORMAT_UNSIGNED_BC1  = 0x19, 
    CU_RES_VIEW_FORMAT_UNSIGNED_BC2  = 0x1a, 
    CU_RES_VIEW_FORMAT_UNSIGNED_BC3  = 0x1b, 
    CU_RES_VIEW_FORMAT_UNSIGNED_BC4  = 0x1c, 
    CU_RES_VIEW_FORMAT_SIGNED_BC4    = 0x1d, 
    CU_RES_VIEW_FORMAT_UNSIGNED_BC5  = 0x1e, 
    CU_RES_VIEW_FORMAT_SIGNED_BC5    = 0x1f, 
    CU_RES_VIEW_FORMAT_UNSIGNED_BC6H = 0x20, 
    CU_RES_VIEW_FORMAT_SIGNED_BC6H   = 0x21, 
    CU_RES_VIEW_FORMAT_UNSIGNED_BC7  = 0x22  
} CUresourceViewFormat;




typedef struct CUDA_RESOURCE_VIEW_DESC_st
{
    CUresourceViewFormat format;   
    size_t width;                  
    size_t height;                 
    size_t depth;                  
    unsigned int firstMipmapLevel; 
    unsigned int lastMipmapLevel;  
    unsigned int firstLayer;       
    unsigned int lastLayer;        
    unsigned int reserved[16];
} CUDA_RESOURCE_VIEW_DESC;




typedef struct CUDA_POINTER_ATTRIBUTE_P2P_TOKENS_st {
    unsigned long long p2pToken;
    unsigned int vaSpaceToken;
} CUDA_POINTER_ATTRIBUTE_P2P_TOKENS;

#line 1472 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v6.0\\include\\cuda.h"

































































































 





#line 1576 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v6.0\\include\\cuda.h"






























CUresult __stdcall cuGetErrorString(CUresult error, const char **pStr);


















CUresult __stdcall cuGetErrorName(CUresult error, const char **pStr);

 





























CUresult __stdcall cuInit(unsigned int Flags);

 



























CUresult __stdcall cuDriverGetVersion(int *driverVersion);

 





































CUresult __stdcall cuDeviceGet(CUdevice *device, int ordinal);
























CUresult __stdcall cuDeviceGetCount(int *count);



























CUresult __stdcall cuDeviceGetName(char *name, int len, CUdevice dev);


























CUresult __stdcall cuDeviceTotalMem_v2(size_t *bytes, CUdevice dev);
#line 1809 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v6.0\\include\\cuda.h"
























































































































































































CUresult __stdcall cuDeviceGetAttribute(int *pi, CUdevice_attribute attrib, CUdevice dev);

 










































































CUresult __stdcall cuDeviceGetProperties(CUdevprop *prop, CUdevice dev);
































CUresult __stdcall cuDeviceComputeCapability(int *major, int *minor, CUdevice dev);

 



































































































CUresult __stdcall cuCtxCreate_v2(CUcontext *pctx, unsigned int flags, CUdevice dev);
#line 2207 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v6.0\\include\\cuda.h"





































CUresult __stdcall cuCtxDestroy_v2(CUcontext ctx);
#line 2246 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v6.0\\include\\cuda.h"

































CUresult __stdcall cuCtxPushCurrent_v2(CUcontext ctx);
































CUresult __stdcall cuCtxPopCurrent_v2(CUcontext *pctx);

























CUresult __stdcall cuCtxSetCurrent(CUcontext ctx);


















CUresult __stdcall cuCtxGetCurrent(CUcontext *pctx);
#line 2359 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v6.0\\include\\cuda.h"



























CUresult __stdcall cuCtxGetDevice(CUdevice *device);



























CUresult __stdcall cuCtxSynchronize(void);





























































































CUresult __stdcall cuCtxSetLimit(CUlimit limit, size_t value);





































CUresult __stdcall cuCtxGetLimit(size_t *pvalue, CUlimit limit);









































CUresult __stdcall cuCtxGetCacheConfig(CUfunc_cache *pconfig);
















































CUresult __stdcall cuCtxSetCacheConfig(CUfunc_cache config);








































CUresult __stdcall cuCtxGetSharedMemConfig(CUsharedconfig *pConfig);


















































CUresult __stdcall cuCtxSetSharedMemConfig(CUsharedconfig config);
#line 2731 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v6.0\\include\\cuda.h"



































CUresult __stdcall cuCtxGetApiVersion(CUcontext ctx, unsigned int *version);





































CUresult __stdcall cuCtxGetStreamPriorityRange(int *leastPriority, int *greatestPriority);

 



















































CUresult __stdcall cuCtxAttach(CUcontext *pctx, unsigned int flags);


































CUresult __stdcall cuCtxDetach(CUcontext ctx);

 



















































CUresult __stdcall cuModuleLoad(CUmodule *module, const char *fname);



































CUresult __stdcall cuModuleLoadData(CUmodule *module, const void *image);









































CUresult __stdcall cuModuleLoadDataEx(CUmodule *module, const void *image, unsigned int numOptions, CUjit_option *options, void **optionValues);








































CUresult __stdcall cuModuleLoadFatBinary(CUmodule *module, const void *fatCubin);
























CUresult __stdcall cuModuleUnload(CUmodule hmod);





























CUresult __stdcall cuModuleGetFunction(CUfunction *hfunc, CUmodule hmod, const char *name);

































CUresult __stdcall cuModuleGetGlobal_v2(CUdeviceptr *dptr, size_t *bytes, CUmodule hmod, const char *name);
#line 3157 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v6.0\\include\\cuda.h"
































CUresult __stdcall cuModuleGetTexRef(CUtexref *pTexRef, CUmodule hmod, const char *name);






























CUresult __stdcall cuModuleGetSurfRef(CUsurfref *pSurfRef, CUmodule hmod, const char *name);








































CUresult __stdcall
cuLinkCreate(unsigned int numOptions, CUjit_option *options, void **optionValues, CUlinkState *stateOut);



































CUresult __stdcall
cuLinkAddData(CUlinkState state, CUjitInputType type, void *data, size_t size, const char *name,
    unsigned int numOptions, CUjit_option *options, void **optionValues);




































CUresult __stdcall
cuLinkAddFile(CUlinkState state, CUjitInputType type, const char *path,
    unsigned int numOptions, CUjit_option *options, void **optionValues);
























CUresult __stdcall
cuLinkComplete(CUlinkState state, void **cubinOut, size_t *sizeOut);












CUresult __stdcall
cuLinkDestroy(CUlinkState state);

#line 3382 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v6.0\\include\\cuda.h"

 











































CUresult __stdcall cuMemGetInfo_v2(size_t *free, size_t *total);
































CUresult __stdcall cuMemAlloc_v2(CUdeviceptr *dptr, size_t bytesize);




























































CUresult __stdcall cuMemAllocPitch_v2(CUdeviceptr *dptr, size_t *pPitch, size_t WidthInBytes, size_t Height, unsigned int ElementSizeBytes);




























CUresult __stdcall cuMemFree_v2(CUdeviceptr dptr);
































CUresult __stdcall cuMemGetAddressRange_v2(CUdeviceptr *pbase, size_t *psize, CUdeviceptr dptr);













































CUresult __stdcall cuMemAllocHost_v2(void **pp, size_t bytesize);
#line 3631 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v6.0\\include\\cuda.h"




























CUresult __stdcall cuMemFreeHost(void *p);

















































































CUresult __stdcall cuMemHostAlloc(void **pp, size_t bytesize, unsigned int Flags);





































CUresult __stdcall cuMemHostGetDevicePointer_v2(CUdeviceptr *pdptr, void *p, unsigned int Flags);
#line 3781 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v6.0\\include\\cuda.h"























CUresult __stdcall cuMemHostGetFlags(unsigned int *pFlags, void *p);

















































































CUresult __stdcall cuMemAllocManaged(CUdeviceptr *dptr, size_t bytesize, unsigned int flags);

#line 3889 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v6.0\\include\\cuda.h"


























CUresult __stdcall cuDeviceGetByPCIBusId(CUdevice *dev, const char *pciBusId);



























CUresult __stdcall cuDeviceGetPCIBusId(char *pciBusId, int len, CUdevice dev);









































CUresult __stdcall cuIpcGetEventHandle(CUipcEventHandle *pHandle, CUevent event);




































CUresult __stdcall cuIpcOpenEventHandle(CUevent *phEvent, CUipcEventHandle handle);




































CUresult __stdcall cuIpcGetMemHandle(CUipcMemHandle *pHandle, CUdeviceptr dptr);


















































CUresult __stdcall cuIpcOpenMemHandle(CUdeviceptr *pdptr, CUipcMemHandle handle, unsigned int Flags);






























CUresult __stdcall cuIpcCloseMemHandle(CUdeviceptr dptr);

#line 4144 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v6.0\\include\\cuda.h"




























































CUresult __stdcall cuMemHostRegister(void *p, size_t bytesize, unsigned int Flags);























CUresult __stdcall cuMemHostUnregister(void *p);



































CUresult __stdcall cuMemcpy(CUdeviceptr dst, CUdeviceptr src, size_t ByteCount);
































CUresult __stdcall cuMemcpyPeer(CUdeviceptr dstDevice, CUcontext dstContext, CUdeviceptr srcDevice, CUcontext srcContext, size_t ByteCount);

#line 4300 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v6.0\\include\\cuda.h"

































CUresult __stdcall cuMemcpyHtoD_v2(CUdeviceptr dstDevice, const void *srcHost, size_t ByteCount);
































CUresult __stdcall cuMemcpyDtoH_v2(void *dstHost, CUdeviceptr srcDevice, size_t ByteCount);
































CUresult __stdcall cuMemcpyDtoD_v2(CUdeviceptr dstDevice, CUdeviceptr srcDevice, size_t ByteCount);

































CUresult __stdcall cuMemcpyDtoA_v2(CUarray dstArray, size_t dstOffset, CUdeviceptr srcDevice, size_t ByteCount);



































CUresult __stdcall cuMemcpyAtoD_v2(CUdeviceptr dstDevice, CUarray srcArray, size_t srcOffset, size_t ByteCount);

































CUresult __stdcall cuMemcpyHtoA_v2(CUarray dstArray, size_t dstOffset, const void *srcHost, size_t ByteCount);

































CUresult __stdcall cuMemcpyAtoH_v2(void *dstHost, CUarray srcArray, size_t srcOffset, size_t ByteCount);





































CUresult __stdcall cuMemcpyAtoA_v2(CUarray dstArray, size_t dstOffset, CUarray srcArray, size_t srcOffset, size_t ByteCount);































































































































































CUresult __stdcall cuMemcpy2D_v2(const CUDA_MEMCPY2D *pCopy);





























































































































































CUresult __stdcall cuMemcpy2DUnaligned_v2(const CUDA_MEMCPY2D *pCopy);






































































































































































CUresult __stdcall cuMemcpy3D_v2(const CUDA_MEMCPY3D *pCopy);
#line 5062 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v6.0\\include\\cuda.h"





























CUresult __stdcall cuMemcpy3DPeer(const CUDA_MEMCPY3D_PEER *pCopy);








































CUresult __stdcall cuMemcpyAsync(CUdeviceptr dst, CUdeviceptr src, size_t ByteCount, CUstream hStream);






























CUresult __stdcall cuMemcpyPeerAsync(CUdeviceptr dstDevice, CUcontext dstContext, CUdeviceptr srcDevice, CUcontext srcContext, size_t ByteCount, CUstream hStream);
#line 5165 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v6.0\\include\\cuda.h"









































CUresult __stdcall cuMemcpyHtoDAsync_v2(CUdeviceptr dstDevice, const void *srcHost, size_t ByteCount, CUstream hStream);








































CUresult __stdcall cuMemcpyDtoHAsync_v2(void *dstHost, CUdeviceptr srcDevice, size_t ByteCount, CUstream hStream);





































CUresult __stdcall cuMemcpyDtoDAsync_v2(CUdeviceptr dstDevice, CUdeviceptr srcDevice, size_t ByteCount, CUstream hStream);










































CUresult __stdcall cuMemcpyHtoAAsync_v2(CUarray dstArray, size_t dstOffset, const void *srcHost, size_t ByteCount, CUstream hStream);










































CUresult __stdcall cuMemcpyAtoHAsync_v2(void *dstHost, CUarray srcArray, size_t srcOffset, size_t ByteCount, CUstream hStream);











































































































































































CUresult __stdcall cuMemcpy2DAsync_v2(const CUDA_MEMCPY2D *pCopy, CUstream hStream);















































































































































































CUresult __stdcall cuMemcpy3DAsync_v2(const CUDA_MEMCPY3D *pCopy, CUstream hStream);
#line 5721 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v6.0\\include\\cuda.h"
























CUresult __stdcall cuMemcpy3DPeerAsync(const CUDA_MEMCPY3D_PEER *pCopy, CUstream hStream);
#line 5747 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v6.0\\include\\cuda.h"




































CUresult __stdcall cuMemsetD8_v2(CUdeviceptr dstDevice, unsigned char uc, size_t N);



































CUresult __stdcall cuMemsetD16_v2(CUdeviceptr dstDevice, unsigned short us, size_t N);



































CUresult __stdcall cuMemsetD32_v2(CUdeviceptr dstDevice, unsigned int ui, size_t N);








































CUresult __stdcall cuMemsetD2D8_v2(CUdeviceptr dstDevice, size_t dstPitch, unsigned char uc, size_t Width, size_t Height);









































CUresult __stdcall cuMemsetD2D16_v2(CUdeviceptr dstDevice, size_t dstPitch, unsigned short us, size_t Width, size_t Height);









































CUresult __stdcall cuMemsetD2D32_v2(CUdeviceptr dstDevice, size_t dstPitch, unsigned int ui, size_t Width, size_t Height);





































CUresult __stdcall cuMemsetD8Async(CUdeviceptr dstDevice, unsigned char uc, size_t N, CUstream hStream);





































CUresult __stdcall cuMemsetD16Async(CUdeviceptr dstDevice, unsigned short us, size_t N, CUstream hStream);




































CUresult __stdcall cuMemsetD32Async(CUdeviceptr dstDevice, unsigned int ui, size_t N, CUstream hStream);










































CUresult __stdcall cuMemsetD2D8Async(CUdeviceptr dstDevice, size_t dstPitch, unsigned char uc, size_t Width, size_t Height, CUstream hStream);











































CUresult __stdcall cuMemsetD2D16Async(CUdeviceptr dstDevice, size_t dstPitch, unsigned short us, size_t Width, size_t Height, CUstream hStream);











































CUresult __stdcall cuMemsetD2D32Async(CUdeviceptr dstDevice, size_t dstPitch, unsigned int ui, size_t Width, size_t Height, CUstream hStream);






































































































CUresult __stdcall cuArrayCreate_v2(CUarray *pHandle, const CUDA_ARRAY_DESCRIPTOR *pAllocateArray);
































CUresult __stdcall cuArrayGetDescriptor_v2(CUDA_ARRAY_DESCRIPTOR *pArrayDescriptor, CUarray hArray);
#line 6362 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v6.0\\include\\cuda.h"





























CUresult __stdcall cuArrayDestroy(CUarray hArray);



















































































































































































CUresult __stdcall cuArray3DCreate_v2(CUarray *pHandle, const CUDA_ARRAY3D_DESCRIPTOR *pAllocateArray);



































CUresult __stdcall cuArray3DGetDescriptor_v2(CUDA_ARRAY3D_DESCRIPTOR *pArrayDescriptor, CUarray hArray);
#line 6609 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v6.0\\include\\cuda.h"





























































































































CUresult __stdcall cuMipmappedArrayCreate(CUmipmappedArray *pHandle, const CUDA_ARRAY3D_DESCRIPTOR *pMipmappedArrayDesc, unsigned int numMipmapLevels);

























CUresult __stdcall cuMipmappedArrayGetLevel(CUarray *pLevelArray, CUmipmappedArray hMipmappedArray, unsigned int level);



















CUresult __stdcall cuMipmappedArrayDestroy(CUmipmappedArray hMipmappedArray);

#line 6783 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v6.0\\include\\cuda.h"

 

















































































































































































































































CUresult __stdcall cuPointerGetAttribute(void *data, CUpointer_attribute attribute, CUdeviceptr ptr);
#line 7028 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v6.0\\include\\cuda.h"









































CUresult __stdcall cuPointerSetAttribute(const void *value, CUpointer_attribute attribute, CUdeviceptr ptr);
#line 7071 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v6.0\\include\\cuda.h"

 












































CUresult __stdcall cuStreamCreate(CUstream *phStream, unsigned int Flags);















































CUresult __stdcall cuStreamCreateWithPriority(CUstream *phStream, unsigned int flags, int priority);





























CUresult __stdcall cuStreamGetPriority(CUstream hStream, int *priority);


























CUresult __stdcall cuStreamGetFlags(CUstream hStream, unsigned int *flags);








































CUresult __stdcall cuStreamWaitEvent(CUstream hStream, CUevent hEvent, unsigned int Flags);






































































CUresult __stdcall cuStreamAddCallback(CUstream hStream, CUstreamCallback callback, void *userData, unsigned int flags);











































































CUresult __stdcall cuStreamAttachMemAsync(CUstream hStream, CUdeviceptr dptr, size_t length, unsigned int flags);

#line 7413 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v6.0\\include\\cuda.h"




























CUresult __stdcall cuStreamQuery(CUstream hStream);


























CUresult __stdcall cuStreamSynchronize(CUstream hStream);




























CUresult __stdcall cuStreamDestroy_v2(CUstream hStream);
#line 7499 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v6.0\\include\\cuda.h"

 



















































CUresult __stdcall cuEventCreate(CUevent *phEvent, unsigned int Flags);



































CUresult __stdcall cuEventRecord(CUevent hEvent, CUstream hStream);

































CUresult __stdcall cuEventQuery(CUevent hEvent);

































CUresult __stdcall cuEventSynchronize(CUevent hEvent);




























CUresult __stdcall cuEventDestroy_v2(CUevent hEvent);
#line 7687 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v6.0\\include\\cuda.h"










































CUresult __stdcall cuEventElapsedTime(float *pMilliseconds, CUevent hStart, CUevent hEnd);

 
































































CUresult __stdcall cuFuncGetAttribute(int *pi, CUfunction_attribute attrib, CUfunction hfunc);










































CUresult __stdcall cuFuncSetCacheConfig(CUfunction hfunc, CUfunc_cache config);



















































CUresult __stdcall cuFuncSetSharedMemConfig(CUfunction hfunc, CUsharedconfig config);
#line 7893 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v6.0\\include\\cuda.h"



















































































































CUresult __stdcall cuLaunchKernel(CUfunction f,
                                unsigned int gridDimX,
                                unsigned int gridDimY,
                                unsigned int gridDimZ,
                                unsigned int blockDimX,
                                unsigned int blockDimY,
                                unsigned int blockDimZ,
                                unsigned int sharedMemBytes,
                                CUstream hStream,
                                void **kernelParams,
                                void **extra);
#line 8020 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v6.0\\include\\cuda.h"

 















































CUresult __stdcall cuFuncSetBlockShape(CUfunction hfunc, int x, int y, int z);

































CUresult __stdcall cuFuncSetSharedSize(CUfunction hfunc, unsigned int bytes);































CUresult __stdcall cuParamSetSize(CUfunction hfunc, unsigned int numbytes);
































CUresult __stdcall cuParamSeti(CUfunction hfunc, int offset, unsigned int value);
































CUresult __stdcall cuParamSetf(CUfunction hfunc, int offset, float value);


































CUresult __stdcall cuParamSetv(CUfunction hfunc, int offset, void *ptr, unsigned int numbytes);




































CUresult __stdcall cuLaunch(CUfunction f);






































CUresult __stdcall cuLaunchGrid(CUfunction f, int grid_width, int grid_height);

















































CUresult __stdcall cuLaunchGridAsync(CUfunction f, int grid_width, int grid_height, CUstream hStream);
























CUresult __stdcall cuParamSetTexRef(CUfunction hfunc, int texunit, CUtexref hTexRef);
 








































CUresult __stdcall cuTexRefSetArray(CUtexref hTexRef, CUarray hArray, unsigned int Flags);


























CUresult __stdcall cuTexRefSetMipmappedArray(CUtexref hTexRef, CUmipmappedArray hMipmappedArray, unsigned int Flags);











































CUresult __stdcall cuTexRefSetAddress_v2(size_t *ByteOffset, CUtexref hTexRef, CUdeviceptr dptr, size_t bytes);



















































CUresult __stdcall cuTexRefSetAddress2D_v3(CUtexref hTexRef, const CUDA_ARRAY_DESCRIPTOR *desc, CUdeviceptr dptr, size_t Pitch);
#line 8554 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v6.0\\include\\cuda.h"



























CUresult __stdcall cuTexRefSetFormat(CUtexref hTexRef, CUarray_format fmt, int NumPackedComponents);







































CUresult __stdcall cuTexRefSetAddressMode(CUtexref hTexRef, int dim, CUaddress_mode am);
































CUresult __stdcall cuTexRefSetFilterMode(CUtexref hTexRef, CUfilter_mode fm);
































CUresult __stdcall cuTexRefSetMipmapFilterMode(CUtexref hTexRef, CUfilter_mode fm);

























CUresult __stdcall cuTexRefSetMipmapLevelBias(CUtexref hTexRef, float bias);



























CUresult __stdcall cuTexRefSetMipmapLevelClamp(CUtexref hTexRef, float minMipmapLevelClamp, float maxMipmapLevelClamp);

























CUresult __stdcall cuTexRefSetMaxAnisotropy(CUtexref hTexRef, unsigned int maxAniso);


































CUresult __stdcall cuTexRefSetFlags(CUtexref hTexRef, unsigned int Flags);

























CUresult __stdcall cuTexRefGetAddress_v2(CUdeviceptr *pdptr, CUtexref hTexRef);
#line 8830 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v6.0\\include\\cuda.h"
























CUresult __stdcall cuTexRefGetArray(CUarray *phArray, CUtexref hTexRef);
























CUresult __stdcall cuTexRefGetMipmappedArray(CUmipmappedArray *phMipmappedArray, CUtexref hTexRef);

























CUresult __stdcall cuTexRefGetAddressMode(CUaddress_mode *pam, CUtexref hTexRef, int dim);























CUresult __stdcall cuTexRefGetFilterMode(CUfilter_mode *pfm, CUtexref hTexRef);

























CUresult __stdcall cuTexRefGetFormat(CUarray_format *pFormat, int *pNumChannels, CUtexref hTexRef);























CUresult __stdcall cuTexRefGetMipmapFilterMode(CUfilter_mode *pfm, CUtexref hTexRef);























CUresult __stdcall cuTexRefGetMipmapLevelBias(float *pbias, CUtexref hTexRef);
























CUresult __stdcall cuTexRefGetMipmapLevelClamp(float *pminMipmapLevelClamp, float *pmaxMipmapLevelClamp, CUtexref hTexRef);























CUresult __stdcall cuTexRefGetMaxAnisotropy(int *pmaxAniso, CUtexref hTexRef);






















CUresult __stdcall cuTexRefGetFlags(unsigned int *pFlags, CUtexref hTexRef);

 




































CUresult __stdcall cuTexRefCreate(CUtexref *pTexRef);



















CUresult __stdcall cuTexRefDestroy(CUtexref hTexRef);

 




































CUresult __stdcall cuSurfRefSetArray(CUsurfref hSurfRef, CUarray hArray, unsigned int Flags);




















CUresult __stdcall cuSurfRefGetArray(CUarray *phArray, CUsurfref hSurfRef);

 

























































































































































































































CUresult __stdcall cuTexObjectCreate(CUtexObject *pTexObject, const CUDA_RESOURCE_DESC *pResDesc, const CUDA_TEXTURE_DESC *pTexDesc, const CUDA_RESOURCE_VIEW_DESC *pResViewDesc);

















CUresult __stdcall cuTexObjectDestroy(CUtexObject texObject);


















CUresult __stdcall cuTexObjectGetResourceDesc(CUDA_RESOURCE_DESC *pResDesc, CUtexObject texObject);


















CUresult __stdcall cuTexObjectGetTextureDesc(CUDA_TEXTURE_DESC *pTexDesc, CUtexObject texObject);



















CUresult __stdcall cuTexObjectGetResourceViewDesc(CUDA_RESOURCE_VIEW_DESC *pResViewDesc, CUtexObject texObject);

 




































CUresult __stdcall cuSurfObjectCreate(CUsurfObject *pSurfObject, const CUDA_RESOURCE_DESC *pResDesc);

















CUresult __stdcall cuSurfObjectDestroy(CUsurfObject surfObject);


















CUresult __stdcall cuSurfObjectGetResourceDesc(CUDA_RESOURCE_DESC *pResDesc, CUsurfObject surfObject);

 
#line 9570 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v6.0\\include\\cuda.h"













    
























CUresult __stdcall cuDeviceCanAccessPeer(int *canAccessPeer, CUdevice dev, CUdevice peerDev);














































CUresult __stdcall cuCtxEnablePeerAccess(CUcontext peerContext, unsigned int Flags);
























CUresult __stdcall cuCtxDisablePeerAccess(CUcontext peerContext);

 
#line 9684 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v6.0\\include\\cuda.h"








































CUresult __stdcall cuGraphicsUnregisterResource(CUgraphicsResource resource);





































CUresult __stdcall cuGraphicsSubResourceGetMappedArray(CUarray *pArray, CUgraphicsResource resource, unsigned int arrayIndex, unsigned int mipLevel);






























CUresult __stdcall cuGraphicsResourceGetMappedMipmappedArray(CUmipmappedArray *pMipmappedArray, CUgraphicsResource resource);

#line 9796 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v6.0\\include\\cuda.h"

































CUresult __stdcall cuGraphicsResourceGetMappedPointer_v2(CUdeviceptr *pDevPtr, size_t *pSize, CUgraphicsResource resource);
#line 9831 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v6.0\\include\\cuda.h"







































CUresult __stdcall cuGraphicsResourceSetMapFlags(CUgraphicsResource resource, unsigned int flags);






































CUresult __stdcall cuGraphicsMapResources(unsigned int count, CUgraphicsResource *resources, CUstream hStream);



































CUresult __stdcall cuGraphicsUnmapResources(unsigned int count, CUgraphicsResource *resources, CUstream hStream);

 

CUresult __stdcall cuGetExportTable(const void **ppExportTable, const CUuuid *pExportTableId);





















































#line 10004 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v6.0\\include\\cuda.h"



#line 10008 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v6.0\\include\\cuda.h"














#line 10023 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v6.0\\include\\cuda.h"
























































































































#line 10144 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v6.0\\include\\cuda.h"






#line 10151 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v6.0\\include\\cuda.h"










#line 10162 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v6.0\\include\\cuda.h"


}
#line 10166 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v6.0\\include\\cuda.h"



#line 10170 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v6.0\\include\\cuda.h"


#line 7 "c:\\users\\blake\\documents\\github\\pct-reconstruction\\pCT_Reconstruction.h"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v6.0\\include\\cuda_runtime.h"





























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1343 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v6.0\\include\\cuda_runtime.h"

#line 8 "c:\\users\\blake\\documents\\github\\pct-reconstruction\\pCT_Reconstruction.h"
#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v6.0\\include\\device_launch_parameters.h"
















































































































#line 114 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v6.0\\include\\device_launch_parameters.h"
#line 9 "c:\\users\\blake\\documents\\github\\pct-reconstruction\\pCT_Reconstruction.h"

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\algorithm"

#pragma once



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\memory"

#pragma once



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xmemory"

#pragma once




#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\new"

#pragma once



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\exception"

#pragma once




#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xstddef"

#pragma once





 
  
  
  
 #line 13 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xstddef"

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\cstddef"

#pragma once










 
#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\cstddef"

 
namespace std {
using :: ptrdiff_t; using :: size_t;
}
 #line 21 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\cstddef"

#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\cstddef"





#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xstddef"

 #pragma pack(push,8)
 #pragma warning(push,3)

namespace std {
		
 

 
 
 
 
 

 
 

 



  
  

   
   

 
























#line 68 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xstddef"

		


		
 
 

		

template<bool _Test,
	class _Ty1,
	class _Ty2>
	class _If
	{	
public:
	typedef _Ty2 _Type;
	};

template<class _Ty1,
	class _Ty2>
	class _If<true, _Ty1, _Ty2>
	{	
public:
	typedef _Ty1 _Type;
	};

 
  

	namespace tr1 {
typedef char (&_No)[1];
typedef char (&_Yes)[2];
	}	
 #line 103 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xstddef"

 

  

struct _Bool_struct
	{	
	int _Member;
	};

  









   

typedef int _Bool_struct::* _Bool_type;
  #line 127 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xstddef"

 #line 129 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xstddef"

		
		
template<class _Arg,
	class _Result>
	struct unary_function
	{	
	typedef _Arg argument_type;
	typedef _Result result_type;
	};

		
template<class _Arg1,
	class _Arg2,
	class _Result>
	struct binary_function
	{	
	typedef _Arg1 first_argument_type;
	typedef _Arg2 second_argument_type;
	typedef _Result result_type;
	};
}


 #pragma warning(pop)
 #pragma pack(pop)

#line 157 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xstddef"
#line 158 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xstddef"





#line 8 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\exception"

 #pragma pack(push,8)
 #pragma warning(push,3)










namespace std {

  


  



  



}

 

 #line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\eh.h"











#pragma once

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"














 








































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\eh.h"








#pragma pack(push,8)







typedef void (__cdecl *terminate_function)();
typedef void (__cdecl *terminate_handler)();
typedef void (__cdecl *unexpected_function)();
typedef void (__cdecl *unexpected_handler)();





#line 41 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\eh.h"








struct _EXCEPTION_POINTERS;

typedef void (__cdecl *_se_translator_function)(unsigned int, struct _EXCEPTION_POINTERS*);
#line 53 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\eh.h"

__declspec(dllimport) __declspec(noreturn) void __cdecl terminate(void);
__declspec(dllimport) void __cdecl unexpected(void);

__declspec(dllimport) int __cdecl _is_exception_typeof(  const type_info &_Type,   struct _EXCEPTION_POINTERS * _ExceptionPtr);



__declspec(dllimport) terminate_function __cdecl set_terminate(   terminate_function _NewPtFunc);
extern "C" __declspec(dllimport) terminate_function __cdecl _get_terminate(void);
__declspec(dllimport) unexpected_function __cdecl set_unexpected(   unexpected_function _NewPtFunc);
extern "C" __declspec(dllimport) unexpected_function __cdecl _get_unexpected(void);
#line 66 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\eh.h"



__declspec(dllimport) _se_translator_function __cdecl _set_se_translator(   _se_translator_function _NewPtFunc);
#line 71 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\eh.h"
__declspec(dllimport) bool __cdecl __uncaught_exception();









#pragma pack(pop)
#line 83 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\eh.h"
#line 84 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\eh.h"
#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\exception"
 #line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\malloc.h"














#pragma once




#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"














 








































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 21 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\malloc.h"





#pragma pack(push,8)


extern "C" {
#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\malloc.h"







#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\malloc.h"





#line 45 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\malloc.h"













typedef struct _heapinfo {
        int * _pentry;
        size_t _size;
        int _useflag;
        } _HEAPINFO;

#line 65 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\malloc.h"



































#line 101 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\malloc.h"







































#line 141 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\malloc.h"

__declspec(dllimport) int     __cdecl _resetstkoflw (void);



__declspec(dllimport) unsigned long __cdecl _set_malloc_crt_max_wait(  unsigned long _NewValue);








#line 156 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\malloc.h"

  __declspec(dllimport) void *  __cdecl _expand( void * _Memory,   size_t _NewSize);
 __declspec(dllimport) size_t  __cdecl _msize( void * _Memory);




#line 164 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\malloc.h"

 void *          __cdecl _alloca(  size_t _Size);
 __declspec(dllimport) int     __cdecl _heapadd(  void * _Memory,   size_t _Size);
 __declspec(dllimport) int     __cdecl _heapchk(void);
 __declspec(dllimport) int     __cdecl _heapmin(void);
__declspec(dllimport) int     __cdecl _heapset(  unsigned int _Fill);
__declspec(dllimport)  int     __cdecl _heapwalk(   _HEAPINFO * _EntryInfo);
__declspec(dllimport) size_t  __cdecl _heapused(size_t * _Used, size_t * _Commit);

__declspec(dllimport) intptr_t __cdecl _get_heap_handle(void);







#line 182 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\malloc.h"

#line 184 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\malloc.h"

#line 186 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\malloc.h"

typedef char __static_assert_t[ (sizeof(unsigned int) <= 16) ];


#pragma warning(push)
#pragma warning(disable:6540)
__inline void *_MarkAllocaS(   void *_Ptr, unsigned int _Marker)
{
    if (_Ptr)
    {
        *((unsigned int*)_Ptr) = _Marker;
        _Ptr = (char*)_Ptr + 16;
    }
    return _Ptr;
}
#pragma warning(pop)
#line 203 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\malloc.h"








#line 212 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\malloc.h"






#line 219 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\malloc.h"








__declspec(noalias) __inline void __cdecl _freea( void * _Memory)
{
    unsigned int _Marker;
    if (_Memory)
    {
        _Memory = (char*)_Memory - 16;
        _Marker = *(unsigned int *)_Memory;
        if (_Marker == 0xDDDD)
        {
            free(_Memory);
        }





#line 244 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\malloc.h"
    }
}
#line 247 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\malloc.h"
#line 248 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\malloc.h"




#line 253 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\malloc.h"

#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\malloc.h"






















}
#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\malloc.h"

#pragma pack(pop)

#line 283 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\malloc.h"
#line 40 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\exception"
 

 

#line 45 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\exception"

 



































#line 83 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\exception"

 namespace std {





 
#line 92 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\exception"

class __declspec(dllimport) exception
    {   
public:
      exception();
     explicit  exception(const char * const &);
      exception(const char * const &, int);
      exception(const exception&);
     exception&  operator=(const exception&);
     virtual  ~exception();
     virtual const char *  what() const;

private:
     void  _Copy_str(const char *);
     void  _Tidy();

    const char * _Mywhat;
    bool _Mydofree;
    };

















































































using ::set_terminate; using ::terminate_handler; using ::terminate; using ::set_unexpected; using ::unexpected_handler; using ::unexpected;

typedef void (__cdecl *_Prhand)(const exception&);

__declspec(dllimport) bool __cdecl uncaught_exception();

}

 










































































































#line 308 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\exception"


namespace std {


#line 314 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\exception"

		
class bad_exception : public exception
	{	
public:
	 bad_exception(const char *_Message = "bad exception")
		throw ()
		: exception(_Message)
		{	
		}

	virtual  ~bad_exception() throw ()
		{	
		}

 





#line 336 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\exception"

	};

		
class bad_alloc : public exception
	{	
public:
	 bad_alloc(const char *_Message) throw ()
		: exception(_Message)
		{	
		}

	 bad_alloc() throw ()
		: exception("bad allocation", 1)
		{	
		}

	virtual  ~bad_alloc() throw ()
		{	
		}

 





#line 364 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\exception"

	};


		
class bad_array_new_length
	: public bad_alloc
	{	
public:

	bad_array_new_length() throw ()
		: bad_alloc("bad array new length")
		{	
		}
	};
#line 380 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\exception"


}









#line 393 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\exception"

__declspec(dllimport) void __cdecl __ExceptionPtrCreate(  void* );
__declspec(dllimport) void __cdecl __ExceptionPtrDestroy(   void* );
__declspec(dllimport) void __cdecl __ExceptionPtrCopy(  void*,   const void* );
__declspec(dllimport) void __cdecl __ExceptionPtrAssign(   void*,   const void* );
__declspec(dllimport) bool __cdecl __ExceptionPtrCompare(  const void*,   const void*);

__declspec(dllimport) void __cdecl __ExceptionPtrCurrentException(  void*);
__declspec(dllimport) void __cdecl __ExceptionPtrRethrow(  const void*);
__declspec(dllimport) void __cdecl __ExceptionPtrCopyException(   void*,   const void*,   const void*);

namespace std {


typedef ::std:: nullptr_t _Null_type;


#line 411 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\exception"

class _Exception_ptr
	{
public:
	_Exception_ptr()
		{
		__ExceptionPtrCreate(this);
		}
	_Exception_ptr(_Null_type)
		{
		__ExceptionPtrCreate(this);
		}
	~_Exception_ptr()
		{
		__ExceptionPtrDestroy(this);
		}
	_Exception_ptr(  const _Exception_ptr& _Rhs)
		{
		__ExceptionPtrCopy(this, const_cast<_Exception_ptr*>(&_Rhs));
		}
	_Exception_ptr& operator=(  const _Exception_ptr& _Rhs)
		{
		__ExceptionPtrAssign(this, const_cast<_Exception_ptr*>(&_Rhs));
		return *this;
		}
	_Exception_ptr& operator=(_Null_type)
		{
		_Exception_ptr _Ptr;
		__ExceptionPtrAssign(this, &_Ptr);
		return *this;
		}

	void _RethrowException() const
		{
		__ExceptionPtrRethrow(const_cast<_Exception_ptr*>(this));
		}

	static _Exception_ptr _Current_exception()
		{
		_Exception_ptr _Retval;
		__ExceptionPtrCurrentException(&_Retval);
		return _Retval;
		}
	static _Exception_ptr _Copy_exception(  void* _Except,   const void* _Ptr)
		{
		_Exception_ptr _Retval = 0;
		if (!_Ptr)
			{
			
			return _Retval;
			}
		__ExceptionPtrCopyException(&_Retval, _Except, _Ptr);
		return _Retval;
		}
private:
	void* _Data1;
	void* _Data2;
	};

inline bool operator==(  const _Exception_ptr& _Lhs,   const _Exception_ptr& _Rhs)
	{
	return __ExceptionPtrCompare(const_cast<_Exception_ptr*>(&_Lhs),const_cast<_Exception_ptr*>(&_Rhs));
	}

inline bool operator==(_Null_type,   const _Exception_ptr& _Rhs)
	{
	_Exception_ptr _Ptr;
	return __ExceptionPtrCompare(&_Ptr,const_cast<_Exception_ptr*>(&_Rhs));
	}

inline bool operator==(  const _Exception_ptr& _Lhs, _Null_type)
	{
	return operator==(0,_Lhs);
	}

typedef _Exception_ptr exception_ptr;

inline exception_ptr current_exception()
	{
	return _Exception_ptr::_Current_exception();
	}

inline void rethrow_exception(  exception_ptr _P)
	{
	_P._RethrowException();
	}

template <class _E> void *__GetExceptionInfo(_E);

template<class _E> exception_ptr copy_exception(_E _Except)
	{
	return _Exception_ptr::_Copy_exception(&_Except, __GetExceptionInfo(_Except));
	}

}







 #pragma warning(pop)
 #pragma pack(pop)

#line 517 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\exception"
#line 518 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\exception"





#line 7 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\new"

 #pragma pack(push,8)
 #pragma warning(push,3)
 

  








#line 22 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\new"

namespace std {

		
 




typedef void (__cdecl * new_handler) ();
#line 33 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\new"
 #line 34 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\new"

 
struct nothrow_t
	{	
	};

extern const nothrow_t nothrow;	
 #line 42 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\new"

		
__declspec(dllimport) new_handler __cdecl set_new_handler(   new_handler)
	throw ();	
}

		
void __cdecl operator delete(void *) throw ();
#pragma warning (suppress: 4985)
 void *__cdecl operator new(size_t _Size) throw (...);

 
  
inline void *__cdecl operator new(size_t, void *_Where) throw ()
	{	
	return (_Where);
	}

inline void __cdecl operator delete(void *, void *) throw ()
	{	
	}
 #line 64 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\new"

 
  
inline void *__cdecl operator new[](size_t, void *_Where) throw ()
	{	
	return (_Where);
	}

inline void __cdecl operator delete[](void *, void *) throw ()
	{	
	}
 #line 76 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\new"

void __cdecl operator delete[](void *) throw ();	

 void *__cdecl operator new[](size_t _Size)
	throw (...);	

 
  
 void *__cdecl operator new(size_t _Size, const ::std:: nothrow_t&)
	throw ();

 void *__cdecl operator new[](size_t _Size, const ::std:: nothrow_t&)
	throw ();	

void __cdecl operator delete(void *, const ::std:: nothrow_t&)
	throw ();	

void __cdecl operator delete[](void *, const ::std:: nothrow_t&)
	throw ();	
 #line 96 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\new"


 
using ::std:: new_handler;
 #line 101 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\new"

 
 #pragma warning(pop)
 #pragma pack(pop)

#line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\new"
#line 108 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\new"





#line 8 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xmemory"
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xutility"

#pragma once



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\climits"

#pragma once





#line 9 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\climits"





#line 7 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xutility"

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\utility"

#pragma once




#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\iosfwd"

#pragma once



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\cstdio"

#pragma once










 #line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\stdio.h"














#pragma once




#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"














 








































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 21 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\stdio.h"





#pragma pack(push,8)


extern "C" {
#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\stdio.h"

























struct _iobuf {
        char *_ptr;
        int   _cnt;
        char *_base;
        int   _flag;
        int   _file;
        int   _charbuf;
        int   _bufsiz;
        char *_tmpfname;
        };
typedef struct _iobuf FILE;

#line 69 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\stdio.h"










#line 80 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\stdio.h"













#line 94 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\stdio.h"





















#line 116 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\stdio.h"













__declspec(dllimport) FILE * __cdecl __iob_func(void);
#line 131 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\stdio.h"










#line 142 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\stdio.h"



typedef __int64 fpos_t;




#line 151 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\stdio.h"
#line 152 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\stdio.h"


#line 155 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\stdio.h"






#line 162 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\stdio.h"
























 __declspec(dllimport) int __cdecl _filbuf(   FILE * _File );
 __declspec(dllimport) int __cdecl _flsbuf(  int _Ch,    FILE * _File);




 __declspec(dllimport) FILE * __cdecl _fsopen(   const char * _Filename,    const char * _Mode,   int _ShFlag);
#line 194 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\stdio.h"

__declspec(dllimport) void __cdecl clearerr(   FILE * _File);

 __declspec(dllimport) errno_t __cdecl clearerr_s(   FILE * _File );
#line 199 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\stdio.h"
 __declspec(dllimport) int __cdecl fclose(   FILE * _File);
 __declspec(dllimport) int __cdecl _fcloseall(void);




 __declspec(dllimport) FILE * __cdecl _fdopen(  int _FileHandle,    const char * _Mode);
#line 207 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\stdio.h"

 __declspec(dllimport) int __cdecl feof(  FILE * _File);
 __declspec(dllimport) int __cdecl ferror(  FILE * _File);
 __declspec(dllimport) int __cdecl fflush(   FILE * _File);
 __declspec(dllimport) int __cdecl fgetc(   FILE * _File);
 __declspec(dllimport) int __cdecl _fgetchar(void);
 __declspec(dllimport) int __cdecl fgetpos(   FILE * _File ,   fpos_t * _Pos);
 __declspec(dllimport) char * __cdecl fgets(    char * _Buf,   int _MaxCount,    FILE * _File);




 __declspec(dllimport) int __cdecl _fileno(  FILE * _File);
#line 221 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\stdio.h"




#line 226 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\stdio.h"

 __declspec(dllimport) char * __cdecl _tempnam(   const char * _DirName,    const char * _FilePrefix);



#line 232 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\stdio.h"

 __declspec(dllimport) int __cdecl _flushall(void);
  __declspec(dllimport) FILE * __cdecl fopen(   const char * _Filename,    const char * _Mode);

 __declspec(dllimport) errno_t __cdecl fopen_s(     FILE ** _File,    const char * _Filename,    const char * _Mode);
#line 238 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\stdio.h"
 __declspec(dllimport) int __cdecl fprintf(   FILE * _File,     const char * _Format, ...);

 __declspec(dllimport) int __cdecl fprintf_s(   FILE * _File,     const char * _Format, ...);
#line 242 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\stdio.h"
 __declspec(dllimport) int __cdecl fputc(  int _Ch,    FILE * _File);
 __declspec(dllimport) int __cdecl _fputchar(  int _Ch);
 __declspec(dllimport) int __cdecl fputs(   const char * _Str,    FILE * _File);
 __declspec(dllimport) size_t __cdecl fread(  void * _DstBuf,   size_t _ElementSize,   size_t _Count,    FILE * _File);

 __declspec(dllimport) size_t __cdecl fread_s(  void * _DstBuf,   size_t _DstSize,   size_t _ElementSize,   size_t _Count,    FILE * _File);
#line 249 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\stdio.h"
  __declspec(dllimport) FILE * __cdecl freopen(   const char * _Filename,    const char * _Mode,    FILE * _File);

 __declspec(dllimport) errno_t __cdecl freopen_s(     FILE ** _File,    const char * _Filename,    const char * _Mode,    FILE * _OldFile);
#line 253 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\stdio.h"
  __declspec(dllimport) int __cdecl fscanf(   FILE * _File,     const char * _Format, ...);
  __declspec(dllimport) int __cdecl _fscanf_l(   FILE * _File,     const char * _Format,    _locale_t _Locale, ...);
#pragma warning(push)
#pragma warning(disable:6530)

 __declspec(dllimport) int __cdecl fscanf_s(   FILE * _File,     const char * _Format, ...);
#line 260 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\stdio.h"
 __declspec(dllimport) int __cdecl _fscanf_s_l(   FILE * _File,     const char * _Format,    _locale_t _Locale, ...);
#pragma warning(pop)
 __declspec(dllimport) int __cdecl fsetpos(   FILE * _File,   const fpos_t * _Pos);
 __declspec(dllimport) int __cdecl fseek(   FILE * _File,   long _Offset,   int _Origin);
 __declspec(dllimport) long __cdecl ftell(   FILE * _File);

 __declspec(dllimport) int __cdecl _fseeki64(   FILE * _File,   __int64 _Offset,   int _Origin);
 __declspec(dllimport) __int64 __cdecl _ftelli64(   FILE * _File);

 __declspec(dllimport) size_t __cdecl fwrite(   const void * _Str,   size_t _Size,   size_t _Count,    FILE * _File);
 __declspec(dllimport) int __cdecl getc(   FILE * _File);
 __declspec(dllimport) int __cdecl getchar(void);
 __declspec(dllimport) int __cdecl _getmaxstdio(void);

__declspec(dllimport) char * __cdecl gets_s(    char * _Buf,   rsize_t _Size);
#line 276 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\stdio.h"
extern "C++" { template <size_t _Size> inline char * __cdecl gets_s(char (&_Buffer)[_Size]) throw() { return gets_s(_Buffer, _Size); } }
 __declspec(dllimport) char * __cdecl gets(  char *_Buffer);
 int __cdecl _getw(   FILE * _File);




 __declspec(dllimport) int __cdecl _pclose(   FILE * _File);
 __declspec(dllimport) FILE * __cdecl _popen(   const char * _Command,    const char * _Mode);
 __declspec(dllimport) int __cdecl printf(    const char * _Format, ...);

 __declspec(dllimport) int __cdecl printf_s(    const char * _Format, ...);
#line 289 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\stdio.h"
 __declspec(dllimport) int __cdecl putc(  int _Ch,    FILE * _File);
 __declspec(dllimport) int __cdecl putchar(  int _Ch);
 __declspec(dllimport) int __cdecl puts(   const char * _Str);
 __declspec(dllimport) int __cdecl _putw(  int _Word,    FILE * _File);


__declspec(dllimport) int __cdecl remove(   const char * _Filename);
 __declspec(dllimport) int __cdecl rename(   const char * _OldFilename,    const char * _NewFilename);
__declspec(dllimport) int __cdecl _unlink(   const char * _Filename);

 __declspec(dllimport) int __cdecl unlink(   const char * _Filename);
#line 301 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\stdio.h"
#line 302 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\stdio.h"
__declspec(dllimport) void __cdecl rewind(   FILE * _File);
 __declspec(dllimport) int __cdecl _rmtmp(void);
  __declspec(dllimport) int __cdecl scanf(    const char * _Format, ...);
  __declspec(dllimport) int __cdecl _scanf_l(    const char * _Format,    _locale_t _Locale, ...);
#pragma warning(push)
#pragma warning(disable:6530)

 __declspec(dllimport) int __cdecl scanf_s(    const char * _Format, ...);
#line 311 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\stdio.h"
 __declspec(dllimport) int __cdecl _scanf_s_l(    const char * _Format,    _locale_t _Locale, ...);
#pragma warning(pop)
 __declspec(dllimport) void __cdecl setbuf(   FILE * _File,      char * _Buffer);
 __declspec(dllimport) int __cdecl _setmaxstdio(  int _Max);
 __declspec(dllimport) unsigned int __cdecl _set_output_format(  unsigned int _Format);
 __declspec(dllimport) unsigned int __cdecl _get_output_format(void);
 __declspec(dllimport) int __cdecl setvbuf(   FILE * _File,     char * _Buf,   int _Mode,   size_t _Size);
 __declspec(dllimport) int __cdecl _snprintf_s(    char * _DstBuf,   size_t _SizeInBytes,   size_t _MaxCount,     const char * _Format, ...);
extern "C++" { __pragma(warning(push)); __pragma(warning(disable: 4793)); template <size_t _Size> inline int __cdecl _snprintf_s(  char (&_Dest)[_Size],   size_t _MaxCount,     const char * _Format, ...) throw() { va_list _ArgList; ( __va_start(&_ArgList, _Format) ); return _vsnprintf_s(_Dest, _Size, _MaxCount, _Format, _ArgList); } __pragma(warning(pop)); }

 __declspec(dllimport) int __cdecl sprintf_s(    char * _DstBuf,   size_t _SizeInBytes,     const char * _Format, ...);
#line 323 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\stdio.h"
extern "C++" { __pragma(warning(push)); __pragma(warning(disable: 4793)); template <size_t _Size> inline int __cdecl sprintf_s(  char (&_Dest)[_Size],     const char * _Format, ...) throw() { va_list _ArgList; ( __va_start(&_ArgList, _Format) ); return vsprintf_s(_Dest, _Size, _Format, _ArgList); } __pragma(warning(pop)); }
 __declspec(dllimport) int __cdecl _scprintf(    const char * _Format, ...);
  __declspec(dllimport) int __cdecl sscanf(   const char * _Src,     const char * _Format, ...);
  __declspec(dllimport) int __cdecl _sscanf_l(   const char * _Src,     const char * _Format,    _locale_t _Locale, ...);
#pragma warning(push)
#pragma warning(disable:6530)

 __declspec(dllimport) int __cdecl sscanf_s(   const char * _Src,     const char * _Format, ...);
#line 332 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\stdio.h"
 __declspec(dllimport) int __cdecl _sscanf_s_l(   const char * _Src,     const char * _Format,    _locale_t _Locale, ...);
  __declspec(dllimport) int __cdecl _snscanf(     const char * _Src,   size_t _MaxCount,     const char * _Format, ...);
  __declspec(dllimport) int __cdecl _snscanf_l(     const char * _Src,   size_t _MaxCount,     const char * _Format,    _locale_t _Locale, ...);
 __declspec(dllimport) int __cdecl _snscanf_s(     const char * _Src,   size_t _MaxCount,     const char * _Format, ...);
 __declspec(dllimport) int __cdecl _snscanf_s_l(     const char * _Src,   size_t _MaxCount,     const char * _Format,    _locale_t _Locale, ...);
#pragma warning(pop)
  __declspec(dllimport) FILE * __cdecl tmpfile(void);

 __declspec(dllimport) errno_t __cdecl tmpfile_s(    FILE ** _File);
 __declspec(dllimport) errno_t __cdecl tmpnam_s(    char * _Buf,   rsize_t _Size);
#line 343 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\stdio.h"
extern "C++" { template <size_t _Size> inline errno_t __cdecl tmpnam_s(  char (&_Buf)[_Size]) throw() { return tmpnam_s(_Buf, _Size); } }
 __declspec(dllimport) char * __cdecl tmpnam(  char *_Buffer);
 __declspec(dllimport) int __cdecl ungetc(  int _Ch,    FILE * _File);
 __declspec(dllimport) int __cdecl vfprintf(   FILE * _File,     const char * _Format, va_list _ArgList);

 __declspec(dllimport) int __cdecl vfprintf_s(   FILE * _File,     const char * _Format, va_list _ArgList);
#line 350 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\stdio.h"
 __declspec(dllimport) int __cdecl vprintf(    const char * _Format, va_list _ArgList);

 __declspec(dllimport) int __cdecl vprintf_s(    const char * _Format, va_list _ArgList);
#line 354 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\stdio.h"
  __declspec(dllimport) int __cdecl vsnprintf(  char * _DstBuf,   size_t _MaxCount,     const char * _Format, va_list _ArgList);

 __declspec(dllimport) int __cdecl vsnprintf_s(    char * _DstBuf,   size_t _DstSize,   size_t _MaxCount,     const char * _Format, va_list _ArgList);
extern "C++" { template <size_t _Size> inline int __cdecl vsnprintf_s(  char (&_Dest)[_Size],   size_t _MaxCount,     const char * _Format, va_list _Args) throw() { return vsnprintf_s(_Dest, _Size, _MaxCount, _Format, _Args); } }
#line 359 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\stdio.h"
 __declspec(dllimport) int __cdecl _vsnprintf_s(    char * _DstBuf,   size_t _SizeInBytes,   size_t _MaxCount,     const char * _Format, va_list _ArgList);
extern "C++" { template <size_t _Size> inline int __cdecl _vsnprintf_s(  char (&_Dest)[_Size],   size_t _MaxCount,     const char * _Format, va_list _Args) throw() { return _vsnprintf_s(_Dest, _Size, _MaxCount, _Format, _Args); } }
#pragma warning(push)
#pragma warning(disable:4793)
 __declspec(dllimport) int __cdecl _snprintf(   char *_Dest,   size_t _Count,     const char * _Format, ...);  __declspec(dllimport) int __cdecl _vsnprintf(   char *_Dest,   size_t _Count,     const char * _Format, va_list _Args);
#pragma warning(pop)

__declspec(dllimport) int __cdecl vsprintf_s(    char * _DstBuf,   size_t _SizeInBytes,     const char * _Format, va_list _ArgList);
extern "C++" { template <size_t _Size> inline int __cdecl vsprintf_s(  char (&_Dest)[_Size],     const char * _Format, va_list _Args) throw() { return vsprintf_s(_Dest, _Size, _Format, _Args); } }
#line 369 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\stdio.h"
#pragma warning(push)
#pragma warning(disable:4793)
 __declspec(dllimport) int __cdecl sprintf(  char *_Dest,  const char * _Format, ...);  __declspec(dllimport) int __cdecl vsprintf(  char *_Dest,  const char * _Format, va_list _Args);
#pragma warning(pop)
 __declspec(dllimport) int __cdecl _vscprintf(    const char * _Format, va_list _ArgList);
 __declspec(dllimport) int __cdecl _snprintf_c(  char * _DstBuf,   size_t _MaxCount,     const char * _Format, ...);
 __declspec(dllimport) int __cdecl _vsnprintf_c(  char *_DstBuf,   size_t _MaxCount,     const char * _Format, va_list _ArgList);

 __declspec(dllimport) int __cdecl _fprintf_p(   FILE * _File,     const char * _Format, ...);
 __declspec(dllimport) int __cdecl _printf_p(    const char * _Format, ...);
 __declspec(dllimport) int __cdecl _sprintf_p(    char * _Dst,   size_t _MaxCount,     const char * _Format, ...);
 __declspec(dllimport) int __cdecl _vfprintf_p(   FILE * _File,     const char * _Format, va_list _ArgList);
 __declspec(dllimport) int __cdecl _vprintf_p(    const char * _Format, va_list _ArgList);
 __declspec(dllimport) int __cdecl _vsprintf_p(    char * _Dst,   size_t _MaxCount,     const char * _Format, va_list _ArgList);
 __declspec(dllimport) int __cdecl _scprintf_p(    const char * _Format, ...);
 __declspec(dllimport) int __cdecl _vscprintf_p(    const char * _Format, va_list _ArgList);
__declspec(dllimport) int __cdecl _set_printf_count_output(  int _Value);
__declspec(dllimport) int __cdecl _get_printf_count_output(void);

 __declspec(dllimport) int __cdecl _printf_l(    const char * _Format,    _locale_t _Locale, ...);
 __declspec(dllimport) int __cdecl _printf_p_l(    const char * _Format,    _locale_t _Locale, ...);
 __declspec(dllimport) int __cdecl _printf_s_l(    const char * _Format,    _locale_t _Locale, ...);
 __declspec(dllimport) int __cdecl _vprintf_l(    const char * _Format,    _locale_t _Locale, va_list _ArgList);
 __declspec(dllimport) int __cdecl _vprintf_p_l(    const char * _Format,    _locale_t _Locale, va_list _ArgList);
 __declspec(dllimport) int __cdecl _vprintf_s_l(    const char * _Format,    _locale_t _Locale, va_list _ArgList);

 __declspec(dllimport) int __cdecl _fprintf_l(   FILE * _File,     const char * _Format,    _locale_t _Locale, ...);
 __declspec(dllimport) int __cdecl _fprintf_p_l(   FILE * _File,     const char * _Format,    _locale_t _Locale, ...);
 __declspec(dllimport) int __cdecl _fprintf_s_l(   FILE * _File,     const char * _Format,    _locale_t _Locale, ...);
 __declspec(dllimport) int __cdecl _vfprintf_l(   FILE * _File,    const char * _Format,    _locale_t _Locale, va_list _ArgList);
 __declspec(dllimport) int __cdecl _vfprintf_p_l(   FILE * _File,    const char * _Format,    _locale_t _Locale, va_list _ArgList);
 __declspec(dllimport) int __cdecl _vfprintf_s_l(   FILE * _File,    const char * _Format,    _locale_t _Locale, va_list _ArgList);

  __declspec(dllimport) int __cdecl _sprintf_l(   char * _DstBuf,     const char * _Format,    _locale_t _Locale, ...);
 __declspec(dllimport) int __cdecl _sprintf_p_l(    char * _DstBuf,   size_t _MaxCount,     const char * _Format,    _locale_t _Locale, ...);
 __declspec(dllimport) int __cdecl _sprintf_s_l(    char * _DstBuf,   size_t _DstSize,     const char * _Format,    _locale_t _Locale, ...);
  __declspec(dllimport) int __cdecl _vsprintf_l(   char * _DstBuf,    const char * _Format,    _locale_t, va_list _ArgList);
 __declspec(dllimport) int __cdecl _vsprintf_p_l(    char * _DstBuf,   size_t _MaxCount,     const char* _Format,    _locale_t _Locale,  va_list _ArgList);
 __declspec(dllimport) int __cdecl _vsprintf_s_l(    char * _DstBuf,   size_t _DstSize,     const char * _Format,    _locale_t _Locale, va_list _ArgList);

 __declspec(dllimport) int __cdecl _scprintf_l(    const char * _Format,    _locale_t _Locale, ...);
 __declspec(dllimport) int __cdecl _scprintf_p_l(    const char * _Format,    _locale_t _Locale, ...);
 __declspec(dllimport) int __cdecl _vscprintf_l(    const char * _Format,    _locale_t _Locale, va_list _ArgList);
 __declspec(dllimport) int __cdecl _vscprintf_p_l(    const char * _Format,    _locale_t _Locale, va_list _ArgList);

  __declspec(dllimport) int __cdecl _snprintf_l(  char * _DstBuf,   size_t _MaxCount,     const char * _Format,    _locale_t _Locale, ...);
 __declspec(dllimport) int __cdecl _snprintf_c_l(  char * _DstBuf,   size_t _MaxCount,     const char * _Format,    _locale_t _Locale, ...);
 __declspec(dllimport) int __cdecl _snprintf_s_l(    char * _DstBuf,   size_t _DstSize,   size_t _MaxCount,     const char * _Format,    _locale_t _Locale, ...);
  __declspec(dllimport) int __cdecl _vsnprintf_l(  char * _DstBuf,   size_t _MaxCount,     const char * _Format,    _locale_t _Locale, va_list _ArgList);
 __declspec(dllimport) int __cdecl _vsnprintf_c_l(  char * _DstBuf,   size_t _MaxCount, const char *,    _locale_t _Locale, va_list _ArgList);
 __declspec(dllimport) int __cdecl _vsnprintf_s_l(    char * _DstBuf,   size_t _DstSize,   size_t _MaxCount,     const char* _Format,   _locale_t _Locale, va_list _ArgList);







#line 428 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\stdio.h"




 __declspec(dllimport) FILE * __cdecl _wfsopen(   const wchar_t * _Filename,    const wchar_t * _Mode,   int _ShFlag);
#line 434 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\stdio.h"

 __declspec(dllimport) wint_t __cdecl fgetwc(   FILE * _File);
 __declspec(dllimport) wint_t __cdecl _fgetwchar(void);
 __declspec(dllimport) wint_t __cdecl fputwc(  wchar_t _Ch,    FILE * _File);
 __declspec(dllimport) wint_t __cdecl _fputwchar(  wchar_t _Ch);
 __declspec(dllimport) wint_t __cdecl getwc(   FILE * _File);
 __declspec(dllimport) wint_t __cdecl getwchar(void);
 __declspec(dllimport) wint_t __cdecl putwc(  wchar_t _Ch,    FILE * _File);
 __declspec(dllimport) wint_t __cdecl putwchar(  wchar_t _Ch);
 __declspec(dllimport) wint_t __cdecl ungetwc(  wint_t _Ch,    FILE * _File);

 __declspec(dllimport) wchar_t * __cdecl fgetws(    wchar_t * _Dst,   int _SizeInWords,    FILE * _File);
 __declspec(dllimport) int __cdecl fputws(   const wchar_t * _Str,    FILE * _File);
 __declspec(dllimport) wchar_t * __cdecl _getws_s(    wchar_t * _Str,   size_t _SizeInWords);
extern "C++" { template <size_t _Size> inline wchar_t * __cdecl _getws_s(  wchar_t (&_String)[_Size]) throw() { return _getws_s(_String, _Size); } }
 __declspec(dllimport) wchar_t * __cdecl _getws(  wchar_t *_String);
 __declspec(dllimport) int __cdecl _putws(   const wchar_t * _Str);

 __declspec(dllimport) int __cdecl fwprintf(   FILE * _File,     const wchar_t * _Format, ...);

 __declspec(dllimport) int __cdecl fwprintf_s(   FILE * _File,     const wchar_t * _Format, ...);
#line 456 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\stdio.h"
 __declspec(dllimport) int __cdecl wprintf(    const wchar_t * _Format, ...);

 __declspec(dllimport) int __cdecl wprintf_s(    const wchar_t * _Format, ...);
#line 460 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\stdio.h"
 __declspec(dllimport) int __cdecl _scwprintf(    const wchar_t * _Format, ...);
 __declspec(dllimport) int __cdecl vfwprintf(   FILE * _File,     const wchar_t * _Format, va_list _ArgList);

 __declspec(dllimport) int __cdecl vfwprintf_s(   FILE * _File,     const wchar_t * _Format, va_list _ArgList);
#line 465 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\stdio.h"
 __declspec(dllimport) int __cdecl vwprintf(    const wchar_t * _Format, va_list _ArgList);

 __declspec(dllimport) int __cdecl vwprintf_s(    const wchar_t * _Format, va_list _ArgList);
#line 469 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\stdio.h"


__declspec(dllimport) int __cdecl swprintf_s(    wchar_t * _Dst,   size_t _SizeInWords,     const wchar_t * _Format, ...);
#line 473 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\stdio.h"
extern "C++" { __pragma(warning(push)); __pragma(warning(disable: 4793)); template <size_t _Size> inline int __cdecl swprintf_s(  wchar_t (&_Dest)[_Size],     const wchar_t * _Format, ...) throw() { va_list _ArgList; ( __va_start(&_ArgList, _Format) ); return vswprintf_s(_Dest, _Size, _Format, _ArgList); } __pragma(warning(pop)); }

__declspec(dllimport) int __cdecl vswprintf_s(    wchar_t * _Dst,   size_t _SizeInWords,     const wchar_t * _Format, va_list _ArgList);
#line 477 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\stdio.h"
extern "C++" { template <size_t _Size> inline int __cdecl vswprintf_s(  wchar_t (&_Dest)[_Size],     const wchar_t * _Format, va_list _Args) throw() { return vswprintf_s(_Dest, _Size, _Format, _Args); } }

 __declspec(dllimport) int __cdecl _swprintf_c(    wchar_t * _DstBuf,   size_t _SizeInWords,     const wchar_t * _Format, ...);
 __declspec(dllimport) int __cdecl _vswprintf_c(    wchar_t * _DstBuf,   size_t _SizeInWords,     const wchar_t * _Format, va_list _ArgList);

 __declspec(dllimport) int __cdecl _snwprintf_s(    wchar_t * _DstBuf,   size_t _SizeInWords,   size_t _MaxCount,     const wchar_t * _Format, ...);
extern "C++" { __pragma(warning(push)); __pragma(warning(disable: 4793)); template <size_t _Size> inline int __cdecl _snwprintf_s(  wchar_t (&_Dest)[_Size],   size_t _Count,     const wchar_t * _Format, ...) throw() { va_list _ArgList; ( __va_start(&_ArgList, _Format) ); return _vsnwprintf_s(_Dest, _Size, _Count, _Format, _ArgList); } __pragma(warning(pop)); }
 __declspec(dllimport) int __cdecl _vsnwprintf_s(    wchar_t * _DstBuf,   size_t _SizeInWords,   size_t _MaxCount,     const wchar_t * _Format, va_list _ArgList);
extern "C++" { template <size_t _Size> inline int __cdecl _vsnwprintf_s(  wchar_t (&_Dest)[_Size],   size_t _Count,     const wchar_t * _Format, va_list _Args) throw() { return _vsnwprintf_s(_Dest, _Size, _Count, _Format, _Args); } }
#pragma warning(push)
#pragma warning(disable:4793)
 __declspec(dllimport) int __cdecl _snwprintf(   wchar_t *_Dest,   size_t _Count,     const wchar_t * _Format, ...);  __declspec(dllimport) int __cdecl _vsnwprintf(   wchar_t *_Dest,   size_t _Count,     const wchar_t * _Format, va_list _Args);
#pragma warning(pop)

 __declspec(dllimport) int __cdecl _fwprintf_p(   FILE * _File,     const wchar_t * _Format, ...);
 __declspec(dllimport) int __cdecl _wprintf_p(    const wchar_t * _Format, ...);
 __declspec(dllimport) int __cdecl _vfwprintf_p(   FILE * _File,     const wchar_t * _Format, va_list _ArgList);
 __declspec(dllimport) int __cdecl _vwprintf_p(    const wchar_t * _Format, va_list _ArgList);
 __declspec(dllimport) int __cdecl _swprintf_p(    wchar_t * _DstBuf,   size_t _MaxCount,     const wchar_t * _Format, ...);
 __declspec(dllimport) int __cdecl _vswprintf_p(    wchar_t * _DstBuf,   size_t _MaxCount,     const wchar_t * _Format, va_list _ArgList);
 __declspec(dllimport) int __cdecl _scwprintf_p(    const wchar_t * _Format, ...);
 __declspec(dllimport) int __cdecl _vscwprintf_p(    const wchar_t * _Format, va_list _ArgList);

 __declspec(dllimport) int __cdecl _wprintf_l(    const wchar_t * _Format,    _locale_t _Locale, ...);
 __declspec(dllimport) int __cdecl _wprintf_p_l(    const wchar_t * _Format,    _locale_t _Locale, ...);
 __declspec(dllimport) int __cdecl _wprintf_s_l(    const wchar_t * _Format,    _locale_t _Locale, ...);
 __declspec(dllimport) int __cdecl _vwprintf_l(    const wchar_t * _Format,    _locale_t _Locale, va_list _ArgList);
 __declspec(dllimport) int __cdecl _vwprintf_p_l(    const wchar_t * _Format,    _locale_t _Locale, va_list _ArgList);
 __declspec(dllimport) int __cdecl _vwprintf_s_l(    const wchar_t * _Format,    _locale_t _Locale, va_list _ArgList);

 __declspec(dllimport) int __cdecl _fwprintf_l(   FILE * _File,     const wchar_t * _Format,    _locale_t _Locale, ...);
 __declspec(dllimport) int __cdecl _fwprintf_p_l(   FILE * _File,     const wchar_t * _Format,    _locale_t _Locale, ...);
 __declspec(dllimport) int __cdecl _fwprintf_s_l(   FILE * _File,     const wchar_t * _Format,    _locale_t _Locale, ...);
 __declspec(dllimport) int __cdecl _vfwprintf_l(   FILE * _File,     const wchar_t * _Format,    _locale_t _Locale, va_list _ArgList);
 __declspec(dllimport) int __cdecl _vfwprintf_p_l(   FILE * _File,     const wchar_t * _Format,    _locale_t _Locale, va_list _ArgList);
 __declspec(dllimport) int __cdecl _vfwprintf_s_l(   FILE * _File,     const wchar_t * _Format,    _locale_t _Locale, va_list _ArgList);

 __declspec(dllimport) int __cdecl _swprintf_c_l(    wchar_t * _DstBuf,   size_t _MaxCount,     const wchar_t * _Format,    _locale_t _Locale, ...);
 __declspec(dllimport) int __cdecl _swprintf_p_l(    wchar_t * _DstBuf,   size_t _MaxCount,     const wchar_t * _Format,    _locale_t _Locale, ...);
 __declspec(dllimport) int __cdecl _swprintf_s_l(    wchar_t * _DstBuf,   size_t _DstSize,     const wchar_t * _Format,    _locale_t _Locale, ...);
 __declspec(dllimport) int __cdecl _vswprintf_c_l(    wchar_t * _DstBuf,   size_t _MaxCount,     const wchar_t * _Format,    _locale_t _Locale, va_list _ArgList);
 __declspec(dllimport) int __cdecl _vswprintf_p_l(    wchar_t * _DstBuf,   size_t _MaxCount,     const wchar_t * _Format,    _locale_t _Locale, va_list _ArgList);
 __declspec(dllimport) int __cdecl _vswprintf_s_l(    wchar_t * _DstBuf,   size_t _DstSize,     const wchar_t * _Format,    _locale_t _Locale, va_list _ArgList);

 __declspec(dllimport) int __cdecl _scwprintf_l(    const wchar_t * _Format,    _locale_t _Locale, ...);
 __declspec(dllimport) int __cdecl _scwprintf_p_l(    const wchar_t * _Format,    _locale_t _Locale, ...);
 __declspec(dllimport) int __cdecl _vscwprintf_p_l(    const wchar_t * _Format,    _locale_t _Locale, va_list _ArgList);

  __declspec(dllimport) int __cdecl _snwprintf_l(  wchar_t * _DstBuf,   size_t _MaxCount,     const wchar_t * _Format,    _locale_t _Locale, ...);
 __declspec(dllimport) int __cdecl _snwprintf_s_l(    wchar_t * _DstBuf,   size_t _DstSize,   size_t _MaxCount,     const wchar_t * _Format,    _locale_t _Locale, ...);
  __declspec(dllimport) int __cdecl _vsnwprintf_l(  wchar_t * _DstBuf,   size_t _MaxCount,     const wchar_t * _Format,    _locale_t _Locale, va_list _ArgList);
 __declspec(dllimport) int __cdecl _vsnwprintf_s_l(    wchar_t * _DstBuf,   size_t _DstSize,   size_t _MaxCount,     const wchar_t * _Format,    _locale_t _Locale, va_list _ArgList);










#line 540 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\stdio.h"


#pragma warning(push)
#pragma warning(disable:4141 4996 4793)
 __declspec(deprecated("swprintf has been changed to conform with the ISO C standard, adding an extra character count parameter. To use traditional Microsoft swprintf, set _CRT_NON_CONFORMING_SWPRINTFS.")) __declspec(dllimport) int __cdecl _swprintf(   wchar_t *_Dest,     const wchar_t * _Format, ...);  __declspec(deprecated("swprintf has been changed to conform with the ISO C standard, adding an extra character count parameter. To use traditional Microsoft swprintf, set _CRT_NON_CONFORMING_SWPRINTFS.")) __declspec(dllimport) int __cdecl _vswprintf(   wchar_t *_Dest,     const wchar_t * _Format, va_list _Args);
 __declspec(deprecated("swprintf has been changed to conform with the ISO C standard, adding an extra character count parameter. To use traditional Microsoft swprintf, set _CRT_NON_CONFORMING_SWPRINTFS.")) __declspec(dllimport) int __cdecl __swprintf_l( wchar_t *_Dest,     const wchar_t * _Format, _locale_t _Plocinfo, ...);  __declspec(deprecated("swprintf has been changed to conform with the ISO C standard, adding an extra character count parameter. To use traditional Microsoft swprintf, set _CRT_NON_CONFORMING_SWPRINTFS.")) __declspec(dllimport) int __cdecl __vswprintf_l( wchar_t *_Dest,     const wchar_t * _Format, _locale_t _Plocinfo, va_list _Args);
#pragma warning(pop)


#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\swprintf.inl"












#pragma once







#line 22 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\swprintf.inl"










#line 33 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\swprintf.inl"

#pragma warning( push )
#pragma warning( disable : 4793 4412 )
static __inline int swprintf(wchar_t * _String, size_t _Count, const wchar_t * _Format, ...)
{
    va_list _Arglist;
    int _Ret;
    ( __va_start(&_Arglist, _Format) );
    _Ret = _vswprintf_c_l(_String, _Count, _Format, 0, _Arglist);
    ( _Arglist = (va_list)0 );
    return _Ret;
}
#pragma warning( pop )

#pragma warning( push )
#pragma warning( disable : 4412 )
static __inline int __cdecl vswprintf(wchar_t * _String, size_t _Count, const wchar_t * _Format, va_list _Ap)
{
    return _vswprintf_c_l(_String, _Count, _Format, 0, _Ap);
}
#pragma warning( pop )


#line 57 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\swprintf.inl"

#pragma warning( push )
#pragma warning( disable : 4793 4412 )
static __inline int _swprintf_l(wchar_t * _String, size_t _Count, const wchar_t * _Format, _locale_t _Plocinfo, ...)
{
    va_list _Arglist;
    int _Ret;
    ( __va_start(&_Arglist, _Plocinfo) );
    _Ret = _vswprintf_c_l(_String, _Count, _Format, _Plocinfo, _Arglist);
    ( _Arglist = (va_list)0 );
    return _Ret;
}
#pragma warning( pop )

#pragma warning( push )
#pragma warning( disable : 4412 )
static __inline int __cdecl _vswprintf_l(wchar_t * _String, size_t _Count, const wchar_t * _Format, _locale_t _Plocinfo, va_list _Ap)
{
    return _vswprintf_c_l(_String, _Count, _Format, _Plocinfo, _Ap);
}
#pragma warning( pop )


#pragma warning( push )
#pragma warning( disable : 4996 )

#pragma warning( push )
#pragma warning( disable : 4793 4141 )
extern "C++" __declspec(deprecated("swprintf has been changed to conform with the ISO C standard, adding an extra character count parameter. To use traditional Microsoft swprintf, set _CRT_NON_CONFORMING_SWPRINTFS."))  __inline int swprintf(   wchar_t * _String,     const wchar_t * _Format, ...)
{
    va_list _Arglist;
    ( __va_start(&_Arglist, _Format) );
    int _Ret = _vswprintf(_String, _Format, _Arglist);
    ( _Arglist = (va_list)0 );
    return _Ret;
}
#pragma warning( pop )

#pragma warning( push )
#pragma warning( disable : 4141 )
extern "C++" __declspec(deprecated("swprintf has been changed to conform with the ISO C standard, adding an extra character count parameter. To use traditional Microsoft swprintf, set _CRT_NON_CONFORMING_SWPRINTFS."))  __inline int __cdecl vswprintf(   wchar_t * _String,     const wchar_t * _Format, va_list _Ap)
{
    return _vswprintf(_String, _Format, _Ap);
}
#pragma warning( pop )

#pragma warning( push )
#pragma warning( disable : 4793 4141 )
extern "C++" __declspec(deprecated("swprintf has been changed to conform with the ISO C standard, adding an extra character count parameter. To use traditional Microsoft swprintf, set _CRT_NON_CONFORMING_SWPRINTFS."))  __inline int _swprintf_l(   wchar_t * _String,     const wchar_t * _Format, _locale_t _Plocinfo, ...)
{
    va_list _Arglist;
    ( __va_start(&_Arglist, _Plocinfo) );
    int _Ret = __vswprintf_l(_String, _Format, _Plocinfo, _Arglist);
    ( _Arglist = (va_list)0 );
    return _Ret;
}
#pragma warning( pop )

#pragma warning( push )
#pragma warning( disable : 4141 )
extern "C++" __declspec(deprecated("swprintf has been changed to conform with the ISO C standard, adding an extra character count parameter. To use traditional Microsoft swprintf, set _CRT_NON_CONFORMING_SWPRINTFS."))  __inline int __cdecl _vswprintf_l(   wchar_t * _String,     const wchar_t * _Format, _locale_t _Plocinfo, va_list _Ap)
{
    return __vswprintf_l(_String, _Format, _Plocinfo, _Ap);
}
#pragma warning( pop )

#pragma warning( pop )

#line 126 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\swprintf.inl"

#line 128 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\swprintf.inl"
#line 129 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\swprintf.inl"

#line 550 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\stdio.h"
#line 551 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\stdio.h"













#line 565 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\stdio.h"

 __declspec(dllimport) wchar_t * __cdecl _wtempnam(   const wchar_t * _Directory,    const wchar_t * _FilePrefix);



#line 571 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\stdio.h"

 __declspec(dllimport) int __cdecl _vscwprintf(    const wchar_t * _Format, va_list _ArgList);
 __declspec(dllimport) int __cdecl _vscwprintf_l(    const wchar_t * _Format,    _locale_t _Locale, va_list _ArgList);
  __declspec(dllimport) int __cdecl fwscanf(   FILE * _File,     const wchar_t * _Format, ...);
  __declspec(dllimport) int __cdecl _fwscanf_l(   FILE * _File,     const wchar_t * _Format,    _locale_t _Locale, ...);
#pragma warning(push)
#pragma warning(disable:6530)

 __declspec(dllimport) int __cdecl fwscanf_s(   FILE * _File,     const wchar_t * _Format, ...);
#line 581 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\stdio.h"
 __declspec(dllimport) int __cdecl _fwscanf_s_l(   FILE * _File,     const wchar_t * _Format,    _locale_t _Locale, ...);
  __declspec(dllimport) int __cdecl swscanf(   const wchar_t * _Src,     const wchar_t * _Format, ...);
  __declspec(dllimport) int __cdecl _swscanf_l(   const wchar_t * _Src,     const wchar_t * _Format,    _locale_t _Locale, ...);

 __declspec(dllimport) int __cdecl swscanf_s(   const wchar_t *_Src,     const wchar_t * _Format, ...);
#line 587 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\stdio.h"
 __declspec(dllimport) int __cdecl _swscanf_s_l(   const wchar_t * _Src,     const wchar_t * _Format,    _locale_t _Locale, ...);
  __declspec(dllimport) int __cdecl _snwscanf(     const wchar_t * _Src,   size_t _MaxCount,     const wchar_t * _Format, ...);
  __declspec(dllimport) int __cdecl _snwscanf_l(     const wchar_t * _Src,   size_t _MaxCount,     const wchar_t * _Format,    _locale_t _Locale, ...);
 __declspec(dllimport) int __cdecl _snwscanf_s(     const wchar_t * _Src,   size_t _MaxCount,     const wchar_t * _Format, ...);
 __declspec(dllimport) int __cdecl _snwscanf_s_l(     const wchar_t * _Src,   size_t _MaxCount,     const wchar_t * _Format,    _locale_t _Locale, ...);
  __declspec(dllimport) int __cdecl wscanf(    const wchar_t * _Format, ...);
  __declspec(dllimport) int __cdecl _wscanf_l(    const wchar_t * _Format,    _locale_t _Locale, ...);

 __declspec(dllimport) int __cdecl wscanf_s(    const wchar_t * _Format, ...);
#line 597 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\stdio.h"
 __declspec(dllimport) int __cdecl _wscanf_s_l(    const wchar_t * _Format,    _locale_t _Locale, ...);
#pragma warning(pop)

 __declspec(dllimport) FILE * __cdecl _wfdopen(  int _FileHandle ,    const wchar_t * _Mode);
  __declspec(dllimport) FILE * __cdecl _wfopen(   const wchar_t * _Filename,    const wchar_t * _Mode);
 __declspec(dllimport) errno_t __cdecl _wfopen_s(     FILE ** _File,    const wchar_t * _Filename,    const wchar_t * _Mode);
  __declspec(dllimport) FILE * __cdecl _wfreopen(   const wchar_t * _Filename,    const wchar_t * _Mode,    FILE * _OldFile);
 __declspec(dllimport) errno_t __cdecl _wfreopen_s(     FILE ** _File,    const wchar_t * _Filename,    const wchar_t * _Mode,    FILE * _OldFile);





 __declspec(dllimport) FILE * __cdecl _wpopen(   const wchar_t *_Command,    const wchar_t * _Mode);
__declspec(dllimport) int __cdecl _wremove(   const wchar_t * _Filename);
 __declspec(dllimport) errno_t __cdecl _wtmpnam_s(    wchar_t * _DstBuf,   size_t _SizeInWords);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _wtmpnam_s(  wchar_t (&_Buffer)[_Size]) throw() { return _wtmpnam_s(_Buffer, _Size); } }
 __declspec(dllimport) wchar_t * __cdecl _wtmpnam(  wchar_t *_Buffer);

 __declspec(dllimport) wint_t __cdecl _fgetwc_nolock(   FILE * _File);
 __declspec(dllimport) wint_t __cdecl _fputwc_nolock(  wchar_t _Ch,    FILE * _File);
 __declspec(dllimport) wint_t __cdecl _ungetwc_nolock(  wint_t _Ch,    FILE * _File);






#line 626 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\stdio.h"
inline wint_t __cdecl getwchar()
        {return (fgetwc((&__iob_func()[0]))); }   
inline wint_t __cdecl putwchar(wchar_t _C)
        {return (fputwc(_C, (&__iob_func()[1]))); }       
#line 631 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\stdio.h"










#line 642 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\stdio.h"


#line 645 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\stdio.h"


#line 648 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\stdio.h"















#line 664 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\stdio.h"











__declspec(dllimport) void __cdecl _lock_file(   FILE * _File);
__declspec(dllimport) void __cdecl _unlock_file(   FILE * _File);

 __declspec(dllimport) int __cdecl _fclose_nolock(   FILE * _File);
 __declspec(dllimport) int __cdecl _fflush_nolock(   FILE * _File);
 __declspec(dllimport) size_t __cdecl _fread_nolock(  void * _DstBuf,   size_t _ElementSize,   size_t _Count,    FILE * _File);
 __declspec(dllimport) size_t __cdecl _fread_nolock_s(  void * _DstBuf,   size_t _DstSize,   size_t _ElementSize,   size_t _Count,    FILE * _File);
 __declspec(dllimport) int __cdecl _fseek_nolock(   FILE * _File,   long _Offset,   int _Origin);
 __declspec(dllimport) long __cdecl _ftell_nolock(   FILE * _File);
 __declspec(dllimport) int __cdecl _fseeki64_nolock(   FILE * _File,   __int64 _Offset,   int _Origin);
 __declspec(dllimport) __int64 __cdecl _ftelli64_nolock(   FILE * _File);
 __declspec(dllimport) size_t __cdecl _fwrite_nolock(   const void * _DstBuf,   size_t _Size,   size_t _Count,    FILE * _File);
 __declspec(dllimport) int __cdecl _ungetc_nolock(  int _Ch,    FILE * _File);












#line 701 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\stdio.h"











#line 713 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\stdio.h"

 __declspec(dllimport) char * __cdecl tempnam(   const char * _Directory,    const char * _FilePrefix);



#line 719 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\stdio.h"

  __declspec(dllimport) int __cdecl fcloseall(void);
  __declspec(dllimport) FILE * __cdecl fdopen(  int _FileHandle,    const char * _Format);
  __declspec(dllimport) int __cdecl fgetchar(void);
  __declspec(dllimport) int __cdecl fileno(  FILE * _File);
  __declspec(dllimport) int __cdecl flushall(void);
  __declspec(dllimport) int __cdecl fputchar(  int _Ch);
  __declspec(dllimport) int __cdecl getw(   FILE * _File);
  __declspec(dllimport) int __cdecl putw(  int _Ch,    FILE * _File);
  __declspec(dllimport) int __cdecl rmtmp(void);

#line 731 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\stdio.h"


}
#line 735 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\stdio.h"

#pragma pack(pop)

#line 739 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\stdio.h"

#line 14 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\cstdio"
#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\cstdio"


 
 
 
 
 
 
 

 
 
 
 





typedef FILE _iobuf;

 
namespace std {
using :: _iobuf;

using :: size_t; using :: fpos_t; using :: FILE;
using :: clearerr; using :: fclose; using :: feof;
using :: ferror; using :: fflush; using :: fgetc;
using :: fgetpos; using :: fgets; using :: fopen;
using :: fprintf; using :: fputc; using :: fputs;
using :: fread; using :: freopen; using :: fscanf;
using :: fseek; using :: fsetpos; using :: ftell;
using :: fwrite; using :: getc; using :: getchar;
using :: gets; using :: perror;
using :: putc; using :: putchar;
using :: printf; using :: puts; using :: remove;
using :: rename; using :: rewind; using :: scanf;
using :: setbuf; using :: setvbuf; using :: sprintf;
using :: sscanf; using :: tmpfile; using :: tmpnam;
using :: ungetc; using :: vfprintf; using :: vprintf;
using :: vsprintf;
}
 #line 58 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\cstdio"

#line 60 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\cstdio"





#line 7 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\iosfwd"
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\cstring"

#pragma once










 
#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\cstring"

 
namespace std {
using :: size_t; using :: memchr; using :: memcmp;

using :: memcpy; using :: memmove; using :: memset;
using :: strcat; using :: strchr; using :: strcmp;
using :: strcoll; using :: strcpy; using :: strcspn;
using :: strerror; using :: strlen; using :: strncat;
using :: strncmp; using :: strncpy; using :: strpbrk;
using :: strrchr; using :: strspn; using :: strstr;
using :: strtok; using :: strxfrm;
}
 #line 29 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\cstring"

#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\cstring"





#line 8 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\iosfwd"
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\cwchar"

#pragma once










 #line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\wchar.h"

















#pragma once




#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"














 








































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 24 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\wchar.h"

#pragma pack(push,8)


extern "C" {
#line 30 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\wchar.h"





















































typedef unsigned long _fsize_t; 

#line 86 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\wchar.h"



struct _wfinddata32_t {
        unsigned    attrib;
        __time32_t  time_create;    
        __time32_t  time_access;    
        __time32_t  time_write;
        _fsize_t    size;
        wchar_t     name[260];
};

struct _wfinddata32i64_t {
        unsigned    attrib;
        __time32_t  time_create;    
        __time32_t  time_access;    
        __time32_t  time_write;
        __int64     size;
        wchar_t     name[260];
};

struct _wfinddata64i32_t {
        unsigned    attrib;
        __time64_t  time_create;    
        __time64_t  time_access;    
        __time64_t  time_write;
        _fsize_t    size;
        wchar_t     name[260];
};

struct _wfinddata64_t {
        unsigned    attrib;
        __time64_t  time_create;    
        __time64_t  time_access;    
        __time64_t  time_write;
        __int64     size;
        wchar_t     name[260];
};



















#line 144 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\wchar.h"


#line 147 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\wchar.h"






























#line 178 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\wchar.h"

#line 180 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\wchar.h"
#line 181 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\wchar.h"

__declspec(dllimport) const unsigned short * __cdecl __pctype_func(void);

__declspec(dllimport) extern const unsigned short *_pctype;


#line 188 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\wchar.h"
#line 189 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\wchar.h"
#line 190 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\wchar.h"





__declspec(dllimport) extern const unsigned short _wctype[];
#line 197 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\wchar.h"

__declspec(dllimport) const wctype_t * __cdecl __pwctype_func(void);

__declspec(dllimport) extern const wctype_t *_pwctype;


#line 204 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\wchar.h"
#line 205 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\wchar.h"
#line 206 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\wchar.h"







                                
















 __declspec(dllimport) int __cdecl iswalpha(  wint_t _C);
 __declspec(dllimport) int __cdecl _iswalpha_l(  wint_t _C,    _locale_t _Locale);
 __declspec(dllimport) int __cdecl iswupper(  wint_t _C);
 __declspec(dllimport) int __cdecl _iswupper_l(  wint_t _C,    _locale_t _Locale);
 __declspec(dllimport) int __cdecl iswlower(  wint_t _C);
 __declspec(dllimport) int __cdecl _iswlower_l(  wint_t _C,    _locale_t _Locale);
 __declspec(dllimport) int __cdecl iswdigit(  wint_t _C);
 __declspec(dllimport) int __cdecl _iswdigit_l(  wint_t _C,    _locale_t _Locale);
 __declspec(dllimport) int __cdecl iswxdigit(  wint_t _C);
 __declspec(dllimport) int __cdecl _iswxdigit_l(  wint_t _C,    _locale_t _Locale);
 __declspec(dllimport) int __cdecl iswspace(  wint_t _C);
 __declspec(dllimport) int __cdecl _iswspace_l(  wint_t _C,    _locale_t _Locale);
 __declspec(dllimport) int __cdecl iswpunct(  wint_t _C);
 __declspec(dllimport) int __cdecl _iswpunct_l(  wint_t _C,    _locale_t _Locale);
 __declspec(dllimport) int __cdecl iswalnum(  wint_t _C);
 __declspec(dllimport) int __cdecl _iswalnum_l(  wint_t _C,    _locale_t _Locale);
 __declspec(dllimport) int __cdecl iswprint(  wint_t _C);
 __declspec(dllimport) int __cdecl _iswprint_l(  wint_t _C,    _locale_t _Locale);
 __declspec(dllimport) int __cdecl iswgraph(  wint_t _C);
 __declspec(dllimport) int __cdecl _iswgraph_l(  wint_t _C,    _locale_t _Locale);
 __declspec(dllimport) int __cdecl iswcntrl(  wint_t _C);
 __declspec(dllimport) int __cdecl _iswcntrl_l(  wint_t _C,    _locale_t _Locale);
 __declspec(dllimport) int __cdecl iswascii(  wint_t _C);
 __declspec(dllimport) int __cdecl isleadbyte(  int _C);
 __declspec(dllimport) int __cdecl _isleadbyte_l(  int _C,    _locale_t _Locale);

 __declspec(dllimport) wint_t __cdecl towupper(  wint_t _C);
 __declspec(dllimport) wint_t __cdecl _towupper_l(  wint_t _C,    _locale_t _Locale);
 __declspec(dllimport) wint_t __cdecl towlower(  wint_t _C);
 __declspec(dllimport) wint_t __cdecl _towlower_l(  wint_t _C,    _locale_t _Locale); 
 __declspec(dllimport) int __cdecl iswctype(  wint_t _C,   wctype_t _Type);
 __declspec(dllimport) int __cdecl _iswctype_l(  wint_t _C,   wctype_t _Type,    _locale_t _Locale);

 __declspec(dllimport) int __cdecl __iswcsymf(  wint_t _C);
 __declspec(dllimport) int __cdecl _iswcsymf_l(  wint_t _C,    _locale_t _Locale);
 __declspec(dllimport) int __cdecl __iswcsym(  wint_t _C);
 __declspec(dllimport) int __cdecl _iswcsym_l(  wint_t _C,    _locale_t _Locale);

__declspec(deprecated("This function or variable has been superceded by newer library or operating system functionality. Consider using " "iswctype" " instead. See online help for details.")) __declspec(dllimport) int __cdecl is_wctype(  wint_t _C,   wctype_t _Type);


#line 272 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\wchar.h"












#line 285 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\wchar.h"

   __declspec(dllimport) wchar_t * __cdecl _wgetcwd(  wchar_t * _DstBuf,   int _SizeInWords);
   __declspec(dllimport) wchar_t * __cdecl _wgetdcwd(  int _Drive,   wchar_t * _DstBuf,   int _SizeInWords);
   wchar_t * __cdecl _wgetdcwd_nolock(  int _Drive,   wchar_t * _DstBuf,   int _SizeInWords);





#line 295 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\wchar.h"

 __declspec(dllimport) int __cdecl _wchdir(   const wchar_t * _Path);
 __declspec(dllimport) int __cdecl _wmkdir(   const wchar_t * _Path);
 __declspec(dllimport) int __cdecl _wrmdir(   const wchar_t * _Path);


#line 302 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\wchar.h"



 __declspec(dllimport) int __cdecl _waccess(   const wchar_t * _Filename,   int _AccessMode);
 __declspec(dllimport) errno_t __cdecl _waccess_s(   const wchar_t * _Filename,   int _AccessMode);
 __declspec(dllimport) int __cdecl _wchmod(   const wchar_t * _Filename,   int _Mode);
  __declspec(dllimport) int __cdecl _wcreat(   const wchar_t * _Filename,   int _PermissionMode);
 __declspec(dllimport) intptr_t __cdecl _wfindfirst32(   const wchar_t * _Filename,   struct _wfinddata32_t * _FindData);
 __declspec(dllimport) int __cdecl _wfindnext32(  intptr_t _FindHandle,   struct _wfinddata32_t * _FindData);
__declspec(dllimport) int __cdecl _wunlink(   const wchar_t * _Filename);
 __declspec(dllimport) int __cdecl _wrename(   const wchar_t * _OldFilename,    const wchar_t * _NewFilename);
__declspec(dllimport) errno_t __cdecl _wmktemp_s(    wchar_t * _TemplateName,   size_t _SizeInWords);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _wmktemp_s(wchar_t (&_TemplateName)[_Size]) throw() { return _wmktemp_s(_TemplateName, _Size); } }
 __declspec(dllimport) wchar_t * __cdecl _wmktemp(  wchar_t *_TemplateName);

 __declspec(dllimport) intptr_t __cdecl _wfindfirst32i64(   const wchar_t * _Filename,   struct _wfinddata32i64_t * _FindData);
 __declspec(dllimport) intptr_t __cdecl _wfindfirst64i32(   const wchar_t * _Filename,   struct _wfinddata64i32_t * _FindData);
 __declspec(dllimport) intptr_t __cdecl _wfindfirst64(   const wchar_t * _Filename,   struct _wfinddata64_t * _FindData);
 __declspec(dllimport) int __cdecl _wfindnext32i64(  intptr_t _FindHandle,   struct _wfinddata32i64_t * _FindData);
 __declspec(dllimport) int __cdecl _wfindnext64i32(  intptr_t _FindHandle,   struct _wfinddata64i32_t * _FindData);
 __declspec(dllimport) int __cdecl _wfindnext64(  intptr_t _FindHandle,   struct _wfinddata64_t * _FindData);

 __declspec(dllimport) errno_t __cdecl _wsopen_s(  int * _FileHandle,    const wchar_t * _Filename,   int _OpenFlag,   int _ShareFlag,   int _PermissionFlag);



  __declspec(dllimport) int __cdecl _wopen(   const wchar_t * _Filename,   int _OpenFlag, ...);
  __declspec(dllimport) int __cdecl _wsopen(   const wchar_t * _Filename,   int _OpenFlag, int _ShareFlag, ...);







#line 338 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\wchar.h"


#line 341 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\wchar.h"





 __declspec(dllimport) wchar_t * __cdecl _wsetlocale(  int _Category,    const wchar_t * _Locale);


#line 350 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\wchar.h"





__declspec(dllimport) intptr_t __cdecl _wexecl(   const wchar_t * _Filename,    const wchar_t * _ArgList, ...);
__declspec(dllimport) intptr_t __cdecl _wexecle(   const wchar_t * _Filename,    const wchar_t * _ArgList, ...);
__declspec(dllimport) intptr_t __cdecl _wexeclp(   const wchar_t * _Filename,    const wchar_t * _ArgList, ...);
__declspec(dllimport) intptr_t __cdecl _wexeclpe(   const wchar_t * _Filename,    const wchar_t * _ArgList, ...);
__declspec(dllimport) intptr_t __cdecl _wexecv(   const wchar_t * _Filename,    const wchar_t * const * _ArgList);
__declspec(dllimport) intptr_t __cdecl _wexecve(   const wchar_t * _Filename,    const wchar_t * const * _ArgList,
           const wchar_t * const * _Env);
__declspec(dllimport) intptr_t __cdecl _wexecvp(   const wchar_t * _Filename,    const wchar_t * const * _ArgList);
__declspec(dllimport) intptr_t __cdecl _wexecvpe(   const wchar_t * _Filename,    const wchar_t * const * _ArgList, 
           const wchar_t * const * _Env);
__declspec(dllimport) intptr_t __cdecl _wspawnl(  int _Mode,    const wchar_t * _Filename,    const wchar_t * _ArgList, ...);
__declspec(dllimport) intptr_t __cdecl _wspawnle(  int _Mode,    const wchar_t * _Filename,    const wchar_t * _ArgList, ...);
__declspec(dllimport) intptr_t __cdecl _wspawnlp(  int _Mode,    const wchar_t * _Filename,    const wchar_t * _ArgList, ...);
__declspec(dllimport) intptr_t __cdecl _wspawnlpe(  int _Mode,    const wchar_t * _Filename,    const wchar_t * _ArgList, ...);
__declspec(dllimport) intptr_t __cdecl _wspawnv(  int _Mode,    const wchar_t * _Filename,    const wchar_t * const * _ArgList);
__declspec(dllimport) intptr_t __cdecl _wspawnve(  int _Mode,    const wchar_t * _Filename,    const wchar_t * const * _ArgList,
           const wchar_t * const * _Env);
__declspec(dllimport) intptr_t __cdecl _wspawnvp(  int _Mode,    const wchar_t * _Filename,    const wchar_t * const * _ArgList);
__declspec(dllimport) intptr_t __cdecl _wspawnvpe(  int _Mode,    const wchar_t * _Filename,    const wchar_t * const * _ArgList,
           const wchar_t * const * _Env);






#line 382 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\wchar.h"


































#line 417 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\wchar.h"


























#line 444 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\wchar.h"

#line 446 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\wchar.h"







typedef unsigned short _ino_t;      


typedef unsigned short ino_t;
#line 458 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\wchar.h"

#line 460 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\wchar.h"


typedef unsigned int _dev_t;        


typedef unsigned int dev_t;
#line 467 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\wchar.h"

#line 469 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\wchar.h"


typedef long _off_t;                


typedef long off_t;
#line 476 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\wchar.h"

#line 478 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\wchar.h"



struct _stat32 {
        _dev_t     st_dev;
        _ino_t     st_ino;
        unsigned short st_mode;
        short      st_nlink;
        short      st_uid;
        short      st_gid;
        _dev_t     st_rdev;
        _off_t     st_size;
        __time32_t st_atime;
        __time32_t st_mtime;
        __time32_t st_ctime;
        };



struct stat {
        _dev_t     st_dev;
        _ino_t     st_ino;
        unsigned short st_mode;
        short      st_nlink;
        short      st_uid;
        short      st_gid;
        _dev_t     st_rdev;
        _off_t     st_size;
        time_t st_atime;
        time_t st_mtime;
        time_t st_ctime;
        };

#line 512 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\wchar.h"

struct _stat32i64 {
        _dev_t     st_dev;
        _ino_t     st_ino;
        unsigned short st_mode;
        short      st_nlink;
        short      st_uid;
        short      st_gid;
        _dev_t     st_rdev;
        __int64    st_size;
        __time32_t st_atime;
        __time32_t st_mtime;
        __time32_t st_ctime;
        };

struct _stat64i32 {
        _dev_t     st_dev;
        _ino_t     st_ino;
        unsigned short st_mode;
        short      st_nlink;
        short      st_uid;
        short      st_gid;
        _dev_t     st_rdev;
        _off_t     st_size;
        __time64_t st_atime;
        __time64_t st_mtime;
        __time64_t st_ctime;
        };

struct _stat64 {
        _dev_t     st_dev;
        _ino_t     st_ino;
        unsigned short st_mode;
        short      st_nlink;
        short      st_uid;
        short      st_gid;
        _dev_t     st_rdev;
        __int64    st_size;
        __time64_t st_atime;
        __time64_t st_mtime;
        __time64_t st_ctime;
        };























#line 578 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\wchar.h"



#line 582 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\wchar.h"





__declspec(dllimport) int __cdecl _wstat32(   const wchar_t * _Name,   struct _stat32 * _Stat);

__declspec(dllimport) int __cdecl _wstat32i64(   const wchar_t * _Name,   struct _stat32i64 * _Stat);
__declspec(dllimport) int __cdecl _wstat64i32(   const wchar_t * _Name,   struct _stat64i32 * _Stat);
__declspec(dllimport) int __cdecl _wstat64(   const wchar_t * _Name,   struct _stat64 * _Stat);


#line 595 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\wchar.h"

#line 597 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\wchar.h"










 __declspec(dllimport) errno_t __cdecl _cgetws_s(    wchar_t * _Buffer, size_t _SizeInWords,   size_t * _SizeRead);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _cgetws_s(  wchar_t (&_Buffer)[_Size], size_t * _SizeRead) throw() { return _cgetws_s(_Buffer, _Size, _SizeRead); } }
 __declspec(dllimport) wchar_t * __cdecl _cgetws(    wchar_t *_Buffer);
 __declspec(dllimport) wint_t __cdecl _getwch(void);
 __declspec(dllimport) wint_t __cdecl _getwche(void);
 __declspec(dllimport) wint_t __cdecl _putwch(wchar_t _WCh);
 __declspec(dllimport) wint_t __cdecl _ungetwch(wint_t _WCh);
 __declspec(dllimport) int __cdecl _cputws(   const wchar_t * _String);
 __declspec(dllimport) int __cdecl _cwprintf(    const wchar_t * _Format, ...);
 __declspec(dllimport) int __cdecl _cwprintf_s(    const wchar_t * _Format, ...);
  __declspec(dllimport) int __cdecl _cwscanf(    const wchar_t * _Format, ...);
  __declspec(dllimport) int __cdecl _cwscanf_l(    const wchar_t * _Format,    _locale_t _Locale, ...);
 __declspec(dllimport) int __cdecl _cwscanf_s(    const wchar_t * _Format, ...);
 __declspec(dllimport) int __cdecl _cwscanf_s_l(    const wchar_t * _Format,    _locale_t _Locale, ...);
 __declspec(dllimport) int __cdecl _vcwprintf(    const wchar_t *_Format, va_list _ArgList);
 __declspec(dllimport) int __cdecl _vcwprintf_s(    const wchar_t *_Format, va_list _ArgList);

 __declspec(dllimport) int __cdecl _cwprintf_p(    const wchar_t * _Format, ...);
 __declspec(dllimport) int __cdecl _vcwprintf_p(    const wchar_t*  _Format, va_list _ArgList);

__declspec(dllimport) int __cdecl _cwprintf_l(    const wchar_t * _Format,    _locale_t _Locale, ...);
__declspec(dllimport) int __cdecl _cwprintf_s_l(    const wchar_t * _Format,    _locale_t _Locale, ...);
__declspec(dllimport) int __cdecl _vcwprintf_l(    const wchar_t *_Format,    _locale_t _Locale, va_list _ArgList);
__declspec(dllimport) int __cdecl _vcwprintf_s_l(    const wchar_t * _Format,    _locale_t _Locale, va_list _ArgList);
__declspec(dllimport) int __cdecl _cwprintf_p_l(    const wchar_t * _Format,    _locale_t _Locale, ...);
__declspec(dllimport) int __cdecl _vcwprintf_p_l(    const wchar_t * _Format,    _locale_t _Locale, va_list _ArgList);

 wint_t __cdecl _putwch_nolock(wchar_t _WCh);
 wint_t __cdecl _getwch_nolock(void);
 wint_t __cdecl _getwche_nolock(void);
 wint_t __cdecl _ungetwch_nolock(wint_t _WCh);


#line 641 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\wchar.h"






























































































































































































































































































































#line 960 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\wchar.h"







































































































































































































typedef int mbstate_t;
typedef wchar_t _Wint_t;

__declspec(dllimport) wint_t __cdecl btowc(int);
__declspec(dllimport) size_t __cdecl mbrlen(     const char * _Ch,   size_t _SizeInBytes,
                                mbstate_t * _State);
__declspec(dllimport) size_t __cdecl mbrtowc(   wchar_t * _DstCh,      const char * _SrcCh,
                                 size_t _SizeInBytes,   mbstate_t * _State);
__declspec(dllimport) errno_t __cdecl mbsrtowcs_s(  size_t* _Retval,     wchar_t * _Dst,   size_t _Size,        const char ** _PSrc,   size_t _N,   mbstate_t * _State);
extern "C++" { template <size_t _Size> inline errno_t __cdecl mbsrtowcs_s(  size_t * _Retval,   wchar_t (&_Dest)[_Size],        const char ** _PSource,   size_t _Count,   mbstate_t * _State) throw() { return mbsrtowcs_s(_Retval, _Dest, _Size, _PSource, _Count, _State); } }
 __declspec(dllimport) size_t __cdecl mbsrtowcs(  wchar_t *_Dest,  const char ** _PSrc,  size_t _Count,  mbstate_t * _State);

__declspec(dllimport) errno_t __cdecl wcrtomb_s(  size_t * _Retval,     char * _Dst,
          size_t _SizeInBytes,   wchar_t _Ch,   mbstate_t * _State);
extern "C++" { template <size_t _Size> inline errno_t __cdecl wcrtomb_s(  size_t * _Retval,     char (&_Dest)[_Size],   wchar_t _Source,   mbstate_t * _State) throw() { return wcrtomb_s(_Retval, _Dest, _Size, _Source, _State); } }
 __declspec(dllimport) size_t __cdecl wcrtomb(  char *_Dest,  wchar_t _Source,  mbstate_t * _State);
__declspec(dllimport) errno_t __cdecl wcsrtombs_s(  size_t * _Retval,     char * _Dst,
          size_t _SizeInBytes,        const wchar_t ** _Src,   size_t _Size,   mbstate_t * _State);
extern "C++" { template <size_t _Size> inline errno_t __cdecl wcsrtombs_s(  size_t * _Retval,     char (&_Dest)[_Size],        const wchar_t ** _PSrc,   size_t _Count,   mbstate_t * _State) throw() { return wcsrtombs_s(_Retval, _Dest, _Size, _PSrc, _Count, _State); } }
 __declspec(dllimport) size_t __cdecl wcsrtombs(  char *_Dest,  const wchar_t ** _PSource,  size_t _Count,  mbstate_t * _State);
__declspec(dllimport) int __cdecl wctob(  wint_t _WCh);






#line 1187 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\wchar.h"
__declspec(dllimport)  void *  __cdecl memmove(    void * _Dst,    const void * _Src,   size_t _Size);
#line 1189 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\wchar.h"
 void *  __cdecl memcpy(    void * _Dst,    const void * _Src,   size_t _Size);

__declspec(dllimport) errno_t __cdecl memcpy_s(    void * _Dst,   rsize_t _DstSize,    const void * _Src,   rsize_t _MaxCount);
__declspec(dllimport) errno_t __cdecl memmove_s(    void * _Dst,   rsize_t _DstSize,    const void * _Src,   rsize_t _MaxCount);
#line 1194 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\wchar.h"
__inline int __cdecl fwide(   FILE * _F, int _M)
        {(void)_F; return (_M); }
__inline int __cdecl mbsinit(   const mbstate_t *_P)
        {return (_P == 0 || *_P == 0); }
__inline const wchar_t * __cdecl wmemchr(   const wchar_t *_S,   wchar_t _C,   size_t _N)
        {for (; 0 < _N; ++_S, --_N)
                if (*_S == _C)
                        return (const wchar_t *)(_S);
        return (0); }
__inline int __cdecl wmemcmp(   const wchar_t *_S1,    const wchar_t *_S2,   size_t _N)
        {for (; 0 < _N; ++_S1, ++_S2, --_N)
                if (*_S1 != *_S2)
                        return (*_S1 < *_S2 ? -1 : +1);
        return (0); }

__inline  wchar_t * __cdecl wmemcpy(  wchar_t *_S1,    const wchar_t *_S2,   size_t _N)
        {
#pragma warning( push )
#pragma warning( disable : 4996 6386 )
            return (wchar_t *)memcpy(_S1, _S2, _N*sizeof(wchar_t));
#pragma warning( pop )
        }

__inline  wchar_t * __cdecl wmemmove(    wchar_t *_S1,    const wchar_t *_S2,   size_t _N)
        {
#pragma warning( push )
#pragma warning( disable : 4996 6386 )
#pragma warning( disable : 6387)
			
            return (wchar_t *)memmove(_S1, _S2, _N*sizeof(wchar_t));
#pragma warning( pop )
        }


errno_t __cdecl wmemcpy_s(    wchar_t *_S1,   rsize_t _N1,    const wchar_t *_S2, rsize_t _N);
errno_t __cdecl wmemmove_s(    wchar_t *_S1,   rsize_t _N1,    const wchar_t *_S2,   rsize_t _N);
#line 1231 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\wchar.h"

__inline wchar_t * __cdecl wmemset(    wchar_t *_S,   wchar_t _C,   size_t _N)
        {
            wchar_t *_Su = _S;
            for (; 0 < _N; ++_Su, --_N)
            {
                *_Su = _C;
            }
            return (_S);
        }


extern "C++" {
inline wchar_t * __cdecl wmemchr(   wchar_t *_S,   wchar_t _C,   size_t _N)
        { return (wchar_t *)wmemchr((const wchar_t *)_S, _C, _N); }
}
#line 1248 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\wchar.h"
#line 1249 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\wchar.h"


}       
#line 1253 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\wchar.h"

#pragma pack(pop)

#line 1257 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\wchar.h"

#line 14 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\cwchar"
#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\cwchar"

typedef mbstate_t _Mbstatet;

 
namespace std {
using :: _Mbstatet;

using :: mbstate_t; using :: size_t;
using :: tm; using :: wint_t;

using :: btowc; using :: fgetwc; using :: fgetws; using :: fputwc;
using :: fputws; using :: fwide; using :: fwprintf;
using :: fwscanf; using :: getwc; using :: getwchar;
using :: mbrlen; using :: mbrtowc; using :: mbsrtowcs;
using :: mbsinit; using :: putwc; using :: putwchar;
using :: swprintf; using :: swscanf; using :: ungetwc;
using :: vfwprintf; using :: vswprintf; using :: vwprintf;
using :: wcrtomb; using :: wprintf; using :: wscanf;
using :: wcsrtombs; using :: wcstol; using :: wcscat;
using :: wcschr; using :: wcscmp; using :: wcscoll;
using :: wcscpy; using :: wcscspn; using :: wcslen;
using :: wcsncat; using :: wcsncmp; using :: wcsncpy;
using :: wcspbrk; using :: wcsrchr; using :: wcsspn;

using :: wcstod; using :: wcstoul; using :: wcsstr;

using :: wcstok; using :: wcsxfrm; using :: wctob;
using :: wmemchr; using :: wmemcmp; using :: wmemcpy;
using :: wmemmove; using :: wmemset; using :: wcsftime;
}
 #line 46 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\cwchar"

#line 48 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\cwchar"





#line 9 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\iosfwd"


#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\crtdbg.h"











#pragma once

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"














 








































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\crtdbg.h"




#pragma pack(push,8)












extern "C" {
#line 34 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\crtdbg.h"

 





typedef void *_HFILE; 

















#line 60 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\crtdbg.h"





#line 66 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\crtdbg.h"


typedef int (__cdecl * _CRT_REPORT_HOOK)(int, char *, int *);
typedef int (__cdecl * _CRT_REPORT_HOOKW)(int, wchar_t *, int *);



#line 74 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\crtdbg.h"




#line 79 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\crtdbg.h"




 





 










typedef int (__cdecl * _CRT_ALLOC_HOOK)(int, void *, size_t, int, long, const unsigned char *, int);


#line 104 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\crtdbg.h"


#line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\crtdbg.h"

 





































 














typedef void (__cdecl * _CRT_DUMP_CLIENT)(void *, size_t);


#line 165 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\crtdbg.h"


#line 168 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\crtdbg.h"

struct _CrtMemBlockHeader;
typedef struct _CrtMemState
{
        struct _CrtMemBlockHeader * pBlockHeader;
        size_t lCounts[5];
        size_t lSizes[5];
        size_t lHighWaterCount;
        size_t lTotalCount;
} _CrtMemState;


 















 













#line 211 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\crtdbg.h"



#line 215 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\crtdbg.h"



#line 219 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\crtdbg.h"



#line 223 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\crtdbg.h"





























































































































































































































































































































































































































































































































































































































































































































































































































#line 1021 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\crtdbg.h"


}



extern "C++" {



 







 
#pragma warning(suppress: 4985)
 void * __cdecl operator new[](size_t _Size);


 void * __cdecl operator new(
        size_t _Size,
        int,
        const char *,
        int
        );

#pragma warning(suppress: 4985)
 void * __cdecl operator new[](
        size_t _Size,
        int,
        const char *,
        int
        );

void __cdecl operator delete[](void *);

inline void __cdecl operator delete(void * _P, int, const char *, int)
        { ::operator delete(_P); }
inline void __cdecl operator delete[](void * _P, int, const char *, int)
        { ::operator delete[](_P); }
#line 1066 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\crtdbg.h"
























































#line 1123 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\crtdbg.h"

}

#line 1127 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\crtdbg.h"

#line 1129 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\crtdbg.h"

#pragma pack(pop)

#line 1133 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\crtdbg.h"

#line 12 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\iosfwd"

 #pragma pack(push,8)
 #pragma warning(push,3)

namespace std {
		

typedef _Longlong streamoff;
typedef _Longlong streamsize;

  
  

  


extern __declspec(dllimport)  const streamoff _BADOFF;
  #line 30 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\iosfwd"

		
template<class _Statetype>
	class fpos
	{	
	typedef fpos<_Statetype> _Myt;

public:
	 fpos(streamoff _Off = 0)
		: _Myoff(_Off), _Fpos(0), _Mystate(_Stz)
		{	
		}

	 fpos(_Statetype _State, fpos_t _Fileposition)
		: _Myoff(0), _Fpos(_Fileposition), _Mystate(_State)
		{	
		}

	_Statetype  state() const
		{	
		return (_Mystate);
		}

	void  state(_Statetype _State)
		{	
		_Mystate = _State;
		}

	fpos_t  seekpos() const
		{	
		return (_Fpos);
		}

	 operator streamoff() const
		{	
		return ((streamoff)(_Myoff + ((long)(_Fpos))));
		}

	streamoff  operator-(const _Myt& _Right) const
		{	
		return ((streamoff)*this - (streamoff)_Right);
		}

	_Myt&  operator+=(streamoff _Off)
		{	
		_Myoff += _Off;
		return (*this);
		}

	_Myt&  operator-=(streamoff _Off)
		{	
		_Myoff -= _Off;
		return (*this);
		}

	_Myt  operator+(streamoff _Off) const
		{	
		_Myt _Tmp = *this;
		return (_Tmp += _Off);
		}

	_Myt  operator-(streamoff _Off) const
		{	
		_Myt _Tmp = *this;
		return (_Tmp -= _Off);
		}

	bool  operator==(const _Myt& _Right) const
		{	
		return ((streamoff)*this == (streamoff)_Right);
		}

	bool  operator==(streamoff _Right) const
		{	
		return ((streamoff)*this == _Right);
		}

	bool  operator!=(const _Myt& _Right) const
		{	
		return (!(*this == _Right));
		}

private:
	 static const _Statetype _Stz;	
	streamoff _Myoff;	
	fpos_t _Fpos;	
	_Statetype _Mystate;	
	};

	
template<class _Statetype>
	 const _Statetype fpos<_Statetype>::_Stz = _Statetype();

 

 
 

typedef fpos<_Mbstatet> streampos;

typedef streampos wstreampos;

		
template<class _Elem,
	class _Int_type>
	struct _Char_traits
	{	
	typedef _Elem char_type;
	typedef _Int_type int_type;
	typedef streampos pos_type;
	typedef streamoff off_type;
	typedef _Mbstatet state_type;

	static int __cdecl compare(
		   const _Elem *_First1,
		   const _Elem *_First2, size_t _Count)
		{	
		for (; 0 < _Count; --_Count, ++_First1, ++_First2)
			if (!eq(*_First1, *_First2))
				return (lt(*_First1, *_First2) ? -1 : +1);
		return (0);
		}

	static size_t __cdecl length(   const _Elem *_First)
		{	
		size_t _Count;
		for (_Count = 0; !eq(*_First, _Elem()); ++_First)
			++_Count;
		return (_Count);
		}

	static _Elem *__cdecl copy(
		  _Elem *_First1,
		   const _Elem *_First2, size_t _Count)
		{	
		_Elem *_Next = _First1;
		for (; 0 < _Count; --_Count, ++_Next, ++_First2)
			assign(*_Next, *_First2);
		return (_First1);
		}

	static _Elem *__cdecl _Copy_s(
		  _Elem *_First1, size_t _Dest_size,
		   const _Elem *_First2, size_t _Count)
		{	
		{ if (!(_Dest_size >= _Count)) { ((void)0); ::_invalid_parameter_noinfo_noreturn(); return (0); } };
		return (copy(_First1, _First2, _Count));
		}

	static const _Elem *__cdecl find(
		   const _Elem *_First,
		size_t _Count, const _Elem& _Ch)
		{	
		for (; 0 < _Count; --_Count, ++_First)
			if (eq(*_First, _Ch))
				return (_First);
		return (0);
		}

	static _Elem *__cdecl move(
		  _Elem *_First1,
		   const _Elem *_First2, size_t _Count)
		{	
		_Elem *_Next = _First1;
		if (_First2 < _Next && _Next < _First2 + _Count)
			for (_Next += _Count, _First2 += _Count; 0 < _Count; --_Count)
				assign(*--_Next, *--_First2);
		else
			for (; 0 < _Count; --_Count, ++_Next, ++_First2)
				assign(*_Next, *_First2);
		return (_First1);
		}

	static _Elem *__cdecl assign(
		  _Elem *_First,
		size_t _Count, _Elem _Ch)
		{	
		_Elem *_Next = _First;
		for (; 0 < _Count; --_Count, ++_Next)
			assign(*_Next, _Ch);
		return (_First);
		}

	static void __cdecl assign(_Elem& _Left, const _Elem& _Right)
		{	
		_Left = _Right;
		}

	static bool __cdecl eq(const _Elem& _Left, const _Elem& _Right)
		{	
		return (_Left == _Right);
		}

	static bool __cdecl lt(const _Elem& _Left, const _Elem& _Right)
		{	
		return (_Left < _Right);
		}

	static _Elem __cdecl to_char_type(const int_type& _Meta)
		{	
		return ((_Elem)_Meta);
		}

	static int_type __cdecl to_int_type(const _Elem& _Ch)
		{	
		return ((int_type)_Ch);
		}

	static bool __cdecl eq_int_type(const int_type& _Left,
		const int_type& _Right)
		{	
		return (_Left == _Right);
		}

	static int_type __cdecl not_eof(const int_type& _Meta)
		{	
		return (_Meta != eof() ? (int_type)_Meta : (int_type)!eof());
		}

	static int_type __cdecl eof()
		{	
		return ((int_type)(-1));
		}
	};

		
template<class _Elem>
	struct char_traits
		: public _Char_traits<_Elem, long>
	{	
	};

 













#line 277 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\iosfwd"

		
template<>
	struct char_traits<wchar_t>
	{	
	typedef wchar_t _Elem;
	typedef _Elem char_type;	
	typedef wint_t int_type;
	typedef streampos pos_type;
	typedef streamoff off_type;
	typedef _Mbstatet state_type;

	static int __cdecl compare(const _Elem *_First1, const _Elem *_First2,
		size_t _Count)
		{	
		return (:: wmemcmp(_First1, _First2, _Count));
		}

	static size_t __cdecl length(const _Elem *_First)
		{	
		return (:: wcslen(_First));
		}

	static _Elem *__cdecl copy(_Elem *_First1, const _Elem *_First2,
		size_t _Count)
		{	
		return ((_Elem *):: wmemcpy(_First1, _First2, _Count));
		}

	static _Elem *__cdecl _Copy_s(
		  _Elem *_First1, size_t _Size_in_words,
		   const _Elem *_First2, size_t _Count)
		{	
		::wmemcpy_s((_First1), (_Size_in_words), (_First2), (_Count));
		return _First1;
		}

	static const _Elem *__cdecl find(const _Elem *_First, size_t _Count,
		const _Elem& _Ch)
		{	
		return ((const _Elem *):: wmemchr(_First, _Ch, _Count));
		}

	static _Elem *__cdecl move(_Elem *_First1, const _Elem *_First2,
		size_t _Count)
		{	
		return ((_Elem *):: wmemmove(_First1, _First2, _Count));
		}

	static _Elem *__cdecl assign(_Elem *_First, size_t _Count, _Elem _Ch)
		{	
		return ((_Elem *):: wmemset(_First, _Ch, _Count));
		}

	static void __cdecl assign(_Elem& _Left, const _Elem& _Right)
		{	
		_Left = _Right;
		}

	static bool __cdecl eq(const _Elem& _Left, const _Elem& _Right)
		{	
		return (_Left == _Right);
		}

	static bool __cdecl lt(const _Elem& _Left, const _Elem& _Right)
		{	
		return (_Left < _Right);
		}

	static _Elem __cdecl to_char_type(const int_type& _Meta)
		{	
		return (_Meta);
		}

	static int_type __cdecl to_int_type(const _Elem& _Ch)
		{	
		return (_Ch);
		}

	static bool __cdecl eq_int_type(const int_type& _Left,
		const int_type& _Right)
		{	
		return (_Left == _Right);
		}

	static int_type __cdecl not_eof(const int_type& _Meta)
		{	
		return (_Meta != eof() ? _Meta : !eof());
		}

	static int_type __cdecl eof()
		{	
		return ((wint_t)(0xFFFF));
		}
	};

 
		
template<> struct char_traits<unsigned short>
	{	
	typedef unsigned short _Elem;
	typedef _Elem char_type;	
	typedef wint_t int_type;
	typedef streampos pos_type;
	typedef streamoff off_type;
	typedef _Mbstatet state_type;

	static int __cdecl compare(const _Elem *_First1, const _Elem *_First2,
		size_t _Count)
		{	
		return (:: wmemcmp((const wchar_t *)_First1,
			(const wchar_t *)_First2, _Count));
		}

	static size_t __cdecl length(const _Elem *_First)
		{	
		return (:: wcslen((const wchar_t *)_First));
		}

	static _Elem *__cdecl copy(_Elem *_First1, const _Elem *_First2,
		size_t _Count)
		{	
		return ((_Elem *):: wmemcpy((wchar_t *)_First1,
			(const wchar_t *)_First2, _Count));
		}

	static _Elem *__cdecl _Copy_s(
		  _Elem *_First1, size_t _Size_in_words,
		   const _Elem *_First2, size_t _Count)
		{	
		::wmemcpy_s(((wchar_t *)_First1), (_Size_in_words), ((const wchar_t *)_First2), (_Count));
		return _First1;
		}

	static const _Elem *__cdecl find(const _Elem *_First, size_t _Count,
		const _Elem& _Ch)
		{	
		return ((const _Elem *):: wmemchr((const wchar_t *)_First,
			_Ch, _Count));
		}

	static _Elem *__cdecl move(_Elem *_First1, const _Elem *_First2,
		size_t _Count)
		{	
		return ((_Elem *):: wmemmove((wchar_t *)_First1,
			(const wchar_t *)_First2, _Count));
		}

	static _Elem *__cdecl assign(_Elem *_First, size_t _Count, _Elem _Ch)
		{	
		return ((_Elem *):: wmemset((wchar_t *)_First, _Ch, _Count));
		}

	static void __cdecl assign(_Elem& _Left, const _Elem& _Right)
		{	
		_Left = _Right;
		}

	static bool __cdecl eq(const _Elem& _Left, const _Elem& _Right)
		{	
		return (_Left == _Right);
		}

	static bool __cdecl lt(const _Elem& _Left, const _Elem& _Right)
		{	
		return (_Left < _Right);
		}

	static _Elem __cdecl to_char_type(const int_type& _Meta)
		{	
		return (_Meta);
		}

	static int_type __cdecl to_int_type(const _Elem& _Ch)
		{	
		return (_Ch);
		}

	static bool __cdecl eq_int_type(const int_type& _Left,
		const int_type& _Right)
		{	
		return (_Left == _Right);
		}

	static int_type __cdecl not_eof(const int_type& _Meta)
		{	
		return (_Meta != eof() ? _Meta : !eof());
		}

	static int_type __cdecl eof()
		{	
		return ((wint_t)(0xFFFF));
		}
	};
 #line 472 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\iosfwd"

		
template<> struct char_traits<char>
	{	
	typedef char _Elem;
	typedef _Elem char_type;
	typedef int int_type;
	typedef streampos pos_type;
	typedef streamoff off_type;
	typedef _Mbstatet state_type;

	static int __cdecl compare(const _Elem *_First1, const _Elem *_First2,
		size_t _Count)
		{	
		return (:: memcmp(_First1, _First2, _Count));
		}

	static size_t __cdecl length(const _Elem *_First)
		{	
		return (:: strlen(_First));
		}

	static _Elem *__cdecl copy(_Elem *_First1, const _Elem *_First2,
		size_t _Count)
		{	
		return ((_Elem *):: memcpy(_First1, _First2, _Count));
		}

	static _Elem *__cdecl _Copy_s(
		  _Elem *_First1, size_t _Size_in_bytes,
		   const _Elem *_First2, size_t _Count)
		{	
		::memcpy_s((_First1), (_Size_in_bytes), (_First2), (_Count));
		return _First1;
		}

	static const _Elem *__cdecl find(const _Elem *_First, size_t _Count,
		const _Elem& _Ch)
		{	
		return ((const _Elem *):: memchr(_First, _Ch, _Count));
		}

	static _Elem *__cdecl move(_Elem *_First1, const _Elem *_First2,
		size_t _Count)
		{	
		return ((_Elem *):: memmove(_First1, _First2, _Count));
		}

	static _Elem *__cdecl assign(_Elem *_First, size_t _Count, _Elem _Ch)
		{	
		return ((_Elem *):: memset(_First, _Ch, _Count));
		}

	static void __cdecl assign(_Elem& _Left, const _Elem& _Right)
		{	
		_Left = _Right;
		}

	static bool __cdecl eq(const _Elem& _Left, const _Elem& _Right)
		{	
		return (_Left == _Right);
		}

	static bool __cdecl lt(const _Elem& _Left, const _Elem& _Right)
		{	
		return ((unsigned char)_Left < (unsigned char)_Right);
		}

	static _Elem __cdecl to_char_type(const int_type& _Meta)
		{	
		return ((_Elem)_Meta);
		}

	static int_type __cdecl to_int_type(const _Elem& _Ch)
		{	
		return ((unsigned char)_Ch);
		}

	static bool __cdecl eq_int_type(const int_type& _Left,
		const int_type& _Right)
		{	
		return (_Left == _Right);
		}

	static int_type __cdecl not_eof(const int_type& _Meta)
		{	
		return (_Meta != eof() ? _Meta : !eof());
		}

	static int_type __cdecl eof()
		{	
		return ((-1));
		}
	};

		
template<class _Ty>
	class allocator;
class ios_base;
template<class _Elem,
	class _Traits = char_traits<_Elem> >
	class basic_ios;
template<class _Elem,
	class _Traits = char_traits<_Elem> >
	class istreambuf_iterator;
template<class _Elem,
	class _Traits = char_traits<_Elem> >
	class ostreambuf_iterator;
template<class _Elem,
	class _Traits = char_traits<_Elem> >
	class basic_streambuf;
template<class _Elem,
	class _Traits = char_traits<_Elem> >
	class basic_istream;
template<class _Elem,
	class _Traits = char_traits<_Elem> >
	class basic_ostream;
template<class _Elem,
	class _Traits = char_traits<_Elem> >
	class basic_iostream;
template<class _Elem,
	class _Traits = char_traits<_Elem>,
	class _Alloc = allocator<_Elem> >
	class basic_stringbuf;
template<class _Elem,
	class _Traits = char_traits<_Elem>,
	class _Alloc = allocator<_Elem> >
	class basic_istringstream;
template<class _Elem,
	class _Traits = char_traits<_Elem>,
	class _Alloc = allocator<_Elem> >
	class basic_ostringstream;
template<class _Elem,
	class _Traits = char_traits<_Elem>,
	class _Alloc = allocator<_Elem> >
	class basic_stringstream;
template<class _Elem,
	class _Traits = char_traits<_Elem> >
	class basic_filebuf;
template<class _Elem,
	class _Traits = char_traits<_Elem> >
	class basic_ifstream;
template<class _Elem,
	class _Traits = char_traits<_Elem> >
	class basic_ofstream;
template<class _Elem,
	class _Traits = char_traits<_Elem> >
	class basic_fstream;

 
template<class _Elem,
	class _InIt >
	class num_get;
template<class _Elem,
	class _OutIt >
	class num_put;
template<class _Elem>
	class collate;
 #line 631 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\iosfwd"

		
typedef basic_ios<char, char_traits<char> > ios;
typedef basic_streambuf<char, char_traits<char> > streambuf;
typedef basic_istream<char, char_traits<char> > istream;
typedef basic_ostream<char, char_traits<char> > ostream;
typedef basic_iostream<char, char_traits<char> > iostream;
typedef basic_stringbuf<char, char_traits<char>,
	allocator<char> > stringbuf;
typedef basic_istringstream<char, char_traits<char>,
	allocator<char> > istringstream;
typedef basic_ostringstream<char, char_traits<char>,
	allocator<char> > ostringstream;
typedef basic_stringstream<char, char_traits<char>,
	allocator<char> > stringstream;
typedef basic_filebuf<char, char_traits<char> > filebuf;
typedef basic_ifstream<char, char_traits<char> > ifstream;
typedef basic_ofstream<char, char_traits<char> > ofstream;
typedef basic_fstream<char, char_traits<char> > fstream;

		
typedef basic_ios<wchar_t, char_traits<wchar_t> > wios;
typedef basic_streambuf<wchar_t, char_traits<wchar_t> >
	wstreambuf;
typedef basic_istream<wchar_t, char_traits<wchar_t> > wistream;
typedef basic_ostream<wchar_t, char_traits<wchar_t> > wostream;
typedef basic_iostream<wchar_t, char_traits<wchar_t> > wiostream;
typedef basic_stringbuf<wchar_t, char_traits<wchar_t>,
	allocator<wchar_t> > wstringbuf;
typedef basic_istringstream<wchar_t, char_traits<wchar_t>,
	allocator<wchar_t> > wistringstream;
typedef basic_ostringstream<wchar_t, char_traits<wchar_t>,
	allocator<wchar_t> > wostringstream;
typedef basic_stringstream<wchar_t, char_traits<wchar_t>,
	allocator<wchar_t> > wstringstream;
typedef basic_filebuf<wchar_t, char_traits<wchar_t> > wfilebuf;
typedef basic_ifstream<wchar_t, char_traits<wchar_t> > wifstream;
typedef basic_ofstream<wchar_t, char_traits<wchar_t> > wofstream;
typedef basic_fstream<wchar_t, char_traits<wchar_t> > wfstream;


 
typedef num_get<char, istreambuf_iterator<char, char_traits<char> > >
	numget;
typedef num_get<wchar_t, istreambuf_iterator<wchar_t, char_traits<wchar_t> > >
	wnumget;
typedef num_put<char, ostreambuf_iterator<char, char_traits<char> > >
	numput;
typedef num_put<wchar_t, ostreambuf_iterator<wchar_t, char_traits<wchar_t> > >
	wnumput;
typedef collate<char> ncollate;
typedef collate<wchar_t> wcollate;
 #line 684 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\iosfwd"
}

 #pragma warning(pop)
 #pragma pack(pop)

#line 690 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\iosfwd"
#line 691 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\iosfwd"





#line 8 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\utility"

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\type_traits"

#pragma once



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\limits"

#pragma once



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\ymath.h"

#pragma once





 
extern "C" {
 #line 11 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\ymath.h"


#pragma pack(push, 8)

		





		






		
typedef union
	{	
	unsigned short _Word[8];
	float _Float;
	double _Double;
	long double _Long_double;
	} _Dconst;

		
void __cdecl _Feraise(int);

		
__declspec(dllimport) double __cdecl _Cosh(double, double);
__declspec(dllimport) short __cdecl _Dtest(double *);
__declspec(dllimport) short __cdecl _Exp(double *, double, short);
__declspec(dllimport) double __cdecl _Sinh(double, double);
extern __declspec(dllimport)  _Dconst _Denorm, _Hugeval, _Inf,
	_Nan, _Snan;

		
__declspec(dllimport) float __cdecl _FCosh(float, float);
__declspec(dllimport) short __cdecl _FDtest(float *);
__declspec(dllimport) short __cdecl _FExp(float *, float, short);
__declspec(dllimport) float __cdecl _FSinh(float, float);
extern __declspec(dllimport)  _Dconst _FDenorm, _FInf, _FNan, _FSnan;

		
__declspec(dllimport) long double __cdecl _LCosh(long double, long double);
__declspec(dllimport) short __cdecl _LDtest(long double *);
__declspec(dllimport) short __cdecl _LExp(long double *, long double, short);
__declspec(dllimport) long double __cdecl _LSinh(long double, long double);
extern __declspec(dllimport)  _Dconst _LDenorm, _LInf, _LNan, _LSnan;

 
}
 #line 65 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\ymath.h"


#pragma pack(pop)

#line 70 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\ymath.h"
#line 71 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\ymath.h"





#line 7 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\limits"
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\cfloat"

#pragma once




#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\float.h"















#pragma once




#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"














 








































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 22 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\float.h"
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\crtwrn.h"











#pragma once




#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"














 








































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 18 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\crtwrn.h"






























































#line 81 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\crtwrn.h"
#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\float.h"








#line 32 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\float.h"

#line 34 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\float.h"
#line 35 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\float.h"
#line 36 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\float.h"


extern "C" {
#line 40 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\float.h"











































 __declspec(dllimport) unsigned int __cdecl _clearfp(void);
#pragma warning(push)
#pragma warning(disable: 4141)
  __declspec(dllimport) unsigned int __cdecl _controlfp(  unsigned int _NewValue,  unsigned int _Mask);
#pragma warning(pop)
 __declspec(dllimport) void __cdecl _set_controlfp(  unsigned int _NewValue,   unsigned int _Mask);
 __declspec(dllimport) errno_t __cdecl _controlfp_s(  unsigned int *_CurrentState,   unsigned int _NewValue,   unsigned int _Mask);
 __declspec(dllimport) unsigned int __cdecl _statusfp(void);
 __declspec(dllimport) void __cdecl _fpreset(void);



#line 96 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\float.h"


































































#line 163 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\float.h"



#line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\float.h"



#line 171 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\float.h"

 __declspec(dllimport) unsigned int __cdecl _control87(  unsigned int _NewValue,  unsigned int _Mask);



#line 177 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\float.h"



 __declspec(dllimport) extern int * __cdecl __fpecode(void);



































 __declspec(dllimport) double __cdecl _scalb(  double _X,   long _Y);
 __declspec(dllimport) double __cdecl _logb(  double _X);
 __declspec(dllimport) double __cdecl _nextafter(  double _X,   double _Y);
 __declspec(dllimport) int    __cdecl _finite(  double _X);
 __declspec(dllimport) int    __cdecl _isnan(  double _X);
 __declspec(dllimport) int    __cdecl _fpclass(  double _X);


 __declspec(dllimport) float __cdecl _scalbf(  float _X,   long _Y);
#line 226 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\float.h"





















 __declspec(dllimport) void __cdecl fpreset(void);





























































#line 310 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\float.h"


}
#line 314 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\float.h"

#line 316 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\float.h"
#line 8 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\cfloat"

#line 10 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\cfloat"





#line 8 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\limits"





 #pragma pack(push,8)
 #pragma warning(push,3)

namespace std {










 

		
typedef enum
	{	
	denorm_indeterminate = -1,
	denorm_absent = 0,
	denorm_present = 1}
		float_denorm_style;

		
typedef enum
	{	
	round_indeterminate = -1,
	round_toward_zero = 0,
	round_to_nearest = 1,
	round_toward_infinity = 2,
	round_toward_neg_infinity = 3}
		float_round_style;

		
struct __declspec(dllimport) _Num_base
	{	
	static const float_denorm_style has_denorm = (float_denorm_style)(denorm_absent);
	static const bool has_denorm_loss = (bool)(false);
	static const bool has_infinity = (bool)(false);
	static const bool has_quiet_NaN = (bool)(false);
	static const bool has_signaling_NaN = (bool)(false);
	static const bool is_bounded = (bool)(false);
	static const bool is_exact = (bool)(false);
	static const bool is_iec559 = (bool)(false);
	static const bool is_integer = (bool)(false);
	static const bool is_modulo = (bool)(false);
	static const bool is_signed = (bool)(false);
	static const bool is_specialized = (bool)(false);
	static const bool tinyness_before = (bool)(false);
	static const bool traps = (bool)(false);
	static const float_round_style round_style = (float_round_style)(round_toward_zero);
	static const int digits = (int)(0);
	static const int digits10 = (int)(0);

 
	static const int max_digits10 = (int)(0);
 #line 71 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\limits"

	static const int max_exponent = (int)(0);
	static const int max_exponent10 = (int)(0);
	static const int min_exponent = (int)(0);
	static const int min_exponent10 = (int)(0);
	static const int radix = (int)(0);
	};

		
template<class _Ty>
	class numeric_limits
		: public _Num_base
	{	
public:
	static _Ty (__cdecl min)() throw ()
		{	
		return (_Ty(0));
		}

	static _Ty (__cdecl max)() throw ()
		{	
		return (_Ty(0));
		}

 
	static _Ty __cdecl lowest() throw ()
		{	
		return ((min)());
		}
 #line 101 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\limits"

	static _Ty __cdecl epsilon() throw ()
		{	
		return (_Ty(0));
		}

	static _Ty __cdecl round_error() throw ()
		{	
		return (_Ty(0));
		}

	static _Ty __cdecl denorm_min() throw ()
		{	
		return (_Ty(0));
		}

	static _Ty __cdecl infinity() throw ()
		{	
		return (_Ty(0));
		}

	static _Ty __cdecl quiet_NaN() throw ()
		{	
		return (_Ty(0));
		}

	static _Ty __cdecl signaling_NaN() throw ()
		{	
		return (_Ty(0));
		}
	};

template<class _Ty>
	class numeric_limits<const _Ty>
		: public numeric_limits<_Ty>
	{	
	};

template<class _Ty>
	class numeric_limits<volatile _Ty>
		: public numeric_limits<_Ty>
	{	
	};

template<class _Ty>
	class numeric_limits<const volatile _Ty>
		: public numeric_limits<_Ty>
	{	
	};

		
struct __declspec(dllimport) _Num_int_base
	: public _Num_base
	{	
	static const bool is_bounded = (bool)(true);
	static const bool is_exact = (bool)(true);
	static const bool is_integer = (bool)(true);
	static const bool is_modulo = (bool)(true);
	static const bool is_specialized = (bool)(true);
	static const int radix = (int)(2);
	};

		
struct __declspec(dllimport) _Num_float_base
	: public _Num_base
	{	
	static const float_denorm_style has_denorm = (float_denorm_style)(denorm_present);
	static const bool has_denorm_loss = (bool)(true);
	static const bool has_infinity = (bool)(true);
	static const bool has_quiet_NaN = (bool)(true);
	static const bool has_signaling_NaN = (bool)(true);
	static const bool is_bounded = (bool)(true);
	static const bool is_exact = (bool)(false);
	static const bool is_iec559 = (bool)(true);
	static const bool is_integer = (bool)(false);
	static const bool is_modulo = (bool)(false);
	static const bool is_signed = (bool)(true);
	static const bool is_specialized = (bool)(true);
	static const bool tinyness_before = (bool)(true);
	static const bool traps = (bool)(true);
	static const float_round_style round_style = (float_round_style)(round_to_nearest);
	static const int radix = (int)(2);
	};

		
template<> class __declspec(dllimport) numeric_limits<char>
	: public _Num_int_base
	{	
public:
	typedef char _Ty;

	static _Ty (__cdecl min)() throw ()
		{	
		return ((-128));
		}

	static _Ty (__cdecl max)() throw ()
		{	
		return (127);
		}

 
	static _Ty __cdecl lowest() throw ()
		{	
		return ((min)());
		}
 #line 208 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\limits"

	static _Ty __cdecl epsilon() throw ()
		{	
		return (0);
		}

	static _Ty __cdecl round_error() throw ()
		{	
		return (0);
		}

	static _Ty __cdecl denorm_min() throw ()
		{	
		return (0);
		}

	static _Ty __cdecl infinity() throw ()
		{	
		return (0);
		}

	static _Ty __cdecl quiet_NaN() throw ()
		{	
		return (0);
		}

	static _Ty __cdecl signaling_NaN() throw ()
		{	
		return (0);
		}

	static const bool is_signed = (bool)((-128) != 0);
	static const int digits = (int)(8 - ((-128) != 0 ? 1 : 0));
	static const int digits10 = (int)((8 - ((-128) != 0 ? 1 : 0)) * 301L / 1000);
#line 243 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\limits"

 
	static const int max_digits10 = (int)(2 + (8 - ((-128) != 0 ? 1 : 0)) * 301L / 1000);
#line 247 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\limits"
 #line 248 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\limits"
	};

		
template<> class __declspec(dllimport) numeric_limits<wchar_t>
	: public _Num_int_base
	{	
public:
	typedef wchar_t _Ty;

	static _Ty (__cdecl min)() throw ()
		{	
		return ((_Ty)0x0000);
		}

	static _Ty (__cdecl max)() throw ()
		{	
		return ((_Ty)0xffff);
		}

 
	static _Ty __cdecl lowest() throw ()
		{	
		return ((min)());
		}
 #line 273 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\limits"

	static _Ty __cdecl epsilon() throw ()
		{	
		return (0);
		}

	static _Ty __cdecl round_error() throw ()
		{	
		return (0);
		}

	static _Ty __cdecl denorm_min() throw ()
		{	
		return (0);
		}

	static _Ty __cdecl infinity() throw ()
		{	
		return (0);
		}

	static _Ty __cdecl quiet_NaN() throw ()
		{	
		return (0);
		}

	static _Ty __cdecl signaling_NaN() throw ()
		{	
		return (0);
		}

	static const bool is_signed = (bool)(0x0000 != 0);
	static const int digits = (int)(8 * sizeof (wchar_t) - (0x0000 != 0 ? 1 : 0));
#line 307 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\limits"
	static const int digits10 = (int)((8 * sizeof (wchar_t) - (0x0000 != 0 ? 1 : 0)) * 301L / 1000);
#line 309 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\limits"

 
	static const int max_digits10 = (int)(2 + (8 * sizeof (wchar_t) - (0x0000 != 0 ? 1 : 0)) * 301L / 1000);
#line 313 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\limits"
 #line 314 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\limits"
	};

		
template<> class __declspec(dllimport) numeric_limits<_Bool>
	: public _Num_int_base
	{	
public:
	typedef bool _Ty;

	static _Ty (__cdecl min)() throw ()
		{	
		return (false);
		}

	static _Ty (__cdecl max)() throw ()
		{	
		return (true);
		}

 
	static _Ty __cdecl lowest() throw ()
		{	
		return ((min)());
		}
 #line 339 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\limits"

	static _Ty __cdecl epsilon() throw ()
		{	
		return (0);
		}

	static _Ty __cdecl round_error() throw ()
		{	
		return (0);
		}

	static _Ty __cdecl denorm_min() throw ()
		{	
		return (0);
		}

	static _Ty __cdecl infinity() throw ()
		{	
		return (0);
		}

	static _Ty __cdecl quiet_NaN() throw ()
		{	
		return (0);
		}

	static _Ty __cdecl signaling_NaN() throw ()
		{	
		return (0);
		}

	static const bool is_modulo = (bool)(false);
	static const bool is_signed = (bool)(false);
	static const int digits = (int)(1);
	static const int digits10 = (int)(0);

 
	static const int max_digits10 = (int)(0);
 #line 378 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\limits"
	};

		
template<> class __declspec(dllimport) numeric_limits<signed char>
	: public _Num_int_base
	{	
public:
	typedef signed char _Ty;

	static _Ty (__cdecl min)() throw ()
		{	
		return ((-128));
		}

	static _Ty (__cdecl max)() throw ()
		{	
		return (127);
		}

 
	static _Ty __cdecl lowest() throw ()
		{	
		return ((min)());
		}
 #line 403 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\limits"

	static _Ty __cdecl epsilon() throw ()
		{	
		return (0);
		}

	static _Ty __cdecl round_error() throw ()
		{	
		return (0);
		}

	static _Ty __cdecl denorm_min() throw ()
		{	
		return (0);
		}

	static _Ty __cdecl infinity() throw ()
		{	
		return (0);
		}

	static _Ty __cdecl quiet_NaN() throw ()
		{	
		return (0);
		}

	static _Ty __cdecl signaling_NaN() throw ()
		{	
		return (0);
		}

	static const bool is_signed = (bool)(true);
	static const int digits = (int)(8 - 1);
	static const int digits10 = (int)((8 - 1) * 301L / 1000);

 
	static const int max_digits10 = (int)(2 + (8 - 1) * 301L / 1000);
 #line 441 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\limits"
	};

		
template<> class __declspec(dllimport) numeric_limits<unsigned char>
	: public _Num_int_base
	{	
public:
	typedef unsigned char _Ty;

	static _Ty (__cdecl min)() throw ()
		{	
		return (0);
		}

	static _Ty (__cdecl max)() throw ()
		{	
		return (0xff);
		}

 
	static _Ty __cdecl lowest() throw ()
		{	
		return ((min)());
		}
 #line 466 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\limits"

	static _Ty __cdecl epsilon() throw ()
		{	
		return (0);
		}

	static _Ty __cdecl round_error() throw ()
		{	
		return (0);
		}

	static _Ty __cdecl denorm_min() throw ()
		{	
		return (0);
		}

	static _Ty __cdecl infinity() throw ()
		{	
		return (0);
		}

	static _Ty __cdecl quiet_NaN() throw ()
		{	
		return (0);
		}

	static _Ty __cdecl signaling_NaN() throw ()
		{	
		return (0);
		}

	static const bool is_signed = (bool)(false);
	static const int digits = (int)(8);
	static const int digits10 = (int)(8 * 301L / 1000);

 
	static const int max_digits10 = (int)(2 + (8) * 301L / 1000);
 #line 504 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\limits"
	};

		
template<> class __declspec(dllimport) numeric_limits<short>
	: public _Num_int_base
	{	
public:
	typedef short _Ty;

	static _Ty (__cdecl min)() throw ()
		{	
		return ((-32768));
		}

	static _Ty (__cdecl max)() throw ()
		{	
		return (32767);
		}

 
	static _Ty __cdecl lowest() throw ()
		{	
		return ((min)());
		}
 #line 529 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\limits"

	static _Ty __cdecl epsilon() throw ()
		{	
		return (0);
		}

	static _Ty __cdecl round_error() throw ()
		{	
		return (0);
		}

	static _Ty __cdecl denorm_min() throw ()
		{	
		return (0);
		}

	static _Ty __cdecl infinity() throw ()
		{	
		return (0);
		}

	static _Ty __cdecl quiet_NaN() throw ()
		{	
		return (0);
		}

	static _Ty __cdecl signaling_NaN() throw ()
		{	
		return (0);
		}

	static const bool is_signed = (bool)(true);
	static const int digits = (int)(8 * sizeof (short) - 1);
	static const int digits10 = (int)((8 * sizeof (short) - 1) * 301L / 1000);
#line 564 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\limits"

 
	static const int max_digits10 = (int)(2 + (8 * sizeof (short) - 1) * 301L / 1000);
#line 568 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\limits"
 #line 569 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\limits"
	};

 
		
template<> class __declspec(dllimport) numeric_limits<unsigned short>
	: public _Num_int_base
	{	
public:
	typedef unsigned short _Ty;

	static _Ty (__cdecl min)() throw ()
		{	
		return (0);
		}

	static _Ty (__cdecl max)() throw ()
		{	
		return (0xffff);
		}

 
	static _Ty __cdecl lowest() throw ()
		{	
		return ((min)());
		}
 #line 595 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\limits"

	static _Ty __cdecl epsilon() throw ()
		{	
		return (0);
		}

	static _Ty __cdecl round_error() throw ()
		{	
		return (0);
		}

	static _Ty __cdecl denorm_min() throw ()
		{	
		return (0);
		}

	static _Ty __cdecl infinity() throw ()
		{	
		return (0);
		}

	static _Ty __cdecl quiet_NaN() throw ()
		{	
		return (0);
		}

	static _Ty __cdecl signaling_NaN() throw ()
		{	
		return (0);
		}

	static const bool is_signed = (bool)(false);
	static const int digits = (int)(8 * sizeof (unsigned short));
	static const int digits10 = (int)(8 * sizeof (unsigned short) * 301L / 1000);
#line 630 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\limits"

 
	static const int max_digits10 = (int)(2 + (8 * sizeof (unsigned short)) * 301L / 1000);
#line 634 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\limits"
 #line 635 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\limits"
	};
 #line 637 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\limits"

 



























































#line 699 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\limits"

		
template<> class __declspec(dllimport) numeric_limits<int>
	: public _Num_int_base
	{	
public:
	typedef int _Ty;

	static _Ty (__cdecl min)() throw ()
		{	
		return ((-2147483647 - 1));
		}

	static _Ty (__cdecl max)() throw ()
		{	
		return (2147483647);
		}

 
	static _Ty __cdecl lowest() throw ()
		{	
		return ((min)());
		}
 #line 723 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\limits"

	static _Ty __cdecl epsilon() throw ()
		{	
		return (0);
		}

	static _Ty __cdecl round_error() throw ()
		{	
		return (0);
		}

	static _Ty __cdecl denorm_min() throw ()
		{	
		return (0);
		}

	static _Ty __cdecl infinity() throw ()
		{	
		return (0);
		}

	static _Ty __cdecl quiet_NaN() throw ()
		{	
		return (0);
		}

	static _Ty __cdecl signaling_NaN() throw ()
		{	
		return (0);
		}

	static const bool is_signed = (bool)(true);
	static const int digits = (int)(8 * sizeof (int) - 1);
	static const int digits10 = (int)((8 * sizeof (int) - 1) * 301L / 1000);
#line 758 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\limits"

 
	static const int max_digits10 = (int)(2 + (8 * sizeof (int) - 1) * 301L / 1000);
#line 762 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\limits"
 #line 763 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\limits"
	};

		
template<> class __declspec(dllimport) numeric_limits<unsigned int>
	: public _Num_int_base
	{	
public:
	typedef unsigned int _Ty;

	static _Ty (__cdecl min)() throw ()
		{	
		return (0);
		}

	static _Ty (__cdecl max)() throw ()
		{	
		return (0xffffffff);
		}

 
	static _Ty __cdecl lowest() throw ()
		{	
		return ((min)());
		}
 #line 788 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\limits"

	static _Ty __cdecl epsilon() throw ()
		{	
		return (0);
		}

	static _Ty __cdecl round_error() throw ()
		{	
		return (0);
		}

	static _Ty __cdecl denorm_min() throw ()
		{	
		return (0);
		}

	static _Ty __cdecl infinity() throw ()
		{	
		return (0);
		}

	static _Ty __cdecl quiet_NaN() throw ()
		{	
		return (0);
		}

	static _Ty __cdecl signaling_NaN() throw ()
		{	
		return (0);
		}

	static const bool is_signed = (bool)(false);
	static const int digits = (int)(8 * sizeof (unsigned int));
	static const int digits10 = (int)(8 * sizeof (unsigned int) * 301L / 1000);
#line 823 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\limits"

 
	static const int max_digits10 = (int)(2 + (8 * sizeof (unsigned int)) * 301L / 1000);
#line 827 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\limits"
 #line 828 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\limits"
	};

		
template<> class __declspec(dllimport) numeric_limits<long>
	: public _Num_int_base
	{	
public:
	typedef long _Ty;

	static _Ty (__cdecl min)() throw ()
		{	
		return ((-2147483647L - 1));
		}

	static _Ty (__cdecl max)() throw ()
		{	
		return (2147483647L);
		}

 
	static _Ty __cdecl lowest() throw ()
		{	
		return ((min)());
		}
 #line 853 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\limits"

	static _Ty __cdecl epsilon() throw ()
		{	
		return (0);
		}

	static _Ty __cdecl round_error() throw ()
		{	
		return (0);
		}

	static _Ty __cdecl denorm_min() throw ()
		{	
		return (0);
		}

	static _Ty __cdecl infinity() throw ()
		{	
		return (0);
		}

	static _Ty __cdecl quiet_NaN() throw ()
		{	
		return (0);
		}

	static _Ty __cdecl signaling_NaN() throw ()
		{	
		return (0);
		}

	static const bool is_signed = (bool)(true);
	static const int digits = (int)(8 * sizeof (long) - 1);
	static const int digits10 = (int)((8 * sizeof (long) - 1) * 301L / 1000);
#line 888 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\limits"

 
	static const int max_digits10 = (int)(2 + (8 * sizeof (long) - 1) * 301L / 1000);
#line 892 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\limits"
 #line 893 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\limits"
	};

		
template<> class __declspec(dllimport) numeric_limits<unsigned long>
	: public _Num_int_base
	{	
public:
	typedef unsigned long _Ty;

	static _Ty (__cdecl min)() throw ()
		{	
		return (0);
		}

	static _Ty (__cdecl max)() throw ()
		{	
		return (0xffffffffUL);
		}

 
	static _Ty __cdecl lowest() throw ()
		{	
		return ((min)());
		}
 #line 918 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\limits"

	static _Ty __cdecl epsilon() throw ()
		{	
		return (0);
		}

	static _Ty __cdecl round_error() throw ()
		{	
		return (0);
		}

	static _Ty __cdecl denorm_min() throw ()
		{	
		return (0);
		}

	static _Ty __cdecl infinity() throw ()
		{	
		return (0);
		}

	static _Ty __cdecl quiet_NaN() throw ()
		{	
		return (0);
		}

	static _Ty __cdecl signaling_NaN() throw ()
		{	
		return (0);
		}

	static const bool is_signed = (bool)(false);
	static const int digits = (int)(8 * sizeof (unsigned long));
	static const int digits10 = (int)(8 * sizeof (unsigned long) * 301L / 1000);
#line 953 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\limits"

 
	static const int max_digits10 = (int)(2 + (8 * sizeof (unsigned long)) * 301L / 1000);
#line 957 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\limits"
 #line 958 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\limits"
	};

 



























































#line 1021 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\limits"

 
		
template<> class __declspec(dllimport) numeric_limits<__int64>
	: public _Num_int_base
	{	
public:
	typedef __int64 _Ty;

	static _Ty (__cdecl min)() throw ()
		{	
		return (-0x7fffffffffffffff - 1);
		}

	static _Ty (__cdecl max)() throw ()
		{	
		return (0x7fffffffffffffff);
		}

 
	static _Ty __cdecl lowest() throw ()
		{	
		return ((min)());
		}
 #line 1046 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\limits"

	static _Ty __cdecl epsilon() throw ()
		{	
		return (0);
		}

	static _Ty __cdecl round_error() throw ()
		{	
		return (0);
		}

	static _Ty __cdecl denorm_min() throw ()
		{	
		return (0);
		}

	static _Ty __cdecl infinity() throw ()
		{	
		return (0);
		}

	static _Ty __cdecl quiet_NaN() throw ()
		{	
		return (0);
		}

	static _Ty __cdecl signaling_NaN() throw ()
		{	
		return (0);
		}

	static const bool is_signed = (bool)(true);
	static const int digits = (int)(8 * sizeof (__int64) - 1);
	static const int digits10 = (int)((8 * sizeof (__int64) - 1) * 301L / 1000);
#line 1081 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\limits"

 
	static const int max_digits10 = (int)(2 + (8 * sizeof (__int64) - 1) * 301L / 1000);
#line 1085 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\limits"
 #line 1086 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\limits"
	};

		
template<> class __declspec(dllimport) numeric_limits<unsigned __int64>
	: public _Num_int_base
	{	
public:
	typedef unsigned __int64 _Ty;

	static _Ty (__cdecl min)() throw ()
		{	
		return (0);
		}

	static _Ty (__cdecl max)() throw ()
		{	
		return (0xffffffffffffffff);
		}

 
	static _Ty __cdecl lowest() throw ()
		{	
		return ((min)());
		}
 #line 1111 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\limits"

	static _Ty __cdecl epsilon() throw ()
		{	
		return (0);
		}

	static _Ty __cdecl round_error() throw ()
		{	
		return (0);
		}

	static _Ty __cdecl denorm_min() throw ()
		{	
		return (0);
		}

	static _Ty __cdecl infinity() throw ()
		{	
		return (0);
		}

	static _Ty __cdecl quiet_NaN() throw ()
		{	
		return (0);
		}

	static _Ty __cdecl signaling_NaN() throw ()
		{	
		return (0);
		}

	static const bool is_signed = (bool)(false);
	static const int digits = (int)(8 * sizeof (unsigned __int64));
	static const int digits10 = (int)(8 * sizeof (unsigned __int64) * 301L / 1000);
#line 1146 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\limits"

 
	static const int max_digits10 = (int)(2 + (8 * sizeof (unsigned __int64)) * 301L / 1000);
#line 1150 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\limits"
 #line 1151 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\limits"
	};
 #line 1153 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\limits"

		
template<> class __declspec(dllimport) numeric_limits<float>
	: public _Num_float_base
	{	
public:
	typedef float _Ty;

	static _Ty (__cdecl min)() throw ()
		{	
		return (1.175494351e-38F);
		}

	static _Ty (__cdecl max)() throw ()
		{	
		return (3.402823466e+38F);
		}

 
	static _Ty __cdecl lowest() throw ()
		{	
		return (-(max)());
		}
 #line 1177 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\limits"

	static _Ty __cdecl epsilon() throw ()
		{	
		return (1.192092896e-07F);
		}

	static _Ty __cdecl round_error() throw ()
		{	
		return (0.5);
		}

	static _Ty __cdecl denorm_min() throw ()
		{	
		return (:: _FDenorm._Float);
		}

	static _Ty __cdecl infinity() throw ()
		{	
		return (:: _FInf._Float);
		}

	static _Ty __cdecl quiet_NaN() throw ()
		{	
		return (:: _FNan._Float);
		}

	static _Ty __cdecl signaling_NaN() throw ()
		{	
		return (:: _FSnan._Float);
		}

	static const int digits = (int)(24);
	static const int digits10 = (int)(6);

 
	static const int max_digits10 = (int)(2 + 6);
 #line 1214 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\limits"

	static const int max_exponent = (int)((int)128);
	static const int max_exponent10 = (int)((int)38);
	static const int min_exponent = (int)((int)(-125));
	static const int min_exponent10 = (int)((int)(-37));
	};

		
template<> class __declspec(dllimport) numeric_limits<double>
	: public _Num_float_base
	{	
public:
	typedef double _Ty;

	static _Ty (__cdecl min)() throw ()
		{	
		return (2.2250738585072014e-308);
		}

	static _Ty (__cdecl max)() throw ()
		{	
		return (1.7976931348623158e+308);
		}

 
	static _Ty __cdecl lowest() throw ()
		{	
		return (-(max)());
		}
 #line 1244 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\limits"

	static _Ty __cdecl epsilon() throw ()
		{	
		return (2.2204460492503131e-016);
		}

	static _Ty __cdecl round_error() throw ()
		{	
		return (0.5);
		}

	static _Ty __cdecl denorm_min() throw ()
		{	
		return (:: _Denorm._Double);
		}

	static _Ty __cdecl infinity() throw ()
		{	
		return (:: _Inf._Double);
		}

	static _Ty __cdecl quiet_NaN() throw ()
		{	
		return (:: _Nan._Double);
		}

	static _Ty __cdecl signaling_NaN() throw ()
		{	
		return (:: _Snan._Double);
		}

	static const int digits = (int)(53);
	static const int digits10 = (int)(15);

 
	static const int max_digits10 = (int)(2 + 15);
 #line 1281 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\limits"

	static const int max_exponent = (int)((int)1024);
	static const int max_exponent10 = (int)((int)308);
	static const int min_exponent = (int)((int)(-1021));
	static const int min_exponent10 = (int)((int)(-307));
	};

		
template<> class __declspec(dllimport) numeric_limits<long double>
	: public _Num_float_base
	{	
public:
	typedef long double _Ty;

	static _Ty (__cdecl min)() throw ()
		{	
		return (2.2250738585072014e-308);
		}

	static _Ty (__cdecl max)() throw ()
		{	
		return (1.7976931348623158e+308);
		}

 
	static _Ty __cdecl lowest() throw ()
		{	
		return (-(max)());
		}
 #line 1311 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\limits"

	static _Ty __cdecl epsilon() throw ()
		{	
		return (2.2204460492503131e-016);
		}

	static _Ty __cdecl round_error() throw ()
		{	
		return (0.5);
		}

	static _Ty __cdecl denorm_min() throw ()
		{	
		return (:: _LDenorm._Long_double);
		}

	static _Ty __cdecl infinity() throw ()
		{	
		return (:: _LInf._Long_double);
		}

	static _Ty __cdecl quiet_NaN() throw ()
		{	
		return (:: _LNan._Long_double);
		}

	static _Ty __cdecl signaling_NaN() throw ()
		{	
		return (:: _LSnan._Long_double);
		}

	static const int digits = (int)(53);
	static const int digits10 = (int)(15);

 
	static const int max_digits10 = (int)(2 + 15);
 #line 1348 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\limits"

	static const int max_exponent = (int)((int)1024);
	static const int max_exponent10 = (int)((int)308);
	static const int min_exponent = (int)((int)(-1021));
	static const int min_exponent10 = (int)((int)(-307));
	};

  
























































































































































































































































































#line 1637 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\limits"
}
 #pragma warning(pop)
 #pragma pack(pop)

#line 1642 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\limits"
#line 1643 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\limits"






#line 7 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\type_traits"
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xtr1common"

#pragma once





 #pragma pack(push,8)
 #pragma warning(push,3)

 

 

#line 16 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xtr1common"

  

	



































































































































namespace std {		
	
template<class _T1,
	class _Ret>
	struct unary_function;

	
template<class _T1,
	class _T2,
	class _Ret>
	struct binary_function;

	namespace tr1 {	
	
struct _Nil
	{	
	};
static _Nil _Nil_obj;

	
template<class _Ty,
	_Ty _Val>
	struct integral_constant
	{	
	static const _Ty value = _Val;

	typedef _Ty value_type;
	typedef integral_constant<_Ty, _Val> type;
	};

typedef integral_constant<bool, true> true_type;
typedef integral_constant<bool, false> false_type;

	
template<bool _First,
	bool _Second>
	struct _Or;
template<>
	struct _Or<false, false>
		: false_type
		{	
		};

template<>
	struct _Or<false, true>
		: true_type
		{	
		};

template<>
	struct _Or<true, false>
		: true_type
		{	
		};

template<>
	struct _Or<true, true>
		: true_type
		{	
		};

	
template<bool>
	struct _Cat_base;
template<>
	struct _Cat_base<false>
	: false_type
	{	
	};

template<>
	struct _Cat_base<true>
	: true_type
	{	
	};

	
template<class _Ty>
	struct _Is_integral
		: false_type
	{	
	};

template<>
	struct _Is_integral<bool>
		: true_type
	{	
	};

template<>
	struct _Is_integral<char>
		: true_type
	{	
	};

template<>
	struct _Is_integral<unsigned char>
		: true_type
	{	
	};

template<>
	struct _Is_integral<signed char>
		: true_type
	{	
	};

 
template<>
	struct _Is_integral<wchar_t>
		: true_type
	{	
	};
 #line 265 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xtr1common"

template<>
	struct _Is_integral<unsigned short>
		: true_type
	{	
	};

template<>
	struct _Is_integral<signed short>
		: true_type
	{	
	};

template<>
	struct _Is_integral<unsigned int>
		: true_type
	{	
	};

template<>
	struct _Is_integral<signed int>
		: true_type
	{	
	};

template<>
	struct _Is_integral<unsigned long>
		: true_type
	{	
	};

template<>
	struct _Is_integral<signed long>
		: true_type
	{	
	};

 
template<>
	struct _Is_integral<__int64>
		: true_type
	{	
	};

template<>
	struct _Is_integral<unsigned __int64>
		: true_type
	{	
	};
 #line 315 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xtr1common"

	
template<class _Ty>
	struct _Is_floating_point
		: false_type
	{	
	};

template<>
	struct _Is_floating_point<float>
		: true_type
	{	
	};

template<>
	struct _Is_floating_point<double>
		: true_type
	{	
	};

template<>
	struct _Is_floating_point<long double>
		: true_type
	{	
	};

	
template<class _Ty>
	struct _Remove_reference
	{	
	typedef _Ty _Type;
	};

template<class _Ty>
	struct _Remove_reference<_Ty&>
	{	
	typedef _Ty _Type;
	};

template<class _Ty>
	struct _Remove_reference<_Ty&&>
	{	
	typedef _Ty _Type;
	};

	
template<class _Ty>
	struct _Remove_rvalue_reference
	{	
	typedef _Ty _Type;
	};

template<class _Ty>
	struct _Remove_rvalue_reference<_Ty&&>
	{	
	typedef _Ty _Type;
	};

	
template<class _Tgt,
	class _Src>
	struct _Copy_cv
	{	
	typedef typename _Remove_reference<_Tgt>::_Type _Tgtx;
	typedef _Tgtx& _Type;
	};

template<class _Tgt,
	class _Src>
	struct _Copy_cv<_Tgt, const _Src>
	{	
	typedef typename _Remove_reference<_Tgt>::_Type _Tgtx;
	typedef const _Tgtx& _Type;
	};

template<class _Tgt,
	class _Src>
	struct _Copy_cv<_Tgt, volatile _Src>
	{	
	typedef typename _Remove_reference<_Tgt>::_Type _Tgtx;
	typedef volatile _Tgtx& _Type;
	};

template<class _Tgt,
	class _Src>
	struct _Copy_cv<_Tgt, const volatile _Src>
	{	
	typedef typename _Remove_reference<_Tgt>::_Type _Tgtx;
	typedef const volatile _Tgtx& _Type;
	};

template<class _Tgt,
	class _Src>
	struct _Copy_cv<_Tgt, _Src&>
	{	
	typedef typename _Copy_cv<_Tgt, _Src>::_Type _Type;
	};

	
 






	
_No _Has_result_type(...);

template<class _Ty>
	_Yes _Has_result_type(_Ty *,
		typename _Remove_reference<typename _Ty::result_type>::_Type * = 0);



	}	
}
 #pragma warning(pop)
 #pragma pack(pop)

#line 436 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xtr1common"
#line 437 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xtr1common"





#line 8 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\type_traits"

 #pragma pack(push,8)
 #pragma warning(push,3)

	


  

  


  
  
  
  


  
  
  
  
  

  

  

  

  


  

  

  

  


namespace std {
	namespace tr1 {	
	
template<class _Ty>
	struct _Ptr_traits
	{	
	};

template<class _Ty>
	struct _Ptr_traits<_Ty *>
	{	
	static const bool _Is_const = false;
	static const bool _Is_volatile = false;
	};

template<class _Ty>
	struct _Ptr_traits<const _Ty *>
	{	
	static const bool _Is_const = true;
	static const bool _Is_volatile = false;
	};

template<class _Ty>
	struct _Ptr_traits<volatile _Ty *>
	{	
	static const bool _Is_const = false;
	static const bool _Is_volatile = true;
	};

template<class _Ty>
	struct _Ptr_traits<const volatile _Ty *>
	{	
	static const bool _Is_const = true;
	static const bool _Is_volatile = true;
	};

template<class _Ty>
	struct _Is_funptr
		: false_type
	{	
	};

template<class _Ty>
	struct _Is_memfunptr
		: false_type
	{	
	};

 
 #line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"





 

#line 9 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"





 
 #line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 
  
  
  
  
  
  

 

















































































#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  

 




#line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  
  
  
  
  
  
  
  
  
  
  
  
  

 




























#line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  

 

#line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  

 

#line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 265 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 267 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 269 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 271 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 273 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 275 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 277 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxtype_traits"



template<class _Ret      >
	struct _Is_funptr<_Ret (*)(    )>
	: true_type
	{	
	};

template<class _Ret      >
	struct _Is_funptr<_Ret (*)(     ...)>
	: true_type
	{	
	};

 















































#line 65 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxtype_traits"





#line 278 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 16 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"
 
#line 18 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"


#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 









































































#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  

 













#line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  

 

#line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  

 

#line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 265 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 267 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 269 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 271 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 273 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 275 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 277 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxtype_traits"



template<class _Ret , class _Arg0    >
	struct _Is_funptr<_Ret (*)(_Arg0    )>
	: true_type
	{	
	};

template<class _Ret , class _Arg0    >
	struct _Is_funptr<_Ret (*)(_Arg0     ...)>
	: true_type
	{	
	};

 
template<class _Ret , class _Arg0    >
	struct _Is_memfunptr<_Ret (_Arg0::*)(  )>
		: true_type
	{	
	};

template<class _Ret , class _Arg0    >
	struct _Is_memfunptr<_Ret (_Arg0::*)(   ...)>
		: true_type
	{	
	};

template<class _Ret , class _Arg0    >
	struct _Is_memfunptr<_Ret (_Arg0::*)(  ) const>
		: true_type
	{	
	};

template<class _Ret , class _Arg0    >
	struct _Is_memfunptr<_Ret (_Arg0::*)(   ...) const>
		: true_type
	{	
	};

template<class _Ret , class _Arg0    >
	struct _Is_memfunptr<_Ret (_Arg0::*)(  ) volatile>
		: true_type
	{	
	};

template<class _Ret , class _Arg0    >
	struct _Is_memfunptr<_Ret (_Arg0::*)(   ...) volatile>
		: true_type
	{	
	};

template<class _Ret , class _Arg0    >
	struct _Is_memfunptr<_Ret (_Arg0::*)(  ) const volatile>
		: true_type
	{	
	};

template<class _Ret , class _Arg0    >
	struct _Is_memfunptr<_Ret (_Arg0::*)(   ...) const volatile>
		: true_type
	{	
	};
 #line 65 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxtype_traits"





#line 278 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 21 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

































































#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  

 

#line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 265 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 267 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 269 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 271 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 273 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 275 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 277 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxtype_traits"



template<class _Ret , class _Arg0 ,   class _Arg1>
	struct _Is_funptr<_Ret (*)(_Arg0 ,   _Arg1)>
	: true_type
	{	
	};

template<class _Ret , class _Arg0 ,   class _Arg1>
	struct _Is_funptr<_Ret (*)(_Arg0 ,   _Arg1 ...)>
	: true_type
	{	
	};

 
template<class _Ret , class _Arg0 ,   class _Arg1>
	struct _Is_memfunptr<_Ret (_Arg0::*)(  _Arg1)>
		: true_type
	{	
	};

template<class _Ret , class _Arg0 ,   class _Arg1>
	struct _Is_memfunptr<_Ret (_Arg0::*)(  _Arg1 ...)>
		: true_type
	{	
	};

template<class _Ret , class _Arg0 ,   class _Arg1>
	struct _Is_memfunptr<_Ret (_Arg0::*)(  _Arg1) const>
		: true_type
	{	
	};

template<class _Ret , class _Arg0 ,   class _Arg1>
	struct _Is_memfunptr<_Ret (_Arg0::*)(  _Arg1 ...) const>
		: true_type
	{	
	};

template<class _Ret , class _Arg0 ,   class _Arg1>
	struct _Is_memfunptr<_Ret (_Arg0::*)(  _Arg1) volatile>
		: true_type
	{	
	};

template<class _Ret , class _Arg0 ,   class _Arg1>
	struct _Is_memfunptr<_Ret (_Arg0::*)(  _Arg1 ...) volatile>
		: true_type
	{	
	};

template<class _Ret , class _Arg0 ,   class _Arg1>
	struct _Is_memfunptr<_Ret (_Arg0::*)(  _Arg1) const volatile>
		: true_type
	{	
	};

template<class _Ret , class _Arg0 ,   class _Arg1>
	struct _Is_memfunptr<_Ret (_Arg0::*)(  _Arg1 ...) const volatile>
		: true_type
	{	
	};
 #line 65 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxtype_traits"





#line 278 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 25 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

























































#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 265 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 267 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 269 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 271 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 273 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 275 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 277 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxtype_traits"



template<class _Ret , class _Arg0 , class _Arg1 , class _Arg2>
	struct _Is_funptr<_Ret (*)(_Arg0 , _Arg1 , _Arg2)>
	: true_type
	{	
	};

template<class _Ret , class _Arg0 , class _Arg1 , class _Arg2>
	struct _Is_funptr<_Ret (*)(_Arg0 , _Arg1 , _Arg2 ...)>
	: true_type
	{	
	};

 
template<class _Ret , class _Arg0 , class _Arg1 , class _Arg2>
	struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1 , _Arg2)>
		: true_type
	{	
	};

template<class _Ret , class _Arg0 , class _Arg1 , class _Arg2>
	struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1 , _Arg2 ...)>
		: true_type
	{	
	};

template<class _Ret , class _Arg0 , class _Arg1 , class _Arg2>
	struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1 , _Arg2) const>
		: true_type
	{	
	};

template<class _Ret , class _Arg0 , class _Arg1 , class _Arg2>
	struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1 , _Arg2 ...) const>
		: true_type
	{	
	};

template<class _Ret , class _Arg0 , class _Arg1 , class _Arg2>
	struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1 , _Arg2) volatile>
		: true_type
	{	
	};

template<class _Ret , class _Arg0 , class _Arg1 , class _Arg2>
	struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1 , _Arg2 ...) volatile>
		: true_type
	{	
	};

template<class _Ret , class _Arg0 , class _Arg1 , class _Arg2>
	struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1 , _Arg2) const volatile>
		: true_type
	{	
	};

template<class _Ret , class _Arg0 , class _Arg1 , class _Arg2>
	struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1 , _Arg2 ...) const volatile>
		: true_type
	{	
	};
 #line 65 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxtype_traits"





#line 278 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 29 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

















































#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 265 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 267 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 269 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 271 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 273 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 275 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 277 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxtype_traits"



template<class _Ret , class _Arg0 , class _Arg1, class _Arg2 , class _Arg3>
	struct _Is_funptr<_Ret (*)(_Arg0 , _Arg1, _Arg2 , _Arg3)>
	: true_type
	{	
	};

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2 , class _Arg3>
	struct _Is_funptr<_Ret (*)(_Arg0 , _Arg1, _Arg2 , _Arg3 ...)>
	: true_type
	{	
	};

 
template<class _Ret , class _Arg0 , class _Arg1, class _Arg2 , class _Arg3>
	struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2 , _Arg3)>
		: true_type
	{	
	};

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2 , class _Arg3>
	struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2 , _Arg3 ...)>
		: true_type
	{	
	};

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2 , class _Arg3>
	struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2 , _Arg3) const>
		: true_type
	{	
	};

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2 , class _Arg3>
	struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2 , _Arg3 ...) const>
		: true_type
	{	
	};

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2 , class _Arg3>
	struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2 , _Arg3) volatile>
		: true_type
	{	
	};

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2 , class _Arg3>
	struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2 , _Arg3 ...) volatile>
		: true_type
	{	
	};

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2 , class _Arg3>
	struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2 , _Arg3) const volatile>
		: true_type
	{	
	};

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2 , class _Arg3>
	struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2 , _Arg3 ...) const volatile>
		: true_type
	{	
	};
 #line 65 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxtype_traits"





#line 278 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 33 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 47 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 









































#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 265 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 267 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 269 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 271 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 273 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 275 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 277 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxtype_traits"



template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4>
	struct _Is_funptr<_Ret (*)(_Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4)>
	: true_type
	{	
	};

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4>
	struct _Is_funptr<_Ret (*)(_Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4 ...)>
	: true_type
	{	
	};

 
template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4>
	struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3 , _Arg4)>
		: true_type
	{	
	};

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4>
	struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3 , _Arg4 ...)>
		: true_type
	{	
	};

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4>
	struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3 , _Arg4) const>
		: true_type
	{	
	};

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4>
	struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3 , _Arg4 ...) const>
		: true_type
	{	
	};

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4>
	struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3 , _Arg4) volatile>
		: true_type
	{	
	};

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4>
	struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3 , _Arg4 ...) volatile>
		: true_type
	{	
	};

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4>
	struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3 , _Arg4) const volatile>
		: true_type
	{	
	};

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4>
	struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3 , _Arg4 ...) const volatile>
		: true_type
	{	
	};
 #line 65 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxtype_traits"





#line 278 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 37 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 47 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 55 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

































#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 265 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 267 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 269 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 271 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 273 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 275 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 277 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxtype_traits"



template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5>
	struct _Is_funptr<_Ret (*)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5)>
	: true_type
	{	
	};

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5>
	struct _Is_funptr<_Ret (*)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5 ...)>
	: true_type
	{	
	};

 
template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5>
	struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5)>
		: true_type
	{	
	};

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5>
	struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5 ...)>
		: true_type
	{	
	};

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5>
	struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) const>
		: true_type
	{	
	};

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5>
	struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5 ...) const>
		: true_type
	{	
	};

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5>
	struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) volatile>
		: true_type
	{	
	};

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5>
	struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5 ...) volatile>
		: true_type
	{	
	};

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5>
	struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) const volatile>
		: true_type
	{	
	};

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5>
	struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5 ...) const volatile>
		: true_type
	{	
	};
 #line 65 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxtype_traits"





#line 278 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 41 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 47 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 55 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 63 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

























#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 265 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 267 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 269 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 271 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 273 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 275 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 277 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxtype_traits"



template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6>
	struct _Is_funptr<_Ret (*)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6)>
	: true_type
	{	
	};

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6>
	struct _Is_funptr<_Ret (*)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6 ...)>
	: true_type
	{	
	};

 
template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6>
	struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6)>
		: true_type
	{	
	};

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6>
	struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6 ...)>
		: true_type
	{	
	};

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6>
	struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) const>
		: true_type
	{	
	};

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6>
	struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6 ...) const>
		: true_type
	{	
	};

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6>
	struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) volatile>
		: true_type
	{	
	};

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6>
	struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6 ...) volatile>
		: true_type
	{	
	};

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6>
	struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) const volatile>
		: true_type
	{	
	};

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6>
	struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6 ...) const volatile>
		: true_type
	{	
	};
 #line 65 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxtype_traits"





#line 278 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 45 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 47 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 55 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 63 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 71 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

















#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 265 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 267 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 269 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 271 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 273 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 275 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 277 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxtype_traits"



template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7>
	struct _Is_funptr<_Ret (*)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7)>
	: true_type
	{	
	};

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7>
	struct _Is_funptr<_Ret (*)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7 ...)>
	: true_type
	{	
	};

 
template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7>
	struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7)>
		: true_type
	{	
	};

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7>
	struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7 ...)>
		: true_type
	{	
	};

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7>
	struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) const>
		: true_type
	{	
	};

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7>
	struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7 ...) const>
		: true_type
	{	
	};

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7>
	struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) volatile>
		: true_type
	{	
	};

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7>
	struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7 ...) volatile>
		: true_type
	{	
	};

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7>
	struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) const volatile>
		: true_type
	{	
	};

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7>
	struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7 ...) const volatile>
		: true_type
	{	
	};
 #line 65 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxtype_traits"





#line 278 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 49 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 47 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 55 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 63 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 71 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 79 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 









#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 265 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 267 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 269 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 271 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 273 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 275 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 277 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxtype_traits"



template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8>
	struct _Is_funptr<_Ret (*)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8)>
	: true_type
	{	
	};

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8>
	struct _Is_funptr<_Ret (*)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8 ...)>
	: true_type
	{	
	};

 
template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8>
	struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8)>
		: true_type
	{	
	};

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8>
	struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8 ...)>
		: true_type
	{	
	};

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8>
	struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) const>
		: true_type
	{	
	};

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8>
	struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8 ...) const>
		: true_type
	{	
	};

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8>
	struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) volatile>
		: true_type
	{	
	};

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8>
	struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8 ...) volatile>
		: true_type
	{	
	};

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8>
	struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) const volatile>
		: true_type
	{	
	};

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8>
	struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8 ...) const volatile>
		: true_type
	{	
	};
 #line 65 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxtype_traits"





#line 278 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 53 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 47 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 55 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 63 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 71 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 79 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 87 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  

 

#line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 265 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 267 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 269 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 271 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 273 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 275 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 277 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxtype_traits"



template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9>
	struct _Is_funptr<_Ret (*)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9)>
	: true_type
	{	
	};

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9>
	struct _Is_funptr<_Ret (*)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9 ...)>
	: true_type
	{	
	};

 
template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9>
	struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9)>
		: true_type
	{	
	};

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9>
	struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9 ...)>
		: true_type
	{	
	};

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9>
	struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) const>
		: true_type
	{	
	};

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9>
	struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9 ...) const>
		: true_type
	{	
	};

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9>
	struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) volatile>
		: true_type
	{	
	};

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9>
	struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9 ...) volatile>
		: true_type
	{	
	};

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9>
	struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) const volatile>
		: true_type
	{	
	};

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9>
	struct _Is_memfunptr<_Ret (_Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9 ...) const volatile>
		: true_type
	{	
	};
 #line 65 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxtype_traits"





#line 278 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 57 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"




















#line 100 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\type_traits"

	
	
template<class _Ty>
	struct remove_const
	{	
	typedef _Ty type;
	};

template<class _Ty>
	struct remove_const<const _Ty>
	{	
	typedef _Ty type;
	};

template<class _Ty>
	struct remove_const<const _Ty[]>
	{	
	typedef _Ty type[];
	};

template<class _Ty, unsigned int _Nx>
	struct remove_const<const _Ty[_Nx]>
	{	
	typedef _Ty type[_Nx];
	};

	
template<class _Ty>
	struct remove_volatile
	{	
	typedef _Ty type;
	};

template<class _Ty>
	struct remove_volatile<volatile _Ty>
	{	
	typedef _Ty type;
	};

template<class _Ty>
	struct remove_volatile<volatile _Ty[]>
	{	
	typedef _Ty type[];
	};

template<class _Ty, unsigned int _Nx>
	struct remove_volatile<volatile _Ty[_Nx]>
	{	
	typedef _Ty type[_Nx];
	};

	
template<class _Ty>
	struct remove_cv
	{	
	typedef typename remove_const<typename remove_volatile<_Ty>::type>::type
		type;
	};

	
template<class _Ty>
	struct add_const
	{	
	typedef const _Ty type;
	};

template<class _Ty>
	struct add_const<_Ty&>
	{	
	typedef _Ty& type;
	};

	
template<class _Ty>
	struct add_volatile
	{	
	typedef volatile _Ty type;
	};

template<class _Ty>
	struct add_volatile<_Ty&>
	{	
	typedef _Ty& type;
	};

	
template<class _Ty>
	struct add_cv
	{	
	typedef typename add_const<typename add_volatile<_Ty>::type>::type type;
	};

	
template<class _Ty>
	struct remove_reference
	: _Remove_reference<_Ty>
	{	
	typedef typename _Remove_reference<_Ty>::_Type type;
	};

	
template<class _Ty>
	struct add_reference
	{	
	typedef typename _Remove_reference<_Ty>::_Type& type;
	};

template<>
	struct add_reference<void>
	{	
	typedef void type;
	};

template<>
	struct add_reference<const void>
	{	
	typedef const void type;
	};

template<>
	struct add_reference<volatile void>
	{	
	typedef volatile void type;
	};

template<>
	struct add_reference<const volatile void>
	{	
	typedef const volatile void type;
	};

	
template<class _Ty>
	struct add_lvalue_reference
	{	
	typedef typename add_reference<_Ty>::type type;
	};

	
template<class _Ty>
	struct add_rvalue_reference
	{	
	typedef _Ty && type;
	};

template<class _Ty>
	struct add_rvalue_reference<_Ty&>
	{	
	typedef _Ty& type;
	};

template<>
	struct add_rvalue_reference<void>
	{	
	typedef void type;
	};

template<>
	struct add_rvalue_reference<const void>
	{	
	typedef const void type;
	};

template<>
	struct add_rvalue_reference<volatile void>
	{	
	typedef volatile void type;
	};

template<>
	struct add_rvalue_reference<const volatile void>
	{	
	typedef const volatile void type;
	};

	
template<class _Ty>
	struct remove_extent
	{	
	typedef _Ty type;
	};

template<class _Ty, unsigned int _Ix>
	struct remove_extent<_Ty[_Ix]>
	{	
	typedef _Ty type;
	};

template<class _Ty>
	struct remove_extent<_Ty[]>
	{	
	typedef _Ty type;
	};

	
template<class _Ty>
	struct remove_all_extents
	{	
	typedef _Ty type;
	};

template<class _Ty, unsigned int _Ix>
	struct remove_all_extents<_Ty[_Ix]>
	{	
	typedef typename remove_all_extents<_Ty>::type type;
	};

template<class _Ty>
	struct remove_all_extents<_Ty[]>
	{	
	typedef typename remove_all_extents<_Ty>::type type;
	};

	
template<class _Ty>
	struct remove_pointer
	{	
	typedef _Ty type;
	};

template<class _Ty>
	struct remove_pointer<_Ty *>
	{	
	typedef _Ty type;
	};

template<class _Ty>
	struct remove_pointer<_Ty *const>
	{	
	typedef _Ty type;
	};

template<class _Ty>
	struct remove_pointer<_Ty *volatile>
	{	
	typedef _Ty type;
	};

template<class _Ty>
	struct remove_pointer<_Ty *const volatile>
	{	
	typedef _Ty type;
	};

	
template<class _Ty>
	struct add_pointer
	{	
	typedef typename remove_reference<_Ty>::type *type;
	};

	
	
template<class _Ty>
	struct _Is_void
	: false_type
	{	
	};

template<>
	struct _Is_void<void>
	: true_type
	{	
	};

template<class _Ty>
	struct is_void
	: _Is_void<typename remove_cv<_Ty>::type>
	{	
	};

	
template<class _Ty>
	struct is_integral
	: _Is_integral<typename remove_cv<_Ty>::type>
	{	
	};

	
template<class _Ty>
	struct is_floating_point
	: _Is_floating_point<typename remove_cv<_Ty>::type>
	{	
	};

	
template<class _Ty>
	struct is_array
	: false_type
	{	
	};

template<class _Ty, size_t _Nx>
	struct is_array<_Ty[_Nx]>
	: true_type
	{	
	};

template<class _Ty>
	struct is_array<_Ty[]>
	: true_type
	{	
	};

 
	
template<class _Ty>
	struct is_lvalue_reference
	: false_type
	{	
	};

template<class _Ty>
	struct is_lvalue_reference<_Ty&>
	: true_type
	{	
	};

	
template<class _Ty>
	struct is_rvalue_reference
	: false_type
	{	
	};

template<class _Ty>
	struct is_rvalue_reference<_Ty&&>
	: true_type
	{	
	};

	
template<class _Ty>
	struct is_reference
	: _Cat_base<is_lvalue_reference<_Ty>::value
		|| is_rvalue_reference<_Ty>::value>
	{	
	};

 












#line 454 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\type_traits"

	
template<class _Ty>
	struct _Is_member_object_pointer
	: false_type
	{	
	};

template<class _Ty1, class _Ty2>
	struct _Is_member_object_pointer<_Ty1 _Ty2::*>
	: _Cat_base<!_Is_memfunptr<_Ty1 _Ty2::*>::value>
	{	
	};

template<class _Ty>
	struct is_member_object_pointer
	: _Is_member_object_pointer<typename remove_cv<_Ty>::type>
	{	
	};

	
template<class _Ty>
	struct is_member_function_pointer
	: _Cat_base<_Is_memfunptr<typename remove_cv<_Ty>::type>::value>
	{	
	};

	
template<class _Ty>
	struct _Is_pointer
	: false_type
	{	
	};

template<class _Ty>
	struct _Is_pointer<_Ty *>
	: _Cat_base<!is_member_object_pointer<_Ty *>::value
		&& !is_member_function_pointer<_Ty *>::value>
	{	
	};

template<class _Ty>
	struct is_pointer
	: _Is_pointer<typename remove_cv<_Ty>::type>
	{	
	};

	
template<class _Ty>
	struct is_union : _Cat_base<__is_union(_Ty)>
	{	
	};

	
template<class _Ty>
	struct is_class : _Cat_base<__is_class(_Ty)>
	{	
	};

	
template<class _Ty>
	struct is_function
	: _Cat_base<_Is_funptr<typename remove_cv<_Ty>::type *>::value>
	{	
	};

template<class _Ty>
	struct is_function<_Ty&>
	: false_type
	{	
	};

	
template<class _Ty>
	struct is_arithmetic
	: _Cat_base<is_integral<_Ty>::value
		|| is_floating_point<_Ty>::value>
	{	
	};

	
template<class _Ty>
	struct is_fundamental
	: _Cat_base<is_arithmetic<_Ty>::value
		|| is_void<_Ty>::value>
	{	
	};

	
template<class _Ty>
	struct is_object
	: _Cat_base<!is_function<_Ty>::value
		&& !is_reference<_Ty>::value
		&& !is_void<_Ty>::value>
	{	
	};

	

template<class _From, class _To>
	struct is_convertible : _Cat_base<is_void<_From>::value && is_void<_To>::value || __is_convertible_to(_From, _To)>
	{	
	};

	

template<class _Ty>
	struct is_enum : _Cat_base<__is_enum(_Ty)>
	{	
	};

	
template<class _Ty>
	struct is_compound
	: _Cat_base<!is_fundamental<_Ty>::value>
	{	
	};

	
template<class _Ty>
	struct is_member_pointer
	: _Cat_base<is_member_object_pointer<_Ty>::value
		|| is_member_function_pointer<_Ty>::value>
	{	
	};

	
template<class _Ty>
	struct is_scalar
	: _Cat_base<is_arithmetic<_Ty>::value
		|| is_enum<_Ty>::value
		|| is_pointer<_Ty>::value
		|| is_member_pointer<_Ty>::value>
	{	
	};

template<class _Ty>
	struct is_scalar<_Ty&>
	: false_type
	{
	};

	
template<class _Ty>
	struct is_const
	: _Cat_base<_Ptr_traits<_Ty *>::_Is_const
		&& !is_function<_Ty>::value>
	{	
	};

template<class _Ty, unsigned int _Nx>
	struct is_const<_Ty[_Nx]>
	: false_type
	{	
	};

template<class _Ty, unsigned int _Nx>
	struct is_const<const _Ty[_Nx]>
	: true_type
	{	
	};

template<class _Ty>
	struct is_const<_Ty&>
	: false_type
	{	
	};

	
template<class _Ty>
	struct is_volatile
	: _Cat_base<_Ptr_traits<_Ty *>::_Is_volatile
		&& !is_function<_Ty>::value>
	{	
	};

template<class _Ty>
	struct is_volatile<_Ty&>
	: false_type
	{	
	};

	
template<class _Ty>
	struct _Is_pod : _Cat_base<is_void<_Ty>::value || is_scalar<_Ty>::value || __has_trivial_constructor(_Ty) && __is_pod(_Ty)>
	{	
	};

template<class _Ty>
	struct is_pod
	: _Is_pod<typename ::std:: tr1::remove_all_extents<_Ty>::type>
	{	
	};

	
template<class _Ty>
	struct is_empty : _Cat_base<__is_empty(_Ty)>
	{	
	};

	
template<class _Ty>
	struct is_polymorphic : _Cat_base<__is_polymorphic(_Ty)>
	{	
	};

	
template<class _Ty>
	struct is_abstract : _Cat_base<__is_abstract(_Ty)>
	{	
	};

 
	
template<class _Ty>
	struct is_standard_layout : is_pod<_Ty>
	{	
	};

	
template<class _Ty>
	struct is_trivial : is_pod<_Ty>
	{	
	};
 #line 679 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\type_traits"

	
template<class _Ty>
	struct has_trivial_constructor : _Cat_base<is_pod<_Ty>::value || __has_trivial_constructor(_Ty)>
	{	
	};

	
template<class _Ty>
	struct has_trivial_copy : _Cat_base<is_pod<_Ty>::value || __has_trivial_copy(_Ty)>
	{	
	};

 
	
template<class _Ty>
	struct has_trivial_default_constructor : _Cat_base<is_pod<_Ty>::value || __has_trivial_constructor(_Ty)>
	{	
	};

	
template<class _Ty>
	struct has_trivial_copy_constructor : _Cat_base<is_pod<_Ty>::value || __has_trivial_copy(_Ty)>
	{	
	};
 #line 705 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\type_traits"

	
template<class _Ty>
	struct has_trivial_assign : _Cat_base<is_pod<_Ty>::value || __has_trivial_assign(_Ty)>
	{	
	};

	
template<class _Ty>
	struct has_trivial_destructor : _Cat_base<!is_void<_Ty>::value && (is_pod<_Ty>::value || __has_trivial_destructor(_Ty))>
	{	
	};

	
template<class _Ty>
	struct has_nothrow_constructor : _Cat_base<is_pod<_Ty>::value || __has_nothrow_constructor(_Ty)>
	{	
	};

	
template<class _Ty>
	struct has_nothrow_copy : _Cat_base<is_pod<_Ty>::value || __has_nothrow_copy(_Ty)>
	{	
	};

 
	
template<class _Ty>
	struct has_nothrow_default_constructor : _Cat_base<is_pod<_Ty>::value || __has_nothrow_constructor(_Ty)>
	{	
	};

	
template<class _Ty>
	struct has_nothrow_copy_constructor : _Cat_base<is_pod<_Ty>::value || __has_nothrow_copy(_Ty)>
	{	
	};
 #line 743 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\type_traits"

	
template<class _Ty>
	struct has_nothrow_assign : _Cat_base<is_pod<_Ty>::value || __has_nothrow_assign(_Ty)>
	{	
	};

	
template<class _Ty>
	struct has_virtual_destructor : _Cat_base<__has_virtual_destructor(_Ty)>
	{	
	};

	
template<class _Ty>
	struct _Has_signed_vals
	: _Cat_base<(typename remove_cv<_Ty>::type)(-1)
		< (typename remove_cv<_Ty>::type)(0)>
	{	
	};

template<class _Ty>
	struct is_signed
	: _Cat_base<is_floating_point<_Ty>::value || is_integral<_Ty>::value
		&& _Has_signed_vals<
			typename _If<is_integral<_Ty>::value, _Ty, int>::_Type>::value>
	{	
	};

	
template<class _Ty>
	struct is_unsigned
	: _Cat_base<is_integral<_Ty>::value
		&& !_Has_signed_vals<
			typename _If<is_integral<_Ty>::value, _Ty, int>::_Type>::value>
	{	
	};

	
template<class _Ty>
	struct make_signed
	{	
	static const size_t _Bytes = sizeof (_Ty);

	typedef typename _If<is_signed<_Ty>::value, _Ty,
		typename _If<_Bytes <= sizeof (char), signed char,
			typename _If<_Bytes <= sizeof (short), short,
				typename _If<_Bytes <= sizeof (int), int,
					typename _If<_Bytes <= sizeof (long), long,
						_Longlong>::_Type>::_Type>::_Type>
							::_Type>::_Type type;
	};

	
template<class _Ty>
	struct make_unsigned
	{	
	static const size_t _Bytes = sizeof (_Ty);

	typedef typename _If<is_unsigned<_Ty>::value, _Ty,
		typename _If<_Bytes <= sizeof (char), unsigned char,
			typename _If<_Bytes <= sizeof (short), unsigned short,
				typename _If<_Bytes <= sizeof (int), unsigned int,
					typename _If<_Bytes <= sizeof (long), unsigned long,
						_ULonglong>::_Type>::_Type>::_Type>
							::_Type>::_Type type;
	};

	
template<class _Ty>
	struct _Get_align
	{	
	_Ty _Elt0;
	char _Elt1;
	_Ty _Elt2;
	};



template<class _Ty>
	struct alignment_of
	: integral_constant<size_t, (sizeof(_Get_align<_Ty>) - 2 * sizeof(_Ty))>
	{	
	};

template<class _Ty>
	struct alignment_of<_Ty&>
	: integral_constant<size_t, (sizeof(_Get_align<_Ty *>) - 2 * sizeof(_Ty *))>
	{	
	};

	




template<class _Ty, size_t _Len> union _Align_type
	{	
	_Ty _Val;
	char _Pad[_Len];
	};

template<size_t _Len, size_t _Align, class _Ty, bool _Ok>
	struct _Aligned;

template<size_t _Len, size_t _Align, class _Ty>
	struct _Aligned<_Len, _Align, _Ty, true>
	{	
	typedef _Align_type<_Ty, _Len> _Type;
	};

template<size_t _Len, size_t _Align>
	struct _Aligned<_Len, _Align, long, false>
	{	
	typedef _Align_type<double, _Len> _Type;
	};

template<size_t _Len, size_t _Align>
	struct _Aligned<_Len, _Align, int, false>
	{	
	typedef typename _Aligned<_Len, _Align, long, _Align == (sizeof(_Get_align<long>) - 2 * sizeof(long))>::_Type _Type;
	};

template<size_t _Len, size_t _Align>
	struct _Aligned<_Len, _Align, short, false>
	{	
	typedef typename _Aligned<_Len, _Align, int, _Align == (sizeof(_Get_align<int>) - 2 * sizeof(int))>::_Type _Type;
	};

template<size_t _Len, size_t _Align>
	struct _Aligned<_Len, _Align, char, false>
	{	
	typedef typename _Aligned<_Len, _Align, short, _Align == (sizeof(_Get_align<short>) - 2 * sizeof(short))>::_Type _Type;
	};

template<size_t _Len, size_t _Align>
	struct aligned_storage
	{	
	typedef typename _Aligned<_Len, _Align, char, _Align == (sizeof(_Get_align<char>) - 2 * sizeof(char))>::_Type type;
	};





	
template<class _Ty>
	struct rank
	: integral_constant<size_t, 0>
	{	
	};

template<class _Ty, unsigned int _Ix>
	struct rank<_Ty[_Ix]>
	: integral_constant<size_t, rank<_Ty>::value + 1>
	{	
	};

template<class _Ty>
	struct rank<_Ty[]>
	: integral_constant<size_t, rank<_Ty>::value + 1>
	{	
	};

	
template<class _Ty, unsigned int _Nx>
	struct _Extent
	: integral_constant<size_t, 0>
	{	
	};

template<class _Ty, unsigned int _Ix>
	struct _Extent<_Ty[_Ix], 0>
	: integral_constant<size_t, _Ix>
	{	
	};

template<class _Ty, unsigned int _Nx, unsigned int _Ix>
	struct _Extent<_Ty[_Ix], _Nx>
	: _Extent<_Ty, _Nx - 1>
	{	
	};

template<class _Ty, unsigned int _Nx>
	struct _Extent<_Ty[], _Nx>
	: _Extent<_Ty, _Nx - 1>
	{	
	};

template<class _Ty, unsigned int _Nx = 0>
	struct extent
	: _Extent<_Ty, _Nx>
	{	
	};

	
template<class _Ty1, class _Ty2>
	struct is_same
	: false_type
	{	
	};

template<class _Ty1>
	struct is_same<_Ty1, _Ty1>
	: true_type
	{	
	};

	
template<class _Base, class _Der>
	struct is_base_of : _Cat_base<__is_base_of(_Base, _Der)>
	{	
	};


	
template<class _Ty>
	struct decay
	{	
	typedef typename remove_reference<_Ty>::type _Ty1;

	typedef typename _If<is_array<_Ty1>::value,
		typename remove_extent<_Ty1>::type *,
		typename _If<is_function<_Ty1>::value,
			typename add_pointer<_Ty1>::type,
			typename remove_cv<_Ty1>::type>::_Type>::_Type type;
	};

	
template<bool _Test,
	class _Type = void>
	struct enable_if
	{	
	};

template<class _Type>
	struct enable_if<true, _Type>
	{	
	typedef _Type type;
	};

	
template<bool _Test,
	class _Ty1,
	class _Ty2>
	struct conditional
	{	
	typedef _Ty2 type;
	};

template<class _Ty1,
	class _Ty2>
	struct conditional<true, _Ty1, _Ty2>
	{	
	typedef _Ty1 type;
	};

	}	

 
using tr1::add_const;
using tr1::add_cv;
using tr1::add_pointer;
using tr1::add_lvalue_reference;
using tr1::add_reference;	
using tr1::add_rvalue_reference;
using tr1::add_volatile;
using tr1::aligned_storage;
using tr1::alignment_of;
using tr1::conditional;
using tr1::decay;
using tr1::enable_if;
using tr1::extent;
using tr1::false_type;
using tr1::has_nothrow_assign;
using tr1::has_nothrow_constructor;	
using tr1::has_nothrow_copy;	
using tr1::has_nothrow_copy_constructor;
using tr1::has_nothrow_default_constructor;
using tr1::has_trivial_assign;
using tr1::has_trivial_constructor;	
using tr1::has_trivial_copy;	
using tr1::has_trivial_copy_constructor;
using tr1::has_trivial_default_constructor;
using tr1::has_trivial_destructor;
using tr1::has_virtual_destructor;
using tr1::integral_constant;
using tr1::is_abstract;
using tr1::is_arithmetic;
using tr1::is_array;
using tr1::is_base_of;
using tr1::is_class;
using tr1::is_compound;
using tr1::is_const;
using tr1::is_convertible;
using tr1::is_empty;
using tr1::is_enum;
using tr1::is_floating_point;
using tr1::is_function;
using tr1::is_fundamental;
using tr1::is_integral;
using tr1::is_lvalue_reference;
using tr1::is_member_function_pointer;
using tr1::is_member_object_pointer;
using tr1::is_member_pointer;
using tr1::is_object;
using tr1::is_pod;
using tr1::is_pointer;
using tr1::is_polymorphic;
using tr1::is_reference;
using tr1::is_rvalue_reference;
using tr1::is_same;
using tr1::is_scalar;
using tr1::is_signed;
using tr1::is_standard_layout;
using tr1::is_trivial;
using tr1::is_union;
using tr1::is_unsigned;
using tr1::is_void;
using tr1::is_volatile;
using tr1::make_signed;
using tr1::make_unsigned;
using tr1::rank;
using tr1::remove_all_extents;
using tr1::remove_const;
using tr1::remove_cv;
using tr1::remove_extent;
using tr1::remove_pointer;
using tr1::remove_reference;
using tr1::_Remove_rvalue_reference;
using tr1::remove_volatile;
using tr1::true_type;
 #line 1076 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\type_traits"

 

template<class _Ty>
	struct _Arithmetic_traits;

template<>
	struct _Arithmetic_traits<bool>
	{	
	static const int _Rank = 1;
	};

template<>
	struct _Arithmetic_traits<char>
	{	
	static const int _Rank = _Arithmetic_traits<bool>::_Rank + 1;
	};

template<>
	struct _Arithmetic_traits<signed char>
	{	
	static const int _Rank = _Arithmetic_traits<char>::_Rank;
	};

template<>
	struct _Arithmetic_traits<unsigned char>
	{	
	static const int _Rank = _Arithmetic_traits<char>::_Rank;
	};

template<>
	struct _Arithmetic_traits<short>
	{	
	static const int _Rank = _Arithmetic_traits<char>::_Rank + 1;
	};

template<>
	struct _Arithmetic_traits<unsigned short>
	{	
	static const int _Rank = _Arithmetic_traits<short>::_Rank;
	};

template<>
	struct _Arithmetic_traits<int>
	{	
	static const int _Rank = _Arithmetic_traits<short>::_Rank + 1;
	};

template<>
	struct _Arithmetic_traits<unsigned int>
	{	
	static const int _Rank = _Arithmetic_traits<int>::_Rank;
	};

template<>
	struct _Arithmetic_traits<long>
	{	
	static const int _Rank = _Arithmetic_traits<int>::_Rank + 1;
	};

template<>
	struct _Arithmetic_traits<unsigned long>
	{	
	static const int _Rank = _Arithmetic_traits<long>::_Rank;
	};

template<>
	struct _Arithmetic_traits<long long>
	{	
	static const int _Rank = _Arithmetic_traits<long>::_Rank + 1;
	};

template<>
	struct _Arithmetic_traits<unsigned long long>
	{	
	static const int _Rank = _Arithmetic_traits<long long>::_Rank;
	};

template<>
	struct _Arithmetic_traits<float>
	{
	static const int _Rank = _Arithmetic_traits<long long>::_Rank + 1;
	};

template<>
	struct _Arithmetic_traits<double>
	{
	static const int _Rank = _Arithmetic_traits<float>::_Rank + 1;
	};

template<>
	struct _Arithmetic_traits<long double>
	{
	static const int _Rank = _Arithmetic_traits<double>::_Rank + 1;
	};

template<bool _Unsigned> struct _Pickinteger
	{	
	typedef int _Type;
	};

template<>
	struct _Pickinteger<true>
	{	
	typedef unsigned int _Type;
	};

template<class _Ty,
	bool _Small>
	struct _Promote_to_int;

template<class _Ty>
	struct _Promote_to_int<_Ty, true>
	{	
	typedef int _Type;
	};

template<class _Ty>
	struct _Promote_to_int<_Ty, false>
	{	
	typedef typename _Pickinteger<tr1::is_unsigned<_Ty>::value>::_Type _Type;
	};

template<class _Ty,
	bool _Small>
	struct _Maybepromote;

template<class _Ty>
	struct _Maybepromote<_Ty, false>
	{	
	typedef _Ty _Type;
	};

template<class _Ty>
	struct _Maybepromote<_Ty, true>
	{	
	typedef typename _Promote_to_int<_Ty, sizeof(_Ty) < sizeof(int)>::_Type
		_Type;
	};

template<class _Ty>
	struct _Ipromo
	{	
	static const bool _Lessthan =
		_Arithmetic_traits<_Ty>::_Rank < _Arithmetic_traits<int>::_Rank;
	typedef typename _Maybepromote<_Ty, _Lessthan>::_Type _Type;
	};

template<class _Ty0,
	class _Ty1,
	bool _Second>
	struct _Common_typeX
	{	
	typedef _Ty1 _Type;
	};

template<class _Ty0,
	class _Ty1>
	struct _Common_typeX<_Ty0, _Ty1, false>
	{	
	typedef _Ty0 _Type;
	};

template<class _Ty0,
	class _Ty1,
	bool _Uns0,
	bool _Uns1>
	struct _Common_typeY
	{	
	typedef _Ty0 _Type;
	};

template<class _Ty0,
	class _Ty1>
	struct _Common_typeY<_Ty0, _Ty1, false, true>
	{	
	typedef _Ty1 _Type;
	};

template<class _Ty0,
	class _Ty1,
	int _Rank0,
	int _Rank1>
	struct _Common_type
	{	
	typedef typename _Common_typeX<_Ty0, _Ty1, _Rank0 < _Rank1>::_Type _Type;
	};

template<class _Ty0,
	class _Ty1,
	int _Rank>
	struct _Common_type<_Ty0, _Ty1, _Rank, _Rank>
	{	
	typedef typename _Common_typeY<_Ty0, _Ty1,
		tr1::is_unsigned<_Ty0>::value,
		tr1::is_unsigned<_Ty1>::value>::_Type _Type;
	};

template<class _Ty0,
	class _Ty1>
	struct common_type
	{	
	typedef typename _Ipromo<_Ty0>::_Type _PromoTy0;
	typedef typename _Ipromo<_Ty1>::_Type _PromoTy1;
	typedef typename _Common_type<_PromoTy0, _PromoTy1,
		_Arithmetic_traits<_PromoTy0>::_Rank,
		_Arithmetic_traits<_PromoTy1>::_Rank>::_Type type;
	};

 #line 1286 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\type_traits"
}
 #pragma warning(pop)
 #pragma pack(pop)

#line 1291 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\type_traits"
#line 1292 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\type_traits"






#line 10 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\utility"

 #pragma pack(push,8)
 #pragma warning(push,3)

 #pragma warning(disable: 4180 4512)

namespace std {
	namespace tr1 {
	
template<class _Type>
	class reference_wrapper;

 
template<class _Type>
	struct _Unrefwrap
	{	
	typedef typename decay<_Type>::type type;
	};

template<class _Type>
	struct _Unrefwrap<reference_wrapper<_Type> >
	{	
	typedef _Type& type;
	};

template<class _Type>
	struct _Unrefwrap<const reference_wrapper<_Type> >
	{	
	typedef _Type& type;
	};

template<class _Type>
	struct _Unrefwrap<volatile reference_wrapper<_Type> >
	{	
	typedef _Type& type;
	};

template<class _Type>
	struct _Unrefwrap<const volatile reference_wrapper<_Type> >
	{	
	typedef _Type& type;
	};

 





#line 60 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\utility"
	}	
using tr1::_Unrefwrap;

	
template<class _Ty>
	struct identity
	{	
	typedef _Ty type;

	const _Ty& operator()(const _Ty& _Left) const
		{	
		return (_Left);
		}
	};

	
template<class _Ty> inline
	_Ty&& forward(typename identity<_Ty>::type& _Arg)
	{	
	return ((_Ty&&)_Arg);
	}

	
template<class _Ty> inline
	typename tr1::_Remove_reference<_Ty>::_Type&&
		move(_Ty&& _Arg)
	{	
	return ((typename tr1::_Remove_reference<_Ty>::_Type&&)_Arg);
	}

	
template<class _Ty> inline
	typename tr1::_Remove_reference<_Ty>::_Type&&
		_Move(_Ty&& _Arg)
	{	
	return ((typename tr1::_Remove_reference<_Ty>::_Type&&)_Arg);
	}

		
template<class _Ty> inline
	void swap(_Ty& _Left, _Ty& _Right)
	{	
	_Ty _Tmp = _Move(_Left);
	_Left = _Move(_Right);
	_Right = _Move(_Tmp);
	}

		
template<class _Ty> inline
	void _Swap_adl(_Ty& _Left, _Ty& _Right)
	{	
	swap(_Left, _Right);
	}

		

template<class _Ty1,
	class _Ty2>
	struct _Pair_base
	{	
	typedef _Pair_base<_Ty1, _Ty2> _Myt;
	typedef _Ty1 first_type;
	typedef _Ty2 second_type;

	_Pair_base()
		: first(_Ty1()), second(_Ty2())
		{	
		}

	_Pair_base(const _Pair_base<_Ty1, _Ty2>& _Right)
		: first(_Right.first), second(_Right.second)
		{	
		}

	_Pair_base(const _Ty1& _Val1, const _Ty2& _Val2)
		: first(_Val1), second(_Val2)
		{	
		}

	typedef typename tr1::remove_reference<_Ty1>::type _Ty1x;
	typedef typename tr1::remove_reference<_Ty2>::type _Ty2x;

	_Pair_base(_Ty1x&& _Val1, _Ty2x&& _Val2)
		: first(::std:: move(_Val1)),
			second(::std:: move(_Val2))
		{	
		}

	_Pair_base(const _Ty1x& _Val1, _Ty2x&& _Val2)
		: first(_Val1), second(::std:: move(_Val2))
		{	
		}

	_Pair_base(_Ty1x&& _Val1, const _Ty2x& _Val2)
		: first(::std:: move(_Val1)), second(_Val2)
		{	
		}

	template<class _Other1,
		class _Other2>
		_Pair_base(_Other1&& _Val1, _Other2&& _Val2)
		: first(::std:: forward<_Other1>(_Val1)),
			second(::std:: forward<_Other2>(_Val2))
		{	
		}

	_Ty1 first;	
	_Ty2 second;	
	};

template<class _Ty1,
	class _Ty2>
	struct pair
		: public _Pair_base<_Ty1, _Ty2>
	{	
	typedef _Pair_base<_Ty1, _Ty2> _Mybase;

	typedef pair<_Ty1, _Ty2> _Myt;
	typedef _Ty1 first_type;
	typedef _Ty2 second_type;

	pair()
		: _Mybase()
		{	
		}

	pair(const _Ty1& _Val1, const _Ty2& _Val2)
		: _Mybase(_Val1, _Val2)
		{	
		}

	template<class _Other1,
		class _Other2>
		pair(pair<_Other1, _Other2>& _Right)
		: _Mybase(_Right.first, _Right.second)
		{	
		}

	template<class _Other1,
		class _Other2>
		pair(const pair<_Other1, _Other2>& _Right)
		: _Mybase(_Right.first, _Right.second)
		{	
		}

	void swap(_Myt& _Right)
		{	
		if (this != &_Right)
			{	
			_Swap_adl(this->first, _Right.first);
			_Swap_adl(this->second, _Right.second);
			}
		}

	_Myt& operator=(const _Myt& _Right)
		{	
		this->first = _Right.first;
		this->second = _Right.second;
		return (*this);
		}

	typedef typename tr1::remove_reference<_Ty1>::type _Ty1x;
	typedef typename tr1::remove_reference<_Ty2>::type _Ty2x;

	pair(_Ty1x&& _Val1, _Ty2x&& _Val2)
		: _Mybase(::std:: move(_Val1),
			::std:: move(_Val2))
		{	
		}

	pair(const _Ty1x& _Val1, _Ty2x&& _Val2)
		: _Mybase(_Val1,
			::std:: move(_Val2))
		{	
		}

	pair(_Ty1x&& _Val1, const _Ty2x& _Val2)
		: _Mybase(::std:: move(_Val1),
			_Val2)
		{	
		}

	template<class _Other1,
		class _Other2>
		pair(_Other1&& _Val1, _Other2&& _Val2)
		: _Mybase(::std:: forward<_Other1>(_Val1),
			::std:: forward<_Other2>(_Val2))
		{	
		}

	template<class _Other1,
		class _Other2>
		pair(pair<_Other1, _Other2>&& _Right)
		: _Mybase(::std:: forward<_Other1>(_Right.first),
			::std:: forward<_Other2>(_Right.second))
		{	
		}

	pair& operator=(pair<_Ty1, _Ty2>&& _Right)
		{	
		this->first = ::std:: move(_Right.first);
		this->second = ::std:: move(_Right.second);
		return (*this);
		}

	void swap(_Myt&& _Right)
		{	
		if (this != &_Right)
			{	
			this->first = ::std:: move(_Right.first);
			this->second = ::std:: move(_Right.second);
			}
		}
	};

		

template<class _Ty1,
	class _Ty2> inline
	void swap(pair<_Ty1, _Ty2>& _Left, pair<_Ty1, _Ty2>& _Right)
	{	
	_Left.swap(_Right);
	}

template<class _Ty1,
	class _Ty2> inline
	void swap(pair<_Ty1, _Ty2>& _Left, pair<_Ty1, _Ty2>&& _Right)
	{	
	typedef pair<_Ty1, _Ty2> _Myt;
	_Left.swap(::std:: forward<_Myt>(_Right));
	}

template<class _Ty1,
	class _Ty2> inline
	void swap(pair<_Ty1, _Ty2>&& _Left, pair<_Ty1, _Ty2>& _Right)
	{	
	typedef pair<_Ty1, _Ty2> _Myt;
	_Right.swap(::std:: forward<_Myt>(_Left));
	}

template<class _Ty1,
	class _Ty2> inline
	bool operator==(const pair<_Ty1, _Ty2>& _Left,
		const pair<_Ty1, _Ty2>& _Right)
	{	
	return (_Left.first == _Right.first && _Left.second == _Right.second);
	}

template<class _Ty1,
	class _Ty2> inline
	bool operator!=(const pair<_Ty1, _Ty2>& _Left,
		const pair<_Ty1, _Ty2>& _Right)
	{	
	return (!(_Left == _Right));
	}

template<class _Ty1,
	class _Ty2> inline
	bool operator<(const pair<_Ty1, _Ty2>& _Left,
		const pair<_Ty1, _Ty2>& _Right)
	{	
	return (_Left.first < _Right.first ||
		!(_Right.first < _Left.first) && _Left.second < _Right.second);
	}

template<class _Ty1,
	class _Ty2> inline
	bool operator>(const pair<_Ty1, _Ty2>& _Left,
		const pair<_Ty1, _Ty2>& _Right)
	{	
	return (_Right < _Left);
	}

template<class _Ty1,
	class _Ty2> inline
	bool operator<=(const pair<_Ty1, _Ty2>& _Left,
		const pair<_Ty1, _Ty2>& _Right)
	{	
	return (!(_Right < _Left));
	}

template<class _Ty1,
	class _Ty2> inline
	bool operator>=(const pair<_Ty1, _Ty2>& _Left,
		const pair<_Ty1, _Ty2>& _Right)
	{	
	return (!(_Left < _Right));
	}

	

template<class _Ty1,
	class _Ty2> inline
	pair<typename _Unrefwrap<_Ty1>::type,
		typename _Unrefwrap<_Ty2>::type>
		make_pair(_Ty1&& _Val1, _Ty2&& _Val2)
	{	
	typedef pair<typename _Unrefwrap<_Ty1>::type,
		typename _Unrefwrap<_Ty2>::type> _Mypair;
	return (_Mypair(::std:: forward<_Ty1>(_Val1),
		::std:: forward<_Ty2>(_Val2)));
	}

template<class _Ty1,
	class _Ty2> inline
	pair<typename _Unrefwrap<_Ty1>::type,
		typename _Unrefwrap<_Ty2>::type>
		make_pair(const _Ty1& _Val1, _Ty2&& _Val2)
	{	
	typedef pair<typename _Unrefwrap<_Ty1>::type,
		typename _Unrefwrap<_Ty2>::type> _Mypair;
	return (_Mypair((typename _Unrefwrap<_Ty1>::type)_Val1,
		::std:: forward<_Ty2>(_Val2)));
	}

template<class _Ty1,
	class _Ty2> inline
	pair<typename _Unrefwrap<_Ty1>::type,
		typename _Unrefwrap<_Ty2>::type>
		make_pair(_Ty1&& _Val1, const _Ty2& _Val2)
	{	
	typedef pair<typename _Unrefwrap<_Ty1>::type,
		typename _Unrefwrap<_Ty2>::type> _Mypair;
	return (_Mypair(::std:: forward<_Ty1>(_Val1),
		(typename _Unrefwrap<_Ty2>::type)_Val2));
	}

template<class _Ty1,
	class _Ty2> inline
	pair<typename _Unrefwrap<_Ty1>::type,
		typename _Unrefwrap<_Ty2>::type>
		make_pair(const _Ty1& _Val1, const _Ty2& _Val2)
	{	
	typedef pair<typename _Unrefwrap<_Ty1>::type,
		typename _Unrefwrap<_Ty2>::type> _Mypair;
	return (_Mypair((typename _Unrefwrap<_Ty1>::type)_Val1,
		(typename _Unrefwrap<_Ty2>::type)_Val2));
	}

 
template<class _InIt> inline
	_InIt begin(const pair<_InIt, _InIt>& _Pair)
	{	
	return (_Pair.first);
	}

template<class _InIt> inline
	_InIt end(const pair<_InIt, _InIt>& _Pair)
	{	
	return (_Pair.second);
	}
 #line 412 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\utility"

		
	namespace rel_ops
		{	
template<class _Ty> inline
	bool operator!=(const _Ty& _Left, const _Ty& _Right)
	{	
	return (!(_Left == _Right));
	}

template<class _Ty> inline
	bool operator>(const _Ty& _Left, const _Ty& _Right)
	{	
	return (_Right < _Left);
	}

template<class _Ty> inline
	bool operator<=(const _Ty& _Left, const _Ty& _Right)
	{	
	return (!(_Right < _Left));
	}

template<class _Ty> inline
	bool operator>=(const _Ty& _Left, const _Ty& _Right)
	{	
	return (!(_Left < _Right));
	}
		}
}

 
namespace std {
	namespace tr1 {	
	
template<class _Tuple>
	struct tuple_size;
template<size_t _Idx,
	class _Tuple>
	struct tuple_element;
template<class _Ty1,
	class _Ty2>
	struct tuple_size<::std:: pair<_Ty1, _Ty2> >
	{	
	static const int value = 2;
	};

template<int _Idx,
	class _Ty>
	struct _Pair_data;
template<class _Ty1,
	class _Ty2>
	struct _Pair_data<0, ::std:: pair<_Ty1, _Ty2> >
	{	
	typedef _Ty1& _Type;
	typedef const _Ty1& _CType;

	static _Type _Val(::std:: pair<_Ty1, _Ty2>& _Pr)
		{	
		return (_Pr.first);
		}

	static _CType _Val(const ::std:: pair<_Ty1, _Ty2>& _Pr)
		{	
		return (_Pr.first);
		}
	};

template<class _Ty1,
	class _Ty2>
	struct _Pair_data<1, ::std:: pair<_Ty1, _Ty2> >
	{	
	typedef _Ty2& _Type;
	typedef const _Ty2& _CType;

	static _Type _Val(::std:: pair<_Ty1, _Ty2>& _Pr)
		{	
		return (_Pr.second);
		}

	static _CType _Val(const ::std:: pair<_Ty1, _Ty2>& _Pr)
		{	
		return (_Pr.second);
		}
	};

template<class _Ty1,
	class _Ty2>
	struct tuple_element<0, ::std:: pair<_Ty1, _Ty2> >
	{	
	typedef _Ty1 type;
	};

template<class _Ty1,
	class _Ty2>
	struct tuple_element<1, ::std:: pair<_Ty1, _Ty2> >
	{	
	typedef _Ty2 type;
	};

template<int _Idx,
	class _Ty1,
	class _Ty2>
	typename _Pair_data<_Idx, ::std:: pair<_Ty1, _Ty2> >::_Type
		get(::std:: pair<_Ty1, _Ty2>& _Pr)
	{	
	return (_Pair_data<_Idx, ::std:: pair<_Ty1, _Ty2> >::_Val(_Pr));
	}

template<int _Idx,
	class _Ty1,
	class _Ty2>
	typename _Pair_data<_Idx, ::std:: pair<_Ty1, _Ty2> >::_CType
		get(const ::std:: pair<_Ty1, _Ty2>& _Pr)
	{	
	return (_Pair_data<_Idx, ::std:: pair<_Ty1, _Ty2> >::_Val(_Pr));
	}
	}	
}
 #line 531 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\utility"

 
namespace std {
using tr1::get;
using tr1::tuple_element;
using tr1::tuple_size;
}
 #line 539 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\utility"

 #pragma warning(pop)
 #pragma pack(pop)

#line 544 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\utility"
#line 545 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\utility"






















#line 9 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xutility"

 #pragma pack(push,8)
 #pragma warning(push,3)

namespace std {
		

 












#line 30 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xutility"
  
 #line 32 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xutility"

		
struct __declspec(dllimport) _Container_base0
	{	
	void _Orphan_all()
		{	
		}

	void _Swap_all(_Container_base0&)
		{	
		}
	};

struct _Iterator_base0
	{	
	void _Adopt(const void *)
		{	
		}

	const _Container_base0 *_Getcont() const
		{	
		return (0);
		}
	};

struct _Container_base12;
struct _Iterator_base12;

		
struct _Container_proxy
	{	
	_Container_proxy()
		: _Mycont(0), _Myfirstiter(0)
		{	
		}

	const _Container_base12 *_Mycont;
	_Iterator_base12 *_Myfirstiter;
	};

struct __declspec(dllimport) _Container_base12
	{	
public:
	_Container_base12()
		: _Myproxy(0)
		{	
		}

	_Container_base12(const _Container_base12&)
		: _Myproxy(0)
		{	
		}

	_Container_base12& operator=(const _Container_base12&)
		{	
		return (*this);
		}

	~_Container_base12()
		{	
		_Orphan_all();
		}

	_Iterator_base12 **_Getpfirst() const
		{	
		return (_Myproxy == 0 ? 0 : &_Myproxy->_Myfirstiter);
		}

	void _Orphan_all();	
	void _Swap_all(_Container_base12&);	

	_Container_proxy *_Myproxy;
	};

struct _Iterator_base12
	{	
public:
	_Iterator_base12()
		: _Myproxy(0), _Mynextiter(0)
		{	
		}

	_Iterator_base12(const _Iterator_base12& _Right)
		: _Myproxy(0), _Mynextiter(0)
		{	
		*this = _Right;
		}

	_Iterator_base12& operator=(const _Iterator_base12& _Right)
		{	
		if (_Myproxy != _Right._Myproxy)
			_Adopt(_Right._Myproxy->_Mycont);
		return (*this);
		}

	~_Iterator_base12()
		{	
 


#line 133 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xutility"
		}

	void _Adopt(const _Container_base12 *_Parent)
		{	
		if (_Parent != 0)
			{	
			_Container_proxy *_Parent_proxy = _Parent->_Myproxy;

 








#line 151 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xutility"
			_Myproxy = _Parent_proxy;
 #line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xutility"
			}
		}

	void _Clrcont()
		{	
		_Myproxy = 0;
		}

	const _Container_base12 *_Getcont() const
		{	
		return (_Myproxy == 0 ? 0 : _Myproxy->_Mycont);
		}

	_Iterator_base12 **_Getpnext()
		{	
		return (&_Mynextiter);
		}

	void _Orphan_me()
		{	
 











#line 186 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xutility"
		}

	_Container_proxy *_Myproxy;
	_Iterator_base12 *_Mynextiter;
	};

		
inline void _Container_base12::_Orphan_all()
	{	
 









#line 206 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xutility"
	}

inline void _Container_base12::_Swap_all(_Container_base12& _Right)
	{	
 

#line 213 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xutility"

	_Container_proxy *_Temp = _Myproxy;
	_Myproxy = _Right._Myproxy;
	_Right._Myproxy = _Temp;

	if (_Myproxy != 0)
		_Myproxy->_Mycont = (_Container_base12 *)this;
	if (_Right._Myproxy != 0)
		_Right._Myproxy->_Mycont = (_Container_base12 *)&_Right;
	}

 
typedef _Container_base0 _Container_base;
typedef _Iterator_base0 _Iterator_base;
 


#line 231 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xutility"

		

 


::std:: tr1::_No _Has_unchecked_type(...);

template<class _Ty>
	::std:: tr1::_Yes _Has_unchecked_type(_Ty *,
		typename _Ty::_Unchecked_type * = 0);

template<class _Iter,
	bool>
	struct _Unchecked_helper
	{	
	typedef _Iter type;
	};

template<class _Iter>
	struct _Unchecked_helper<_Iter, true>
	{	
	typedef typename _Iter::_Unchecked_type type;
	};

template<class _Iter>
	struct _Get_unchecked_type
	{	
	typedef typename _Unchecked_helper<_Iter,
		(sizeof (_Has_unchecked_type((_Iter *)0)) == sizeof (::std:: tr1::_Yes))>::type type;
	};

		
template<class _Iter> inline
	_Iter _Unchecked(_Iter _Src)
	{	
	return (_Src);
	}

		
template<class _Iter,
	class _UIter> inline
	_Iter& _Rechecked(_Iter& _Dest, _UIter _Src)
	{	
	_Dest = _Src;
	return (_Dest);
	}

		
template<class _Iter>
	struct _Is_checked_helper
	: public ::std:: tr1::integral_constant<bool, (sizeof (_Has_unchecked_type((_Iter *)0)) == sizeof (::std:: tr1::_Yes))>
	{	
	};

		
template<class _Iter> inline
	_Is_checked_helper<_Iter> _Is_checked(_Iter)
	{	
	return (_Is_checked_helper<_Iter>());
	}

		
		
struct input_iterator_tag
	{	
	};

struct output_iterator_tag
	{	
	};

struct forward_iterator_tag
	: public input_iterator_tag, output_iterator_tag
	{	
	};

struct bidirectional_iterator_tag
	: public forward_iterator_tag
	{	
	};

struct random_access_iterator_tag
	: public bidirectional_iterator_tag
	{	
	};

struct _Int_iterator_tag
	{	
	};

		
struct _Nonscalar_ptr_iterator_tag
	{	
	};
struct _Scalar_ptr_iterator_tag
	{	
	};

		
template<class _Category,
	class _Ty,
	class _Diff = ptrdiff_t,
	class _Pointer = _Ty *,
	class _Reference = _Ty&>
	struct iterator
	{	
	typedef _Category iterator_category;
	typedef _Ty value_type;
	typedef _Diff difference_type;
	typedef _Diff distance_type;	
	typedef _Pointer pointer;
	typedef _Reference reference;
	};

template<class _Category,
	class _Ty,
	class _Diff,
	class _Pointer,
	class _Reference,
	class _Base>
	struct _Iterator012
		: public _Base
	{
	typedef _Category iterator_category;
	typedef _Ty value_type;
	typedef _Diff difference_type;
	typedef _Diff distance_type;	
	typedef _Pointer pointer;
	typedef _Reference reference;
	};

struct _Outit
	: public iterator<output_iterator_tag, void, void,
		void, void>
	{	
	};

		
template<class _Iter>
	struct iterator_traits
	{	
	typedef typename _Iter::iterator_category iterator_category;
	typedef typename _Iter::value_type value_type;
	typedef typename _Iter::difference_type difference_type;
	typedef difference_type distance_type;	
	typedef typename _Iter::pointer pointer;
	typedef typename _Iter::reference reference;
	};

template<class _Ty>
	struct iterator_traits<_Ty *>
	{	
	typedef random_access_iterator_tag iterator_category;
	typedef _Ty value_type;
	typedef ptrdiff_t difference_type;
	typedef ptrdiff_t distance_type;	
	typedef _Ty *pointer;
	typedef _Ty& reference;
	};

template<class _Ty>
	struct iterator_traits<const _Ty *>
	{	
	typedef random_access_iterator_tag iterator_category;
	typedef _Ty value_type;
	typedef ptrdiff_t difference_type;
	typedef ptrdiff_t distance_type;	
	typedef const _Ty *pointer;
	typedef const _Ty& reference;
	};

template<> struct iterator_traits<_Bool>
	{	
	typedef _Int_iterator_tag iterator_category;
	};

template<> struct iterator_traits<char>
	{	
	typedef _Int_iterator_tag iterator_category;
	};

template<> struct iterator_traits<signed char>
	{	
	typedef _Int_iterator_tag iterator_category;
	};

template<> struct iterator_traits<unsigned char>
	{	
	typedef _Int_iterator_tag iterator_category;
	};

 
template<> struct iterator_traits<wchar_t>
	{	
	typedef _Int_iterator_tag iterator_category;
	};
 #line 429 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xutility"

template<> struct iterator_traits<short>
	{	
	typedef _Int_iterator_tag iterator_category;
	};

template<> struct iterator_traits<unsigned short>
	{	
	typedef _Int_iterator_tag iterator_category;
	};

template<> struct iterator_traits<int>
	{	
	typedef _Int_iterator_tag iterator_category;
	};

template<> struct iterator_traits<unsigned int>
	{	
	typedef _Int_iterator_tag iterator_category;
	};

template<> struct iterator_traits<long>
	{	
	typedef _Int_iterator_tag iterator_category;
	};

template<> struct iterator_traits<unsigned long>
	{	
	typedef _Int_iterator_tag iterator_category;
	};

 
template<> struct iterator_traits<__int64>
	{	
	typedef _Int_iterator_tag iterator_category;
	};

template<> struct iterator_traits<unsigned __int64>
	{	
	typedef _Int_iterator_tag iterator_category;
	};
 #line 471 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xutility"

		
template<class _Iter> inline
	typename iterator_traits<_Iter>::iterator_category
		_Iter_cat(const _Iter&)
	{	
	typename iterator_traits<_Iter>::iterator_category _Cat;
	return (_Cat);
	}

		
template<class _Iter1,
	class _Iter2> inline
	_Nonscalar_ptr_iterator_tag _Ptr_cat(_Iter1&, _Iter2&)
	{	
	_Nonscalar_ptr_iterator_tag _Cat;
	return (_Cat);
	}

template<class _Elem1,
	class _Elem2>
	struct _Ptr_cat_helper
	{	
	typedef _Nonscalar_ptr_iterator_tag _Type;
	};

template<class _Elem>
	struct _Ptr_cat_helper<_Elem, _Elem>
	{	
	typedef typename ::std:: tr1::conditional<
		::std:: tr1::is_scalar<_Elem>::value,
			_Scalar_ptr_iterator_tag,
			_Nonscalar_ptr_iterator_tag>::type _Type;
	};

template<class _Anything>
	struct _Ptr_cat_helper<_Anything *, const _Anything *>
	{	
	typedef _Scalar_ptr_iterator_tag _Type;
	};

template<class _Elem1,
	class _Elem2> inline
	typename _Ptr_cat_helper<_Elem1, _Elem2>::_Type
		_Ptr_cat(_Elem1 *, _Elem2 *)
	{	
	typename _Ptr_cat_helper<_Elem1, _Elem2>::_Type _Cat;
	return (_Cat);
	}

template<class _Elem1,
	class _Elem2> inline
	typename _Ptr_cat_helper<_Elem1, _Elem2>::_Type
		_Ptr_cat(const _Elem1 *, _Elem2 *)
	{	
	typename _Ptr_cat_helper<_Elem1, _Elem2>::_Type _Cat;
	return (_Cat);
	}

		

 
  
  
  
  
  
  
  
  

 















































































































































































































































#line 783 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xutility"

		
		

template<class _Iter> inline
	typename iterator_traits<_Iter>::value_type *_Val_type(_Iter)
	{	
	return (0);
	}

		
template<class _InIt,
	class _Diff> inline
	void advance(_InIt& _Where, _Diff _Off)
	{	
	_Advance(_Where, _Off, _Iter_cat(_Where));
	}

template<class _InIt,
	class _Diff> inline
	void _Advance(_InIt& _Where, _Diff _Off, input_iterator_tag)
	{	
 


#line 809 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xutility"

	for (; 0 < _Off; --_Off)
		++_Where;
	}

template<class _FI,
	class _Diff> inline
	void _Advance(_FI& _Where, _Diff _Off, forward_iterator_tag)
	{	
 


#line 822 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xutility"

	for (; 0 < _Off; --_Off)
		++_Where;
	}

template<class _BI,
	class _Diff> inline
	void _Advance(_BI& _Where, _Diff _Off, bidirectional_iterator_tag)
	{	
	for (; 0 < _Off; --_Off)
		++_Where;
	for (; _Off < 0; ++_Off)
		--_Where;
	}

template<class _RI,
	class _Diff> inline
	void _Advance(_RI& _Where, _Diff _Off, random_access_iterator_tag)
	{	
	_Where += _Off;
	}

		

template<class _Iter> inline
	typename iterator_traits<_Iter>::difference_type
		*_Dist_type(_Iter)
	{	
	return (0);
	}

		
template<class _InIt,
	class _Diff> inline
		void _Distance2(_InIt _First, _InIt _Last, _Diff& _Off,
			input_iterator_tag)
	{	
	for (; _First != _Last; ++_First)
		++_Off;
	}

template<class _FwdIt,
	class _Diff> inline
		void _Distance2(_FwdIt _First, _FwdIt _Last, _Diff& _Off,
			forward_iterator_tag)
	{	
	for (; _First != _Last; ++_First)
		++_Off;
	}

template<class _BidIt,
	class _Diff> inline
		void _Distance2(_BidIt _First, _BidIt _Last, _Diff& _Off,
			bidirectional_iterator_tag)
	{	
	for (; _First != _Last; ++_First)
		++_Off;
	}

template<class _RanIt,
	class _Diff> inline
		void _Distance2(_RanIt _First, _RanIt _Last, _Diff& _Off,
			random_access_iterator_tag)
	{	
 





#line 893 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xutility"

	_Off += _Last - _First;
	}

template<class _InIt> inline
	typename iterator_traits<_InIt>::difference_type
		distance(_InIt _First, _InIt _Last)
	{	
	typename iterator_traits<_InIt>::difference_type _Off = 0;
	_Distance2(_First, _Last, _Off, _Iter_cat(_First));
	return (_Off);
	}

template<class _InIt,
	class _Diff> inline
		void _Distance(_InIt _First, _InIt _Last, _Diff& _Off)
	{	
	_Distance2(_First, _Last, _Off, _Iter_cat(_First));
	}

 
		
template<class _InIt,
	class _Diff> inline
		_InIt _Increment(_InIt _First, _Diff _Off,
			input_iterator_tag)
	{	
	for (; 0 < _Off; --_Off)
		++_First;
	return (_First);
	}

template<class _FwdIt,
	class _Diff> inline
		_FwdIt _Increment(_FwdIt _First, _Diff _Off,
			forward_iterator_tag)
	{	
	for (; 0 < _Off; --_Off)
		++_First;
	return (_First);
	}

template<class _BidIt,
	class _Diff> inline
		_BidIt _Increment(_BidIt _First, _Diff _Off,
			bidirectional_iterator_tag)
	{	
	for (; _Off < 0; ++_Off)
		--_First;
	for (; 0 < _Off; --_Off)
		++_First;
	return (_First);
	}

template<class _RanIt,
	class _Diff> inline
		_RanIt _Increment(_RanIt _First, _Diff _Off,
			random_access_iterator_tag)
	{	
	return (_First + _Off);
	}

template<class _InIt> inline
	_InIt next(_InIt _First,
		typename iterator_traits<_InIt>::difference_type _Off = 1)
	{	
	return (_Increment(_First, _Off, _Iter_cat(_First)));
	}

template<class _InIt> inline
	_InIt prev(_InIt _First,
		typename iterator_traits<_InIt>::difference_type _Off = 1)
	{	
	return (_Increment(_First, -_Off, _Iter_cat(_First)));
	}

template<class _Container> inline
	typename _Container::iterator begin(_Container& _Cont)
	{	
	return (_Cont.begin());
	}

template<class _Container> inline
	typename _Container::const_iterator begin(const _Container& _Cont)
	{	
	return (_Cont.begin());
	}

template<class _Container> inline
	typename _Container::iterator end(_Container& _Cont)
	{	
	return (_Cont.end());
	}

template<class _Container> inline
	typename _Container::const_iterator end(const _Container& _Cont)
	{	
	return (_Cont.end());
	}

template<class _Ty,
	size_t _Size> inline
	_Ty *begin(_Ty (&_Array)[_Size])
	{	
	return (&_Array[0]);
	}

template<class _Ty,
	size_t _Size> inline
	_Ty *end(_Ty (&_Array)[_Size])
	{	
	return (&_Array[0] + _Size);
	}
 #line 1007 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xutility"

		
template<class _RanIt,
	class _Base>
	class _Revranit
		: public _Base
	{	
public:
	typedef _Revranit<_RanIt, _Base> _Myt;
 	typedef typename _Base::difference_type difference_type;
	typedef typename _Base::pointer pointer;
	typedef typename _Base::reference reference;
	typedef _RanIt iterator_type;

	_Revranit()
		{	
		}

	explicit _Revranit(_RanIt _Right)
		: current(_Right)
		{	
		}

	template<class _RanIt2,
		class _Base2>
		_Revranit(const _Revranit<_RanIt2, _Base2>& _Right)
		: current(_Right.base())
		{	
		}

	_RanIt base() const
		{	
		return (current);
		}

	reference operator*() const
		{	
		_RanIt _Tmp = current;
		return (*--_Tmp);
		}

	pointer operator->() const
		{	
		return (&**this);
		}

	_Myt& operator++()
		{	
		--current;
		return (*this);
		}

	_Myt operator++(int)
		{	
		_Myt _Tmp = *this;
		--current;
		return (_Tmp);
		}

	_Myt& operator--()
		{	
		++current;
		return (*this);
		}

	_Myt operator--(int)
		{	
		_Myt _Tmp = *this;
		++current;
		return (_Tmp);
		}

	template<class _RanIt2,
		class _Base2>
		bool _Equal(const _Revranit<_RanIt2, _Base2>& _Right) const
		{	
		return (current == _Right.base());
		}



	_Myt& operator+=(difference_type _Off)
		{	
		current -= _Off;
		return (*this);
		}

	_Myt operator+(difference_type _Off) const
		{	
		return (_Myt(current - _Off));
		}

	_Myt& operator-=(difference_type _Off)
		{	
		current += _Off;
		return (*this);
		}

	_Myt operator-(difference_type _Off) const
		{	
		return (_Myt(current + _Off));
		}

	reference operator[](difference_type _Off) const
		{	
		return (*(*this + _Off));
		}

	template<class _RanIt2,
		class _Base2>
		bool _Less(const _Revranit<_RanIt2, _Base2>& _Right) const
		{	
		return (_Right.base() < current);
		}

	difference_type operator-(const _Myt& _Right) const
		{	
		return (_Right.base() - current);
		}

protected:
	_RanIt current;	
	};

		
template<class _RanIt,
	class _Base,
	class _Diff> inline
	_Revranit<_RanIt, _Base>
		operator+(_Diff _Off,
		const _Revranit<_RanIt, _Base>& _Right)
	{	
	return (_Right + _Off);
	}

template<class _RanIt1,
	class _Base1,
	class _RanIt2,
	class _Base2> inline
	typename _Base1::difference_type operator-(
		const _Revranit<_RanIt1, _Base1>& _Left,
		const _Revranit<_RanIt2, _Base2>& _Right)
	{	
	return (_Right.base() - _Left.base());
	}

template<class _RanIt1,
	class _Base1,
	class _RanIt2,
	class _Base2> inline
	bool operator==(
		const _Revranit<_RanIt1, _Base1>& _Left,
		const _Revranit<_RanIt2, _Base2>& _Right)
	{	
	return (_Left._Equal(_Right));
	}

template<class _RanIt1,
	class _Base1,
	class _RanIt2,
	class _Base2> inline
	bool operator!=(
		const _Revranit<_RanIt1, _Base1>& _Left,
		const _Revranit<_RanIt2, _Base2>& _Right)
	{	
	return (!(_Left == _Right));
	}

template<class _RanIt1,
	class _Base1,
	class _RanIt2,
	class _Base2> inline
	bool operator<(
		const _Revranit<_RanIt1, _Base1>& _Left,
		const _Revranit<_RanIt2, _Base2>& _Right)
	{	
	return (_Left._Less(_Right));
	}

template<class _RanIt1,
	class _Base1,
	class _RanIt2,
	class _Base2> inline
	bool operator>(
		const _Revranit<_RanIt1, _Base1>& _Left,
		const _Revranit<_RanIt2, _Base2>& _Right)
	{	
	return (_Right < _Left);
	}

template<class _RanIt1,
	class _Base1,
	class _RanIt2,
	class _Base2> inline
	bool operator<=(
		const _Revranit<_RanIt1, _Base1>& _Left,
		const _Revranit<_RanIt2, _Base2>& _Right)
	{	
	return (!(_Right < _Left));
	}

template<class _RanIt1,
	class _Base1,
	class _RanIt2,
	class _Base2> inline
	bool operator>=(
		const _Revranit<_RanIt1, _Base1>& _Left,
		const _Revranit<_RanIt2, _Base2>& _Right)
	{	
	return (!(_Left < _Right));
	}

		
template<class _RanIt>
	class reverse_iterator
		: public _Revranit<_RanIt, iterator<
			typename iterator_traits<_RanIt>::iterator_category,
			typename iterator_traits<_RanIt>::value_type,
			typename iterator_traits<_RanIt>::difference_type,
			typename iterator_traits<_RanIt>::pointer,
			typename iterator_traits<_RanIt>::reference> >
	{	
	typedef reverse_iterator<_RanIt> _Myt;
	typedef _Revranit<_RanIt, iterator<
		typename iterator_traits<_RanIt>::iterator_category,
		typename iterator_traits<_RanIt>::value_type,
		typename iterator_traits<_RanIt>::difference_type,
		typename iterator_traits<_RanIt>::pointer,
		typename iterator_traits<_RanIt>::reference> > _Mybase;

public:
 	typedef typename iterator_traits<_RanIt>::difference_type difference_type;
	typedef typename iterator_traits<_RanIt>::pointer pointer;
	typedef typename iterator_traits<_RanIt>::reference reference;
	typedef _RanIt iterator_type;

	reverse_iterator()
		{	
		}

	explicit reverse_iterator(_RanIt _Right)
		: _Mybase(_Right)
		{	
		}

	template<class _Other>
		reverse_iterator(const reverse_iterator<_Other>& _Right)
		: _Mybase(_Right.base())
		{	
		}

	reverse_iterator(_Mybase _Right)
		: _Mybase(_Right)
		{	
		}

	_Myt& operator++()
		{	
		++*((_Mybase *)this);
		return (*this);
		}

	_Myt operator++(int)
		{	
		_Myt _Tmp = *this;
		++*this;
		return (_Tmp);
		}

	_Myt& operator--()
		{	
		--*((_Mybase *)this);
		return (*this);
		}

	_Myt operator--(int)
		{	
		_Myt _Tmp = *this;
		--*this;
		return (_Tmp);
		}

	_Myt& operator+=(difference_type _Off)
		{	
		*((_Mybase *)this) += _Off;
		return (*this);
		}

	_Myt operator+(difference_type _Off) const
		{	
		_Myt _Tmp = *this;
		return (_Tmp += _Off);
		}

	_Myt& operator-=(difference_type _Off)
		{	
		*((_Mybase *)this) -= _Off;
		return (*this);
		}

	_Myt operator-(difference_type _Off) const
		{	
		_Myt _Tmp = *this;
		return (_Tmp -= _Off);
		}
	};

template<class _RanIt>
	struct _Is_checked_helper<reverse_iterator<_RanIt> >
	: public _Is_checked_helper<_RanIt>
	{	
	};

		
template<class _RanIt,
	class _Diff> inline
	reverse_iterator<_RanIt> operator+(_Diff _Off,
		const reverse_iterator<_RanIt>& _Right)
	{	
	return (_Right + _Off);
	}

template<class _RanIt1,
	class _RanIt2> inline
	typename reverse_iterator<_RanIt1>::difference_type
		operator-(const reverse_iterator<_RanIt1>& _Left,
			const reverse_iterator<_RanIt2>& _Right)
	{	
	return (_Right.base() - _Left.base());
	}

template<class _RanIt1,
	class _RanIt2> inline
	bool operator==(const reverse_iterator<_RanIt1>& _Left,
		const reverse_iterator<_RanIt2>& _Right)
	{	
	return (_Left._Equal(_Right));
	}

template<class _RanIt1,
	class _RanIt2> inline
	bool operator!=(const reverse_iterator<_RanIt1>& _Left,
		const reverse_iterator<_RanIt2>& _Right)
	{	
	return (!(_Left == _Right));
	}

template<class _RanIt1,
	class _RanIt2> inline
	bool operator<(const reverse_iterator<_RanIt1>& _Left,
		const reverse_iterator<_RanIt2>& _Right)
	{	
	return (_Left._Less(_Right));
	}

template<class _RanIt1,
	class _RanIt2> inline
	bool operator>(const reverse_iterator<_RanIt1>& _Left,
		const reverse_iterator<_RanIt2>& _Right)
	{	
	return (_Right < _Left);
	}

template<class _RanIt1,
	class _RanIt2> inline
	bool operator<=(const reverse_iterator<_RanIt1>& _Left,
		const reverse_iterator<_RanIt2>& _Right)
	{	
	return (!(_Right < _Left));
	}

template<class _RanIt1,
	class _RanIt2> inline
	bool operator>=(const reverse_iterator<_RanIt1>& _Left,
		const reverse_iterator<_RanIt2>& _Right)
	{	
	return (!(_Left < _Right));
	}

		
template<class _BidIt,
	class _Ty,
	class _Reference = _Ty&,
	class _Pointer = _Ty *,
	class _Diff = ptrdiff_t>
	class reverse_bidirectional_iterator
		: public iterator<bidirectional_iterator_tag, _Ty, _Diff,
			_Pointer, _Reference>
	{	
public:
	typedef reverse_bidirectional_iterator<_BidIt, _Ty, _Reference,
		_Pointer, _Diff> _Myt;
	typedef _BidIt iterator_type;

	reverse_bidirectional_iterator()
		{	
		}

	explicit reverse_bidirectional_iterator(_BidIt _Right)
		: current(_Right)
		{	
		}

	_BidIt base() const
		{	
		return (current);
		}

	_Reference operator*() const
		{	
		_BidIt _Tmp = current;
		return (*--_Tmp);
		}

	_Pointer operator->() const
		{	
		_Reference _Tmp = **this;
		return (&_Tmp);
		}

	_Myt& operator++()
		{	
		--current;
		return (*this);
		}

	_Myt operator++(int)
		{	
		_Myt _Tmp = *this;
		--current;
		return (_Tmp);
		}

	_Myt& operator--()
		{	
		++current;
		return (*this);
		}

	_Myt operator--(int)
		{	
		_Myt _Tmp = *this;
		++current;
		return (_Tmp);
		}

	bool operator==(const _Myt& _Right) const
		{	
		return (current == _Right.current);
		}

	bool operator!=(const _Myt& _Right) const
		{	
		return (!(*this == _Right));
		}

protected:
	_BidIt current;	
	};

		
template<class _BidIt,
	class _BidIt2 = _BidIt>
	class _Revbidit
		: public iterator<
			typename iterator_traits<_BidIt>::iterator_category,
			typename iterator_traits<_BidIt>::value_type,
			typename iterator_traits<_BidIt>::difference_type,
			typename iterator_traits<_BidIt>::pointer,
			typename iterator_traits<_BidIt>::reference>
	{	
public:
	typedef _Revbidit<_BidIt, _BidIt2> _Myt;
	typedef typename iterator_traits<_BidIt>::difference_type _Diff;
	typedef typename iterator_traits<_BidIt>::pointer _Pointer;
	typedef typename iterator_traits<_BidIt>::reference _Reference;
	typedef _BidIt iterator_type;

	_Revbidit()
		{	
		}

	explicit _Revbidit(_BidIt _Right)
		: current(_Right)
		{	
		}

	_Revbidit(const _Revbidit<_BidIt2>& _Other)
		: current (_Other.base())
		{	
		}

	_BidIt base() const
		{	
		return (current);
		}

	_Reference operator*() const
		{	
		_BidIt _Tmp = current;
		return (*--_Tmp);
		}

	_Pointer operator->() const
		{	
		_Reference _Tmp = **this;
		return (&_Tmp);
		}

	_Myt& operator++()
		{	
		--current;
		return (*this);
		}

	_Myt operator++(int)
		{	
		_Myt _Tmp = *this;
		--current;
		return (_Tmp);
		}

	_Myt& operator--()
		{	
		++current;
		return (*this);
		}

	_Myt operator--(int)
		{	
		_Myt _Tmp = *this;
		++current;
		return (_Tmp);
		}

	bool operator==(const _Myt& _Right) const
		{	
		return (current == _Right.current);
		}

	bool operator!=(const _Myt& _Right) const
		{	
		return (!(*this == _Right));
		}

protected:
	_BidIt current;
	};

		
template<class _Ty,
	size_t _Size>
	class _Array_const_iterator
		: public _Iterator012<random_access_iterator_tag,
			_Ty,
			ptrdiff_t,
			const _Ty *,
			const _Ty&,
			_Iterator_base>
	{	
public:
	typedef _Array_const_iterator<_Ty, _Size> _Myiter;
	typedef random_access_iterator_tag iterator_category;

	typedef _Ty value_type;
	typedef size_t size_type;
	typedef ptrdiff_t difference_type;
	typedef const _Ty *pointer;
	typedef const _Ty& reference;
	enum {_EEN_SIZE = _Size};	
	enum {_EEN_IDL =
		0};	

 
	_Array_const_iterator()
		{	
		_Ptr = 0;
		}

	explicit _Array_const_iterator(pointer _Parg, size_t _Off = 0)
		{	
		_Ptr = _Parg + _Off;
		}

	typedef pointer _Unchecked_type;

	_Myiter& _Rechecked(_Unchecked_type _Right)
		{	
		_Ptr = _Right;
		return (*this);
		}

	_Unchecked_type _Unchecked() const
		{	
		return (_Ptr);
		}

	reference operator*() const
		{	
		return (*_Ptr);
		}

	pointer operator->() const
		{	
		return (&**this);
		}

	_Myiter& operator++()
		{	
		++_Ptr;
		return (*this);
		}

	_Myiter operator++(int)
		{	
		_Myiter _Tmp = *this;
		++*this;
		return (_Tmp);
		}

	_Myiter& operator--()
		{	
		--_Ptr;
		return (*this);
		}

	_Myiter operator--(int)
		{	
		_Myiter _Tmp = *this;
		--*this;
		return (_Tmp);
		}

	_Myiter& operator+=(difference_type _Off)
		{	
		_Ptr += _Off;
		return (*this);
		}

	_Myiter operator+(difference_type _Off) const
		{	
		_Myiter _Tmp = *this;
		return (_Tmp += _Off);
		}

	_Myiter& operator-=(difference_type _Off)
		{	
		return (*this += -_Off);
		}

	_Myiter operator-(difference_type _Off) const
		{	
		_Myiter _Tmp = *this;
		return (_Tmp -= _Off);
		}

	difference_type operator-(const _Myiter& _Right) const
		{	
		return (_Ptr - _Right._Ptr);
		}

	reference operator[](difference_type _Off) const
		{	
		return (*(*this + _Off));
		}

	bool operator==(const _Myiter& _Right) const
		{	
		return (_Ptr == _Right._Ptr);
		}

	bool operator!=(const _Myiter& _Right) const
		{	
		return (!(*this == _Right));
		}

	bool operator<(const _Myiter& _Right) const
		{	
		return (_Ptr < _Right._Ptr);
		}

	bool operator>(const _Myiter& _Right) const
		{	
		return (_Right < *this);
		}

	bool operator<=(const _Myiter& _Right) const
		{	
		return (!(_Right < *this));
		}

	bool operator>=(const _Myiter& _Right) const
		{	
		return (!(*this < _Right));
		}

	pointer _Ptr;	

 








































































































































































































#line 1907 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xutility"
	};

template<class _Ty,
	size_t _Size> inline
	typename _Array_const_iterator<_Ty, _Size>::_Unchecked_type
		_Unchecked(_Array_const_iterator<_Ty, _Size> _Iter)
	{	
	return (_Iter._Unchecked());
	}

template<class _Ty,
	size_t _Size> inline
	_Array_const_iterator<_Ty, _Size>&
		_Rechecked(_Array_const_iterator<_Ty, _Size>& _Iter,
			typename _Array_const_iterator<_Ty, _Size>
				::_Unchecked_type _Right)
	{	
	return (_Iter._Rechecked(_Right));
	}

template<class _Ty,
	size_t _Size> inline
	_Array_const_iterator<_Ty, _Size> operator+(
		typename _Array_const_iterator<_Ty, _Size>::difference_type _Off,
		_Array_const_iterator<_Ty, _Size> _Next)
	{	
	return (_Next += _Off);
	}

		
template<class _Ty,
	size_t _Size>
	class _Array_iterator
		: public _Array_const_iterator<_Ty, _Size>
	{	
public:
	typedef _Array_iterator<_Ty, _Size> _Myiter;
	typedef _Array_const_iterator<_Ty, _Size> _Mybase;
	typedef random_access_iterator_tag iterator_category;

	typedef _Ty value_type;
	typedef size_t size_type;
	typedef ptrdiff_t difference_type;
	typedef _Ty *pointer;
	typedef _Ty& reference;

	_Array_iterator()
		{	
		}

	explicit _Array_iterator(pointer _Parg, size_t _Off = 0)
		: _Mybase(_Parg, _Off)
		{	
		}
	enum {_EEN_SIZE = _Size};	
	enum {_EEN_IDL =
		0};	

	typedef pointer _Unchecked_type;

	_Myiter& _Rechecked(_Unchecked_type _Right)
		{	
		((_Mybase *)this)->_Rechecked(_Right);
		return (*this);
		}

	_Unchecked_type _Unchecked() const
		{	
		return ((pointer)((_Mybase *)this)->_Unchecked());
		}

	reference operator*() const
		{	
		return ((reference)**(_Mybase *)this);
		}

	pointer operator->() const
		{	
		return (&**this);
		}

	_Myiter& operator++()
		{	
		++*(_Mybase *)this;
		return (*this);
		}

	_Myiter operator++(int)
		{	
		_Myiter _Tmp = *this;
		++*this;
		return (_Tmp);
		}

	_Myiter& operator--()
		{	
		--*(_Mybase *)this;
		return (*this);
		}

	_Myiter operator--(int)
		{	
		_Myiter _Tmp = *this;
		--*this;
		return (_Tmp);
		}

	_Myiter& operator+=(difference_type _Off)
		{	
		*(_Mybase *)this += _Off;
		return (*this);
		}

	_Myiter operator+(difference_type _Off) const
		{	
		_Myiter _Tmp = *this;
		return (_Tmp += _Off);
		}

	_Myiter& operator-=(difference_type _Off)
		{	
		return (*this += -_Off);
		}

	_Myiter operator-(difference_type _Off) const
		{	
		_Myiter _Tmp = *this;
		return (_Tmp -= _Off);
		}

	difference_type operator-(const _Mybase& _Right) const
		{	
		return (*(_Mybase *)this - _Right);
		}

	reference operator[](difference_type _Off) const
		{	
		return (*(*this + _Off));
		}
	};

template<class _Ty,
	size_t _Size> inline
	typename _Array_iterator<_Ty, _Size>::_Unchecked_type
		_Unchecked(_Array_iterator<_Ty, _Size> _Iter)
	{	
	return (_Iter._Unchecked());
	}

template<class _Ty,
	size_t _Size> inline
	_Array_iterator<_Ty, _Size>&
		_Rechecked(_Array_iterator<_Ty, _Size>& _Iter,
			typename _Array_iterator<_Ty, _Size>
				::_Unchecked_type _Right)
	{	
	return (_Iter._Rechecked(_Right));
	}

template<class _Ty,
	size_t _Size> inline
	_Array_iterator<_Ty, _Size> operator+(
		typename _Array_iterator<_Ty, _Size>::difference_type _Off,
		_Array_iterator<_Ty, _Size> _Next)
	{	
	return (_Next += _Off);
	}

		
		
template<class _Ty> inline
	const _Ty& (max)(const _Ty& _Left, const _Ty& _Right)
	{	
	return (((_Left) < (_Right)) ? _Right : _Left);
	}

		
template<class _Ty,
	class _Pr> inline
	const _Ty& (max)(const _Ty& _Left, const _Ty& _Right, _Pr _Pred)
	{	
	return (_Pred(_Left, _Right) ? _Right : _Left);
	}

		
template<class _Ty> inline
	const _Ty& (min)(const _Ty& _Left, const _Ty& _Right)
	{	
	return (((_Right) < (_Left)) ? _Right : _Left);
	}

		
template<class _Ty,
	class _Pr> inline
	const _Ty& (min)(const _Ty& _Left, const _Ty& _Right, _Pr _Pred)
	{	
	return (_Pred(_Right, _Left) ? _Right : _Left);
	}

		
  

template<class _Ty> inline
	pair<const _Ty, const _Ty>
		minmax(const _Ty& _Left, const _Ty& _Right)
	{	
	return (_Right < _Left
		? pair<const _Ty, const _Ty>(_Right, _Left)
		: pair<const _Ty, const _Ty>(_Left, _Right));
	}

		
template<class _Ty,
	class _Pr> inline
	pair<const _Ty, const _Ty>
		minmax(const _Ty& _Left, const _Ty& _Right, _Pr _Pred)
	{	
	return (_Pred(_Right, _Left)
		? pair<const _Ty, const _Ty>(_Right, _Left)
		: pair<const _Ty, const _Ty>(_Left, _Right));
	}

		
template<class _FwdIt1,
	class _FwdIt2> inline
	void iter_swap(_FwdIt1 _Left, _FwdIt2 _Right)
	{	
	swap(*_Left, *_Right);
	}

		
template<class _InIt,
	class _OutIt> inline
	_OutIt _Copy_impl(_InIt _First, _InIt _Last,
		_OutIt _Dest, _Nonscalar_ptr_iterator_tag)
	{	
	for (; _First != _Last; ++_Dest, ++_First)
		*_Dest = *_First;
	return (_Dest);
	}

template<class _InIt,
	class _OutIt> inline
	_OutIt _Copy_impl(_InIt _First, _InIt _Last,
		_OutIt _Dest, _Scalar_ptr_iterator_tag)
	{	
	ptrdiff_t _Count = _Last - _First;
	:: memmove(&*_Dest, &*_First,
		_Count * sizeof (*_First));
	return (_Dest + _Count);
	}

template<class _InIt,
	class _OutIt> inline
	_OutIt _Copy_impl(_InIt _First, _InIt _Last,
		_OutIt _Dest)
	{	
	return (_Copy_impl(_First, _Last,
		_Dest, _Ptr_cat(_First, _Dest)));
	}

 
template<class _InIt,
	class _OutIt> inline
	_OutIt copy(_InIt _First, _InIt _Last,
		_OutIt _Dest)
	{	
	return (_Rechecked(_Dest,
		_Copy_impl(_Unchecked(_First), _Unchecked(_Last),
			_Unchecked(_Dest))));
	}

 




























































#line 2241 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xutility"

 
		
template<class _InIt,
	class _Diff,
	class _OutIt> inline
	_OutIt _Copy_n(_InIt _First, _Diff _Count,
		_OutIt _Dest, input_iterator_tag)
	{	
	*_Dest = *_First;	
	while (0 < --_Count)
		*++_Dest = *++_First;
	return (++_Dest);
	}

template<class _InIt,
	class _Diff,
	class _OutIt> inline
	_OutIt _Copy_n(_InIt _First, _Diff _Count,
		_OutIt _Dest, forward_iterator_tag)
	{	
	for (; 0 < _Count; --_Count, ++_Dest, ++_First)
		*_Dest = *_First;
	return (_Dest);
	}

template<class _InIt,
	class _Diff,
	class _OutIt> inline
	_OutIt _Copy_n(_InIt _First, _Diff _Count,
		_OutIt _Dest, _Nonscalar_ptr_iterator_tag)
	{	
	return (_Copy_n(_First, _Count,
		_Dest, _Iter_cat(_First)));
	}

template<class _InIt,
	class _Diff,
	class _OutIt> inline
	_OutIt _Copy_n(_InIt _First, _Diff _Count,
		_OutIt _Dest, _Scalar_ptr_iterator_tag)
	{	
	:: memmove(&*_Dest, &*_First,
		_Count * sizeof (*_First));
	return (_Dest + _Count);
	}

template<class _InIt,
	class _Diff,
	class _OutIt> inline
	_OutIt _Copy_n(_InIt _First, _Diff _Count,
		_OutIt _Dest)
	{	
	return (_Copy_n(_First, _Count,
		_Dest, _Ptr_cat(_First, _Dest)));
	}

 
template<class _InIt,
	class _Diff,
	class _OutIt> inline
	_OutIt copy_n(_InIt _First, _Diff _Count,
		_OutIt _Dest)
	{	
	if (_Count <= 0)
		return (_Dest);
	else
		return (_Rechecked(_Dest,
			_Copy_n(_Unchecked(_First), _Count,
				_Unchecked(_Dest))));
	}

 




















































































































#line 2431 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xutility"
 #line 2432 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xutility"

		
template<class _BidIt1,
	class _BidIt2> inline
	_BidIt2 _Copy_backward(_BidIt1 _First, _BidIt1 _Last,
		_BidIt2 _Dest, _Nonscalar_ptr_iterator_tag)
	{	
	while (_First != _Last)
		*--_Dest = *--_Last;
	return (_Dest);
	}

template<class _InIt,
	class _OutIt> inline
	_OutIt _Copy_backward(_InIt _First, _InIt _Last,
		_OutIt _Dest, _Scalar_ptr_iterator_tag)
	{	
	ptrdiff_t _Count = _Last - _First;
	:: memmove(&*_Dest - _Count, &*_First,
		_Count * sizeof (*_First));
	return (_Dest - _Count);
	}

template<class _BidIt1,
	class _BidIt2> inline
	_BidIt2 _Copy_backward(_BidIt1 _First, _BidIt1 _Last,
		_BidIt2 _Dest)
	{	
	return (_Copy_backward(_First, _Last,
		_Dest, _Ptr_cat(_First, _Dest)));
	}

 
template<class _BidIt1,
	class _BidIt2> inline
	_BidIt2 copy_backward(_BidIt1 _First, _BidIt1 _Last,
		_BidIt2 _Dest)
	{	
	return (_Rechecked(_Dest,
		_Copy_backward(_Unchecked(_First), _Unchecked(_Last),
			_Unchecked(_Dest))));
	}

 





























#line 2506 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xutility"

		
template<class _InIt,
	class _OutIt> inline
	_OutIt _Move(_InIt _First, _InIt _Last,
		_OutIt _Dest, _Nonscalar_ptr_iterator_tag)
	{	
	for (; _First != _Last; ++_Dest, ++_First)
		*_Dest = ::std:: move(*_First);
	return (_Dest);
	}

template<class _InIt,
	class _OutIt> inline
	_OutIt _Move(_InIt _First, _InIt _Last,
		_OutIt _Dest, _Scalar_ptr_iterator_tag)
	{	
	ptrdiff_t _Count = _Last - _First;
	:: memmove(&*_Dest, &*_First,
		_Count * sizeof (*_First));
	return (_Dest + _Count);
	}

template<class _InIt,
	class _OutIt> inline
	_OutIt _Move(_InIt _First, _InIt _Last,
		_OutIt _Dest)
	{	
	return (_Move(_First, _Last,
		_Dest, _Ptr_cat(_First, _Dest)));
	}

 
template<class _InIt,
	class _OutIt> inline
	_OutIt move(_InIt _First, _InIt _Last,
		_OutIt _Dest)
	{	
	return (_Rechecked(_Dest,
		_Move(_Unchecked(_First), _Unchecked(_Last),
			_Unchecked(_Dest))));
	}

 




























































#line 2611 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xutility"

		
template<class _BidIt1,
	class _BidIt2> inline
	_BidIt2 _Move_backward(_BidIt1 _First, _BidIt1 _Last,
		_BidIt2 _Dest, _Nonscalar_ptr_iterator_tag)
	{	
	while (_First != _Last)
		*--_Dest = ::std:: move(*--_Last);
	return (_Dest);
	}

template<class _InIt,
	class _OutIt> inline
	_OutIt _Move_backward(_InIt _First, _InIt _Last,
		_OutIt _Dest, _Scalar_ptr_iterator_tag)
	{	
	ptrdiff_t _Count = _Last - _First;
	:: memmove(&*_Dest - _Count, &*_First,
		_Count * sizeof (*_First));
	return (_Dest - _Count);
	}

template<class _BidIt1,
	class _BidIt2> inline
	_BidIt2 _Move_backward(_BidIt1 _First, _BidIt1 _Last,
		_BidIt2 _Dest)
	{	
	return (_Move_backward(_First, _Last,
		_Dest, _Ptr_cat(_First, _Dest)));
	}

 
template<class _BidIt1,
	class _BidIt2> inline
	_BidIt2 move_backward(_BidIt1 _First, _BidIt1 _Last,
		_BidIt2 _Dest)
	{	
	return (_Rechecked(_Dest,
		_Move_backward(_Unchecked(_First), _Unchecked(_Last),
			_Unchecked(_Dest))));
	}

 





























#line 2685 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xutility"

		
template<class _FwdIt,
	class _Ty> inline
	void _Fill(_FwdIt _First, _FwdIt _Last, const _Ty& _Val)
	{	
	for (; _First != _Last; ++_First)
		*_First = _Val;
	}

inline void _Fill(char *_First, char *_Last, int _Val)
	{	
	:: memset(_First, _Val, _Last - _First);
	}

inline void _Fill(signed char *_First, signed char *_Last, int _Val)
	{	
	:: memset(_First, _Val, _Last - _First);
	}

inline void _Fill(unsigned char *_First, unsigned char *_Last, int _Val)
	{	
	:: memset(_First, _Val, _Last - _First);
	}

template<class _FwdIt,
	class _Ty> inline
	void fill(_FwdIt _First, _FwdIt _Last, const _Ty& _Val)
	{	
	;
	_Fill(_Unchecked(_First), _Unchecked(_Last), _Val);
	}

		
template<class _OutIt,
	class _Diff,
	class _Ty> inline
	void _Fill_n(_OutIt _Dest, _Diff _Count, const _Ty& _Val)
	{	
	for (; 0 < _Count; --_Count, ++_Dest)
		*_Dest = _Val;
	}

inline void _Fill_n(char *_Dest, size_t _Count, int _Val)
	{	
	:: memset(_Dest, _Val, _Count);
	}

inline void _Fill_n(signed char *_Dest, size_t _Count, int _Val)
	{	
	:: memset(_Dest, _Val, _Count);
	}

inline void _Fill_n(unsigned char *_Dest, size_t _Count, int _Val)
	{	
	:: memset(_Dest, _Val, _Count);
	}

 
template<class _OutIt,
	class _Diff,
	class _Ty> inline
	void fill_n(_OutIt _Dest, _Diff _Count, const _Ty& _Val)
	{	
	_Fill_n(_Unchecked(_Dest), _Count, _Val);
	}

 



























































#line 2813 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xutility"

		
template<class _InIt1,
	class _InIt2> inline
	pair<_InIt1, _InIt2>
		_Mismatch(_InIt1 _First1, _InIt1 _Last1,
			_InIt2 _First2)
	{	
	for (; _First1 != _Last1 && *_First1 == *_First2; )
		++_First1, ++_First2;
	return (pair<_InIt1, _InIt2>(_First1, _First2));
	}

 
template<class _InIt1,
	class _InIt2> inline
	pair<_InIt1, _InIt2>
		mismatch(_InIt1 _First1, _InIt1 _Last1,
			_InIt2 _First2)
	{	
	::std:: pair<typename _Get_unchecked_type<_InIt1>::type, _InIt2> _Ans(
		::std:: _Mismatch(_Unchecked(_First1), _Unchecked(_Last1),
			_First2));
	return (::std:: pair<_InIt1, _InIt2>(
		_Rechecked(_First1, _Ans.first),
		_Ans.second));
	}

 




















































#line 2895 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xutility"

		
template<class _InIt1,
	class _InIt2,
	class _Pr> inline
	pair<_InIt1, _InIt2>
		_Mismatch(_InIt1 _First1, _InIt1 _Last1,
			_InIt2 _First2, _Pr _Pred)
	{	
	for (; _First1 != _Last1 && _Pred(*_First1, *_First2); )
		++_First1, ++_First2;
	return (pair<_InIt1, _InIt2>(_First1, _First2));
	}

 
template<class _InIt1,
	class _InIt2,
	class _Pr> inline
	pair<_InIt1, _InIt2>
		mismatch(_InIt1 _First1, _InIt1 _Last1,
			_InIt2 _First2, _Pr _Pred)
	{	
	::std:: pair<typename _Get_unchecked_type<_InIt1>::type, _InIt2> _Ans(
		::std:: _Mismatch(_Unchecked(_First1), _Unchecked(_Last1),
			_First2, _Pred));
	return (::std:: pair<_InIt1, _InIt2>(
		_Rechecked(_First1, _Ans.first),
		_Ans.second));
	}

 
























































#line 2983 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xutility"

		
template<class _InIt1,
	class _InIt2> inline
	bool _Equal(_InIt1 _First1, _InIt1 _Last1, _InIt2 _First2)
	{	
	for (; _First1 != _Last1; ++_First1, ++_First2)
		if (!(*_First1 == *_First2))
			return (false);
	return (true);
	}

inline bool _Equal(const char *_First1, const char *_Last1,
	const char *_First2)
	{	
	return (:: memcmp(_First1, _First2, _Last1 - _First1) == 0);
	}

inline bool _Equal(const signed char *_First1, const signed char *_Last1,
	const signed char *_First2)
	{	
	return (:: memcmp(_First1, _First2, _Last1 - _First1) == 0);
	}

inline bool _Equal(const unsigned char *_First1, const unsigned char *_Last1,
	const unsigned char *_First2)
	{	
	return (:: memcmp(_First1, _First2, _Last1 - _First1) == 0);
	}

 
template<class _InIt1,
	class _InIt2> inline
	bool equal(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2)
	{	
	return (_Equal(_Unchecked(_First1), _Unchecked(_Last1),
		_Unchecked(_First2)));
	}

 







































#line 3064 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xutility"

		
template<class _InIt1,
	class _InIt2,
	class _Pr> inline
	bool _Equal(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _Pr _Pred)
	{	
	for (; _First1 != _Last1; ++_First1, ++_First2)
		if (!_Pred(*_First1, *_First2))
			return (false);
	return (true);
	}

 
template<class _InIt1,
	class _InIt2,
	class _Pr> inline
	bool equal(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _Pr _Pred)
	{	
	return (_Equal(_Unchecked(_First1), _Unchecked(_Last1),
		_Unchecked(_First2), _Pred));
	}

 











































#line 3134 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xutility"

		
template<class _InIt1,
	class _InIt2> inline
	bool _Lexicographical_compare(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2)
	{	
	for (; _First1 != _Last1 && _First2 != _Last2; ++_First1, ++_First2)
		if (((*_First1) < (*_First2)))
			return (true);
		else if (*_First2 < *_First1)
			return (false);
	return (_First1 == _Last1 && _First2 != _Last2);
	}

inline bool _Lexicographical_compare(
	const unsigned char *_First1, const unsigned char *_Last1,
	const unsigned char *_First2, const unsigned char *_Last2)
	{	
	ptrdiff_t _Num1 = _Last1 - _First1;
	ptrdiff_t _Num2 = _Last2 - _First2;
	int _Ans = :: memcmp(_First1, _First2, _Num1 < _Num2 ? _Num1 : _Num2);
	return (_Ans < 0 || _Ans == 0 && _Num1 < _Num2);
	}

 









#line 3170 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xutility"

template<class _InIt1,
	class _InIt2> inline
	bool lexicographical_compare(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2)
	{	
	;
	;
	return (_Lexicographical_compare(_Unchecked(_First1), _Unchecked(_Last1),
		_Unchecked(_First2), _Unchecked(_Last2)));
	}

		
template<class _InIt1,
	class _InIt2,
	class _Pr> inline
	bool _Lexicographical_compare(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2, _Pr _Pred)
	{	
	for (; _First1 != _Last1 && _First2 != _Last2; ++_First1, ++_First2)
		if (_Pred(*_First1, *_First2))
			return (true);
		else if (_Pred(*_First2, *_First1))
			return (false);
	return (_First1 == _Last1 && _First2 != _Last2);
	}

template<class _InIt1,
	class _InIt2,
	class _Pr> inline
	bool lexicographical_compare(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2, _Pr _Pred)
	{	
	;
	;
	;
	return (_Lexicographical_compare(_Unchecked(_First1), _Unchecked(_Last1),
		_Unchecked(_First2), _Unchecked(_Last2), _Pred));
	}

		
template<class _BidIt> inline
	void _Reverse(_BidIt _First, _BidIt _Last, bidirectional_iterator_tag)
	{	
	for (; _First != _Last && _First != --_Last; ++_First)
		::std:: iter_swap(_First, _Last);
	}

template<class _BidIt> inline
	void reverse(_BidIt _First, _BidIt _Last)
	{	
	;
	_Reverse(_Unchecked(_First), _Unchecked(_Last), _Iter_cat(_First));
	}

		
template<class _FwdIt> inline
	void _Rotate(_FwdIt _First, _FwdIt _Mid, _FwdIt _Last,
		forward_iterator_tag)
	{	
	for (_FwdIt _Next = _Mid; ; )
		{	
		::std:: iter_swap(_First, _Next);
		if (++_First == _Mid)
			if (++_Next == _Last)
				break;	
			else
				_Mid = _Next;	
		else if (++_Next == _Last)
			_Next = _Mid;	
		}
	}

template<class _BidIt> inline
	void _Rotate(_BidIt _First, _BidIt _Mid, _BidIt _Last,
		bidirectional_iterator_tag)
	{	
	::std:: reverse(_First, _Mid);
	::std:: reverse(_Mid, _Last);
	::std:: reverse(_First, _Last);
	}

template<class _RanIt,
	class _Diff,
	class _Ty> inline
	void _Rotate(_RanIt _First, _RanIt _Mid, _RanIt _Last, _Diff *, _Ty *)
	{	
	_Diff _Shift = _Mid - _First;
	_Diff _Count = _Last - _First;

	for (_Diff _Factor = _Shift; _Factor != 0; )
		{	
		_Diff _Tmp = _Count % _Factor;
		_Count = _Factor;
		_Factor = _Tmp;
		}

	if (_Count < _Last - _First)
		for (; 0 < _Count; --_Count)
			{	
			_RanIt _Hole = _First + _Count;
			_RanIt _Next = _Hole;
			_RanIt _Next1 = _Next + _Shift == _Last ? _First : _Next + _Shift;
			for (; ; )
				{	
				iter_swap(_Next, _Next1);
				_Next = _Next1;
				_Next1 = _Shift < _Last - _Next1 ? _Next1 + _Shift
					: _First + (_Shift - (_Last - _Next1));
				if (_Next1 == _Hole)
					break;
				}
			}
	}

template<class _RanIt> inline
	void _Rotate(_RanIt _First, _RanIt _Mid, _RanIt _Last,
		random_access_iterator_tag)
	{	
	_Rotate(_First, _Mid, _Last, _Dist_type(_First), _Val_type(_First));
	}

template<class _FwdIt> inline
	_FwdIt rotate(_FwdIt _First, _FwdIt _Mid, _FwdIt _Last)
	{	
	;
	;
	if (_First != _Mid && _Mid != _Last)
		{	
		_Rotate(_Unchecked(_First), _Unchecked(_Mid), _Unchecked(_Last),
			_Iter_cat(_First));
		::std:: advance(_First, ::std:: distance(_Mid, _Last));
		}
	return (_First);
	}

		
template<class _Elem>
	class __declspec(dllimport) _Yarn
	{	
public:
	typedef _Yarn<_Elem> _Myt;

	 _Yarn()
		: _Myptr(0), _Nul(0)
		{	
		}

	 _Yarn(const _Myt& _Right)
		: _Myptr(0), _Nul(0)
		{	
		*this = _Right;
		}

	 _Yarn(const _Elem *_Right)
		: _Myptr(0), _Nul(0)
		{	
		*this = _Right;
		}

	_Myt&  operator=(const _Myt& _Right)
		{	
		return (*this = _Right._Myptr);
		}

	_Myt&  operator=(const _Elem *_Right)
		{	
		if (_Myptr != _Right)
			{	
			_Tidy();

			if (_Right != 0)
				{	
				const _Elem *_Ptr = _Right;
				while (*_Ptr != (_Elem)0)
					++_Ptr;
				size_t _Count = ((const char *)++_Ptr - (const char *)_Right)
					* sizeof (_Elem);

 




				_Myptr = (_Elem *):: malloc(_Count);
 #line 3356 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xutility"

				if (_Myptr != 0)
					:: memcpy(_Myptr, _Right, _Count);
				}
			}
		return (*this);
		}

	 ~_Yarn()
		{	
		_Tidy();
		}

	bool  empty() const
		{	
		return (_Myptr == 0);
		}

	const _Elem * c_str() const
		{	
		return (_Myptr != 0 ? _Myptr : &_Nul);
		}

	bool  _Empty() const
		{	
		return (_Myptr == 0);
		}

	const _Elem * _C_str() const
		{	
		return (_Myptr != 0 ? _Myptr : &_Nul);
		}

private:
	void  _Tidy()
		{	
		if (_Myptr != 0)

 



			:: free(_Myptr);
 #line 3400 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xutility"

		_Myptr = 0;
		}

	_Elem *_Myptr;	
	_Elem _Nul;		
	};

__declspec(dllimport) __declspec(noreturn) void __cdecl _Xinvalid_argument(   const char *);
__declspec(dllimport) __declspec(noreturn) void __cdecl _Xlength_error(   const char *);
__declspec(dllimport) __declspec(noreturn) void __cdecl _Xout_of_range(   const char *);
__declspec(dllimport) __declspec(noreturn) void __cdecl _Xoverflow_error(   const char *);
__declspec(dllimport) __declspec(noreturn) void __cdecl _Xruntime_error(   const char *);
}
 #pragma warning(pop)
 #pragma pack(pop)

#line 3418 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xutility"
#line 3419 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xutility"























#line 9 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xmemory"

 #pragma pack(push,8)
 #pragma warning(push,3)

 

 
 

 #pragma warning(disable: 4100)


 
 
 
#line 25 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xmemory"

namespace std {
		
template<class _Ty> inline
	_Ty  *_Allocate(size_t _Count, _Ty  *)
	{	
	void *_Ptr = 0;

	if (_Count <= 0)
		_Count = 0;
	else if (((size_t)(-1) / sizeof (_Ty) < _Count)
		|| (_Ptr = ::operator new(_Count * sizeof (_Ty))) == 0)
		throw bad_alloc(0);

	return ((_Ty  *)_Ptr);
	}

		
template<class _Ty1,
	class _Ty2> inline
	void _Construct(_Ty1  *_Ptr, _Ty2&& _Val)
	{	
	void  *_Vptr = _Ptr;
	::new (_Vptr) _Ty1(::std:: forward<_Ty2>(_Val));
	}

template<class _Ty1> inline
	void _Construct(_Ty1  *_Ptr)
	{	
	void  *_Vptr = _Ptr;

	::new (_Vptr) _Ty1();
	}

		
template<class _Ty> inline
	void _Destroy(_Ty  *_Ptr)
	{	
	_Ptr->~_Ty();
	}

template<> inline
	void _Destroy(char  *)
	{	
	}

template<> inline
	void _Destroy(wchar_t  *)
	{	
	}

 
template<> inline
	void _Destroy(unsigned short  *)
	{	
	}
 #line 82 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xmemory"

		
template<class _Alloc> inline
	void _Destroy_range(typename _Alloc::pointer _First,
		typename _Alloc::pointer _Last, _Alloc& _Al)
	{	
	_Destroy_range(_First, _Last, _Al, _Ptr_cat(_First, _Last));
	}

template<class _Alloc> inline
	void _Destroy_range(typename _Alloc::pointer _First,
		typename _Alloc::pointer _Last, _Alloc& _Al,
		_Nonscalar_ptr_iterator_tag)
	{	
	for (; _First != _Last; ++_First)
		_Dest_val(_Al, _First);
	}

template<class _Alloc> inline
	void _Destroy_range(typename _Alloc::pointer _First,
		typename _Alloc::pointer _Last, _Alloc& _Al,
		_Scalar_ptr_iterator_tag)
	{	
	}

		
template<class _Ty> inline
	_Ty * addressof(_Ty& _Val)
	{	
	return ((_Ty *) &(char&)_Val);
	}

		
template<class _Ty>
	struct _Allocator_base
	{	
	typedef _Ty value_type;
	};

		
template<class _Ty>
	struct _Allocator_base<const _Ty>
	{	
	typedef _Ty value_type;
	};

		
template<class _Ty>
	class allocator
		: public _Allocator_base<_Ty>
	{	
public:
	typedef _Allocator_base<_Ty> _Mybase;
	typedef typename _Mybase::value_type value_type;

	typedef value_type  *pointer;
	typedef value_type & reference;
	typedef const value_type  *const_pointer;
	typedef const value_type & const_reference;

	typedef size_t size_type;
	typedef ptrdiff_t difference_type;

	template<class _Other>
		struct rebind
		{	
		typedef allocator<_Other> other;
		};

	pointer address(reference _Val) const
		{	
		return ((pointer) &(char&)_Val);
		}

	const_pointer address(const_reference _Val) const
		{	
		return ((const_pointer) &(char&)_Val);
		}

	allocator() throw ()
		{	
		}

	allocator(const allocator<_Ty>&) throw ()
		{	
		}

	template<class _Other>
		allocator(const allocator<_Other>&) throw ()
		{	
		}

	template<class _Other>
		allocator<_Ty>& operator=(const allocator<_Other>&)
		{	
		return (*this);
		}

	void deallocate(pointer _Ptr, size_type)
		{	
		::operator delete(_Ptr);
		}

	pointer allocate(size_type _Count)
		{	
		return (_Allocate(_Count, (pointer)0));
		}

	pointer allocate(size_type _Count, const void  *)
		{	
		return (allocate(_Count));
		}

	void construct(pointer _Ptr, const _Ty& _Val)
		{	
		_Construct(_Ptr, _Val);
		}

	void construct(pointer _Ptr, _Ty&& _Val)
		{	
		::new ((void  *)_Ptr) _Ty(::std:: forward<_Ty>(_Val));
		}

	template<class _Other>
		void construct(pointer _Ptr, _Other&& _Val)
		{	
		::new ((void  *)_Ptr) _Ty(::std:: forward<_Other>(_Val));
		}

	void destroy(pointer _Ptr)
		{	
		_Destroy(_Ptr);
		}

	size_t max_size() const throw ()
		{	
		size_t _Count = (size_t)(-1) / sizeof (_Ty);
		return (0 < _Count ? _Count : 1);
		}
	};

		
template<> class allocator<void>
	{	
public:
	typedef void _Ty;
	typedef _Ty  *pointer;
	typedef const _Ty  *const_pointer;
	typedef _Ty value_type;

	template<class _Other>
		struct rebind
		{	
		typedef allocator<_Other> other;
		};

	allocator() throw ()
		{	
		}

	allocator(const allocator<_Ty>&) throw ()
		{	
		}

	template<class _Other>
		allocator(const allocator<_Other>&) throw ()
		{	
		}

	template<class _Other>
		allocator<_Ty>& operator=(const allocator<_Other>&)
		{	
		return (*this);
		}
	};

template<class _Ty,
	class _Other> inline
	bool operator==(const allocator<_Ty>&,
		const allocator<_Other>&) throw ()
	{	
	return (true);
	}

template<class _Ty,
	class _Other> inline
	bool operator!=(const allocator<_Ty>& _Left,
		const allocator<_Other>& _Right) throw ()
	{	
	return (!(_Left == _Right));
	}

		
template<class _Alloc,
	class _Ty1,
	class _Ty2>
	void _Cons_val(_Alloc& _Alval, _Ty1 *_Pdest, _Ty2&& _Src)
	{	
	_Alval.construct(_Pdest, ::std:: forward<_Ty2>(_Src));
	}

template<class _Alloc,
	class _Ty1>
	void _Dest_val(_Alloc& _Alval, _Ty1 *_Pdest)
	{	
	_Alval.destroy(_Pdest);
	}
}

 

 #pragma warning(pop)
 #pragma pack(pop)

#line 297 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xmemory"
#line 298 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xmemory"






















#line 7 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\memory"

 #pragma pack(push,8)
 #pragma warning(push,3)

 
 

 #pragma warning(disable: 4700)

namespace std {
		
template<class _Ty> inline
	pair<_Ty  *, ptrdiff_t>

		get_temporary_buffer(ptrdiff_t _Count)

	{	
	_Ty  *_Pbuf;

	if (_Count < 0)
		_Count = 0;
	else if (((size_t)(-1) / sizeof (_Ty) < _Count))
		throw bad_alloc(0);
	for (_Pbuf = 0; 0 < _Count; _Count /= 2)
		if ((_Pbuf = (_Ty  *)operator new(
			(size_t)_Count * sizeof (_Ty), nothrow)) != 0)
			break;

	return (pair<_Ty  *, ptrdiff_t>(_Pbuf, _Count));
	}

		
template<class _Ty> inline
	void return_temporary_buffer(_Ty *_Pbuf)
	{	
	operator delete(_Pbuf);
	}

		
template<class _InIt,
	class _Diff,
	class _FwdIt> inline
	_FwdIt _Uninitialized_copy_n(_InIt _First, _Diff _Count,
		_FwdIt _Dest, input_iterator_tag)
	{	
	_FwdIt _Next = _Dest;

	try {
	_Construct(&*_Dest, *_First);	
	while (0 < --_Count)
		_Construct(&*++_Dest, *++_First);
	} catch (...) {
	for (; _Next != _Dest; ++_Next)
		_Destroy(&*_Next);
	throw;
	}
	return (++_Dest);
	}

template<class _InIt,
	class _Diff,
	class _FwdIt> inline
	_FwdIt _Uninitialized_copy_n(_InIt _First, _Diff _Count,
		_FwdIt _Dest, forward_iterator_tag)
	{	
	_FwdIt _Next = _Dest;

	try {
	for (; 0 < _Count; --_Count, ++_Dest, ++_First)
		_Construct(&*_Dest, *_First);
	} catch (...) {
	for (; _Next != _Dest; ++_Next)
		_Destroy(&*_Next);
	throw;
	}
	return (_Dest);
	}

template<class _InIt,
	class _Diff,
	class _FwdIt> inline
	_FwdIt _Uninitialized_copy_n(_InIt _First, _Diff _Count,
		_FwdIt _Dest, _Nonscalar_ptr_iterator_tag)
	{	
	return (_Uninitialized_copy_n(_First, _Count,
		_Dest, _Iter_cat(_First)));
	}

template<class _InIt,
	class _Diff,
	class _FwdIt> inline
	_FwdIt _Uninitialized_copy_n(_InIt _First, _Diff _Count,
		_FwdIt _Dest, _Scalar_ptr_iterator_tag)
	{	
	:: memmove(&*_Dest, &*_First,
		_Count * sizeof (*_First));
	return (_Dest + _Count);
	}

template<class _InIt,
	class _Diff,
	class _FwdIt> inline
	_FwdIt _Uninitialized_copy_n(_InIt _First, _Diff _Count,
		_FwdIt _Dest)
	{	
	return (_Uninitialized_copy_n(_First, _Count,
		_Dest, _Ptr_cat(_First, _Dest)));
	}

 
template<class _InIt,
	class _Diff,
	class _FwdIt> inline
	_FwdIt uninitialized_copy_n(_InIt _First, _Diff _Count,
		_FwdIt _Dest)
	{	
	if (_Count <= 0)
		return (_Dest);
	else
		return (_Rechecked(_Dest,
			_Uninitialized_copy_n(_First, _Count,
				_Unchecked(_Dest))));
	}

 




















































































































#line 249 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\memory"

		
template<class _InIt,
	class _FwdIt> inline
	_FwdIt _Uninitialized_copy0(_InIt _First, _InIt _Last,
		_FwdIt _Dest, _Nonscalar_ptr_iterator_tag)
	{	
	_FwdIt _Next = _Dest;

	try {
	for (; _First != _Last; ++_Dest, ++_First)
		_Construct(&*_Dest, *_First);
	} catch (...) {
	for (; _Next != _Dest; ++_Next)
		_Destroy(&*_Next);
	throw;
	}
	return (_Dest);
	}

template<class _InIt,
	class _FwdIt> inline
	_FwdIt _Uninitialized_copy0(_InIt _First, _InIt _Last,
		_FwdIt _Dest, _Scalar_ptr_iterator_tag)
	{	
	ptrdiff_t _Count = _Last - _First;
	:: memmove(&*_Dest, &*_First,
		_Count * sizeof (*_First));
	return (_Dest + _Count);
	}

template<class _InIt,
	class _FwdIt> inline
	_FwdIt _Uninitialized_copy0(_InIt _First, _InIt _Last,
		_FwdIt _Dest)
	{	
	return (_Uninitialized_copy0(_First, _Last,
		_Dest, _Ptr_cat(_First, _Dest)));
	}

 
template<class _InIt,
	class _FwdIt> inline
	_FwdIt uninitialized_copy(_InIt _First, _InIt _Last,
		_FwdIt _Dest)
	{	
	return (_Rechecked(_Dest,
		_Uninitialized_copy0(_Unchecked(_First), _Unchecked(_Last),
			_Unchecked(_Dest))));
	}

 




























































#line 362 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\memory"

		
template<class _InIt,
	class _FwdIt,
	class _Alloc> inline
	_FwdIt _Uninit_copy(_InIt _First, _InIt _Last, _FwdIt _Dest,
		_Alloc& _Al, _Nonscalar_ptr_iterator_tag)
	{	
	;
	;
	_FwdIt _Next = _Dest;

	try {
	for (; _First != _Last; ++_Dest, ++_First)
		_Cons_val(_Al, _Dest, *_First);
	} catch (...) {
	for (; _Next != _Dest; ++_Next)
		_Dest_val(_Al, _Next);
	throw;
	}
	return (_Dest);
	}

template<class _InIt,
	class _FwdIt,
	class _Alloc> inline
	_FwdIt _Uninit_copy(_InIt _First, _InIt _Last, _FwdIt _Dest,
		_Alloc& _Al, _Scalar_ptr_iterator_tag)
	{	
	return (_Uninit_copy(_First, _Last, _Dest,
		_Al, _Nonscalar_ptr_iterator_tag()));
	}

template<class _Ty1,
	class _Ty2> inline
	_Ty2 *_Uninit_copy(_Ty1 *_First, _Ty1 *_Last, _Ty2 *_Dest,
		allocator<_Ty2>&, _Scalar_ptr_iterator_tag)
	{	
	;
	;
	size_t _Count = (size_t)(_Last - _First);
	return ((_Ty2 *):: memmove(&*_Dest, &*_First,
		_Count * sizeof (*_First)) + _Count);	
	}

template<class _InIt,
	class _FwdIt,
	class _Alloc> inline
	_FwdIt _Uninitialized_copy(_InIt _First, _InIt _Last, _FwdIt _Dest,
		_Alloc& _Al)
	{	
	return (_Uninit_copy(_First, _Last, _Dest, _Al,
		_Ptr_cat(_First, _Dest)));
	}

		
template<class _InIt,
	class _FwdIt,
	class _Alloc,
	class _Valty> inline
	_FwdIt _Uninit_move(_InIt _First, _InIt _Last, _FwdIt _Dest,
		_Alloc& _Al, _Valty *, _Nonscalar_ptr_iterator_tag)
	{	
	;
	;
	_FwdIt _Next = _Dest;

	try {
	for (; _First != _Last; ++_Dest, ++_First)
		_Cons_val(_Al, _Dest, (_Valty &&)*_First);
	} catch (...) {
	for (; _Next != _Dest; ++_Next)
		_Dest_val(_Al, _Next);
	throw;
	}
	return (_Dest);
	}

template<class _InIt,
	class _FwdIt,
	class _Alloc,
	class _Valty> inline
	_FwdIt _Uninit_move(_InIt _First, _InIt _Last, _FwdIt _Dest,
		_Alloc& _Al, _Valty *, _Scalar_ptr_iterator_tag)
	{	
	return (_Uninit_move(_First, _Last, _Dest,
		_Al, (_Valty *)0, _Nonscalar_ptr_iterator_tag()));
	}

template<class _Ty1,
	class _Ty2,
	class _Valty> inline
	_Ty2 *_Uninit_move(_Ty1 *_First, _Ty1 *_Last, _Ty2 *_Dest,
		allocator<_Ty2>&, _Valty *, _Scalar_ptr_iterator_tag)
	{	
	;
	;
	size_t _Count = (size_t)(_Last - _First);
	return ((_Ty2 *):: memmove(&*_Dest, &*_First,
		_Count * sizeof (*_First)) + _Count);	
	}

template<class _InIt,
	class _FwdIt,
	class _Alloc> inline
	_FwdIt _Uninitialized_move(_InIt _First, _InIt _Last, _FwdIt _Dest,
		_Alloc& _Al)
	{	
	return (_Uninit_move(_First, _Last, _Dest, _Al,
		_Val_type(_First), _Ptr_cat(_First, _Dest)));
	}

		
template<class _FwdIt,
	class _Tval> inline
	void _Uninit_fill(_FwdIt _First, _FwdIt _Last, const _Tval& _Val,
		_Nonscalar_ptr_iterator_tag)
	{	
	;
	_FwdIt _Next = _First;

	try {
	for (; _First != _Last; ++_First)
		_Construct(&*_First, _Val);
	} catch (...) {
	for (; _Next != _First; ++_Next)
		_Destroy(&*_Next);
	throw;
	}
	}

template<class _Ty,
	class _Tval> inline
	void _Uninit_fill(_Ty *_First, _Ty *_Last, const _Tval& _Val,
		_Scalar_ptr_iterator_tag)
	{	
	::std:: fill(_First, _Last, _Val);
	}

template<class _FwdIt,
	class _Tval> inline
	void uninitialized_fill(_FwdIt _First, _FwdIt _Last, const _Tval& _Val)
	{	
	_Uninit_fill(_First, _Last, _Val, _Ptr_cat(_First, _First));
	}

		
template<class _FwdIt,
	class _Diff,
	class _Tval> inline
	void _Uninit_fill_n(_FwdIt _First, _Diff _Count, const _Tval& _Val,
		_Nonscalar_ptr_iterator_tag)
	{	
 


#line 519 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\memory"

	_FwdIt _Next = _First;

	try {
	for (; 0 < _Count; --_Count, ++_First)
		_Construct(&*_First, _Val);
	} catch (...) {
	for (; _Next != _First; ++_Next)
		_Destroy(&*_Next);
	throw;
	}
	}

template<class _Ty,
	class _Diff,
	class _Tval> inline
	void _Uninit_fill_n(_Ty *_First, _Diff _Count, const _Tval& _Val,
		_Scalar_ptr_iterator_tag)
	{	
	::std:: _Fill_n(_First, _Count, _Val);
	}

template<class _FwdIt,
	class _Diff,
	class _Tval> inline
	void uninitialized_fill_n(_FwdIt _First, _Diff _Count, const _Tval& _Val)
	{	
	_Uninit_fill_n(_First, _Count, _Val, _Ptr_cat(_First, _First));
	}

		
template<class _FwdIt,
	class _Diff,
	class _Tval,
	class _Alloc,
	class _Valty> inline
	void _Uninit_fill_n(_FwdIt _First, _Diff _Count,
		const _Tval *_Pval, _Alloc& _Al,
			_Valty *, _Nonscalar_ptr_iterator_tag)
	{	
 


#line 563 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\memory"

	_FwdIt _Next = _First;

	try {
	for (; 0 < _Count; --_Count, ++_First)
		_Cons_val(_Al, _First, *_Pval);
	} catch (...) {
	for (; _Next != _First; ++_Next)
		_Dest_val(_Al, _Next);
	throw;
	}
	}

template<class _FwdIt,
	class _Diff,
	class _Tval,
	class _Alloc,
	class _Valty> inline
	void _Uninit_fill_n(_FwdIt _First, _Diff _Count,
		const _Tval *_Pval, _Alloc& _Al,
			_Valty *, _Scalar_ptr_iterator_tag)
	{	
	_Uninit_fill_n(_First, _Count,
		_Pval, _Al, (_Valty *)0, _Nonscalar_ptr_iterator_tag());
	}

template<class _Ty,
	class _Diff,
	class _Tval,
	class _Valty> inline
	void _Uninit_fill_n(_Ty *_First, _Diff _Count,
		const _Tval *_Pval, allocator<_Ty>&,
			_Valty *, _Scalar_ptr_iterator_tag)
	{	
	_Fill_n(_First, _Count, *_Pval);
	}

template<class _FwdIt,
	class _Diff,
	class _Tval,
	class _Alloc> inline
	void _Uninitialized_fill_n(_FwdIt _First, _Diff _Count,
		const _Tval *_Pval, _Alloc& _Al)
	{	
	_Uninit_fill_n(_First, _Count, _Pval, _Al,
		_Val_type(_First), _Ptr_cat(_First, _First));
	}

		
template<class _FwdIt,
	class _Diff,
	class _Tval,
	class _Alloc,
	class _Valty> inline
	void _Uninit_def_fill_n(_FwdIt _First, _Diff _Count,
		const _Tval *, _Alloc& _Al,
			_Valty *, _Nonscalar_ptr_iterator_tag)
	{	
 


#line 625 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\memory"

	_FwdIt _Next = _First;

	try {
	for (; 0 < _Count; --_Count, ++_First)

		_Cons_val(_Al, _First, _Valty());

	} catch (...) {
	for (; _Next != _First; ++_Next)
		_Dest_val(_Al, _Next);
	throw;
	}
	}

template<class _FwdIt,
	class _Diff,
	class _Tval,
	class _Alloc,
	class _Valty> inline
	void _Uninit_def_fill_n(_FwdIt _First, _Diff _Count,
		const _Tval *_Pval, _Alloc& _Al,
			_Valty *, _Scalar_ptr_iterator_tag)
	{	
	_Uninit_def_fill_n(_First, _Count,
		_Pval, _Al, (_Valty *)0, _Nonscalar_ptr_iterator_tag());
	}

template<class _Ty,
	class _Diff,
	class _Tval,
	class _Valty> inline
	void _Uninit_def_fill_n(_Ty *_First, _Diff _Count,
		const _Tval *, allocator<_Ty>&,
			_Valty *, _Scalar_ptr_iterator_tag)
	{	
	_Fill_n(_First, _Count, (_Valty)0);
	}

template<class _FwdIt,
	class _Diff,
	class _Tval,
	class _Alloc> inline
	void _Uninitialized_default_fill_n(_FwdIt _First, _Diff _Count,
		const _Tval *_Pval, _Alloc& _Al)
	{	
	_Uninit_def_fill_n(_First, _Count, _Pval, _Al,
		_Val_type(_First), _Ptr_cat(_First, _First));
	}

		
template<class _FwdIt,
	class _Ty>
	class raw_storage_iterator
		: public _Outit
	{	
public:
	typedef _FwdIt iterator_type;	
	typedef _FwdIt iter_type;	
	typedef _Ty element_type;	

	explicit raw_storage_iterator(_FwdIt _First)
		: _Next(_First)
		{	
		}

	raw_storage_iterator<_FwdIt, _Ty>& operator*()
		{	
		return (*this);
		}

	raw_storage_iterator<_FwdIt, _Ty>& operator=(const _Ty& _Val)
		{	
		_Construct(&*_Next, _Val);
		return (*this);
		}

	raw_storage_iterator<_FwdIt, _Ty>& operator++()
		{	
		++_Next;
		return (*this);
		}

	raw_storage_iterator<_FwdIt, _Ty> operator++(int)
		{	
		raw_storage_iterator<_FwdIt, _Ty> _Ans = *this;
		++_Next;
		return (_Ans);
		}

private:
	_FwdIt _Next;	
	};

		
template<class _Ty>
	class _Temp_iterator
		: public _Outit
	{	
public:
	typedef _Ty  *_Pty;

	_Temp_iterator(ptrdiff_t _Count = 0)
		{	
		_Buf._Begin = 0;
		_Buf._Current = 0;
		_Buf._Hiwater = 0;
		_Buf._Size = _Count;	
		_Pbuf = &_Buf;
		}

	_Temp_iterator(const _Temp_iterator<_Ty>& _Right)
		{	
		_Buf._Begin = 0;	
		_Buf._Current = 0;
		_Buf._Hiwater = 0;
		_Buf._Size = 0;
		*this = _Right;
		}

	~_Temp_iterator()
		{	
		if (_Buf._Begin != 0)
			{	
			for (_Pty _Next = _Buf._Begin;
				_Next != _Buf._Hiwater; ++_Next)
				_Destroy(&*_Next);
			::std:: return_temporary_buffer(_Buf._Begin);
			}
		}

	_Temp_iterator<_Ty>& operator=(const _Temp_iterator<_Ty>& _Right)
		{	
		_Pbuf = _Right._Pbuf;
		return (*this);
		}

	_Temp_iterator<_Ty>& operator=(const _Ty& _Val)
		{	
		if (_Pbuf->_Current < _Pbuf->_Hiwater)
			*_Pbuf->_Current++ = _Val;	
		else
			{	
			_Pty _Ptr = &*_Pbuf->_Current;
			_Construct(_Ptr, _Val);
			_Pbuf->_Hiwater = ++_Pbuf->_Current;
			}
		return (*this);
		}

	_Temp_iterator<_Ty>& operator=(_Ty&& _Val)
		{	
		if (_Pbuf->_Current < _Pbuf->_Hiwater)
			*_Pbuf->_Current++ =
				::std:: forward<_Ty>(_Val);	
		else
			{	
			_Pty _Ptr = &*_Pbuf->_Current;
			_Construct(_Ptr, ::std:: forward<_Ty>(_Val));
			_Pbuf->_Hiwater = ++_Pbuf->_Current;
			}
		return (*this);
		}

	_Temp_iterator<_Ty>& operator*()
		{	
		return (*this);
		}

	_Temp_iterator<_Ty>& operator++()
		{	
		return (*this);
		}

	_Temp_iterator<_Ty>& operator++(int)
		{	
		return (*this);
		}

	_Temp_iterator<_Ty>& _Init()
		{	
		_Pbuf->_Current = _Pbuf->_Begin;
		return (*this);
		}

	_Pty _First() const
		{	
		return (_Pbuf->_Begin);
		}

	_Pty _Last() const
		{	
		return (_Pbuf->_Current);
		}

	ptrdiff_t _Maxlen()
		{	
		if (_Pbuf->_Begin == 0 && 0 < _Pbuf->_Size)
			{	
			pair<_Pty, ptrdiff_t> _Pair =

				::std:: get_temporary_buffer<_Ty>(_Pbuf->_Size);

			_Pbuf->_Begin = _Pair.first;
			_Pbuf->_Current = _Pair.first;
			_Pbuf->_Hiwater = _Pair.first;
			_Pbuf->_Size = _Pair.second;
			}
		return (_Pbuf->_Size);
		}

private:
	struct _Bufpar
		{	
		_Pty _Begin;	
		_Pty _Current;	
		_Pty _Hiwater;	
		ptrdiff_t _Size;	
		};
	_Bufpar _Buf;	
	_Bufpar *_Pbuf;	
	};

		
template<class _Ty>
	class auto_ptr;

template<class _Ty>
	struct auto_ptr_ref
		{	
	explicit auto_ptr_ref(_Ty *_Right)
		: _Ref(_Right)
		{	
		}

	_Ty *_Ref;	
	};

template<class _Ty>
	class auto_ptr
		{	
public:
	typedef auto_ptr<_Ty> _Myt;
	typedef _Ty element_type;

	explicit auto_ptr(_Ty *_Ptr = 0) throw ()
		: _Myptr(_Ptr)
		{	
		}

	auto_ptr(_Myt& _Right) throw ()
		: _Myptr(_Right.release())
		{	
		}

	auto_ptr(auto_ptr_ref<_Ty> _Right) throw ()
		{	
		_Ty *_Ptr = _Right._Ref;
		_Right._Ref = 0;	
		_Myptr = _Ptr;	
		}

	template<class _Other>
		operator auto_ptr<_Other>() throw ()
		{	
		return (auto_ptr<_Other>(*this));
		}

	template<class _Other>
		operator auto_ptr_ref<_Other>() throw ()
		{	
		_Other *_Cvtptr = _Myptr;	
		auto_ptr_ref<_Other> _Ans(_Cvtptr);
		_Myptr = 0;	
		return (_Ans);
		}

	template<class _Other>
		_Myt& operator=(auto_ptr<_Other>& _Right) throw ()
		{	
		reset(_Right.release());
		return (*this);
		}

	template<class _Other>
		auto_ptr(auto_ptr<_Other>& _Right) throw ()
		: _Myptr(_Right.release())
		{	
		}

	_Myt& operator=(_Myt& _Right) throw ()
		{	
		reset(_Right.release());
		return (*this);
		}

	_Myt& operator=(auto_ptr_ref<_Ty> _Right) throw ()
		{	
		_Ty *_Ptr = _Right._Ref;
		_Right._Ref = 0;	
		reset(_Ptr);	
		return (*this);
		}

	~auto_ptr()
		{	
		delete _Myptr;
		}

	_Ty& operator*() const throw ()
		{	
 


#line 940 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\memory"

		return (*get());
		}

	_Ty *operator->() const throw ()
		{	
 


#line 950 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\memory"

		return (get());
		}

	_Ty *get() const throw ()
		{	
		return (_Myptr);
		}

	_Ty *release() throw ()
		{	
		_Ty *_Tmp = _Myptr;
		_Myptr = 0;
		return (_Tmp);
		}

	void reset(_Ty *_Ptr = 0)
		{	
		if (_Ptr != _Myptr)
			delete _Myptr;
		_Myptr = _Ptr;
		}

private:
	_Ty *_Myptr;	
	};
}

 
 
  
 #line 982 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\memory"

 
 #line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\typeinfo"














#pragma once






 
 
 #line 25 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\typeinfo"

#pragma pack(push,8)

 



 

#line 35 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\typeinfo"

struct __type_info_node {
    void *_MemPtr;
    __type_info_node* _Next;
};

extern __type_info_node __type_info_root_node;

class type_info {
public:
 
	size_t hash_code() const throw ()
		{	
		const char *_Keyval = name();
		size_t _Val = 2166136261U;
		size_t _First = 0;
		size_t _Last = :: strlen(_Keyval);
		size_t _Stride = 1 + _Last / 10;

		for(; _First < _Last; _First += _Stride)
			_Val = 16777619U * _Val ^ (size_t)_Keyval[_First];
		return (_Val);
		}
 #line 59 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\typeinfo"

    


    virtual ~type_info();
    __declspec(dllimport) bool  operator==(const type_info& _Rhs) const;
    __declspec(dllimport) bool  operator!=(const type_info& _Rhs) const;
    __declspec(dllimport) int  before(const type_info& _Rhs) const;
    __declspec(dllimport) const char*  name(__type_info_node* __ptype_info_node = &__type_info_root_node) const;
    __declspec(dllimport) const char*  raw_name() const;
private:
    void *_M_data;
    char _M_d_name[1];
     type_info(const type_info& _Rhs);
    type_info&  operator=(const type_info& _Rhs);
    __declspec(dllimport) static const char *__cdecl _Name_base(const type_info *,__type_info_node* __ptype_info_node);
    __declspec(dllimport) static void __cdecl _Type_info_dtor(type_info *);
};

 

 namespace std {

using ::type_info;

 }





 namespace std {

class __declspec(dllimport) bad_cast : public exception {
public:










     bad_cast(const char * _Message = "bad cast");
     bad_cast(const bad_cast &);
    virtual  ~bad_cast();
#line 108 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\typeinfo"
};

class __declspec(dllimport) bad_typeid : public exception {
public:










     bad_typeid(const char * _Message = "bad typeid");
     bad_typeid(const bad_typeid &);
    virtual  ~bad_typeid();
#line 126 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\typeinfo"

};

class __declspec(dllimport) __non_rtti_object : public bad_typeid {
public:










     __non_rtti_object(const char * _Message);
     __non_rtti_object(const __non_rtti_object &);
    virtual  ~__non_rtti_object();
#line 145 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\typeinfo"
};

 }
 

 























































#line 207 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\typeinfo"

#line 209 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\typeinfo"

#pragma pack(pop)

#line 213 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\typeinfo"







#line 985 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\memory"
 

 #line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\intrin.h"












#pragma once




#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"














 








































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 19 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\intrin.h"
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\setjmp.h"















#pragma once




#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"














 








































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 22 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\setjmp.h"









#line 32 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\setjmp.h"





#pragma pack(push,8)


extern "C" {
#line 42 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\setjmp.h"




































#line 79 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\setjmp.h"
















































































































#line 192 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\setjmp.h"

typedef __declspec(align(16)) struct _SETJMP_FLOAT128 {
    unsigned __int64 Part[2];
} SETJMP_FLOAT128;


typedef SETJMP_FLOAT128 _JBTYPE;



#line 203 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\setjmp.h"

typedef struct _JUMP_BUFFER {
    unsigned __int64 Frame;
    unsigned __int64 Rbx;
    unsigned __int64 Rsp;
    unsigned __int64 Rbp;
    unsigned __int64 Rsi;
    unsigned __int64 Rdi;
    unsigned __int64 R12;
    unsigned __int64 R13;
    unsigned __int64 R14;
    unsigned __int64 R15;
    unsigned __int64 Rip;
    unsigned __int64 Spare;
    
    SETJMP_FLOAT128 Xmm6;
    SETJMP_FLOAT128 Xmm7;
    SETJMP_FLOAT128 Xmm8;
    SETJMP_FLOAT128 Xmm9;
    SETJMP_FLOAT128 Xmm10;
    SETJMP_FLOAT128 Xmm11;
    SETJMP_FLOAT128 Xmm12;
    SETJMP_FLOAT128 Xmm13;
    SETJMP_FLOAT128 Xmm14;
    SETJMP_FLOAT128 Xmm15;
} _JUMP_BUFFER;

#line 231 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\setjmp.h"





typedef _JBTYPE jmp_buf[16];

#line 239 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\setjmp.h"




int __cdecl _setjmp(  jmp_buf _Buf);


}
#line 248 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\setjmp.h"


extern "C"
{
__declspec(dllimport) __declspec(noreturn) void __cdecl longjmp(  jmp_buf _Buf,   int _Value) throw(...);
}


#line 257 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\setjmp.h"

#pragma pack(pop)

#line 261 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\setjmp.h"
#line 20 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\intrin.h"





#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\immintrin.h"










#pragma once






#line 19 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\immintrin.h"

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\wmmintrin.h"
















#pragma once






#line 25 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\wmmintrin.h"

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\nmmintrin.h"

















#pragma once






#line 26 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\nmmintrin.h"

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\smmintrin.h"

















#pragma once






#line 26 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\smmintrin.h"

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\tmmintrin.h"










#pragma once






#line 19 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\tmmintrin.h"

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\pmmintrin.h"


















#pragma once






#line 27 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\pmmintrin.h"




#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\emmintrin.h"




















#pragma once






#line 29 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\emmintrin.h"




#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xmmintrin.h"



























#pragma once






#line 36 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xmmintrin.h"





#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\mmintrin.h"


















#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"














 








































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 20 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\mmintrin.h"



#line 24 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\mmintrin.h"


extern "C" { 


#line 30 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\mmintrin.h"

typedef union __declspec(intrin_type) __declspec(align(8)) __m64
{
    unsigned __int64    m64_u64;
    float               m64_f32[2];
    __int8              m64_i8[8];
    __int16             m64_i16[4];
    __int32             m64_i32[2];    
    __int64             m64_i64;
    unsigned __int8     m64_u8[8];
    unsigned __int16    m64_u16[4];
    unsigned __int32    m64_u32[2];
} __m64;


void  _m_empty(void);
__m64 _m_from_int(int _I);
int   _m_to_int(__m64 _M);
__m64 _m_packsswb(__m64 _MM1, __m64 _MM2);
__m64 _m_packssdw(__m64 _MM1, __m64 _MM2);
__m64 _m_packuswb(__m64 _MM1, __m64 _MM2);
__m64 _m_punpckhbw(__m64 _MM1, __m64 _MM2);
__m64 _m_punpckhwd(__m64 _MM1, __m64 _MM2);
__m64 _m_punpckhdq(__m64 _MM1, __m64 _MM2);
__m64 _m_punpcklbw(__m64 _MM1, __m64 _MM2);
__m64 _m_punpcklwd(__m64 _MM1, __m64 _MM2);
__m64 _m_punpckldq(__m64 _MM1, __m64 _MM2);


__m64 _m_paddb(__m64 _MM1, __m64 _MM2);
__m64 _m_paddw(__m64 _MM1, __m64 _MM2);
__m64 _m_paddd(__m64 _MM1, __m64 _MM2);
__m64 _m_paddsb(__m64 _MM1, __m64 _MM2);
__m64 _m_paddsw(__m64 _MM1, __m64 _MM2);
__m64 _m_paddusb(__m64 _MM1, __m64 _MM2);
__m64 _m_paddusw(__m64 _MM1, __m64 _MM2);
__m64 _m_psubb(__m64 _MM1, __m64 _MM2);
__m64 _m_psubw(__m64 _MM1, __m64 _MM2);
__m64 _m_psubd(__m64 _MM1, __m64 _MM2);
__m64 _m_psubsb(__m64 _MM1, __m64 _MM2);
__m64 _m_psubsw(__m64 _MM1, __m64 _MM2);
__m64 _m_psubusb(__m64 _MM1, __m64 _MM2);
__m64 _m_psubusw(__m64 _MM1, __m64 _MM2);
__m64 _m_pmaddwd(__m64 _MM1, __m64 _MM2);
__m64 _m_pmulhw(__m64 _MM1, __m64 _MM2);
__m64 _m_pmullw(__m64 _MM1, __m64 _MM2);


__m64 _m_psllw(__m64 _M, __m64 _Count);
__m64 _m_psllwi(__m64 _M, int _Count);
__m64 _m_pslld(__m64 _M, __m64 _Count);
__m64 _m_pslldi(__m64 _M, int _Count);
__m64 _m_psllq(__m64 _M, __m64 _Count);
__m64 _m_psllqi(__m64 _M, int _Count);
__m64 _m_psraw(__m64 _M, __m64 _Count);
__m64 _m_psrawi(__m64 _M, int _Count);
__m64 _m_psrad(__m64 _M, __m64 _Count);
__m64 _m_psradi(__m64 _M, int _Count);
__m64 _m_psrlw(__m64 _M, __m64 _Count);
__m64 _m_psrlwi(__m64 _M, int _Count);
__m64 _m_psrld(__m64 _M, __m64 _Count);
__m64 _m_psrldi(__m64 _M, int _Count);
__m64 _m_psrlq(__m64 _M, __m64 _Count);
__m64 _m_psrlqi(__m64 _M, int _Count);


__m64 _m_pand(__m64 _MM1, __m64 _MM2);
__m64 _m_pandn(__m64 _MM1, __m64 _MM2);
__m64 _m_por(__m64 _MM1, __m64 _MM2);
__m64 _m_pxor(__m64 _MM1, __m64 _MM2);


__m64 _m_pcmpeqb(__m64 _MM1, __m64 _MM2);
__m64 _m_pcmpeqw(__m64 _MM1, __m64 _MM2);
__m64 _m_pcmpeqd(__m64 _MM1, __m64 _MM2);
__m64 _m_pcmpgtb(__m64 _MM1, __m64 _MM2);
__m64 _m_pcmpgtw(__m64 _MM1, __m64 _MM2);
__m64 _m_pcmpgtd(__m64 _MM1, __m64 _MM2);


__m64 _mm_setzero_si64(void);
__m64 _mm_set_pi32(int _I1, int _I0);
__m64 _mm_set_pi16(short _S3, short _S2, short _S1, short _S0);
__m64 _mm_set_pi8(char _B7, char _B6, char _B5, char _B4,
                  char _B3, char _B2, char _B1, char _B0);
__m64 _mm_set1_pi32(int _I);
__m64 _mm_set1_pi16(short _S);
__m64 _mm_set1_pi8(char _B);
__m64 _mm_setr_pi32(int _I1, int _I0);
__m64 _mm_setr_pi16(short _S3, short _S2, short _S1, short _S0);
__m64 _mm_setr_pi8(char _B7, char _B6, char _B5, char _B4,
                   char _B3, char _B2, char _B1, char _B0);




























































}; 
#line 184 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\mmintrin.h"

#line 186 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\mmintrin.h"
#line 187 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\mmintrin.h"
#line 188 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\mmintrin.h"

#line 42 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xmmintrin.h"
#line 43 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xmmintrin.h"

















typedef union __declspec(intrin_type) __declspec(align(16)) __m128 {
     float               m128_f32[4];
     unsigned __int64    m128_u64[2];
     __int8              m128_i8[16];
     __int16             m128_i16[8];
     __int32             m128_i32[4];
     __int64             m128_i64[2];
     unsigned __int8     m128_u8[16];
     unsigned __int16    m128_u16[8];
     unsigned __int32    m128_u32[4];
 } __m128;





#line 77 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xmmintrin.h"

 
 
 
 
 
 
 
 
 
 




 
 
 
 
 
 
 
 
 
 







































































 
 
 


extern "C" { 
  
#line 181 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xmmintrin.h"





extern __m128 _mm_add_ss(__m128 _A, __m128 _B);
extern __m128 _mm_add_ps(__m128 _A, __m128 _B);
extern __m128 _mm_sub_ss(__m128 _A, __m128 _B);
extern __m128 _mm_sub_ps(__m128 _A, __m128 _B);
extern __m128 _mm_mul_ss(__m128 _A, __m128 _B);
extern __m128 _mm_mul_ps(__m128 _A, __m128 _B);
extern __m128 _mm_div_ss(__m128 _A, __m128 _B);
extern __m128 _mm_div_ps(__m128 _A, __m128 _B);
extern __m128 _mm_sqrt_ss(__m128 _A);
extern __m128 _mm_sqrt_ps(__m128 _A);
extern __m128 _mm_rcp_ss(__m128 _A);
extern __m128 _mm_rcp_ps(__m128 _A);
extern __m128 _mm_rsqrt_ss(__m128 _A);
extern __m128 _mm_rsqrt_ps(__m128 _A);
extern __m128 _mm_min_ss(__m128 _A, __m128 _B);
extern __m128 _mm_min_ps(__m128 _A, __m128 _B);
extern __m128 _mm_max_ss(__m128 _A, __m128 _B);
extern __m128 _mm_max_ps(__m128 _A, __m128 _B);





extern __m128 _mm_and_ps(__m128 _A, __m128 _B);
extern __m128 _mm_andnot_ps(__m128 _A, __m128 _B);
extern __m128 _mm_or_ps(__m128 _A, __m128 _B);
extern __m128 _mm_xor_ps(__m128 _A, __m128 _B);





extern __m128 _mm_cmpeq_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmpeq_ps(__m128 _A, __m128 _B);
extern __m128 _mm_cmplt_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmplt_ps(__m128 _A, __m128 _B);
extern __m128 _mm_cmple_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmple_ps(__m128 _A, __m128 _B);
extern __m128 _mm_cmpgt_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmpgt_ps(__m128 _A, __m128 _B);
extern __m128 _mm_cmpge_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmpge_ps(__m128 _A, __m128 _B);
extern __m128 _mm_cmpneq_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmpneq_ps(__m128 _A, __m128 _B);
extern __m128 _mm_cmpnlt_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmpnlt_ps(__m128 _A, __m128 _B);
extern __m128 _mm_cmpnle_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmpnle_ps(__m128 _A, __m128 _B);
extern __m128 _mm_cmpngt_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmpngt_ps(__m128 _A, __m128 _B);
extern __m128 _mm_cmpnge_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmpnge_ps(__m128 _A, __m128 _B);
extern __m128 _mm_cmpord_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmpord_ps(__m128 _A, __m128 _B);
extern __m128 _mm_cmpunord_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmpunord_ps(__m128 _A, __m128 _B);
extern int _mm_comieq_ss(__m128 _A, __m128 _B);
extern int _mm_comilt_ss(__m128 _A, __m128 _B);
extern int _mm_comile_ss(__m128 _A, __m128 _B);
extern int _mm_comigt_ss(__m128 _A, __m128 _B);
extern int _mm_comige_ss(__m128 _A, __m128 _B);
extern int _mm_comineq_ss(__m128 _A, __m128 _B);
extern int _mm_ucomieq_ss(__m128 _A, __m128 _B);
extern int _mm_ucomilt_ss(__m128 _A, __m128 _B);
extern int _mm_ucomile_ss(__m128 _A, __m128 _B);
extern int _mm_ucomigt_ss(__m128 _A, __m128 _B);
extern int _mm_ucomige_ss(__m128 _A, __m128 _B);
extern int _mm_ucomineq_ss(__m128 _A, __m128 _B);





extern int _mm_cvt_ss2si(__m128 _A);
extern __m64 _mm_cvt_ps2pi(__m128 _A);
extern int _mm_cvtt_ss2si(__m128 _A);
extern __m64 _mm_cvtt_ps2pi(__m128 _A);
extern __m128 _mm_cvt_si2ss(__m128, int);
extern __m128 _mm_cvt_pi2ps(__m128, __m64);
extern float _mm_cvtss_f32(__m128 _A);





extern __int64 _mm_cvtss_si64(__m128 _A);
extern __int64 _mm_cvttss_si64(__m128 _A);
extern __m128  _mm_cvtsi64_ss(__m128 _A, __int64 _B);
#line 275 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xmmintrin.h"





extern __m128 _mm_shuffle_ps(__m128 _A, __m128 _B, unsigned int _Imm8);
extern __m128 _mm_unpackhi_ps(__m128 _A, __m128 _B);
extern __m128 _mm_unpacklo_ps(__m128 _A, __m128 _B);
extern __m128 _mm_loadh_pi(__m128, __m64 const*);
extern __m128 _mm_movehl_ps(__m128, __m128);
extern __m128 _mm_movelh_ps(__m128, __m128);
extern void _mm_storeh_pi(__m64 *, __m128);
extern __m128 _mm_loadl_pi(__m128, __m64 const*);
extern void _mm_storel_pi(__m64 *, __m128);
extern int _mm_movemask_ps(__m128 _A);





extern int _m_pextrw(__m64, int);
extern __m64 _m_pinsrw(__m64, int, int);
extern __m64 _m_pmaxsw(__m64, __m64);
extern __m64 _m_pmaxub(__m64, __m64);
extern __m64 _m_pminsw(__m64, __m64);
extern __m64 _m_pminub(__m64, __m64);
extern int _m_pmovmskb(__m64);
extern __m64 _m_pmulhuw(__m64, __m64);
extern __m64 _m_pshufw(__m64, int);
extern void _m_maskmovq(__m64, __m64, char *);
extern __m64 _m_pavgb(__m64, __m64);
extern __m64 _m_pavgw(__m64, __m64);
extern __m64 _m_psadbw(__m64, __m64);





extern __m128 _mm_set_ss(float _A);
extern __m128 _mm_set_ps1(float _A);
extern __m128 _mm_set_ps(float _A, float _B, float _C, float _D);
extern __m128 _mm_setr_ps(float _A, float _B, float _C, float _D);
extern __m128 _mm_setzero_ps(void);
extern __m128 _mm_load_ss(float const*_A);
extern __m128 _mm_load_ps1(float const*_A);
extern __m128 _mm_load_ps(float const*_A);
extern __m128 _mm_loadr_ps(float const*_A);
extern __m128 _mm_loadu_ps(float const*_A);
extern void _mm_store_ss(float *_V, __m128 _A);
extern void _mm_store_ps1(float *_V, __m128 _A);
extern void _mm_store_ps(float *_V, __m128 _A);
extern void _mm_storer_ps(float *_V, __m128 _A);
extern void _mm_storeu_ps(float *_V, __m128 _A);
extern void _mm_prefetch(char const*_A, int _Sel);
extern void _mm_stream_pi(__m64 *, __m64);
extern void _mm_stream_ps(float *, __m128);
extern __m128 _mm_move_ss(__m128 _A, __m128 _B);

extern void _mm_sfence(void);
extern unsigned int _mm_getcsr(void);
extern void _mm_setcsr(unsigned int);






























 
 
 

 
 
 
 
 
 
 
 
__inline __m128 _mm_cvtpi16_ps(__m64 a)
{
  __m128 tmp;
  __m64  ext_val = _m_pcmpgtw(_mm_setzero_si64(), a);

  tmp = _mm_cvt_pi2ps(_mm_setzero_ps(), _m_punpckhwd(a, ext_val));
  return(_mm_cvt_pi2ps(_mm_movelh_ps(tmp, tmp), 
                        _m_punpcklwd(a, ext_val)));
}


 
 
 
 
 
 
 
 
__inline __m128 _mm_cvtpu16_ps(__m64 a)
{
  __m128 tmp;
  __m64  ext_val = _mm_setzero_si64();

  tmp = _mm_cvt_pi2ps(_mm_setzero_ps(), _m_punpckhwd(a, ext_val));
  return(_mm_cvt_pi2ps(_mm_movelh_ps(tmp, tmp), 
                        _m_punpcklwd(a, ext_val)));
}


 
 
 
 
 
 
 
 
__inline __m64 _mm_cvtps_pi16(__m128 a)
{
  return _m_packssdw(_mm_cvt_ps2pi(a), 
                        _mm_cvt_ps2pi(_mm_movehl_ps(a, a)));
}


 
 
 
 
 
 
 
 
__inline __m128 _mm_cvtpi8_ps(__m64 a)
{
  __m64  ext_val = _m_pcmpgtb(_mm_setzero_si64(), a);

  return _mm_cvtpi16_ps(_m_punpcklbw(a, ext_val));
}


 
 
 
 
 
 
 
 
 
__inline __m128 _mm_cvtpu8_ps(__m64 a)
{
  return _mm_cvtpu16_ps(_m_punpcklbw(a, _mm_setzero_si64()));
}


 
 
 
 
 
 
 
 
__inline __m64 _mm_cvtps_pi8(__m128 a)
{
  return _m_packsswb(_mm_cvtps_pi16(a), _mm_setzero_si64());
}


 
 
 
 
 
 
 
 
 
__inline __m128 _mm_cvtpi32x2_ps(__m64 a, __m64 b)
{
  return _mm_movelh_ps(_mm_cvt_pi2ps(_mm_setzero_ps(), a), 
                       _mm_cvt_pi2ps(_mm_setzero_ps(), b)); 
}



}; 
#line 487 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xmmintrin.h"

#line 489 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xmmintrin.h"

#line 491 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xmmintrin.h"
#line 492 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xmmintrin.h"
#line 34 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\emmintrin.h"

typedef union __declspec(intrin_type) __declspec(align(16)) __m128i {
    __int8              m128i_i8[16];
    __int16             m128i_i16[8];
    __int32             m128i_i32[4];    
    __int64             m128i_i64[2];
    unsigned __int8     m128i_u8[16];
    unsigned __int16    m128i_u16[8];
    unsigned __int32    m128i_u32[4];
    unsigned __int64    m128i_u64[2];
} __m128i;

typedef struct __declspec(intrin_type) __declspec(align(16)) __m128d {
    double              m128d_f64[2];
} __m128d;






 
 
 


extern "C" { 
  
#line 63 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\emmintrin.h"





extern __m128d _mm_add_sd(__m128d _A, __m128d _B);
extern __m128d _mm_add_pd(__m128d _A, __m128d _B);
extern __m128d _mm_sub_sd(__m128d _A, __m128d _B);
extern __m128d _mm_sub_pd(__m128d _A, __m128d _B);
extern __m128d _mm_mul_sd(__m128d _A, __m128d _B);
extern __m128d _mm_mul_pd(__m128d _A, __m128d _B);
extern __m128d _mm_sqrt_sd(__m128d _A, __m128d _B);
extern __m128d _mm_sqrt_pd(__m128d _A);
extern __m128d _mm_div_sd(__m128d _A, __m128d _B);
extern __m128d _mm_div_pd(__m128d _A, __m128d _B);
extern __m128d _mm_min_sd(__m128d _A, __m128d _B);
extern __m128d _mm_min_pd(__m128d _A, __m128d _B);
extern __m128d _mm_max_sd(__m128d _A, __m128d _B);
extern __m128d _mm_max_pd(__m128d _A, __m128d _B);





extern __m128d _mm_and_pd(__m128d _A, __m128d _B);
extern __m128d _mm_andnot_pd(__m128d _A, __m128d _B);
extern __m128d _mm_or_pd(__m128d _A, __m128d _B);
extern __m128d _mm_xor_pd(__m128d _A, __m128d _B);





extern __m128d _mm_cmpeq_sd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpeq_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmplt_sd(__m128d _A, __m128d _B);
extern __m128d _mm_cmplt_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmple_sd(__m128d _A, __m128d _B);
extern __m128d _mm_cmple_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpgt_sd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpgt_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpge_sd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpge_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpneq_sd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpneq_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpnlt_sd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpnlt_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpnle_sd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpnle_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpngt_sd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpngt_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpnge_sd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpnge_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpord_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpord_sd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpunord_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpunord_sd(__m128d _A, __m128d _B);
extern int _mm_comieq_sd(__m128d _A, __m128d _B);
extern int _mm_comilt_sd(__m128d _A, __m128d _B);
extern int _mm_comile_sd(__m128d _A, __m128d _B);
extern int _mm_comigt_sd(__m128d _A, __m128d _B);
extern int _mm_comige_sd(__m128d _A, __m128d _B);
extern int _mm_comineq_sd(__m128d _A, __m128d _B);
extern int _mm_ucomieq_sd(__m128d _A, __m128d _B);
extern int _mm_ucomilt_sd(__m128d _A, __m128d _B);
extern int _mm_ucomile_sd(__m128d _A, __m128d _B);
extern int _mm_ucomigt_sd(__m128d _A, __m128d _B);
extern int _mm_ucomige_sd(__m128d _A, __m128d _B);
extern int _mm_ucomineq_sd(__m128d _A, __m128d _B);





extern __m128d _mm_cvtepi32_pd(__m128i _A);
extern __m128i _mm_cvtpd_epi32(__m128d _A);
extern __m128i _mm_cvttpd_epi32(__m128d _A);
extern __m128 _mm_cvtepi32_ps(__m128i _A);
extern __m128i _mm_cvtps_epi32(__m128 _A);
extern __m128i _mm_cvttps_epi32(__m128 _A);
extern __m128 _mm_cvtpd_ps(__m128d _A);
extern __m128d _mm_cvtps_pd(__m128 _A);
extern __m128 _mm_cvtsd_ss(__m128 _A, __m128d _B);
extern __m128d _mm_cvtss_sd(__m128d _A, __m128 _B);

extern int _mm_cvtsd_si32(__m128d _A);
extern int _mm_cvttsd_si32(__m128d _A);
extern __m128d _mm_cvtsi32_sd(__m128d _A, int _B);

extern __m64 _mm_cvtpd_pi32(__m128d _A);
extern __m64 _mm_cvttpd_pi32(__m128d _A);
extern __m128d _mm_cvtpi32_pd(__m64 _A);





extern __m128d _mm_unpackhi_pd(__m128d _A, __m128d _B);
extern __m128d _mm_unpacklo_pd(__m128d _A, __m128d _B);
extern int _mm_movemask_pd(__m128d _A);
extern __m128d _mm_shuffle_pd(__m128d _A, __m128d _B, int _I);





extern __m128d _mm_load_pd(double const*_Dp);
extern __m128d _mm_load1_pd(double const*_Dp);
extern __m128d _mm_loadr_pd(double const*_Dp);
extern __m128d _mm_loadu_pd(double const*_Dp);
extern __m128d _mm_load_sd(double const*_Dp);
extern __m128d _mm_loadh_pd(__m128d _A, double const*_Dp);
extern __m128d _mm_loadl_pd(__m128d _A, double const*_Dp);





extern __m128d _mm_set_sd(double _W);
extern __m128d _mm_set1_pd(double _A);
extern __m128d _mm_set_pd(double _Z, double _Y);
extern __m128d _mm_setr_pd(double _Y, double _Z);
extern __m128d _mm_setzero_pd(void);
extern __m128d _mm_move_sd(__m128d _A, __m128d _B);





extern void _mm_store_sd(double *_Dp, __m128d _A);
extern void _mm_store1_pd(double *_Dp, __m128d _A);
extern void _mm_store_pd(double *_Dp, __m128d _A);
extern void _mm_storeu_pd(double *_Dp, __m128d _A);
extern void _mm_storer_pd(double *_Dp, __m128d _A);
extern void _mm_storeh_pd(double *_Dp, __m128d _A);
extern void _mm_storel_pd(double *_Dp, __m128d _A);





extern __m128i _mm_add_epi8(__m128i _A, __m128i _B);
extern __m128i _mm_add_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_add_epi32(__m128i _A, __m128i _B);
extern __m64 _mm_add_si64(__m64 _A, __m64 _B);
extern __m128i _mm_add_epi64(__m128i _A, __m128i _B);
extern __m128i _mm_adds_epi8(__m128i _A, __m128i _B);
extern __m128i _mm_adds_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_adds_epu8(__m128i _A, __m128i _B);
extern __m128i _mm_adds_epu16(__m128i _A, __m128i _B);
extern __m128i _mm_avg_epu8(__m128i _A, __m128i _B);
extern __m128i _mm_avg_epu16(__m128i _A, __m128i _B);
extern __m128i _mm_madd_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_max_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_max_epu8(__m128i _A, __m128i _B);
extern __m128i _mm_min_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_min_epu8(__m128i _A, __m128i _B);
extern __m128i _mm_mulhi_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_mulhi_epu16(__m128i _A, __m128i _B);
extern __m128i _mm_mullo_epi16(__m128i _A, __m128i _B);
extern __m64 _mm_mul_su32(__m64 _A, __m64 _B);
extern __m128i _mm_mul_epu32(__m128i _A, __m128i _B);
extern __m128i _mm_sad_epu8(__m128i _A, __m128i _B);
extern __m128i _mm_sub_epi8(__m128i _A, __m128i _B);
extern __m128i _mm_sub_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_sub_epi32(__m128i _A, __m128i _B);
extern __m64 _mm_sub_si64(__m64 _A, __m64 _B);
extern __m128i _mm_sub_epi64(__m128i _A, __m128i _B);
extern __m128i _mm_subs_epi8(__m128i _A, __m128i _B);
extern __m128i _mm_subs_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_subs_epu8(__m128i _A, __m128i _B);
extern __m128i _mm_subs_epu16(__m128i _A, __m128i _B);





extern __m128i _mm_and_si128(__m128i _A, __m128i _B);
extern __m128i _mm_andnot_si128(__m128i _A, __m128i _B);
extern __m128i _mm_or_si128(__m128i _A, __m128i _B);
extern __m128i _mm_xor_si128(__m128i _A, __m128i _B);





extern __m128i _mm_slli_si128(__m128i _A, int _Imm);
extern __m128i _mm_slli_epi16(__m128i _A, int _Count);
extern __m128i _mm_sll_epi16(__m128i _A, __m128i _Count);
extern __m128i _mm_slli_epi32(__m128i _A, int _Count);
extern __m128i _mm_sll_epi32(__m128i _A, __m128i _Count);
extern __m128i _mm_slli_epi64(__m128i _A, int _Count);
extern __m128i _mm_sll_epi64(__m128i _A, __m128i _Count);
extern __m128i _mm_srai_epi16(__m128i _A, int _Count);
extern __m128i _mm_sra_epi16(__m128i _A, __m128i _Count);
extern __m128i _mm_srai_epi32(__m128i _A, int _Count);
extern __m128i _mm_sra_epi32(__m128i _A, __m128i _Count);
extern __m128i _mm_srli_si128(__m128i _A, int _Imm);
extern __m128i _mm_srli_epi16(__m128i _A, int _Count);
extern __m128i _mm_srl_epi16(__m128i _A, __m128i _Count);
extern __m128i _mm_srli_epi32(__m128i _A, int _Count);
extern __m128i _mm_srl_epi32(__m128i _A, __m128i _Count);
extern __m128i _mm_srli_epi64(__m128i _A, int _Count);
extern __m128i _mm_srl_epi64(__m128i _A, __m128i _Count);





extern __m128i _mm_cmpeq_epi8(__m128i _A, __m128i _B);
extern __m128i _mm_cmpeq_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_cmpeq_epi32(__m128i _A, __m128i _B);
extern __m128i _mm_cmpgt_epi8(__m128i _A, __m128i _B);
extern __m128i _mm_cmpgt_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_cmpgt_epi32(__m128i _A, __m128i _B);
extern __m128i _mm_cmplt_epi8(__m128i _A, __m128i _B);
extern __m128i _mm_cmplt_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_cmplt_epi32(__m128i _A, __m128i _B);





extern __m128i _mm_cvtsi32_si128(int _A);
extern int _mm_cvtsi128_si32(__m128i _A);





extern __m128i _mm_packs_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_packs_epi32(__m128i _A, __m128i _B);
extern __m128i _mm_packus_epi16(__m128i _A, __m128i _B);
extern int _mm_extract_epi16(__m128i _A, int _Imm);
extern __m128i _mm_insert_epi16(__m128i _A, int _B, int _Imm);
extern int _mm_movemask_epi8(__m128i _A);
extern __m128i _mm_shuffle_epi32(__m128i _A, int _Imm);
extern __m128i _mm_shufflehi_epi16(__m128i _A, int _Imm);
extern __m128i _mm_shufflelo_epi16(__m128i _A, int _Imm);
extern __m128i _mm_unpackhi_epi8(__m128i _A, __m128i _B);
extern __m128i _mm_unpackhi_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_unpackhi_epi32(__m128i _A, __m128i _B);
extern __m128i _mm_unpackhi_epi64(__m128i _A, __m128i _B);
extern __m128i _mm_unpacklo_epi8(__m128i _A, __m128i _B);
extern __m128i _mm_unpacklo_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_unpacklo_epi32(__m128i _A, __m128i _B);
extern __m128i _mm_unpacklo_epi64(__m128i _A, __m128i _B);





extern __m128i _mm_load_si128(__m128i const*_P);
extern __m128i _mm_loadu_si128(__m128i const*_P);
extern __m128i _mm_loadl_epi64(__m128i const*_P);





extern __m128i _mm_set_epi64(__m64 _Q1, __m64 _Q0);
extern __m128i _mm_set_epi32(int _I3, int _I2, int _I1, int _I0);
extern __m128i _mm_set_epi16(short _W7, short _W6, short _W5, short _W4,
                             short _W3, short _W2, short _W1, short _W0);
extern __m128i _mm_set_epi8(char _B15, char _B14, char _B13, char _B12, 
                            char _B11, char _B10, char _B9, char _B8, 
                            char _B7, char _B6, char _B5, char _B4, 
                            char _B3, char _B2, char _B1, char _B0);
extern __m128i _mm_set1_epi64(__m64 _Q);
extern __m128i _mm_set1_epi32(int _I);
extern __m128i _mm_set1_epi16(short _W);
extern __m128i _mm_set1_epi8(char _B);
extern __m128i _mm_setl_epi64(__m128i _Q);
extern __m128i _mm_setr_epi64(__m64 _Q0, __m64 _Q1);
extern __m128i _mm_setr_epi32(int _I0, int _I1, int _I2, int _I3);
extern __m128i _mm_setr_epi16(short _W0, short _W1, short _W2, short _W3, 
                              short _W4, short _W5, short _W6, short _W7);
extern __m128i _mm_setr_epi8(char _B15, char _B14, char _B13, char _B12, 
                             char _B11, char _B10, char _B9, char _B8, 
                             char _B7, char _B6, char _B5, char _B4, 
                             char _B3, char _B2, char _B1, char _B0);
extern __m128i _mm_setzero_si128(void);





extern void _mm_store_si128(__m128i *_P, __m128i _B);
extern void _mm_storeu_si128(__m128i *_P, __m128i _B);
extern void _mm_storel_epi64(__m128i *_P, __m128i _Q);
extern void _mm_maskmoveu_si128(__m128i _D, __m128i _N, char *_P);





extern __m128i _mm_move_epi64(__m128i _Q);
extern __m128i _mm_movpi64_epi64(__m64 _Q);
extern __m64 _mm_movepi64_pi64(__m128i _Q);





extern void _mm_stream_pd(double *_Dp, __m128d _A);
extern void _mm_stream_si128(__m128i *_P, __m128i _A);
extern void _mm_clflush(void const*_P);
extern void _mm_lfence(void);
extern void _mm_mfence(void);
extern void _mm_stream_si32(int *_P, int _I);
extern void _mm_pause(void);





extern double _mm_cvtsd_f64(__m128d _A);







extern __m128  _mm_castpd_ps(__m128d);
extern __m128i _mm_castpd_si128(__m128d);
extern __m128d _mm_castps_pd(__m128);
extern __m128i _mm_castps_si128(__m128);
extern __m128  _mm_castsi128_ps(__m128i);
extern __m128d _mm_castsi128_pd(__m128i);






extern __int64 _mm_cvtsd_si64(__m128d);
extern __int64 _mm_cvttsd_si64(__m128d);
extern __m128d _mm_cvtsi64_sd(__m128d, __int64);
extern __m128i _mm_cvtsi64_si128(__int64);
extern __int64 _mm_cvtsi128_si64(__m128i);


#line 407 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\emmintrin.h"


}; 
#line 411 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\emmintrin.h"

#line 413 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\emmintrin.h"

#line 415 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\emmintrin.h"
#line 416 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\emmintrin.h"
#line 32 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\pmmintrin.h"

 
 
 














 
 
 


extern "C" { 
  
#line 58 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\pmmintrin.h"





extern __m128 _mm_addsub_ps(__m128 a, __m128 b);
extern __m128 _mm_hadd_ps(__m128 a, __m128 b);
extern __m128 _mm_hsub_ps(__m128 a, __m128 b);
extern __m128 _mm_movehdup_ps(__m128 a);
extern __m128 _mm_moveldup_ps(__m128 a);





extern __m128d _mm_addsub_pd(__m128d a, __m128d b);
extern __m128d _mm_hadd_pd(__m128d a, __m128d b);
extern __m128d _mm_hsub_pd(__m128d a, __m128d b);
extern __m128d _mm_loaddup_pd(double const * dp);
extern __m128d _mm_movedup_pd(__m128d a);




extern __m128i _mm_lddqu_si128(__m128i const *p);







extern void _mm_monitor(void const *p, unsigned extensions, unsigned hints);




extern void _mm_mwait(unsigned extensions, unsigned hints);


}; 
#line 100 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\pmmintrin.h"

#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\pmmintrin.h"

#line 104 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\pmmintrin.h"
#line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\pmmintrin.h"
#line 21 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\tmmintrin.h"









extern "C" {
#line 32 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\tmmintrin.h"

    
    

    extern __m128i _mm_hadd_epi16 (__m128i a, __m128i b);
    extern __m128i _mm_hadd_epi32 (__m128i a, __m128i b);
    extern __m128i _mm_hadds_epi16 (__m128i a, __m128i b);

    extern __m64 _mm_hadd_pi16 (__m64 a, __m64 b);
    extern __m64 _mm_hadd_pi32 (__m64 a, __m64 b);
    extern __m64 _mm_hadds_pi16 (__m64 a, __m64 b);

    
    

    extern __m128i _mm_hsub_epi16 (__m128i a, __m128i b);
    extern __m128i _mm_hsub_epi32 (__m128i a, __m128i b);
    extern __m128i _mm_hsubs_epi16 (__m128i a, __m128i b);

    extern __m64 _mm_hsub_pi16 (__m64 a, __m64 b);
    extern __m64 _mm_hsub_pi32 (__m64 a, __m64 b);
    extern __m64 _mm_hsubs_pi16 (__m64 a, __m64 b);

    
    

    extern __m128i _mm_maddubs_epi16 (__m128i a, __m128i b);

    extern __m64 _mm_maddubs_pi16 (__m64 a, __m64 b);

    
    

    extern __m128i _mm_mulhrs_epi16 (__m128i a, __m128i b);

    extern __m64 _mm_mulhrs_pi16 (__m64 a, __m64 b);

    
    

    extern __m128i _mm_shuffle_epi8 (__m128i a, __m128i b);

    extern __m64 _mm_shuffle_pi8 (__m64 a, __m64 b);

    
    

    extern __m128i _mm_sign_epi8 (__m128i a, __m128i b);
    extern __m128i _mm_sign_epi16 (__m128i a, __m128i b);
    extern __m128i _mm_sign_epi32 (__m128i a, __m128i b);

    extern __m64 _mm_sign_pi8 (__m64 a, __m64 b);
    extern __m64 _mm_sign_pi16 (__m64 a, __m64 b);
    extern __m64 _mm_sign_pi32 (__m64 a, __m64 b);

    
    

    extern __m128i _mm_alignr_epi8 (__m128i a, __m128i b, int n);

    extern __m64 _mm_alignr_pi8 (__m64 a, __m64 b, int n);

    
    

    extern __m128i _mm_abs_epi8 (__m128i a);
    extern __m128i _mm_abs_epi16 (__m128i a);
    extern __m128i _mm_abs_epi32 (__m128i a);

    extern __m64 _mm_abs_pi8 (__m64 a);
    extern __m64 _mm_abs_pi16 (__m64 a);
    extern __m64 _mm_abs_pi32 (__m64 a);


};
#line 108 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\tmmintrin.h"

#line 110 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\tmmintrin.h"

#line 112 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\tmmintrin.h"

#line 114 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\tmmintrin.h"
#line 28 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\smmintrin.h"


















































extern "C" {
#line 80 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\smmintrin.h"

        
        

        extern __m128i _mm_blend_epi16 (__m128i v1, __m128i v2,
                                        const int mask);
        extern __m128i _mm_blendv_epi8 (__m128i v1, __m128i v2, __m128i mask);

        
        

        extern __m128  _mm_blend_ps (__m128  v1, __m128  v2, const int mask);
        extern __m128  _mm_blendv_ps(__m128  v1, __m128  v2, __m128 v3);

        
        

        extern __m128d _mm_blend_pd (__m128d v1, __m128d v2, const int mask);
        extern __m128d _mm_blendv_pd(__m128d v1, __m128d v2, __m128d v3);

        
        

        extern __m128  _mm_dp_ps(__m128  val1, __m128  val2, const int mask);
        extern __m128d _mm_dp_pd(__m128d val1, __m128d val2, const int mask);

        
        

        extern __m128i _mm_cmpeq_epi64(__m128i val1, __m128i val2);

        

        extern __m128i _mm_min_epi8 (__m128i val1, __m128i val2);
        extern __m128i _mm_max_epi8 (__m128i val1, __m128i val2);

        extern __m128i _mm_min_epu16(__m128i val1, __m128i val2);
        extern __m128i _mm_max_epu16(__m128i val1, __m128i val2);

        extern __m128i _mm_min_epi32(__m128i val1, __m128i val2);
        extern __m128i _mm_max_epi32(__m128i val1, __m128i val2);
        extern __m128i _mm_min_epu32(__m128i val1, __m128i val2);
        extern __m128i _mm_max_epu32(__m128i val1, __m128i val2);

        
        

        extern __m128i _mm_mullo_epi32(__m128i a, __m128i b);

        
        

        extern __m128i _mm_mul_epi32(__m128i a, __m128i b);

        
        

        extern int _mm_testz_si128(__m128i mask, __m128i val);

        
        

        extern int _mm_testc_si128(__m128i mask, __m128i val);

        
        
        

        extern int _mm_testnzc_si128(__m128i mask, __m128i s2);

        
        
        
        
        

        extern __m128 _mm_insert_ps(__m128 dst, __m128 src, const int ndx);

        




        
        

        extern int _mm_extract_ps(__m128 src, const int ndx);

        
        




        
        





        
        

        extern __m128i _mm_insert_epi8 (__m128i dst, int s, const int ndx);
        extern __m128i _mm_insert_epi32(__m128i dst, int s, const int ndx);


        extern __m128i _mm_insert_epi64(__m128i dst, __int64 s, const int ndx);
#line 190 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\smmintrin.h"
        
        

        extern int   _mm_extract_epi8 (__m128i src, const int ndx);
        extern int   _mm_extract_epi32(__m128i src, const int ndx);


        extern __int64 _mm_extract_epi64(__m128i src, const int ndx);
#line 199 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\smmintrin.h"

        
        

        extern __m128i _mm_minpos_epu16(__m128i shortValues);

        

        extern __m128d _mm_round_pd(__m128d val, int iRoundMode);
        extern __m128d _mm_round_sd(__m128d dst, __m128d val, int iRoundMode);

        

        extern __m128  _mm_round_ps(__m128  val, int iRoundMode);
        extern __m128  _mm_round_ss(__m128 dst, __m128  val, int iRoundMode);

        

        extern __m128i _mm_cvtepi8_epi32 (__m128i byteValues);
        extern __m128i _mm_cvtepi16_epi32(__m128i shortValues);
        extern __m128i _mm_cvtepi8_epi64 (__m128i byteValues); 
        extern __m128i _mm_cvtepi32_epi64(__m128i intValues);
        extern __m128i _mm_cvtepi16_epi64(__m128i shortValues);
        extern __m128i _mm_cvtepi8_epi16 (__m128i byteValues);

        

        extern __m128i _mm_cvtepu8_epi32 (__m128i byteValues);
        extern __m128i _mm_cvtepu16_epi32(__m128i shortValues);
        extern __m128i _mm_cvtepu8_epi64 (__m128i shortValues);
        extern __m128i _mm_cvtepu32_epi64(__m128i intValues);
        extern __m128i _mm_cvtepu16_epi64(__m128i shortValues);
        extern __m128i _mm_cvtepu8_epi16 (__m128i byteValues);


        
        

        extern __m128i _mm_packus_epi32(__m128i val1, __m128i val2);

        
        
        

        extern __m128i _mm_mpsadbw_epu8(__m128i s1, __m128i s2, const int msk);

        



        extern __m128i _mm_stream_load_si128(__m128i* v1);


}; 
#line 254 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\smmintrin.h"

#line 256 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\smmintrin.h"

#line 258 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\smmintrin.h"
#line 259 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\smmintrin.h"
#line 28 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\nmmintrin.h"



extern "C" {
#line 33 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\nmmintrin.h"












































 
    extern __m128i _mm_cmpistrm (__m128i a, __m128i b, const int mode);
    extern int     _mm_cmpistri (__m128i a, __m128i b, const int mode);

    extern __m128i _mm_cmpestrm (__m128i a, int la, __m128i b, int lb, const int mode);
    extern int     _mm_cmpestri (__m128i a, int la, __m128i b, int lb, const int mode);





    extern int     _mm_cmpistrz (__m128i a, __m128i b, const int mode);
    extern int     _mm_cmpistrc (__m128i a, __m128i b, const int mode);
    extern int     _mm_cmpistrs (__m128i a, __m128i b, const int mode);
    extern int     _mm_cmpistro (__m128i a, __m128i b, const int mode);
    extern int     _mm_cmpistra (__m128i a, __m128i b, const int mode);

    extern int     _mm_cmpestrz (__m128i a, int la, __m128i b, int lb, const int mode);
    extern int     _mm_cmpestrc (__m128i a, int la, __m128i b, int lb, const int mode);
    extern int     _mm_cmpestrs (__m128i a, int la, __m128i b, int lb, const int mode);
    extern int     _mm_cmpestro (__m128i a, int la, __m128i b, int lb, const int mode);
    extern int     _mm_cmpestra (__m128i a, int la, __m128i b, int lb, const int mode);






    extern __m128i _mm_cmpgt_epi64(__m128i val1, __m128i val2);





    extern int _mm_popcnt_u32(unsigned int v);


    extern __int64 _mm_popcnt_u64(unsigned __int64 v);
#line 116 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\nmmintrin.h"





    extern unsigned int _mm_crc32_u8 (unsigned int crc, unsigned char v);
    extern unsigned int _mm_crc32_u16(unsigned int crc, unsigned short v);
    extern unsigned int _mm_crc32_u32(unsigned int crc, unsigned int v);


    extern unsigned __int64 _mm_crc32_u64(unsigned __int64 crc, unsigned __int64 v);
#line 128 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\nmmintrin.h"


}; 
#line 132 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\nmmintrin.h"

#line 134 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\nmmintrin.h"

#line 136 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\nmmintrin.h"
#line 137 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\nmmintrin.h"
#line 27 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\wmmintrin.h"



extern "C" {
#line 32 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\wmmintrin.h"





extern __m128i _mm_aesdec_si128(__m128i v, __m128i rkey);





extern __m128i _mm_aesdeclast_si128(__m128i v, __m128i rkey);





extern __m128i _mm_aesenc_si128(__m128i v, __m128i rkey);





extern __m128i _mm_aesenclast_si128(__m128i v, __m128i rkey);





extern __m128i _mm_aesimc_si128(__m128i v);






extern __m128i _mm_aeskeygenassist_si128(__m128i ckey, const int rcon);







extern __m128i _mm_clmulepi64_si128(__m128i v1, __m128i v2, 
					    const int imm8);





}; 
#line 85 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\wmmintrin.h"

#line 87 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\wmmintrin.h"

#line 89 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\wmmintrin.h"
#line 90 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\wmmintrin.h"
#line 21 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\immintrin.h"


extern "C" {
#line 25 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\immintrin.h"





typedef union __declspec(intrin_type) __declspec(align(32)) __m256 { 
    float m256_f32[8];
} __m256;
    
typedef struct __declspec(intrin_type) __declspec(align(32)) {
    double m256d_f64[4]; 
} __m256d;

typedef union  __declspec(intrin_type) __declspec(align(32)) __m256i {
    __int8              m256i_i8[32];
    __int16             m256i_i16[16];
    __int32             m256i_i32[8];
    __int64             m256i_i64[4];
    unsigned __int8     m256i_u8[32];
    unsigned __int16    m256i_u16[16];
    unsigned __int32    m256i_u32[8];
    unsigned __int64    m256i_u64[4];
} __m256i;













































extern __m256d __cdecl _mm256_add_pd(__m256d m1, __m256d m2);









extern __m256 __cdecl _mm256_add_ps(__m256 m1, __m256 m2);












extern __m256d __cdecl _mm256_addsub_pd(__m256d m1, __m256d m2);












extern __m256 __cdecl _mm256_addsub_ps(__m256 m1, __m256 m2);








extern __m256d __cdecl _mm256_and_pd(__m256d m1, __m256d m2);








extern __m256 __cdecl _mm256_and_ps(__m256 m1, __m256 m2);








extern __m256d __cdecl _mm256_andnot_pd(__m256d m1, __m256d m2);








extern __m256 __cdecl _mm256_andnot_ps(__m256 m1, __m256 m2);













extern __m256d __cdecl _mm256_blend_pd(__m256d m1, __m256d m2, const int mask);













extern __m256 __cdecl _mm256_blend_ps(__m256 m1, __m256 m2, const int mask);









extern __m256d __cdecl _mm256_blendv_pd(__m256d m1, __m256d m2, __m256d m3);









extern __m256 __cdecl _mm256_blendv_ps(__m256 m1, __m256 m2, __m256 mask);








extern __m256d __cdecl _mm256_div_pd(__m256d m1, __m256d m2);








extern __m256 __cdecl _mm256_div_ps(__m256 m1, __m256 m2);














extern __m256 __cdecl _mm256_dp_ps(__m256 m1, __m256 m2, const int mask);








extern __m256d __cdecl _mm256_hadd_pd(__m256d m1, __m256d m2);








extern __m256 __cdecl _mm256_hadd_ps(__m256 m1, __m256 m2);








extern __m256d __cdecl _mm256_hsub_pd(__m256d m1, __m256d m2);








extern __m256 __cdecl _mm256_hsub_ps(__m256 m1, __m256 m2);








extern __m256d __cdecl _mm256_max_pd(__m256d m1, __m256d m2);








extern __m256 __cdecl _mm256_max_ps(__m256 m1, __m256 m2);








extern __m256d __cdecl _mm256_min_pd(__m256d m1, __m256d m2);








extern __m256 __cdecl _mm256_min_ps(__m256 m1, __m256 m2);









extern __m256d __cdecl _mm256_mul_pd(__m256d m1, __m256d m2);









extern __m256 __cdecl _mm256_mul_ps(__m256 m1, __m256 m2);








extern __m256d __cdecl _mm256_or_pd(__m256d m1, __m256d m2);








extern __m256 __cdecl _mm256_or_ps(__m256 m1, __m256 m2);











extern __m256d __cdecl _mm256_shuffle_pd(__m256d m1, __m256d m2, const int select);












extern __m256 __cdecl _mm256_shuffle_ps(__m256 m1, __m256 m2, const int select);








extern __m256d __cdecl _mm256_sub_pd(__m256d m1, __m256d m2);









extern __m256 __cdecl _mm256_sub_ps(__m256 m1, __m256 m2);








extern __m256d __cdecl _mm256_xor_pd(__m256d m1, __m256d m2);








extern __m256 __cdecl _mm256_xor_ps(__m256 m1, __m256 m2);














extern __m128d __cdecl _mm_cmp_pd(__m128d m1, __m128d m2, const int predicate);
extern __m256d __cdecl _mm256_cmp_pd(__m256d m1, __m256d m2, const int predicate);














extern __m128 __cdecl _mm_cmp_ps(__m128 m1, __m128 m2, const int predicate);
extern __m256 __cdecl _mm256_cmp_ps(__m256 m1, __m256 m2, const int predicate);












extern __m128d __cdecl _mm_cmp_sd(__m128d m1, __m128d m2, const int predicate);












extern __m128 __cdecl _mm_cmp_ss(__m128 m1, __m128 m2, const int predicate);








extern __m256d __cdecl _mm256_cvtepi32_pd(__m128i m1);








extern __m256  __cdecl _mm256_cvtepi32_ps(__m256i m1);









extern __m128  __cdecl _mm256_cvtpd_ps(__m256d m1);








extern __m256i __cdecl _mm256_cvtps_epi32(__m256 m1);









extern __m256d __cdecl _mm256_cvtps_pd(__m128 m1);












extern __m128i __cdecl _mm256_cvttpd_epi32(__m256d m1);








extern __m128i __cdecl _mm256_cvtpd_epi32(__m256d m1);












extern __m256i __cdecl _mm256_cvttps_epi32(__m256 m1);







extern __m128  __cdecl _mm256_extractf128_ps(__m256 m1, const int offset);
extern __m128d __cdecl _mm256_extractf128_pd(__m256d m1, const int offset);
extern __m128i __cdecl _mm256_extractf128_si256(__m256i m1, const int offset);






extern void __cdecl _mm256_zeroall(void);







extern void __cdecl _mm256_zeroupper(void);









extern __m256  __cdecl _mm256_permutevar_ps(__m256 m1, __m256i control);
extern __m128  __cdecl _mm_permutevar_ps(__m128 a, __m128i control);









extern __m256  __cdecl _mm256_permute_ps(__m256 m1, int control);
extern __m128  __cdecl _mm_permute_ps(__m128 a, int control);









extern __m256d __cdecl _mm256_permutevar_pd(__m256d m1, __m256i control);
extern __m128d __cdecl _mm_permutevar_pd(__m128d a, __m128i control);









extern __m256d __cdecl _mm256_permute_pd(__m256d m1, int control);
extern __m128d __cdecl _mm_permute_pd(__m128d a, int control);








extern __m256  __cdecl _mm256_permute2f128_ps(__m256 m1, __m256 m2, int control);
extern __m256d __cdecl _mm256_permute2f128_pd(__m256d m1, __m256d m2, int control);
extern __m256i __cdecl _mm256_permute2f128_si256(__m256i m1, __m256i m2, int control);








extern __m256  __cdecl _mm256_broadcast_ss(float const *a);
extern __m128  __cdecl _mm_broadcast_ss(float const *a);







extern __m256d __cdecl _mm256_broadcast_sd(double const *a);







extern __m256  __cdecl _mm256_broadcast_ps(__m128 const *a);
extern __m256d __cdecl _mm256_broadcast_pd(__m128d const *a);









extern __m256  __cdecl _mm256_insertf128_ps(__m256, __m128 a, int offset);
extern __m256d __cdecl _mm256_insertf128_pd(__m256d, __m128d a, int offset);
extern __m256i __cdecl _mm256_insertf128_si256(__m256i, __m128i a, int offset);








extern __m256d __cdecl _mm256_load_pd(double const *a);
extern void    __cdecl _mm256_store_pd(double *a, __m256d b);








extern __m256  __cdecl _mm256_load_ps(float const *a);
extern void    __cdecl _mm256_store_ps(float *a, __m256 b);








extern __m256d __cdecl _mm256_loadu_pd(double const *a);
extern void    __cdecl _mm256_storeu_pd(double *a, __m256d b);








extern __m256  __cdecl _mm256_loadu_ps(float const *a);
extern void    __cdecl _mm256_storeu_ps(float *a, __m256 b);








extern __m256i __cdecl _mm256_load_si256(__m256i const *a);
extern void    __cdecl _mm256_store_si256(__m256i *a, __m256i b);








extern __m256i __cdecl _mm256_loadu_si256(__m256i const *a);
extern void    __cdecl _mm256_storeu_si256(__m256i *a, __m256i b); 



















extern __m256d __cdecl _mm256_maskload_pd(double const *a, __m256i mask);
extern void    __cdecl _mm256_maskstore_pd(double *a, __m256i mask, __m256d b);
extern __m128d __cdecl _mm_maskload_pd(double const *a, __m128i mask);
extern void    __cdecl _mm_maskstore_pd(double *a, __m128i mask, __m128d b); 



















extern __m256  __cdecl _mm256_maskload_ps(float const *a, __m256i mask);
extern void    __cdecl _mm256_maskstore_ps(float *a, __m256i mask, __m256 b); 
extern __m128  __cdecl _mm_maskload_ps(float const *a, __m128i mask);
extern void    __cdecl _mm_maskstore_ps(float *a, __m128i mask, __m128 b); 







extern __m256  __cdecl _mm256_movehdup_ps(__m256 a);







extern __m256  __cdecl _mm256_moveldup_ps(__m256 a);







extern __m256d __cdecl _mm256_movedup_pd(__m256d a);









extern __m256i __cdecl _mm256_lddqu_si256(__m256i const *a);







extern void    __cdecl _mm256_stream_si256(__m256i *p, __m256i a);








extern void    __cdecl _mm256_stream_pd(double *p, __m256d a);








extern void    __cdecl _mm256_stream_ps(float *p, __m256 a);








extern __m256  __cdecl _mm256_rcp_ps(__m256 a);










extern __m256  __cdecl _mm256_rsqrt_ps(__m256 a);








extern __m256d __cdecl _mm256_sqrt_pd(__m256d a);








extern __m256  __cdecl _mm256_sqrt_ps(__m256 a);












extern __m256d __cdecl _mm256_round_pd(__m256d a, int iRoundMode);














extern __m256  __cdecl _mm256_round_ps(__m256 a, int iRoundMode);









extern __m256d __cdecl _mm256_unpackhi_pd(__m256d m1, __m256d m2);







extern __m256  __cdecl _mm256_unpackhi_ps(__m256 m1, __m256 m2); 







extern __m256d __cdecl _mm256_unpacklo_pd(__m256d m1, __m256d m2);







extern __m256  __cdecl _mm256_unpacklo_ps(__m256 m1, __m256 m2);









extern int     __cdecl _mm256_testz_si256(__m256i s1, __m256i s2);
extern int     __cdecl _mm256_testc_si256(__m256i s1, __m256i s2);
extern int     __cdecl _mm256_testnzc_si256(__m256i s1, __m256i s2);












extern int     __cdecl _mm256_testz_pd(__m256d s1, __m256d s2);
extern int     __cdecl _mm256_testc_pd(__m256d s1, __m256d s2);
extern int     __cdecl _mm256_testnzc_pd(__m256d s1, __m256d s2);
extern int     __cdecl _mm_testz_pd(__m128d s1, __m128d s2);
extern int     __cdecl _mm_testc_pd(__m128d s1, __m128d s2);
extern int     __cdecl _mm_testnzc_pd(__m128d s1, __m128d s2);












extern int     __cdecl _mm256_testz_ps(__m256 s1, __m256 s2);
extern int     __cdecl _mm256_testc_ps(__m256 s1, __m256 s2);
extern int     __cdecl _mm256_testnzc_ps(__m256 s1, __m256 s2);
extern int     __cdecl _mm_testz_ps(__m128 s1, __m128 s2);
extern int     __cdecl _mm_testc_ps(__m128 s1, __m128 s2);
extern int     __cdecl _mm_testnzc_ps(__m128 s1, __m128 s2);








extern int     __cdecl _mm256_movemask_pd(__m256d a);








extern int     __cdecl _mm256_movemask_ps(__m256 a);




extern __m256d __cdecl _mm256_setzero_pd(void);
extern __m256  __cdecl _mm256_setzero_ps(void);
extern __m256i __cdecl _mm256_setzero_si256(void);




extern __m256d __cdecl _mm256_set_pd(double, double, double, double);
extern __m256  __cdecl _mm256_set_ps(float, float, float, float, float, float, float, float);
extern __m256i __cdecl _mm256_set_epi8(char, char, char, char, char, char, char, char,
                                       char, char, char, char, char, char, char, char,
                                       char, char, char, char, char, char, char, char,
                                       char, char, char, char, char, char, char, char);
extern __m256i __cdecl _mm256_set_epi16(short, short, short, short, short, short, short, short,
                                        short, short, short, short, short, short, short, short);
extern __m256i __cdecl _mm256_set_epi32(int, int, int, int, int, int, int, int);
extern __m256i __cdecl _mm256_set_epi64x(long long, long long, long long, long long);

extern __m256d __cdecl _mm256_setr_pd(double, double, double, double);
extern __m256  __cdecl _mm256_setr_ps(float, float, float, float, float, float, float, float);
extern __m256i __cdecl _mm256_setr_epi8(char, char, char, char, char, char, char, char,
                                        char, char, char, char, char, char, char, char,
                                        char, char, char, char, char, char, char, char,
                                        char, char, char, char, char, char, char, char);
extern __m256i __cdecl _mm256_setr_epi16(short, short, short, short, short, short, short, short,
                                         short, short, short, short, short, short, short, short);
extern __m256i __cdecl _mm256_setr_epi32(int, int, int, int, int, int, int, int);
extern __m256i __cdecl _mm256_setr_epi64x(long long, long long, long long, long long);




extern __m256d __cdecl _mm256_set1_pd(double);
extern __m256  __cdecl _mm256_set1_ps(float);
extern __m256i __cdecl _mm256_set1_epi8(char);
extern __m256i __cdecl _mm256_set1_epi16(short);
extern __m256i __cdecl _mm256_set1_epi32(int);
extern __m256i __cdecl _mm256_set1_epi64x(long long);







extern __m256  __cdecl _mm256_castpd_ps(__m256d a);
extern __m256d __cdecl _mm256_castps_pd(__m256 a);
extern __m256i __cdecl _mm256_castps_si256(__m256 a);
extern __m256i __cdecl _mm256_castpd_si256(__m256d a);
extern __m256  __cdecl _mm256_castsi256_ps(__m256i a);
extern __m256d __cdecl _mm256_castsi256_pd(__m256i a);
extern __m128  __cdecl _mm256_castps256_ps128(__m256 a);
extern __m128d __cdecl _mm256_castpd256_pd128(__m256d a);
extern __m128i __cdecl _mm256_castsi256_si128(__m256i a);
extern __m256  __cdecl _mm256_castps128_ps256(__m128 a);
extern __m256d __cdecl _mm256_castpd128_pd256(__m128d a);
extern __m256i __cdecl _mm256_castsi128_si256(__m128i a);







 

extern unsigned __int64 __cdecl _xgetbv(unsigned int ext_ctrl_reg);
 

extern void __cdecl _xsetbv(unsigned int ext_ctrl_reg, unsigned __int64 val);
 
 




extern void __cdecl _xsave(void *mem, unsigned __int64 save_mask);

extern void __cdecl _xsave64(void *mem, unsigned __int64 save_mask);
#line 1094 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\immintrin.h"






extern void __cdecl _xsaveopt(void *mem, unsigned __int64 save_mask);

extern void __cdecl _xsaveopt64(void *mem, unsigned __int64 save_mask);
#line 1104 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\immintrin.h"
 





extern void __cdecl _xrstor(void *mem, unsigned __int64 restore_mask);

extern void __cdecl _xrstor64(void *mem, unsigned __int64 restore_mask);
#line 1114 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\immintrin.h"
 




extern void __cdecl _fxsave(void *mem);

extern void __cdecl _fxsave64(void *mem);
#line 1123 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\immintrin.h"
 




extern void __cdecl _fxrstor(void *mem);

extern void __cdecl _fxrstor64(void *mem);
#line 1132 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\immintrin.h"








}; 
#line 1142 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\immintrin.h"

#line 1144 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\immintrin.h"

#line 1146 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\immintrin.h"
#line 1147 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\immintrin.h"

#line 26 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\intrin.h"
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\ammintrin.h"












#pragma once






#line 21 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\ammintrin.h"


extern "C" { 
#line 25 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\ammintrin.h"





























































































__m128 _mm_macc_ps(__m128, __m128, __m128);
__m128d _mm_macc_pd(__m128d, __m128d, __m128d);
__m128 _mm_macc_ss(__m128, __m128, __m128);
__m128d _mm_macc_sd(__m128d, __m128d, __m128d);
__m128 _mm_maddsub_ps(__m128, __m128, __m128);
__m128d _mm_maddsub_pd(__m128d, __m128d, __m128d);
__m128 _mm_msubadd_ps(__m128, __m128, __m128);
__m128d _mm_msubadd_pd(__m128d, __m128d, __m128d);
__m128 _mm_msub_ps(__m128, __m128, __m128);
__m128d _mm_msub_pd(__m128d, __m128d, __m128d);
__m128 _mm_msub_ss(__m128, __m128, __m128);
__m128d _mm_msub_sd(__m128d, __m128d, __m128d);
__m128 _mm_nmacc_ps(__m128, __m128, __m128);
__m128d _mm_nmacc_pd(__m128d, __m128d, __m128d);
__m128 _mm_nmacc_ss(__m128, __m128, __m128);
__m128d _mm_nmacc_sd(__m128d, __m128d, __m128d);
__m128 _mm_nmsub_ps(__m128, __m128, __m128);
__m128d _mm_nmsub_pd(__m128d, __m128d, __m128d);
__m128 _mm_nmsub_ss(__m128, __m128, __m128);
__m128d _mm_nmsub_sd(__m128d, __m128d, __m128d);


__m128i _mm_maccs_epi16(__m128i, __m128i, __m128i);
__m128i _mm_macc_epi16(__m128i, __m128i, __m128i);
__m128i _mm_maccsd_epi16(__m128i, __m128i, __m128i);
__m128i _mm_maccd_epi16(__m128i, __m128i, __m128i);
__m128i _mm_maccs_epi32(__m128i, __m128i, __m128i);
__m128i _mm_macc_epi32(__m128i, __m128i, __m128i);
__m128i _mm_maccslo_epi32(__m128i, __m128i, __m128i);
__m128i _mm_macclo_epi32(__m128i, __m128i, __m128i);
__m128i _mm_maccshi_epi32(__m128i, __m128i, __m128i);
__m128i _mm_macchi_epi32(__m128i, __m128i, __m128i);
__m128i _mm_maddsd_epi16(__m128i, __m128i, __m128i);
__m128i _mm_maddd_epi16(__m128i, __m128i, __m128i);


__m128i _mm_haddw_epi8(__m128i);
__m128i _mm_haddd_epi8(__m128i);
__m128i _mm_haddq_epi8(__m128i);
__m128i _mm_haddd_epi16(__m128i);
__m128i _mm_haddq_epi16(__m128i);
__m128i _mm_haddq_epi32(__m128i);
__m128i _mm_haddw_epu8(__m128i);
__m128i _mm_haddd_epu8(__m128i);
__m128i _mm_haddq_epu8(__m128i);
__m128i _mm_haddd_epu16(__m128i);
__m128i _mm_haddq_epu16(__m128i);
__m128i _mm_haddq_epu32(__m128i);
__m128i _mm_hsubw_epi8(__m128i);
__m128i _mm_hsubd_epi16(__m128i);
__m128i _mm_hsubq_epi32(__m128i);


__m128i _mm_cmov_si128(__m128i, __m128i, __m128i);
__m128i _mm_perm_epi8(__m128i, __m128i, __m128i);


__m128i _mm_rot_epi8(__m128i, __m128i);
__m128i _mm_rot_epi16(__m128i, __m128i);
__m128i _mm_rot_epi32(__m128i, __m128i);
__m128i _mm_rot_epi64(__m128i, __m128i);
__m128i _mm_roti_epi8(__m128i, int);
__m128i _mm_roti_epi16(__m128i, int);
__m128i _mm_roti_epi32(__m128i, int);
__m128i _mm_roti_epi64(__m128i, int);
__m128i _mm_shl_epi8(__m128i, __m128i);
__m128i _mm_shl_epi16(__m128i, __m128i);
__m128i _mm_shl_epi32(__m128i, __m128i);
__m128i _mm_shl_epi64(__m128i, __m128i);
__m128i _mm_sha_epi8(__m128i, __m128i);
__m128i _mm_sha_epi16(__m128i, __m128i);
__m128i _mm_sha_epi32(__m128i, __m128i);
__m128i _mm_sha_epi64(__m128i, __m128i);



__m128i _mm_com_epu8(__m128i, __m128i, int);
__m128i _mm_com_epu16(__m128i, __m128i, int);
__m128i _mm_com_epu32(__m128i, __m128i, int);
__m128i _mm_com_epu64(__m128i, __m128i, int);
__m128i _mm_com_epi8(__m128i, __m128i, int);
__m128i _mm_com_epi16(__m128i, __m128i, int);
__m128i _mm_com_epi32(__m128i, __m128i, int);
__m128i _mm_com_epi64(__m128i, __m128i, int);



__m128 _mm_frcz_ps(__m128);
__m128d _mm_frcz_pd(__m128d);
__m128 _mm_frcz_ss(__m128, __m128);
__m128d _mm_frcz_sd(__m128d, __m128d);








__m128 _mm_permute2_ps(__m128, __m128, __m128i, int);
__m128d _mm_permute2_pd(__m128d, __m128d, __m128i, int);



__m256 _mm256_macc_ps(__m256, __m256, __m256);
__m256d _mm256_macc_pd(__m256d, __m256d, __m256d);
__m256 _mm256_maddsub_ps(__m256, __m256, __m256);
__m256d _mm256_maddsub_pd(__m256d, __m256d, __m256d);
__m256 _mm256_msubadd_ps(__m256, __m256, __m256);
__m256d _mm256_msubadd_pd(__m256d, __m256d, __m256d);
__m256 _mm256_msub_ps(__m256, __m256, __m256);
__m256d _mm256_msub_pd(__m256d, __m256d, __m256d);
__m256 _mm256_nmacc_ps(__m256, __m256, __m256);
__m256d _mm256_nmacc_pd(__m256d, __m256d, __m256d);
__m256 _mm256_nmsub_ps(__m256, __m256, __m256);
__m256d _mm256_nmsub_pd(__m256d, __m256d, __m256d);
__m256i _mm256_cmov_si256(__m256i, __m256i, __m256i);
__m256 _mm256_frcz_ps(__m256);
__m256d _mm256_frcz_pd(__m256d);
__m256 _mm256_permute2_ps(__m256, __m256, __m256i, int);
__m256d _mm256_permute2_pd(__m256d, __m256d, __m256i, int);


void __llwpcb(void *);
void *__slwpcb();
void __lwpval32(unsigned int, unsigned int, unsigned int);
void __lwpval64(unsigned __int64, unsigned int, unsigned int);
unsigned char __lwpins32(unsigned int, unsigned int, unsigned int);
unsigned char __lwpins64(unsigned __int64, unsigned int, unsigned int);


}; 
#line 251 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\ammintrin.h"

#line 253 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\ammintrin.h"
#line 254 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\ammintrin.h"
#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\ammintrin.h"
#line 27 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\intrin.h"


#line 30 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\intrin.h"



#line 34 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\intrin.h"

#line 36 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\intrin.h"


extern "C" {
#line 40 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\intrin.h"




































#line 77 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\intrin.h"


#line 80 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\intrin.h"






#line 87 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\intrin.h"




#line 92 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\intrin.h"




#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\intrin.h"




#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\intrin.h"




#line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\intrin.h"




#line 112 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\intrin.h"




#line 117 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\intrin.h"








#line 126 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\intrin.h"




#line 131 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\intrin.h"




#line 136 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\intrin.h"
    
#line 138 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\intrin.h"


 void * __cdecl _alloca(size_t _Size);
int __cdecl abs(  int);


 unsigned short __cdecl _byteswap_ushort(  unsigned short value);
 unsigned long __cdecl _byteswap_ulong(  unsigned long value);
 unsigned __int64 __cdecl _byteswap_uint64(  unsigned __int64 value);



__declspec(dllimport) double ceil(  double);













void __cdecl __debugbreak(void);
void __cdecl _disable(void);


__int64 __emul(int,int);
unsigned __int64 __emulu(unsigned int,unsigned int);
void __cdecl _enable(void);


















long __cdecl _InterlockedDecrement(long volatile *);






__int64 _InterlockedDecrement64(__int64 volatile *);
long _InterlockedExchange(long volatile *, long);





__int64 _InterlockedExchange64(__int64 volatile *, __int64);


void * _InterlockedExchangePointer(void * volatile *, void *);
short _InterlockedExchange16(short volatile *, short);
char _InterlockedExchange8(char volatile *, char);
long _InterlockedExchangeAdd(long volatile *, long);






__int64 _InterlockedExchangeAdd64(__int64 volatile *, __int64);
short _InterlockedExchangeAdd16(short volatile *, short);
char _InterlockedExchangeAdd8(char volatile *, char);
long _InterlockedCompareExchange (long volatile *, long, long);












__int64 _InterlockedCompareExchange64(__int64 volatile *, __int64, __int64);
void *_InterlockedCompareExchangePointer (void * volatile *, void *, void *);
long __cdecl _InterlockedIncrement(long volatile *);






__int64 _InterlockedIncrement64(__int64 volatile *);
long _InterlockedOr(long volatile *, long);
char _InterlockedOr8(char volatile *, char);
short _InterlockedOr16(short volatile *, short);
__int64 _InterlockedOr64(__int64 volatile *, __int64);








long _InterlockedXor(long volatile *, long);
char _InterlockedXor8(char volatile *, char);
short _InterlockedXor16(short volatile *, short);
__int64 _InterlockedXor64(__int64 volatile *, __int64);








long _InterlockedAnd(long volatile *, long);
char _InterlockedAnd8(char volatile *, char);
short _InterlockedAnd16(short volatile *, short);
__int64 _InterlockedAnd64(__int64 volatile *, __int64);









int __cdecl _inp(unsigned short);
int __cdecl inp(unsigned short);
unsigned long __cdecl _inpd(unsigned short);
unsigned long __cdecl inpd(unsigned short);
unsigned short __cdecl _inpw(unsigned short);
unsigned short __cdecl inpw(unsigned short);







long __cdecl labs(  long);







 unsigned long __cdecl _lrotl(  unsigned long,  int);
 unsigned long __cdecl _lrotr(  unsigned long,  int);
unsigned __int64 __ll_lshift(unsigned __int64,int);
__int64 __ll_rshift(__int64,int);







































 int __cdecl memcmp(   const void *,   const void *,  size_t _Size);
void * __cdecl memcpy(    void *,   const void *,  size_t _Size);
void * __cdecl memset(    void *,  int,  size_t _Size);




int __cdecl _outp(unsigned short,int);
int __cdecl outp(unsigned short,int);
unsigned long __cdecl _outpd(unsigned short,unsigned long);
unsigned long __cdecl outpd(unsigned short,unsigned long);
unsigned short __cdecl _outpw(unsigned short,unsigned short);
unsigned short __cdecl outpw(unsigned short,unsigned short);











void * _ReturnAddress(void);



 unsigned int __cdecl _rotl(  unsigned int,  int);

 unsigned int __cdecl _rotr(  unsigned int,  int);



int __cdecl _setjmp(jmp_buf);

int __cdecl _setjmpex(jmp_buf);









 int __cdecl strcmp(   const char *,   const char *);
 size_t __cdecl strlen(   const char *);

char * __cdecl strset(    char *,  int);







unsigned __int64 __ull_rshift(unsigned __int64,int);






void * _AddressOfReturnAddress(void);



















































































__m128 _mm_add_ss(__m128,__m128);
__m128 _mm_add_ps(__m128,__m128);
__m128 _mm_sub_ss(__m128,__m128);
__m128 _mm_sub_ps(__m128,__m128);
__m128 _mm_mul_ss(__m128,__m128);
__m128 _mm_mul_ps(__m128,__m128);
__m128 _mm_div_ss(__m128,__m128);
__m128 _mm_div_ps(__m128,__m128);
__m128 _mm_sqrt_ss(__m128);
__m128 _mm_sqrt_ps(__m128);
__m128 _mm_rcp_ss(__m128);
__m128 _mm_rcp_ps(__m128);
__m128 _mm_rsqrt_ss(__m128);
__m128 _mm_rsqrt_ps(__m128);
__m128 _mm_min_ss(__m128,__m128);
__m128 _mm_min_ps(__m128,__m128);
__m128 _mm_max_ss(__m128,__m128);
__m128 _mm_max_ps(__m128,__m128);
__m128 _mm_and_ps(__m128,__m128);
__m128 _mm_andnot_ps(__m128,__m128);
__m128 _mm_or_ps(__m128,__m128);
__m128 _mm_xor_ps(__m128,__m128);
__m128 _mm_cmpeq_ss(__m128,__m128);
__m128 _mm_cmpeq_ps(__m128,__m128);
__m128 _mm_cmplt_ss(__m128,__m128);
__m128 _mm_cmplt_ps(__m128,__m128);
__m128 _mm_cmple_ss(__m128,__m128);
__m128 _mm_cmple_ps(__m128,__m128);
__m128 _mm_cmpgt_ss(__m128,__m128);
__m128 _mm_cmpgt_ps(__m128,__m128);
__m128 _mm_cmpge_ss(__m128,__m128);
__m128 _mm_cmpge_ps(__m128,__m128);
__m128 _mm_cmpneq_ss(__m128,__m128);
__m128 _mm_cmpneq_ps(__m128,__m128);
__m128 _mm_cmpnlt_ss(__m128,__m128);
__m128 _mm_cmpnlt_ps(__m128,__m128);
__m128 _mm_cmpnle_ss(__m128,__m128);
__m128 _mm_cmpnle_ps(__m128,__m128);
__m128 _mm_cmpngt_ss(__m128,__m128);
__m128 _mm_cmpngt_ps(__m128,__m128);
__m128 _mm_cmpnge_ss(__m128,__m128);
__m128 _mm_cmpnge_ps(__m128,__m128);
__m128 _mm_cmpord_ss(__m128,__m128);
__m128 _mm_cmpord_ps(__m128,__m128);
__m128 _mm_cmpunord_ss(__m128,__m128);
__m128 _mm_cmpunord_ps(__m128,__m128);
int _mm_comieq_ss(__m128,__m128);
int _mm_comilt_ss(__m128,__m128);
int _mm_comile_ss(__m128,__m128);
int _mm_comigt_ss(__m128,__m128);
int _mm_comige_ss(__m128,__m128);
int _mm_comineq_ss(__m128,__m128);
int _mm_ucomieq_ss(__m128,__m128);
int _mm_ucomilt_ss(__m128,__m128);
int _mm_ucomile_ss(__m128,__m128);
int _mm_ucomigt_ss(__m128,__m128);
int _mm_ucomige_ss(__m128,__m128);
int _mm_ucomineq_ss(__m128,__m128);
int _mm_cvt_ss2si(__m128);

int _mm_cvtt_ss2si(__m128);

__m128 _mm_cvt_si2ss(__m128,int);

__m128 _mm_shuffle_ps(__m128,__m128,unsigned int);
__m128 _mm_unpackhi_ps(__m128,__m128);
__m128 _mm_unpacklo_ps(__m128,__m128);
__m128 _mm_loadh_pi(__m128,__m64 const*);
void _mm_storeh_pi(__m64*,__m128);
__m128 _mm_loadl_pi(__m128,__m64 const*);
void _mm_storel_pi(__m64*,__m128);
int _mm_movemask_ps(__m128);
__m128 _mm_set_ss(float);
__m128 _mm_set_ps1(float);
__m128 _mm_set_ps(float,float,float,float);
__m128 _mm_setr_ps(float,float,float,float);
__m128 _mm_setzero_ps(void);
__m128 _mm_load_ss(float const*);
__m128 _mm_load_ps1(float const*);
__m128 _mm_load_ps(float const*);
__m128 _mm_loadr_ps(float const*);
__m128 _mm_loadu_ps(float const*);
__m128 _mm_move_ss(__m128,__m128);
void _mm_store_ss(float*,__m128);
void _mm_store_ps1(float*,__m128);
void _mm_store_ps(float*,__m128);
void _mm_storer_ps(float*,__m128);
void _mm_storeu_ps(float*,__m128);
void _mm_prefetch(char const*,int);

void _mm_stream_ps(float*,__m128);
void _mm_sfence(void);
unsigned int _mm_getcsr(void);
void _mm_setcsr(unsigned int);
__m128 _mm_movelh_ps(__m128,__m128);
__m128 _mm_movehl_ps(__m128,__m128);
void _m_prefetch(void*);
void _m_prefetchw(volatile const void*_Source);

























__m128d _mm_add_sd(__m128d,__m128d);
__m128d _mm_add_pd(__m128d,__m128d);
__m128d _mm_div_sd(__m128d,__m128d);
__m128d _mm_div_pd(__m128d,__m128d);
__m128d _mm_max_sd(__m128d,__m128d);
__m128d _mm_max_pd(__m128d,__m128d);
__m128d _mm_min_sd(__m128d,__m128d);
__m128d _mm_min_pd(__m128d,__m128d);
__m128d _mm_mul_sd(__m128d,__m128d);
__m128d _mm_mul_pd(__m128d,__m128d);
__m128d _mm_sqrt_sd(__m128d, __m128d);
__m128d _mm_sqrt_pd(__m128d);
__m128d _mm_sub_sd(__m128d,__m128d);
__m128d _mm_sub_pd(__m128d,__m128d);
__m128d _mm_and_pd(__m128d,__m128d);
__m128d _mm_andnot_pd(__m128d,__m128d);
__m128d _mm_or_pd(__m128d,__m128d);
__m128d _mm_xor_pd(__m128d,__m128d);
__m128d _mm_cmpeq_sd(__m128d,__m128d);
__m128d _mm_cmpeq_pd(__m128d,__m128d);
__m128d _mm_cmplt_sd(__m128d,__m128d);
__m128d _mm_cmplt_pd(__m128d,__m128d);
__m128d _mm_cmple_sd(__m128d,__m128d);
__m128d _mm_cmple_pd(__m128d,__m128d);
__m128d _mm_cmpgt_sd(__m128d,__m128d);
__m128d _mm_cmpgt_pd(__m128d,__m128d);
__m128d _mm_cmpge_sd(__m128d,__m128d);
__m128d _mm_cmpge_pd(__m128d,__m128d);
__m128d _mm_cmpneq_sd(__m128d,__m128d);
__m128d _mm_cmpneq_pd(__m128d,__m128d);
__m128d _mm_cmpnlt_sd(__m128d,__m128d);
__m128d _mm_cmpnlt_pd(__m128d,__m128d);
__m128d _mm_cmpnle_sd(__m128d,__m128d);
__m128d _mm_cmpnle_pd(__m128d,__m128d);
__m128d _mm_cmpngt_sd(__m128d,__m128d);
__m128d _mm_cmpngt_pd(__m128d,__m128d);
__m128d _mm_cmpnge_sd(__m128d,__m128d);
__m128d _mm_cmpnge_pd(__m128d,__m128d);
__m128d _mm_cmpord_sd(__m128d,__m128d);
__m128d _mm_cmpord_pd(__m128d,__m128d);
__m128d _mm_cmpunord_sd(__m128d,__m128d);
__m128d _mm_cmpunord_pd(__m128d,__m128d);
int _mm_comieq_sd(__m128d,__m128d);
int _mm_comilt_sd(__m128d,__m128d);
int _mm_comile_sd(__m128d,__m128d);
int _mm_comigt_sd(__m128d,__m128d);
int _mm_comige_sd(__m128d,__m128d);
int _mm_comineq_sd(__m128d,__m128d);
int _mm_ucomieq_sd(__m128d,__m128d);
int _mm_ucomilt_sd(__m128d,__m128d);
int _mm_ucomile_sd(__m128d,__m128d);
int _mm_ucomigt_sd(__m128d,__m128d);
int _mm_ucomige_sd(__m128d,__m128d);
int _mm_ucomineq_sd(__m128d,__m128d);
__m128 _mm_cvtpd_ps(__m128d);
__m128d _mm_cvtps_pd(__m128);
__m128d _mm_cvtepi32_pd(__m128i);
__m128i _mm_cvtpd_epi32(__m128d);
int _mm_cvtsd_si32(__m128d);
__m128 _mm_cvtsd_ss(__m128,__m128d);
__m128d _mm_cvtsi32_sd(__m128d,int);
__m128d _mm_cvtss_sd(__m128d,__m128);
__m128i _mm_cvttpd_epi32(__m128d);
int _mm_cvttsd_si32(__m128d);
__m128 _mm_cvtepi32_ps(__m128i);
__m128i _mm_cvtps_epi32(__m128);
__m128i _mm_cvttps_epi32(__m128);



__m128d _mm_unpackhi_pd(__m128d,__m128d);
__m128d _mm_unpacklo_pd(__m128d,__m128d);
int _mm_movemask_pd(__m128d);
__m128d _mm_shuffle_pd(__m128d,__m128d,int);
__m128d _mm_load_pd(double const*);
__m128d _mm_load1_pd(double const*);
__m128d _mm_loadr_pd(double const*);
__m128d _mm_loadu_pd(double const*);
__m128d _mm_load_sd(double const*);
__m128d _mm_loadh_pd(__m128d,double const*);
__m128d _mm_loadl_pd(__m128d,double const*);
__m128d _mm_set_sd(double);
__m128d _mm_set1_pd(double);
__m128d _mm_set_pd(double,double);
__m128d _mm_setr_pd(double,double);
__m128d _mm_setzero_pd(void);
__m128d _mm_move_sd(__m128d,__m128d);
void _mm_store_sd(double*,__m128d);
void _mm_store1_pd(double*,__m128d);
void _mm_store_pd(double*,__m128d);
void _mm_storeu_pd(double*,__m128d);
void _mm_storer_pd(double*,__m128d);
void _mm_storeh_pd(double*,__m128d);
void _mm_storel_pd(double*,__m128d);
__m128i _mm_add_epi8(__m128i,__m128i);
__m128i _mm_add_epi16(__m128i,__m128i);
__m128i _mm_add_epi32(__m128i,__m128i);

__m128i _mm_add_epi64(__m128i,__m128i);
__m128i _mm_adds_epi8(__m128i,__m128i);
__m128i _mm_adds_epi16(__m128i,__m128i);
__m128i _mm_adds_epu8(__m128i,__m128i);
__m128i _mm_adds_epu16(__m128i,__m128i);
__m128i _mm_avg_epu8(__m128i,__m128i);
__m128i _mm_avg_epu16(__m128i,__m128i);
__m128i _mm_madd_epi16(__m128i,__m128i);
__m128i _mm_max_epi16(__m128i,__m128i);
__m128i _mm_max_epu8(__m128i,__m128i);
__m128i _mm_min_epi16(__m128i,__m128i);
__m128i _mm_min_epu8(__m128i,__m128i);
__m128i _mm_mulhi_epi16(__m128i,__m128i);
__m128i _mm_mulhi_epu16(__m128i,__m128i);
__m128i _mm_mullo_epi16(__m128i,__m128i);

__m128i _mm_mul_epu32(__m128i,__m128i);
__m128i _mm_sad_epu8(__m128i,__m128i);
__m128i _mm_sub_epi8(__m128i,__m128i);
__m128i _mm_sub_epi16(__m128i,__m128i);
__m128i _mm_sub_epi32(__m128i,__m128i);

__m128i _mm_sub_epi64(__m128i,__m128i);
__m128i _mm_subs_epi8(__m128i,__m128i);
__m128i _mm_subs_epi16(__m128i,__m128i);
__m128i _mm_subs_epu8(__m128i,__m128i);
__m128i _mm_subs_epu16(__m128i,__m128i);
__m128i _mm_andnot_si128(__m128i,__m128i);
__m128i _mm_and_si128(__m128i,__m128i);
__m128i _mm_or_si128(__m128i,__m128i);
__m128i _mm_xor_si128(__m128i,__m128i);
__m128i _mm_slli_si128(__m128i,int);
__m128i _mm_slli_epi16(__m128i,int);
__m128i _mm_sll_epi16(__m128i,__m128i);
__m128i _mm_slli_epi32(__m128i,int);
__m128i _mm_sll_epi32(__m128i,__m128i);
__m128i _mm_slli_epi64(__m128i,int);
__m128i _mm_sll_epi64(__m128i,__m128i);
__m128i _mm_srai_epi16(__m128i,int);
__m128i _mm_sra_epi16(__m128i,__m128i);
__m128i _mm_srai_epi32(__m128i,int);
__m128i _mm_sra_epi32(__m128i,__m128i);
__m128i _mm_srli_si128(__m128i,int);
__m128i _mm_srli_epi16(__m128i,int);
__m128i _mm_srl_epi16(__m128i,__m128i);
__m128i _mm_srli_epi32(__m128i,int);
__m128i _mm_srl_epi32(__m128i,__m128i);
__m128i _mm_srli_epi64(__m128i,int);
__m128i _mm_srl_epi64(__m128i,__m128i);
__m128i _mm_cmpeq_epi8(__m128i,__m128i);
__m128i _mm_cmpeq_epi16(__m128i,__m128i);
__m128i _mm_cmpeq_epi32(__m128i,__m128i);
__m128i _mm_cmpgt_epi8(__m128i,__m128i);
__m128i _mm_cmpgt_epi16(__m128i,__m128i);
__m128i _mm_cmpgt_epi32(__m128i,__m128i);
__m128i _mm_cmplt_epi8(__m128i,__m128i);
__m128i _mm_cmplt_epi16(__m128i,__m128i);
__m128i _mm_cmplt_epi32(__m128i,__m128i);
__m128i _mm_cvtsi32_si128(int);
int _mm_cvtsi128_si32(__m128i);
__m128i _mm_packs_epi16(__m128i,__m128i);
__m128i _mm_packs_epi32(__m128i,__m128i);
__m128i _mm_packus_epi16(__m128i,__m128i);
int _mm_extract_epi16(__m128i,int);
__m128i _mm_insert_epi16(__m128i,int,int);
int _mm_movemask_epi8(__m128i);
__m128i _mm_shuffle_epi32(__m128i,int);
__m128i _mm_shufflehi_epi16(__m128i,int);
__m128i _mm_shufflelo_epi16(__m128i,int);
__m128i _mm_unpackhi_epi8(__m128i,__m128i);
__m128i _mm_unpackhi_epi16(__m128i,__m128i);
__m128i _mm_unpackhi_epi32(__m128i,__m128i);
__m128i _mm_unpackhi_epi64(__m128i,__m128i);
__m128i _mm_unpacklo_epi8(__m128i,__m128i);
__m128i _mm_unpacklo_epi16(__m128i,__m128i);
__m128i _mm_unpacklo_epi32(__m128i,__m128i);
__m128i _mm_unpacklo_epi64(__m128i,__m128i);
__m128i _mm_load_si128(__m128i const*);
__m128i _mm_loadu_si128(__m128i const*);
__m128i _mm_loadl_epi64(__m128i const*);

__m128i _mm_set_epi32(int,int,int,int);
__m128i _mm_set_epi16(short,short,short,short,short,short,short,short);
__m128i _mm_set_epi8(char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char);

__m128i _mm_set1_epi32(int);
__m128i _mm_set1_epi16(short);
__m128i _mm_set1_epi8(char);
__m128i _mm_setl_epi64(__m128i);

__m128i _mm_setr_epi32(int,int,int,int);
__m128i _mm_setr_epi16(short,short,short,short,short,short,short,short);
__m128i _mm_setr_epi8(char,char,char,char,char,char,char,char,char,char,char,char,char,char,char,char);
__m128i _mm_setzero_si128(void);
void _mm_store_si128(__m128i*,__m128i);
void _mm_storeu_si128(__m128i*,__m128i);
void _mm_storel_epi64(__m128i*,__m128i);
void _mm_maskmoveu_si128(__m128i,__m128i,char*);
__m128i _mm_move_epi64(__m128i);


void _mm_stream_pd(double*,__m128d);
void _mm_stream_si128(__m128i*,__m128i);
void _mm_clflush(void const *);
void _mm_lfence(void);
void _mm_mfence(void);
void _mm_stream_si32(int*,int);
void _mm_pause(void);
__m128 _mm_addsub_ps(__m128,__m128);
__m128d _mm_addsub_pd(__m128d,__m128d);
__m128 _mm_hadd_ps(__m128,__m128);
__m128d _mm_hadd_pd(__m128d,__m128d);
__m128 _mm_hsub_ps(__m128,__m128);
__m128d _mm_hsub_pd(__m128d,__m128d);
__m128i _mm_lddqu_si128(__m128i const*);
void _mm_monitor(void const*,unsigned int,unsigned int);
__m128d _mm_movedup_pd(__m128d);
__m128d _mm_loaddup_pd(double const*);
__m128 _mm_movehdup_ps(__m128);
__m128 _mm_moveldup_ps(__m128);
void _mm_mwait(unsigned int,unsigned int);
__m128i _mm_hadd_epi16 (__m128i a, __m128i b);
__m128i _mm_hadd_epi32 (__m128i a, __m128i b);
__m128i _mm_hadds_epi16 (__m128i a, __m128i b);
__m64 _mm_hadd_pi16 (__m64 a, __m64 b);
__m64 _mm_hadd_pi32 (__m64 a, __m64 b);
__m64 _mm_hadds_pi16 (__m64 a, __m64 b);
__m128i _mm_hsub_epi16 (__m128i a, __m128i b);
__m128i _mm_hsub_epi32 (__m128i a, __m128i b);
__m128i _mm_hsubs_epi16 (__m128i a, __m128i b);
__m64 _mm_hsub_pi16 (__m64 a, __m64 b);
__m64 _mm_hsub_pi32 (__m64 a, __m64 b);
__m64 _mm_hsubs_pi16 (__m64 a, __m64 b);
__m128i _mm_maddubs_epi16 (__m128i a, __m128i b);
__m64 _mm_maddubs_pi16 (__m64 a, __m64 b);
__m128i _mm_mulhrs_epi16 (__m128i a, __m128i b);
__m64 _mm_mulhrs_pi16 (__m64 a, __m64 b);
__m128i _mm_shuffle_epi8 (__m128i a, __m128i b);
__m64 _mm_shuffle_pi8 (__m64 a, __m64 b);
__m128i _mm_sign_epi8 (__m128i a, __m128i b);
__m128i _mm_sign_epi16 (__m128i a, __m128i b);
__m128i _mm_sign_epi32 (__m128i a, __m128i b);
__m64 _mm_sign_pi8 (__m64 a, __m64 b);
__m64 _mm_sign_pi16 (__m64 a, __m64 b);
__m64 _mm_sign_pi32 (__m64 a, __m64 b);
__m128i _mm_alignr_epi8 (__m128i a, __m128i b, int n);
__m64 _mm_alignr_pi8 (__m64 a, __m64 b, int n);
__m128i _mm_abs_epi8 (__m128i a);
__m128i _mm_abs_epi16 (__m128i a);
__m128i _mm_abs_epi32 (__m128i a);
__m64 _mm_abs_pi8 (__m64 a);
__m64 _mm_abs_pi16 (__m64 a);
__m64 _mm_abs_pi32 (__m64 a);
__int64 _mm_cvtss_si64(__m128 _A);
__int64 _mm_cvttss_si64(__m128 _A);
__m128 _mm_cvtsi64_ss(__m128 _A, __int64 _B);
__int64 _mm_cvtsd_si64(__m128d);
__int64 _mm_cvttsd_si64(__m128d);
__m128d _mm_cvtsi64_sd(__m128d, __int64);
__m128i _mm_cvtsi64_si128(__int64);
__int64 _mm_cvtsi128_si64(__m128i);
__m128i _mm_blend_epi16 (__m128i v1, __m128i v2, const int mask);
__m128i _mm_blendv_epi8 (__m128i v1, __m128i v2, __m128i mask);
__m128 _mm_blend_ps (__m128 v1, __m128 v2, const int mask);
__m128 _mm_blendv_ps(__m128 v1, __m128 v2, __m128 v3);
__m128d _mm_blend_pd (__m128d v1, __m128d v2, const int mask);
__m128d _mm_blendv_pd(__m128d v1, __m128d v2, __m128d v3);
__m128 _mm_dp_ps(__m128 val1, __m128 val2, const int mask);
__m128d _mm_dp_pd(__m128d val1, __m128d val2, const int mask);
__m128i _mm_cmpeq_epi64(__m128i val1, __m128i val2);
__m128i _mm_min_epi8 (__m128i val1, __m128i val2);
__m128i _mm_max_epi8 (__m128i val1, __m128i val2);
__m128i _mm_min_epu16(__m128i val1, __m128i val2);
__m128i _mm_max_epu16(__m128i val1, __m128i val2);
__m128i _mm_min_epi32(__m128i val1, __m128i val2);
__m128i _mm_max_epi32(__m128i val1, __m128i val2);
__m128i _mm_min_epu32(__m128i val1, __m128i val2);
__m128i _mm_max_epu32(__m128i val1, __m128i val2);
__m128i _mm_mullo_epi32(__m128i a, __m128i b);
__m128i _mm_mul_epi32(__m128i a, __m128i b);
int _mm_testz_si128(__m128i mask, __m128i val);
int _mm_testc_si128(__m128i mask, __m128i val);
int _mm_testnzc_si128(__m128i mask, __m128i s2);
__m128 _mm_insert_ps(__m128 dst, __m128 src, const int ndx);
int _mm_extract_ps(__m128 src, const int ndx);
__m128i _mm_insert_epi8 (__m128i dst, int s, const int ndx);
__m128i _mm_insert_epi32(__m128i dst, int s, const int ndx);
int _mm_extract_epi8 (__m128i src, const int ndx);
int _mm_extract_epi32(__m128i src, const int ndx);
__m128i _mm_minpos_epu16(__m128i shortValues);
__m128d _mm_round_pd(__m128d val, int iRoundMode);
__m128d _mm_round_sd(__m128d dst, __m128d val, int iRoundMode);
__m128 _mm_round_ps(__m128 val, int iRoundMode);
__m128 _mm_round_ss(__m128 dst, __m128 val, int iRoundMode);
__m128i _mm_cvtepi8_epi32 (__m128i byteValues);
__m128i _mm_cvtepi16_epi32(__m128i shortValues);
__m128i _mm_cvtepi8_epi64 (__m128i byteValues);
__m128i _mm_cvtepi32_epi64(__m128i intValues);
__m128i _mm_cvtepi16_epi64(__m128i shortValues);
__m128i _mm_cvtepi8_epi16 (__m128i byteValues);
__m128i _mm_cvtepu8_epi32 (__m128i byteValues);
__m128i _mm_cvtepu16_epi32(__m128i shortValues);
__m128i _mm_cvtepu8_epi64 (__m128i shortValues);
__m128i _mm_cvtepu32_epi64(__m128i intValues);
__m128i _mm_cvtepu16_epi64(__m128i shortValues);
__m128i _mm_cvtepu8_epi16 (__m128i byteValues);
__m128i _mm_packus_epi32(__m128i val1, __m128i val2);
__m128i _mm_mpsadbw_epu8(__m128i s1, __m128i s2, const int msk);
__m128i _mm_stream_load_si128(__m128i* v1);
__m128i _mm_insert_epi64(__m128i dst, __int64 s, const int ndx);
__int64 _mm_extract_epi64(__m128i src, const int ndx);
__m128i _mm_cmpistrm (__m128i a, __m128i b, const int mode);
int _mm_cmpistri (__m128i a, __m128i b, const int mode);
__m128i _mm_cmpestrm (__m128i a, int la, __m128i b, int lb, const int mode);
int _mm_cmpestri (__m128i a, int la, __m128i b, int lb, const int mode);
int _mm_cmpistrz (__m128i a, __m128i b, const int mode);
int _mm_cmpistrc (__m128i a, __m128i b, const int mode);
int _mm_cmpistrs (__m128i a, __m128i b, const int mode);
int _mm_cmpistro (__m128i a, __m128i b, const int mode);
int _mm_cmpistra (__m128i a, __m128i b, const int mode);
int _mm_cmpestrz (__m128i a, int la, __m128i b, int lb, const int mode);
int _mm_cmpestrc (__m128i a, int la, __m128i b, int lb, const int mode);
int _mm_cmpestrs (__m128i a, int la, __m128i b, int lb, const int mode);
int _mm_cmpestro (__m128i a, int la, __m128i b, int lb, const int mode);
int _mm_cmpestra (__m128i a, int la, __m128i b, int lb, const int mode);
__m128i _mm_cmpgt_epi64(__m128i val1, __m128i val2);
int _mm_popcnt_u32(unsigned int v);
__int64 _mm_popcnt_u64(unsigned __int64 v);
unsigned int _mm_crc32_u8 (unsigned int crc, unsigned char v);
unsigned int _mm_crc32_u16(unsigned int crc, unsigned short v);
unsigned int _mm_crc32_u32(unsigned int crc, unsigned int v);
unsigned __int64 _mm_crc32_u64(unsigned __int64 crc, unsigned __int64 v);
void _WriteBarrier(void);
void _ReadWriteBarrier(void);


void __faststorefence(void);
__int64 __mulh(__int64,__int64);
unsigned __int64 __umulh(unsigned __int64,unsigned __int64);
unsigned __int64 __readcr0(void);
unsigned __int64 __readcr2(void);
unsigned __int64 __readcr3(void);
unsigned __int64 __readcr4(void);
unsigned __int64 __readcr8(void);





void __writecr0(unsigned __int64);
void __writecr3(unsigned __int64);
void __writecr4(unsigned __int64);
void __writecr8(unsigned __int64);




unsigned __int64 __readdr(unsigned int);

void __writedr(unsigned int, unsigned __int64);

unsigned __int64 __readeflags(void);

void __writeeflags(unsigned __int64);

void __wbinvd(void);
void __invlpg(void*);
unsigned __int64 __readmsr(unsigned long);
void __writemsr(unsigned long, unsigned __int64);
unsigned __int64 __rdtsc(void);
void __movsb(unsigned char *, unsigned char const *, size_t);
void __movsw(unsigned short *, unsigned short const *, size_t);
void __movsd(unsigned long *, unsigned long const *, size_t);
void __movsq(unsigned long long *, unsigned long long const *, size_t);
unsigned char __readgsbyte(unsigned long Offset);
unsigned short __readgsword(unsigned long Offset);
unsigned long __readgsdword(unsigned long Offset);
unsigned __int64 __readgsqword(unsigned long Offset);
void __writegsbyte(unsigned long Offset, unsigned char Data);
void __writegsword(unsigned long Offset, unsigned short Data);
void __writegsdword(unsigned long Offset, unsigned long Data);
void __writegsqword(unsigned long Offset, unsigned __int64 Data);






void __addgsbyte(unsigned long Offset, unsigned char Data);
void __addgsword(unsigned long Offset, unsigned short Data);
void __addgsdword(unsigned long Offset, unsigned long Data);
void __addgsqword(unsigned long Offset, unsigned __int64 Data);
void __incgsbyte(unsigned long Offset);
void __incgsword(unsigned long Offset);
void __incgsdword(unsigned long Offset);
void __incgsqword(unsigned long Offset);
unsigned char __inbyte(unsigned short Port);
unsigned short __inword(unsigned short Port);
unsigned long __indword(unsigned short Port);
void __outbyte(unsigned short Port, unsigned char Data);
void __outword(unsigned short Port, unsigned short Data);
void __outdword(unsigned short Port, unsigned long Data);
void __inbytestring(unsigned short Port, unsigned char *Buffer, unsigned long Count);
void __inwordstring(unsigned short Port, unsigned short *Buffer, unsigned long Count);
void __indwordstring(unsigned short Port, unsigned long *Buffer, unsigned long Count);
void __outbytestring(unsigned short Port, unsigned char *Buffer, unsigned long Count);
void __outwordstring(unsigned short Port, unsigned short *Buffer, unsigned long Count);
void __outdwordstring(unsigned short Port, unsigned long *Buffer, unsigned long Count);
unsigned int __getcallerseflags();
unsigned char __vmx_vmclear(unsigned __int64*);
unsigned char __vmx_vmlaunch(void);
unsigned char __vmx_vmptrld(unsigned __int64*);
void __vmx_vmptrst(unsigned __int64 *);
unsigned char __vmx_vmread(size_t, size_t*);
unsigned char __vmx_vmresume(void);
unsigned char __vmx_vmwrite(size_t, size_t);
void __vmx_off(void);
unsigned char __vmx_on(unsigned __int64*);
void __svm_clgi(void);
void __svm_invlpga(void*, int);
void __svm_skinit(int);
void __svm_stgi(void);
void __svm_vmload(size_t);
void __svm_vmrun(size_t);
void __svm_vmsave(size_t);
void __halt(void);
void __sidt(void*);
void __lidt(void*);
void __ud2(void);
void __nop(void);
__m128i _mm_set_epi64x(__int64 i1, __int64 i0);
__m128i _mm_set1_epi64x(__int64 i);
__int64 _mm_cvtsd_si64x(__m128d a);
__m128d _mm_cvtsi64x_sd(__m128d a, __int64 b);
__m128 _mm_cvtsi64x_ss(__m128 a, __int64 b);
__int64 _mm_cvtss_si64x(__m128 a);
__int64 _mm_cvttsd_si64x(__m128d a);
__int64 _mm_cvttss_si64x(__m128 a);
__m128i _mm_cvtsi64x_si128(__int64 a);
__int64 _mm_cvtsi128_si64x(__m128i a);
void _mm_stream_si64x(__int64 *,__int64);
void __stosb(unsigned char *, unsigned char, size_t);
void __stosw(unsigned short *, unsigned short, size_t);
void __stosd(unsigned long *, unsigned long, size_t);
void __stosq(unsigned __int64 *, unsigned __int64, size_t);
unsigned char _bittest(long const *a, long b);
unsigned char _bittestandset(long *a, long b);
unsigned char _bittestandreset(long *a, long b);
unsigned char _bittestandcomplement(long *a, long b);
unsigned char _interlockedbittestandset(long volatile *a, long b);
unsigned char _interlockedbittestandreset(long volatile *a, long b);
unsigned char _bittest64(__int64 const *a, __int64 b);
unsigned char _bittestandset64(__int64 *a, __int64 b);
unsigned char _bittestandreset64(__int64 *a, __int64 b);
unsigned char _bittestandcomplement64(__int64 *a, __int64 b);
unsigned char _interlockedbittestandset64(__int64 volatile *a, __int64 b);
unsigned char _interlockedbittestandreset64(__int64 volatile *a, __int64 b);
void __cpuid(int a[4], int b);
void __cpuidex(int a[4], int b, int c);
unsigned __int64 __readpmc(unsigned long a);
unsigned long __segmentlimit(unsigned long a);











 unsigned __int64 __cdecl _rotl64(  unsigned __int64,  int);
 unsigned __int64 __cdecl _rotr64(  unsigned __int64,  int);
__int64 __cdecl _abs64(__int64);

unsigned char _BitScanForward(unsigned long* Index, unsigned long Mask);
unsigned char _BitScanReverse(unsigned long* Index, unsigned long Mask);
unsigned char _BitScanForward64(unsigned long* Index, unsigned __int64 Mask);
unsigned char _BitScanReverse64(unsigned long* Index, unsigned __int64 Mask);
__declspec(dllimport) wchar_t * __cdecl wcscat(      wchar_t *,    const wchar_t * _Source);
 __declspec(dllimport) int __cdecl wcscmp(   const wchar_t *,   const wchar_t *);
__declspec(dllimport) wchar_t * __cdecl wcscpy(   wchar_t *,    const wchar_t * _Source);
 __declspec(dllimport) size_t __cdecl wcslen(   const wchar_t *);
#pragma warning(suppress: 4985)
__declspec(dllimport) wchar_t * __cdecl _wcsset(    wchar_t *, wchar_t);
unsigned __int64 __shiftleft128(unsigned __int64 LowPart, unsigned __int64 HighPart, unsigned char Shift);
unsigned __int64 __shiftright128(unsigned __int64 LowPart, unsigned __int64 HighPart, unsigned char Shift);
unsigned __int64 _umul128(unsigned __int64 multiplier, unsigned __int64 multiplicand, unsigned __int64 *highproduct);
__int64 _mul128(__int64 multiplier, __int64 multiplicand, __int64 *highproduct);
void __int2c(void);
void _ReadBarrier(void);
unsigned char _rotr8(unsigned char value, unsigned char shift);
unsigned short _rotr16(unsigned short value, unsigned char shift);
unsigned char _rotl8(unsigned char value, unsigned char shift);
unsigned short _rotl16(unsigned short value, unsigned char shift);
short _InterlockedIncrement16(short volatile *Addend);
short _InterlockedDecrement16(short volatile *Addend);
short _InterlockedCompareExchange16(short volatile *Destination, short Exchange, short Comparand);
char _InterlockedCompareExchange8(char volatile *Destination, char Exchange, char Comparand);
























































































































































void __nvreg_save_fence(void);
void __nvreg_restore_fence(void);

short _InterlockedCompareExchange16_np(short volatile *Destination, short Exchange, short Comparand);
long _InterlockedCompareExchange_np (long volatile *, long, long);
__int64 _InterlockedCompareExchange64_np(__int64 volatile *, __int64, __int64);
void *_InterlockedCompareExchangePointer_np (void * volatile *, void *, void *);
unsigned char _InterlockedCompareExchange128(__int64 volatile *, __int64, __int64, __int64 *);
unsigned char _InterlockedCompareExchange128_np(__int64 volatile *, __int64, __int64, __int64 *);
long _InterlockedAnd_np(long volatile *, long);
char _InterlockedAnd8_np(char volatile *, char);
short _InterlockedAnd16_np(short volatile *, short);
__int64 _InterlockedAnd64_np(__int64 volatile *, __int64);
long _InterlockedOr_np(long volatile *, long);
char _InterlockedOr8_np(char volatile *, char);
short _InterlockedOr16_np(short volatile *, short);
__int64 _InterlockedOr64_np(__int64 volatile *, __int64);
long _InterlockedXor_np(long volatile *, long);
char _InterlockedXor8_np(char volatile *, char);
short _InterlockedXor16_np(short volatile *, short);
__int64 _InterlockedXor64_np(__int64 volatile *, __int64);

unsigned short __lzcnt16(unsigned short);
unsigned int __lzcnt(unsigned int);
unsigned __int64 __lzcnt64(unsigned __int64);
unsigned short __popcnt16(unsigned short);
unsigned int __popcnt(unsigned int);
unsigned __int64 __popcnt64(unsigned __int64);
__m128i _mm_extract_si64(__m128i,__m128i);
__m128i _mm_extracti_si64(__m128i, int, int);
__m128i _mm_insert_si64(__m128i,__m128i);
__m128i _mm_inserti_si64(__m128i, __m128i, int, int);
void _mm_stream_sd(double*,__m128d);
void _mm_stream_ss(float*,__m128);
unsigned __int64 __rdtscp(unsigned int*);




















































































































































































































































































































































































#line 1672 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\intrin.h"
























#line 1697 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\intrin.h"


}
#line 1701 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\intrin.h"
#line 1702 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\intrin.h"
#line 1703 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\intrin.h"

#line 988 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\memory"

  
  
  

namespace std {
 
template<class _Ty>
	struct default_delete;

template<class _Ty,
	class _Dx = default_delete<_Ty> >
	class unique_ptr;
 #line 1002 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\memory"

	namespace tr1 {	
	
class bad_weak_ptr
	: public exception
	{	
public:
	explicit bad_weak_ptr(const char * = 0)
		{	
		}

	virtual const char * what() const throw()
		{	
		return ("tr1::bad_weak_ptr");
		}
	};

	
class _Ref_count_base
	{	
private:
	virtual void _Destroy() = 0;
	virtual void _Delete_this() = 0;

	long _Uses;
	long _Weaks;

protected:
	_Ref_count_base()
		: _Uses(1), _Weaks(1)
		{	
		}

public:
	virtual ~_Ref_count_base()
		{	
		}

	bool _Incref_nz()
		{	
		for (; ; )
			{	
			long _Count = (volatile long&)_Uses;
			if (_Count == 0)
				return (false);
			if (_InterlockedCompareExchange(&_Uses, _Count + 1, _Count) == _Count)
				return (true);
			}
		}

	void _Incref()
		{	
		_InterlockedIncrement(&_Uses);
		}

	void _Incwref()
		{	
		_InterlockedIncrement(&_Weaks);
		}

	void _Decref()
		{	
		if (_InterlockedDecrement(&_Uses) == 0)
			{	
			_Destroy();
			_Decwref();
			}
		}

	void _Decwref()
		{	
		if (_InterlockedDecrement(&_Weaks) == 0)
			_Delete_this();
		}

	long _Use_count() const
		{	
		return (_Uses);
		}

	bool _Expired() const
		{	
		return (_Uses == 0);
		}

	virtual void *_Get_deleter(const  type_info&) const
		{	
		return (0);
		}
	};

	
template<class _Ty>
	class _Ref_count
	: public _Ref_count_base
	{	
public:
	_Ref_count(_Ty *_Px)
		: _Ref_count_base(), _Ptr(_Px)
		{	
		}

private:
	virtual void _Destroy()
		{	
		delete _Ptr;
		}

	virtual void _Delete_this()
		{	
		delete this;
		}

	_Ty * _Ptr;
	};

template<class _Ty,
	class _Dx>
	class _Ref_count_del
	: public _Ref_count_base
	{	
public:
	_Ref_count_del(_Ty *_Px, _Dx _Dt)
		: _Ref_count_base(), _Ptr(_Px), _Dtor(_Dt)
		{	
		}

	virtual void *_Get_deleter(const  type_info& _Type) const
		{	
		return ((void *)(_Type == typeid(_Dx) ? &_Dtor : 0));
		}

private:
	virtual void _Destroy()
		{	
		_Dtor(_Ptr);
		}

	virtual void _Delete_this()
		{	
		delete this;
		}

	_Ty * _Ptr;
	_Dx _Dtor;	
	};

template<class _Ty,
	class _Dx,
	class _Alloc>
	class _Ref_count_del_alloc
	: public _Ref_count_base
	{	
public:
	typedef _Ref_count_del_alloc<_Ty, _Dx, _Alloc> _Myty;
	typedef typename _Alloc::template rebind<_Myty>::other _Myalty;

	_Ref_count_del_alloc(_Ty *_Px, _Dx _Dt, _Myalty _Al)
		: _Ref_count_base(), _Ptr(_Px), _Dtor(_Dt), _Myal(_Al)
		{	
		}

	virtual void *_Get_deleter(const  type_info& _Type) const
		{	
		return ((void *)(_Type == typeid(_Dx) ? &_Dtor : 0));
		}

private:
	virtual void _Destroy()
		{	
		_Dtor(_Ptr);
		}

	virtual void _Delete_this()
		{	
		_Myalty _Al = _Myal;
		_Dest_val(_Al, this);
		_Al.deallocate(this, 1);
		}

	_Ty * _Ptr;
	_Dx _Dtor;	
	_Myalty _Myal;	
	};

	
template<class _Ty>
	class weak_ptr;
template<class _Ty>
	class shared_ptr;
template<class _Ty>
	class enable_shared_from_this;
struct _Static_tag {};
struct _Const_tag {};
struct _Dynamic_tag {};
template<class _Ty1,
	class _Ty2>
	void _Do_enable(_Ty1 *, enable_shared_from_this<_Ty2> *,
		_Ref_count_base *);

template<class _Ty>
	inline void _Enable_shared(_Ty *_Ptr, _Ref_count_base *_Refptr,
		typename _Ty::_EStype * = 0)
	{	
	if (_Ptr)
		_Do_enable(_Ptr,
			(enable_shared_from_this<typename _Ty::_EStype>*)_Ptr, _Refptr);
	}

inline void _Enable_shared(const volatile void *, const volatile void *)
	{	
	}

	
template<class _Ty>
	class _Ptr_base
	{	
public:
	typedef _Ptr_base<_Ty> _Myt;
	typedef _Ty _Elem;
	typedef _Elem element_type;

	_Ptr_base()
		: _Ptr(0), _Rep(0)
		{	
		}

	_Ptr_base(_Myt&& _Right)
		: _Ptr(0), _Rep(0)
		{	
		_Assign_rv(::std:: forward<_Myt>(_Right));
		}

	template<class _Ty2>
		_Ptr_base(_Ptr_base<_Ty2>&& _Right)
		: _Ptr(_Right._Ptr), _Rep(_Right._Rep)
		{	
		_Right._Ptr = 0;
		_Right._Rep = 0;
		}

	_Myt& operator=(_Myt&& _Right)
		{	
		_Assign_rv(::std:: forward<_Myt>(_Right));
		return (*this);
		}

	void _Assign_rv(_Myt&& _Right)
		{	
		if (this != &_Right)
			_Swap(_Right);
		}

	long use_count() const
		{	
		return (_Rep ? _Rep->_Use_count() : 0);
		}

	void _Swap(_Ptr_base& _Right)
		{	
		::std:: swap(_Rep, _Right._Rep);
		::std:: swap(_Ptr, _Right._Ptr);
		}

	template<class _Ty2>
		bool owner_before(const _Ptr_base<_Ty2>& _Right) const
		{	
		return (_Rep < _Right._Rep);
		}

	void *_Get_deleter(const  type_info& _Type) const
		{	
		return (_Rep ? _Rep->_Get_deleter(_Type) : 0);
		}

	_Ty *_Get() const
		{	
		return (_Ptr);
		}

	bool _Expired() const
		{	
		return (!_Rep || _Rep->_Expired());
		}

	void _Decref()
		{	
		if (_Rep != 0)
			_Rep->_Decref();
		}

	void _Reset()
		{	
		_Reset(0, 0);
		}

	template<class _Ty2>
		void _Reset(const _Ptr_base<_Ty2>& _Other)
		{	
		_Reset(_Other._Ptr, _Other._Rep, false);
		}

	template<class _Ty2>
		void _Reset(const _Ptr_base<_Ty2>& _Other, bool _Throw)
		{	
		_Reset(_Other._Ptr, _Other._Rep, _Throw);
		}

	template<class _Ty2>
		void _Reset(const _Ptr_base<_Ty2>& _Other, const _Static_tag&)
		{	
		_Reset(static_cast<_Elem *>(_Other._Ptr), _Other._Rep);
		}

	template<class _Ty2>
		void _Reset(const _Ptr_base<_Ty2>& _Other, const _Const_tag&)
		{	
		_Reset(const_cast<_Elem *>(_Other._Ptr), _Other._Rep);
		}

	template<class _Ty2>
		void _Reset(const _Ptr_base<_Ty2>& _Other, const _Dynamic_tag&)
		{	
		_Elem *_Ptr = dynamic_cast<_Elem *>(_Other._Ptr);
		if (_Ptr)
			_Reset(_Ptr, _Other._Rep);
		else
			_Reset();
		}

	template<class _Ty2>
		void _Reset(auto_ptr<_Ty2>& _Other)
		{	
		_Ty2 *_Px = _Other.get();
		_Reset0(_Px, new _Ref_count<_Elem>(_Px));
		_Other.release();
		_Enable_shared(_Px, _Rep);
		}

 
	template<class _Ty2>
		void _Reset(_Ty *_Ptr, const _Ptr_base<_Ty2>& _Other)
		{	
		_Reset(_Ptr, _Other._Rep);
		}
 #line 1348 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\memory"

	void _Reset(_Ty *_Other_ptr, _Ref_count_base *_Other_rep)
		{	
		if (_Other_rep)
			_Other_rep->_Incref();
		_Reset0(_Other_ptr, _Other_rep);
		}

	void _Reset(_Ty *_Other_ptr, _Ref_count_base *_Other_rep, bool _Throw)
		{	
			
			
		if (_Other_rep && _Other_rep->_Incref_nz())
			_Reset0(_Other_ptr, _Other_rep);
		else if (_Throw)
			throw bad_weak_ptr(0);
		}

	void _Reset0(_Ty *_Other_ptr, _Ref_count_base *_Other_rep)
		{	
		if (_Rep != 0)
			_Rep->_Decref();
		_Rep = _Other_rep;
		_Ptr = _Other_ptr;
		}

	void _Decwref()
		{	
		if (_Rep != 0)
			_Rep->_Decwref();
		}

	void _Resetw()
		{	
		_Resetw((_Elem *)0, 0);
		}

	template<class _Ty2>
		void _Resetw(const _Ptr_base<_Ty2>& _Other)
		{	
		_Resetw(_Other._Ptr, _Other._Rep);
		}

	template<class _Ty2>
		void _Resetw(const _Ty2 *_Other_ptr, _Ref_count_base *_Other_rep)
		{	
		_Resetw(const_cast<_Ty2*>(_Other_ptr), _Other_rep);
		}

	template<class _Ty2>
		void _Resetw(_Ty2 *_Other_ptr, _Ref_count_base *_Other_rep)
		{	
		if (_Other_rep)
			_Other_rep->_Incwref();
		if (_Rep != 0)
			_Rep->_Decwref();
		_Rep = _Other_rep;
		_Ptr = _Other_ptr;
		}

private:
	_Ty *_Ptr;
	_Ref_count_base *_Rep;
	template<class _Ty0>
		friend class _Ptr_base;
	};

	
template<class _Ty>
	class shared_ptr
		: public _Ptr_base<_Ty>
	{	
public:
	typedef shared_ptr<_Ty> _Myt;
	typedef _Ptr_base<_Ty> _Mybase;

	shared_ptr()
		{	
		}

	template<class _Ux>
		explicit shared_ptr(_Ux *_Px)
		{	
		_Resetp(_Px);
		}

	template<class _Ux,
		class _Dx>
		shared_ptr(_Ux *_Px, _Dx _Dt)
		{	
		_Resetp(_Px, _Dt);
		}



 

	shared_ptr(::std:: nullptr_t)
		{	
		_Resetp((_Ty *)0);
		}

	template<class _Dx>
		shared_ptr(::std:: nullptr_t, _Dx _Dt)
		{	
		_Resetp((_Ty *)0, _Dt);
		}

	template<class _Dx,
		class _Alloc>
		shared_ptr(::std:: nullptr_t, _Dx _Dt, _Alloc _Ax)
		{	
		_Resetp((_Ty *)0, _Dt, _Ax);
		}
 #line 1464 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\memory"

	template<class _Ux,
		class _Dx,
		class _Alloc>
		shared_ptr(_Ux *_Px, _Dx _Dt, _Alloc _Ax)
		{	
		_Resetp(_Px, _Dt, _Ax);
		}


 
	template<class _Ty2>
		shared_ptr(const shared_ptr<_Ty2>& _Right, _Ty *_Px)
		{	
		this->_Reset(_Px, _Right);
		}
 #line 1481 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\memory"

	shared_ptr(const _Myt& _Other)
		{	
		this->_Reset(_Other);
		}

	template<class _Ty2>
		shared_ptr(const shared_ptr<_Ty2>& _Other,
			typename enable_if<is_convertible<_Ty2 *, _Ty *>::value,
				void *>::type * = 0)
		{	
		this->_Reset(_Other);
		}

	template<class _Ty2>
		explicit shared_ptr(const weak_ptr<_Ty2>& _Other,
			bool _Throw = true)
		{	
		this->_Reset(_Other, _Throw);
		}

	template<class _Ty2>
		shared_ptr(auto_ptr<_Ty2>& _Other)
		{	
		this->_Reset(_Other);
		}

	template<class _Ty2>
		shared_ptr(const shared_ptr<_Ty2>& _Other, const _Static_tag& _Tag)
		{	
		this->_Reset(_Other, _Tag);
		}

	template<class _Ty2>
		shared_ptr(const shared_ptr<_Ty2>& _Other, const _Const_tag& _Tag)
		{	
		this->_Reset(_Other, _Tag);
		}

	template<class _Ty2>
		shared_ptr(const shared_ptr<_Ty2>& _Other, const _Dynamic_tag& _Tag)
		{	
		this->_Reset(_Other, _Tag);
		}

	shared_ptr(_Myt&& _Right)
		: _Mybase(::std:: forward<_Myt>(_Right))
		{	
		}

	template<class _Ty2>
		shared_ptr(shared_ptr<_Ty2>&& _Right,
			typename enable_if<is_convertible<_Ty2 *, _Ty *>::value,
				void *>::type * = 0)
		: _Mybase(::std:: forward<shared_ptr<_Ty2> >(_Right))
		{	
		}

 
	template<class _Ux,
		class _Dx>
		shared_ptr(::std:: unique_ptr<_Ux, _Dx>&& _Right)
		{	
		_Resetp(_Right.release(), _Right.get_deleter());
		}

	template<class _Ux,
		class _Dx>
		_Myt& operator=(unique_ptr<_Ux, _Dx>&& _Right)
		{	
		shared_ptr(::std:: move(_Right)).swap(*this);
		return (*this);
		}
 #line 1555 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\memory"

	_Myt& operator=(_Myt&& _Right)
		{	
		shared_ptr(::std:: move(_Right)).swap(*this);
		return (*this);
		}

	template<class _Ty2>
		_Myt& operator=(shared_ptr<_Ty2>&& _Right)
		{	
		shared_ptr(::std:: move(_Right)).swap(*this);
		return (*this);
		}

	void swap(_Myt&& _Right)
		{	
		_Mybase::swap(::std:: move(_Right));
		}

	~shared_ptr()
		{	
		this->_Decref();
		}

	_Myt& operator=(const _Myt& _Right)
		{	
		shared_ptr(_Right).swap(*this);
		return (*this);
		}

	template<class _Ty2>
		_Myt& operator=(const shared_ptr<_Ty2>& _Right)
		{	
		shared_ptr(_Right).swap(*this);
		return (*this);
		}

	template<class _Ty2>
		_Myt& operator=(auto_ptr<_Ty2>& _Right)
		{	
		shared_ptr(_Right).swap(*this);
		return (*this);
		}

	void reset()
		{	
		shared_ptr().swap(*this);
		}

	template<class _Ux>
		void reset(_Ux *_Px)
		{	
		shared_ptr(_Px).swap(*this);
		}

	template<class _Ux,
		class _Dx>
		void reset(_Ux *_Px, _Dx _Dt)
		{	
		shared_ptr(_Px, _Dt).swap(*this);
		}


	template<class _Ux,
		class _Dx,
		class _Alloc>
		void reset(_Ux *_Px, _Dx _Dt, _Alloc _Ax)
		{	
		shared_ptr(_Px, _Dt, _Ax).swap(*this);
		}


	void swap(_Myt& _Other)
		{	
		this->_Swap(_Other);
		}

	_Ty *get() const
		{	
		return (this->_Get());
		}

	typename tr1::add_reference<_Ty>::type operator*() const
		{	
		return (*this->_Get());
		}

	_Ty *operator->() const
		{	
		return (this->_Get());
		}

	bool unique() const
		{	
		return (this->use_count() == 1);
		}

	operator ::std:: _Bool_type() const
		{	
		return (this->_Get() != 0 ? (&::std:: _Bool_struct::_Member) : 0);
		}

private:
	template<class _Ux>
		void _Resetp(_Ux *_Px)
		{	
		try {	
		_Resetp0(_Px, new _Ref_count<_Ux>(_Px));
		} catch (...) {	
		delete _Px;
		throw;
		}
		}

	template<class _Ux,
		class _Dx>
		void _Resetp(_Ux *_Px, _Dx _Dt)
		{	
		try {	
		_Resetp0(_Px, new _Ref_count_del<_Ux, _Dx>(_Px, _Dt));
		} catch (...) {	
		_Dt(_Px);
		throw;
		}
		}


	template<class _Ux,
		class _Dx,
		class _Alloc>
		void _Resetp(_Ux *_Px, _Dx _Dt, _Alloc _Ax)
		{	
		typedef _Ref_count_del_alloc<_Ux, _Dx, _Alloc> _Refd;
		typename _Alloc::template rebind<_Refd>::other _Al = _Ax;

		try {	
		_Refd *_Ptr = _Al.allocate(1);
		new (_Ptr) _Refd(_Px, _Dt, _Al);
		_Resetp0(_Px, _Ptr);
		} catch (...) {	
		_Dt(_Px);
		throw;
		}
		}


public:
	template<class _Ux>
		void _Resetp0(_Ux *_Px, _Ref_count_base *_Rx)
		{	
		this->_Reset0(_Px, _Rx);
		_Enable_shared(_Px, _Rx);
		}
	};

template<class _Ty1,
	class _Ty2>
	bool operator==(const shared_ptr<_Ty1>& _S1,
		const shared_ptr<_Ty2>& _S2)
	{	
	return (_S1.get() == _S2.get());
	}

template<class _Ty1,
	class _Ty2>
	bool operator!=(const shared_ptr<_Ty1>& _S1,
		const shared_ptr<_Ty2>& _S2)
	{	
	return (!(_S1 == _S2));
	}

template<class _Ty1,
	class _Ty2>
	bool operator<(const shared_ptr<_Ty1>& _S1,
		const shared_ptr<_Ty2>& _S2)
	{	
	return (_S1.get() < _S2.get());
	}

template<class _Ty1,
	class _Ty2>
	bool operator>=(const shared_ptr<_Ty1>& _S1,
		const shared_ptr<_Ty2>& _S2)
	{	
	return (!(_S1 < _S2));
	}

template<class _Ty1,
	class _Ty2>
	bool operator>(const shared_ptr<_Ty1>& _S1,
		const shared_ptr<_Ty2>& _S2)
	{	
	return (_S2 < _S1);
	}

template<class _Ty1,
	class _Ty2>
	bool operator<=(const shared_ptr<_Ty1>& _S1,
		const shared_ptr<_Ty2>& _S2)
	{	
	return (!(_S2 < _S1));
	}

template<class _Elem,
	class _Traits,
	class _Ty>
	basic_ostream<_Elem, _Traits>&
	operator<<(basic_ostream<_Elem, _Traits>& _Out,
		const shared_ptr<_Ty>& _Px)
	{	
	return (_Out << _Px.get());
	}

template<class _Ty>
	void swap(shared_ptr<_Ty>& _Left,
		shared_ptr<_Ty>& _Right)
	{	
	_Left.swap(_Right);
	}

template<class _Ty>
	void swap(shared_ptr<_Ty>& _Left,
		shared_ptr<_Ty>&& _Right)
	{	
	_Left.swap(_Right);
	}

template<class _Ty>
	void swap(shared_ptr<_Ty>&& _Left,
		shared_ptr<_Ty>& _Right)
	{	
	_Right.swap(_Left);
	}

template<class _Ty1,
	class _Ty2>
	shared_ptr<_Ty1> static_pointer_cast(const shared_ptr<_Ty2>& _Other)
	{	
	return (shared_ptr<_Ty1>(_Other, _Static_tag()));
	}

template<class _Ty1,
	class _Ty2>
	shared_ptr<_Ty1> const_pointer_cast(const shared_ptr<_Ty2>& _Other)
	{	
	return (shared_ptr<_Ty1>(_Other, _Const_tag()));
	}

template<class _Ty1,
	class _Ty2>
	shared_ptr<_Ty1> dynamic_pointer_cast(const shared_ptr<_Ty2>& _Other)
	{	
	return (shared_ptr<_Ty1>(_Other, _Dynamic_tag()));
	}

template<class _Dx,
	class _Ty>
	_Dx *get_deleter(const shared_ptr<_Ty>& _Sx)
	{	
	return ((_Dx *)_Sx._Get_deleter(typeid(_Dx)));
	}

 

	
template<class _Ty>
	class _Ref_count_obj
	: public _Ref_count_base
	{	
public:
 
 
 #line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"





 

#line 9 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"





 
 #line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 
  
  
  
  
  
  

 

















































































#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  

 




#line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  
  
  
  
  
  
  
  
  
  
  
  
  

 




























#line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  

 

#line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  

 

#line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 265 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 267 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 269 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 271 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"



 

 

#line 9 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"

	_Ref_count_obj(    )
		: _Ref_count_base()
		{	
		new ((void *) &_Storage) _Ty(    );
		}
 #line 16 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"

 












 







































#line 272 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"






#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 16 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"
 
#line 18 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"


#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 









































































#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  

 













#line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  

 

#line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  

 

#line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 265 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 267 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 269 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 271 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"



 

 
	template<class _Arg0    >
 #line 9 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"

	_Ref_count_obj(_Arg0 && _Ax0    )
		: _Ref_count_base()
		{	
		new ((void *) &_Storage) _Ty(::std:: forward<_Arg0>(_Ax0)    );
		}
 #line 16 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"

 












 







































#line 272 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"






#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 21 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

































































#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  

 

#line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 265 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 267 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 269 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 271 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"



 

 
	template<class _Arg0 ,   class _Arg1>
 #line 9 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"

	_Ref_count_obj(_Arg0 && _Ax0 ,   _Arg1 && _Ax1)
		: _Ref_count_base()
		{	
		new ((void *) &_Storage) _Ty(::std:: forward<_Arg0>(_Ax0) ,   ::std:: forward<_Arg1>(_Ax1));
		}
 #line 16 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"

 












 







































#line 272 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"






#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 25 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

























































#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 265 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 267 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 269 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 271 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"



 

 
	template<class _Arg0 , class _Arg1 , class _Arg2>
 #line 9 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"

	_Ref_count_obj(_Arg0 && _Ax0 , _Arg1 && _Ax1 , _Arg2 && _Ax2)
		: _Ref_count_base()
		{	
		new ((void *) &_Storage) _Ty(::std:: forward<_Arg0>(_Ax0) , ::std:: forward<_Arg1>(_Ax1) , ::std:: forward<_Arg2>(_Ax2));
		}
 #line 16 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"

 












 







































#line 272 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"






#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 29 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

















































#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 265 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 267 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 269 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 271 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"



 

 
	template<class _Arg0 , class _Arg1, class _Arg2 , class _Arg3>
 #line 9 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"

	_Ref_count_obj(_Arg0 && _Ax0 , _Arg1 && _Ax1, _Arg2 && _Ax2 , _Arg3 && _Ax3)
		: _Ref_count_base()
		{	
		new ((void *) &_Storage) _Ty(::std:: forward<_Arg0>(_Ax0) , ::std:: forward<_Arg1>(_Ax1), ::std:: forward<_Arg2>(_Ax2) , ::std:: forward<_Arg3>(_Ax3));
		}
 #line 16 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"

 












 







































#line 272 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"






#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 33 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 47 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 









































#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 265 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 267 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 269 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 271 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"



 

 
	template<class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4>
 #line 9 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"

	_Ref_count_obj(_Arg0 && _Ax0 , _Arg1 && _Ax1, _Arg2 && _Ax2, _Arg3 && _Ax3 , _Arg4 && _Ax4)
		: _Ref_count_base()
		{	
		new ((void *) &_Storage) _Ty(::std:: forward<_Arg0>(_Ax0) , ::std:: forward<_Arg1>(_Ax1), ::std:: forward<_Arg2>(_Ax2), ::std:: forward<_Arg3>(_Ax3) , ::std:: forward<_Arg4>(_Ax4));
		}
 #line 16 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"

 












 







































#line 272 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"






#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 37 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 47 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 55 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

































#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 265 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 267 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 269 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 271 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"



 

 
	template<class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5>
 #line 9 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"

	_Ref_count_obj(_Arg0 && _Ax0 , _Arg1 && _Ax1, _Arg2 && _Ax2, _Arg3 && _Ax3, _Arg4 && _Ax4 , _Arg5 && _Ax5)
		: _Ref_count_base()
		{	
		new ((void *) &_Storage) _Ty(::std:: forward<_Arg0>(_Ax0) , ::std:: forward<_Arg1>(_Ax1), ::std:: forward<_Arg2>(_Ax2), ::std:: forward<_Arg3>(_Ax3), ::std:: forward<_Arg4>(_Ax4) , ::std:: forward<_Arg5>(_Ax5));
		}
 #line 16 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"

 












 







































#line 272 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"






#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 41 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 47 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 55 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 63 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

























#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 265 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 267 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 269 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 271 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"



 

 
	template<class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6>
 #line 9 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"

	_Ref_count_obj(_Arg0 && _Ax0 , _Arg1 && _Ax1, _Arg2 && _Ax2, _Arg3 && _Ax3, _Arg4 && _Ax4, _Arg5 && _Ax5 , _Arg6 && _Ax6)
		: _Ref_count_base()
		{	
		new ((void *) &_Storage) _Ty(::std:: forward<_Arg0>(_Ax0) , ::std:: forward<_Arg1>(_Ax1), ::std:: forward<_Arg2>(_Ax2), ::std:: forward<_Arg3>(_Ax3), ::std:: forward<_Arg4>(_Ax4), ::std:: forward<_Arg5>(_Ax5) , ::std:: forward<_Arg6>(_Ax6));
		}
 #line 16 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"

 












 







































#line 272 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"






#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 45 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 47 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 55 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 63 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 71 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

















#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 265 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 267 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 269 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 271 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"



 

 
	template<class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7>
 #line 9 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"

	_Ref_count_obj(_Arg0 && _Ax0 , _Arg1 && _Ax1, _Arg2 && _Ax2, _Arg3 && _Ax3, _Arg4 && _Ax4, _Arg5 && _Ax5, _Arg6 && _Ax6 , _Arg7 && _Ax7)
		: _Ref_count_base()
		{	
		new ((void *) &_Storage) _Ty(::std:: forward<_Arg0>(_Ax0) , ::std:: forward<_Arg1>(_Ax1), ::std:: forward<_Arg2>(_Ax2), ::std:: forward<_Arg3>(_Ax3), ::std:: forward<_Arg4>(_Ax4), ::std:: forward<_Arg5>(_Ax5), ::std:: forward<_Arg6>(_Ax6) , ::std:: forward<_Arg7>(_Ax7));
		}
 #line 16 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"

 












 







































#line 272 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"






#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 49 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 47 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 55 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 63 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 71 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 79 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 









#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 265 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 267 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 269 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 271 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"



 

 
	template<class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8>
 #line 9 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"

	_Ref_count_obj(_Arg0 && _Ax0 , _Arg1 && _Ax1, _Arg2 && _Ax2, _Arg3 && _Ax3, _Arg4 && _Ax4, _Arg5 && _Ax5, _Arg6 && _Ax6, _Arg7 && _Ax7 , _Arg8 && _Ax8)
		: _Ref_count_base()
		{	
		new ((void *) &_Storage) _Ty(::std:: forward<_Arg0>(_Ax0) , ::std:: forward<_Arg1>(_Ax1), ::std:: forward<_Arg2>(_Ax2), ::std:: forward<_Arg3>(_Ax3), ::std:: forward<_Arg4>(_Ax4), ::std:: forward<_Arg5>(_Ax5), ::std:: forward<_Arg6>(_Ax6), ::std:: forward<_Arg7>(_Ax7) , ::std:: forward<_Arg8>(_Ax8));
		}
 #line 16 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"

 












 







































#line 272 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"






#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 53 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 47 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 55 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 63 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 71 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 79 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 87 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  

 

#line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 265 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 267 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 269 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 271 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"



 

 
	template<class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9>
 #line 9 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"

	_Ref_count_obj(_Arg0 && _Ax0 , _Arg1 && _Ax1, _Arg2 && _Ax2, _Arg3 && _Ax3, _Arg4 && _Ax4, _Arg5 && _Ax5, _Arg6 && _Ax6, _Arg7 && _Ax7, _Arg8 && _Ax8 , _Arg9 && _Ax9)
		: _Ref_count_base()
		{	
		new ((void *) &_Storage) _Ty(::std:: forward<_Arg0>(_Ax0) , ::std:: forward<_Arg1>(_Ax1), ::std:: forward<_Arg2>(_Ax2), ::std:: forward<_Arg3>(_Ax3), ::std:: forward<_Arg4>(_Ax4), ::std:: forward<_Arg5>(_Ax5), ::std:: forward<_Arg6>(_Ax6), ::std:: forward<_Arg7>(_Ax7), ::std:: forward<_Arg8>(_Ax8) , ::std:: forward<_Arg9>(_Ax9));
		}
 #line 16 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"

 












 







































#line 272 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"






#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 57 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"




















#line 1828 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\memory"
 

	_Ty *_Getptr() const
		{	
		return ((_Ty *)&_Storage);
		}

private:
	virtual void _Destroy()
		{	
		_Getptr()->~_Ty();
		}

	virtual void _Delete_this()
		{	
		delete this;
		}

	typename aligned_storage<sizeof(_Ty),
		alignment_of<_Ty>::value>::type _Storage;
	};

	
template<class _Ty,
	class _Alloc>
	class _Ref_count_obj_alloc
	: public _Ref_count_base
	{	
public:
	typedef _Ref_count_obj_alloc<_Ty, _Alloc> _Myty;
	typedef typename _Alloc::template rebind<_Myty>::other _Myalty;

 
 
 #line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"





 

#line 9 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"





 
 #line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 
  
  
  
  
  
  

 

















































































#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  

 




#line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  
  
  
  
  
  
  
  
  
  
  
  
  

 




























#line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  

 

#line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  

 

#line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 265 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 267 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 269 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 271 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"



 












 

 

#line 22 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"

	_Ref_count_obj_alloc(_Myalty _Al      )
		: _Ref_count_base(), _Myal(_Al)
		{	
		new ((void *) &_Storage) _Ty(    );
		}
 #line 29 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"

 







































#line 272 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"






#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 16 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"
 
#line 18 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"


#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 









































































#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  

 













#line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  

 

#line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  

 

#line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 265 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 267 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 269 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 271 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"



 












 

 
	template<class _Arg0    >
 #line 22 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"

	_Ref_count_obj_alloc(_Myalty _Al , _Arg0 && _Ax0    )
		: _Ref_count_base(), _Myal(_Al)
		{	
		new ((void *) &_Storage) _Ty(::std:: forward<_Arg0>(_Ax0)    );
		}
 #line 29 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"

 







































#line 272 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"






#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 21 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

































































#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  

 

#line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 265 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 267 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 269 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 271 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"



 












 

 
	template<class _Arg0 ,   class _Arg1>
 #line 22 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"

	_Ref_count_obj_alloc(_Myalty _Al , _Arg0 && _Ax0 ,   _Arg1 && _Ax1)
		: _Ref_count_base(), _Myal(_Al)
		{	
		new ((void *) &_Storage) _Ty(::std:: forward<_Arg0>(_Ax0) ,   ::std:: forward<_Arg1>(_Ax1));
		}
 #line 29 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"

 







































#line 272 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"






#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 25 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

























































#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 265 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 267 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 269 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 271 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"



 












 

 
	template<class _Arg0 , class _Arg1 , class _Arg2>
 #line 22 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"

	_Ref_count_obj_alloc(_Myalty _Al , _Arg0 && _Ax0 , _Arg1 && _Ax1 , _Arg2 && _Ax2)
		: _Ref_count_base(), _Myal(_Al)
		{	
		new ((void *) &_Storage) _Ty(::std:: forward<_Arg0>(_Ax0) , ::std:: forward<_Arg1>(_Ax1) , ::std:: forward<_Arg2>(_Ax2));
		}
 #line 29 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"

 







































#line 272 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"






#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 29 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

















































#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 265 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 267 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 269 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 271 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"



 












 

 
	template<class _Arg0 , class _Arg1, class _Arg2 , class _Arg3>
 #line 22 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"

	_Ref_count_obj_alloc(_Myalty _Al , _Arg0 && _Ax0 , _Arg1 && _Ax1, _Arg2 && _Ax2 , _Arg3 && _Ax3)
		: _Ref_count_base(), _Myal(_Al)
		{	
		new ((void *) &_Storage) _Ty(::std:: forward<_Arg0>(_Ax0) , ::std:: forward<_Arg1>(_Ax1), ::std:: forward<_Arg2>(_Ax2) , ::std:: forward<_Arg3>(_Ax3));
		}
 #line 29 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"

 







































#line 272 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"






#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 33 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 47 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 









































#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 265 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 267 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 269 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 271 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"



 












 

 
	template<class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4>
 #line 22 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"

	_Ref_count_obj_alloc(_Myalty _Al , _Arg0 && _Ax0 , _Arg1 && _Ax1, _Arg2 && _Ax2, _Arg3 && _Ax3 , _Arg4 && _Ax4)
		: _Ref_count_base(), _Myal(_Al)
		{	
		new ((void *) &_Storage) _Ty(::std:: forward<_Arg0>(_Ax0) , ::std:: forward<_Arg1>(_Ax1), ::std:: forward<_Arg2>(_Ax2), ::std:: forward<_Arg3>(_Ax3) , ::std:: forward<_Arg4>(_Ax4));
		}
 #line 29 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"

 







































#line 272 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"






#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 37 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 47 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 55 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

































#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 265 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 267 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 269 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 271 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"



 












 

 
	template<class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5>
 #line 22 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"

	_Ref_count_obj_alloc(_Myalty _Al , _Arg0 && _Ax0 , _Arg1 && _Ax1, _Arg2 && _Ax2, _Arg3 && _Ax3, _Arg4 && _Ax4 , _Arg5 && _Ax5)
		: _Ref_count_base(), _Myal(_Al)
		{	
		new ((void *) &_Storage) _Ty(::std:: forward<_Arg0>(_Ax0) , ::std:: forward<_Arg1>(_Ax1), ::std:: forward<_Arg2>(_Ax2), ::std:: forward<_Arg3>(_Ax3), ::std:: forward<_Arg4>(_Ax4) , ::std:: forward<_Arg5>(_Ax5));
		}
 #line 29 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"

 







































#line 272 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"






#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 41 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 47 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 55 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 63 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

























#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 265 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 267 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 269 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 271 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"



 












 

 
	template<class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6>
 #line 22 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"

	_Ref_count_obj_alloc(_Myalty _Al , _Arg0 && _Ax0 , _Arg1 && _Ax1, _Arg2 && _Ax2, _Arg3 && _Ax3, _Arg4 && _Ax4, _Arg5 && _Ax5 , _Arg6 && _Ax6)
		: _Ref_count_base(), _Myal(_Al)
		{	
		new ((void *) &_Storage) _Ty(::std:: forward<_Arg0>(_Ax0) , ::std:: forward<_Arg1>(_Ax1), ::std:: forward<_Arg2>(_Ax2), ::std:: forward<_Arg3>(_Ax3), ::std:: forward<_Arg4>(_Ax4), ::std:: forward<_Arg5>(_Ax5) , ::std:: forward<_Arg6>(_Ax6));
		}
 #line 29 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"

 







































#line 272 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"






#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 45 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 47 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 55 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 63 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 71 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

















#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 265 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 267 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 269 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 271 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"



 












 

 
	template<class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7>
 #line 22 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"

	_Ref_count_obj_alloc(_Myalty _Al , _Arg0 && _Ax0 , _Arg1 && _Ax1, _Arg2 && _Ax2, _Arg3 && _Ax3, _Arg4 && _Ax4, _Arg5 && _Ax5, _Arg6 && _Ax6 , _Arg7 && _Ax7)
		: _Ref_count_base(), _Myal(_Al)
		{	
		new ((void *) &_Storage) _Ty(::std:: forward<_Arg0>(_Ax0) , ::std:: forward<_Arg1>(_Ax1), ::std:: forward<_Arg2>(_Ax2), ::std:: forward<_Arg3>(_Ax3), ::std:: forward<_Arg4>(_Ax4), ::std:: forward<_Arg5>(_Ax5), ::std:: forward<_Arg6>(_Ax6) , ::std:: forward<_Arg7>(_Ax7));
		}
 #line 29 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"

 







































#line 272 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"






#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 49 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 47 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 55 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 63 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 71 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 79 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 









#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 265 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 267 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 269 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 271 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"



 












 

 
	template<class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8>
 #line 22 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"

	_Ref_count_obj_alloc(_Myalty _Al , _Arg0 && _Ax0 , _Arg1 && _Ax1, _Arg2 && _Ax2, _Arg3 && _Ax3, _Arg4 && _Ax4, _Arg5 && _Ax5, _Arg6 && _Ax6, _Arg7 && _Ax7 , _Arg8 && _Ax8)
		: _Ref_count_base(), _Myal(_Al)
		{	
		new ((void *) &_Storage) _Ty(::std:: forward<_Arg0>(_Ax0) , ::std:: forward<_Arg1>(_Ax1), ::std:: forward<_Arg2>(_Ax2), ::std:: forward<_Arg3>(_Ax3), ::std:: forward<_Arg4>(_Ax4), ::std:: forward<_Arg5>(_Ax5), ::std:: forward<_Arg6>(_Ax6), ::std:: forward<_Arg7>(_Ax7) , ::std:: forward<_Arg8>(_Ax8));
		}
 #line 29 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"

 







































#line 272 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"






#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 53 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 47 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 55 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 63 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 71 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 79 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 87 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  

 

#line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 265 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 267 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 269 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 271 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"



 












 

 
	template<class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9>
 #line 22 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"

	_Ref_count_obj_alloc(_Myalty _Al , _Arg0 && _Ax0 , _Arg1 && _Ax1, _Arg2 && _Ax2, _Arg3 && _Ax3, _Arg4 && _Ax4, _Arg5 && _Ax5, _Arg6 && _Ax6, _Arg7 && _Ax7, _Arg8 && _Ax8 , _Arg9 && _Ax9)
		: _Ref_count_base(), _Myal(_Al)
		{	
		new ((void *) &_Storage) _Ty(::std:: forward<_Arg0>(_Ax0) , ::std:: forward<_Arg1>(_Ax1), ::std:: forward<_Arg2>(_Ax2), ::std:: forward<_Arg3>(_Ax3), ::std:: forward<_Arg4>(_Ax4), ::std:: forward<_Arg5>(_Ax5), ::std:: forward<_Arg6>(_Ax6), ::std:: forward<_Arg7>(_Ax7), ::std:: forward<_Arg8>(_Ax8) , ::std:: forward<_Arg9>(_Ax9));
		}
 #line 29 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"

 







































#line 272 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"






#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 57 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"




















#line 1863 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\memory"
 

	_Ty *_Getptr() const
		{	
		return ((_Ty *)&_Storage);
		}

private:
	virtual void _Destroy()
		{	
		_Getptr()->~_Ty();
		}

	virtual void _Delete_this()
		{	
		_Myalty _Al = _Myal;
		_Dest_val(_Al, this);
		_Al.deallocate(this, 1);
		}

	typename aligned_storage<sizeof (_Ty),
		alignment_of<_Ty>::value>::type _Storage;
	_Myalty _Myal;	
	};

 
 
 #line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"





 

#line 9 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"





 
 #line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 
  
  
  
  
  
  

 

















































































#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  

 




#line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  
  
  
  
  
  
  
  
  
  
  
  
  

 




























#line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  

 

#line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  

 

#line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 265 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 267 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 269 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 271 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"



 












 












 
	
template<class _Ty      > inline
	shared_ptr<_Ty> make_shared(    )
	{	
	_Ref_count_obj<_Ty> * _Rx = new _Ref_count_obj<_Ty>(    );

	shared_ptr<_Ty> _Ret;
	_Ret._Resetp0(_Rx->_Getptr(), _Rx);
	return (_Ret);
	}

	
template<class _Ty,
	class _Alloc      > inline
		shared_ptr<_Ty> allocate_shared(
			const _Alloc& _Al_arg      )
	{	
	typedef _Ref_count_obj_alloc<_Ty, _Alloc> _Refoa;
	typename _Alloc::template rebind<_Refoa>::other _Alref = _Al_arg;

	_Refoa * _Rx = _Alref.allocate(1);

	try {
		new (_Rx) _Refoa(_Al_arg      );
	} catch (...) {
		_Alref.deallocate(_Rx, 1);
	throw;
	}

	shared_ptr<_Ty> _Ret;
	_Ret._Resetp0(_Rx->_Getptr(), _Rx);
	return (_Ret);
	}
 #line 65 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"





#line 272 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"






#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 16 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"
 
#line 18 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"


#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 









































































#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  

 













#line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  

 

#line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  

 

#line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 265 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 267 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 269 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 271 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"



 












 












 
	
template<class _Ty , class _Arg0    > inline
	shared_ptr<_Ty> make_shared(_Arg0 && _Ax0    )
	{	
	_Ref_count_obj<_Ty> * _Rx = new _Ref_count_obj<_Ty>(::std:: forward<_Arg0>(_Ax0)    );

	shared_ptr<_Ty> _Ret;
	_Ret._Resetp0(_Rx->_Getptr(), _Rx);
	return (_Ret);
	}

	
template<class _Ty,
	class _Alloc , class _Arg0    > inline
		shared_ptr<_Ty> allocate_shared(
			const _Alloc& _Al_arg , _Arg0 && _Ax0    )
	{	
	typedef _Ref_count_obj_alloc<_Ty, _Alloc> _Refoa;
	typename _Alloc::template rebind<_Refoa>::other _Alref = _Al_arg;

	_Refoa * _Rx = _Alref.allocate(1);

	try {
		new (_Rx) _Refoa(_Al_arg , ::std:: forward<_Arg0>(_Ax0)    );
	} catch (...) {
		_Alref.deallocate(_Rx, 1);
	throw;
	}

	shared_ptr<_Ty> _Ret;
	_Ret._Resetp0(_Rx->_Getptr(), _Rx);
	return (_Ret);
	}
 #line 65 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"





#line 272 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"






#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 21 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

































































#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  

 

#line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 265 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 267 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 269 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 271 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"



 












 












 
	
template<class _Ty , class _Arg0 ,   class _Arg1> inline
	shared_ptr<_Ty> make_shared(_Arg0 && _Ax0 ,   _Arg1 && _Ax1)
	{	
	_Ref_count_obj<_Ty> * _Rx = new _Ref_count_obj<_Ty>(::std:: forward<_Arg0>(_Ax0) ,   ::std:: forward<_Arg1>(_Ax1));

	shared_ptr<_Ty> _Ret;
	_Ret._Resetp0(_Rx->_Getptr(), _Rx);
	return (_Ret);
	}

	
template<class _Ty,
	class _Alloc , class _Arg0 ,   class _Arg1> inline
		shared_ptr<_Ty> allocate_shared(
			const _Alloc& _Al_arg , _Arg0 && _Ax0 ,   _Arg1 && _Ax1)
	{	
	typedef _Ref_count_obj_alloc<_Ty, _Alloc> _Refoa;
	typename _Alloc::template rebind<_Refoa>::other _Alref = _Al_arg;

	_Refoa * _Rx = _Alref.allocate(1);

	try {
		new (_Rx) _Refoa(_Al_arg , ::std:: forward<_Arg0>(_Ax0) ,   ::std:: forward<_Arg1>(_Ax1));
	} catch (...) {
		_Alref.deallocate(_Rx, 1);
	throw;
	}

	shared_ptr<_Ty> _Ret;
	_Ret._Resetp0(_Rx->_Getptr(), _Rx);
	return (_Ret);
	}
 #line 65 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"





#line 272 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"






#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 25 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

























































#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 265 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 267 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 269 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 271 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"



 












 












 
	
template<class _Ty , class _Arg0 , class _Arg1 , class _Arg2> inline
	shared_ptr<_Ty> make_shared(_Arg0 && _Ax0 , _Arg1 && _Ax1 , _Arg2 && _Ax2)
	{	
	_Ref_count_obj<_Ty> * _Rx = new _Ref_count_obj<_Ty>(::std:: forward<_Arg0>(_Ax0) , ::std:: forward<_Arg1>(_Ax1) , ::std:: forward<_Arg2>(_Ax2));

	shared_ptr<_Ty> _Ret;
	_Ret._Resetp0(_Rx->_Getptr(), _Rx);
	return (_Ret);
	}

	
template<class _Ty,
	class _Alloc , class _Arg0 , class _Arg1 , class _Arg2> inline
		shared_ptr<_Ty> allocate_shared(
			const _Alloc& _Al_arg , _Arg0 && _Ax0 , _Arg1 && _Ax1 , _Arg2 && _Ax2)
	{	
	typedef _Ref_count_obj_alloc<_Ty, _Alloc> _Refoa;
	typename _Alloc::template rebind<_Refoa>::other _Alref = _Al_arg;

	_Refoa * _Rx = _Alref.allocate(1);

	try {
		new (_Rx) _Refoa(_Al_arg , ::std:: forward<_Arg0>(_Ax0) , ::std:: forward<_Arg1>(_Ax1) , ::std:: forward<_Arg2>(_Ax2));
	} catch (...) {
		_Alref.deallocate(_Rx, 1);
	throw;
	}

	shared_ptr<_Ty> _Ret;
	_Ret._Resetp0(_Rx->_Getptr(), _Rx);
	return (_Ret);
	}
 #line 65 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"





#line 272 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"






#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 29 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

















































#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 265 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 267 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 269 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 271 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"



 












 












 
	
template<class _Ty , class _Arg0 , class _Arg1, class _Arg2 , class _Arg3> inline
	shared_ptr<_Ty> make_shared(_Arg0 && _Ax0 , _Arg1 && _Ax1, _Arg2 && _Ax2 , _Arg3 && _Ax3)
	{	
	_Ref_count_obj<_Ty> * _Rx = new _Ref_count_obj<_Ty>(::std:: forward<_Arg0>(_Ax0) , ::std:: forward<_Arg1>(_Ax1), ::std:: forward<_Arg2>(_Ax2) , ::std:: forward<_Arg3>(_Ax3));

	shared_ptr<_Ty> _Ret;
	_Ret._Resetp0(_Rx->_Getptr(), _Rx);
	return (_Ret);
	}

	
template<class _Ty,
	class _Alloc , class _Arg0 , class _Arg1, class _Arg2 , class _Arg3> inline
		shared_ptr<_Ty> allocate_shared(
			const _Alloc& _Al_arg , _Arg0 && _Ax0 , _Arg1 && _Ax1, _Arg2 && _Ax2 , _Arg3 && _Ax3)
	{	
	typedef _Ref_count_obj_alloc<_Ty, _Alloc> _Refoa;
	typename _Alloc::template rebind<_Refoa>::other _Alref = _Al_arg;

	_Refoa * _Rx = _Alref.allocate(1);

	try {
		new (_Rx) _Refoa(_Al_arg , ::std:: forward<_Arg0>(_Ax0) , ::std:: forward<_Arg1>(_Ax1), ::std:: forward<_Arg2>(_Ax2) , ::std:: forward<_Arg3>(_Ax3));
	} catch (...) {
		_Alref.deallocate(_Rx, 1);
	throw;
	}

	shared_ptr<_Ty> _Ret;
	_Ret._Resetp0(_Rx->_Getptr(), _Rx);
	return (_Ret);
	}
 #line 65 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"





#line 272 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"






#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 33 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 47 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 









































#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 265 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 267 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 269 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 271 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"



 












 












 
	
template<class _Ty , class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4> inline
	shared_ptr<_Ty> make_shared(_Arg0 && _Ax0 , _Arg1 && _Ax1, _Arg2 && _Ax2, _Arg3 && _Ax3 , _Arg4 && _Ax4)
	{	
	_Ref_count_obj<_Ty> * _Rx = new _Ref_count_obj<_Ty>(::std:: forward<_Arg0>(_Ax0) , ::std:: forward<_Arg1>(_Ax1), ::std:: forward<_Arg2>(_Ax2), ::std:: forward<_Arg3>(_Ax3) , ::std:: forward<_Arg4>(_Ax4));

	shared_ptr<_Ty> _Ret;
	_Ret._Resetp0(_Rx->_Getptr(), _Rx);
	return (_Ret);
	}

	
template<class _Ty,
	class _Alloc , class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4> inline
		shared_ptr<_Ty> allocate_shared(
			const _Alloc& _Al_arg , _Arg0 && _Ax0 , _Arg1 && _Ax1, _Arg2 && _Ax2, _Arg3 && _Ax3 , _Arg4 && _Ax4)
	{	
	typedef _Ref_count_obj_alloc<_Ty, _Alloc> _Refoa;
	typename _Alloc::template rebind<_Refoa>::other _Alref = _Al_arg;

	_Refoa * _Rx = _Alref.allocate(1);

	try {
		new (_Rx) _Refoa(_Al_arg , ::std:: forward<_Arg0>(_Ax0) , ::std:: forward<_Arg1>(_Ax1), ::std:: forward<_Arg2>(_Ax2), ::std:: forward<_Arg3>(_Ax3) , ::std:: forward<_Arg4>(_Ax4));
	} catch (...) {
		_Alref.deallocate(_Rx, 1);
	throw;
	}

	shared_ptr<_Ty> _Ret;
	_Ret._Resetp0(_Rx->_Getptr(), _Rx);
	return (_Ret);
	}
 #line 65 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"





#line 272 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"






#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 37 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 47 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 55 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

































#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 265 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 267 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 269 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 271 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"



 












 












 
	
template<class _Ty , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5> inline
	shared_ptr<_Ty> make_shared(_Arg0 && _Ax0 , _Arg1 && _Ax1, _Arg2 && _Ax2, _Arg3 && _Ax3, _Arg4 && _Ax4 , _Arg5 && _Ax5)
	{	
	_Ref_count_obj<_Ty> * _Rx = new _Ref_count_obj<_Ty>(::std:: forward<_Arg0>(_Ax0) , ::std:: forward<_Arg1>(_Ax1), ::std:: forward<_Arg2>(_Ax2), ::std:: forward<_Arg3>(_Ax3), ::std:: forward<_Arg4>(_Ax4) , ::std:: forward<_Arg5>(_Ax5));

	shared_ptr<_Ty> _Ret;
	_Ret._Resetp0(_Rx->_Getptr(), _Rx);
	return (_Ret);
	}

	
template<class _Ty,
	class _Alloc , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5> inline
		shared_ptr<_Ty> allocate_shared(
			const _Alloc& _Al_arg , _Arg0 && _Ax0 , _Arg1 && _Ax1, _Arg2 && _Ax2, _Arg3 && _Ax3, _Arg4 && _Ax4 , _Arg5 && _Ax5)
	{	
	typedef _Ref_count_obj_alloc<_Ty, _Alloc> _Refoa;
	typename _Alloc::template rebind<_Refoa>::other _Alref = _Al_arg;

	_Refoa * _Rx = _Alref.allocate(1);

	try {
		new (_Rx) _Refoa(_Al_arg , ::std:: forward<_Arg0>(_Ax0) , ::std:: forward<_Arg1>(_Ax1), ::std:: forward<_Arg2>(_Ax2), ::std:: forward<_Arg3>(_Ax3), ::std:: forward<_Arg4>(_Ax4) , ::std:: forward<_Arg5>(_Ax5));
	} catch (...) {
		_Alref.deallocate(_Rx, 1);
	throw;
	}

	shared_ptr<_Ty> _Ret;
	_Ret._Resetp0(_Rx->_Getptr(), _Rx);
	return (_Ret);
	}
 #line 65 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"





#line 272 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"






#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 41 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 47 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 55 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 63 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

























#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 265 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 267 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 269 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 271 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"



 












 












 
	
template<class _Ty , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6> inline
	shared_ptr<_Ty> make_shared(_Arg0 && _Ax0 , _Arg1 && _Ax1, _Arg2 && _Ax2, _Arg3 && _Ax3, _Arg4 && _Ax4, _Arg5 && _Ax5 , _Arg6 && _Ax6)
	{	
	_Ref_count_obj<_Ty> * _Rx = new _Ref_count_obj<_Ty>(::std:: forward<_Arg0>(_Ax0) , ::std:: forward<_Arg1>(_Ax1), ::std:: forward<_Arg2>(_Ax2), ::std:: forward<_Arg3>(_Ax3), ::std:: forward<_Arg4>(_Ax4), ::std:: forward<_Arg5>(_Ax5) , ::std:: forward<_Arg6>(_Ax6));

	shared_ptr<_Ty> _Ret;
	_Ret._Resetp0(_Rx->_Getptr(), _Rx);
	return (_Ret);
	}

	
template<class _Ty,
	class _Alloc , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6> inline
		shared_ptr<_Ty> allocate_shared(
			const _Alloc& _Al_arg , _Arg0 && _Ax0 , _Arg1 && _Ax1, _Arg2 && _Ax2, _Arg3 && _Ax3, _Arg4 && _Ax4, _Arg5 && _Ax5 , _Arg6 && _Ax6)
	{	
	typedef _Ref_count_obj_alloc<_Ty, _Alloc> _Refoa;
	typename _Alloc::template rebind<_Refoa>::other _Alref = _Al_arg;

	_Refoa * _Rx = _Alref.allocate(1);

	try {
		new (_Rx) _Refoa(_Al_arg , ::std:: forward<_Arg0>(_Ax0) , ::std:: forward<_Arg1>(_Ax1), ::std:: forward<_Arg2>(_Ax2), ::std:: forward<_Arg3>(_Ax3), ::std:: forward<_Arg4>(_Ax4), ::std:: forward<_Arg5>(_Ax5) , ::std:: forward<_Arg6>(_Ax6));
	} catch (...) {
		_Alref.deallocate(_Rx, 1);
	throw;
	}

	shared_ptr<_Ty> _Ret;
	_Ret._Resetp0(_Rx->_Getptr(), _Rx);
	return (_Ret);
	}
 #line 65 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"





#line 272 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"






#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 45 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 47 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 55 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 63 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 71 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

















#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 265 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 267 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 269 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 271 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"



 












 












 
	
template<class _Ty , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7> inline
	shared_ptr<_Ty> make_shared(_Arg0 && _Ax0 , _Arg1 && _Ax1, _Arg2 && _Ax2, _Arg3 && _Ax3, _Arg4 && _Ax4, _Arg5 && _Ax5, _Arg6 && _Ax6 , _Arg7 && _Ax7)
	{	
	_Ref_count_obj<_Ty> * _Rx = new _Ref_count_obj<_Ty>(::std:: forward<_Arg0>(_Ax0) , ::std:: forward<_Arg1>(_Ax1), ::std:: forward<_Arg2>(_Ax2), ::std:: forward<_Arg3>(_Ax3), ::std:: forward<_Arg4>(_Ax4), ::std:: forward<_Arg5>(_Ax5), ::std:: forward<_Arg6>(_Ax6) , ::std:: forward<_Arg7>(_Ax7));

	shared_ptr<_Ty> _Ret;
	_Ret._Resetp0(_Rx->_Getptr(), _Rx);
	return (_Ret);
	}

	
template<class _Ty,
	class _Alloc , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7> inline
		shared_ptr<_Ty> allocate_shared(
			const _Alloc& _Al_arg , _Arg0 && _Ax0 , _Arg1 && _Ax1, _Arg2 && _Ax2, _Arg3 && _Ax3, _Arg4 && _Ax4, _Arg5 && _Ax5, _Arg6 && _Ax6 , _Arg7 && _Ax7)
	{	
	typedef _Ref_count_obj_alloc<_Ty, _Alloc> _Refoa;
	typename _Alloc::template rebind<_Refoa>::other _Alref = _Al_arg;

	_Refoa * _Rx = _Alref.allocate(1);

	try {
		new (_Rx) _Refoa(_Al_arg , ::std:: forward<_Arg0>(_Ax0) , ::std:: forward<_Arg1>(_Ax1), ::std:: forward<_Arg2>(_Ax2), ::std:: forward<_Arg3>(_Ax3), ::std:: forward<_Arg4>(_Ax4), ::std:: forward<_Arg5>(_Ax5), ::std:: forward<_Arg6>(_Ax6) , ::std:: forward<_Arg7>(_Ax7));
	} catch (...) {
		_Alref.deallocate(_Rx, 1);
	throw;
	}

	shared_ptr<_Ty> _Ret;
	_Ret._Resetp0(_Rx->_Getptr(), _Rx);
	return (_Ret);
	}
 #line 65 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"





#line 272 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"






#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 49 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 47 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 55 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 63 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 71 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 79 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 









#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 265 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 267 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 269 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 271 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"



 












 












 
	
template<class _Ty , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8> inline
	shared_ptr<_Ty> make_shared(_Arg0 && _Ax0 , _Arg1 && _Ax1, _Arg2 && _Ax2, _Arg3 && _Ax3, _Arg4 && _Ax4, _Arg5 && _Ax5, _Arg6 && _Ax6, _Arg7 && _Ax7 , _Arg8 && _Ax8)
	{	
	_Ref_count_obj<_Ty> * _Rx = new _Ref_count_obj<_Ty>(::std:: forward<_Arg0>(_Ax0) , ::std:: forward<_Arg1>(_Ax1), ::std:: forward<_Arg2>(_Ax2), ::std:: forward<_Arg3>(_Ax3), ::std:: forward<_Arg4>(_Ax4), ::std:: forward<_Arg5>(_Ax5), ::std:: forward<_Arg6>(_Ax6), ::std:: forward<_Arg7>(_Ax7) , ::std:: forward<_Arg8>(_Ax8));

	shared_ptr<_Ty> _Ret;
	_Ret._Resetp0(_Rx->_Getptr(), _Rx);
	return (_Ret);
	}

	
template<class _Ty,
	class _Alloc , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8> inline
		shared_ptr<_Ty> allocate_shared(
			const _Alloc& _Al_arg , _Arg0 && _Ax0 , _Arg1 && _Ax1, _Arg2 && _Ax2, _Arg3 && _Ax3, _Arg4 && _Ax4, _Arg5 && _Ax5, _Arg6 && _Ax6, _Arg7 && _Ax7 , _Arg8 && _Ax8)
	{	
	typedef _Ref_count_obj_alloc<_Ty, _Alloc> _Refoa;
	typename _Alloc::template rebind<_Refoa>::other _Alref = _Al_arg;

	_Refoa * _Rx = _Alref.allocate(1);

	try {
		new (_Rx) _Refoa(_Al_arg , ::std:: forward<_Arg0>(_Ax0) , ::std:: forward<_Arg1>(_Ax1), ::std:: forward<_Arg2>(_Ax2), ::std:: forward<_Arg3>(_Ax3), ::std:: forward<_Arg4>(_Ax4), ::std:: forward<_Arg5>(_Ax5), ::std:: forward<_Arg6>(_Ax6), ::std:: forward<_Arg7>(_Ax7) , ::std:: forward<_Arg8>(_Ax8));
	} catch (...) {
		_Alref.deallocate(_Rx, 1);
	throw;
	}

	shared_ptr<_Ty> _Ret;
	_Ret._Resetp0(_Rx->_Getptr(), _Rx);
	return (_Ret);
	}
 #line 65 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"





#line 272 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"






#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 53 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 47 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 55 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 63 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 71 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 79 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 87 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  

 

#line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 265 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 267 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 269 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 271 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"



 












 












 
	
template<class _Ty , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9> inline
	shared_ptr<_Ty> make_shared(_Arg0 && _Ax0 , _Arg1 && _Ax1, _Arg2 && _Ax2, _Arg3 && _Ax3, _Arg4 && _Ax4, _Arg5 && _Ax5, _Arg6 && _Ax6, _Arg7 && _Ax7, _Arg8 && _Ax8 , _Arg9 && _Ax9)
	{	
	_Ref_count_obj<_Ty> * _Rx = new _Ref_count_obj<_Ty>(::std:: forward<_Arg0>(_Ax0) , ::std:: forward<_Arg1>(_Ax1), ::std:: forward<_Arg2>(_Ax2), ::std:: forward<_Arg3>(_Ax3), ::std:: forward<_Arg4>(_Ax4), ::std:: forward<_Arg5>(_Ax5), ::std:: forward<_Arg6>(_Ax6), ::std:: forward<_Arg7>(_Ax7), ::std:: forward<_Arg8>(_Ax8) , ::std:: forward<_Arg9>(_Ax9));

	shared_ptr<_Ty> _Ret;
	_Ret._Resetp0(_Rx->_Getptr(), _Rx);
	return (_Ret);
	}

	
template<class _Ty,
	class _Alloc , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9> inline
		shared_ptr<_Ty> allocate_shared(
			const _Alloc& _Al_arg , _Arg0 && _Ax0 , _Arg1 && _Ax1, _Arg2 && _Ax2, _Arg3 && _Ax3, _Arg4 && _Ax4, _Arg5 && _Ax5, _Arg6 && _Ax6, _Arg7 && _Ax7, _Arg8 && _Ax8 , _Arg9 && _Ax9)
	{	
	typedef _Ref_count_obj_alloc<_Ty, _Alloc> _Refoa;
	typename _Alloc::template rebind<_Refoa>::other _Alref = _Al_arg;

	_Refoa * _Rx = _Alref.allocate(1);

	try {
		new (_Rx) _Refoa(_Al_arg , ::std:: forward<_Arg0>(_Ax0) , ::std:: forward<_Arg1>(_Ax1), ::std:: forward<_Arg2>(_Ax2), ::std:: forward<_Arg3>(_Ax3), ::std:: forward<_Arg4>(_Ax4), ::std:: forward<_Arg5>(_Ax5), ::std:: forward<_Arg6>(_Ax6), ::std:: forward<_Arg7>(_Ax7), ::std:: forward<_Arg8>(_Ax8) , ::std:: forward<_Arg9>(_Ax9));
	} catch (...) {
		_Alref.deallocate(_Rx, 1);
	throw;
	}

	shared_ptr<_Ty> _Ret;
	_Ret._Resetp0(_Rx->_Getptr(), _Rx);
	return (_Ret);
	}
 #line 65 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxshared"





#line 272 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"






#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 57 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"




















#line 1891 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\memory"
 

 #line 1894 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\memory"

	
template<class _Ty>
	class weak_ptr
		: public _Ptr_base<_Ty>
	{	
	typedef typename _Ptr_base<_Ty>::_Elem _Elem;

public:
	weak_ptr()
		{	
		}

	template<class _Ty2>
		weak_ptr(const shared_ptr<_Ty2>& _Other,
			typename enable_if<is_convertible<_Ty2 *, _Ty *>::value,
				void *>::type * = 0)
		{	
		this->_Resetw(_Other);
		}

	weak_ptr(const weak_ptr& _Other)
		{	
		this->_Resetw(_Other);
		}

	template<class _Ty2>
		weak_ptr(const weak_ptr<_Ty2>& _Other,
			typename enable_if<is_convertible<_Ty2 *, _Ty *>::value,
				void *>::type * = 0)
		{	
		this->_Resetw(_Other);
		}

	~weak_ptr()
		{	
		this->_Decwref();
		}

	weak_ptr& operator=(const weak_ptr& _Right)
		{	
		this->_Resetw(_Right);
		return (*this);
		}

	template<class _Ty2>
		weak_ptr& operator=(const weak_ptr<_Ty2>& _Right)
		{	
		this->_Resetw(_Right);
		return (*this);
		}

	template<class _Ty2>
		weak_ptr& operator=(shared_ptr<_Ty2>& _Right)
		{	
		this->_Resetw(_Right);
		return (*this);
		}

	void reset()
		{	
		this->_Resetw();
		}

	void swap(weak_ptr& _Other)
		{	
		this->_Swap(_Other);
		}

	bool expired() const
		{	
		return (this->_Expired());
		}

	shared_ptr<_Ty> lock() const
		{	
		return (shared_ptr<_Elem>(*this, false));
		}
	};









template<class _Ty>
	void swap(weak_ptr<_Ty>& _W1, weak_ptr<_Ty>& _W2)
	{	
	_W1.swap(_W2);
	}

	
template<class _Ty> class enable_shared_from_this
	{	
public:
	typedef _Ty _EStype;

	shared_ptr<_Ty> shared_from_this()
		{	
		return (shared_ptr<_Ty>(_Wptr));
		}

	shared_ptr<const _Ty> shared_from_this() const
		{	
		return (shared_ptr<const _Ty>(_Wptr));
		}

protected:
	enable_shared_from_this()
		{	
		}

	enable_shared_from_this(const enable_shared_from_this&)
		{	
		}

	enable_shared_from_this& operator=(const enable_shared_from_this&)
		{	
		return (*this);
		}

	~enable_shared_from_this()
		{	
		}

private:
	template<class _Ty1,
		class _Ty2>
		friend void _Do_enable(
			_Ty1 *,
			enable_shared_from_this<_Ty2>*,
			_Ref_count_base *);

	mutable weak_ptr<_Ty> _Wptr;
	};

template<class _Ty1,
	class _Ty2>
	inline void _Do_enable(
		_Ty1 *_Ptr,
		enable_shared_from_this<_Ty2> *_Es,
		_Ref_count_base *_Refptr)
	{	
	_Es->_Wptr._Resetw(_Ptr, _Refptr);
	}
	}	
}
 #line 2045 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\memory"

 
namespace std {
	

	
template<class _Ty>
	struct default_delete
	{	
	typedef default_delete<_Ty> _Myt;

	default_delete()
		{	
		}

	template<class _Ty2>
		default_delete(const default_delete<_Ty2>&)
		{	
		}

	void operator()(_Ty *_Ptr) const
		{	
		if (0 < sizeof (_Ty))	
			delete _Ptr;
		}
	};

template<class _Ty>
	struct default_delete<_Ty[]>
	{	
	typedef default_delete<_Ty> _Myt;

	default_delete()
		{	
		}

	void operator()(_Ty *_Ptr) const
		{	
		if (0 < sizeof (_Ty))	
			delete[] _Ptr;
		}

	template<class _Other>
		void operator()(_Other *) const;	
	};

	
::std:: tr1::_No _Has_pointer_type(...);

template<class _Ty>
	::std:: tr1::_Yes _Has_pointer_type(_Ty *,
		typename _Ty::pointer * = 0);

template<class _Ty,
	class _Dx,
	bool>
	struct _Hold_pointer_type
	{	
	typedef _Ty *pointer;
	};

template<class _Ty,
	class _Dx>
	struct _Hold_pointer_type<_Ty, _Dx, true>
	{	
	typedef typename _Dx::pointer pointer;
	};

 



	
template<class _Ty,
	class _Dx,
	bool _Empty_deleter>
	class _Unique_ptr_base
	{	
public:
	typedef typename tr1::remove_reference<_Dx>::type _Dx_noref;
	typedef typename _Hold_pointer_type<_Ty, _Dx_noref, (sizeof (_Has_pointer_type((_Dx_noref *)0)) == sizeof (::std:: tr1::_Yes))>::pointer pointer;

	_Unique_ptr_base(pointer _Ptr, _Dx _Dt)
		: _Myptr(_Ptr), _Mydel(_Dt)
		{	
		}

	template<class _Ptr2,
		class _Dx2>
		_Unique_ptr_base(_Ptr2 _Ptr, _Dx2 _Dt)
		: _Myptr(_Ptr), _Mydel(_Dt)
		{	
		}

	_Dx_noref& get_deleter()
		{	
		return (_Mydel);
		}

	const _Dx_noref& get_deleter() const
		{	
		return (_Mydel);
		}

	pointer _Myptr;	
	_Dx _Mydel;		
	};

template<class _Ty,
	class _Dx>
	class _Unique_ptr_base<_Ty, _Dx, true>
		: public _Dx
	{	
public:
	typedef _Dx _Mybase;
	typedef typename tr1::remove_reference<_Dx>::type _Dx_noref;
	typedef typename _Hold_pointer_type<_Ty, _Dx_noref, (sizeof (_Has_pointer_type((_Dx_noref *)0)) == sizeof (::std:: tr1::_Yes))>::pointer pointer;

	_Unique_ptr_base(pointer _Ptr, _Dx _Dt)
		: _Myptr(_Ptr), _Mybase(_Dt)
		{	
		}

	template<class _Ptr2,
		class _Dx2>
		_Unique_ptr_base(_Ptr2 _Ptr, _Dx2 _Dt)
		: _Myptr(_Ptr), _Mybase(_Dt)
		{	
		}

	_Dx_noref& get_deleter()
		{	
		return (*this);
		}

	const _Dx_noref& get_deleter() const
		{	
		return (*this);
		}

	pointer _Myptr;	
	};

	
template<class _Ty,
	class _Dx>	
	class unique_ptr
		: public _Unique_ptr_base<_Ty, _Dx,
			tr1::is_empty<_Dx>::value
				|| tr1::is_same<default_delete<_Ty>, _Dx>::value>
	{	
public:
	typedef unique_ptr<_Ty, _Dx> _Myt;
	typedef _Unique_ptr_base<_Ty, _Dx,
		tr1::is_empty<_Dx>::value
			|| tr1::is_same<default_delete<_Ty>, _Dx>::value> _Mybase;
	typedef typename _Mybase::pointer pointer;
	typedef _Ty element_type;
	typedef _Dx deleter_type;

	unique_ptr()
		: _Mybase(pointer(), _Dx())
		{	
		static_assert(!is_pointer<_Dx>::value,
			"unique_ptr constructed with null deleter pointer");
		}

 
	unique_ptr(::std:: nullptr_t)
		: _Mybase(pointer(), _Dx())
		{	
		static_assert(!is_pointer<_Dx>::value,
			"unique_ptr constructed with null deleter pointer");
		}

	_Myt& operator=(::std:: nullptr_t)
		{	
		reset();
		return (*this);
		}
 #line 2227 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\memory"

	explicit unique_ptr(pointer _Ptr)
		: _Mybase(_Ptr, _Dx())
		{	
		static_assert(!is_pointer<_Dx>::value,
			"unique_ptr constructed with null deleter pointer");
		}

	unique_ptr(pointer _Ptr,
		typename _If<tr1::is_reference<_Dx>::value, _Dx,
			const typename tr1::remove_reference<_Dx>::type&>::_Type _Dt)
		: _Mybase(_Ptr, _Dt)
		{	
		}

	unique_ptr(pointer _Ptr, typename tr1::remove_reference<_Dx>::type&& _Dt)
		: _Mybase(_Ptr, ::std:: move(_Dt))
		{	


		}

	unique_ptr(unique_ptr&& _Right)
		: _Mybase(_Right.release(),
			::std:: forward<_Dx>(_Right.get_deleter()))
		{	
		}

	template<class _Ty2,
		class _Dx2>
		unique_ptr(unique_ptr<_Ty2, _Dx2>&& _Right)
			: _Mybase(_Right.release(),
				::std:: forward<_Dx2>(_Right.get_deleter()))
		{	
		}

	template<class _Ty2,
		class _Dx2>
		_Myt& operator=(unique_ptr<_Ty2, _Dx2>&& _Right)
		{	
		reset(_Right.release());
		this->get_deleter() = ::std:: move(_Right.get_deleter());
		return (*this);
		}

	_Myt& operator=(_Myt&& _Right)
		{	
		if (this != &_Right)
			{	
			reset(_Right.release());
			this->get_deleter() = ::std:: move(_Right.get_deleter());
			}
		return (*this);
		}

	void swap(_Myt&& _Right)
		{	
		if (this != &_Right)
			{	
			_Swap_adl(this->_Myptr, _Right._Myptr);
			_Swap_adl(this->get_deleter(),
				_Right.get_deleter());
			}
		}

	void swap(_Myt& _Right)
		{	
		_Swap_adl(this->_Myptr, _Right._Myptr);
		_Swap_adl(this->get_deleter(),
			_Right.get_deleter());
		}

	~unique_ptr()
		{	
		_Delete();
		}

	typename tr1::add_reference<_Ty>::type operator*() const
		{	
		return (*this->_Myptr);
		}

	pointer operator->() const
		{	
		return (&**this);
		}

	pointer get() const
		{	
		return (this->_Myptr);
		}

	operator ::std:: _Bool_type() const
		{	
		return (this->_Myptr != pointer() ? (&::std:: _Bool_struct::_Member) : 0);
		}

	pointer release()
		{	
		pointer _Ans = this->_Myptr;
		this->_Myptr = pointer();
		return (_Ans);
		}

	void reset(pointer _Ptr = pointer())
		{	
		if (_Ptr != this->_Myptr)
			{	
			_Delete();
			this->_Myptr = _Ptr;
			}
		}

private:
	void _Delete()
		{	
		if (this->_Myptr != pointer())
			this->get_deleter()(this->_Myptr);
		}

	unique_ptr(const _Myt&);	
	template<class _Ty2,
		class _Dx2>
		unique_ptr(const unique_ptr<_Ty2, _Dx2>&);	

	_Myt& operator=(const _Myt&);	
	template<class _Ty2,
		class _Dx2>
		_Myt& operator=(const unique_ptr<_Ty2, _Dx2>&);	
	};

	
template<class _Ty,
	class _Dx>
	class unique_ptr<_Ty[], _Dx>
		: public _Unique_ptr_base<_Ty, _Dx,
			tr1::is_empty<_Dx>::value
				|| tr1::is_same<default_delete<_Ty[]>, _Dx>::value>
	{	
public:
	typedef unique_ptr<_Ty[], _Dx> _Myt;
	typedef _Unique_ptr_base<_Ty, _Dx,
		tr1::is_empty<_Dx>::value
			|| tr1::is_same<default_delete<_Ty[]>, _Dx>::value> _Mybase;
	typedef typename _Mybase::pointer pointer;
	typedef _Ty element_type;
	typedef _Dx deleter_type;

	unique_ptr()
		: _Mybase(pointer(), _Dx())
		{	
		static_assert(!is_pointer<_Dx>::value,
			"unique_ptr constructed with null deleter pointer");
		}

	explicit unique_ptr(pointer _Ptr)
		: _Mybase(_Ptr, _Dx())
		{	
		static_assert(!is_pointer<_Dx>::value,
			"unique_ptr constructed with null deleter pointer");
		}

	unique_ptr(pointer _Ptr,
		typename _If<tr1::is_reference<_Dx>::value, _Dx,
			const typename tr1::remove_reference<_Dx>::type&>::_Type _Dt)
		: _Mybase(_Ptr, _Dt)
		{	
		}

public:
	unique_ptr(pointer _Ptr, typename tr1::remove_reference<_Dx>::type&& _Dt)
		: _Mybase(_Ptr, ::std:: move(_Dt))
		{	


		}

	unique_ptr(unique_ptr&& _Right)
		: _Mybase(_Right.release(),
			::std:: forward<_Dx>(_Right.get_deleter()))
		{	
		}

private:
	template<class _Ty2,
		class _Dx2>
		unique_ptr(unique_ptr<_Ty2, _Dx2>&& _Right);	

	template<class _Ty2,
		class _Dx2>
		_Myt& operator=(unique_ptr<_Ty2, _Dx2>&& _Right);	

public:
	_Myt& operator=(_Myt&& _Right)
		{	
		if (this != &_Right)
			{	
			reset(_Right.release());
			this->get_deleter() = ::std:: move(_Right.get_deleter());
			}
		return (*this);
		}

	void swap(_Myt&& _Right)
		{	
		if (this != &_Right)
			{	
			_Swap_adl(this->_Myptr, _Right._Myptr);
			_Swap_adl(this->get_deleter(),
				_Right.get_deleter());
			}
		}

 
	unique_ptr(::std:: nullptr_t)
		: _Mybase(pointer(), _Dx())
		{	
		static_assert(!is_pointer<_Dx>::value,
			"unique_ptr constructed with null deleter pointer");
		}

	_Myt& operator=(::std:: nullptr_t)
		{	
		reset();
		return (*this);
		}

	void reset(::std:: nullptr_t)
		{	
		if (this->_Myptr != 0)
			{	
			_Delete();
			this->_Myptr = 0;
			}
		}
 #line 2464 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\memory"

	void swap(_Myt& _Right)
		{	
		_Swap_adl(this->_Myptr, _Right._Myptr);
		_Swap_adl(this->get_deleter(), _Right.get_deleter());
		}

	~unique_ptr()
		{	
		_Delete();
		}

	typename tr1::add_reference<_Ty>::type operator[](size_t _Idx) const
		{	
		return (this->_Myptr[_Idx]);
		}

	pointer get() const
		{	
		return (this->_Myptr);
		}

	operator ::std:: _Bool_type() const
		{	
		return (this->_Myptr != 0 ? (&::std:: _Bool_struct::_Member) : 0);
		}

	pointer release()
		{	
		pointer _Ans = this->_Myptr;
		this->_Myptr = pointer();
		return (_Ans);
		}

	void reset(pointer _Ptr = pointer())
		{	
		if (_Ptr != this->_Myptr)
			{	
			_Delete();
			this->_Myptr = _Ptr;
			}
		}

private:
	template<class _Ptr2>
		explicit unique_ptr(_Ptr2);	

	template<class _Ptr2,
		class _Dx2>
		unique_ptr(_Ptr2, _Dx2);	

	unique_ptr(const _Myt&);	
	template<class _Ty2,
		class _Dx2>
		unique_ptr(const unique_ptr<_Ty2, _Dx2>&);	

	_Myt& operator=(const _Myt&);	
	template<class _Ty2,
		class _Dx2>
		_Myt& operator=(const unique_ptr<_Ty2, _Dx2>&);	

	template<class _Ptr2>
		void reset(_Ptr2);	

	void _Delete()
		{	
		this->get_deleter()(this->_Myptr);
		}
	};

template<class _Ty,
	class _Dx>
	void swap(unique_ptr<_Ty, _Dx>& _Left,
		unique_ptr<_Ty, _Dx>& _Right)
	{	
	_Left.swap(_Right);
	}

template<class _Ty,
	class _Dx>
	void swap(unique_ptr<_Ty, _Dx>& _Left,
		unique_ptr<_Ty, _Dx>&& _Right)
	{	
	_Left.swap(_Right);
	}

template<class _Ty,
	class _Dx>
	void swap(unique_ptr<_Ty, _Dx>&& _Left,
		unique_ptr<_Ty, _Dx>& _Right)
	{	
	_Right.swap(_Left);
	}

template<class _Ty1,
	class _Dx1,
	class _Ty2,
	class _Dx2>
	bool operator==(const unique_ptr<_Ty1, _Dx1>& _Left,
		const unique_ptr<_Ty2, _Dx2>& _Right)
	{	
	return (_Left.get() == _Right.get());
	}

template<class _Ty1,
	class _Dx1,
	class _Ty2,
	class _Dx2>
	bool operator!=(const unique_ptr<_Ty1, _Dx1>& _Left,
		const unique_ptr<_Ty2, _Dx2>& _Right)
	{	
	return (!(_Left == _Right));
	}

template<class _Ty1,
	class _Dx1,
	class _Ty2,
	class _Dx2>
	bool operator<(const unique_ptr<_Ty1, _Dx1>& _Left,
		const unique_ptr<_Ty2, _Dx2>& _Right)
	{	
	return (_Left.get() < _Right.get());
	}

template<class _Ty1,
	class _Dx1,
	class _Ty2,
	class _Dx2>
	bool operator>=(const unique_ptr<_Ty1, _Dx1>& _Left,
		const unique_ptr<_Ty2, _Dx2>& _Right)
	{	
	return (!(_Left < _Right));
	}

template<class _Ty1,
	class _Dx1,
	class _Ty2,
	class _Dx2>
	bool operator>(const unique_ptr<_Ty1, _Dx1>& _Left,
		const unique_ptr<_Ty2, _Dx2>& _Right)
	{	
	return (_Right < _Left);
	}

template<class _Ty1,
	class _Dx1,
	class _Ty2,
	class _Dx2>
	bool operator<=(const unique_ptr<_Ty1, _Dx1>& _Left,
		const unique_ptr<_Ty2, _Dx2>& _Right)
	{	
	return (!(_Right < _Left));
	}

		
	namespace pointer_safety {
enum pointer_safety {	
	relaxed,
	preferred,
	strict
	};
	}	

typedef pointer_safety::pointer_safety _Pointer_safety;

inline void declare_reachable(void *)
	{	
	}

template<class _Ty> inline
	_Ty *undeclare_reachable(_Ty *_Ptr)
	{	
	return (_Ptr);
	}

inline void declare_no_pointers(char *, size_t)
	{	
	}

inline void undeclare_no_pointers(char *, size_t)
	{	
	}

inline _Pointer_safety get_pointer_safety()
	{	
	return (pointer_safety::relaxed);
	}

 
using tr1::allocate_shared;
using tr1::bad_weak_ptr;
using tr1::const_pointer_cast;
using tr1::dynamic_pointer_cast;
using tr1::enable_shared_from_this;
using tr1::get_deleter;
using tr1::make_shared;
using tr1::shared_ptr;
using tr1::static_pointer_cast;
using tr1::swap;
using tr1::weak_ptr;
 #line 2665 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\memory"

		
template<class _Ty>
	struct owner_less;	

template<class _Ty>
	struct owner_less<shared_ptr<_Ty> >
		: public binary_function<shared_ptr<_Ty>, shared_ptr<_Ty>, bool>
	{	
	bool operator()(const shared_ptr<_Ty>& _Left,
		const shared_ptr<_Ty>& _Right) const
		{	
		return (_Left.owner_before(_Right));
		}

	bool operator()(const shared_ptr<_Ty>& _Left,
		const weak_ptr<_Ty>& _Right) const
		{	
		return (_Left.owner_before(_Right));
		}

	bool operator()(const weak_ptr<_Ty>& _Left,
		const shared_ptr<_Ty>& _Right) const
		{	
		return (_Left.owner_before(_Right));
		}
	};

template<class _Ty>
	struct owner_less<weak_ptr<_Ty> >
		: public binary_function<weak_ptr<_Ty>, weak_ptr<_Ty>, bool>
	{	
	bool operator()(const weak_ptr<_Ty>& _Left,
		const weak_ptr<_Ty>& _Right) const
		{	
		return (_Left.owner_before(_Right));
		}

	bool operator()(const weak_ptr<_Ty>& _Left,
		const shared_ptr<_Ty>& _Right) const
		{	
		return (_Left.owner_before(_Right));
		}

	bool operator()(const shared_ptr<_Ty>& _Left,
		const weak_ptr<_Ty>& _Right) const
		{	
		return (_Left.owner_before(_Right));
		}
	};
}
 #line 2717 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\memory"

 

 #pragma warning(pop)
 #pragma pack(pop)

#line 2724 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\memory"
#line 2725 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\memory"























#line 7 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\algorithm"

 #pragma pack(push,8)
 #pragma warning(push,3)
 #pragma warning(disable: 4244)

namespace std {
		
const int _ISORT_MAX = 32;	

		
template<class _InIt,
	class _Fn1> inline
	_Fn1 _For_each(_InIt _First, _InIt _Last, _Fn1 _Func)
	{	
	for (; _First != _Last; ++_First)
		_Func(*_First);
	return (_Func);
	}

template<class _InIt,
	class _Fn1> inline
	_Fn1 for_each(_InIt _First, _InIt _Last, _Fn1 _Func)
	{	
	;
	;
	return (_For_each(_Unchecked(_First), _Unchecked(_Last), _Func));
	}

		
template<class _InIt,
	class _Ty> inline
	_InIt _Find(_InIt _First, _InIt _Last, const _Ty& _Val)
	{	
	for (; _First != _Last; ++_First)
		if (*_First == _Val)
			break;
	return (_First);
	}

inline const char *_Find(const char *_First, const char *_Last, int _Val)
	{	
	_First = (const char *):: memchr(_First, _Val, _Last - _First);
	return (_First == 0 ? _Last : _First);
	}

inline const signed char *_Find(const signed char *_First,
	const signed char *_Last, int _Val)
	{	
	_First = (const signed char *):: memchr(_First, _Val,
		_Last - _First);
	return (_First == 0 ? _Last : _First);
	}

inline const unsigned char *_Find(const unsigned char *_First,
	const unsigned char *_Last, int _Val)
	{	
	_First = (const unsigned char *):: memchr(_First, _Val,
		_Last - _First);
	return (_First == 0 ? _Last : _First);
	}

template<class _InIt,
	class _Ty> inline
	_InIt find(_InIt _First, _InIt _Last, const _Ty& _Val)
	{	
	;
	return (_Rechecked(_First,
		_Find(_Unchecked(_First), _Unchecked(_Last), _Val)));
	}

		
template<class _InIt,
	class _Pr> inline
	_InIt _Find_if(_InIt _First, _InIt _Last, _Pr _Pred)
	{	
	for (; _First != _Last; ++_First)
		if (_Pred(*_First))
			break;
	return (_First);
	}

template<class _InIt,
	class _Pr> inline
	_InIt find_if(_InIt _First, _InIt _Last, _Pr _Pred)
	{	
	;
	;
	return (_Rechecked(_First,
		_Find_if(_Unchecked(_First), _Unchecked(_Last), _Pred)));
	}

		
template<class _FwdIt> inline
	_FwdIt _Adjacent_find(_FwdIt _First, _FwdIt _Last)
	{	
	if (_First != _Last)
		for (_FwdIt _Firstb; (_Firstb = _First), ++_First != _Last; )
			if (*_Firstb == *_First)
				return (_Firstb);
	return (_Last);
	}

template<class _FwdIt> inline
	_FwdIt adjacent_find(_FwdIt _First, _FwdIt _Last)
	{	
	;
	return (_Rechecked(_First,
		_Adjacent_find(_Unchecked(_First), _Unchecked(_Last))));
	}

		
template<class _FwdIt,
	class _Pr> inline
	_FwdIt _Adjacent_find(_FwdIt _First, _FwdIt _Last, _Pr _Pred)
	{	
	if (_First != _Last)
		for (_FwdIt _Firstb; (_Firstb = _First), ++_First != _Last; )
			if (_Pred(*_Firstb, *_First))
				return (_Firstb);
	return (_Last);
	}

template<class _FwdIt,
	class _Pr> inline
	_FwdIt adjacent_find(_FwdIt _First, _FwdIt _Last, _Pr _Pred)
	{	
	;
	;
	return (_Rechecked(_First,
		_Adjacent_find(_Unchecked(_First), _Unchecked(_Last), _Pred)));
	}

		
template<class _InIt,
	class _Ty> inline
	typename iterator_traits<_InIt>::difference_type
		_Count(_InIt _First, _InIt _Last, const _Ty& _Val)
	{	
	typename iterator_traits<_InIt>::difference_type _Count = 0;

	for (; _First != _Last; ++_First)
		if (*_First == _Val)
			++_Count;
	return (_Count);
	}

template<class _InIt,
	class _Ty> inline
	typename iterator_traits<_InIt>::difference_type
		count(_InIt _First, _InIt _Last, const _Ty& _Val)
	{	
	;
	return (_Count(_Unchecked(_First), _Unchecked(_Last), _Val));
	}

		
template<class _InIt,
	class _Pr> inline
	typename iterator_traits<_InIt>::difference_type
		_Count_if(_InIt _First, _InIt _Last, _Pr _Pred)
	{	
	typename iterator_traits<_InIt>::difference_type _Count = 0;

	for (; _First != _Last; ++_First)
		if (_Pred(*_First))
			++_Count;
	return (_Count);
	}

template<class _InIt,
	class _Pr> inline
	typename iterator_traits<_InIt>::difference_type
		count_if(_InIt _First, _InIt _Last, _Pr _Pred)
	{	
	;
	;
	return (_Count_if(_Unchecked(_First), _Unchecked(_Last), _Pred));
	}

 
		
template<class _InIt,
	class _Pr> inline
	bool _All_of(_InIt _First, _InIt _Last, _Pr _Pred)
	{	
	for (; _First != _Last; ++_First)
		if (!_Pred(*_First))
			return (false);
	return (true);
	}

template<class _InIt,
	class _Pr> inline
	bool all_of(_InIt _First, _InIt _Last, _Pr _Pred)
	{	
	;
	;
	return (_All_of(_Unchecked(_First), _Unchecked(_Last), _Pred));
	}

		
template<class _InIt,
	class _Pr> inline
	bool _Any_of(_InIt _First, _InIt _Last, _Pr _Pred)
	{	
	for (; _First != _Last; ++_First)
		if (_Pred(*_First))
			return (true);
	return (false);
	}

template<class _InIt,
	class _Pr> inline
	bool any_of(_InIt _First, _InIt _Last, _Pr _Pred)
	{	
	;
	;
	return (_Any_of(_Unchecked(_First), _Unchecked(_Last), _Pred));
	}

		
template<class _InIt,
	class _Pr> inline
	bool _None_of(_InIt _First, _InIt _Last, _Pr _Pred)
	{	
	for (; _First != _Last; ++_First)
		if (_Pred(*_First))
			return (false);
	return (true);
	}

template<class _InIt,
	class _Pr> inline
	bool none_of(_InIt _First, _InIt _Last, _Pr _Pred)
	{	
	;
	;
	return (_None_of(_Unchecked(_First), _Unchecked(_Last), _Pred));
	}

		
template<class _InIt,
	class _Pr> inline
	_InIt _Find_if_not(_InIt _First, _InIt _Last, _Pr _Pred)
	{	
	for (; _First != _Last; ++_First)
		if (!_Pred(*_First))
			break;
	return (_First);
	}

template<class _InIt,
	class _Pr> inline
	_InIt find_if_not(_InIt _First, _InIt _Last, _Pr _Pred)
	{	
	;
	;
	return (_Rechecked(_First,
		_Find_if_not(_Unchecked(_First), _Unchecked(_Last), _Pred)));
	}

		
template<class _InIt,
	class _OutIt,
	class _Pr> inline
	_OutIt _Copy_if(_InIt _First, _InIt _Last, _OutIt _Dest,
		_Pr _Pred)
	{	
	for (; _First != _Last; ++_First)
		if (_Pred(*_First))
			*_Dest++ = *_First;
	return (_Dest);
	}

 
template<class _InIt,
	class _OutIt,
	class _Pr> inline
	_OutIt copy_if(_InIt _First, _InIt _Last, _OutIt _Dest,
		_Pr _Pred)
	{	
	return (_Copy_if(_Unchecked(_First), _Unchecked(_Last),
		_Dest, _Pred));
	}

 














































#line 340 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\algorithm"

		
template<class _InIt,
	class _OutIt1,
	class _OutIt2,
	class _Pr> inline
	::std:: pair<_OutIt1, _OutIt2>
		_Partition_copy(_InIt _First, _InIt _Last,
			_OutIt1 _Dest1, _OutIt2 _Dest2, _Pr _Pred)
	{	
	for (; _First != _Last; ++_First)
		if (_Pred(*_First))
			*_Dest1++ = *_First;
		else
			*_Dest2++ = *_First;
	return (::std:: pair<_OutIt1, _OutIt2>( _Dest1, _Dest2));
	}

 
template<class _InIt,
	class _OutIt1,
	class _OutIt2,
	class _Pr> inline
	::std:: pair<_OutIt1, _OutIt2>
		partition_copy(_InIt _First, _InIt _Last,
			_OutIt1 _Dest1, _OutIt2 _Dest2, _Pr _Pred)
	{	
	return (::std:: pair<_OutIt1, _OutIt2>(
		_Partition_copy(_Unchecked(_First), _Unchecked(_Last),
			_Dest1, _Dest2, _Pred)));
	}

 




































































































































#line 506 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\algorithm"

		
template<class _InIt,
	class _Pr> inline
	bool _Is_partitioned(_InIt _First, _InIt _Last, _Pr _Pred)
	{	
	for (; _First != _Last; ++_First)
		if (!_Pred(*_First))
			break;	
	for (; _First != _Last; ++_First)
		if (_Pred(*_First))
			return (false);	
	return (true);
	}

template<class _InIt,
	class _Pr> inline
	bool is_partitioned(_InIt _First, _InIt _Last, _Pr _Pred)
	{	
	;
	;
	return (_Is_partitioned(_Unchecked(_First), _Unchecked(_Last),
		_Pred));
	}

		
template<class _FwdIt,
	class _Pr> inline
	_FwdIt _Partition_point(_FwdIt _First, _FwdIt _Last, _Pr _Pred)
	{	
	for (; _First != _Last; ++_First)
		if (!_Pred(*_First))
			break;	
	return (_First);
	}

template<class _FwdIt,
	class _Pr> inline
	_FwdIt partition_point(_FwdIt _First, _FwdIt _Last, _Pr _Pred)
	{	
	;
	;
	return (_Rechecked(_First,
		_Partition_point(_Unchecked(_First), _Unchecked(_Last),
			_Pred)));
	}
 #line 553 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\algorithm"

		
template<class _FwdIt1,
	class _FwdIt2,
	class _Diff1,
	class _Diff2> inline
	_FwdIt1 _Search(_FwdIt1 _First1, _FwdIt1 _Last1,
		_FwdIt2 _First2, _FwdIt2 _Last2, _Diff1 *, _Diff2 *)
	{	
	_Diff1 _Count1 = 0;
	_Distance(_First1, _Last1, _Count1);
	_Diff2 _Count2 = 0;
	_Distance(_First2, _Last2, _Count2);

	for (; _Count2 <= _Count1; ++_First1, --_Count1)
		{	
		_FwdIt1 _Mid1 = _First1;
		for (_FwdIt2 _Mid2 = _First2; ; ++_Mid1, ++_Mid2)
			if (_Mid2 == _Last2)
				return (_First1);
			else if (!(*_Mid1 == *_Mid2))
				break;
		}
	return (_Last1);
	}

template<class _FwdIt1,
	class _FwdIt2> inline
	_FwdIt1 search(_FwdIt1 _First1, _FwdIt1 _Last1,
		_FwdIt2 _First2, _FwdIt2 _Last2)
	{	
	;
	;
	return (_Rechecked(_First1,
		_Search(_Unchecked(_First1), _Unchecked(_Last1),
			_Unchecked(_First2), _Unchecked(_Last2),
			_Dist_type(_First1), _Dist_type(_First2))));
	}

		
template<class _FwdIt1,
	class _FwdIt2,
	class _Diff1,
	class _Diff2,
	class _Pr> inline
	_FwdIt1 _Search(_FwdIt1 _First1, _FwdIt1 _Last1,
		_FwdIt2 _First2, _FwdIt2 _Last2, _Pr _Pred, _Diff1 *, _Diff2 *)
	{	
	_Diff1 _Count1 = 0;
	_Distance(_First1, _Last1, _Count1);
	_Diff2 _Count2 = 0;
	_Distance(_First2, _Last2, _Count2);

	for (; _Count2 <= _Count1; ++_First1, --_Count1)
		{	
		_FwdIt1 _Mid1 = _First1;
		for (_FwdIt2 _Mid2 = _First2; ; ++_Mid1, ++_Mid2)
			if (_Mid2 == _Last2)
				return (_First1);
			else if (!_Pred(*_Mid1, *_Mid2))
				break;
		}
	return (_Last1);
	}

template<class _FwdIt1,
	class _FwdIt2,
	class _Pr> inline
	_FwdIt1 search(_FwdIt1 _First1, _FwdIt1 _Last1,
		_FwdIt2 _First2, _FwdIt2 _Last2, _Pr _Pred)
	{	
	;
	;
	;
	return (_Rechecked(_First1,
		_Search(_Unchecked(_First1), _Unchecked(_Last1),
			_Unchecked(_First2), _Unchecked(_Last2), _Pred,
			_Dist_type(_First1), _Dist_type(_First2))));
	}

		
template<class _FwdIt1,
	class _Diff2,
	class _Ty> inline
	_FwdIt1 _Search_n(_FwdIt1 _First1, _FwdIt1 _Last1,
		_Diff2 _Count, const _Ty& _Val, forward_iterator_tag)
	{	
	if (_Count <= 0)
		return (_First1);

	for (; _First1 != _Last1; ++_First1)
		if (*_First1 == _Val)
			{	
			_FwdIt1 _Mid1 = _First1;

			for (_Diff2 _Count1 = _Count; ; )
				if (--_Count1 == 0)
					return (_First1);	
				else if (++_Mid1 == _Last1)
					return (_Last1);	
				else if (!(*_Mid1 == _Val))
					break;	

			_First1 = _Mid1;	
			}
	return (_Last1);
	}

template<class _FwdIt1,
	class _Diff2,
	class _Ty> inline
	_FwdIt1 _Search_n(_FwdIt1 _First1, _FwdIt1 _Last1,
		_Diff2 _Count, const _Ty& _Val, random_access_iterator_tag)
	{	
	if (_Count <= 0)
		return (_First1);

	_FwdIt1 _Oldfirst1 = _First1;
	for (_Diff2 _Inc = 0; _Count <= _Last1 - _Oldfirst1; )
		{	
		_First1 = _Oldfirst1 + _Inc;
		if (*_First1 == _Val)
			{	
			_Diff2 _Count1 = _Count;
			_FwdIt1 _Mid1 = _First1;

			for (; _Oldfirst1 != _First1 && _First1[-1] == _Val; --_First1)
				--_Count1;	

			if (_Count1 <= _Last1 - _Mid1)
				for (; ; )	
					if (--_Count1 == 0)
						return (_First1);	
					else if (!(*++_Mid1 == _Val))
						break;	

			_Oldfirst1 = ++_Mid1;	
			_Inc = 0;
			}
		else
			{	
			_Oldfirst1 = _First1 + 1;
			_Inc = _Count - 1;
			}
		}
	return (_Last1);
	}

template<class _FwdIt1,
	class _Diff2,
	class _Ty> inline
	_FwdIt1 search_n(_FwdIt1 _First1, _FwdIt1 _Last1,
		_Diff2 _Count, const _Ty& _Val)
	{	
	;
	return (_Rechecked(_First1,
		_Search_n(_Unchecked(_First1), _Unchecked(_Last1), _Count, _Val,
			_Iter_cat(_First1))));
	}

		
template<class _FwdIt1,
	class _Diff2,
	class _Ty,
	class _Pr> inline
	_FwdIt1 _Search_n(_FwdIt1 _First1, _FwdIt1 _Last1,
		_Diff2 _Count, const _Ty& _Val, _Pr _Pred, forward_iterator_tag)
	{	
	if (_Count <= 0)
		return (_First1);

	for (; _First1 != _Last1; ++_First1)
		if (_Pred(*_First1, _Val))
			{	
			_FwdIt1 _Mid1 = _First1;

			for (_Diff2 _Count1 = _Count; ; )
				if (--_Count1 == 0)
					return (_First1);	
				else if (++_Mid1 == _Last1)
					return (_Last1);	
				else if (!_Pred(*_Mid1, _Val))
					break;	

			_First1 = _Mid1;	
			}
	return (_Last1);
	}

template<class _FwdIt1,
	class _Diff2,
	class _Ty,
	class _Pr> inline
	_FwdIt1 _Search_n(_FwdIt1 _First1, _FwdIt1 _Last1,
		_Diff2 _Count, const _Ty& _Val, _Pr _Pred, random_access_iterator_tag)
	{	
	if (_Count <= 0)
		return (_First1);

	_FwdIt1 _Oldfirst1 = _First1;
	for (; _Count <= _Last1 - _Oldfirst1; )
		{	
		if (_Pred(*_First1, _Val))
			{	
			_Diff2 _Count1 = _Count;
			_FwdIt1 _Mid1 = _First1;

			for (; _Oldfirst1 != _First1 && _Pred(_First1[-1], _Val);
				--_First1)
				--_Count1;	

			if (_Count1 <= _Last1 - _Mid1)
				for (; ; )	
					if (--_Count1 == 0)
						return (_First1);	
					else if (!_Pred(*++_Mid1, _Val))
						break;	

			_Oldfirst1 = ++_Mid1;	
			_First1 = _Oldfirst1;
			}
		else
			{	
			_Oldfirst1 = _First1 + 1;
			_First1 += _Count;
			}
		}
	return (_Last1);
	}

template<class _FwdIt1,
	class _Diff2,
	class _Ty,
	class _Pr> inline
	_FwdIt1 search_n(_FwdIt1 _First1, _FwdIt1 _Last1,
		_Diff2 _Count, const _Ty& _Val, _Pr _Pred)
	{	
	;
	;
	return (_Rechecked(_First1,
		_Search_n(_Unchecked(_First1), _Unchecked(_Last1), _Count, _Val,
			_Pred, _Iter_cat(_First1))));
	}

		
template<class _FwdIt1,
	class _FwdIt2,
	class _Diff1,
	class _Diff2> inline
	_FwdIt1 _Find_end(_FwdIt1 _First1, _FwdIt1 _Last1,
		_FwdIt2 _First2, _FwdIt2 _Last2, _Diff1 *, _Diff2 *)
	{	
	_Diff1 _Count1 = 0;
	_Distance(_First1, _Last1, _Count1);
	_Diff2 _Count2 = 0;
	_Distance(_First2, _Last2, _Count2);
	_FwdIt1 _Ans = _Last1;

	if (0 < _Count2)
		for (; _Count2 <= _Count1; ++_First1, --_Count1)
			{	
			_FwdIt1 _Mid1 = _First1;
			for (_FwdIt2 _Mid2 = _First2; ; ++_Mid1)
				if (!(*_Mid1 == *_Mid2))
					break;
				else if (++_Mid2 == _Last2)
					{	
					_Ans = _First1;
					break;
					}
			}
	return (_Ans);
	}

template<class _FwdIt1,
	class _FwdIt2> inline
	_FwdIt1 find_end(_FwdIt1 _First1, _FwdIt1 _Last1,
		_FwdIt2 _First2, _FwdIt2 _Last2)
	{	
	;
	;
	return (_Rechecked(_First1,
		_Find_end(_Unchecked(_First1), _Unchecked(_Last1),
			_Unchecked(_First2), _Unchecked(_Last2),
			_Dist_type(_First1), _Dist_type(_First2))));
	}

		
template<class _FwdIt1,
	class _FwdIt2,
	class _Diff1,
	class _Diff2,
	class _Pr> inline
	_FwdIt1 _Find_end(_FwdIt1 _First1, _FwdIt1 _Last1,
		_FwdIt2 _First2, _FwdIt2 _Last2, _Pr _Pred, _Diff1 *, _Diff2 *)
	{	
	_Diff1 _Count1 = 0;
	_Distance(_First1, _Last1, _Count1);
	_Diff2 _Count2 = 0;
	_Distance(_First2, _Last2, _Count2);
	_FwdIt1 _Ans = _Last1;

	if (0 < _Count2)
		for (; _Count2 <= _Count1; ++_First1, --_Count1)
			{	
			_FwdIt1 _Mid1 = _First1;
			for (_FwdIt2 _Mid2 = _First2; ; ++_Mid1)
				if (!_Pred(*_Mid1, *_Mid2))
					break;
				else if (++_Mid2 == _Last2)
					{	
					_Ans = _First1;
					break;
					}
			}
	return (_Ans);
	}

template<class _FwdIt1,
	class _FwdIt2,
	class _Pr> inline
	_FwdIt1 find_end(_FwdIt1 _First1, _FwdIt1 _Last1,
		_FwdIt2 _First2, _FwdIt2 _Last2, _Pr _Pred)
	{	
	;
	;
	;
	return (_Rechecked(_First1,
		_Find_end(_Unchecked(_First1), _Unchecked(_Last1),
			_Unchecked(_First2), _Unchecked(_Last2), _Pred,
			_Dist_type(_First1), _Dist_type(_First2))));
	}

		
template<class _FwdIt1,
	class _FwdIt2> inline
	_FwdIt1 _Find_first_of(_FwdIt1 _First1, _FwdIt1 _Last1,
		_FwdIt2 _First2, _FwdIt2 _Last2)
	{	
	for (; _First1 != _Last1; ++_First1)
		for (_FwdIt2 _Mid2 = _First2; _Mid2 != _Last2; ++_Mid2)
			if (*_First1 == *_Mid2)
				return (_First1);
	return (_First1);
	}

template<class _FwdIt1,
	class _FwdIt2> inline
	_FwdIt1 find_first_of(_FwdIt1 _First1, _FwdIt1 _Last1,
		_FwdIt2 _First2, _FwdIt2 _Last2)
	{	
	;
	;
	return (_Rechecked(_First1,
		_Find_first_of(_Unchecked(_First1), _Unchecked(_Last1),
			_Unchecked(_First2), _Unchecked(_Last2))));
	}

		
template<class _FwdIt1,
	class _FwdIt2,
	class _Pr> inline
	_FwdIt1 _Find_first_of(_FwdIt1 _First1, _FwdIt1 _Last1,
		_FwdIt2 _First2, _FwdIt2 _Last2, _Pr _Pred)
	{	
	for (; _First1 != _Last1; ++_First1)
		for (_FwdIt2 _Mid2 = _First2; _Mid2 != _Last2; ++_Mid2)
			if (_Pred(*_First1, *_Mid2))
				return (_First1);
	return (_First1);
	}

template<class _FwdIt1,
	class _FwdIt2,
	class _Pr> inline
	_FwdIt1 find_first_of(_FwdIt1 _First1, _FwdIt1 _Last1,
		_FwdIt2 _First2, _FwdIt2 _Last2, _Pr _Pred)
	{	
	;
	;
	;
	return (_Rechecked(_First1,
		_Find_first_of(_Unchecked(_First1), _Unchecked(_Last1),
			_Unchecked(_First2), _Unchecked(_Last2), _Pred)));
	}

		
template<class _FwdIt1,
	class _FwdIt2> inline
	_FwdIt2 _Swap_ranges(_FwdIt1 _First1, _FwdIt1 _Last1,
		_FwdIt2 _Dest)
	{	
	for (; _First1 != _Last1; ++_First1, ++_Dest)
		::std:: iter_swap(_First1, _Dest);
	return (_Dest);
	}

 
template<class _FwdIt1,
	class _FwdIt2> inline
	_FwdIt2 swap_ranges(_FwdIt1 _First1, _FwdIt1 _Last1,
		_FwdIt2 _Dest)
	{	
	return (_Swap_ranges(_Unchecked(_First1), _Unchecked(_Last1),
		_Dest));
	}

 































































#line 1025 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\algorithm"

		
template<class _Ty,
	size_t _Size> inline
	void swap(_Ty (&_Left)[_Size], _Ty (&_Right)[_Size])
	{	
	if (&_Left != &_Right)
		_Swap_ranges(&_Left[0], &_Left[0] + _Size, &_Right[0]);
	}

		
template<class _InIt,
	class _OutIt,
	class _Fn1> inline
	_OutIt _Transform(_InIt _First, _InIt _Last,
		_OutIt _Dest, _Fn1 _Func)
	{	
	for (; _First != _Last; ++_First, ++_Dest)
		*_Dest = _Func(*_First);
	return (_Dest);
	}

 
template<class _InIt,
	class _OutIt,
	class _Fn1> inline
	_OutIt transform(_InIt _First, _InIt _Last,
		_OutIt _Dest, _Fn1 _Func)
	{	
	if (_First != _Last)
		return (_Transform(_Unchecked(_First), _Unchecked(_Last),
			_Dest, _Func));
	return (_Dest);
	}

 










































































#line 1136 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\algorithm"

		
template<class _InIt1,
	class _InIt2,
	class _OutIt,
	class _Fn2> inline
	_OutIt _Transform(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _OutIt _Dest, _Fn2 _Func)
	{	
	for (; _First1 != _Last1; ++_First1, ++_First2, ++_Dest)
		*_Dest = _Func(*_First1, *_First2);
	return (_Dest);
	}

 
template<class _InIt1,
	class _InIt2,
	class _OutIt,
	class _Fn2> inline
	_OutIt transform(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _OutIt _Dest, _Fn2 _Func)
	{	
	if (_First1 != _Last1)
		return (_Transform(_Unchecked(_First1), _Unchecked(_Last1),
			_First2, _Dest, _Func));
	return (_Dest);
	}

 









































































































































#line 1303 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\algorithm"

		
template<class _FwdIt,
	class _Ty> inline
	void _Replace(_FwdIt _First, _FwdIt _Last,
		const _Ty& _Oldval, const _Ty& _Newval)
	{	
	for (; _First != _Last; ++_First)
		if (*_First == _Oldval)
			*_First = _Newval;
	}

template<class _FwdIt,
	class _Ty> inline
	void replace(_FwdIt _First, _FwdIt _Last,
		const _Ty& _Oldval, const _Ty& _Newval)
	{	
	;
	_Replace(_Unchecked(_First), _Unchecked(_Last),
		_Oldval, _Newval);
	}

		
template<class _FwdIt,
	class _Pr,
	class _Ty> inline
	void _Replace_if(_FwdIt _First, _FwdIt _Last, _Pr _Pred, const _Ty& _Val)
	{	
	for (; _First != _Last; ++_First)
		if (_Pred(*_First))
			*_First = _Val;
	}

template<class _FwdIt,
	class _Pr,
	class _Ty> inline
	void replace_if(_FwdIt _First, _FwdIt _Last, _Pr _Pred, const _Ty& _Val)
	{	
	;
	;
	_Replace_if(_Unchecked(_First), _Unchecked(_Last),
		_Pred, _Val);
	}

		
template<class _InIt,
	class _OutIt,
	class _Ty> inline
	_OutIt _Replace_copy(_InIt _First, _InIt _Last,
		_OutIt _Dest, const _Ty& _Oldval, const _Ty& _Newval)
	{	
	for (; _First != _Last; ++_First, ++_Dest)
		*_Dest = *_First == _Oldval ? _Newval : *_First;
	return (_Dest);
	}

 
template<class _InIt,
	class _OutIt,
	class _Ty> inline
	_OutIt replace_copy(_InIt _First, _InIt _Last,
		_OutIt _Dest, const _Ty& _Oldval, const _Ty& _Newval)
	{	
	return (_Replace_copy(_Unchecked(_First), _Unchecked(_Last),
		_Dest, _Oldval, _Newval));
	}

 










































































#line 1446 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\algorithm"

		
template<class _InIt,
	class _OutIt,
	class _Pr,
	class _Ty> inline
	_OutIt _Replace_copy_if(_InIt _First, _InIt _Last,
		_OutIt _Dest, _Pr _Pred, const _Ty& _Val)
	{	
	for (; _First != _Last; ++_First, ++_Dest)
		*_Dest = _Pred(*_First) ? _Val : *_First;
	return (_Dest);
	}

 
template<class _InIt,
	class _OutIt,
	class _Pr,
	class _Ty> inline
	_OutIt replace_copy_if(_InIt _First, _InIt _Last,
		_OutIt _Dest, _Pr _Pred, const _Ty& _Val)
	{	
	return (_Replace_copy_if(_Unchecked(_First), _Unchecked(_Last),
		_Dest, _Pred, _Val));
	}

 

















































































#line 1555 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\algorithm"

		
template<class _FwdIt,
	class _Fn0> inline
	void _Generate(_FwdIt _First, _FwdIt _Last, _Fn0 _Func)
	{	
	for (; _First != _Last; ++_First)
		*_First = _Func();
	}

template<class _FwdIt,
	class _Fn0> inline
	void generate(_FwdIt _First, _FwdIt _Last, _Fn0 _Func)
	{	
	;
	;
	_Generate(_Unchecked(_First), _Unchecked(_Last), _Func);
	}

		
template<class _OutIt,
	class _Diff,
	class _Fn0> inline
	void _Generate_n(_OutIt _Dest, _Diff _Count, _Fn0 _Func)
	{	
	for (; 0 < _Count; --_Count, ++_Dest)
		*_Dest = _Func();
	}

 
template<class _OutIt,
	class _Diff,
	class _Fn0> inline
	void generate_n(_OutIt _Dest, _Diff _Count, _Fn0 _Func)
	{	
	_Generate_n(_Dest, _Count, _Func);
	}

 





























































#line 1656 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\algorithm"

		
template<class _InIt,
	class _OutIt,
	class _Ty> inline
	_OutIt _Remove_copy(_InIt _First, _InIt _Last,
		_OutIt _Dest, const _Ty& _Val)
	{	
	for (; _First != _Last; ++_First)
		if (!(*_First == _Val))
			*_Dest++ = *_First;
	return (_Dest);
	}

 
template<class _InIt,
	class _OutIt,
	class _Ty> inline
	_OutIt remove_copy(_InIt _First, _InIt _Last,
		_OutIt _Dest, const _Ty& _Val)
	{	
	return (_Remove_copy(_Unchecked(_First), _Unchecked(_Last),
		_Dest, _Val));
	}

 
















































#line 1731 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\algorithm"

		
template<class _InIt,
	class _OutIt,
	class _Pr> inline
	_OutIt _Remove_copy_if(_InIt _First, _InIt _Last,
		_OutIt _Dest, _Pr _Pred)
	{	
	for (; _First != _Last; ++_First)
		if (!_Pred(*_First))
			*_Dest++ = *_First;
	return (_Dest);
	}

 
template<class _InIt,
	class _OutIt,
	class _Pr> inline
	_OutIt remove_copy_if(_InIt _First, _InIt _Last,
		_OutIt _Dest, _Pr _Pred)
	{	
	return (_Remove_copy_if(_Unchecked(_First), _Unchecked(_Last),
		_Dest, _Pred));
	}

 

















































#line 1807 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\algorithm"

		
template<class _FwdIt,
	class _Ty> inline
	_FwdIt _Remove(_FwdIt _First, _FwdIt _Last, const _Ty& _Val)
	{	
	_FwdIt _Next = _First;
	for (++_First; _First != _Last; ++_First)
		if (!(*_First == _Val))
			*_Next++ = _Move(*_First);
	return (_Next);
	}

template<class _FwdIt,
	class _Ty> inline
	_FwdIt remove(_FwdIt _First, _FwdIt _Last, const _Ty& _Val)
	{	
	_First = ::std:: find(_First, _Last, _Val);
	if (_First == _Last)
		return (_First);	
	else
		return (_Rechecked(_First,
			_Remove(_Unchecked(_First), _Unchecked(_Last), _Val)));
	}

		
template<class _FwdIt,
	class _Pr> inline
	_FwdIt _Remove_if(_FwdIt _First, _FwdIt _Last, _Pr _Pred)
	{	
	_FwdIt _Next = _First;
	for (++_First; _First != _Last; ++_First)
	if (!_Pred(*_First))
		*_Next++ = _Move(*_First);
	return (_Next);
	}

template<class _FwdIt,
	class _Pr> inline
	_FwdIt remove_if(_FwdIt _First, _FwdIt _Last, _Pr _Pred)
	{	
	_First = ::std:: find_if(_First, _Last, _Pred);
	if (_First == _Last)
		return (_First);	
	else
		return (_Rechecked(_First,
			_Remove_if(_Unchecked(_First), _Unchecked(_Last), _Pred)));
	}

		
template<class _FwdIt> inline
	_FwdIt _Unique(_FwdIt _First, _FwdIt _Last)
	{	
	if (_First != _Last)
		for (_FwdIt _Firstb; (_Firstb = _First), ++_First != _Last; )
			if (*_Firstb == *_First)
				{	
				for (; ++_First != _Last; )
					if (!(*_Firstb == *_First))
						*++_Firstb = _Move(*_First);
				return (++_Firstb);
				}
	return (_Last);
	}

template<class _FwdIt> inline
	_FwdIt unique(_FwdIt _First, _FwdIt _Last)
	{	
	;
	return (_Rechecked(_First,
		_Unique(_Unchecked(_First), _Unchecked(_Last))));
	}

		
template<class _FwdIt,
	class _Pr> inline
	_FwdIt _Unique(_FwdIt _First, _FwdIt _Last, _Pr _Pred)
	{	
	if (_First != _Last)
		for (_FwdIt _Firstb; (_Firstb = _First), ++_First != _Last; )
			if (_Pred(*_Firstb, *_First))
				{	
				for (; ++_First != _Last; )
					if (!_Pred(*_Firstb, *_First))
						*++_Firstb = _Move(*_First);
				return (++_Firstb);
				}
	return (_Last);
	}

template<class _FwdIt,
	class _Pr> inline
	_FwdIt unique(_FwdIt _First, _FwdIt _Last, _Pr _Pred)
	{	
	;
	;
	return (_Rechecked(_First,
		_Unique(_Unchecked(_First), _Unchecked(_Last), _Pred)));
	}

		
template<class _InIt,
	class _OutIt,
	class _Ty> inline
	_OutIt _Unique_copy(_InIt _First, _InIt _Last,
		_OutIt _Dest, _Ty *)
	{	
	_Ty _Val = *_First;
	for (*_Dest++ = _Val; ++_First != _Last; )
		if (!(_Val == *_First))
			{	
			_Val = *_First;
			*_Dest++ = _Val;
			}
	return (_Dest);
	}

template<class _InIt,
	class _OutIt> inline
	_OutIt _Unique_copy(_InIt _First, _InIt _Last,
		_OutIt _Dest, input_iterator_tag)
	{	
	return (_Unique_copy(_First, _Last, _Dest,
		_Val_type(_First)));
	}

template<class _FwdIt,
	class _OutIt> inline
	_OutIt _Unique_copy(_FwdIt _First, _FwdIt _Last,
		_OutIt _Dest, forward_iterator_tag)
	{	
	_FwdIt _Firstb = _First;
	for (*_Dest++ = *_Firstb; ++_First != _Last; )
		if (!(*_Firstb == *_First))
			{	
			_Firstb = _First;
			*_Dest++ = *_Firstb;
			}
	return (_Dest);
	}

 
template<class _InIt,
	class _OutIt> inline
	_OutIt unique_copy(_InIt _First, _InIt _Last,
		_OutIt _Dest)
	{	
	return (_First == _Last ? _Dest :
		_Unique_copy(_Unchecked(_First), _Unchecked(_Last),
			_Dest, _Iter_cat(_First)));
	}

 










































#line 2003 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\algorithm"

		
template<class _InIt,
	class _OutIt,
	class _Ty,
	class _Pr> inline
	_OutIt _Unique_copy(_InIt _First, _InIt _Last,
		_OutIt _Dest, _Pr _Pred, _Ty *)
	{	
	_Ty _Val = *_First;

	for (*_Dest++ = _Val; ++_First != _Last; )
		if (!_Pred(_Val, *_First))
			{	
			_Val = *_First;
			*_Dest++ = _Val;
			}
	return (_Dest);
	}

template<class _InIt,
	class _OutIt,
	class _Pr> inline
	_OutIt _Unique_copy(_InIt _First, _InIt _Last,
		_OutIt _Dest, _Pr _Pred, input_iterator_tag)
	{	
	return (_Unique_copy(_First, _Last, _Dest, _Pred,
		_Val_type(_First)));
	}

template<class _FwdIt,
	class _OutIt,
	class _Pr> inline
	_OutIt _Unique_copy(_FwdIt _First, _FwdIt _Last,
		_OutIt _Dest, _Pr _Pred, forward_iterator_tag)
	{	
	_FwdIt _Firstb = _First;

	for (*_Dest++ = *_Firstb; ++_First != _Last; )
		if (!_Pred(*_Firstb, *_First))
			{	
			_Firstb = _First;
			*_Dest++ = *_Firstb;
			}
	return (_Dest);
	}

 
template<class _InIt,
	class _OutIt,
	class _Pr> inline
	_OutIt unique_copy(_InIt _First, _InIt _Last,
		_OutIt _Dest, _Pr _Pred)
	{	
	return (_First == _Last ? _Dest :
		_Unique_copy(_Unchecked(_First), _Unchecked(_Last),
			_Dest, _Pred, _Iter_cat(_First)));
	}

 














































#line 2110 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\algorithm"

		
template<class _BidIt,
	class _OutIt> inline
	_OutIt _Reverse_copy(_BidIt _First, _BidIt _Last,
		_OutIt _Dest)
	{	
	for (; _First != _Last; ++_Dest)
		*_Dest = *--_Last;
	return (_Dest);
	}

 
template<class _BidIt,
	class _OutIt> inline
	_OutIt reverse_copy(_BidIt _First, _BidIt _Last,
		_OutIt _Dest)
	{	
	return (_Reverse_copy(_Unchecked(_First), _Unchecked(_Last),
		_Dest));
	}

 

































































#line 2199 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\algorithm"

		
template<class _FwdIt,
	class _OutIt> inline
	_OutIt rotate_copy(_FwdIt _First, _FwdIt _Mid, _FwdIt _Last,
		_OutIt _Dest)
	{	
	_Dest = ::std:: copy(_Mid, _Last, _Dest);
	return (::std:: copy(_First, _Mid, _Dest));
	}

		
template<class _RanIt,
	class _Diff> inline
	void _Random_shuffle(_RanIt _First, _RanIt _Last, _Diff *)
	{	
	const int _RANDOM_BITS = 15;	
	const int _RANDOM_MAX = (1U << _RANDOM_BITS) - 1;

	_RanIt _Next = _First;
	for (unsigned long _Index = 2; ++_Next != _Last; ++_Index)
		{	
		unsigned long _Rm = _RANDOM_MAX;
		unsigned long _Rn = :: rand() & _RANDOM_MAX;
		for (; _Rm < _Index && _Rm != ~0UL;
			_Rm = _Rm << _RANDOM_BITS | _RANDOM_MAX)
			_Rn = _Rn << _RANDOM_BITS
				| (:: rand() & _RANDOM_MAX);	

		::std:: iter_swap(_Next, _First + _Diff(_Rn % _Index));	
		}
	}

template<class _RanIt> inline
	void random_shuffle(_RanIt _First, _RanIt _Last)
	{	
	;
	if (_First != _Last)
		_Random_shuffle(_Unchecked(_First), _Unchecked(_Last),
			_Dist_type(_First));
	}

		
template<class _RanIt,
	class _Fn1,
	class _Diff> inline
	void _Random_shuffle(_RanIt _First, _RanIt _Last, _Fn1& _Func, _Diff *)
	{	
	_RanIt _Next = _First;
	for (_Diff _Index = 2; ++_Next != _Last; ++_Index)
		::std:: iter_swap(_Next, _First + _Diff(_Func(_Index) % _Index));
	}

template<class _RanIt,
	class _Fn1> inline
	void random_shuffle(_RanIt _First, _RanIt _Last, _Fn1& _Func)
	{	
	;
	;
	if (_First != _Last)
		_Random_shuffle(_Unchecked(_First), _Unchecked(_Last), _Func,
			_Dist_type(_First));
	}

		
template<class _BidIt,
	class _Pr> inline
	_BidIt _Partition(_BidIt _First, _BidIt _Last, _Pr _Pred)
	{	
	for (; ; ++_First)
		{	
		for (; _First != _Last && _Pred(*_First); ++_First)
			;	
		if (_First == _Last)
			break;	

		for (; _First != --_Last && !_Pred(*_Last); )
			;	
		if (_First == _Last)
			break;	

		::std:: iter_swap(_First, _Last);	
		}
	return (_First);
	}

template<class _BidIt,
	class _Pr> inline
	_BidIt partition(_BidIt _First, _BidIt _Last, _Pr _Pred)
	{	
	;
	;
	return (_Rechecked(_First,
		_Partition(_Unchecked(_First), _Unchecked(_Last), _Pred)));
	}

		
template<class _BidIt,
	class _Pr,
	class _Diff,
	class _Ty> inline
	_BidIt _Stable_partition(_BidIt _First, _BidIt _Last, _Pr _Pred,
		_Diff _Count, _Temp_iterator<_Ty>& _Tempbuf)
	{	
	if (_Count == 0)
		return (_First);
	else if (_Count == 1)
		return (_Pred(*_First) ? _Last : _First);
	else if (_Count <= _Tempbuf._Maxlen())
		{	
		_BidIt _Next = _First;
		for (_Tempbuf._Init(); _First != _Last; ++_First)
			if (_Pred(*_First))
				*_Next++ = _Move(*_First);
			else
				*_Tempbuf++ = _Move(*_First);

		_Move(_Tempbuf._First(), _Tempbuf._Last(), _Next);	
		return (_Next);
		}
	else
		{	
		_BidIt _Mid = _First;
		::std:: advance(_Mid, _Count / 2);

		_BidIt _Left = _Stable_partition(_First, _Mid, _Pred,
			_Count / 2, _Tempbuf);	
		_BidIt _Right = _Stable_partition(_Mid, _Last, _Pred,
			_Count - _Count / 2, _Tempbuf);	

		_Diff _Count1 = 0;
		_Distance(_Left, _Mid, _Count1);
		_Diff _Count2 = 0;
		_Distance(_Mid, _Right, _Count2);

		return (_Buffered_rotate(_Left, _Mid, _Right,
			_Count1, _Count2, _Tempbuf));	
		}
	}

template<class _BidIt,
	class _Pr,
	class _Diff,
	class _Ty> inline
	_BidIt _Stable_partition(_BidIt _First, _BidIt _Last, _Pr _Pred,
		_Diff *, _Ty *)
	{	
	_Diff _Count = 0;
	_Distance(_First, _Last, _Count);
	_Temp_iterator<_Ty> _Tempbuf(_Count);
	return (_Stable_partition(_First, _Last, _Pred, _Count, _Tempbuf));
	}

template<class _BidIt,
	class _Pr> inline
	_BidIt stable_partition(_BidIt _First, _BidIt _Last, _Pr _Pred)
	{	
	;
	;
	return (_First == _Last ? _First
		: _Rechecked(_First,
			_Stable_partition(_Unchecked(_First), _Unchecked(_Last),
				_Pred, _Dist_type(_First), _Val_type(_First))));
	}

 


































#line 2400 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\algorithm"
  
  
 #line 2403 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\algorithm"

		
template<class _RanIt,
	class _Diff,
	class _Ty> inline
	void _Push_heap(_RanIt _First, _Diff _Hole,
		_Diff _Top, _Ty && _Val)
	{	
	for (_Diff _Idx = (_Hole - 1) / 2;
		_Top < _Hole && ((*(_First + _Idx)) < (_Val));
		_Idx = (_Hole - 1) / 2)
		{	
		*(_First + _Hole) = _Move(*(_First + _Idx));
		_Hole = _Idx;
		}

	*(_First + _Hole) = _Move(_Val);	
	}

template<class _RanIt,
	class _Diff,
	class _Ty> inline
	void _Push_heap_0(_RanIt _First, _RanIt _Last, _Diff *, _Ty *)
	{	
	_Diff _Count = _Last - _First;
	if (0 < _Count)
		{	
		_Ty _Val = _Move(*_Last);
		_Push_heap(_First, _Count, _Diff(0), _Move(_Val));
		}
	}

template<class _RanIt> inline
	void push_heap(_RanIt _First, _RanIt _Last)
	{	
	;
	if (_First != _Last)
		{	
		--_Last;
		;
		_Push_heap_0(_Unchecked(_First), _Unchecked(_Last),
			_Dist_type(_First), _Val_type(_First));
		}
	}

		
template<class _RanIt,
	class _Diff,
	class _Ty,
	class _Pr> inline
	void _Push_heap(_RanIt _First, _Diff _Hole,
		_Diff _Top, _Ty && _Val, _Pr _Pred)
	{	
	for (_Diff _Idx = (_Hole - 1) / 2;
		_Top < _Hole && _Pred(*(_First + _Idx), _Val);
		_Idx = (_Hole - 1) / 2)
		{	
		*(_First + _Hole) = _Move(*(_First + _Idx));
		_Hole = _Idx;
		}

	*(_First + _Hole) = _Move(_Val);	
	}

template<class _RanIt,
	class _Diff,
	class _Ty,
	class _Pr> inline
	void _Push_heap_0(_RanIt _First, _RanIt _Last, _Pr _Pred, _Diff *, _Ty *)
	{	
	_Diff _Count = _Last - _First;
	if (0 < _Count)
		{	
		_Ty _Val = _Move(*_Last);
		_Push_heap(_First, _Count, _Diff(0), _Move(_Val), _Pred);
		}
	}

template<class _RanIt,
	class _Pr> inline
	void push_heap(_RanIt _First, _RanIt _Last, _Pr _Pred)
	{	
	;
	;
	if (_First != _Last)
		{	
		--_Last;
		;
		_Push_heap_0(_Unchecked(_First), _Unchecked(_Last), _Pred,
			_Dist_type(_First), _Val_type(_First));
		}
	}

		
template<class _RanIt,
	class _Diff,
	class _Ty> inline
	void _Adjust_heap(_RanIt _First, _Diff _Hole, _Diff _Bottom,
		_Ty && _Val)
	{	
	_Diff _Top = _Hole;
	_Diff _Idx = 2 * _Hole + 2;

	for (; _Idx < _Bottom; _Idx = 2 * _Idx + 2)
		{	
		if (((*(_First + _Idx)) < (*(_First + (_Idx - 1)))))
			--_Idx;
		*(_First + _Hole) = _Move(*(_First + _Idx));
		_Hole = _Idx;
		}

	if (_Idx == _Bottom)
		{	
		*(_First + _Hole) = _Move(*(_First + (_Bottom - 1)));
		_Hole = _Bottom - 1;
		}
	_Push_heap(_First, _Hole, _Top, _Move(_Val));
	}

template<class _RanIt,
	class _Diff,
	class _Ty> inline
	void _Pop_heap(_RanIt _First, _RanIt _Last, _RanIt _Dest,
		_Ty && _Val, _Diff *)
	{	
	*_Dest = _Move(*_First);
	_Adjust_heap(_First, _Diff(0), _Diff(_Last - _First),
		_Move(_Val));
	}

template<class _RanIt,
	class _Ty> inline
	void _Pop_heap_0(_RanIt _First, _RanIt _Last, _Ty *)
	{	
	_Ty _Val = _Move(*(_Last - 1));
	_Pop_heap(_First, _Last - 1, _Last - 1,
		_Move(_Val), _Dist_type(_First));
	}

template<class _RanIt> inline
	void _Pop_heap(_RanIt _First, _RanIt _Last)
	{	
	_Pop_heap_0(_Unchecked(_First), _Unchecked(_Last),
		_Val_type(_First));
	}

template<class _RanIt> inline
	void pop_heap(_RanIt _First, _RanIt _Last)
	{	
	;
	;
	if (1 < _Last - _First)
		_Pop_heap(_Unchecked(_First), _Unchecked(_Last));
	}

		
template<class _RanIt,
	class _Diff,
	class _Ty,
	class _Pr> inline
	void _Adjust_heap(_RanIt _First, _Diff _Hole, _Diff _Bottom,
		_Ty && _Val, _Pr _Pred)
	{	
	_Diff _Top = _Hole;
	_Diff _Idx = 2 * _Hole + 2;

	for (; _Idx < _Bottom; _Idx = 2 * _Idx + 2)
		{	
		if (_Pred(*(_First + _Idx), *(_First + (_Idx - 1))))
			--_Idx;
		*(_First + _Hole) = _Move(*(_First + _Idx));
		_Hole = _Idx;
		}

	if (_Idx == _Bottom)
		{	
		*(_First + _Hole) = _Move(*(_First + (_Bottom - 1)));
		_Hole = _Bottom - 1;
		}
	_Push_heap(_First, _Hole, _Top, _Move(_Val), _Pred);
	}

template<class _RanIt,
	class _Diff,
	class _Ty,
	class _Pr> inline
	void _Pop_heap(_RanIt _First, _RanIt _Last, _RanIt _Dest,
		_Ty && _Val, _Pr _Pred, _Diff *)
	{	
	*_Dest = _Move(*_First);
	_Adjust_heap(_First, _Diff(0), _Diff(_Last - _First),
		_Move(_Val), _Pred);
	}

template<class _RanIt,
	class _Ty,
	class _Pr> inline
	void _Pop_heap_0(_RanIt _First, _RanIt _Last, _Pr _Pred, _Ty *)
	{	
	_Ty _Val = _Move(*(_Last - 1));
	_Pop_heap(_First, _Last - 1, _Last - 1,
		_Move(_Val), _Pred, _Dist_type(_First));
	}

template<class _RanIt,
	class _Pr> inline
	void _Pop_heap(_RanIt _First, _RanIt _Last, _Pr _Pred)
	{	
	_Pop_heap_0(_Unchecked(_First), _Unchecked(_Last), _Pred,
		_Val_type(_First));
	}

template<class _RanIt,
	class _Pr> inline
	void pop_heap(_RanIt _First, _RanIt _Last, _Pr _Pred)
	{	
	;
	;
	;
	if (1 < _Last - _First)
		_Pop_heap(_Unchecked(_First), _Unchecked(_Last), _Pred);
	}

		
template<class _RanIt,
	class _Diff,
	class _Ty> inline
	void _Make_heap(_RanIt _First, _RanIt _Last, _Diff *, _Ty *)
	{	
	_Diff _Bottom = _Last - _First;

	for (_Diff _Hole = _Bottom / 2; 0 < _Hole; )
		{	
		--_Hole;
		_Ty _Val = _Move(*(_First + _Hole));
		_Adjust_heap(_First, _Hole, _Bottom,
			_Move(_Val));
		}
	}

template<class _RanIt> inline
	void make_heap(_RanIt _First, _RanIt _Last)
	{	
	;
	if (1 < _Last - _First)
		_Make_heap(_Unchecked(_First), _Unchecked(_Last),
			_Dist_type(_First), _Val_type(_First));
	}

		
template<class _RanIt,
	class _Diff,
	class _Ty,
	class _Pr> inline
	void _Make_heap(_RanIt _First, _RanIt _Last, _Pr _Pred, _Diff *, _Ty *)
	{	
	_Diff _Bottom = _Last - _First;
	for (_Diff _Hole = _Bottom / 2; 0 < _Hole; )
		{	
		--_Hole;
		_Ty _Val = _Move(*(_First + _Hole));
		_Adjust_heap(_First, _Hole, _Bottom,
			_Move(_Val), _Pred);
		}
	}

template<class _RanIt,
	class _Pr> inline
	void make_heap(_RanIt _First, _RanIt _Last, _Pr _Pred)
	{	
	;
	;
	if (1 < _Last - _First)
		_Make_heap(_Unchecked(_First), _Unchecked(_Last), _Pred,
			_Dist_type(_First), _Val_type(_First));
	}

		
template<class _RanIt> inline
	void _Sort_heap(_RanIt _First, _RanIt _Last)
	{	
	for (; 1 < _Last - _First; --_Last)
		_Pop_heap(_First, _Last);
	}

template<class _RanIt> inline
	void sort_heap(_RanIt _First, _RanIt _Last)
	{	
	;
	;
	_Sort_heap(_Unchecked(_First), _Unchecked(_Last));
	}

		
template<class _RanIt,
	class _Pr> inline
	void _Sort_heap(_RanIt _First, _RanIt _Last, _Pr _Pred)
	{	
	for (; 1 < _Last - _First; --_Last)
		_Pop_heap(_First, _Last, _Pred);
	}

template<class _RanIt,
	class _Pr> inline
	void sort_heap(_RanIt _First, _RanIt _Last, _Pr _Pred)
	{	
	;
	;
	;
	_Sort_heap(_Unchecked(_First), _Unchecked(_Last), _Pred);
	}

		
template<class _FwdIt,
	class _Ty,
	class _Diff> inline
	_FwdIt _Lower_bound(_FwdIt _First, _FwdIt _Last, const _Ty& _Val, _Diff *)
	{	
	_Diff _Count = 0;
	_Distance(_First, _Last, _Count);

	for (; 0 < _Count; )
		{	
		_Diff _Count2 = _Count / 2;
		_FwdIt _Mid = _First;
		::std:: advance(_Mid, _Count2);

		if (*_Mid < _Val)

			{	
			_First = ++_Mid;
			_Count -= _Count2 + 1;
			}
		else
			_Count = _Count2;
		}
	return (_First);
	}

template<class _FwdIt,
	class _Ty> inline
	_FwdIt lower_bound(_FwdIt _First, _FwdIt _Last, const _Ty& _Val)
	{	

	return (_Rechecked(_First,
		_Lower_bound(_Unchecked(_First), _Unchecked(_Last), _Val,
			_Dist_type(_First))));
	}

		
template<class _FwdIt,
	class _Ty,
	class _Diff,
	class _Pr> inline
	_FwdIt _Lower_bound(_FwdIt _First, _FwdIt _Last,
		const _Ty& _Val, _Pr _Pred, _Diff *)
	{	
	_Diff _Count = 0;
	_Distance(_First, _Last, _Count);
	for (; 0 < _Count; )
		{	
		_Diff _Count2 = _Count / 2;
		_FwdIt _Mid = _First;
		::std:: advance(_Mid, _Count2);

		if (_Pred(*_Mid, _Val))

			{	
			_First = ++_Mid;
			_Count -= _Count2 + 1;
			}
		else
			_Count = _Count2;
		}
	return (_First);
	}

template<class _FwdIt,
	class _Ty,
	class _Pr> inline
	_FwdIt lower_bound(_FwdIt _First, _FwdIt _Last,
		const _Ty& _Val, _Pr _Pred)
	{	

	return (_Rechecked(_First,
		_Lower_bound(_Unchecked(_First), _Unchecked(_Last), _Val, _Pred,
			_Dist_type(_First))));
	}

		
template<class _FwdIt,
	class _Ty,
	class _Diff> inline
	_FwdIt _Upper_bound(_FwdIt _First, _FwdIt _Last, const _Ty& _Val, _Diff *)
	{	
	_Diff _Count = 0;
	_Distance(_First, _Last, _Count);
	for (; 0 < _Count; )
		{	
		_Diff _Count2 = _Count / 2;
		_FwdIt _Mid = _First;
		::std:: advance(_Mid, _Count2);

		if (!(_Val < *_Mid))

			{	
			_First = ++_Mid;
			_Count -= _Count2 + 1;
			}
		else
			_Count = _Count2;
		}
	return (_First);
	}

template<class _FwdIt,
	class _Ty> inline
	_FwdIt upper_bound(_FwdIt _First, _FwdIt _Last, const _Ty& _Val)
	{	

	return (_Rechecked(_First,
		_Upper_bound(_Unchecked(_First), _Unchecked(_Last), _Val,
			_Dist_type(_First))));
	}

		
template<class _FwdIt,
	class _Ty,
	class _Diff,
	class _Pr> inline
	_FwdIt _Upper_bound(_FwdIt _First, _FwdIt _Last,
		const _Ty& _Val, _Pr _Pred, _Diff *)
	{	
	_Diff _Count = 0;
	_Distance(_First, _Last, _Count);
	for (; 0 < _Count; )
		{	
		_Diff _Count2 = _Count / 2;
		_FwdIt _Mid = _First;
		::std:: advance(_Mid, _Count2);

		if (!_Pred(_Val, *_Mid))

			{	
			_First = ++_Mid;
			_Count -= _Count2 + 1;
			}
		else
			_Count = _Count2;
		}
	return (_First);
	}

template<class _FwdIt,
	class _Ty,
	class _Pr> inline
	_FwdIt upper_bound(_FwdIt _First, _FwdIt _Last,
		const _Ty& _Val, _Pr _Pred)
	{	

	return (_Rechecked(_First,
		_Upper_bound(_Unchecked(_First), _Unchecked(_Last), _Val, _Pred,
			_Dist_type(_First))));
	}

		
template<class _FwdIt,
	class _Ty,
	class _Diff> inline
	::std:: pair<_FwdIt, _FwdIt>
		_Equal_range(_FwdIt _First, _FwdIt _Last,
			const _Ty& _Val, _Diff *)
	{	
	_Diff _Count = 0;
	_Distance(_First, _Last, _Count);

	for (; 0 < _Count; )
		{	
		_Diff _Count2 = _Count / 2;
		_FwdIt _Mid = _First;
		::std:: advance(_Mid, _Count2);

		if (((*_Mid) < (_Val)))
			{	
			_First = ++_Mid;
			_Count -= _Count2 + 1;
			}
		else if (_Val < *_Mid)
			_Count = _Count2;	
		else
			{	
			_FwdIt _First2 = ::std:: lower_bound(_First, _Mid, _Val);
			::std:: advance(_First, _Count);
			_FwdIt _Last2 = ::std:: upper_bound(++_Mid, _First, _Val);
			return (pair<_FwdIt, _FwdIt>(_First2, _Last2));
			}
		}

	return (pair<_FwdIt, _FwdIt>(_First, _First));	
	}

template<class _FwdIt,
	class _Ty> inline
	::std:: pair<_FwdIt, _FwdIt>
		equal_range(_FwdIt _First, _FwdIt _Last,
			const _Ty& _Val)
	{	
	;
	::std:: pair<typename _Get_unchecked_type<_FwdIt>::type, typename _Get_unchecked_type<_FwdIt>::type> _Ans(
		_Equal_range(_Unchecked(_First), _Unchecked(_Last),
			_Val, _Dist_type(_First)));
	return (::std:: pair<_FwdIt, _FwdIt>(
		_Rechecked(_First, _Ans.first),
		_Rechecked(_Last, _Ans.second)));
	}

		
template<class _FwdIt,
	class _Ty,
	class _Diff,
	class _Pr> inline
	::std:: pair<_FwdIt, _FwdIt>
		_Equal_range(_FwdIt _First, _FwdIt _Last,
			const _Ty& _Val, _Pr _Pred, _Diff *)
	{	
	_Diff _Count = 0;
	_Distance(_First, _Last, _Count);

	for (; 0 < _Count; )
		{	
		_Diff _Count2 = _Count / 2;
		_FwdIt _Mid = _First;
		::std:: advance(_Mid, _Count2);

		if (_Pred(*_Mid, _Val))
			{	
			_First = ++_Mid;
			_Count -= _Count2 + 1;
			}
		else if (_Pred(_Val, *_Mid))
			_Count = _Count2;	
		else
			{	
			_FwdIt _First2 = ::std:: lower_bound(_First, _Mid, _Val, _Pred);
			::std:: advance(_First, _Count);
			_FwdIt _Last2 = ::std:: upper_bound(++_Mid, _First, _Val, _Pred);
			return (pair<_FwdIt, _FwdIt>(_First2, _Last2));
			}
		}

	return (pair<_FwdIt, _FwdIt>(_First, _First));	
	}

template<class _FwdIt,
	class _Ty,
	class _Pr> inline
	::std:: pair<_FwdIt, _FwdIt>
		equal_range(_FwdIt _First, _FwdIt _Last,
			const _Ty& _Val, _Pr _Pred)
	{	
	;
	::std:: pair<typename _Get_unchecked_type<_FwdIt>::type, typename _Get_unchecked_type<_FwdIt>::type> _Ans(
		_Equal_range(_Unchecked(_First), _Unchecked(_Last),
			_Val, _Pred, _Dist_type(_First)));
	return (::std:: pair<_FwdIt, _FwdIt>(
		_Rechecked(_First, _Ans.first),
		_Rechecked(_Last, _Ans.second)));
	}

		
template<class _FwdIt,
	class _Ty> inline
	bool binary_search(_FwdIt _First, _FwdIt _Last, const _Ty& _Val)
	{	
	_First = ::std:: lower_bound(_First, _Last, _Val);
	return (_First != _Last && !(_Val < *_First));
	}

		
template<class _FwdIt,
	class _Ty,
	class _Pr> inline
	bool binary_search(_FwdIt _First, _FwdIt _Last,
		const _Ty& _Val, _Pr _Pred)
	{	
	_First = ::std:: lower_bound(_First, _Last, _Val, _Pred);
	return (_First != _Last && !_Pred(_Val, *_First));
	}

		
template<class _InIt1,
	class _InIt2,
	class _OutIt> inline
	_OutIt _Merge(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2,
		_OutIt _Dest)
	{	
	for (; _First1 != _Last1 && _First2 != _Last2; ++_Dest)
		if (((*_First2) < (*_First1)))
			{	
			*_Dest = _Move(*_First2);
			++_First2;
			}
		else
			{	
			*_Dest = _Move(*_First1);
			++_First1;
			}

	_Dest = _Move(_First1, _Last1, _Dest);	
	return (_Move(_First2, _Last2, _Dest));
	}

 
template<class _InIt1,
	class _InIt2,
	class _OutIt> inline
	_OutIt merge(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2,
		_OutIt _Dest)
	{	
	return (_Merge(_Unchecked(_First1), _Unchecked(_Last1),
		_Unchecked(_First2), _Unchecked(_Last2),
		_Dest));
	}

 





















































































#line 3116 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\algorithm"

		
template<class _InIt1,
	class _InIt2,
	class _OutIt,
	class _Pr> inline
	_OutIt _Merge(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2,
		_OutIt _Dest, _Pr _Pred)
	{	
	for (; _First1 != _Last1 && _First2 != _Last2; ++_Dest)
		if (_Pred(*_First2, *_First1))
			{	
			*_Dest = _Move(*_First2);
			++_First2;
			}
		else
			{	
			*_Dest = _Move(*_First1);
			++_First1;
			}

	_Dest = _Move(_First1, _Last1, _Dest);	
	return (_Move(_First2, _Last2, _Dest));
	}

 
template<class _InIt1,
	class _InIt2,
	class _OutIt,
	class _Pr> inline
	_OutIt merge(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2,
		_OutIt _Dest, _Pr _Pred)
	{	
	return (_Merge(_Unchecked(_First1), _Unchecked(_Last1),
		_Unchecked(_First2), _Unchecked(_Last2),
		_Dest, _Pred));
	}

 




























































































#line 3250 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\algorithm"

		
template<class _BidIt,
	class _Diff,
	class _Ty> inline
	_BidIt _Buffered_rotate(_BidIt _First, _BidIt _Mid, _BidIt _Last,
		_Diff _Count1, _Diff _Count2, _Temp_iterator<_Ty>& _Tempbuf)
	{	
	if (_Count1 <= _Count2 && _Count1 <= _Tempbuf._Maxlen())
		{	
		_Move(_First, _Mid, _Tempbuf._Init());
		_Move(_Mid, _Last, _First);
		return (_Move_backward(_Tempbuf._First(), _Tempbuf._Last(),
			_Last));
		}
	else if (_Count2 <= _Tempbuf._Maxlen())
		{	
		_Move(_Mid, _Last, _Tempbuf._Init());
		_Move_backward(_First, _Mid, _Last);
		return (_Move(_Tempbuf._First(), _Tempbuf._Last(), _First));
		}
	else
		{	
		::std:: rotate(_First, _Mid, _Last);
		::std:: advance(_First, _Count2);
		return (_First);
		}
	}

template<class _BidIt1,
	class _BidIt2,
	class _BidIt3> inline
	_BidIt3 _Merge_backward(_BidIt1 _First1, _BidIt1 _Last1,
		_BidIt2 _First2, _BidIt2 _Last2, _BidIt3 _Dest)
	{	
	for (; ; )
		if (_First1 == _Last1)
			return (_Move_backward(_First2, _Last2, _Dest));
		else if (_First2 == _Last2)
			return (_Move_backward(_First1, _Last1, _Dest));
		else if (((*--_Last2) < (*--_Last1)))
			{	
			*--_Dest = _Move(*_Last1);
			++_Last2;
			}
		else
			{	
			*--_Dest = _Move(*_Last2);
			++_Last1;
			}
	}

template<class _BidIt,
	class _Diff,
	class _Ty> inline
	void _Buffered_merge(_BidIt _First, _BidIt _Mid, _BidIt _Last,
		_Diff _Count1, _Diff _Count2,
			_Temp_iterator<_Ty>& _Tempbuf)
	{	
	if (_Count1 + _Count2 == 2)
		{	
		if (((*_Mid) < (*_First)))
			::std:: iter_swap(_First, _Mid);
		}
	else if (_Count1 <= _Count2 && _Count1 <= _Tempbuf._Maxlen())
		{	
		_Move(_First, _Mid, _Tempbuf._Init());
		_Merge(_Tempbuf._First(), _Tempbuf._Last(), _Mid, _Last, _First);
		}
	else if (_Count2 <= _Tempbuf._Maxlen())
		{	
		_Move(_Mid, _Last, _Tempbuf._Init());
		_Merge_backward(_First, _Mid,
			_Tempbuf._First(), _Tempbuf._Last(), _Last);
		}
	else
		{	
		_BidIt _Firstn, _Lastn;
		_Diff _Count1n, _Count2n;

		if (_Count2 < _Count1)
			{	
			_Count1n = _Count1 / 2, _Count2n = 0;
			_Firstn = _First;
			::std:: advance(_Firstn, _Count1n);
			_Lastn = ::std:: lower_bound(_Mid, _Last, *_Firstn);
			_Distance(_Mid, _Lastn, _Count2n);
			}
		else
			{	
			_Count1n = 0, _Count2n = _Count2 / 2;
			_Lastn = _Mid;
			::std:: advance(_Lastn, _Count2n);
			_Firstn = ::std:: upper_bound(_First, _Mid, *_Lastn);
			_Distance(_First, _Firstn, _Count1n);
			}

		_BidIt _Midn = _Buffered_rotate(_Firstn, _Mid, _Lastn,
			_Count1 - _Count1n, _Count2n, _Tempbuf);	
		_Buffered_merge(_First, _Firstn, _Midn,
			_Count1n, _Count2n, _Tempbuf);	
		_Buffered_merge(_Midn, _Lastn, _Last,
			_Count1 - _Count1n, _Count2 - _Count2n, _Tempbuf);
		}
	}

template<class _BidIt,
	class _Diff,
	class _Ty> inline
	void _Inplace_merge(_BidIt _First, _BidIt _Mid, _BidIt _Last,
		_Diff *, _Ty *)
	{	
	_Diff _Count1 = 0;
	_Distance(_First, _Mid, _Count1);
	_Diff _Count2 = 0;
	_Distance(_Mid, _Last, _Count2);
	_Temp_iterator<_Ty> _Tempbuf(_Count1 < _Count2 ? _Count1 : _Count2);
	_Buffered_merge(_First, _Mid, _Last,
		_Count1, _Count2, _Tempbuf);
	}

template<class _BidIt> inline
	void inplace_merge(_BidIt _First, _BidIt _Mid, _BidIt _Last)
	{	
	;
	;
	if (_First != _Mid && _Mid != _Last)
		_Inplace_merge(
			_Unchecked(_First), _Unchecked(_Mid), _Unchecked(_Last),
			_Dist_type(_First), _Val_type(_First));
	}

		
template<class _BidIt1,
	class _BidIt2,
	class _BidIt3,
	class _Pr> inline
	_BidIt3 _Merge_backward(_BidIt1 _First1, _BidIt1 _Last1,
		_BidIt2 _First2, _BidIt2 _Last2, _BidIt3 _Dest, _Pr _Pred)
	{	
	for (; ; )
		if (_First1 == _Last1)
			return (_Move_backward(_First2, _Last2, _Dest));
		else if (_First2 == _Last2)
			return (_Move_backward(_First1, _Last1, _Dest));
		else if (_Pred(*--_Last2, *--_Last1))
			{	
			*--_Dest = _Move(*_Last1);
			++_Last2;
			}
		else
			{	
			*--_Dest = _Move(*_Last2);
			++_Last1;
			}
	}

template<class _BidIt,
	class _Diff,
	class _Ty,
	class _Pr> inline
	void _Buffered_merge(_BidIt _First, _BidIt _Mid, _BidIt _Last,
		_Diff _Count1, _Diff _Count2,
			_Temp_iterator<_Ty>& _Tempbuf, _Pr _Pred)
	{	
	if (_Count1 + _Count2 == 2)
		{	
		if (_Pred(*_Mid, *_First))
			::std:: iter_swap(_First, _Mid);
		}
	else if (_Count1 <= _Count2 && _Count1 <= _Tempbuf._Maxlen())
		{	
		_Move(_First, _Mid, _Tempbuf._Init());
		_Merge(_Tempbuf._First(), _Tempbuf._Last(),
			_Mid, _Last, _First, _Pred);
		}
	else if (_Count2 <= _Tempbuf._Maxlen())
		{	
		_Move(_Mid, _Last, _Tempbuf._Init());
		_Merge_backward(_First, _Mid,
			_Tempbuf._First(), _Tempbuf._Last(), _Last, _Pred);
		}
	else
		{	
		_BidIt _Firstn, _Lastn;
		_Diff _Count1n, _Count2n;
		if (_Count2 < _Count1)
			{	
			_Count1n = _Count1 / 2, _Count2n = 0;
			_Firstn = _First;
			::std:: advance(_Firstn, _Count1n);
			_Lastn = ::std:: lower_bound(_Mid, _Last, *_Firstn, _Pred);
			_Distance(_Mid, _Lastn, _Count2n);
			}
		else
			{	
			_Count1n = 0, _Count2n = _Count2 / 2;
			_Lastn = _Mid;
			::std:: advance(_Lastn, _Count2n);
			_Firstn = ::std:: upper_bound(_First, _Mid, *_Lastn, _Pred);
			_Distance(_First, _Firstn, _Count1n);
			}
		_BidIt _Midn = _Buffered_rotate(_Firstn, _Mid, _Lastn,
			_Count1 - _Count1n, _Count2n, _Tempbuf);	
		_Buffered_merge(_First, _Firstn, _Midn,
			_Count1n, _Count2n, _Tempbuf, _Pred);	
		_Buffered_merge(_Midn, _Lastn, _Last,
			_Count1 - _Count1n, _Count2 - _Count2n, _Tempbuf, _Pred);
		}
	}

template<class _BidIt,
	class _Diff,
	class _Ty,
	class _Pr> inline
	void _Inplace_merge(_BidIt _First, _BidIt _Mid, _BidIt _Last, _Pr _Pred,
		_Diff *, _Ty *)
	{	
	_Diff _Count1 = 0;
	_Distance(_First, _Mid, _Count1);
	_Diff _Count2 = 0;
	_Distance(_Mid, _Last, _Count2);
	_Temp_iterator<_Ty> _Tempbuf(_Count1 < _Count2 ? _Count1 : _Count2);
	_Buffered_merge(_First, _Mid, _Last,
		_Count1, _Count2, _Tempbuf, _Pred);
	}

template<class _BidIt,
	class _Pr> inline
	void inplace_merge(_BidIt _First, _BidIt _Mid, _BidIt _Last, _Pr _Pred)
	{	
	;
	;
	if (_First != _Mid && _Mid != _Last)
		_Inplace_merge(
			_Unchecked(_First), _Unchecked(_Mid), _Unchecked(_Last), _Pred,
			_Dist_type(_First), _Val_type(_First));
	}

		
template<class _BidIt,
	class _Ty> inline
	void _Insertion_sort1(_BidIt _First, _BidIt _Last, _Ty *)
	{	
	if (_First != _Last)
		for (_BidIt _Next = _First; ++_Next != _Last; )
			{	
			_BidIt _Next1 = _Next;
			_Ty _Val = _Move(*_Next);

			if (((_Val) < (*_First)))
				{	
				_Move_backward(_First, _Next, ++_Next1);
				*_First = _Move(_Val);
				}
			else
				{	
				for (_BidIt _First1 = _Next1;
					((_Val) < (*--_First1));
					_Next1 = _First1)
					*_Next1 = _Move(*_First1);	
				*_Next1 = _Move(_Val);	
				}
			}
	}

template<class _BidIt> inline
	void _Insertion_sort(_BidIt _First, _BidIt _Last)
	{	
	_Insertion_sort1(_First, _Last, _Val_type(_First));
	}

template<class _RanIt> inline
	void _Med3(_RanIt _First, _RanIt _Mid, _RanIt _Last)
	{	
	if (((*_Mid) < (*_First)))
		::std:: iter_swap(_Mid, _First);
	if (((*_Last) < (*_Mid)))
		::std:: iter_swap(_Last, _Mid);
	if (((*_Mid) < (*_First)))
		::std:: iter_swap(_Mid, _First);
	}

template<class _RanIt> inline
	void _Median(_RanIt _First, _RanIt _Mid, _RanIt _Last)
	{	
	if (40 < _Last - _First)
		{	
		size_t _Step = (_Last - _First + 1) / 8;
		_Med3(_First, _First + _Step, _First + 2 * _Step);
		_Med3(_Mid - _Step, _Mid, _Mid + _Step);
		_Med3(_Last - 2 * _Step, _Last - _Step, _Last);
		_Med3(_First + _Step, _Mid, _Last - _Step);
		}
	else
		_Med3(_First, _Mid, _Last);
	}

template<class _RanIt> inline
	::std:: pair<_RanIt, _RanIt>
		_Unguarded_partition(_RanIt _First, _RanIt _Last)
	{	
	_RanIt _Mid = _First + (_Last - _First) / 2;	
	_Median(_First, _Mid, _Last - 1);
	_RanIt _Pfirst = _Mid;
	_RanIt _Plast = _Pfirst + 1;

	while (_First < _Pfirst
		&& !((*(_Pfirst - 1)) < (*_Pfirst))
		&& !(*_Pfirst < *(_Pfirst - 1)))
		--_Pfirst;
	while (_Plast < _Last
		&& !((*_Plast) < (*_Pfirst))
		&& !(*_Pfirst < *_Plast))
		++_Plast;

	_RanIt _Gfirst = _Plast;
	_RanIt _Glast = _Pfirst;

	for (; ; )
		{	
		for (; _Gfirst < _Last; ++_Gfirst)
			if (((*_Pfirst) < (*_Gfirst)))
				;
			else if (*_Gfirst < *_Pfirst)
				break;
			else
				::std:: iter_swap(_Plast++, _Gfirst);
		for (; _First < _Glast; --_Glast)
			if (((*(_Glast - 1)) < (*_Pfirst)))
				;
			else if (*_Pfirst < *(_Glast - 1))
				break;
			else
				::std:: iter_swap(--_Pfirst, _Glast - 1);
		if (_Glast == _First && _Gfirst == _Last)
			return (::std:: pair<_RanIt, _RanIt>(_Pfirst, _Plast));

		if (_Glast == _First)
			{	
			if (_Plast != _Gfirst)
				::std:: iter_swap(_Pfirst, _Plast);
			++_Plast;
			::std:: iter_swap(_Pfirst++, _Gfirst++);
			}
		else if (_Gfirst == _Last)
			{	
			if (--_Glast != --_Pfirst)
				::std:: iter_swap(_Glast, _Pfirst);
			::std:: iter_swap(_Pfirst, --_Plast);
			}
		else
			::std:: iter_swap(_Gfirst++, --_Glast);
		}
	}

template<class _RanIt,
	class _Diff> inline
	void _Sort(_RanIt _First, _RanIt _Last, _Diff _Ideal)
	{	
	_Diff _Count;
	for (; _ISORT_MAX < (_Count = _Last - _First) && 0 < _Ideal; )
		{	
		::std:: pair<_RanIt, _RanIt> _Mid =
			_Unguarded_partition(_First, _Last);
		_Ideal /= 2, _Ideal += _Ideal / 2;	

		if (_Mid.first - _First < _Last - _Mid.second)
			{	
			_Sort(_First, _Mid.first, _Ideal);
			_First = _Mid.second;
			}
		else
			{	
			_Sort(_Mid.second, _Last, _Ideal);
			_Last = _Mid.first;
			}
		}

	if (_ISORT_MAX < _Count)
		{	
		::std:: make_heap(_First, _Last);
		::std:: sort_heap(_First, _Last);
		}
	else if (1 < _Count)
		_Insertion_sort(_First, _Last);	
	}

template<class _RanIt> inline
	void sort(_RanIt _First, _RanIt _Last)
	{	
	;
	_Sort(_Unchecked(_First), _Unchecked(_Last), _Last - _First);
	}

		
template<class _BidIt,
	class _Pr,
	class _Ty> inline
	void _Insertion_sort1(_BidIt _First, _BidIt _Last, _Pr _Pred, _Ty *)
	{	
	if (_First != _Last)
		for (_BidIt _Next = _First; ++_Next != _Last; )
			{	
			_BidIt _Next1 = _Next;
			_Ty _Val = _Move(*_Next);

			if (_Pred(_Val, *_First))
				{	
				_Move_backward(_First, _Next, ++_Next1);
				*_First = _Move(_Val);
				}
			else
				{	
				for (_BidIt _First1 = _Next1;
					_Pred(_Val, *--_First1);
					_Next1 = _First1)
					*_Next1 = _Move(*_First1);	
				*_Next1 = _Move(_Val);	
				}
			}
	}

template<class _BidIt,
	class _Pr> inline
	void _Insertion_sort(_BidIt _First, _BidIt _Last, _Pr _Pred)
	{	
	_Insertion_sort1(_First, _Last, _Pred, _Val_type(_First));
	}

template<class _RanIt,
	class _Pr> inline
	void _Med3(_RanIt _First, _RanIt _Mid, _RanIt _Last, _Pr _Pred)
	{	
	if (_Pred(*_Mid, *_First))
		::std:: iter_swap(_Mid, _First);
	if (_Pred(*_Last, *_Mid))
		::std:: iter_swap(_Last, _Mid);
	if (_Pred(*_Mid, *_First))
		::std:: iter_swap(_Mid, _First);
	}

template<class _RanIt,
	class _Pr> inline
	void _Median(_RanIt _First, _RanIt _Mid, _RanIt _Last, _Pr _Pred)
	{	
	if (40 < _Last - _First)
		{	
		size_t _Step = (_Last - _First + 1) / 8;
		_Med3(_First, _First + _Step, _First + 2 * _Step, _Pred);
		_Med3(_Mid - _Step, _Mid, _Mid + _Step, _Pred);
		_Med3(_Last - 2 * _Step, _Last - _Step, _Last, _Pred);
		_Med3(_First + _Step, _Mid, _Last - _Step, _Pred);
		}
	else
		_Med3(_First, _Mid, _Last, _Pred);
	}

template<class _RanIt,
	class _Pr> inline
	::std:: pair<_RanIt, _RanIt>
		_Unguarded_partition(_RanIt _First, _RanIt _Last, _Pr _Pred)
	{	
	_RanIt _Mid = _First + (_Last - _First) / 2;
	_Median(_First, _Mid, _Last - 1, _Pred);
	_RanIt _Pfirst = _Mid;
	_RanIt _Plast = _Pfirst + 1;

	while (_First < _Pfirst
		&& !_Pred(*(_Pfirst - 1), *_Pfirst)
		&& !_Pred(*_Pfirst, *(_Pfirst - 1)))
		--_Pfirst;
	while (_Plast < _Last
		&& !_Pred(*_Plast, *_Pfirst)
		&& !_Pred(*_Pfirst, *_Plast))
		++_Plast;

	_RanIt _Gfirst = _Plast;
	_RanIt _Glast = _Pfirst;

	for (; ; )
		{	
		for (; _Gfirst < _Last; ++_Gfirst)
			if (_Pred(*_Pfirst, *_Gfirst))
				;
			else if (_Pred(*_Gfirst, *_Pfirst))
				break;
			else
				::std:: iter_swap(_Plast++, _Gfirst);
		for (; _First < _Glast; --_Glast)
			if (_Pred(*(_Glast - 1), *_Pfirst))
				;
			else if (_Pred(*_Pfirst, *(_Glast - 1)))
				break;
			else
				::std:: iter_swap(--_Pfirst, _Glast - 1);
		if (_Glast == _First && _Gfirst == _Last)
			return (::std:: pair<_RanIt, _RanIt>(_Pfirst, _Plast));

		if (_Glast == _First)
			{	
			if (_Plast != _Gfirst)
				::std:: iter_swap(_Pfirst, _Plast);
			++_Plast;
			::std:: iter_swap(_Pfirst++, _Gfirst++);
			}
		else if (_Gfirst == _Last)
			{	
			if (--_Glast != --_Pfirst)
				::std:: iter_swap(_Glast, _Pfirst);
			::std:: iter_swap(_Pfirst, --_Plast);
			}
		else
			::std:: iter_swap(_Gfirst++, --_Glast);
		}
	}

template<class _RanIt,
	class _Diff,
	class _Pr> inline
	void _Sort(_RanIt _First, _RanIt _Last, _Diff _Ideal, _Pr _Pred)
	{	
	_Diff _Count;
	for (; _ISORT_MAX < (_Count = _Last - _First) && 0 < _Ideal; )
		{	
		::std:: pair<_RanIt, _RanIt> _Mid =
			_Unguarded_partition(_First, _Last, _Pred);
		_Ideal /= 2, _Ideal += _Ideal / 2;	

		if (_Mid.first - _First < _Last - _Mid.second)
			{	
			_Sort(_First, _Mid.first, _Ideal, _Pred);
			_First = _Mid.second;
			}
		else
			{	
			_Sort(_Mid.second, _Last, _Ideal, _Pred);
			_Last = _Mid.first;
			}
		}

	if (_ISORT_MAX < _Count)
		{	
		::std:: make_heap(_First, _Last, _Pred);
		::std:: sort_heap(_First, _Last, _Pred);
		}
	else if (1 < _Count)
		_Insertion_sort(_First, _Last, _Pred);	
	}

template<class _RanIt,
	class _Pr> inline
	void sort(_RanIt _First, _RanIt _Last, _Pr _Pred)
	{	
	;
	;
	_Sort(_Unchecked(_First), _Unchecked(_Last), _Last - _First, _Pred);
	}

		
template<class _BidIt,
	class _OutIt,
	class _Diff> inline
	void _Chunked_merge(_BidIt _First, _BidIt _Last, _OutIt _Dest,
		_Diff _Chunk, _Diff _Count)
	{	
	for (_Diff _Chunk2 = _Chunk * 2; _Chunk2 <= _Count; _Count -= _Chunk2)
		{	
		_BidIt _Mid1 = _First;
		::std:: advance(_Mid1, _Chunk);
		_BidIt _Mid2 = _Mid1;
		::std:: advance(_Mid2, _Chunk);

		_Dest = _Merge(_First, _Mid1, _Mid1, _Mid2, _Dest);
		_First = _Mid2;
		}

	if (_Count <= _Chunk)
		_Move(_First, _Last, _Dest);	
	else
		{	
		_BidIt _Mid = _First;
		::std:: advance(_Mid, _Chunk);

		_Merge(_First, _Mid, _Mid, _Last, _Dest);
		}
	}

template<class _BidIt,
	class _Diff,
	class _Ty> inline
	void _Buffered_merge_sort(_BidIt _First, _BidIt _Last, _Diff _Count,
		_Temp_iterator<_Ty>& _Tempbuf)
	{	
	_BidIt _Mid = _First;
	for (_Diff _Nleft = _Count; _ISORT_MAX <= _Nleft; _Nleft -= _ISORT_MAX)
		{	
		_BidIt _Midend = _Mid;
		::std:: advance(_Midend, (int)_ISORT_MAX);

		_Insertion_sort(_Mid, _Midend);
		_Mid = _Midend;
		}
	_Insertion_sort(_Mid, _Last);	

	for (_Diff _Chunk = _ISORT_MAX; _Chunk < _Count; _Chunk *= 2)
		{	
		_Chunked_merge(_First, _Last, _Tempbuf._Init(),
			_Chunk, _Count);
		_Chunked_merge(_Tempbuf._First(), _Tempbuf._Last(), _First,
			_Chunk *= 2, _Count);
		}
	}

template<class _BidIt,
	class _Diff,
	class _Ty> inline
	void _Stable_sort(_BidIt _First, _BidIt _Last, _Diff _Count,
		_Temp_iterator<_Ty>& _Tempbuf)
	{	
	if (_Count <= _ISORT_MAX)
		_Insertion_sort(_First, _Last);	
	else
		{	
		_Diff _Count2 = (_Count + 1) / 2;
		_BidIt _Mid = _First;
		::std:: advance(_Mid, _Count2);

		if (_Count2 <= _Tempbuf._Maxlen())
			{	
			_Buffered_merge_sort(_First, _Mid, _Count2, _Tempbuf);
			_Buffered_merge_sort(_Mid, _Last, _Count - _Count2, _Tempbuf);
			}
		else
			{	
			_Stable_sort(_First, _Mid, _Count2, _Tempbuf);
			_Stable_sort(_Mid, _Last, _Count - _Count2, _Tempbuf);
			}

		_Buffered_merge(_First, _Mid, _Last,
			_Count2, _Count - _Count2, _Tempbuf);	
		}
	}

template<class _BidIt,
	class _Diff,
	class _Ty> inline
	void _Stable_sort(_BidIt _First, _BidIt _Last, _Diff *, _Ty *)
	{	
	_Diff _Count = 0;
	_Distance(_First, _Last, _Count);
	_Temp_iterator<_Ty> _Tempbuf((_Count + 1) / 2);
	_Stable_sort(_First, _Last, _Count, _Tempbuf);
	}

template<class _BidIt> inline
	void stable_sort(_BidIt _First, _BidIt _Last)
	{	
	;
	if (_First != _Last)
		_Stable_sort(_Unchecked(_First), _Unchecked(_Last),
			_Dist_type(_First), _Val_type(_First));
	}

		
template<class _BidIt,
	class _OutIt,
	class _Diff,
	class _Pr> inline
	void _Chunked_merge(_BidIt _First, _BidIt _Last, _OutIt _Dest,
		_Diff _Chunk, _Diff _Count, _Pr _Pred)
	{	
	for (_Diff _Chunk2 = _Chunk * 2; _Chunk2 <= _Count; _Count -= _Chunk2)
		{	
		_BidIt _Mid1 = _First;
		::std:: advance(_Mid1, _Chunk);
		_BidIt _Mid2 = _Mid1;
		::std:: advance(_Mid2, _Chunk);

		_Dest = _Merge(_First, _Mid1, _Mid1, _Mid2, _Dest, _Pred);
		_First = _Mid2;
		}

	if (_Count <= _Chunk)
		_Move(_First, _Last, _Dest);	
	else
		{	
		_BidIt _Mid1 = _First;
		::std:: advance(_Mid1, _Chunk);

		_Merge(_First, _Mid1, _Mid1, _Last, _Dest, _Pred);
		}
	}

template<class _BidIt,
	class _Diff,
	class _Ty,
	class _Pr> inline
	void _Buffered_merge_sort(_BidIt _First, _BidIt _Last, _Diff _Count,
		_Temp_iterator<_Ty>& _Tempbuf, _Pr _Pred)
	{	
	_BidIt _Mid = _First;
	for (_Diff _Nleft = _Count; _ISORT_MAX <= _Nleft; _Nleft -= _ISORT_MAX)
		{	
		_BidIt _Midn = _Mid;
		::std:: advance(_Midn, (int)_ISORT_MAX);

		_Insertion_sort(_Mid, _Midn, _Pred);
		_Mid = _Midn;
		}
	_Insertion_sort(_Mid, _Last, _Pred);	

	for (_Diff _Chunk = _ISORT_MAX; _Chunk < _Count; _Chunk *= 2)
		{	
		_Chunked_merge(_First, _Last, _Tempbuf._Init(),
			_Chunk, _Count, _Pred);
		_Chunked_merge(_Tempbuf._First(), _Tempbuf._Last(), _First,
			_Chunk *= 2, _Count, _Pred);
		}
	}

template<class _BidIt,
	class _Diff,
	class _Ty,
	class _Pr> inline
	void _Stable_sort(_BidIt _First, _BidIt _Last, _Diff _Count,
		_Temp_iterator<_Ty>& _Tempbuf, _Pr _Pred)
	{	
	if (_Count <= _ISORT_MAX)
		_Insertion_sort(_First, _Last, _Pred);	
	else
		{	
		_Diff _Count2 = (_Count + 1) / 2;
		_BidIt _Mid = _First;
		::std:: advance(_Mid, _Count2);

		if (_Count2 <= _Tempbuf._Maxlen())
			{	
			_Buffered_merge_sort(_First, _Mid, _Count2, _Tempbuf, _Pred);
			_Buffered_merge_sort(_Mid, _Last, _Count - _Count2,
				_Tempbuf, _Pred);
			}
		else
			{	
			_Stable_sort(_First, _Mid, _Count2, _Tempbuf, _Pred);
			_Stable_sort(_Mid, _Last, _Count - _Count2, _Tempbuf, _Pred);
			}

		_Buffered_merge(_First, _Mid, _Last,
			_Count2, _Count - _Count2, _Tempbuf, _Pred);	
		}
	}

template<class _BidIt,
	class _Diff,
	class _Ty,
	class _Pr> inline
	void _Stable_sort(_BidIt _First, _BidIt _Last, _Diff *, _Ty *, _Pr _Pred)
	{	
	_Diff _Count = 0;
	_Distance(_First, _Last, _Count);
	_Temp_iterator<_Ty> _Tempbuf((_Count + 1) / 2);
	_Stable_sort(_First, _Last, _Count, _Tempbuf, _Pred);
	}

template<class _BidIt,
	class _Pr> inline
	void stable_sort(_BidIt _First, _BidIt _Last, _Pr _Pred)
	{	
	;
	;
	if (_First != _Last)
		_Stable_sort(_Unchecked(_First), _Unchecked(_Last),
			_Dist_type(_First), _Val_type(_First), _Pred);
	}

		
template<class _RanIt,
	class _Ty> inline
	void _Partial_sort(_RanIt _First, _RanIt _Mid, _RanIt _Last, _Ty *)
	{	
	;
	;
	::std:: make_heap(_First, _Mid);

	for (_RanIt _Next = _Mid; _Next < _Last; ++_Next)
		if (((*_Next) < (*_First)))
			{	
			_Ty _Val = _Move(*_Next);
			_Pop_heap(_First, _Mid, _Next, _Move(_Val),
				_Dist_type(_First));
			}
	::std:: sort_heap(_First, _Mid);
	}

template<class _RanIt> inline
	void partial_sort(_RanIt _First, _RanIt _Mid, _RanIt _Last)
	{	
	_Partial_sort(
		_Unchecked(_First), _Unchecked(_Mid), _Unchecked(_Last),
		_Val_type(_First));
	}

		
template<class _RanIt,
	class _Ty,
	class _Pr> inline
	void _Partial_sort(_RanIt _First, _RanIt _Mid, _RanIt _Last,
		_Pr _Pred, _Ty *)
	{	
	;
	;
	;
	::std:: make_heap(_First, _Mid, _Pred);

	for (_RanIt _Next = _Mid; _Next < _Last; ++_Next)
		if (_Pred(*_Next, *_First))
			{	
			_Ty _Val = _Move(*_Next);
			_Pop_heap(_First, _Mid, _Next, _Move(_Val), _Pred,
				_Dist_type(_First));
			}
	::std:: sort_heap(_First, _Mid, _Pred);
	}

template<class _RanIt,
	class _Pr> inline
	void partial_sort(_RanIt _First, _RanIt _Mid, _RanIt _Last, _Pr _Pred)
	{	
	_Partial_sort(
		_Unchecked(_First), _Unchecked(_Mid), _Unchecked(_Last), _Pred,
		_Val_type(_First));
	}

		
template<class _InIt,
	class _RanIt,
	class _Diff,
	class _Ty> inline
	_RanIt _Partial_sort_copy(_InIt _First1, _InIt _Last1,
		_RanIt _First2, _RanIt _Last2, _Diff *, _Ty *)
	{	
	_RanIt _Mid2 = _First2;
	for (; _First1 != _Last1 && _Mid2 != _Last2; ++_First1, ++_Mid2)
		*_Mid2 = *_First1;	
	::std:: make_heap(_First2, _Mid2);

	for (; _First1 != _Last1; ++_First1)
		if (((*_First1) < (*_First2)))
			_Adjust_heap(_First2, _Diff(0), _Diff(_Mid2 - _First2),
				_Ty(*_First1));	

	::std:: sort_heap(_First2, _Mid2);
	return (_Mid2);
	}

template<class _InIt,
	class _RanIt> inline
	_RanIt partial_sort_copy(_InIt _First1, _InIt _Last1,
		_RanIt _First2, _RanIt _Last2)
	{	
	;
	;
	return (_First1 == _Last1 || _First2 == _Last2 ? _First2
		: _Rechecked(_First2,
			_Partial_sort_copy(
				_Unchecked(_First1), _Unchecked(_Last1),
				_Unchecked(_First2), _Unchecked(_Last2),
				_Dist_type(_First2), _Val_type(_First1))));
	}

		
template<class _InIt,
	class _RanIt,
	class _Diff,
	class _Ty,
	class _Pr> inline
	_RanIt _Partial_sort_copy(_InIt _First1, _InIt _Last1,
		_RanIt _First2, _RanIt _Last2, _Pr _Pred, _Diff *, _Ty *)
	{	
	_RanIt _Mid2 = _First2;
	for (; _First1 != _Last1 && _Mid2 != _Last2; ++_First1, ++_Mid2)
		*_Mid2 = *_First1;	
	::std:: make_heap(_First2, _Mid2, _Pred);

	for (; _First1 != _Last1; ++_First1)
		if (_Pred(*_First1, *_First2))
			_Adjust_heap(_First2, _Diff(0), _Diff(_Mid2 - _First2),
				_Ty(*_First1), _Pred);	

	::std:: sort_heap(_First2, _Mid2, _Pred);
	return (_Mid2);
	}

template<class _InIt,
	class _RanIt,
	class _Pr> inline
	_RanIt partial_sort_copy(_InIt _First1, _InIt _Last1,
		_RanIt _First2, _RanIt _Last2, _Pr _Pred)
	{	
	;
	;
	;
	return (_First1 == _Last1 || _First2 == _Last2 ? _First2
		: _Rechecked(_First2,
			_Partial_sort_copy(
				_Unchecked(_First1), _Unchecked(_Last1),
				_Unchecked(_First2), _Unchecked(_Last2), _Pred,
				_Dist_type(_First2), _Val_type(_First1))));
	}

		
template<class _RanIt> inline
	void _Nth_element(_RanIt _First, _RanIt _Nth, _RanIt _Last)
	{	
	for (; _ISORT_MAX < _Last - _First; )
		{	
		::std:: pair<_RanIt, _RanIt> _Mid =
			_Unguarded_partition(_First, _Last);

		if (_Mid.second <= _Nth)
			_First = _Mid.second;
		else if (_Mid.first <= _Nth)
			return;	
		else
			_Last = _Mid.first;
		}

	_Insertion_sort(_First, _Last);	
	}

template<class _RanIt> inline
	void nth_element(_RanIt _First, _RanIt _Nth, _RanIt _Last)
	{	
	;
	_Nth_element(
		_Unchecked(_First), _Unchecked(_Nth), _Unchecked(_Last));
	}

		
template<class _RanIt,
	class _Pr> inline
	void _Nth_element(_RanIt _First, _RanIt _Nth, _RanIt _Last, _Pr _Pred)
	{	
	for (; _ISORT_MAX < _Last - _First; )
		{	
		::std:: pair<_RanIt, _RanIt> _Mid =
			_Unguarded_partition(_First, _Last, _Pred);

		if (_Mid.second <= _Nth)
			_First = _Mid.second;
		else if (_Mid.first <= _Nth)
			return;	
		else
			_Last = _Mid.first;
		}

	_Insertion_sort(_First, _Last, _Pred);	
	}

template<class _RanIt,
	class _Pr> inline
	void nth_element(_RanIt _First, _RanIt _Nth, _RanIt _Last, _Pr _Pred)
	{	
	;
	;
	_Nth_element(
		_Unchecked(_First), _Unchecked(_Nth), _Unchecked(_Last), _Pred);
	}

		
template<class _InIt1,
	class _InIt2> inline
	bool _Includes(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2)
	{	
	for (; _First1 != _Last1 && _First2 != _Last2; )
		if (((*_First2) < (*_First1)))
			return (false);
		else if (*_First1 < *_First2)
			++_First1;
		else
			{	
			++_First1;
			++_First2;
			}
	return (_First2 == _Last2);
	}

template<class _InIt1,
	class _InIt2> inline
	bool includes(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2)
	{	
	;
	;
	return (_Includes(_Unchecked(_First1), _Unchecked(_Last1),
		_Unchecked(_First2), _Unchecked(_Last2)));
	}

		
template<class _InIt1,
	class _InIt2,
	class _Pr> inline
	bool _Includes(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2, _Pr _Pred)
	{	
	for (; _First1 != _Last1 && _First2 != _Last2; )
		if (_Pred(*_First2, *_First1))
			return (false);
		else if (_Pred(*_First1, *_First2))
			++_First1;
		else
			{	
			++_First1;
			++_First2;
			}
	return (_First2 == _Last2);
	}

template<class _InIt1,
	class _InIt2,
	class _Pr> inline
	bool includes(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2, _Pr _Pred)
	{	
	;
	;
	return (_Includes(_Unchecked(_First1), _Unchecked(_Last1),
		_Unchecked(_First2), _Unchecked(_Last2), _Pred));
	}

		
template<class _InIt1,
	class _InIt2,
	class _OutIt> inline
	_OutIt _Set_union(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2,
		_OutIt _Dest)
	{	
	for (; _First1 != _Last1 && _First2 != _Last2; )
		if (((*_First1) < (*_First2)))
			{	
			*_Dest++ = *_First1;
			++_First1;
			}
		else if (*_First2 < *_First1)
			{	
			*_Dest++ = *_First2;
			++_First2;
			}
		else
			{	
			*_Dest++ = *_First1;
			++_First1;
			++_First2;
			}
	_Dest = ::std:: copy(_First1, _Last1, _Dest);
	return (::std:: copy(_First2, _Last2, _Dest));
	}

 
template<class _InIt1,
	class _InIt2,
	class _OutIt> inline
	_OutIt set_union(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2,
		_OutIt _Dest)
	{	
	return (_Set_union(_Unchecked(_First1), _Unchecked(_Last1),
		_Unchecked(_First2), _Unchecked(_Last2),
		_Dest));
	}

 




















































#line 4378 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\algorithm"

		
template<class _InIt1,
	class _InIt2,
	class _OutIt,
	class _Pr> inline
	_OutIt _Set_union(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2, _OutIt _Dest, _Pr _Pred)
	{	
	for (; _First1 != _Last1 && _First2 != _Last2; )
		if (_Pred(*_First1, *_First2))
			{	
			*_Dest++ = *_First1;
			++_First1;
			}
		else if (_Pred(*_First2, *_First1))
			{	
			*_Dest++ = *_First2;
			++_First2;
			}
		else
			{	
			*_Dest++ = *_First1;
			++_First1;
			++_First2;
			}
	_Dest = ::std:: copy(_First1, _Last1, _Dest);
	return (::std:: copy(_First2, _Last2, _Dest));
	}

 
template<class _InIt1,
	class _InIt2,
	class _OutIt,
	class _Pr> inline
	_OutIt set_union(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2, _OutIt _Dest, _Pr _Pred)
	{	
	return (_Set_union(_Unchecked(_First1), _Unchecked(_Last1),
		_Unchecked(_First2), _Unchecked(_Last2),
		_Dest, _Pred));
	}

 
























































#line 4479 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\algorithm"

		
template<class _InIt1,
	class _InIt2,
	class _OutIt> inline
	_OutIt _Set_intersection(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2, _OutIt _Dest)
	{	
	for (; _First1 != _Last1 && _First2 != _Last2; )
		if (((*_First1) < (*_First2)))
			++_First1;
		else if (*_First2 < *_First1)
			++_First2;
		else
			{	
			*_Dest++ = *_First1++;
			++_First2;
			}
	return (_Dest);
	}

 
template<class _InIt1,
	class _InIt2,
	class _OutIt> inline
	_OutIt set_intersection(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2, _OutIt _Dest)
	{	
	return (_Set_intersection(_Unchecked(_First1), _Unchecked(_Last1),
		_Unchecked(_First2), _Unchecked(_Last2),
		_Dest));
	}

 




















































#line 4566 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\algorithm"

		
template<class _InIt1,
	class _InIt2,
	class _OutIt,
	class _Pr> inline
	_OutIt _Set_intersection(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2, _OutIt _Dest, _Pr _Pred)
	{	
	for (; _First1 != _Last1 && _First2 != _Last2; )
		if (_Pred(*_First1, *_First2))
			++_First1;
		else if (_Pred(*_First2, *_First1))
			++_First2;
		else
			{	
			*_Dest++ = *_First1++;
			++_First2;
			}
	return (_Dest);
	}

 
template<class _InIt1,
	class _InIt2,
	class _OutIt,
	class _Pr> inline
	_OutIt set_intersection(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2, _OutIt _Dest, _Pr _Pred)
	{	
	return (_Set_intersection(_Unchecked(_First1), _Unchecked(_Last1),
		_Unchecked(_First2), _Unchecked(_Last2),
		_Dest, _Pred));
	}

 
























































#line 4659 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\algorithm"

		
template<class _InIt1,
	class _InIt2,
	class _OutIt> inline
	_OutIt _Set_difference(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2,
		_OutIt _Dest)
	{	
	for (; _First1 != _Last1 && _First2 != _Last2; )
		if (((*_First1) < (*_First2)))
			{	
			*_Dest++ = *_First1;
			++_First1;
			}
		else if (*_First2 < *_First1)
			++_First2;
		else
			{	
			++_First1;
			++_First2;
			}
	return (::std:: copy(_First1, _Last1, _Dest));
	}

 
template<class _InIt1,
	class _InIt2,
	class _OutIt> inline
	_OutIt set_difference(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2,
		_OutIt _Dest)
	{	
	return (_Set_difference(_Unchecked(_First1), _Unchecked(_Last1),
		_Unchecked(_First2), _Unchecked(_Last2),
		_Dest));
	}

 






















































#line 4753 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\algorithm"

		
template<class _InIt1,
	class _InIt2,
	class _OutIt,
	class _Pr> inline
	_OutIt _Set_difference(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2,
		_OutIt _Dest, _Pr _Pred)
	{	
	for (; _First1 != _Last1 && _First2 != _Last2; )
		if (_Pred(*_First1, *_First2))
			{	
			*_Dest++ = *_First1;
			++_First1;
			}
		else if (_Pred(*_First2, *_First1))
			++_First2;
		else
			{	
			++_First1;
			++_First2;
			}
	return (::std:: copy(_First1, _Last1, _Dest));
	}

 
template<class _InIt1,
	class _InIt2,
	class _OutIt,
	class _Pr> inline
	_OutIt set_difference(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2,
		_OutIt _Dest, _Pr _Pred)
	{	
	return (_Set_difference(_Unchecked(_First1), _Unchecked(_Last1),
		_Unchecked(_First2), _Unchecked(_Last2),
		_Dest, _Pred));
	}

 


























































#line 4853 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\algorithm"

		
template<class _InIt1,
	class _InIt2,
	class _OutIt> inline
	_OutIt _Set_symmetric_difference(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2,
		_OutIt _Dest)
	{	
	for (; _First1 != _Last1 && _First2 != _Last2; )
		if (((*_First1) < (*_First2)))
			{	
			*_Dest++ = *_First1;
			++_First1;
			}
		else if (*_First2 < *_First1)
			{	
			*_Dest++ = *_First2;
			++_First2;
			}
		else
			{	
			++_First1;
			++_First2;
			}
	_Dest = ::std:: copy(_First1, _Last1, _Dest);
	return (::std:: copy(_First2, _Last2, _Dest));
	}

 
template<class _InIt1,
	class _InIt2,
	class _OutIt> inline
	_OutIt set_symmetric_difference(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2,
		_OutIt _Dest)
	{	
	return (_Set_symmetric_difference(
		_Unchecked(_First1), _Unchecked(_Last1),
		_Unchecked(_First2), _Unchecked(_Last2),
		_Dest));
	}

 























































#line 4953 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\algorithm"

		
template<class _InIt1,
	class _InIt2,
	class _OutIt,
	class _Pr> inline
	_OutIt _Set_symmetric_difference(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2,
		_OutIt _Dest, _Pr _Pred)
	{	
	for (; _First1 != _Last1 && _First2 != _Last2; )
		if (_Pred(*_First1, *_First2))
			{	
			*_Dest++ = *_First1;
			++_First1;
			}
		else if (_Pred(*_First2, *_First1))
			{	
			*_Dest++ = *_First2;
			++_First2;
			}
		else
			{	
			++_First1;
			++_First2;
			}
	_Dest = ::std:: copy(_First1, _Last1, _Dest);
	return (::std:: copy(_First2, _Last2, _Dest));
	}

 
template<class _InIt1,
	class _InIt2,
	class _OutIt,
	class _Pr> inline
	_OutIt set_symmetric_difference(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2,
		_OutIt _Dest, _Pr _Pred)
	{	
	return (_Set_symmetric_difference(
		_Unchecked(_First1), _Unchecked(_Last1),
		_Unchecked(_First2), _Unchecked(_Last2),
		_Dest, _Pred));
	}

 



























































#line 5059 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\algorithm"

		
template<class _FwdIt> inline
	_FwdIt _Max_element(_FwdIt _First, _FwdIt _Last)
	{	
	_FwdIt _Found = _First;
	if (_First != _Last)
		for (; ++_First != _Last; )
			if (((*_Found) < (*_First)))
				_Found = _First;
	return (_Found);
	}

template<class _FwdIt> inline
	_FwdIt max_element(_FwdIt _First, _FwdIt _Last)
	{	
	;
	return (_Rechecked(_First,
		_Max_element(_Unchecked(_First), _Unchecked(_Last))));
	}

		
template<class _FwdIt,
	class _Pr> inline
	_FwdIt _Max_element(_FwdIt _First, _FwdIt _Last, _Pr _Pred)
	{	
	_FwdIt _Found = _First;
	if (_First != _Last)
		for (; ++_First != _Last; )
			if (_Pred(*_Found, *_First))
				_Found = _First;
	return (_Found);
	}

template<class _FwdIt,
	class _Pr> inline
	_FwdIt max_element(_FwdIt _First, _FwdIt _Last, _Pr _Pred)
	{	
	;
	;
	return (_Rechecked(_First,
		_Max_element(_Unchecked(_First), _Unchecked(_Last), _Pred)));
	}

		
template<class _FwdIt> inline
	_FwdIt _Min_element(_FwdIt _First, _FwdIt _Last)
	{	
	_FwdIt _Found = _First;
	if (_First != _Last)
		for (; ++_First != _Last; )
			if (((*_First) < (*_Found)))
				_Found = _First;
	return (_Found);
	}

template<class _FwdIt> inline
	_FwdIt min_element(_FwdIt _First, _FwdIt _Last)
	{	
	;
	return (_Rechecked(_First,
		_Min_element(_Unchecked(_First), _Unchecked(_Last))));
	}

		
template<class _FwdIt,
	class _Pr> inline
	_FwdIt _Min_element(_FwdIt _First, _FwdIt _Last, _Pr _Pred)
	{	
	_FwdIt _Found = _First;
	if (_First != _Last)
		for (; ++_First != _Last; )
			if (_Pred(*_First, *_Found))
				_Found = _First;
	return (_Found);
	}

template<class _FwdIt,
	class _Pr> inline
	_FwdIt min_element(_FwdIt _First, _FwdIt _Last, _Pr _Pred)
	{	
	;
	;
	return (_Rechecked(_First,
		_Min_element(_Unchecked(_First), _Unchecked(_Last), _Pred)));
	}

 
		
template<class _FwdIt> inline
	::std:: pair<_FwdIt, _FwdIt>
		_Minmax_element(_FwdIt _First, _FwdIt _Last)
	{	
	::std:: pair<_FwdIt, _FwdIt> _Found(_First, _First);

	if (_First != _Last)
		for (; ++_First != _Last; )
			{	
			_FwdIt _Next = _First;
			if (++_Next == _Last)
				{	
				if (((*_First) < (*_Found.first)))
					_Found.first = _First;
				else if (((*_Found.second) < (*_First)))
					_Found.second = _First;
				}
			else
				{	
				if (((*_Next) < (*_First)))
					{	
					if (((*_Next) < (*_Found.first)))
						_Found.first = _Next;
					if (((*_Found.second) < (*_First)))
						_Found.second = _First;
					}
				else
					{	
					if (((*_First) < (*_Found.first)))
						_Found.first = _First;
					if (((*_Found.second) < (*_Next)))
						_Found.second = _Next;
					}
				_First = _Next;
				}
			}
	return (_Found);
	}

template<class _FwdIt> inline
	::std:: pair<_FwdIt, _FwdIt>
		minmax_element(_FwdIt _First, _FwdIt _Last)
	{	
	;
	::std:: pair<typename _Get_unchecked_type<_FwdIt>::type, typename _Get_unchecked_type<_FwdIt>::type> _Ans(
		_Minmax_element(_Unchecked(_First), _Unchecked(_Last)));
	return (::std:: pair<_FwdIt, _FwdIt>(
		_Rechecked(_First, _Ans.first),
		_Rechecked(_Last, _Ans.second)));
	}

		
template<class _FwdIt,
	class _Pr> inline
	::std:: pair<_FwdIt, _FwdIt>
		_Minmax_element(_FwdIt _First, _FwdIt _Last, _Pr _Pred)
	{	
	::std:: pair<_FwdIt, _FwdIt> _Found(_First, _First);

	if (_First != _Last)
		for (; ++_First != _Last; )
			{	
			_FwdIt _Next = _First;
			if (++_Next == _Last)
				{	
				if (_Pred(*_First, *_Found.first))
					_Found.first = _First;
				else if (_Pred(*_Found.second, *_First))
					_Found.second = _First;
				}
			else
				{	
				if (_Pred(*_Next, *_First))
					{	
					if (_Pred(*_Next, *_Found.first))
						_Found.first = _Next;
					if (_Pred(*_Found.second, *_First))
						_Found.second = _First;
					}
				else
					{	
					if (_Pred(*_First, *_Found.first))
						_Found.first = _First;
					if (_Pred(*_Found.second, *_Next))
						_Found.second = _Next;
					}
				_First = _Next;
				}
			}
	return (_Found);
	}

template<class _FwdIt,
	class _Pr> inline
	::std:: pair<_FwdIt, _FwdIt>
		minmax_element(_FwdIt _First, _FwdIt _Last, _Pr _Pred)
	{	
	;
	;
	::std:: pair<typename _Get_unchecked_type<_FwdIt>::type, typename _Get_unchecked_type<_FwdIt>::type> _Ans(
		_Minmax_element(_Unchecked(_First), _Unchecked(_Last), _Pred));
	return (::std:: pair<_FwdIt, _FwdIt>(
		_Rechecked(_First, _Ans.first),
		_Rechecked(_Last, _Ans.second)));
	}
 #line 5254 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\algorithm"

		
template<class _BidIt> inline
	bool _Next_permutation(_BidIt _First, _BidIt _Last)
	{	
	_BidIt _Next = _Last;
	if (_First == _Last || _First == --_Next)
		return (false);

	for (; ; )
		{	
		_BidIt _Next1 = _Next;
		if (((*--_Next) < (*_Next1)))
			{	
			_BidIt _Mid = _Last;
			for (; !((*_Next) < (*--_Mid)); )
				;
			::std:: iter_swap(_Next, _Mid);
			::std:: reverse(_Next1, _Last);
			return (true);
			}

		if (_Next == _First)
			{	
			::std:: reverse(_First, _Last);
			return (false);
			}
		}
	}

template<class _BidIt> inline
	bool next_permutation(_BidIt _First, _BidIt _Last)
	{	
	;
	return (_Next_permutation(_Unchecked(_First), _Unchecked(_Last)));
	}

		
template<class _BidIt,
	class _Pr> inline
	bool _Next_permutation(_BidIt _First, _BidIt _Last, _Pr _Pred)
	{	
	_BidIt _Next = _Last;
	if (_First == _Last || _First == --_Next)
		return (false);

	for (; ; )
		{	
		_BidIt _Next1 = _Next;
		if (_Pred(*--_Next, *_Next1))
			{	
			_BidIt _Mid = _Last;
			for (; !_Pred(*_Next, *--_Mid); )
				;
			::std:: iter_swap(_Next, _Mid);
			::std:: reverse(_Next1, _Last);
			return (true);
			}

		if (_Next == _First)
			{	
			::std:: reverse(_First, _Last);
			return (false);
			}
		}
	}

template<class _BidIt,
	class _Pr> inline
	bool next_permutation(_BidIt _First, _BidIt _Last, _Pr _Pred)
	{	
	;
	;
	return (_Next_permutation(_Unchecked(_First), _Unchecked(_Last), _Pred));
	}

		
template<class _BidIt> inline
	bool _Prev_permutation(_BidIt _First, _BidIt _Last)
	{	
	_BidIt _Next = _Last;
	if (_First == _Last || _First == --_Next)
		return (false);
	for (; ; )
		{	
		_BidIt _Next1 = _Next;
		if (((*_Next1) < (*--_Next)))
			{	
			_BidIt _Mid = _Last;
			for (; !((*--_Mid) < (*_Next)); )
				;
			::std:: iter_swap(_Next, _Mid);
			::std:: reverse(_Next1, _Last);
			return (true);
			}

		if (_Next == _First)
			{	
			::std:: reverse(_First, _Last);
			return (false);
			}
		}
	}

template<class _BidIt> inline
	bool prev_permutation(_BidIt _First, _BidIt _Last)
	{	
	;
	return (_Prev_permutation(_Unchecked(_First), _Unchecked(_Last)));
	}

		
template<class _BidIt,
	class _Pr> inline
	bool _Prev_permutation(_BidIt _First, _BidIt _Last, _Pr _Pred)
	{	
	_BidIt _Next = _Last;
	if (_First == _Last || _First == --_Next)
		return (false);

	for (; ; )
		{	
		_BidIt _Next1 = _Next;
		if (_Pred(*_Next1, *--_Next))
			{	
			_BidIt _Mid = _Last;
			for (; !_Pred(*--_Mid, *_Next); )
				;
			::std:: iter_swap(_Next, _Mid);
			::std:: reverse(_Next1, _Last);
			return (true);
			}

		if (_Next == _First)
			{	
			::std:: reverse(_First, _Last);
			return (false);
			}
		}
	}

template<class _BidIt,
	class _Pr> inline
	bool prev_permutation(_BidIt _First, _BidIt _Last, _Pr _Pred)
	{	
	;
	;
	return (_Prev_permutation(_Unchecked(_First), _Unchecked(_Last), _Pred));
	}

 
		
template<class _RanIt,
	class _Diff> inline
	_RanIt _Is_heap_until(_RanIt _First, _RanIt _Last, _Diff *)
	{	
	_Diff _Size = _Last - _First;

	if (2 <= _Size)
		for (_Diff _Off = 0; ++_Off < _Size; )
			if (((*(_First + (_Off - 1) / 2)) < (*(_First + _Off))))
				return (_First + _Off);
	return (_Last);
	}

template<class _RanIt>
	_RanIt is_heap_until(_RanIt _First, _RanIt _Last)
	{	
	;
	return (_Rechecked(_First,
		_Is_heap_until(_Unchecked(_First), _Unchecked(_Last),
			_Dist_type(_First))));
	}

template<class _RanIt>
	bool is_heap(_RanIt _First, _RanIt _Last)
	{	
	return (_Is_heap_until(_First, _Last, _Dist_type(_First))
		== _Last);
	}

		
template<class _RanIt,
	class _Diff,
	class _Pr> inline
	_RanIt _Is_heap_until(_RanIt _First, _RanIt _Last, _Pr _Pred, _Diff *)
	{	
	_Diff _Size = _Last - _First;

	if (2 <= _Size)
		for (_Diff _Off = 0; ++_Off < _Size; )
			if (_Pred(*(_First + (_Off - 1) / 2), *(_First + _Off)))
#line 5447 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\algorithm"
				return (_First + _Off);
	return (_Last);
	}

template<class _RanIt,
	class _Pr>
	_RanIt is_heap_until(_RanIt _First, _RanIt _Last, _Pr _Pred)
	{	
	;
	;
	return (_Rechecked(_First,
		_Is_heap_until(_Unchecked(_First), _Unchecked(_Last), _Pred,
			_Dist_type(_First))));
	}

template<class _RanIt,
	class _Pr>
	bool is_heap(_RanIt _First, _RanIt _Last, _Pr _Pred)
	{	
	return (_Is_heap_until(_First, _Last, _Pred, _Dist_type(_First))
		== _Last);
	}

		
template<class _FwdIt> inline
	_FwdIt _Is_sorted_until(_FwdIt _First, _FwdIt _Last)
	{	
	if (_First != _Last)
		for (_FwdIt _Next = _First; ++_Next != _Last; ++_First)
			if (((*_Next) < (*_First)))
				return (_Next);
	return (_Last);
	}

template<class _FwdIt> inline
	_FwdIt is_sorted_until(_FwdIt _First, _FwdIt _Last)
	{	
	;
	return (_Rechecked(_First,
		_Is_sorted_until(_Unchecked(_First), _Unchecked(_Last))));
	}

template<class _FwdIt> inline
	bool is_sorted(_FwdIt _First, _FwdIt _Last)
	{	
	return (::std:: is_sorted_until(_First, _Last) == _Last);
	}

		
template<class _FwdIt,
	class _Pr> inline
	_FwdIt _Is_sorted_until(_FwdIt _First, _FwdIt _Last, _Pr _Pred)
	{	
	if (_First != _Last)
		for (_FwdIt _Next = _First; ++_Next != _Last; ++_First)
			if (_Pred(*_Next, *_First))
				return (_Next);
	return (_Last);
	}

template<class _FwdIt,
	class _Pr> inline
	_FwdIt is_sorted_until(_FwdIt _First, _FwdIt _Last, _Pr _Pred)
	{	
	;
	;
	return (_Rechecked(_First,
		_Is_sorted_until(_Unchecked(_First), _Unchecked(_Last), _Pred)));
	}

template<class _FwdIt,
	class _Pr> inline
	bool is_sorted(_FwdIt _First, _FwdIt _Last, _Pr _Pred)
	{	
	return (::std:: is_sorted_until(_First, _Last, _Pred) == _Last);
	}
 #line 5524 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\algorithm"
}
 #pragma warning(pop)
 #pragma pack(pop)

#line 5529 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\algorithm"
#line 5530 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\algorithm"























#line 11 "c:\\users\\blake\\documents\\github\\pct-reconstruction\\pCT_Reconstruction.h"
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\array"

#pragma once




#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\iterator"

#pragma once



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\istream"

#pragma once



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\ostream"

#pragma once



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\ios"

#pragma once



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xlocnum"

#pragma once







#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\streambuf"

#pragma once



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xiosbase"

#pragma once



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xlocale"

#pragma once





#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\stdexcept"

#pragma once




#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xstring"

#pragma once





 #pragma pack(push,8)
 #pragma warning(push,3)

namespace std {
  #pragma warning(disable: 4251)

template<class _Elem,
	class _Traits = char_traits<_Elem>,
	class _Ax = allocator<_Elem> >
	class basic_string;

  
  
  

		
template<class _Elem,
	class _Traits,
	class _Alloc>
	class _String_const_iterator
		: public _Iterator012<random_access_iterator_tag,
			typename _Alloc::value_type,
			typename _Alloc::difference_type,
			typename _Alloc::const_pointer,
			typename _Alloc::const_reference,
			_Iterator_base>
	{	
public:
	typedef _String_const_iterator<_Elem, _Traits, _Alloc> _Myiter;
	typedef basic_string<_Elem, _Traits, _Alloc> _Mystr;
	typedef random_access_iterator_tag iterator_category;

	typedef typename _Alloc::value_type value_type;
	typedef typename _Alloc::difference_type difference_type;
	typedef typename _Alloc::const_pointer pointer;
	typedef typename _Alloc::const_reference reference;

	_String_const_iterator()
		{	
		this->_Ptr = 0;
		}

	_String_const_iterator(pointer _Parg, const _Container_base *_Pstring)
		{	
		this->_Adopt(_Pstring);
		this->_Ptr = _Parg;
		}

	typedef pointer _Unchecked_type;

	_Myiter& _Rechecked(_Unchecked_type _Right)
		{	
		this->_Ptr = _Right;
		return (*this);
		}

	_Unchecked_type _Unchecked() const
		{	
		return (_Unchecked_type(this->_Ptr));
		}

	reference operator*() const
		{	
 










#line 83 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xstring"





#line 89 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xstring"

		;

		return (*this->_Ptr);
		}

	pointer operator->() const
		{	
		return (&**this);
		}

	_Myiter& operator++()
		{	
 









#line 113 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xstring"




#line 118 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xstring"

		++this->_Ptr;
		return (*this);
		}

	_Myiter operator++(int)
		{	
		_Myiter _Tmp = *this;
		++*this;
		return (_Tmp);
		}

	_Myiter& operator--()
		{	
 








#line 142 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xstring"



#line 146 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xstring"

		--this->_Ptr;
		return (*this);
		}

	_Myiter operator--(int)
		{	
		_Myiter _Tmp = *this;
		--*this;
		return (_Tmp);
		}

	_Myiter& operator+=(difference_type _Off)
		{	
 










#line 172 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xstring"





#line 178 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xstring"

		_Ptr += _Off;
		return (*this);
		}

	_Myiter operator+(difference_type _Off) const
		{	
		_Myiter _Tmp = *this;
		return (_Tmp += _Off);
		}

	_Myiter& operator-=(difference_type _Off)
		{	
		return (*this += -_Off);
		}

	_Myiter operator-(difference_type _Off) const
		{	
		_Myiter _Tmp = *this;
		return (_Tmp -= _Off);
		}

	difference_type operator-(const _Myiter& _Right) const
		{	
		_Compat(_Right);
		return (this->_Ptr - _Right._Ptr);
		}

	reference operator[](difference_type _Off) const
		{	
		return (*(*this + _Off));
		}

	bool operator==(const _Myiter& _Right) const
		{	
		_Compat(_Right);
		return (this->_Ptr == _Right._Ptr);
		}

	bool operator!=(const _Myiter& _Right) const
		{	
		return (!(*this == _Right));
		}

	bool operator<(const _Myiter& _Right) const
		{	
		_Compat(_Right);
		return (this->_Ptr < _Right._Ptr);
		}

	bool operator>(const _Myiter& _Right) const
		{	
		return (_Right < *this);
		}

	bool operator<=(const _Myiter& _Right) const
		{	
		return (!(_Right < *this));
		}

	bool operator>=(const _Myiter& _Right) const
		{	
		return (!(*this < _Right));
		}

 










#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xstring"






#line 262 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xstring"
	void _Compat(const _Myiter&) const
		{	
		}
 #line 266 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xstring"

	pointer _Ptr;	
	};

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	typename _String_const_iterator<_Elem, _Traits, _Alloc>::_Unchecked_type
		_Unchecked(_String_const_iterator<_Elem, _Traits, _Alloc> _Iter)
	{	
	return (_Iter._Unchecked());
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	_String_const_iterator<_Elem, _Traits, _Alloc>
		_Rechecked(_String_const_iterator<_Elem, _Traits, _Alloc>& _Iter,
			typename _String_const_iterator<_Elem, _Traits, _Alloc>
				::_Unchecked_type _Right)
	{	
	return (_Iter._Rechecked(_Right));
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	_String_const_iterator<_Elem, _Traits, _Alloc> operator+(
		typename _String_const_iterator<_Elem, _Traits, _Alloc>
			::difference_type _Off,
		_String_const_iterator<_Elem, _Traits, _Alloc> _Next)
	{	
	return (_Next += _Off);
	}

		
template<class _Elem,
	class _Traits,
	class _Alloc>
	class _String_iterator
		: public _String_const_iterator<_Elem, _Traits, _Alloc>
	{	
public:
	typedef _String_iterator<_Elem, _Traits, _Alloc> _Myiter;
	typedef _String_const_iterator<_Elem, _Traits, _Alloc> _Mybase;
	typedef basic_string<_Elem, _Traits, _Alloc> _Mystr;
	typedef random_access_iterator_tag iterator_category;

	typedef typename _Mystr::value_type value_type;
	typedef typename _Mystr::difference_type difference_type;
	typedef typename _Mystr::pointer pointer;
	typedef typename _Mystr::reference reference;

	_String_iterator()
		{	
		}

	_String_iterator(pointer _Parg, const _Container_base *_Pstring)
		: _Mybase(_Parg, _Pstring)
		{	
		}

	typedef pointer _Unchecked_type;

	_Myiter& _Rechecked(_Unchecked_type _Right)
		{	
		this->_Ptr = _Right;
		return (*this);
		}

	_Unchecked_type _Unchecked() const
		{	
		return (_Unchecked_type(this->_Ptr));
		}

	reference operator*() const
		{	
		return ((reference)**(_Mybase *)this);
		}

	pointer operator->() const
		{	
		return (&**this);
		}

	_Myiter& operator++()
		{	
		++*(_Mybase *)this;
		return (*this);
		}

	_Myiter operator++(int)
		{	
		_Myiter _Tmp = *this;
		++*this;
		return (_Tmp);
		}

	_Myiter& operator--()
		{	
		--*(_Mybase *)this;
		return (*this);
		}

	_Myiter operator--(int)
		{	
		_Myiter _Tmp = *this;
		--*this;
		return (_Tmp);
		}

	_Myiter& operator+=(difference_type _Off)
		{	
		*(_Mybase *)this += _Off;
		return (*this);
		}

	_Myiter operator+(difference_type _Off) const
		{	
		_Myiter _Tmp = *this;
		return (_Tmp += _Off);
		}

	_Myiter& operator-=(difference_type _Off)
		{	
		return (*this += -_Off);
		}

	_Myiter operator-(difference_type _Off) const
		{	
		_Myiter _Tmp = *this;
		return (_Tmp -= _Off);
		}

	difference_type operator-(const _Mybase& _Right) const
		{	
		return ((_Mybase)*this - _Right);
		}

	reference operator[](difference_type _Off) const
		{	
		return (*(*this + _Off));
		}
	};

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	typename _String_iterator<_Elem, _Traits, _Alloc>::_Unchecked_type
		_Unchecked(_String_iterator<_Elem, _Traits, _Alloc> _Iter)
	{	
	return (_Iter._Unchecked());
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	_String_iterator<_Elem, _Traits, _Alloc>
		_Rechecked(_String_iterator<_Elem, _Traits, _Alloc>& _Iter,
			typename _String_iterator<_Elem, _Traits, _Alloc>
				::_Unchecked_type _Right)
	{	
	return (_Iter._Rechecked(_Right));
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	_String_iterator<_Elem, _Traits, _Alloc> operator+(
		typename _String_iterator<_Elem, _Traits, _Alloc>
			::difference_type _Off,
		_String_iterator<_Elem, _Traits, _Alloc> _Next)
	{	
	return (_Next += _Off);
	}

		
template<class _Elem,
	class _Alloc>
	class _String_val
		: public _Container_base
	{	
public:
 
	typedef typename _Alloc::template rebind<_Elem>::other _Alty;

	_String_val(_Alty _Al = _Alty())
		: _Alval(_Al)
		{	
		}

	~_String_val()
		{	
		}

 





















#line 484 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xstring"

	typedef typename _Alty::size_type size_type;
	typedef typename _Alty::difference_type difference_type;
	typedef typename _Alty::pointer pointer;
	typedef typename _Alty::const_pointer const_pointer;
	typedef typename _Alty::reference reference;
	typedef typename _Alty::const_reference const_reference;
	typedef typename _Alty::value_type value_type;

	enum
		{	
		_BUF_SIZE = 16 / sizeof (_Elem) < 1 ? 1
			: 16 / sizeof (_Elem)};
	enum
		{	
		_ALLOC_MASK = sizeof (_Elem) <= 1 ? 15
			: sizeof (_Elem) <= 2 ? 7
			: sizeof (_Elem) <= 4 ? 3
			: sizeof (_Elem) <= 8 ? 1 : 0};

	union _Bxty
		{	
		_Elem _Buf[_BUF_SIZE];
		_Elem *_Ptr;
		char _Alias[_BUF_SIZE];	
		} _Bx;

	size_type _Mysize;	
	size_type _Myres;	
	_Alty _Alval;	
	};

		
template<class _Elem,
	class _Traits,
	class _Ax>
	class basic_string
		: public _String_val<_Elem, _Ax>
	{	
public:
	typedef basic_string<_Elem, _Traits, _Ax> _Myt;
	typedef _String_val<_Elem, _Ax> _Mybase;
	typedef typename _Mybase::_Alty _Alloc;
	typedef typename _Alloc::size_type size_type;
	typedef typename _Alloc::difference_type difference_type;
	typedef typename _Alloc::pointer pointer;
	typedef typename _Alloc::const_pointer const_pointer;
	typedef typename _Alloc::reference reference;
	typedef typename _Alloc::const_reference const_reference;
	typedef typename _Alloc::value_type value_type;

	typedef _String_iterator<_Elem, _Traits, _Alloc> iterator;
	typedef _String_const_iterator<_Elem, _Traits, _Alloc> const_iterator;

	typedef ::std:: reverse_iterator<iterator> reverse_iterator;
	typedef ::std:: reverse_iterator<const_iterator> const_reverse_iterator;

	basic_string(const _Myt& _Right)
		: _Mybase(_Right._Alval)
		{	
		_Tidy();
		assign(_Right, 0, npos);
		}

	basic_string()
		: _Mybase()
		{	
		_Tidy();
		}

	explicit basic_string(const _Alloc& _Al)
		: _Mybase(_Al)
		{	
		_Tidy();
		}

	basic_string(const _Myt& _Right, size_type _Roff,
		size_type _Count = npos)
		: _Mybase(_Right._Alval)
		{	
		_Tidy();
		assign(_Right, _Roff, _Count);
		}

	basic_string(const _Myt& _Right, size_type _Roff, size_type _Count,
		const _Alloc& _Al)
		: _Mybase(_Al)
		{	
		_Tidy();
		assign(_Right, _Roff, _Count);
		}

	basic_string(const _Elem *_Ptr, size_type _Count)
		: _Mybase()
		{	
		_Tidy();
		assign(_Ptr, _Count);
		}

	basic_string(const _Elem *_Ptr, size_type _Count, const _Alloc& _Al)
		: _Mybase(_Al)
		{	
		_Tidy();
		assign(_Ptr, _Count);
		}

	basic_string(const _Elem *_Ptr)
		: _Mybase()
		{	
		_Tidy();
		assign(_Ptr);
		}

	basic_string(const _Elem *_Ptr, const _Alloc& _Al)
		: _Mybase(_Al)
		{	
		_Tidy();
		assign(_Ptr);
		}

	basic_string(size_type _Count, _Elem _Ch)
		: _Mybase()
		{	
		_Tidy();
		assign(_Count, _Ch);
		}

	basic_string(size_type _Count, _Elem _Ch, const _Alloc& _Al)
		: _Mybase(_Al)
		{	
		_Tidy();
		assign(_Count, _Ch);
		}

	template<class _It>
		basic_string(_It _First, _It _Last)
		: _Mybase()
		{	
		_Tidy();
		_Construct(_First, _Last, _Iter_cat(_First));
		}

	template<class _It>
		basic_string(_It _First, _It _Last, const _Alloc& _Al)
		: _Mybase(_Al)
		{	
		_Tidy();
		_Construct(_First, _Last, _Iter_cat(_First));
		}

	template<class _It>
		void _Construct(_It _Count,
			_It _Ch, _Int_iterator_tag)
		{	
		assign((size_type)_Count, (_Elem)_Ch);
		}

	template<class _It>
		void _Construct(_It _First,
			_It _Last, input_iterator_tag)
		{	
		try {
		for (; _First != _Last; ++_First)
			append((size_type)1, (_Elem)*_First);
		} catch (...) {
		_Tidy(true);
		throw;
		}
		}

	template<class _It>
		void _Construct(_It _First,
			_It _Last, forward_iterator_tag)
		{	
		;
		size_type _Count = 0;
		_Distance(_First, _Last, _Count);
		reserve(_Count);

		try {
		for (; _First != _Last; ++_First)
			append((size_type)1, (_Elem)*_First);
		} catch (...) {
		_Tidy(true);
		throw;
		}
		}

	basic_string(const_pointer _First, const_pointer _Last)
		: _Mybase()
		{	
		;
		_Tidy();
		if (_First != _Last)
			assign(&*_First, _Last - _First);
		}

	basic_string(const_pointer _First, const_pointer _Last,
		const _Alloc& _Al)
		: _Mybase(_Al)
		{	
		;
		_Tidy();
		if (_First != _Last)
			assign(&*_First, _Last - _First);
		}

	basic_string(const_iterator _First, const_iterator _Last)
		: _Mybase()
		{	
		;
		_Tidy();
		if (_First != _Last)
			assign(&*_First, _Last - _First);
		}

	basic_string(_Myt&& _Right)
		: _Mybase(::std:: forward<_Alloc>(_Right._Alval))
		{	
		_Tidy();
		assign(::std:: forward<_Myt>(_Right));
		}

	_Myt& operator=(_Myt&& _Right)
		{	
		return (assign(::std:: forward<_Myt>(_Right)));
		}

	_Myt& assign(_Myt&& _Right)
		{	
		if (this == &_Right)
			;
		else if (get_allocator() != _Right.get_allocator()
			&& this->_BUF_SIZE <= _Right._Myres)
			*this = _Right;
		else
			{	
			_Tidy(true);
			if (_Right._Myres < this->_BUF_SIZE)
				_Traits::move(this->_Bx._Buf, _Right._Bx._Buf,
					_Right._Mysize + 1);
			else
				{	
				this->_Bx._Ptr = _Right._Bx._Ptr;
				_Right._Bx._Ptr = 0;
				}
			this->_Mysize = _Right._Mysize;
			this->_Myres = _Right._Myres;

			_Right._Tidy();
			}
		return (*this);
		}

	void swap(_Myt&& _Right)
		{	
		if (this != &_Right)
			{	
 


#line 746 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xstring"

			assign(::std:: forward<_Myt>(_Right));
			}
		}

	~basic_string()
		{	
		_Tidy(true);
		}

	typedef _Traits traits_type;
	typedef _Alloc allocator_type;

	 static const size_type npos;	

	_Myt& operator=(const _Myt& _Right)
		{	
		return (assign(_Right));
		}

	_Myt& operator=(const _Elem *_Ptr)
		{	
		return (assign(_Ptr));
		}

	_Myt& operator=(_Elem _Ch)
		{	
		return (assign(1, _Ch));
		}

	_Myt& operator+=(const _Myt& _Right)
		{	
		return (append(_Right));
		}

	_Myt& operator+=(const _Elem *_Ptr)
		{	
		return (append(_Ptr));
		}

	_Myt& operator+=(_Elem _Ch)
		{	
		return (append((size_type)1, _Ch));
		}

	_Myt& append(const _Myt& _Right)
		{	
		return (append(_Right, 0, npos));
		}

	_Myt& append(const _Myt& _Right,
		size_type _Roff, size_type _Count)
		{	
		if (_Right.size() < _Roff)
			_Xran();	
		size_type _Num = _Right.size() - _Roff;
		if (_Num < _Count)
			_Count = _Num;	
		if (npos - this->_Mysize <= _Count)
			_Xlen();	

		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
			{	
			_Traits::copy(_Myptr() + this->_Mysize,
				_Right._Myptr() + _Roff, _Count);
			_Eos(_Num);
			}
		return (*this);
		}

	_Myt& append(const _Elem *_Ptr, size_type _Count)
		{	
 


#line 822 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xstring"

		if (_Inside(_Ptr))
			return (append(*this, _Ptr - _Myptr(), _Count));	
		if (npos - this->_Mysize <= _Count)
			_Xlen();	

		size_type _Num;
		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
			{	
			_Traits::copy(_Myptr() + this->_Mysize, _Ptr, _Count);
			_Eos(_Num);
			}
		return (*this);
		}

	_Myt& append(const _Elem *_Ptr)
		{	
		;
		return (append(_Ptr, _Traits::length(_Ptr)));
		}

	_Myt& append(size_type _Count, _Elem _Ch)
		{	
		if (npos - this->_Mysize <= _Count)
			_Xlen();	

		size_type _Num;
		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
			{	
			_Chassign(this->_Mysize, _Count, _Ch);
			_Eos(_Num);
			}
		return (*this);
		}

	template<class _It>
		_Myt& append(_It _First, _It _Last)
		{	
		return (_Append(_First, _Last, _Iter_cat(_First)));
		}

	template<class _It>
		_Myt& _Append(_It _Count, _It _Ch, _Int_iterator_tag)
		{	
		return (append((size_type)_Count, (_Elem)_Ch));
		}

	template<class _It>
		_Myt& _Append(_It _First, _It _Last, input_iterator_tag)
		{	
		return (replace(end(), end(), _First, _Last));
		}

	_Myt& append(const_pointer _First, const_pointer _Last)
		{	
		return (replace(end(), end(), _First, _Last));
		}

	_Myt& append(const_iterator _First, const_iterator _Last)
		{	
		return (replace(end(), end(), _First, _Last));
		}

	_Myt& assign(const _Myt& _Right)
		{	
		return (assign(_Right, 0, npos));
		}

	_Myt& assign(const _Myt& _Right,
		size_type _Roff, size_type _Count)
		{	
		if (_Right.size() < _Roff)
			_Xran();	
		size_type _Num = _Right.size() - _Roff;
		if (_Count < _Num)
			_Num = _Count;	

		if (this == &_Right)
			erase((size_type)(_Roff + _Num)), erase(0, _Roff);	
		else if (_Grow(_Num))
			{	
			_Traits::copy(_Myptr(), _Right._Myptr() + _Roff, _Num);
			_Eos(_Num);
			}
		return (*this);
		}

	_Myt& assign(const _Elem *_Ptr, size_type _Count)
		{	
 


#line 915 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xstring"

		if (_Inside(_Ptr))
			return (assign(*this, _Ptr - _Myptr(), _Count));	

		if (_Grow(_Count))
			{	
			_Traits::copy(_Myptr(), _Ptr, _Count);
			_Eos(_Count);
			}
		return (*this);
		}

	_Myt& assign(const _Elem *_Ptr)
		{	
		;
		return (assign(_Ptr, _Traits::length(_Ptr)));
		}

	_Myt& assign(size_type _Count, _Elem _Ch)
		{	
		if (_Count == npos)
			_Xlen();	

		if (_Grow(_Count))
			{	
			_Chassign(0, _Count, _Ch);
			_Eos(_Count);
			}
		return (*this);
		}

	template<class _It>
		_Myt& assign(_It _First, _It _Last)
		{	
		return (_Assign(_First, _Last, _Iter_cat(_First)));
		}

	template<class _It>
		_Myt& _Assign(_It _Count, _It _Ch, _Int_iterator_tag)
		{	
		return (assign((size_type)_Count, (_Elem)_Ch));
		}

	template<class _It>
		_Myt& _Assign(_It _First, _It _Last, input_iterator_tag)
		{	
		return (replace(begin(), end(), _First, _Last));
		}

	_Myt& assign(const_pointer _First, const_pointer _Last)
		{	
		return (replace(begin(), end(), _First, _Last));
		}

	_Myt& assign(const_iterator _First, const_iterator _Last)
		{	
		return (replace(begin(), end(), _First, _Last));
		}

	_Myt& insert(size_type _Off, const _Myt& _Right)
		{	
		return (insert(_Off, _Right, 0, npos));
		}

	_Myt& insert(size_type _Off,
		const _Myt& _Right, size_type _Roff, size_type _Count)
		{	
		if (this->_Mysize < _Off || _Right.size() < _Roff)
			_Xran();	
		size_type _Num = _Right.size() - _Roff;
		if (_Num < _Count)
			_Count = _Num;	
		if (npos - this->_Mysize <= _Count)
			_Xlen();	

		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
			{	
			_Traits::move(_Myptr() + _Off + _Count,
				_Myptr() + _Off, this->_Mysize - _Off);	
			if (this == &_Right)
				_Traits::move(_Myptr() + _Off,
					_Myptr() + (_Off < _Roff ? _Roff + _Count : _Roff),
						_Count);	
			else
				_Traits::copy(_Myptr() + _Off,
					_Right._Myptr() + _Roff, _Count);	
			_Eos(_Num);
			}
		return (*this);
		}

	_Myt& insert(size_type _Off,
		const _Elem *_Ptr, size_type _Count)
		{	
 


#line 1013 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xstring"

		if (_Inside(_Ptr))
			return (insert(_Off, *this,
				_Ptr - _Myptr(), _Count));	
		if (this->_Mysize < _Off)
			_Xran();	
		if (npos - this->_Mysize <= _Count)
			_Xlen();	
		size_type _Num;
		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
			{	
			_Traits::move(_Myptr() + _Off + _Count,
				_Myptr() + _Off, this->_Mysize - _Off);	
			_Traits::copy(_Myptr() + _Off, _Ptr, _Count);	
			_Eos(_Num);
			}
		return (*this);
		}

	_Myt& insert(size_type _Off, const _Elem *_Ptr)
		{	
		;
		return (insert(_Off, _Ptr, _Traits::length(_Ptr)));
		}

	_Myt& insert(size_type _Off,
		size_type _Count, _Elem _Ch)
		{	
		if (this->_Mysize < _Off)
			_Xran();	
		if (npos - this->_Mysize <= _Count)
			_Xlen();	
		size_type _Num;
		if (0 < _Count && _Grow(_Num = this->_Mysize + _Count))
			{	
			_Traits::move(_Myptr() + _Off + _Count,
				_Myptr() + _Off, this->_Mysize - _Off);	
			_Chassign(_Off, _Count, _Ch);	
			_Eos(_Num);
			}
		return (*this);
		}

	iterator insert(const_iterator _Where)
		{	
		return (insert(_Where, _Elem()));
		}

	iterator insert(const_iterator _Where, _Elem _Ch)
		{	
		size_type _Off = _Pdif(_Where, begin());
		insert(_Off, 1, _Ch);
		return (begin() + _Off);
		}

	void insert(const_iterator _Where, size_type _Count, _Elem _Ch)
		{	
		size_type _Off = _Pdif(_Where, begin());
		insert(_Off, _Count, _Ch);
		}

	template<class _It>
		void insert(const_iterator _Where, _It _First, _It _Last)
		{	
		_Insert(_Where, _First, _Last, _Iter_cat(_First));
		}

	template<class _It>
		void _Insert(const_iterator _Where, _It _Count, _It _Ch,
			_Int_iterator_tag)
		{	
		insert(_Where, (size_type)_Count, (_Elem)_Ch);
		}

	template<class _It>
		void _Insert(const_iterator _Where, _It _First, _It _Last,
			input_iterator_tag)
		{	
		replace(_Where, _Where, _First, _Last);
		}

	void insert(const_iterator _Where,
		const_pointer _First, const_pointer _Last)
		{	
		replace(_Where, _Where, _First, _Last);
		}

	void insert(const_iterator _Where,
		const_iterator _First, const_iterator _Last)
		{	
		replace(_Where, _Where, _First, _Last);
		}

	_Myt& erase(size_type _Off = 0,
		size_type _Count = npos)
		{	
		if (this->_Mysize < _Off)
			_Xran();	
		if (this->_Mysize - _Off < _Count)
			_Count = this->_Mysize - _Off;	
		if (0 < _Count)
			{	
			_Traits::move(_Myptr() + _Off, _Myptr() + _Off + _Count,
				this->_Mysize - _Off - _Count);
			size_type _Newsize = this->_Mysize - _Count;
			_Eos(_Newsize);
			}
		return (*this);
		}

	iterator erase(const_iterator _Where)
		{	
		size_type _Count = _Pdif(_Where, begin());
		erase(_Count, 1);
		return (iterator(_Myptr() + _Count, this));
		}

	iterator erase(const_iterator _First, const_iterator _Last)
		{	
		size_type _Count = _Pdif(_First, begin());
		erase(_Count, _Pdif(_Last, _First));
		return (iterator(_Myptr() + _Count, this));
		}

	void clear()
		{	
		_Eos(0);
		}

	_Myt& replace(size_type _Off, size_type _N0, const _Myt& _Right)
		{	
		return (replace(_Off, _N0, _Right, 0, npos));
		}

	_Myt& replace(size_type _Off,
		size_type _N0, const _Myt& _Right, size_type _Roff, size_type _Count)
		{	
		if (this->_Mysize < _Off || _Right.size() < _Roff)
			_Xran();	
		if (this->_Mysize - _Off < _N0)
			_N0 = this->_Mysize - _Off;	
		size_type _Num = _Right.size() - _Roff;
		if (_Num < _Count)
			_Count = _Num;	
		if (npos - _Count <= this->_Mysize - _N0)
			_Xlen();	

		size_type _Nm = this->_Mysize - _N0 - _Off;	
		size_type _Newsize = this->_Mysize + _Count - _N0;
		if (this->_Mysize < _Newsize)
			_Grow(_Newsize);

		if (this != &_Right)
			{	
			_Traits::move(_Myptr() + _Off + _Count,
				_Myptr() + _Off + _N0, _Nm);	
			_Traits::copy(_Myptr() + _Off,
				_Right._Myptr() + _Roff, _Count);	
			}
		else if (_Count <= _N0)
			{	
			_Traits::move(_Myptr() + _Off,
				_Myptr() + _Roff, _Count);	
			_Traits::move(_Myptr() + _Off + _Count,
				_Myptr() + _Off + _N0, _Nm);	
			}
		else if (_Roff <= _Off)
			{	
			_Traits::move(_Myptr() + _Off + _Count,
				_Myptr() + _Off + _N0, _Nm);	
			_Traits::move(_Myptr() + _Off,
				_Myptr() + _Roff, _Count);	
			}
		else if (_Off + _N0 <= _Roff)
			{	
			_Traits::move(_Myptr() + _Off + _Count,
				_Myptr() + _Off + _N0, _Nm);	
			_Traits::move(_Myptr() + _Off,
				_Myptr() + (_Roff + _Count - _N0), _Count);	
			}
		else
			{	
			_Traits::move(_Myptr() + _Off,
				_Myptr() + _Roff, _N0);	
			_Traits::move(_Myptr() + _Off + _Count,
				_Myptr() + _Off + _N0, _Nm);	
			_Traits::move(_Myptr() + _Off + _N0, _Myptr() + _Roff + _Count,
				_Count - _N0);	
			}

		_Eos(_Newsize);
		return (*this);
		}

	_Myt& replace(size_type _Off,
		size_type _N0, const _Elem *_Ptr, size_type _Count)
		{	
 


#line 1214 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xstring"

		if (_Inside(_Ptr))
			return (replace(_Off, _N0, *this,
				_Ptr - _Myptr(), _Count));	
		if (this->_Mysize < _Off)
			_Xran();	
		if (this->_Mysize - _Off < _N0)
			_N0 = this->_Mysize - _Off;	
		if (npos - _Count <= this->_Mysize - _N0)
			_Xlen();	
		size_type _Nm = this->_Mysize - _N0 - _Off;

		if (_Count < _N0)
			_Traits::move(_Myptr() + _Off + _Count,
				_Myptr() + _Off + _N0, _Nm);	
		size_type _Num;
		if ((0 < _Count || 0 < _N0)
			&& _Grow(_Num = this->_Mysize + _Count - _N0))
			{	
			if (_N0 < _Count)
				_Traits::move(_Myptr() + _Off + _Count,
					_Myptr() + _Off + _N0, _Nm);	
			_Traits::copy(_Myptr() + _Off, _Ptr, _Count);	
			_Eos(_Num);
			}
		return (*this);
		}

	_Myt& replace(size_type _Off, size_type _N0, const _Elem *_Ptr)
		{	
		;
		return (replace(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
		}

	_Myt& replace(size_type _Off,
		size_type _N0, size_type _Count, _Elem _Ch)
		{	
		if (this->_Mysize < _Off)
			_Xran();	
		if (this->_Mysize - _Off < _N0)
			_N0 = this->_Mysize - _Off;	
		if (npos - _Count <= this->_Mysize - _N0)
			_Xlen();	
		size_type _Nm = this->_Mysize - _N0 - _Off;

		if (_Count < _N0)
			_Traits::move(_Myptr() + _Off + _Count,
				_Myptr() + _Off + _N0, _Nm);	
		size_type _Num;
		if ((0 < _Count || 0 < _N0)
			&& _Grow(_Num = this->_Mysize + _Count - _N0))
			{	
			if (_N0 < _Count)
				_Traits::move(_Myptr() + _Off + _Count,
					_Myptr() + _Off + _N0, _Nm);	
			_Chassign(_Off, _Count, _Ch);	
			_Eos(_Num);
			}
		return (*this);
		}

	_Myt& replace(const_iterator _First, const_iterator _Last,
		const _Myt& _Right)
		{	
		return (replace(
			_Pdif(_First, begin()), _Pdif(_Last, _First), _Right));
		}

	_Myt& replace(const_iterator _First, const_iterator _Last,
		const _Elem *_Ptr, size_type _Count)
		{	
		return (replace(
			_Pdif(_First, begin()), _Pdif(_Last, _First), _Ptr, _Count));
		}

	_Myt& replace(const_iterator _First, const_iterator _Last,
		const _Elem *_Ptr)
		{	
		return (replace(
			_Pdif(_First, begin()), _Pdif(_Last, _First), _Ptr));
		}

	_Myt& replace(const_iterator _First, const_iterator _Last,
		size_type _Count, _Elem _Ch)
		{	
		return (replace(
			_Pdif(_First, begin()), _Pdif(_Last, _First), _Count, _Ch));
		}

	template<class _It>
		_Myt& replace(const_iterator _First, const_iterator _Last,
			_It _First2, _It _Last2)
		{	
		return (_Replace(_First, _Last,
			_First2, _Last2, _Iter_cat(_First2)));
		}

	template<class _It>
		_Myt& _Replace(const_iterator _First, const_iterator _Last,
			_It _Count, _It _Ch, _Int_iterator_tag)
		{	
		return (replace(_First, _Last, (size_type)_Count, (_Elem)_Ch));
		}

	template<class _It>
		_Myt& _Replace(const_iterator _First, const_iterator _Last,
			_It _First2, _It _Last2, input_iterator_tag)
		{	
		_Myt _Right(_First2, _Last2);
		replace(_First, _Last, _Right);
		return (*this);
		}

	_Myt& replace(const_iterator _First, const_iterator _Last,
		const_pointer _First2, const_pointer _Last2)
		{	
		if (_First2 == _Last2)
			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
		else
			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
				&*_First2, _Last2 - _First2);
		return (*this);
		}

	_Myt& replace(const_iterator _First, const_iterator _Last,
		const_iterator _First2, const_iterator _Last2)
		{	
		if (_First2 == _Last2)
			erase(_Pdif(_First, begin()), _Pdif(_Last, _First));
		else
			replace(_Pdif(_First, begin()), _Pdif(_Last, _First),
				&*_First2, _Last2 - _First2);
		return (*this);
		}

	iterator begin()
		{	
		return (iterator(_Myptr(), this));
		}

	const_iterator begin() const
		{	
		return (const_iterator(_Myptr(), this));
		}

	iterator end()
		{	
		return (iterator(_Myptr() + this->_Mysize, this));
		}

	const_iterator end() const
		{	
		return (const_iterator(_Myptr() + this->_Mysize, this));
		}

	reverse_iterator rbegin()
		{	
		return (reverse_iterator(end()));
		}

	const_reverse_iterator rbegin() const
		{	
		return (const_reverse_iterator(end()));
		}

	reverse_iterator rend()
		{	
		return (reverse_iterator(begin()));
		}

	const_reverse_iterator rend() const
		{	
		return (const_reverse_iterator(begin()));
		}

 
	const_iterator cbegin() const
		{	
		return (((const _Myt *)this)->begin());
		}

	const_iterator cend() const
		{	
		return (((const _Myt *)this)->end());
		}

	const_reverse_iterator crbegin() const
		{	
		return (((const _Myt *)this)->rbegin());
		}

	const_reverse_iterator crend() const
		{	
		return (((const _Myt *)this)->rend());
		}

	void shrink_to_fit()
		{	
		if (size() < capacity())
			{	
			_Myt _Tmp(*this);
			swap(_Tmp);
			}
		}
 #line 1419 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xstring"

	reference at(size_type _Off)
		{	
		if (this->_Mysize <= _Off)
			_Xran();	
		return (_Myptr()[_Off]);
		}

	const_reference at(size_type _Off) const
		{	
		if (this->_Mysize <= _Off)
			_Xran();	
		return (_Myptr()[_Off]);
		}

	reference operator[](size_type _Off)
		{	
 





#line 1443 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xstring"

#line 1445 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xstring"

		return (_Myptr()[_Off]);
		}

	const_reference operator[](size_type _Off) const
		{	
 



#line 1456 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xstring"

#line 1458 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xstring"

		return (_Myptr()[_Off]);
		}

	void push_back(_Elem _Ch)
		{	
		insert(end(), _Ch);
		}

 
	void pop_back()
		{	
		erase(this->_Mysize - 1);	
		}

	reference front()
		{	
		return (*begin());
		}

	const_reference front() const
		{	
		return (*begin());
		}

	reference back()
		{	
		return (*(end() - 1));
		}

	const_reference back() const
		{	
		return (*(end() - 1));
		}
 #line 1493 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xstring"

	const _Elem *c_str() const
		{	
		return (_Myptr());
		}

	const _Elem *data() const
		{	
		return (c_str());
		}

	size_type length() const
		{	
		return (this->_Mysize);
		}

	size_type size() const
		{	
		return (this->_Mysize);
		}

	size_type max_size() const
		{	
		size_type _Num = this->_Alval.max_size();
		return (_Num <= 1 ? 1 : _Num - 1);
		}

	void resize(size_type _Newsize)
		{	
		resize(_Newsize, _Elem());
		}

	void resize(size_type _Newsize, _Elem _Ch)
		{	
		if (_Newsize <= this->_Mysize)
			erase(_Newsize);
		else
			append(_Newsize - this->_Mysize, _Ch);
		}

	size_type capacity() const
		{	
		return (this->_Myres);
		}

	void reserve(size_type _Newcap = 0)
		{	
		if (this->_Mysize <= _Newcap && this->_Myres != _Newcap)
			{	
			size_type _Size = this->_Mysize;
			if (_Grow(_Newcap, true))
				_Eos(_Size);
			}
		}

	bool empty() const
		{	
		return (this->_Mysize == 0);
		}

	

	size_type copy(_Elem *_Ptr,
		size_type _Count, size_type _Off = 0) const
		{	
 


#line 1562 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xstring"

		if (this->_Mysize < _Off)
			_Xran();	
		if (this->_Mysize - _Off < _Count)
			_Count = this->_Mysize - _Off;
		_Traits::copy(_Ptr, _Myptr() + _Off, _Count);
		return (_Count);
		}

	size_type _Copy_s(_Elem *_Dest, size_type _Dest_size,
		size_type _Count, size_type _Off = 0) const
		{	
 


#line 1578 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xstring"

		if (this->_Mysize < _Off)
			_Xran();	
		if (this->_Mysize - _Off < _Count)
			_Count = this->_Mysize - _Off;
		_Traits::_Copy_s(_Dest, _Dest_size, _Myptr() + _Off, _Count);
		return (_Count);
		}

	void swap(_Myt& _Right)
		{	
		if (this == &_Right)
			;	
		else if (this->_Alval == _Right._Alval)
			{	
 

#line 1596 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xstring"

			::std:: swap(this->_Bx, _Right._Bx);
			::std:: swap(this->_Mysize, _Right._Mysize);
			::std:: swap(this->_Myres, _Right._Myres);
			}
		else
			{	
			_Myt _Tmp = *this;

			*this = _Right;
			_Right = _Tmp;
			}
		}

	size_type find(const _Myt& _Right, size_type _Off = 0) const
		{	
		return (find(_Right._Myptr(), _Off, _Right.size()));
		}

	size_type find(const _Elem *_Ptr,
		size_type _Off, size_type _Count) const
		{	
 


#line 1622 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xstring"

		if (_Count == 0 && _Off <= this->_Mysize)
			return (_Off);	

		size_type _Nm;
		if (_Off < this->_Mysize && _Count <= (_Nm = this->_Mysize - _Off))
			{	
			const _Elem *_Uptr, *_Vptr;
			for (_Nm -= _Count - 1, _Vptr = _Myptr() + _Off;
				(_Uptr = _Traits::find(_Vptr, _Nm, *_Ptr)) != 0;
				_Nm -= _Uptr - _Vptr + 1, _Vptr = _Uptr + 1)
				if (_Traits::compare(_Uptr, _Ptr, _Count) == 0)
					return (_Uptr - _Myptr());	
			}

		return (npos);	
		}

	size_type find(const _Elem *_Ptr, size_type _Off = 0) const
		{	
		;
		return (find(_Ptr, _Off, _Traits::length(_Ptr)));
		}

	size_type find(_Elem _Ch, size_type _Off = 0) const
		{	
		return (find((const _Elem *)&_Ch, _Off, 1));
		}

	size_type rfind(const _Myt& _Right, size_type _Off = npos) const
		{	
		return (rfind(_Right._Myptr(), _Off, _Right.size()));
		}

	size_type rfind(const _Elem *_Ptr,
		size_type _Off, size_type _Count) const
		{	
 


#line 1663 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xstring"

		if (_Count == 0)
			return (_Off < this->_Mysize ? _Off
				: this->_Mysize);	
		if (_Count <= this->_Mysize)
			{	
			const _Elem *_Uptr = _Myptr() +
				(_Off < this->_Mysize - _Count ? _Off
					: this->_Mysize - _Count);
			for (; ; --_Uptr)
				if (_Traits::eq(*_Uptr, *_Ptr)
					&& _Traits::compare(_Uptr, _Ptr, _Count) == 0)
					return (_Uptr - _Myptr());	
				else if (_Uptr == _Myptr())
					break;	
			}

		return (npos);	
		}

	size_type rfind(const _Elem *_Ptr, size_type _Off = npos) const
		{	
		;
		return (rfind(_Ptr, _Off, _Traits::length(_Ptr)));
		}

	size_type rfind(_Elem _Ch, size_type _Off = npos) const
		{	
		return (rfind((const _Elem *)&_Ch, _Off, 1));
		}

	size_type find_first_of(const _Myt& _Right,
		size_type _Off = 0) const
		{	
		return (find_first_of(_Right._Myptr(), _Off, _Right.size()));
		}

	size_type find_first_of(const _Elem *_Ptr,
		size_type _Off, size_type _Count) const
		{	
 


#line 1707 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xstring"

		if (0 < _Count && _Off < this->_Mysize)
			{	
			const _Elem *const _Vptr = _Myptr() + this->_Mysize;
			for (const _Elem *_Uptr = _Myptr() + _Off; _Uptr < _Vptr; ++_Uptr)
				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
					return (_Uptr - _Myptr());	
			}

		return (npos);	
		}

	size_type find_first_of(const _Elem *_Ptr, size_type _Off = 0) const
		{	
		;
		return (find_first_of(_Ptr, _Off, _Traits::length(_Ptr)));
		}

	size_type find_first_of(_Elem _Ch, size_type _Off = 0) const
		{	
		return (find((const _Elem *)&_Ch, _Off, 1));
		}

	size_type find_last_of(const _Myt& _Right,
		size_type _Off = npos) const
		{	
		return (find_last_of(_Right._Myptr(), _Off, _Right.size()));
		}

	size_type find_last_of(const _Elem *_Ptr,
		size_type _Off, size_type _Count) const
		{	
 


#line 1743 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xstring"

		if (0 < _Count && 0 < this->_Mysize)
			{	
			const _Elem *_Uptr = _Myptr()
				+ (_Off < this->_Mysize ? _Off : this->_Mysize - 1);
			for (; ; --_Uptr)
				if (_Traits::find(_Ptr, _Count, *_Uptr) != 0)
					return (_Uptr - _Myptr());	
				else if (_Uptr == _Myptr())
					break;	
			}

		return (npos);	
		}

	size_type find_last_of(const _Elem *_Ptr,
		size_type _Off = npos) const
		{	
		;
		return (find_last_of(_Ptr, _Off, _Traits::length(_Ptr)));
		}

	size_type find_last_of(_Elem _Ch, size_type _Off = npos) const
		{	
		return (rfind((const _Elem *)&_Ch, _Off, 1));
		}

	size_type find_first_not_of(const _Myt& _Right,
		size_type _Off = 0) const
		{	
		return (find_first_not_of(_Right._Myptr(), _Off,
			_Right.size()));
		}

	size_type find_first_not_of(const _Elem *_Ptr,
		size_type _Off, size_type _Count) const
		{	
 


#line 1784 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xstring"

		if (_Off < this->_Mysize)
			{	
			const _Elem *const _Vptr = _Myptr() + this->_Mysize;
			for (const _Elem *_Uptr = _Myptr() + _Off; _Uptr < _Vptr; ++_Uptr)
				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
					return (_Uptr - _Myptr());
			}
		return (npos);
		}

	size_type find_first_not_of(const _Elem *_Ptr,
		size_type _Off = 0) const
		{	
		;
		return (find_first_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
		}

	size_type find_first_not_of(_Elem _Ch, size_type _Off = 0) const
		{	
		return (find_first_not_of((const _Elem *)&_Ch, _Off, 1));
		}

	size_type find_last_not_of(const _Myt& _Right,
		size_type _Off = npos) const
		{	
		return (find_last_not_of(_Right._Myptr(), _Off, _Right.size()));
		}

	size_type find_last_not_of(const _Elem *_Ptr,
		size_type _Off, size_type _Count) const
		{	
 


#line 1820 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xstring"

		if (0 < this->_Mysize)
			{	
			const _Elem *_Uptr = _Myptr()
				+ (_Off < this->_Mysize ? _Off : this->_Mysize - 1);
			for (; ; --_Uptr)
				if (_Traits::find(_Ptr, _Count, *_Uptr) == 0)
					return (_Uptr - _Myptr());
				else if (_Uptr == _Myptr())
					break;
			}
		return (npos);
		}

	size_type find_last_not_of(const _Elem *_Ptr,
		size_type _Off = npos) const
		{	
		;
		return (find_last_not_of(_Ptr, _Off, _Traits::length(_Ptr)));
		}

	size_type find_last_not_of(_Elem _Ch, size_type _Off = npos) const
		{	
		return (find_last_not_of((const _Elem *)&_Ch, _Off, 1));
		}

	_Myt substr(size_type _Off = 0, size_type _Count = npos) const
		{	
		return (_Myt(*this, _Off, _Count, get_allocator()));
		}

	int compare(const _Myt& _Right) const
		{	
		return (compare(0, this->_Mysize, _Right._Myptr(), _Right.size()));
		}

	int compare(size_type _Off, size_type _N0,
		const _Myt& _Right) const
		{	
		return (compare(_Off, _N0, _Right, 0, npos));
		}

	int compare(size_type _Off,
		size_type _N0, const _Myt& _Right,
		size_type _Roff, size_type _Count) const
		{	
		if (_Right.size() < _Roff)
			_Xran();	
		if (_Right._Mysize - _Roff < _Count)
			_Count = _Right._Mysize - _Roff;	
		return (compare(_Off, _N0, _Right._Myptr() + _Roff, _Count));
		}

	int compare(const _Elem *_Ptr) const
		{	
		;
		return (compare(0, this->_Mysize, _Ptr, _Traits::length(_Ptr)));
		}

	int compare(size_type _Off, size_type _N0, const _Elem *_Ptr) const
		{	
		;
		return (compare(_Off, _N0, _Ptr, _Traits::length(_Ptr)));
		}

	int compare(size_type _Off,
		size_type _N0, const _Elem *_Ptr, size_type _Count) const
		{	
 


#line 1892 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xstring"

		if (this->_Mysize < _Off)
			_Xran();	
		if (this->_Mysize - _Off < _N0)
			_N0 = this->_Mysize - _Off;	

		size_type _Ans = _Traits::compare(_Myptr() + _Off, _Ptr,
			_N0 < _Count ? _N0 : _Count);
		return (_Ans != 0 ? (int)_Ans : _N0 < _Count ? -1
			: _N0 == _Count ? 0 : +1);
		}

	allocator_type get_allocator() const
		{	
		return (this->_Alval);
		}

	void _Chassign(size_type _Off, size_type _Count, _Elem _Ch)
		{	
		if (_Count == 1)
			_Traits::assign(*(_Myptr() + _Off), _Ch);
		else
			_Traits::assign(_Myptr() + _Off, _Count, _Ch);
		}

	void _Copy(size_type _Newsize, size_type _Oldlen)
		{	
		size_type _Newres = _Newsize | this->_ALLOC_MASK;
		if (max_size() < _Newres)
			_Newres = _Newsize;	
		else if (this->_Myres / 2 <= _Newres / 3)
			;
		else if (this->_Myres <= max_size() - this->_Myres / 2)
			_Newres = this->_Myres
				+ this->_Myres / 2;	
		else
			_Newres = max_size();	

		_Elem *_Ptr;
		try {
			_Ptr = this->_Alval.allocate(_Newres + 1);
		} catch (...) {
			_Newres = _Newsize;	
			try {
				_Ptr = this->_Alval.allocate(_Newres + 1);
			} catch (...) {
			_Tidy(true);	
			throw;
			}
		}

		if (0 < _Oldlen)
			_Traits::copy(_Ptr, _Myptr(), _Oldlen);	
		_Tidy(true);
		this->_Bx._Ptr = _Ptr;
		this->_Myres = _Newres;
		_Eos(_Oldlen);
		}

	void _Eos(size_type _Newsize)
		{	
		_Traits::assign(_Myptr()[this->_Mysize = _Newsize], _Elem());
		}

	bool _Grow(size_type _Newsize,
		bool _Trim = false)
		{	
		if (max_size() < _Newsize)
			_Xlen();	
		if (this->_Myres < _Newsize)
			_Copy(_Newsize, this->_Mysize);	
		else if (_Trim && _Newsize < this->_BUF_SIZE)
			_Tidy(true,	
				_Newsize < this->_Mysize ? _Newsize : this->_Mysize);
		else if (_Newsize == 0)
			_Eos(0);	
		return (0 < _Newsize);	
		}

	bool _Inside(const _Elem *_Ptr)
		{	
		if (_Ptr == 0 || _Ptr < _Myptr() || _Myptr() + this->_Mysize <= _Ptr)
			return (false);	
		else
			return (true);
		}

	static size_type _Pdif(const_iterator _P2,
		const_iterator _P1)
		{	
		return ((_P2)._Ptr == 0 ? 0 : _P2 - _P1);
		}

	void _Tidy(bool _Built = false,
		size_type _Newsize = 0)
		{	
		if (!_Built)
			;
		else if (this->_BUF_SIZE <= this->_Myres)
			{	
			_Elem *_Ptr = this->_Bx._Ptr;
			if (0 < _Newsize)
				_Traits::copy(this->_Bx._Buf, _Ptr, _Newsize);
			this->_Alval.deallocate(_Ptr, this->_Myres + 1);
			}
		this->_Myres = this->_BUF_SIZE - 1;
		_Eos(_Newsize);
		}

	_Elem *_Myptr()
		{	
		return (this->_BUF_SIZE <= this->_Myres ? this->_Bx._Ptr
			: this->_Bx._Buf);
		}

	const _Elem *_Myptr() const
		{	
		return (this->_BUF_SIZE <= this->_Myres ? this->_Bx._Ptr
			: this->_Bx._Buf);
		}

	__declspec(noreturn) void _Xlen() const
		{	
		_Xlength_error("string too long");
		}

	__declspec(noreturn) void _Xran() const
		{	
		_Xout_of_range("invalid string position");
		}
	};

		
template<class _Elem,
	class _Traits,
	class _Alloc>
	 const typename basic_string<_Elem, _Traits, _Alloc>::size_type
		basic_string<_Elem, _Traits, _Alloc>::npos =
			(typename basic_string<_Elem, _Traits, _Alloc>::size_type)(-1);

		

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	void swap(basic_string<_Elem, _Traits, _Alloc>& _Left,
		basic_string<_Elem, _Traits, _Alloc>& _Right)
	{	
	_Left.swap(_Right);
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	void swap(basic_string<_Elem, _Traits, _Alloc>& _Left,
		basic_string<_Elem, _Traits, _Alloc>&& _Right)
	{	
	_Left.swap(_Right);
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	void swap(basic_string<_Elem, _Traits, _Alloc>&& _Left,
		basic_string<_Elem, _Traits, _Alloc>& _Right)
	{	
	_Right.swap(_Left);
	}

typedef basic_string<char, char_traits<char>, allocator<char> >
	string;
typedef basic_string<wchar_t, char_traits<wchar_t>, allocator<wchar_t> >
	wstring;

 
typedef basic_string<char16_t, char_traits<char16_t>, allocator<char16_t> >
	u16string;
typedef basic_string<char32_t, char_traits<char32_t>, allocator<char32_t> >
	u32string;
 #line 2072 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xstring"
}

 #pragma warning(pop)
 #pragma pack(pop)

#line 2078 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xstring"
#line 2079 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xstring"






#line 8 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\stdexcept"

 #pragma pack(push,8)
 #pragma warning(push,3)
namespace std {




		
class logic_error
	: public exception
	{	
public:
	typedef exception _Mybase;

	explicit logic_error(const string& _Message)
		: _Mybase(_Message.c_str())
		{	
		}

	explicit logic_error(const char *_Message)
		: _Mybase(_Message)
		{	
		}

 

 





#line 42 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\stdexcept"
	};

		
class domain_error
	: public logic_error
	{	
public:
	typedef logic_error _Mybase;

	explicit domain_error(const string& _Message)
		: _Mybase(_Message.c_str())
		{	
		}

	explicit domain_error(const char *_Message)
		: _Mybase(_Message)
		{	
		}

 

 





#line 70 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\stdexcept"
	};

		
class invalid_argument
	: public logic_error
	{	
public:
	typedef logic_error _Mybase;

	explicit invalid_argument(const string& _Message)
		: _Mybase(_Message.c_str())
		{	
		}

	explicit invalid_argument(const char *_Message)
		: _Mybase(_Message)
		{	
		}

 

 





#line 98 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\stdexcept"
	};

		
class length_error
	: public logic_error
	{	
public:
	typedef logic_error _Mybase;

	explicit length_error(const string& _Message)
		: _Mybase(_Message.c_str())
		{	
		}

	explicit length_error(const char *_Message)
		: _Mybase(_Message)
		{	
		}

 

 





#line 126 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\stdexcept"
	};

		
class out_of_range
	: public logic_error
	{	
public:
	typedef logic_error _Mybase;

	explicit out_of_range(const string& _Message)
		: _Mybase(_Message.c_str())
		{	
		}

	explicit out_of_range(const char *_Message)
		: _Mybase(_Message)
		{	
		}

 

 





#line 154 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\stdexcept"
	};

		
class runtime_error
	: public exception
	{	
public:
	typedef exception _Mybase;

	explicit runtime_error(const string& _Message)
		: _Mybase(_Message.c_str())
		{	
		}

	explicit runtime_error(const char *_Message)
		: _Mybase(_Message)
		{	
		}

 

 





#line 182 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\stdexcept"
	};

		
class overflow_error
	: public runtime_error
	{	
public:
	typedef runtime_error _Mybase;

	explicit overflow_error(const string& _Message)
		: _Mybase(_Message.c_str())
		{	
		}

	explicit overflow_error(const char *_Message)
		: _Mybase(_Message)
		{	
		}

 

 





#line 210 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\stdexcept"
	};

		
class underflow_error
	: public runtime_error
	{	
public:
	typedef runtime_error _Mybase;

	explicit underflow_error(const string& _Message)
		: _Mybase(_Message.c_str())
		{	
		}

	explicit underflow_error(const char *_Message)
		: _Mybase(_Message)
		{	
		}

 

 





#line 238 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\stdexcept"
	};

		
class range_error
	: public runtime_error
	{	
public:
	typedef runtime_error _Mybase;

	explicit range_error(const string& _Message)
		: _Mybase(_Message.c_str())
		{	
		}

	explicit range_error(const char *_Message)
		: _Mybase(_Message)
		{	
		}

 

 





#line 266 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\stdexcept"
	};
}
 #pragma warning(pop)
 #pragma pack(pop)

#line 272 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\stdexcept"
#line 273 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\stdexcept"





#line 9 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xlocale"

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xlocinfo"

#pragma once



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xlocinfo.h"

#pragma once


#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\ctype.h"













#pragma once




#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"














 








































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 20 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\ctype.h"


extern "C" {
#line 24 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\ctype.h"











































#line 68 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\ctype.h"










                                













 __declspec(dllimport) int __cdecl _isctype(  int _C,   int _Type);
 __declspec(dllimport) int __cdecl _isctype_l(  int _C,   int _Type,    _locale_t _Locale);
  __declspec(dllimport) int __cdecl isalpha(  int _C);
 __declspec(dllimport) int __cdecl _isalpha_l(  int _C,    _locale_t _Locale);
  __declspec(dllimport) int __cdecl isupper(  int _C);
 __declspec(dllimport) int __cdecl _isupper_l(  int _C,    _locale_t _Locale);
  __declspec(dllimport) int __cdecl islower(  int _C);
 __declspec(dllimport) int __cdecl _islower_l(  int _C,    _locale_t _Locale);
  __declspec(dllimport) int __cdecl isdigit(  int _C);
 __declspec(dllimport) int __cdecl _isdigit_l(  int _C,    _locale_t _Locale);
 __declspec(dllimport) int __cdecl isxdigit(  int _C);
 __declspec(dllimport) int __cdecl _isxdigit_l(  int _C,    _locale_t _Locale);
  __declspec(dllimport) int __cdecl isspace(  int _C);
 __declspec(dllimport) int __cdecl _isspace_l(  int _C,    _locale_t _Locale);
 __declspec(dllimport) int __cdecl ispunct(  int _C);
 __declspec(dllimport) int __cdecl _ispunct_l(  int _C,    _locale_t _Locale);
  __declspec(dllimport) int __cdecl isalnum(  int _C);
 __declspec(dllimport) int __cdecl _isalnum_l(  int _C,    _locale_t _Locale);
 __declspec(dllimport) int __cdecl isprint(  int _C);
 __declspec(dllimport) int __cdecl _isprint_l(  int _C,    _locale_t _Locale);
 __declspec(dllimport) int __cdecl isgraph(  int _C);
 __declspec(dllimport) int __cdecl _isgraph_l(  int _C,    _locale_t _Locale);
 __declspec(dllimport) int __cdecl iscntrl(  int _C);
 __declspec(dllimport) int __cdecl _iscntrl_l(  int _C,    _locale_t _Locale);
  __declspec(dllimport) int __cdecl toupper(  int _C);
  __declspec(dllimport) int __cdecl tolower(  int _C);
  __declspec(dllimport) int __cdecl _tolower(  int _C);
 __declspec(dllimport) int __cdecl _tolower_l(  int _C,    _locale_t _Locale);
  __declspec(dllimport) int __cdecl _toupper(  int _C);
 __declspec(dllimport) int __cdecl _toupper_l(  int _C,    _locale_t _Locale);
 __declspec(dllimport) int __cdecl __isascii(  int _C);
 __declspec(dllimport) int __cdecl __toascii(  int _C);
 __declspec(dllimport) int __cdecl __iscsymf(  int _C);
 __declspec(dllimport) int __cdecl __iscsym(  int _C);

#line 128 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\ctype.h"



















































































#line 212 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\ctype.h"












































#line 257 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\ctype.h"






#line 264 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\ctype.h"





























































































#line 358 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\ctype.h"
















#line 375 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\ctype.h"

#line 377 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\ctype.h"


}
#line 381 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\ctype.h"

#line 383 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\ctype.h"
#line 6 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xlocinfo.h"
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\locale.h"













#pragma once




#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"














 








































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 20 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\locale.h"





#pragma pack(push,8)


extern "C" {
#line 30 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\locale.h"

























struct lconv {
        char *decimal_point;
        char *thousands_sep;
        char *grouping;
        char *int_curr_symbol;
        char *currency_symbol;
        char *mon_decimal_point;
        char *mon_thousands_sep;
        char *mon_grouping;
        char *positive_sign;
        char *negative_sign;
        char int_frac_digits;
        char frac_digits;
        char p_cs_precedes;
        char p_sep_by_space;
        char n_cs_precedes;
        char n_sep_by_space;
        char p_sign_posn;
        char n_sign_posn;
        wchar_t *_W_decimal_point;
        wchar_t *_W_thousands_sep;
        wchar_t *_W_int_curr_symbol;
        wchar_t *_W_currency_symbol;
        wchar_t *_W_mon_decimal_point;
        wchar_t *_W_mon_thousands_sep;
        wchar_t *_W_positive_sign;
        wchar_t *_W_negative_sign;
        };

#line 85 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\locale.h"




















#line 106 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\locale.h"

 __declspec(dllimport) int __cdecl _configthreadlocale(  int _Flag);
 __declspec(dllimport) char * __cdecl setlocale(  int _Category,    const char * _Locale);
 __declspec(dllimport) struct lconv * __cdecl localeconv(void);
 __declspec(dllimport) _locale_t __cdecl _get_current_locale(void);
 __declspec(dllimport) _locale_t __cdecl _create_locale(  int _Category,    const char * _Locale);
__declspec(dllimport) void __cdecl _free_locale(   _locale_t _Locale);


 __declspec(deprecated("This function or variable has been superceded by newer library or operating system functionality. Consider using " "_get_current_locale" " instead. See online help for details.")) __declspec(dllimport) _locale_t __cdecl __get_current_locale(void);
 __declspec(deprecated("This function or variable has been superceded by newer library or operating system functionality. Consider using " "_create_locale" " instead. See online help for details.")) __declspec(dllimport) _locale_t __cdecl __create_locale(  int _Category,    const char * _Locale);
__declspec(deprecated("This function or variable has been superceded by newer library or operating system functionality. Consider using " "_free_locale" " instead. See online help for details.")) __declspec(dllimport) void __cdecl __free_locale(   _locale_t _Locale);











}
#line 131 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\locale.h"

#pragma pack(pop)

#line 135 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\locale.h"
#line 7 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xlocinfo.h"





#pragma pack(push,8)



extern "C" {
#line 18 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xlocinfo.h"

		











		



















typedef struct _Collvec
	{	
	unsigned long _Hand;	
	unsigned int _Page;		
	} _Collvec;

typedef struct _Ctypevec
	{	
	unsigned long _Hand;	
	unsigned int _Page;		
	const short *_Table;
	int _Delfl;
	} _Ctypevec;

typedef struct _Cvtvec
	{	
	unsigned long _Hand;	
	unsigned int _Page;		
	} _Cvtvec;

		
__declspec(dllimport) _Collvec __cdecl _Getcoll();
__declspec(dllimport) _Ctypevec __cdecl _Getctype();

__declspec(dllimport) _Cvtvec __cdecl _Getcvt();

__declspec(dllimport) int __cdecl _Getdateorder();





__declspec(dllimport) int __cdecl _Mbrtowc(  wchar_t *, const char *, size_t, mbstate_t *, const _Cvtvec *);
#line 85 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xlocinfo.h"

__declspec(dllimport) float __cdecl _Stof(const char *,     char **, long);
__declspec(dllimport) double __cdecl _Stod(const char *,     char **, long);
__declspec(dllimport) long double __cdecl _Stold(const char *,     char **, 
  long);
__declspec(dllimport) int __cdecl _Strcoll(const char *, const char *,
	const char *, const char *, const _Collvec *);
__declspec(dllimport) size_t __cdecl _Strxfrm(
      char * _String1, 
     char * _End1, const char *, const char *, const _Collvec *);
__declspec(dllimport) int __cdecl _Tolower(int, const _Ctypevec *);
__declspec(dllimport) int __cdecl _Toupper(int, const _Ctypevec *);

__declspec(dllimport) int __cdecl _Wcrtomb(  char *, wchar_t, mbstate_t *, const _Cvtvec *);

__declspec(dllimport) int __cdecl _Wcscoll(const wchar_t *, const wchar_t *,
	const wchar_t *, const wchar_t *, const _Collvec *);
__declspec(dllimport) size_t __cdecl _Wcsxfrm(
      wchar_t *_String1, 
     wchar_t *_End1, const wchar_t *, const wchar_t *, const _Collvec *);

__declspec(dllimport) short __cdecl _Getwctype(wchar_t, const _Ctypevec *);
__declspec(dllimport) const wchar_t * __cdecl _Getwctypes(const wchar_t *, const wchar_t *,
	short*, const _Ctypevec*);
__declspec(dllimport) wchar_t __cdecl _Towlower(wchar_t, const _Ctypevec *);
__declspec(dllimport) wchar_t __cdecl _Towupper(wchar_t, const _Ctypevec *);

}
#line 114 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xlocinfo.h"


extern "C" {
__declspec(dllimport) void *__cdecl _Gettnames();
__declspec(dllimport) char *__cdecl _Getdays();
__declspec(dllimport) char *__cdecl _Getmonths();
__declspec(dllimport) size_t __cdecl _Strftime(
    char *,   size_t _Maxsize, 
      const char *,   const struct tm *, void *);
}





__declspec(dllimport) _locale_t __cdecl _GetLocaleForCP(unsigned int);
#line 131 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xlocinfo.h"

#pragma pack(pop)

#line 135 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xlocinfo.h"





#line 7 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xlocinfo"



 #pragma pack(push,8)
 #pragma warning(push,3)
 #pragma warning(disable:4412)

namespace std {

		
class __declspec(dllimport) _Timevec
	{	
public:
	 _Timevec(void *_Ptr = 0)
		: _Timeptr(_Ptr)
		{	
		}

	 _Timevec(const _Timevec& _Right)
		{	
		*this = _Right;
		}

	 ~_Timevec()
		{	
		free(_Timeptr);
		}

	_Timevec&  operator=(const _Timevec& _Right)
		{	
		_Timeptr = _Right._Timeptr;
		((_Timevec *)&_Right)->_Timeptr = 0;
		return (*this);
		}

	void * _Getptr() const
		{	
		return (_Timeptr);
		}

private:
	void *_Timeptr;	
	};

		

#pragma warning(push)
#pragma warning(disable: 4412)

class __declspec(dllimport) _Locinfo
	{	
public:
	typedef ::_Collvec _Collvec;
	typedef ::_Ctypevec _Ctypevec;
	typedef ::_Cvtvec _Cvtvec;
	typedef ::std:: _Timevec _Timevec;

    static  void __cdecl _Locinfo_ctor(_Locinfo *,
		const char *);
    static  void __cdecl _Locinfo_ctor(_Locinfo *, int,
		const char *);
    static  void __cdecl _Locinfo_dtor(_Locinfo *);
    static  _Locinfo& __cdecl _Locinfo_Addcats(_Locinfo *, int,
		const char *);

	 _Locinfo(const char *_Pch = "C")

        : _Lock(0)
#line 76 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xlocinfo"
        {	
        if (_Pch == 0)
            throw runtime_error("bad locale name");
        _Locinfo_ctor(this, _Pch);
        }

	 _Locinfo(int _Cat, const char *_Pch)

        : _Lock(0)
#line 86 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xlocinfo"
        {	
        if (_Pch == 0)
            throw runtime_error("bad locale name");
        _Locinfo_ctor(this, _Cat, _Pch);
        }

	 ~_Locinfo()
        {
        _Locinfo_dtor(this);
        }


	_Locinfo&  _Addcats(int _Cat, const char *_Pch)
		{	
		if (_Pch == 0)
			throw runtime_error("bad locale name");
		return _Locinfo_Addcats(this, _Cat, _Pch);
		}


	const char * _Getname() const
		{	
		return (_Newlocname._C_str());
		}

	_Collvec  _Getcoll() const
		{	
		return (::_Getcoll());
		}

	_Ctypevec  _Getctype() const
		{	
		return (::_Getctype());
		}

	_Cvtvec  _Getcvt() const
		{	
		return (::_Getcvt());
		}

	const lconv * _Getlconv() const
		{	
		return (localeconv());
		}

	_Timevec  _Gettnames() const
		{	
		return (_Timevec(::_Gettnames()));
		}

	const char * _Getdays() const
		{	
		const char *_Ptr = ::_Getdays();
		if (_Ptr != 0)
			{	
			((_Locinfo *)this)->_Days = _Ptr;
			free((void *)_Ptr);
			}
		return (!_Days._Empty() ? _Days._C_str()
			: ":Sun:Sunday:Mon:Monday:Tue:Tuesday:Wed:Wednesday"
				":Thu:Thursday:Fri:Friday:Sat:Saturday");
		}

	const char * _Getmonths() const
		{	
		const char *_Ptr = ::_Getmonths();
		if (_Ptr != 0)
			{	
			((_Locinfo *)this)->_Months = _Ptr;
			free((void *)_Ptr);
			}
		return (!_Months._Empty() ? _Months._C_str()
			: ":Jan:January:Feb:February:Mar:March"
				":Apr:April:May:May:Jun:June"
				":Jul:July:Aug:August:Sep:September"
				":Oct:October:Nov:November:Dec:December");
		}

	const char * _Getfalse() const
		{	
		return ("false");
		}

	const char * _Gettrue() const
		{	
		return ("true");
		}

	int  _Getdateorder() const
		{	
		return ::_Getdateorder();
		}

private:









	_Lockit _Lock;	
#line 191 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xlocinfo"

	_Yarn<char> _Days;	
	_Yarn<char> _Months;	
	_Yarn<char> _Oldlocname;	
	_Yarn<char> _Newlocname;	
	};
#pragma warning(pop)

		
template<class _Elem> inline
	int __cdecl _LStrcoll(const _Elem *_First1, const _Elem *_Last1,
		const _Elem *_First2, const _Elem *_Last2,
			const _Locinfo::_Collvec *)
	{	
	for (; _First1 != _Last1 && _First2 != _Last2; ++_First1, ++_First2)
		if (*_First1 < *_First2)
			return (-1);	
		else if (*_First2 < *_First1)
			return (+1);	
	return (_First2 != _Last2 ? -1 : _First1 != _Last1 ? +1 : 0);
	}

template<> inline
	int __cdecl _LStrcoll(const char *_First1, const char *_Last1,
		const char *_First2, const char *_Last2,
			const _Locinfo::_Collvec *_Vector)
	{	
	return (_Strcoll(_First1, _Last1, _First2, _Last2, _Vector));
	}

template<> inline
	int __cdecl _LStrcoll(const wchar_t *_First1, const wchar_t *_Last1,
		const wchar_t *_First2, const wchar_t *_Last2,
			const _Locinfo::_Collvec *_Vector)
	{	
	return (_Wcscoll(_First1, _Last1, _First2, _Last2, _Vector));
	}

		
template<class _Elem> inline
	size_t __cdecl _LStrxfrm(_Elem *_First1, _Elem *_Last1,
		const _Elem *_First2, const _Elem *_Last2,
			const _Locinfo::_Collvec *)
	{	
	size_t _Count = _Last2 - _First2;
	if (_Count <= (size_t)(_Last1 - _First1))
		::memcpy_s((_First1), ((_Last1 - _First1) * sizeof(_Elem)), (_First2), (_Count * sizeof (_Elem)));
#line 239 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xlocinfo"
	return (_Count);
	}

template<> inline
	size_t __cdecl _LStrxfrm(
		    char *_First1, 
		   char *_Last1,
		const char *_First2, const char *_Last2,
			const _Locinfo::_Collvec *_Vector)
	{	
	return (_Strxfrm(_First1, _Last1, _First2, _Last2, _Vector));
	}

template<> inline
	size_t __cdecl _LStrxfrm(
		    wchar_t *_First1, 
		   wchar_t *_Last1,
		const wchar_t *_First2, const wchar_t *_Last2,
			const _Locinfo::_Collvec *_Vector)
	{	
	return (_Wcsxfrm(_First1, _Last1, _First2, _Last2, _Vector));
	}
}

 #pragma warning(pop)
 #pragma pack(pop)

#line 267 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xlocinfo"
#line 268 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xlocinfo"





#line 11 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xlocale"
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xdebug"

#pragma once





 #pragma pack(push,8)
 #pragma warning(push,3)

 
  
 
  

namespace std {
struct _DebugHeapTag_t
	{	
	int _Type;
	};
}

		

 










































#line 69 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xdebug"
   
   
   
  #line 73 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xdebug"

 
 

 #pragma warning(pop)
 #pragma pack(pop)


#line 82 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xdebug"
#line 83 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xdebug"





#line 12 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xlocale"

 #pragma pack(push,8)
 #pragma warning(push,3)

 
 

 #pragma warning(disable: 4412)

namespace std {
		
template<class _Dummy>
	class _Locbase
	{	
public:
	 static const int collate = ((1 << (1)) >> 1);
	 static const int ctype = ((1 << (2)) >> 1);
	 static const int monetary = ((1 << (3)) >> 1);
	 static const int numeric = ((1 << (4)) >> 1);
	 static const int time = ((1 << (5)) >> 1);
	 static const int messages = ((1 << (6)) >> 1);
	 static const int all = (((1 << (7)) >> 1) - 1);
	 static const int none = 0;
	};

template<class _Dummy>
	const int _Locbase<_Dummy>::collate;
template<class _Dummy>
	const int _Locbase<_Dummy>::ctype;
template<class _Dummy>
	const int _Locbase<_Dummy>::monetary;
template<class _Dummy>
	const int _Locbase<_Dummy>::numeric;
template<class _Dummy>
	const int _Locbase<_Dummy>::time;
template<class _Dummy>
	const int _Locbase<_Dummy>::messages;
template<class _Dummy>
	const int _Locbase<_Dummy>::all;
template<class _Dummy>
	const int _Locbase<_Dummy>::none;

		
class locale;
template<class _Facet>
	const _Facet& __cdecl use_facet(const locale&);

class  locale
	: public _Locbase<int>
	{	
public:
	typedef int category;

			
	class __declspec(dllimport) id
		{	
	public:
		 id(size_t _Val = 0)
			: _Id(_Val)
			{	
			}

		 operator size_t()
			{	
			if (_Id == 0)
				{	
				{ ::std:: _Lockit _Lock(0);
					if (_Id == 0)
						_Id = ++_Id_cnt;
				}
				}
			return (_Id);
			}

	private:
		size_t _Id;	

		 static int _Id_cnt;

		 id(const id&);	
		id&  operator=(const id&);	
		};

	class _Locimp;

			
	class facet
		{	
		friend class locale;
		friend class _Locimp;

	public:
		__declspec(dllimport) static size_t __cdecl _Getcat(const facet ** = 0,
			const locale * = 0)
			{	
			return ((size_t)(-1));
			}

		__declspec(dllimport) void  _Incref()
			{	
			{ ::std:: _Lockit _Lock(0);
				if (_Refs < (size_t)(-1))
					++_Refs;
			}
			}

		__declspec(dllimport) facet * _Decref()
			{	
			{ ::std:: _Lockit _Lock(0);
				if (0 < _Refs && _Refs < (size_t)(-1))
					--_Refs;
				return (_Refs == 0 ? this : 0);
			}
			}

		void  _Register()
			{	
 


#line 133 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xlocale"
			_Facet_Register(this);
 #line 135 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xlocale"
			}

  






















#line 161 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xlocale"


		__declspec(dllimport) virtual  ~facet()
			{	
			}

	protected:
		__declspec(dllimport) explicit  facet(size_t _Initrefs = 0)
			: _Refs(_Initrefs)
			{	
			}

	private:
		size_t _Refs;	

		 facet(const facet&);	

		facet&  operator=(const facet&);	

 


#line 184 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xlocale"
		static void __cdecl _Facet_Register(facet *);
 #line 186 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xlocale"
		};

			
 #pragma warning(push)
 #pragma warning(disable: 4275)

	class __declspec(dllimport) _Locimp
		: public facet
		{	
	protected:
		 ~_Locimp()
		{	
		_Locimp_dtor(this);
		}

	private:
		static  void __cdecl _Locimp_dtor(_Locimp *);
		static  void __cdecl _Locimp_Addfac(_Locimp *, facet *,
			size_t);	
		static void __cdecl _Locimp_ctor(_Locimp *, const _Locimp&);

		friend class locale;

		 _Locimp(bool _Transparent = false)
			: locale::facet(1), _Facetvec(0), _Facetcount(0),
				_Catmask(none), _Xparent(_Transparent),
					_Name("*")
			{	
			}

		 _Locimp(const _Locimp& _Right)
			: locale::facet(1), _Facetvec(0), _Facetcount(_Right._Facetcount),
				_Catmask(_Right._Catmask), _Xparent(_Right._Xparent),
					_Name(_Right._Name.c_str())
			{	
			_Locimp_ctor(this, _Right);
			}

		void  _Addfac(facet *_Pfacet, size_t _Id)
			{	
			_Locimp_Addfac(this, _Pfacet, _Id);
			}

		static _Locimp *__cdecl _Makeloc(const _Locinfo&,
			category, _Locimp *, const locale *);	

		static void __cdecl _Makewloc(const _Locinfo&,
			category, _Locimp *, const locale *);	

 
		static void __cdecl _Makeushloc(const _Locinfo&,
			category, _Locimp *, const locale *);	
 #line 239 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xlocale"

		static void __cdecl _Makexloc(const _Locinfo&,
			category, _Locimp *, const locale *);	

		facet **_Facetvec;	
		size_t _Facetcount;	
		category _Catmask;	
		bool _Xparent;	
		_Yarn<char> _Name;	

		 static _Locimp *_Clocptr;

private:
		_Locimp&  operator=(const _Locimp&);	
		};

 #pragma warning(pop)

	template<class _Elem,
		class _Traits,
		class _Alloc>
		bool operator()(const basic_string<_Elem, _Traits, _Alloc>& _Left,
			const basic_string<_Elem, _Traits, _Alloc>& _Right) const
		{	
		const ::std:: collate<_Elem>& _Coll_fac =
			::std:: use_facet<::std:: collate<_Elem> >(*this);

		return (_Coll_fac.compare(_Left.c_str(), _Left.c_str() + _Left.size(),
			_Right.c_str(), _Right.c_str() + _Right.size()) < 0);
		}

	template<class _Facet>
		locale combine(const locale& _Loc) const
		{	
		_Facet *_Facptr;

		try {
			_Facptr = (_Facet *)&::std:: use_facet<_Facet>(_Loc);
		} catch (...) {
			_Xruntime_error("locale::combine facet missing");
		}

		_Locimp *_Newimp = new _Locimp(*_Ptr);
		_Newimp->_Addfac(_Facptr, _Facet::id);
		_Newimp->_Catmask = 0;
		_Newimp->_Name = "*";
		return (locale(_Newimp));
		}

	template<class _Facet>
		locale(const locale& _Loc, const _Facet *_Facptr)
			: _Ptr(new _Locimp(*_Loc._Ptr))
		{	
		if (_Facptr != 0)
			{	
			_Ptr->_Addfac((_Facet *)_Facptr, _Facet::id);
			if (_Facet::_Getcat() != (size_t)(-1))
				{	
				_Ptr->_Catmask = 0;
				_Ptr->_Name = "*";
				}
			}
		}

	locale(_Uninitialized)
		{	
		}

	locale(const locale& _Right) throw ()
		: _Ptr(_Right._Ptr)
		{	
		_Ptr->_Incref();
		}

	locale() throw ()
		: _Ptr(_Init())
		{	
		_Getgloballocale()->_Incref();
		}

	locale(const locale& _Loc, const locale& _Other,
		category _Cat)
		: _Ptr(new _Locimp(*_Loc._Ptr))
		{	
		try {
		{ _Locinfo _Lobj(_Loc._Ptr->_Catmask, _Loc._Ptr->_Name.c_str());
			_Locimp::_Makeloc(_Lobj._Addcats(_Cat & _Other._Ptr->_Catmask,
				_Other._Ptr->_Name.c_str()), _Cat, _Ptr, &_Other);
		}
		} catch (...) {
		delete (_Ptr->_Decref());
		throw;
		}
		}

	explicit locale(const char *_Locname,
		category _Cat = all) 	
		: _Ptr(new _Locimp)
		{	
		try {
		_Init();
		{ _Locinfo _Lobj(_Cat, _Locname);
			if (_Badname(_Lobj))
				_Xruntime_error("bad locale name");
			_Locimp::_Makeloc(_Lobj, _Cat, _Ptr, 0);
		}
		} catch (...) {
		delete (_Ptr->_Decref());
		throw;
		}
		}

	locale(const locale& _Loc, const char *_Locname,
		category _Cat)
		: _Ptr(new _Locimp(*_Loc._Ptr))
		{	
		try {
		{ _Locinfo _Lobj(_Loc._Ptr->_Catmask, _Loc._Ptr->_Name.c_str());
			bool _Hadname = !_Badname(_Lobj);
			_Lobj._Addcats(_Cat, _Locname);

			if (_Hadname && _Badname(_Lobj))
				_Xruntime_error("bad locale name");
			_Locimp::_Makeloc(_Lobj, _Cat, _Ptr, 0);
		}
		} catch (...) {
		delete (_Ptr->_Decref());
		throw;
		}
		}

 
	explicit locale(const string& _Str,
		category _Cat = all)
		: _Ptr(new _Locimp)
		{	
		try {
		_Init();
		_Locinfo _Lobj(_Cat, _Str.c_str());

		if (_Badname(_Lobj))
			_Xruntime_error("bad locale name");
		_Locimp::_Makeloc(_Lobj, _Cat, _Ptr, 0);
		} catch (...) {
		delete (_Ptr->_Decref());
		throw;
		}
		}

	locale(const locale& _Loc, const string& _Str,
		category _Cat)
		: _Ptr(new _Locimp(*_Loc._Ptr))
		{	
		try {
		_Locinfo _Lobj(_Loc._Ptr->_Catmask, _Loc._Ptr->_Name.c_str());
		bool _Hadname = !_Badname(_Lobj);
		_Lobj._Addcats(_Cat, _Str.c_str());

		if (_Hadname && _Badname(_Lobj))
			_Xruntime_error("bad locale name");
		_Locimp::_Makeloc(_Lobj, _Cat, _Ptr, 0);
		} catch (...) {
		delete (_Ptr->_Decref());
		throw;
		}
		}
 #line 406 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xlocale"


	~locale() throw ()
		{	
		if (_Ptr != 0)
			delete (_Ptr->_Decref());
		}

	locale& operator=(const locale& _Right) throw ()
		{	
		if (_Ptr != _Right._Ptr)
			{	
			delete (_Ptr->_Decref());
			_Ptr = _Right._Ptr;
			_Ptr->_Incref();
			}
		return (*this);
		}

	string name() const
		{	
		return (_Ptr->_Name.c_str());
		}

	const char *c_str() const
		{	
		return (_Ptr->_Name.c_str());
		}

	const facet *_Getfacet(size_t _Id) const
		{	
		const facet *_Facptr = _Id < _Ptr->_Facetcount
			? _Ptr->_Facetvec[_Id] : 0;	
		if (_Facptr != 0 || !_Ptr->_Xparent)
			return (_Facptr);	
		else
			{	
			locale::_Locimp *_Ptr = _Getgloballocale();
			return (_Id < _Ptr->_Facetcount
				? _Ptr->_Facetvec[_Id]	
				: 0);	
			}
		}

	bool operator==(const locale& _Loc) const
		{	
		return (_Ptr == _Loc._Ptr
			|| name().compare("*") != 0 && name().compare(_Loc.name()) == 0);
		}

	bool operator!=(const locale& _Right) const
		{	
		return (!(*this == _Right));
		}

	static __declspec(dllimport) const locale& __cdecl classic();	

	static __declspec(dllimport) locale __cdecl global(const locale&);	

	static __declspec(dllimport) locale __cdecl empty();	

private:
	locale(_Locimp *_Ptrimp)
		: _Ptr(_Ptrimp)
		{	
		}

    static __declspec(dllimport) _Locimp *__cdecl _Init();	
	static __declspec(dllimport) _Locimp *__cdecl _Getgloballocale();
	static __declspec(dllimport) void __cdecl _Setgloballocale(void *);

	bool _Badname(const _Locinfo& _Lobj)
		{	
		return (:: strcmp(_Lobj._Getname(), "*") == 0);
		}

	_Locimp *_Ptr;	
	};

		
template<class _Facet>
	struct _Facetptr
	{	
	 static const locale::facet *_Psave;
	};

template<class _Facet>
	 const locale::facet *_Facetptr<_Facet>::
		_Psave = 0;

  

  


template<class _Facet> inline
	const _Facet& __cdecl use_facet(const locale& _Loc)

	{	
	{ ::std:: _Lockit _Lock(0);	
		const locale::facet *_Psave =
			_Facetptr<_Facet>::_Psave;	

		size_t _Id = _Facet::id;
		const locale::facet *_Pf = _Loc._Getfacet(_Id);

		if (_Pf != 0)
			;	
		else if (_Psave != 0)
			_Pf = _Psave;	
		else if (_Facet::_Getcat(&_Psave, &_Loc) == (size_t)(-1))

 

			throw bad_cast();	

 

#line 525 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xlocale"

		else
			{	
			_Pf = _Psave;
			_Facetptr<_Facet>::_Psave = _Psave;

			locale::facet *_Pfmod = (_Facet *)_Psave;
			_Pfmod->_Incref();
			_Pfmod->_Register();
			}

		return ((const _Facet&)(*_Pf));	
	}
	}

		
template<class _Elem,
	class _InIt> inline
	int __cdecl _Getloctxt(_InIt& _First, _InIt& _Last, size_t _Numfields,
		const _Elem *_Ptr)
	{	
	for (size_t _Off = 0; _Ptr[_Off] != (_Elem)0; ++_Off)
		if (_Ptr[_Off] == _Ptr[0])
			++_Numfields;	
	string _Str(_Numfields, '\0');	

	int _Ans = -2;	
	for (size_t _Column = 1; ; ++_Column, ++_First, _Ans = -1)
		{	
		bool _Prefix = false;	
		size_t _Off = 0;	
		size_t _Field = 0;	

		for (; _Field < _Numfields; ++_Field)
			{	
			for (; _Ptr[_Off] != (_Elem)0 && _Ptr[_Off] != _Ptr[0]; ++_Off)
				;	

			if (_Str[_Field] != '\0')
				_Off += _Str[_Field];	
			else if (_Ptr[_Off += _Column] == _Ptr[0]
				|| _Ptr[_Off] == (_Elem)0)
				{	
				_Str[_Field] = (char)(_Column < 127
					? _Column : 127);	
				_Ans = (int)_Field;	
				}
			else if (_First == _Last || _Ptr[_Off] != *_First)
				_Str[_Field] = (char)(_Column < 127
					? _Column : 127);	
			else
				_Prefix = true;	
			}

		if (!_Prefix || _First == _Last)
			break;	
		}
	return (_Ans);	
	}

		



template<class _Elem> inline
	char __cdecl _Maklocbyte(_Elem _Char,
		const _Locinfo::_Cvtvec&)
	{	
	return ((char)(unsigned char)_Char);
	}

template<> inline
	char __cdecl _Maklocbyte(wchar_t _Char,
		const _Locinfo::_Cvtvec& _Cvt)
	{	
	char _Byte = '\0';
	mbstate_t _Mbst1 = {0};
	_Wcrtomb(&_Byte, _Char, &_Mbst1, &_Cvt);
	return (_Byte);
	}

 
template<> inline
	char __cdecl _Maklocbyte(unsigned short _Char,
		const _Locinfo::_Cvtvec &_Cvt)
	{	
	char _Byte = '\0';
	mbstate_t _Mbst1 = {0};
	_Wcrtomb(&_Byte, (wchar_t)_Char, &_Mbst1, &_Cvt);
	return (_Byte);
	}
 #line 617 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xlocale"

		



template<class _Elem> inline
	_Elem __cdecl _Maklocchr(char _Byte, _Elem *,
		const _Locinfo::_Cvtvec&)
	{	
	return ((_Elem)(unsigned char)_Byte);
	}

template<> inline
	wchar_t __cdecl _Maklocchr(char _Byte, wchar_t *,
		const _Locinfo::_Cvtvec& _Cvt)
	{	
	wchar_t _Wc = L'\0';
	mbstate_t _Mbst1 = {0};
	_Mbrtowc(&_Wc, &_Byte, 1, &_Mbst1, &_Cvt);
	return (_Wc);
	}

 
template<> inline
	unsigned short __cdecl _Maklocchr(char _Byte, unsigned short *,
		const _Locinfo::_Cvtvec &_Cvt)
	{	
	unsigned short _Wc = (unsigned short)0;
	mbstate_t _Mbst1 = {0};
	_Mbrtowc((wchar_t *)&_Wc, &_Byte, 1, &_Mbst1, &_Cvt);
	return (_Wc);
	}
 #line 650 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xlocale"

		



template<class _Elem> inline
	_Elem *__cdecl _Maklocstr(const char *_Ptr, _Elem *,
		const _Locinfo::_Cvtvec&)
	{	
	size_t _Count = :: strlen(_Ptr) + 1;
	_Elem *_Ptrdest = new _Elem[_Count];

 #pragma warning(push)
 #pragma warning(disable: 6011)	
	for (_Elem *_Ptrnext = _Ptrdest; 0 < _Count; --_Count, ++_Ptrnext, ++_Ptr)
		*_Ptrnext = (_Elem)(unsigned char)*_Ptr;
 #pragma warning(pop)

	return (_Ptrdest);
	}

template<> inline
	wchar_t *__cdecl _Maklocstr(const char *_Ptr, wchar_t *,
		const _Locinfo::_Cvtvec& _Cvt)
	{	
	size_t _Count, _Count1;
	size_t _Wchars;
	const char *_Ptr1;
	int _Bytes;
	wchar_t _Wc;
	mbstate_t _Mbst1 = {0};

	_Count1 = :: strlen(_Ptr) + 1;
	for (_Count = _Count1, _Wchars = 0, _Ptr1 = _Ptr; 0 < _Count;
		_Count -= _Bytes, _Ptr1 += _Bytes, ++_Wchars)
		if ((_Bytes = _Mbrtowc(&_Wc, _Ptr1, _Count, &_Mbst1, &_Cvt)) <= 0)
			break;
	++_Wchars;	

	wchar_t *_Ptrdest = new wchar_t[_Wchars];
	wchar_t *_Ptrnext = _Ptrdest;
	mbstate_t _Mbst2 = {0};

 #pragma warning(push)
 #pragma warning(disable: 6011)	
	for (; 0 < _Wchars;
		_Count -= _Bytes, _Ptr += _Bytes, --_Wchars, ++_Ptrnext)
		if ((_Bytes = _Mbrtowc(_Ptrnext, _Ptr, _Count1, &_Mbst2, &_Cvt)) <= 0)
			break;
	*_Ptrnext = L'\0';
 #pragma warning(pop)

	return (_Ptrdest);
	}

 
template<> inline
	unsigned short *__cdecl _Maklocstr(const char *_Ptr, unsigned short *,
		const _Locinfo::_Cvtvec &_Cvt)
	{	
	size_t _Count, _Count1;
	size_t _Wchars;
	const char *_Ptr1;
	int _Bytes;
	unsigned short _Wc;
	mbstate_t _Mbst1 = {0};

	_Count1 = :: strlen(_Ptr) + 1;
	for (_Count = _Count1, _Wchars = 0, _Ptr1 = _Ptr; 0 < _Count;
		_Count -= _Bytes, _Ptr1 += _Bytes, ++_Wchars)
		if ((_Bytes =
			_Mbrtowc((wchar_t *)&_Wc, _Ptr1, _Count, &_Mbst1, &_Cvt)) <= 0)
			break;
	++_Wchars;	

	wchar_t *_Ptrdest = new wchar_t[_Wchars];
	wchar_t *_Ptrnext = _Ptrdest;
	mbstate_t _Mbst2 = {0};
	for (; 0 < _Wchars;
		_Count -= _Bytes, _Ptr += _Bytes, --_Wchars, ++_Ptrnext)
		if ((_Bytes = _Mbrtowc(_Ptrnext, _Ptr, _Count1, &_Mbst2, &_Cvt)) <= 0)
			break;
	*_Ptrnext = L'\0';
	return ((unsigned short *)_Ptrdest);
	}
 #line 736 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xlocale"

		
 #pragma warning(push)
 #pragma warning(disable: 4275)

class __declspec(dllimport) codecvt_base
	: public locale::facet
	{	
public:
	enum
		{	
		ok, partial, error, noconv};
	typedef int result;

	 codecvt_base(size_t _Refs = 0)
		: locale::facet(_Refs)
		{	
		}

	bool  always_noconv() const throw ()
		{	
		return (do_always_noconv());
		}

	int  max_length() const throw ()
		{	
		return (do_max_length());
		}

	int  encoding() const throw ()
		{	
		return (do_encoding());
		}

	 ~codecvt_base()
		{	
		}

protected:
	virtual bool  do_always_noconv() const throw ()
		{	
		return (true);
		}

	virtual int  do_max_length() const throw ()
		{	
		return (1);
		}

	virtual int  do_encoding() const throw ()
		{	
		return (1);	
		}
	};

 #pragma warning(pop)

		
template<class _Elem,
	class _Byte,
	class _Statype>
	class codecvt
		: public codecvt_base
	{	
public:
	typedef _Elem intern_type;
	typedef _Byte extern_type;
	typedef _Statype state_type;

	result  in(_Statype& _State,
		const _Byte *_First1, const _Byte *_Last1, const _Byte *& _Mid1,
		_Elem *_First2, _Elem *_Last2, _Elem *& _Mid2) const
		{	
		return (do_in(_State,
			_First1, _Last1, _Mid1, _First2, _Last2, _Mid2));
		}

	result  out(_Statype& _State,
		const _Elem *_First1, const _Elem *_Last1, const _Elem *& _Mid1,
		_Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
		{	
		return (do_out(_State,
			_First1, _Last1, _Mid1, _First2, _Last2, _Mid2));
		}

	result  unshift(_Statype& _State,
		_Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
		{	
		return (do_unshift(_State, _First2, _Last2, _Mid2));
		}

	int  length(const _Statype& _State, const _Byte *_First1,
		const _Byte *_Last1, size_t _Count) const
		{	
		return (do_length(_State, _First1, _Last1, _Count));
		}

	 static locale::id id;	

	explicit  codecvt(size_t _Refs = 0)
		: codecvt_base(_Refs)
		{	
		_Init(_Locinfo());
		}

	 codecvt(const _Locinfo& _Lobj, size_t _Refs = 0)
		: codecvt_base(_Refs)
		{	
		_Init(_Lobj);
		}

	static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0,
		const locale *_Ploc = 0)
		{	
		if (_Ppf != 0 && *_Ppf == 0)
			*_Ppf = new codecvt<_Elem, _Byte, _Statype>(
				_Locinfo(_Ploc->c_str()));
		return (2);
		}

protected:
	virtual  ~codecvt()
		{	
		}

	void  _Init(const _Locinfo&)
		{	
		}

	virtual result  do_in(_Statype&,
		const _Byte *_First1, const _Byte *, const _Byte *& _Mid1,
		_Elem *_First2, _Elem *, _Elem *& _Mid2) const
		{	
		_Mid1 = _First1, _Mid2 = _First2;
		return (noconv);	
		}

	virtual result  do_out(_Statype&,
		const _Elem *_First1, const _Elem *, const _Elem *& _Mid1,
		_Byte *_First2, _Byte *, _Byte *& _Mid2) const
		{	
		_Mid1 = _First1, _Mid2 = _First2;
		return (noconv);	
		}

	virtual result  do_unshift(_Statype&,
		_Byte *_First2, _Byte *, _Byte *&_Mid2) const
		{	
		_Mid2 = _First2;
		return (noconv);	
		}

	virtual int  do_length(const _Statype&, const _Byte *_First1,
		const _Byte *_Last1, size_t _Count) const
		{	
		return ((int)(_Count < (size_t)(_Last1 - _First1)
			? _Count : _Last1 - _First1));	
		}
	};

		
template<class _Elem,
	class _Byte,
	class _Statype>
	 locale::id codecvt<_Elem, _Byte, _Statype>::id;

 




















































































































































































































































































































































































































































































































































































































#line 1500 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xlocale"

		
template<>
	class __declspec(dllimport) codecvt<wchar_t, char, _Mbstatet>
	: public codecvt_base
	{	
public:
	typedef wchar_t _Elem;
	typedef char _Byte;
	typedef _Mbstatet _Statype;
	typedef _Elem intern_type;
	typedef _Byte extern_type;
	typedef _Statype state_type;

	result  in(_Statype& _State,
		const _Byte *_First1, const _Byte *_Last1, const _Byte *& _Mid1,
		_Elem *_First2, _Elem *_Last2, _Elem *& _Mid2) const
		{	
		return (do_in(_State,
			_First1, _Last1, _Mid1, _First2, _Last2, _Mid2));
		}

	result  out(_Statype& _State,
		const _Elem *_First1, const _Elem *_Last1, const _Elem *& _Mid1,
		_Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
		{	
		return (do_out(_State,
			_First1, _Last1, _Mid1, _First2, _Last2, _Mid2));
		}

	result  unshift(_Statype& _State,
		_Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
		{	
		return (do_unshift(_State,
			_First2, _Last2, _Mid2));
		}

	int  length(const _Statype& _State, const _Byte *_First1,
		const _Byte *_Last1, size_t _Count) const
		{	
		return (do_length(_State, _First1, _Last1, _Count));
		}

	 static locale::id id;

	explicit  codecvt(size_t _Refs = 0)
		: codecvt_base(_Refs)
		{	
		{ _Locinfo _Lobj;
			_Init(_Lobj);
		}
		}

	 codecvt(const _Locinfo& _Lobj, size_t _Refs = 0)
		: codecvt_base(_Refs)
		{	
		_Init(_Lobj);
		}

	static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0,
		const locale *_Ploc = 0)
		{	
		if (_Ppf != 0 && *_Ppf == 0)
			*_Ppf = new codecvt<_Elem, _Byte, _Statype>(
				_Locinfo(_Ploc->c_str()));
		return (2);
		}

protected:
	virtual  ~codecvt()
		{	
		}

	void  _Init(const _Locinfo& _Lobj)
		{	
		_Cvt = _Lobj._Getcvt();
		}

	virtual result  do_in(_Statype& _State,
		const _Byte *_First1, const _Byte *_Last1, const _Byte *& _Mid1,
			_Elem *_First2, _Elem *_Last2, _Elem *& _Mid2) const
		{	
		;
		;
		_Mid1 = _First1, _Mid2 = _First2;
		result _Ans = _Mid1 == _Last1 ? ok : partial;
		int _Bytes;

		while (_Mid1 != _Last1 && _Mid2 != _Last2)
			switch (_Bytes = _Mbrtowc(_Mid2, _Mid1, _Last1 - _Mid1,
				&_State, &_Cvt))
			{	
			case -2:	
				_Mid1 = _Last1;
				return (_Ans);

			case -1:	
				return (error);

			case 0:	
				if (*_Mid2 == (_Elem)0)
					_Bytes = (int):: strlen(_Mid1) + 1;
				

			default:	
				if (_Bytes == -3)
					_Bytes = 0;	
				_Mid1 += _Bytes;
				++_Mid2;
				_Ans = ok;
			}
		return (_Ans);
		}

	virtual result  do_out(_Statype& _State,
		const _Elem *_First1, const _Elem *_Last1, const _Elem *& _Mid1,
			_Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
		{	
		;
		;
		_Mid1 = _First1, _Mid2 = _First2;
		result _Ans = _Mid1 == _Last1 ? ok : partial;
		int _Bytes;

		while (_Mid1 != _Last1 && _Mid2 != _Last2)
			if ((int)___mb_cur_max_func() <= _Last2 - _Mid2)
				if ((_Bytes = _Wcrtomb(_Mid2, *_Mid1,
					&_State, &_Cvt)) < 0)
					return (error);	
				else
					++_Mid1, _Mid2 += _Bytes, _Ans = ok;
			else
				{	
				_Byte _Buf[5];
				_Statype _Stsave = _State;

				if ((_Bytes = _Wcrtomb(_Buf, *_Mid1,
					&_State, &_Cvt)) < 0)
					return (error);	
				else if (_Last2 - _Mid2 < _Bytes)
					{	
					_State = _Stsave;
					return (_Ans);
					}
				else
					{	
					:: memcpy(_Mid2, _Buf, _Bytes);
					++_Mid1, _Mid2 += _Bytes, _Ans = ok;
					}
				}
		return (_Ans);
		}

	virtual result  do_unshift(_Statype& _State,
		_Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
		{	
		;
		_Mid2 = _First2;
		result _Ans = ok;
		int _Bytes;
		_Byte _Buf[5];
		_Statype _Stsave = _State;

		if ((_Bytes = _Wcrtomb(_Buf, L'\0', &_State, &_Cvt)) <= 0)
			_Ans = error;	
		else if (_Last2 - _Mid2 < --_Bytes)
			{	
			_State = _Stsave;
			_Ans = partial;
			}
		else if (0 < _Bytes)
			{	
			:: memcpy(_Mid2, _Buf, _Bytes);
			_Mid2 += _Bytes;
			}
		return (_Ans);
		}

	virtual int  do_length(const _Statype& _State, const _Byte *_First1,
		const _Byte *_Last1, size_t _Count) const
		{	
 



#line 1686 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xlocale"
		;
		int _Wchars;
		const _Byte *_Mid1;
		_Statype _Mystate = _State;

		for (_Wchars = 0, _Mid1 = _First1;
			(size_t)_Wchars < _Count && _Mid1 != _Last1; )
			{	
			int _Bytes;
			_Elem _Ch;

			switch (_Bytes = _Mbrtowc(&_Ch, _Mid1, _Last1 - _Mid1,
				&_Mystate, &_Cvt))
				{	
			case -2:	
				return (_Wchars);

			case -1:	
				return (_Wchars);

			case 0:	
				if (_Ch == (_Elem)0)
					_Bytes = (int):: strlen(_Mid1) + 1;
				

			default:	
				if (_Bytes == -3)
					_Bytes = 0;	
				_Mid1 += _Bytes;
				++_Wchars;
				}
			}
		return (_Wchars);
 #line 1720 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xlocale"
		}

	virtual bool  do_always_noconv() const throw ()
		{	
		return (false);
		}

	virtual int  do_max_length() const throw ()
		{	
		return (5);
		}

private:
	_Locinfo::_Cvtvec _Cvt;	
	};

 
		
template<>
	class __declspec(dllimport) codecvt<unsigned short, char, _Mbstatet>
	: public codecvt_base
	{	
public:
	typedef unsigned short _Elem;
	typedef char _Byte;
	typedef _Mbstatet _Statype;
	typedef _Elem intern_type;
	typedef _Byte extern_type;
	typedef _Statype state_type;

	result  in(_Statype& _State,
		const _Byte *_First1, const _Byte *_Last1, const _Byte *& _Mid1,
		_Elem *_First2, _Elem *_Last2, _Elem *& _Mid2) const
		{	
		return (do_in(_State,
			_First1, _Last1, _Mid1, _First2, _Last2, _Mid2));
		}

	result  out(_Statype& _State,
		const _Elem *_First1, const _Elem *_Last1, const _Elem *& _Mid1,
		_Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
		{	
		return (do_out(_State,
			_First1, _Last1, _Mid1, _First2, _Last2, _Mid2));
		}

	result  unshift(_Statype& _State,
		_Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
		{	
		return (do_unshift(_State,
			_First2, _Last2, _Mid2));
		}

	int  length(const _Statype& _State, const _Byte *_First1,
		const _Byte *_Last1, size_t _Count) const
		{	
		return (do_length(_State, _First1, _Last1, _Count));
		}

	 static locale::id id;

	explicit  codecvt(size_t _Refs = 0)
		: codecvt_base(_Refs)
		{	
		{ _Locinfo _Lobj;
			_Init(_Lobj);
		}
		}

	 codecvt(const _Locinfo& _Lobj, size_t _Refs = 0)
		: codecvt_base(_Refs)
		{	
		_Init(_Lobj);
		}

	static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0,
		const locale *_Ploc = 0)
		{	
		if (_Ppf != 0 && *_Ppf == 0)
			*_Ppf = new codecvt<_Elem, _Byte, _Statype>(
				_Locinfo(_Ploc->c_str()));
		return (2);
		}

protected:
	virtual  ~codecvt()
		{	
		}

	void  _Init(const _Locinfo& _Lobj)
		{	
		_Cvt = _Lobj._Getcvt();
		}

	virtual result  do_in(_Statype& _State,
		const _Byte *_First1, const _Byte *_Last1, const _Byte *& _Mid1,
			_Elem *_First2, _Elem *_Last2, _Elem *& _Mid2) const
		{	
		;
		;
		_Mid1 = _First1, _Mid2 = _First2;
		result _Ans = _Mid1 == _Last1 ? ok : partial;
		int _Bytes;

		while (_Mid1 != _Last1 && _Mid2 != _Last2)
			switch (_Bytes = _Mbrtowc((wchar_t *)_Mid2, _Mid1, _Last1 - _Mid1,
				&_State, &_Cvt))
			{	
			case -2:	
				_Mid1 = _Last1;
				return (_Ans);

			case -1:	
				return (error);

			case 0:	
				if (*_Mid2 == (_Elem)0)
					_Bytes = (int):: strlen(_Mid1) + 1;
				

			default:	
				if (_Bytes == -3)
					_Bytes = 0;	
				_Mid1 += _Bytes;
				++_Mid2;
				_Ans = ok;
			}
		return (_Ans);
		}

	virtual result  do_out(_Statype& _State,
		const _Elem *_First1, const _Elem *_Last1, const _Elem *& _Mid1,
			_Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
		{	
		;
		;
		_Mid1 = _First1, _Mid2 = _First2;
		result _Ans = _Mid1 == _Last1 ? ok : partial;
		int _Bytes;

		while (_Mid1 != _Last1 && _Mid2 != _Last2)
			if ((int)___mb_cur_max_func() <= _Last2 - _Mid2)
				if ((_Bytes = _Wcrtomb(_Mid2, *_Mid1,
					&_State, &_Cvt)) < 0)
					return (error);	
				else
					++_Mid1, _Mid2 += _Bytes, _Ans = ok;
			else
				{	
				_Byte _Buf[5];
				_Statype _Stsave = _State;

				if ((_Bytes = _Wcrtomb(_Buf, *_Mid1,
					&_State, &_Cvt)) < 0)
					return (error);	
				else if (_Last2 - _Mid2 < _Bytes)
					{	
					_State = _Stsave;
					return (_Ans);
					}
				else
					{	
					:: memcpy(_Mid2, _Buf, _Bytes);
					++_Mid1, _Mid2 += _Bytes, _Ans = ok;
					}
				}
		return (_Ans);
		}

	virtual result  do_unshift(_Statype& _State,
		_Byte *_First2, _Byte *_Last2, _Byte *& _Mid2) const
		{	
		;
		_Mid2 = _First2;
		result _Ans = ok;
		int _Bytes;
		_Byte _Buf[5];
		_Statype _Stsave = _State;

		if ((_Bytes = _Wcrtomb(_Buf, L'\0', &_State, &_Cvt)) <= 0)
			_Ans = error;	
		else if (_Last2 - _Mid2 < --_Bytes)
			{	
			_State = _Stsave;
			_Ans = partial;
			}
		else if (0 < _Bytes)
			{	
			:: memcpy(_Mid2, _Buf, _Bytes);
			_Mid2 += _Bytes;
			}
		return (_Ans);
		}

	virtual int  do_length(const _Statype& _State, const _Byte *_First1,
		const _Byte *_Last1, size_t _Count) const
		{	
		;
		int _Wchars;
		const _Byte *_Mid1;
		_Statype _Mystate = _State;

		for (_Wchars = 0, _Mid1 = _First1;
			(size_t)_Wchars < _Count && _Mid1 != _Last1; )
			{	
			int _Bytes;
			_Elem _Ch;

			switch (_Bytes = _Mbrtowc((wchar_t *)&_Ch, _Mid1, _Last1 - _Mid1,
				&_Mystate, &_Cvt))
				{	
			case -2:	
				return (_Wchars);

			case -1:	
				return (_Wchars);

			case 0:	
				if (_Ch == (_Elem)0)
					_Bytes = (int):: strlen(_Mid1) + 1;
				

			default:	
				if (_Bytes == -3)
					_Bytes = 0;	
				_Mid1 += _Bytes;
				++_Wchars;
				}
			}
		return (_Wchars);
		}

	virtual bool  do_always_noconv() const throw ()
		{	
		return (false);
		}

	virtual int  do_max_length() const throw ()
		{	
		return (5);
		}

private:
	_Locinfo::_Cvtvec _Cvt;	
	};
 #line 1966 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xlocale"

		
template<class _Elem,
	class _Byte,
	class _Statype>
	class codecvt_byname
		: public codecvt<_Elem, _Byte, _Statype>
	{	
public:
	explicit  codecvt_byname(const char *_Locname, size_t _Refs = 0)
		: codecvt<_Elem, _Byte, _Statype>(_Locinfo(_Locname), _Refs)
		{	
		}

 
	explicit  codecvt_byname(const string& _Str, size_t _Refs = 0)
		: codecvt<_Elem, _Byte, _Statype>(_Locinfo(_Str.c_str()), _Refs)
		{	
		}
 #line 1986 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xlocale"

protected:
	virtual  ~codecvt_byname()
		{	
		}
	};

		
 #pragma warning(push)
 #pragma warning(disable: 4275)

struct __declspec(dllimport) ctype_base
	: public locale::facet
	{	
	enum
		{	
		alnum = 0x4|0x2|0x1|0x100, alpha = 0x2|0x1|0x100,
		cntrl = 0x20, digit = 0x4, graph = 0x4|0x2|0x10|0x1|0x100,
		lower = 0x2, print = 0x4|0x2|0x10|0x40|0x1|0x100|0x80,
		punct = 0x10, space = 0x8|0x40|0x000, upper = 0x1,
		xdigit = 0x80};
	typedef short mask;	

	 ctype_base(size_t _Refs = 0)
		: locale::facet(_Refs)
		{	
		}

	 ~ctype_base()
		{	
		}
	};

 #pragma warning(pop)

		
template<class _Elem>
	class ctype
		: public ctype_base
	{	
public:
	typedef _Elem char_type;

	bool  is(mask _Maskval, _Elem _Ch) const
		{	
		return (do_is(_Maskval, _Ch));
		}

	const _Elem * is(const _Elem *_First, const _Elem *_Last,
		mask *_Dest) const
		{	
		return (do_is(_First, _Last, _Dest));
		}

	const _Elem * scan_is(mask _Maskval, const _Elem *_First,
		const _Elem *_Last) const
		{	
		return (do_scan_is(_Maskval, _First, _Last));
		}

	const _Elem * scan_not(mask _Maskval, const _Elem *_First,
		const _Elem *_Last) const
		{	
		return (do_scan_not(_Maskval, _First, _Last));
		}

	_Elem  tolower(_Elem _Ch) const
		{	
		return (do_tolower(_Ch));
		}

	const _Elem * tolower(_Elem *_First, const _Elem *_Last) const
		{	
		return (do_tolower(_First, _Last));
		}

	_Elem  toupper(_Elem _Ch) const
		{	
		return (do_toupper(_Ch));
		}

	const _Elem * toupper(_Elem *_First, const _Elem *_Last) const
		{	
		return (do_toupper(_First, _Last));
		}

	_Elem  widen(char _Byte) const
		{	
		return (do_widen(_Byte));
		}

	const char * widen(const char *_First, const char *_Last,
		_Elem *_Dest) const
		{	
		return (do_widen(_First, _Last, _Dest));
		}

	char  narrow(_Elem _Ch, char _Dflt = '\0') const
		{	
		return (do_narrow(_Ch, _Dflt));
		}

	const _Elem * narrow(const _Elem *_First, const _Elem *_Last,
		char _Dflt, char *_Dest) const
		{	
		return (do_narrow(_First, _Last, _Dflt, _Dest));
		}

	 static locale::id id;

	explicit  ctype(size_t _Refs = 0)
		: ctype_base(_Refs)
		{	
		{ _Locinfo _Lobj;
			_Init(_Lobj);
		}
		}

	 ctype(const _Locinfo& _Lobj, size_t _Refs = 0)
		: ctype_base(_Refs)
		{	
		_Init(_Lobj);
		}

	static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0,
		const locale *_Ploc = 0)
		{	
		if (_Ppf != 0 && *_Ppf == 0)
			*_Ppf = new ctype<_Elem>(
				_Locinfo(_Ploc->c_str()));
		return (2);
		}

protected:
	virtual  ~ctype()
		{	
		if (_Ctype._Delfl)
			free((void *)_Ctype._Table);
		}

	void  _Init(const _Locinfo& _Lobj)
		{	
		_Ctype = _Lobj._Getctype();
		}

	virtual bool  do_is(mask _Maskval, _Elem _Ch) const
		{	
		return ((_Ctype._Table[(unsigned char)narrow(_Ch)]
			& _Maskval) != 0);
		}

	virtual const _Elem * do_is(const _Elem *_First, const _Elem *_Last,
		mask *_Dest) const
		{	
		;
		;
		for (; _First != _Last; ++_First, ++_Dest)
			*_Dest = _Ctype._Table[(unsigned char)narrow(*_First)];
		return (_First);
		}

	virtual const _Elem * do_scan_is(mask _Maskval,
		const _Elem *_First, const _Elem *_Last) const
		{	
		;
		for (; _First != _Last && !is(_Maskval, *_First); ++_First)
			;
		return (_First);
		}

	virtual const _Elem * do_scan_not(mask _Maskval,
		const _Elem *_First, const _Elem *_Last) const
		{	
		;
		for (; _First != _Last && is(_Maskval, *_First); ++_First)
			;
		return (_First);
		}

	virtual _Elem  do_tolower(_Elem _Ch) const
		{	
		unsigned char _Byte = (unsigned char)narrow(_Ch, '\0');
		if (_Byte == '\0')
			return (_Ch);
		else
			return (widen((char)_Tolower(_Byte, &_Ctype)));
		}

	virtual const _Elem * do_tolower(_Elem *_First,
		const _Elem *_Last) const
		{	
		;
		for (; _First != _Last; ++_First)
			{	
			unsigned char _Byte = (unsigned char)narrow(*_First, '\0');
			if (_Byte != '\0')
				*_First = (widen((char)_Tolower(_Byte, &_Ctype)));
			}
		return ((const _Elem *)_First);
		}

	virtual _Elem  do_toupper(_Elem _Ch) const
		{	
		unsigned char _Byte = (unsigned char)narrow(_Ch, '\0');
		if (_Byte == '\0')
			return (_Ch);
		else
			return (widen((char)_Toupper(_Byte, &_Ctype)));
		}

	virtual const _Elem * do_toupper(_Elem *_First,
		const _Elem *_Last) const
		{	
		;
		for (; _First != _Last; ++_First)
			{	
			unsigned char _Byte = (unsigned char)narrow(*_First, '\0');
			if (_Byte != '\0')
				*_First = (widen((char)_Toupper(_Byte, &_Ctype)));
			}
		return ((const _Elem *)_First);
		}

	virtual _Elem  do_widen(char _Byte) const
		{	
		return (_Maklocchr(_Byte, (_Elem *)0, _Cvt));
		}

	virtual const char * do_widen(const char *_First,
		const char *_Last, _Elem *_Dest) const
		{	
		;
		;
		for (; _First != _Last; ++_First, ++_Dest)
			*_Dest = _Maklocchr(*_First, (_Elem *)0, _Cvt);
		return (_First);
		}

	char  _Donarrow(_Elem _Ch, char _Dflt) const
		{	
		char _Byte;
		if (_Ch == (_Elem)0)
			return ('\0');
		else if ((_Byte = _Maklocbyte((_Elem)_Ch, _Cvt)) == '\0')
			return (_Dflt);
		else
			return (_Byte);
		}

	virtual char  do_narrow(_Elem _Ch, char _Dflt) const
		{	
		return (_Donarrow(_Ch, _Dflt));
		}

	virtual const _Elem * do_narrow(const _Elem *_First,
		const _Elem *_Last, char _Dflt, char *_Dest) const
		{	
		;
		;
		for (; _First != _Last; ++_First, ++_Dest)
			*_Dest = _Donarrow(*_First, _Dflt);
		return (_First);
		}

private:
	_Locinfo::_Ctypevec _Ctype;	
	_Locinfo::_Cvtvec _Cvt;		
	};

		
template<class _Elem>
	locale::id ctype<_Elem>::id;

		
template<>
	class __declspec(dllimport) ctype<char>
	: public ctype_base
	{	
	typedef ctype<char> _Myt;

public:
	typedef char _Elem;
	typedef _Elem char_type;

	bool  is(mask _Maskval, _Elem _Ch) const
		{	
		return ((_Ctype._Table[(unsigned char)_Ch] & _Maskval) != 0);
		}

	const _Elem * is(const _Elem *_First,
		const _Elem *_Last, mask *_Dest) const
		{	
		;
		;
		for (; _First != _Last; ++_First, ++_Dest)
			*_Dest = _Ctype._Table[(unsigned char)*_First];
		return (_First);
		}

	const _Elem * scan_is(mask _Maskval,
		const _Elem *_First, const _Elem *_Last) const
		{	
		;
		for (; _First != _Last && !is(_Maskval, *_First); ++_First)
			;
		return (_First);
		}

	const _Elem * scan_not(mask _Maskval,
		const _Elem *_First, const _Elem *_Last) const
		{	
		;
		for (; _First != _Last && is(_Maskval, *_First); ++_First)
			;
		return (_First);
		}

	_Elem  tolower(_Elem _Ch) const
		{	
		return (do_tolower(_Ch));
		}

	const _Elem * tolower(_Elem *_First, const _Elem *_Last) const
		{	
		return (do_tolower(_First, _Last));
		}

	_Elem  toupper(_Elem _Ch) const
		{	
		return (do_toupper(_Ch));
		}

	const _Elem * toupper(_Elem *_First, const _Elem *_Last) const
		{	
		return (do_toupper(_First, _Last));
		}

	_Elem  widen(char _Byte) const
		{	
		return (do_widen(_Byte));
		}

	const _Elem * widen(const char *_First, const char *_Last,
		_Elem *_Dest) const
		{	
		return (do_widen(_First, _Last, _Dest));
		}

	_Elem  narrow(_Elem _Ch, char _Dflt = '\0') const
		{	
		return (do_narrow(_Ch, _Dflt));
		}

	const _Elem * narrow(const _Elem *_First, const _Elem *_Last,
		char _Dflt, char *_Dest) const
		{	
		return (do_narrow(_First, _Last, _Dflt, _Dest));
		}

	 static locale::id id;

	explicit  ctype(const mask *_Table = 0,
		bool _Deletetable = false,
		size_t _Refs = 0)
		: ctype_base(_Refs)
		{	
		{ _Locinfo _Lobj;
			_Init(_Lobj);
		}
		if (_Table != 0)
			{	
			_Tidy();
			_Ctype._Table = _Table;
			_Ctype._Delfl = _Deletetable ? -1 : 0;
			}
		}

	 ctype(const _Locinfo& _Lobj, size_t _Refs = 0)
		: ctype_base(_Refs)
		{	
		_Init(_Lobj);
		}

	static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0,
		const locale *_Ploc = 0)
		{	
		if (_Ppf != 0 && *_Ppf == 0)
			*_Ppf = new ctype<_Elem>(
				_Locinfo(_Ploc->c_str()));
		return (2);
		}

	const mask * table() const throw ()
		{	
		return (_Ctype._Table);
		}

	static const mask *__cdecl classic_table() throw ()
		{	
		const _Myt& _Ctype_fac = use_facet< _Myt >(locale::classic());
		return (_Ctype_fac.table());
		}

	 static const size_t table_size =
		1 << 8;	

protected:
	virtual  ~ctype()
		{	
		_Tidy();
		}

	void  _Init(const _Locinfo& _Lobj)
		{	
		_Ctype = _Lobj._Getctype();
		}

	void  _Tidy()
		{	
		if (0 < _Ctype._Delfl)
			free((void *)_Ctype._Table);
		else if (_Ctype._Delfl < 0)
			delete[] (void *)_Ctype._Table;
		}

	virtual _Elem  do_tolower(_Elem _Ch) const
		{	
		return ((_Elem)_Tolower((unsigned char)_Ch, &_Ctype));
		}

	virtual const _Elem * do_tolower(_Elem *_First,
		const _Elem *_Last) const
		{	
		;
		for (; _First != _Last; ++_First)
			*_First = (_Elem)_Tolower((unsigned char)*_First, &_Ctype);
		return ((const _Elem *)_First);
		}

	virtual _Elem  do_toupper(_Elem _Ch) const
		{	
		return ((_Elem)_Toupper((unsigned char)_Ch, &_Ctype));
		}

	virtual const _Elem * do_toupper(_Elem *_First,
		const _Elem *_Last) const
		{	
		;
		for (; _First != _Last; ++_First)
			*_First = (_Elem)_Toupper((unsigned char)*_First, &_Ctype);
		return ((const _Elem *)_First);
		}

	virtual _Elem  do_widen(char _Byte) const
		{	
		return (_Byte);
		}

	virtual const _Elem * do_widen(const char *_First,
		const char *_Last, _Elem *_Dest) const
		{	
		;
		;
		:: memcpy(_Dest, _First, _Last - _First);
		return (_Last);
		}

	virtual _Elem  do_narrow(_Elem _Ch, char) const
		{	
		return (_Ch);
		}

	virtual const _Elem * do_narrow(const _Elem *_First,
		const _Elem *_Last, char, char *_Dest) const
		{	
		;
		;
		:: memcpy(_Dest, _First, _Last - _First);
		return (_Last);
		}

private:
	_Locinfo::_Ctypevec _Ctype;	
	};

		
template<>
	class __declspec(dllimport) ctype<wchar_t>
	: public ctype_base
	{	
	typedef ctype<wchar_t> _Myt;

public:
	typedef wchar_t _Elem;
	typedef _Elem char_type;

	bool  is(mask _Maskval, _Elem _Ch) const
		{	
		return (do_is(_Maskval, _Ch));
		}

	const _Elem * is(const _Elem *_First, const _Elem *_Last,
		mask *_Dest) const
		{	
		return (do_is(_First, _Last, _Dest));
		}

	const _Elem * scan_is(mask _Maskval, const _Elem *_First,
		const _Elem *_Last) const
		{	
		return (do_scan_is(_Maskval, _First, _Last));
		}

	const _Elem * scan_not(mask _Maskval, const _Elem *_First,
		const _Elem *_Last) const
		{	
		return (do_scan_not(_Maskval, _First, _Last));
		}

	_Elem  tolower(_Elem _Ch) const
		{	
		return (do_tolower(_Ch));
		}

	const _Elem * tolower(_Elem *_First, const _Elem *_Last) const
		{	
		return (do_tolower(_First, _Last));
		}

	_Elem  toupper(_Elem _Ch) const
		{	
		return (do_toupper(_Ch));
		}

	const _Elem * toupper(_Elem *_First, const _Elem *_Last) const
		{	
		return (do_toupper(_First, _Last));
		}

	_Elem  widen(char _Byte) const
		{	
		return (do_widen(_Byte));
		}

	const char * widen(const char *_First, const char *_Last,
		_Elem *_Dest) const
		{	
		return (do_widen(_First, _Last, _Dest));
		}

	char  narrow(_Elem _Ch, char _Dflt = '\0') const
		{	
		return (do_narrow(_Ch, _Dflt));
		}

	const _Elem * narrow(const _Elem *_First, const _Elem *_Last,
		char _Dflt, char *_Dest) const
		{	
		return (do_narrow(_First, _Last, _Dflt, _Dest));
		}

	 static locale::id id;

	explicit  ctype(size_t _Refs = 0)
		: ctype_base(_Refs)
		{	
		{ _Locinfo _Lobj;
			_Init(_Lobj);
		}
		}

	 ctype(const _Locinfo& _Lobj, size_t _Refs = 0)
		: ctype_base(_Refs)
		{	
		_Init(_Lobj);
		}

	static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0,
		const locale *_Ploc = 0)
		{	
		if (_Ppf != 0 && *_Ppf == 0)
			*_Ppf = new ctype<_Elem>(
				_Locinfo(_Ploc->c_str()));
		return (2);
		}

protected:
	virtual  ~ctype()
		{	
		if (_Ctype._Delfl)
			free((void *)_Ctype._Table);
		}

	void  _Init(const _Locinfo& _Lobj)
		{	
		_Ctype = _Lobj._Getctype();
		_Cvt = _Lobj._Getcvt();
		}

	virtual bool  do_is(mask _Maskval, _Elem _Ch) const
		{	
		return ((:: _Getwctype(_Ch, &_Ctype) & _Maskval) != 0);
		}

	virtual const _Elem * do_is(const _Elem *_First,
		const _Elem *_Last, mask *_Dest) const
		{	
		;
		;
		return (:: _Getwctypes(_First, _Last, _Dest, &_Ctype));
		}

	virtual const _Elem * do_scan_is(mask _Maskval,
		const _Elem *_First, const _Elem *_Last) const
		{	
		;
		for (; _First != _Last && !is(_Maskval, *_First); ++_First)
			;
		return (_First);
		}

	virtual const _Elem * do_scan_not(mask _Maskval,
		const _Elem *_First, const _Elem *_Last) const
		{	
		;
		for (; _First != _Last && is(_Maskval, *_First); ++_First)
			;
		return (_First);
		}

	virtual _Elem  do_tolower(_Elem _Ch) const
		{	
		return (_Towlower(_Ch, &_Ctype));
		}

	virtual const _Elem * do_tolower(_Elem *_First,
		const _Elem *_Last) const
		{	
		;
		for (; _First != _Last; ++_First)
			*_First = _Towlower(*_First, &_Ctype);
		return ((const _Elem *)_First);
		}

	virtual _Elem  do_toupper(_Elem _Ch) const
		{	
		return (_Towupper(_Ch, &_Ctype));
		}

	virtual const _Elem * do_toupper(_Elem *_First,
		const _Elem *_Last) const
		{	
		;
		for (; _First != _Last; ++_First)
			*_First = _Towupper(*_First, &_Ctype);
		return ((const _Elem *)_First);
		}

	_Elem  _Dowiden(char _Byte) const
		{	
		mbstate_t _Mbst = {0};
		wchar_t _Wc;
		return (_Mbrtowc(&_Wc, &_Byte, 1, &_Mbst, &_Cvt) < 0
			? (wchar_t)(wint_t)(0xFFFF) : _Wc);
		}

	virtual _Elem  do_widen(char _Byte) const
		{	
		return (_Dowiden(_Byte));
		}

	virtual const char * do_widen(const char *_First,
		const char *_Last, _Elem *_Dest) const
		{	
		;
		;
		for (; _First != _Last; ++_First, ++_Dest)
			*_Dest = _Dowiden(*_First);
		return (_First);
		}

	char  _Donarrow(_Elem _Ch, char _Dflt) const
		{	
		char _Buf[5];
		mbstate_t _Mbst = {0};
		return (_Wcrtomb(_Buf, _Ch, &_Mbst, &_Cvt) != 1
			? _Dflt : _Buf[0]);
		}

	virtual char  do_narrow(_Elem _Ch, char _Dflt) const
		{	
		return (_Donarrow(_Ch, _Dflt));
		}

	virtual const _Elem * do_narrow(const _Elem *_First,
		const _Elem *_Last, char _Dflt, char *_Dest) const
		{	
		;
		;
		for (; _First != _Last; ++_First, ++_Dest)
			*_Dest = _Donarrow(*_First, _Dflt);
		return (_First);
		}

private:
	_Locinfo::_Ctypevec _Ctype;	
	_Locinfo::_Cvtvec _Cvt;		
	};

 
		
template<>
	class __declspec(dllimport) ctype<unsigned short>
	: public ctype_base
	{	
	typedef ctype<unsigned short> _Myt;

public:
	typedef unsigned short _Elem;
	typedef _Elem char_type;

	bool  is(mask _Maskval, _Elem _Ch) const
		{	
		return (do_is(_Maskval, _Ch));
		}

	const _Elem * is(const _Elem *_First, const _Elem *_Last,
		mask *_Dest) const
		{	
		return (do_is(_First, _Last, _Dest));
		}

	const _Elem * scan_is(mask _Maskval, const _Elem *_First,
		const _Elem *_Last) const
		{	
		return (do_scan_is(_Maskval, _First, _Last));
		}

	const _Elem * scan_not(mask _Maskval, const _Elem *_First,
		const _Elem *_Last) const
		{	
		return (do_scan_not(_Maskval, _First, _Last));
		}

	_Elem  tolower(_Elem _Ch) const
		{	
		return (do_tolower(_Ch));
		}

	const _Elem * tolower(_Elem *_First, const _Elem *_Last) const
		{	
		return (do_tolower(_First, _Last));
		}

	_Elem  toupper(_Elem _Ch) const
		{	
		return (do_toupper(_Ch));
		}

	const _Elem * toupper(_Elem *_First, const _Elem *_Last) const
		{	
		return (do_toupper(_First, _Last));
		}

	_Elem  widen(char _Byte) const
		{	
		return (do_widen(_Byte));
		}

	const char * widen(const char *_First, const char *_Last,
		_Elem *_Dest) const
		{	
		return (do_widen(_First, _Last, _Dest));
		}

	char  narrow(_Elem _Ch, char _Dflt = '\0') const
		{	
		return (do_narrow(_Ch, _Dflt));
		}

	const _Elem * narrow(const _Elem *_First, const _Elem *_Last,
		char _Dflt, char *_Dest) const
		{	
		return (do_narrow(_First, _Last, _Dflt, _Dest));
		}

	 static locale::id id;

	explicit  ctype(size_t _Refs = 0)
		: ctype_base(_Refs)
		{	
		{ _Locinfo _Lobj;
			_Init(_Lobj);
		}
		}

	 ctype(const _Locinfo& _Lobj, size_t _Refs = 0)
		: ctype_base(_Refs)
		{	
		_Init(_Lobj);
		}

	static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0,
		const locale *_Ploc = 0)
		{	
		if (_Ppf != 0 && *_Ppf == 0)
			*_Ppf = new ctype<_Elem>(
				_Locinfo(_Ploc->c_str()));
		return (2);
		}

protected:
	virtual  ~ctype()
		{	
		if (_Ctype._Delfl)
			free((void *)_Ctype._Table);
		}

	void  _Init(const _Locinfo& _Lobj)
		{	
		_Ctype = _Lobj._Getctype();
		_Cvt = _Lobj._Getcvt();
		}

	virtual bool  do_is(mask _Maskval, _Elem _Ch) const
		{	
		return ((:: _Getwctype(_Ch, &_Ctype) & _Maskval) != 0);
		}

	virtual const _Elem * do_is(const _Elem *_First,
		const _Elem *_Last, mask *_Dest) const
		{	
		;
		;
		return ((const _Elem *):: _Getwctypes((const wchar_t *)_First,
			(const wchar_t *)_Last, _Dest, &_Ctype));
		}

	virtual const _Elem * do_scan_is(mask _Maskval,
		const _Elem *_First, const _Elem *_Last) const
		{	
		;
		for (; _First != _Last && !is(_Maskval, *_First); ++_First)
			;
		return (_First);
		}

	virtual const _Elem * do_scan_not(mask _Maskval,
		const _Elem *_First, const _Elem *_Last) const
		{	
		;
		for (; _First != _Last && is(_Maskval, *_First); ++_First)
			;
		return (_First);
		}

	virtual _Elem  do_tolower(_Elem _Ch) const
		{	
		return (_Towlower(_Ch, &_Ctype));
		}

	virtual const _Elem * do_tolower(_Elem *_First,
		const _Elem *_Last) const
		{	
		;
		for (; _First != _Last; ++_First)
			*_First = _Towlower(*_First, &_Ctype);
		return ((const _Elem *)_First);
		}

	virtual _Elem  do_toupper(_Elem _Ch) const
		{	
		return (_Towupper(_Ch, &_Ctype));
		}

	virtual const _Elem * do_toupper(_Elem *_First,
		const _Elem *_Last) const
		{	
		;
		for (; _First != _Last; ++_First)
			*_First = _Towupper(*_First, &_Ctype);
		return ((const _Elem *)_First);
		}

	_Elem  _Dowiden(char _Byte) const
		{	
		mbstate_t _Mbst = {0};
		unsigned short _Wc;
		return (_Mbrtowc((wchar_t *)&_Wc, &_Byte, 1, &_Mbst, &_Cvt) < 0
			? (unsigned short)(wint_t)(0xFFFF) : _Wc);
		}

	virtual _Elem  do_widen(char _Byte) const
		{	
		return (_Dowiden(_Byte));
		}

	virtual const char * do_widen(const char *_First,
		const char *_Last, _Elem *_Dest) const
		{	
		;
		;
		for (; _First != _Last; ++_First, ++_Dest)
			*_Dest = _Dowiden(*_First);
		return (_First);
		}

	char  _Donarrow(_Elem _Ch, char _Dflt) const
		{	
		char _Buf[5];
		mbstate_t _Mbst = {0};
		return (_Wcrtomb(_Buf, _Ch, &_Mbst, &_Cvt) != 1
			? _Dflt : _Buf[0]);
		}

	virtual char  do_narrow(_Elem _Ch, char _Dflt) const
		{	
		return (_Donarrow(_Ch, _Dflt));
		}

	virtual const _Elem * do_narrow(const _Elem *_First,
		const _Elem *_Last, char _Dflt, char *_Dest) const
		{	
		;
		;
		for (; _First != _Last; ++_First, ++_Dest)
			*_Dest = _Donarrow(*_First, _Dflt);
		return (_First);
		}

private:
	_Locinfo::_Ctypevec _Ctype;	
	_Locinfo::_Cvtvec _Cvt;		
	};
 #line 2921 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xlocale"

		
template<class _Elem>
	class ctype_byname
	: public ctype<_Elem>
	{	
public:
	explicit  ctype_byname(const char *_Locname, size_t _Refs = 0)
		: ctype<_Elem>(_Locinfo(_Locname), _Refs)
		{	
		}

 
	explicit  ctype_byname(const string& _Str, size_t _Refs = 0)
		: ctype<_Elem>(_Locinfo(_Str.c_str()), _Refs)
		{	
		}
 #line 2939 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xlocale"

protected:
	virtual  ~ctype_byname()
		{	
		}
	};

		
template<>
	class ctype_byname<char>
	: public ctype<char>
	{	
public:
	explicit  ctype_byname(const char *_Locname, size_t _Refs = 0)
		: ctype<char>(_Locinfo(_Locname), _Refs)
		{	
		}

 
	explicit  ctype_byname(const string& _Str, size_t _Refs = 0)
		: ctype<char>(_Locinfo(_Str.c_str()), _Refs)
		{	
		}
 #line 2963 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xlocale"

protected:
	virtual  ~ctype_byname()
		{	
		}
	};

 

template class __declspec(dllimport) codecvt<char, char, _Mbstatet>;

 #line 2975 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xlocale"
}

 

 #pragma warning(pop)
 #pragma pack(pop)

#line 2983 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xlocale"
#line 2984 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xlocale"






#line 7 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xiosbase"

 
 #line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\system_error"

#pragma once



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\cerrno"

#pragma once











 #line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\errno.h"















#pragma once




#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\crtdefs.h"














 








































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 22 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\errno.h"


extern "C" {
#line 26 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\errno.h"



























































#line 86 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\errno.h"
#line 87 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\errno.h"
















































}
#line 137 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\errno.h"

#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\errno.h"
#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\cerrno"
#line 16 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\cerrno"





#line 22 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\cerrno"
#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\cerrno"





#line 7 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\system_error"



 #pragma pack(push,8)
 #pragma warning(push,3)

 

 

#line 18 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\system_error"

namespace std {
		
	namespace errc {
enum errc {	
	address_family_not_supported = 102,
	address_in_use = 100,
	address_not_available = 101,
	already_connected = 113,
	argument_list_too_long = 7,
	argument_out_of_domain = 33,
	bad_address = 14,
	bad_file_descriptor = 9,
	bad_message = 104,
	broken_pipe = 32,
	connection_aborted = 106,
	connection_already_in_progress = 103,
	connection_refused = 107,
	connection_reset = 108,
	cross_device_link = 18,
	destination_address_required = 109,
	device_or_resource_busy = 16,
	directory_not_empty = 41,
	executable_format_error = 8,
	file_exists = 17,
	file_too_large = 27,
	filename_too_long = 38,
	function_not_supported = 40,
	host_unreachable = 110,
	identifier_removed = 111,
	illegal_byte_sequence = 42,
	inappropriate_io_control_operation = 25,
	interrupted = 4,
	invalid_argument = 22,
	invalid_seek = 29,
	io_error = 5,
	is_a_directory = 21,
	message_size = 115,
	network_down = 116,
	network_reset = 117,
	network_unreachable = 118,
	no_buffer_space = 119,
	no_child_process = 10,
	no_link = 121,
	no_lock_available = 39,
	no_message_available = 120,
	no_message = 122,
	no_protocol_option = 123,
	no_space_on_device = 28,
	no_stream_resources = 124,
	no_such_device_or_address = 6,
	no_such_device = 19,
	no_such_file_or_directory = 2,
	no_such_process = 3,
	not_a_directory = 20,
	not_a_socket = 128,
	not_a_stream = 125,
	not_connected = 126,
	not_enough_memory = 12,
	not_supported = 129,
	operation_canceled = 105,
	operation_in_progress = 112,
	operation_not_permitted = 1,
	operation_not_supported = 130,
	operation_would_block = 140,
	owner_dead = 133,
	permission_denied = 13,
	protocol_error = 134,
	protocol_not_supported = 135,
	read_only_file_system = 30,
	resource_deadlock_would_occur = 36,
	resource_unavailable_try_again = 11,
	result_out_of_range = 34,
	state_not_recoverable = 127,
	stream_timeout = 137,
	text_file_busy = 139,
	timed_out = 138,
	too_many_files_open_in_system = 23,
	too_many_files_open = 24,
	too_many_links = 31,
	too_many_synbolic_link_levels = 114,
	value_too_large = 132,
	wrong_protocol_type = 136
	};
	}	

typedef errc::errc generic_errno;

		
template<class _Enum>
	struct is_error_code_enum
		: public tr1::false_type
	{	
	};

		
template<class _Enum>
	struct is_error_condition_enum
		: public tr1::false_type
	{	
	};

template<>
	struct is_error_condition_enum<generic_errno>
		: public tr1::true_type
	{	
	};

		
	namespace io_errc {
enum io_errc {	
	stream = 1
	};
	}	

typedef io_errc::io_errc _Io_errc;

		
class error_code;
class error_condition;
class error_category;

__declspec(dllimport) const error_category& __cdecl generic_category();
__declspec(dllimport) const error_category& __cdecl iostream_category();
__declspec(dllimport) const error_category& __cdecl system_category();

class error_category
	{	
public:
	typedef int value_type;

	error_category()
		{	
		}

	virtual ~error_category()
		{	
		}

	virtual const char *name() const = 0;

	virtual string message(value_type _Errval) const = 0;

	virtual error_condition default_error_condition(value_type _Errval) const;

	virtual bool equivalent(value_type _Errval,
		const error_condition& _Cond) const;

	virtual bool equivalent(const error_code& _Code,
		value_type _Errval) const;

	bool operator==(const error_category& _Right) const
		{	
		return (this == &_Right);
		}

	bool operator!=(const error_category& _Right) const
		{	
		return (!(*this == _Right));
		}

	bool operator<(const error_category& _Right) const
		{	
		return (this < &_Right);
		}

private:
	error_category(const error_category&);	

	error_category& operator=(const error_category&);	
	};

		
class error_code
	{	
public:
	typedef int value_type;

	error_code()
		: _Myval(0),
			_Mycat(&system_category())
		{	
		}

	error_code(value_type _Val, const error_category& _Cat)
		: _Myval(_Val), _Mycat(&_Cat)
		{	
		}

	template<class _Enum>
		error_code(_Enum _Errcode,
			typename tr1::enable_if<is_error_code_enum<_Enum>::value,
				error_code>::type * = 0)
		: _Myval(0), _Mycat(0)
		{	
		*this = make_error_code(_Errcode);	
		}

	void assign(value_type _Val, const error_category& _Cat)
		{	
		_Myval = _Val;
		_Mycat = &_Cat;
		}

	template<class _Enum>
		typename tr1::enable_if<is_error_code_enum<_Enum>::value,
			error_code>::type& operator=(_Enum _Errcode)
		{	
		*this = make_error_code(_Errcode);	
		return (*this);
		}

	void clear()
		{	
		_Myval = 0;
		_Mycat = &system_category();
		}

	value_type value() const
		{	
		return (_Myval);
		}

	const error_category& category() const
		{	
		return (*_Mycat);
		}

	error_condition default_error_condition() const;

	string message() const
		{	
		return (category().message(value()));
		}

	operator ::std:: _Bool_type() const
		{	
		return (value() != 0 ? (&::std:: _Bool_struct::_Member) : 0);
		}

	bool operator !() const
		{	
		return (value() == 0);
		}

	bool operator==(const error_code& _Right) const
		{	
		return (category() == _Right.category()
			&& value() == _Right.value());
		}

	bool operator!=(const error_code& _Right) const
		{	
		return (!(*this == _Right));
		}

	bool operator<(const error_code& _Right) const
		{	
		return (category() < _Right.category()
			|| category() == _Right.category()
				&& value() < _Right.value());
		}

private:
	value_type _Myval;	
	const error_category *_Mycat;	
	};

		
class error_condition
	{	
public:
	typedef int value_type;

	error_condition()
		: _Myval(0),
			_Mycat(&generic_category())
		{	
		}

	error_condition(value_type _Val, const error_category& _Cat)
		: _Myval(_Val), _Mycat(&_Cat)
		{	
		}

	template<class _Enum>
		error_condition(_Enum _Errcode,
			typename tr1::enable_if<is_error_condition_enum<_Enum>::value,
				error_condition>::type * = 0)
		: _Myval(0), _Mycat(0)
		{	
		*this = make_error_condition(_Errcode);	
		}

	void assign(value_type _Val, const error_category& _Cat)
		{	
		_Myval = _Val;
		_Mycat = &_Cat;
		}

	template<class _Enum>
		typename tr1::enable_if<is_error_condition_enum<_Enum>::value,
			error_condition>::type& operator=(_Enum _Errcode)
		{	
		*this = make_error_condition(_Errcode);	
		return (*this);
		}

	void clear()
		{	
		_Myval = 0;
		_Mycat = &generic_category();
		}

	value_type value() const
		{	
		return (_Myval);
		}

	const error_category& category() const
		{	
		return (*_Mycat);
		}

	string message() const
		{	
		return (category().message(value()));
		}

	operator ::std:: _Bool_type() const
		{	
		return (value() != 0 ? (&::std:: _Bool_struct::_Member) : 0);
		}

	bool operator !() const
		{	
		return (value() == 0);
		}

	bool operator==(const error_condition& _Right) const
		{	
		return (category() == _Right.category()
			&& value() == _Right.value());
		}

	bool operator!=(const error_condition& _Right) const
		{	
		return (!(*this == _Right));
		}

	bool operator<(const error_condition& _Right) const
		{	
		return (category() < _Right.category()
			|| category() == _Right.category()
				&& value() < _Right.value());
		}

private:
	value_type _Myval;	
	const error_category *_Mycat;	
	};

		
inline error_condition
	error_category::default_error_condition(value_type _Errval) const
	{	
	return (error_condition(_Errval, *this));
	}

inline bool
	error_category::equivalent(value_type _Errval,
		const error_condition& _Cond) const
	{	
	return (default_error_condition(_Errval) == _Cond);
	}

inline bool
	error_category::equivalent(const error_code& _Code,
		value_type _Errval) const
	{	
	return (*this == _Code.category() && _Code.value() == _Errval);
	}

		
inline error_condition error_code::default_error_condition() const
	{	
	return (category().default_error_condition(value()));
	}

		
inline bool operator==(
	const error_code& _Left,
	const error_condition& _Right)
	{	
	return (_Left.category().equivalent(_Left.value(), _Right)
		|| _Right.category().equivalent(_Left, _Right.value()));
	}

inline bool operator==(
	const error_condition& _Left,
	const error_code& _Right)
	{	
	return (_Right.category().equivalent(_Right.value(), _Left)
		|| _Left.category().equivalent(_Right, _Left.value()));
	}

		
inline bool operator!=(
	const error_code& _Left,
	const error_condition& _Right)
	{	
	return (!(_Left == _Right));
	}

inline bool operator!=(
	const error_condition& _Left,
	const error_code& _Right)
	{	
	return (!(_Left == _Right));
	}

		
inline error_code make_error_code(generic_errno _Errno)
	{	
	return (error_code(_Errno, generic_category()));
	}

inline error_code make_error_code(_Io_errc _Errno)
	{	
	return (error_code(_Errno, iostream_category()));
	}

		
inline error_condition make_error_condition(generic_errno _Errno)
	{	
	return (error_condition(_Errno, generic_category()));
	}

inline error_condition make_error_condition(_Io_errc _Errno)
	{	
	return (error_condition(_Errno, iostream_category()));
	}

		
template<class _Kty>
	class hash;

template<>
	class hash<::std:: error_code>
		: public unary_function<error_code, size_t>
	{	
public:
	typedef ::std:: error_code _Kty;

	size_t operator()(const _Kty& _Keyval) const
		{	
		ldiv_t _Qrem = :: ldiv((long)(size_t)_Keyval.value(), 127773);

		_Qrem.rem = 16807 * _Qrem.rem - 2836 * _Qrem.quot;
		if (_Qrem.rem < 0)
			_Qrem.rem += 2147483647;
		return ((size_t)_Qrem.rem);
		}
	};

template<>
	class hash<::std:: error_condition>
		: public unary_function<error_condition, size_t>
	{	
public:
	typedef ::std:: error_condition _Kty;

	size_t operator()(const _Kty& _Keyval) const
		{	
		ldiv_t _Qrem = :: ldiv((long)(size_t)_Keyval.value(), 127773);

		_Qrem.rem = 16807 * _Qrem.rem - 2836 * _Qrem.quot;
		if (_Qrem.rem < 0)
			_Qrem.rem += 2147483647;
		return ((size_t)_Qrem.rem);
		}
	};

		
class system_error
	: public runtime_error
	{	
public:
	explicit system_error(error_code _Errcode,
		const string& _Message = "")
		: runtime_error(_Message), _Mycode(_Errcode)
		{	
		_Makestr();
		}

	system_error(error_code _Errcode,
		const char *_Message)
		: runtime_error(_Message), _Mycode(_Errcode)
		{	
		_Makestr();
		}

	system_error(error_code::value_type _Errval,
		const error_category& _Errcat,
		const string& _Message = "")
		: runtime_error(_Message), _Mycode(_Errval, _Errcat)
		{	
		_Makestr();
		}

	system_error(error_code::value_type _Errval,
		const error_category& _Errcat,
		const char *_Message)
		: runtime_error(_Message), _Mycode(_Errval, _Errcat)
		{	
		_Makestr();
		}










	const error_code& code() const throw ()
		{	
		return (_Mycode);
		}

 

 





#line 559 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\system_error"

private:
	void _Makestr()
		{	




		}

	error_code _Mycode;	

	};
}
 #pragma warning(pop)
 #pragma pack(pop)

#line 577 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\system_error"
#line 578 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\system_error"





#line 10 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xiosbase"
 #line 11 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xiosbase"

 #line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\share.h"












#pragma once






#line 21 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\share.h"














#line 36 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\share.h"

#line 38 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\share.h"
#line 13 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xiosbase"

 #pragma pack(push,8)
 #pragma warning(push,3)

 #pragma warning(disable: 4412)

 

 
 

namespace std {
 
 
 
 
 
 
 
 
 
 
 
 
 
 

 

 
 

 
 
 

		
template<class _Dummy>
	class _Iosb
	{	
public:
	enum _Dummy_enum {_Dummy_enum_val = 1};	
	enum _Fmtflags
		{	
		_Fmtmask = 0xffff, _Fmtzero = 0};

	static const _Fmtflags skipws = (_Fmtflags)0x0001;
	static const _Fmtflags unitbuf = (_Fmtflags)0x0002;
	static const _Fmtflags uppercase = (_Fmtflags)0x0004;
	static const _Fmtflags showbase = (_Fmtflags)0x0008;
	static const _Fmtflags showpoint = (_Fmtflags)0x0010;
	static const _Fmtflags showpos = (_Fmtflags)0x0020;
	static const _Fmtflags left = (_Fmtflags)0x0040;
	static const _Fmtflags right = (_Fmtflags)0x0080;
	static const _Fmtflags internal = (_Fmtflags)0x0100;
	static const _Fmtflags dec = (_Fmtflags)0x0200;
	static const _Fmtflags oct = (_Fmtflags)0x0400;
	static const _Fmtflags hex = (_Fmtflags)0x0800;
	static const _Fmtflags scientific = (_Fmtflags)0x1000;
	static const _Fmtflags fixed = (_Fmtflags)0x2000;

	static const _Fmtflags hexfloat =
		(_Fmtflags)0x3000;	

	static const _Fmtflags boolalpha = (_Fmtflags)0x4000;
	static const _Fmtflags _Stdio = (_Fmtflags)0x8000;
	static const _Fmtflags adjustfield = (_Fmtflags)(0x0040
		| 0x0080 | 0x0100);
	static const _Fmtflags basefield = (_Fmtflags)(0x0200
		| 0x0400 | 0x0800);
	static const _Fmtflags floatfield = (_Fmtflags)(0x1000
		| 0x2000);

	enum _Iostate
		{	
		_Statmask = 0x17};

	static const _Iostate goodbit = (_Iostate)0x0;
	static const _Iostate eofbit = (_Iostate)0x1;
	static const _Iostate failbit = (_Iostate)0x2;
	static const _Iostate badbit = (_Iostate)0x4;
	static const _Iostate _Hardfail = (_Iostate)0x10;

	enum _Openmode
		{	
		_Openmask = 0xff};

	static const _Openmode in = (_Openmode)0x01;
	static const _Openmode out = (_Openmode)0x02;
	static const _Openmode ate = (_Openmode)0x04;
	static const _Openmode app = (_Openmode)0x08;
	static const _Openmode trunc = (_Openmode)0x10;
	static const _Openmode _Nocreate = (_Openmode)0x40;
	static const _Openmode _Noreplace = (_Openmode)0x80;
	static const _Openmode binary = (_Openmode)0x20;

	enum _Seekdir
		{	
		_Seekmask = 0x3};

	static const _Seekdir beg = (_Seekdir)0;
	static const _Seekdir cur = (_Seekdir)1;
	static const _Seekdir end = (_Seekdir)2;

	enum
		{	
		_Openprot = 0x40};
	};

template<class _Dummy>
	const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::skipws;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::unitbuf;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::uppercase;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::showbase;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::showpoint;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::showpos;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::left;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::right;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::internal;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::dec;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::oct;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::hex;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::scientific;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::fixed;

template<class _Dummy>
	const typename _Iosb<_Dummy>::_Fmtflags
		_Iosb<_Dummy>::hexfloat;	

template<class _Dummy>
	const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::boolalpha;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::_Stdio;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::adjustfield;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::basefield;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Fmtflags _Iosb<_Dummy>::floatfield;

template<class _Dummy>
	const typename _Iosb<_Dummy>::_Iostate _Iosb<_Dummy>::goodbit;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Iostate _Iosb<_Dummy>::eofbit;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Iostate _Iosb<_Dummy>::failbit;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Iostate _Iosb<_Dummy>::badbit;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Iostate _Iosb<_Dummy>::_Hardfail;

template<class _Dummy>
	const typename _Iosb<_Dummy>::_Openmode _Iosb<_Dummy>::in;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Openmode _Iosb<_Dummy>::out;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Openmode _Iosb<_Dummy>::ate;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Openmode _Iosb<_Dummy>::app;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Openmode _Iosb<_Dummy>::trunc;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Openmode _Iosb<_Dummy>::_Nocreate;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Openmode _Iosb<_Dummy>::_Noreplace;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Openmode _Iosb<_Dummy>::binary;

template<class _Dummy>
	const typename _Iosb<_Dummy>::_Seekdir _Iosb<_Dummy>::beg;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Seekdir _Iosb<_Dummy>::cur;
template<class _Dummy>
	const typename _Iosb<_Dummy>::_Seekdir _Iosb<_Dummy>::end;

		
class __declspec(dllimport) ios_base
	: public _Iosb<int>
	{	
public:
	typedef int fmtflags;
	typedef int iostate;
	typedef int openmode;
	typedef int seekdir;

	typedef ::std:: streamoff streamoff;
	typedef ::std:: streampos streampos;

	enum event
		{	
		erase_event, imbue_event, copyfmt_event};

	typedef void (__cdecl *event_callback)(event, ios_base&, int);
	typedef unsigned int io_state, open_mode, seek_dir;

			
	class failure

 
		: public system_error
		{	
	public:
		explicit failure(const string &_Message,
			const error_code& _Errcode = make_error_code(io_errc::stream))
			: system_error(_Errcode, _Message)
			{	
			}

		explicit failure(const char *_Message,
			const error_code& _Errcode = make_error_code(io_errc::stream))
			: system_error(_Errcode, _Message)
			{	
			}

 












#line 254 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xiosbase"

 

 





#line 264 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xiosbase"
		};

			
	class __declspec(dllimport) Init
		{	
	public:
		 Init()
			{	
			_Init_ctor(this);
			}

		 ~Init()
			{	
			_Init_dtor(this);
			}

	private:
		static  void __cdecl _Init_ctor(Init *);
		static  void __cdecl _Init_dtor(Init *);

		 static int _Init_cnt;	

		static  int& __cdecl _Init_cnt_func();
		};

	ios_base&  operator=(const ios_base& _Right)
		{	
		if (this != &_Right)
			{	
			_Mystate = _Right._Mystate;
			copyfmt(_Right);
			}
		return (*this);
		}

	 operator void *() const
		{	
		return (fail() ? 0 : (void *)this);
		}

	bool  operator!() const
		{	
		return (fail());
		}

	void  clear(iostate _State, bool _Reraise)
		{	
		_Mystate = (iostate)(_State & _Statmask);
		if ((_Mystate & _Except) == 0)
			;
		else if (_Reraise)
			throw;
		else if (_Mystate & _Except & badbit)
			throw failure("ios_base::badbit set");
		else if (_Mystate & _Except & failbit)
			throw failure("ios_base::failbit set");
		else
			throw failure("ios_base::eofbit set");
		}

	void  clear(iostate _State = goodbit)
		{	
		clear(_State, false);
		}

	void  clear(io_state _State)
		{	
		clear((iostate)_State);
		}

	iostate  rdstate() const
		{	
		return (_Mystate);
		}

	void  setstate(iostate _State, bool _Exreraise)
		{	
		if (_State != goodbit)
			clear((iostate)((int)rdstate() | (int)_State), _Exreraise);
		}

	void  setstate(iostate _State)
		{	
		if (_State != goodbit)
			clear((iostate)((int)rdstate() | (int)_State), false);
		}

	void  setstate(io_state _State)
		{	
		setstate((iostate)_State);
		}

	bool  good() const
		{	
		return (rdstate() == goodbit);
		}

	bool  eof() const
		{	
		return ((int)rdstate() & (int)eofbit);
		}

	bool  fail() const
		{	
		return (((int)rdstate()
			& ((int)badbit | (int)failbit)) != 0);
		}

	bool  bad() const
		{	
		return (((int)rdstate() & (int)badbit) != 0);
		}

	iostate  exceptions() const
		{	
		return (_Except);
		}

	void  exceptions(iostate _Newexcept)
		{	
		_Except = (iostate)((int)_Newexcept & (int)_Statmask);
		clear(_Mystate);
		}

	void  exceptions(io_state _State)
		{	
		exceptions((iostate)_State);
		}

	fmtflags  flags() const
		{	
		return (_Fmtfl);
		}

	fmtflags  flags(fmtflags _Newfmtflags)
		{	
		fmtflags _Oldfmtflags = _Fmtfl;
		_Fmtfl = (fmtflags)((int)_Newfmtflags & (int)_Fmtmask);
		return (_Oldfmtflags);
		}

	fmtflags  setf(fmtflags _Newfmtflags)
		{	
		ios_base::fmtflags _Oldfmtflags = _Fmtfl;
		_Fmtfl = (fmtflags)((int)_Fmtfl
			| (int)_Newfmtflags & (int)_Fmtmask);
		return (_Oldfmtflags);
		}

	fmtflags  setf(fmtflags _Newfmtflags, fmtflags _Mask)
		{	
		ios_base::fmtflags _Oldfmtflags = _Fmtfl;
		_Fmtfl = (fmtflags)(((int)_Fmtfl & (int)~_Mask)
			| ((int)_Newfmtflags & (int)_Mask & (int)_Fmtmask));
		return (_Oldfmtflags);
		}

	void  unsetf(fmtflags _Mask)
		{	
		_Fmtfl = (fmtflags)((int)_Fmtfl & (int)~_Mask);
		}

	streamsize  precision() const
		{	
		return (_Prec);
		}

	streamsize  precision(streamsize _Newprecision)
		{	
		streamsize _Oldprecision = _Prec;
		_Prec = _Newprecision;
		return (_Oldprecision);
		}

	streamsize  width() const
		{	
		return (_Wide);
		}

	streamsize  width(streamsize _Newwidth)
		{	
		streamsize _Oldwidth = _Wide;
		_Wide = _Newwidth;
		return (_Oldwidth);
		}

	locale  getloc() const
		{	
		return (*_Ploc);
		}

	locale  imbue(const locale& _Loc)
		{	
		locale _Oldlocale = *_Ploc;
		*_Ploc = _Loc;
		_Callfns(imbue_event);
		return (_Oldlocale);
		}

	static int __cdecl xalloc()
		{	
		{ ::std:: _Lockit _Lock(2);	
			return (_Index++);
		}
		}

	long&  iword(int _Idx)
		{	
		return (_Findarr(_Idx)._Lo);
		}

	void *&  pword(int _Idx)
		{	
		return (_Findarr(_Idx)._Vp);
		}

	void  register_callback(event_callback _Pfn,
		int _Idx)
		{	
		_Calls = new _Fnarray(_Idx, _Pfn, _Calls);
		}

	ios_base&  copyfmt(const ios_base& _Other)
		{	
		if (this != &_Other)
			{	
			_Tidy();
			*_Ploc = *_Other._Ploc;
			_Fmtfl = _Other._Fmtfl;
			_Prec = _Other._Prec;
			_Wide = _Other._Wide;
			_Iosarray *_Ptr = _Other._Arr;

			for (_Arr = 0; _Ptr != 0; _Ptr = _Ptr->_Next)
				if (_Ptr->_Lo != 0 || _Ptr->_Vp != 0)
					{	
					iword(_Ptr->_Index) = _Ptr->_Lo;
					pword(_Ptr->_Index) = _Ptr->_Vp;
					}

			for (_Fnarray *_Pfa = _Other._Calls; _Pfa != 0;
				_Pfa = _Pfa->_Next)
				register_callback(_Pfa->_Pfn, _Pfa->_Index);

			_Callfns(copyfmt_event);	
			exceptions(_Other._Except);	
			}
		return (*this);
		}

	static bool __cdecl sync_with_stdio(bool _Newsync = true)
		{	
		{ ::std:: _Lockit _Lock(2);	
			const bool _Oldsync = _Sync;
			_Sync = _Newsync;
			return (_Oldsync);
		}
		}

	void  swap(ios_base& _Right)
		{	
		if (this != &_Right)
			{	
			::std:: swap(_Mystate, _Right._Mystate);
			::std:: swap(_Except, _Right._Except);
			::std:: swap(_Fmtfl, _Right._Fmtfl);
			::std:: swap(_Prec, _Right._Prec);
			::std:: swap(_Wide, _Right._Wide);

			::std:: swap(_Arr, _Right._Arr);
			::std:: swap(_Calls, _Right._Calls);
			::std:: swap(_Ploc, _Right._Ploc);
			}
		}

	virtual  ~ios_base()	
		{	
		_Ios_base_dtor(this);
		}

	static  void __cdecl _Addstd(ios_base *);	

	size_t _Stdstr;	

protected:
	 ios_base()
		{	
		}

	void  _Init()
		{	
		_Ploc = 0;
		_Stdstr = 0;
		_Except = goodbit;
		_Fmtfl = (fmtflags)(skipws | dec);
		_Prec = 6;
		_Wide = 0;
		_Arr = 0;
		_Calls = 0;
		clear(goodbit);
		_Ploc = new locale;
		}

private:
			
	struct _Iosarray
		{	
	public:
		 _Iosarray(int _Idx, _Iosarray *_Link)
			: _Next(_Link), _Index(_Idx), _Lo(0), _Vp(0)
			{	
			}

		_Iosarray *_Next;	
		int _Index;	
		long _Lo;	
		void *_Vp;	
		};

			
	struct _Fnarray
		{	
		 _Fnarray(int _Idx, event_callback _Pnew, _Fnarray *_Link)
			: _Next(_Link), _Index(_Idx), _Pfn(_Pnew)
			{	
			}

		_Fnarray *_Next;	
		int _Index;	
		event_callback _Pfn;	
		};

	void  _Callfns(event _Ev)
		{	
		for (_Fnarray *_Pfa = _Calls; _Pfa != 0; _Pfa = _Pfa->_Next)
			(*_Pfa->_Pfn)(_Ev, *this, _Pfa->_Index);
		}

	_Iosarray&  _Findarr(int _Idx)
		{	
		_Iosarray *_Ptr1, *_Ptr2;

		for (_Ptr1 = _Arr, _Ptr2 = 0; _Ptr1 != 0; _Ptr1 = _Ptr1->_Next)
			if (_Ptr1->_Index == _Idx)
				return (*_Ptr1);	
			else if (_Ptr2 == 0 && _Ptr1->_Lo == 0 && _Ptr1->_Vp == 0)
				_Ptr2 = _Ptr1;	

		if (_Ptr2 != 0)
			{	
			_Ptr2->_Index = _Idx;
			return (*_Ptr2);
			}

		_Arr = new _Iosarray(_Idx, _Arr);	
		return (*_Arr);
		}

	void  _Tidy()
		{	
		_Callfns(erase_event);
		_Iosarray *_Ptr1, *_Ptr2;

		for (_Ptr1 = _Arr; _Ptr1 != 0; _Ptr1 = _Ptr2)
			{	
			_Ptr2 = _Ptr1->_Next;
			delete (_Ptr1);
			}
		_Arr = 0;

		_Fnarray *_Pfa1, *_Pfa2;
		for (_Pfa1 = _Calls; _Pfa1 != 0; _Pfa1 = _Pfa2)
			{	
			_Pfa2 = _Pfa1->_Next;
			delete (_Pfa1);
			}
		_Calls = 0;
		}

	iostate _Mystate;	
	iostate _Except;	
	fmtflags _Fmtfl;	
	streamsize _Prec;	
	streamsize _Wide;	
	_Iosarray *_Arr;	
	_Fnarray *_Calls;	
	locale *_Ploc;	

	 static int _Index;
	 static bool _Sync;

	static  void __cdecl _Ios_base_dtor(ios_base *);
	};





}

 

 #pragma warning(pop)
 #pragma pack(pop)

#line 670 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xiosbase"
#line 671 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xiosbase"





#line 7 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\streambuf"

 #pragma pack(push,8)
 #pragma warning(push,3)

 
 

namespace std {
		
template<class _Elem,
	class _Traits>
	class basic_streambuf
	{	
	typedef basic_streambuf<_Elem, _Traits> _Myt;

protected:
	 basic_streambuf()
		: _Plocale(new locale)
		{	
		_Init();
		}

	 basic_streambuf(_Uninitialized)
		: _Mylock(_Noinit)
		{	
		}

	 basic_streambuf(const _Myt& _Right)
		: _Plocale(new locale(_Right.getloc()))
		{	
		_Init();
		setp(_Right.pbase(), _Right.pptr(), _Right.epptr());
		setg(_Right.eback(), _Right.gptr(), _Right.egptr());
		}

	_Myt&  operator=(const _Myt& _Right)
		{	
		if (this != &_Right)
			{	
			setp(_Right.pbase(), _Right.pptr(), _Right.epptr());
			setg(_Right.eback(), _Right.gptr(), _Right.egptr());
			pubimbue(_Right.getloc());
			}
		return (*this);
		}

	void  swap(_Myt& _Right)
		{	
		if (this != &_Right)
			{	
			_Elem *_Tfirst = pbase();
			_Elem *_Tnext = pptr();
			_Elem *_Tend = epptr();
			setp(_Right.pbase(), _Right.pptr(), _Right.epptr());
			_Right.setp(_Tfirst, _Tnext, _Tend);

			_Tfirst = eback();
			_Tnext = gptr();
			_Tend = egptr();
			setg(_Right.eback(), _Right.gptr(), _Right.egptr());
			_Right.setg(_Tfirst, _Tnext, _Tend);

			locale _Oldlocale = pubimbue(_Right.getloc());
			_Right.pubimbue(_Oldlocale);
			}
		}

public:
	typedef _Elem char_type;
	typedef _Traits traits_type;

	virtual  ~basic_streambuf()
		{	
		delete (_Plocale);
		}

	typedef typename _Traits::int_type int_type;
	typedef typename _Traits::pos_type pos_type;
	typedef typename _Traits::off_type off_type;

	pos_type  pubseekoff(off_type _Off,
		ios_base::seekdir _Way,
		ios_base::openmode _Mode = ios_base::in | ios_base::out)
		{	
		return (seekoff(_Off, _Way, _Mode));
		}

	pos_type  pubseekoff(off_type _Off,
		ios_base::seek_dir _Way,
		ios_base::open_mode _Mode)
		{	
		return (pubseekoff(_Off, (ios_base::seekdir)_Way,
			(ios_base::openmode)_Mode));
		}

	pos_type  pubseekpos(pos_type _Pos,
		ios_base::openmode _Mode = ios_base::in | ios_base::out)
		{	
		return (seekpos(_Pos, _Mode));
		}

	pos_type  pubseekpos(pos_type _Pos,
		ios_base::open_mode _Mode)
		{	
		return (seekpos(_Pos, (ios_base::openmode)_Mode));
		}

	_Myt * pubsetbuf(_Elem *_Buffer,
		streamsize _Count)
		{	
		return (setbuf(_Buffer, _Count));
		}

	locale  pubimbue(const locale &_Newlocale)
		{	
		locale _Oldlocale = *_Plocale;
		imbue(_Newlocale);
		*_Plocale = _Newlocale;
		return (_Oldlocale);
		}

	locale  getloc() const
		{	
		return (*_Plocale);
		}

	streamsize  in_avail()
		{	
		streamsize _Res = _Gnavail();
		return (0 < _Res ? _Res : showmanyc());
		}

	int  pubsync()
		{	
		return (sync());
		}

	int_type  sbumpc()
		{	
		return (0 < _Gnavail()
			? _Traits::to_int_type(*_Gninc()) : uflow());
		}

	int_type  sgetc()
		{	
		return (0 < _Gnavail()
			? _Traits::to_int_type(*gptr()) : underflow());
		}

	streamsize  sgetn(_Elem *_Ptr,
		streamsize _Count)
		{	
		return (xsgetn(_Ptr, _Count));
		}

	int_type  snextc()
		{	
		return (1 < _Gnavail()
			? _Traits::to_int_type(*_Gnpreinc())
			: _Traits::eq_int_type(_Traits::eof(), sbumpc())
				? _Traits::eof() : sgetc());
		}

	int_type  sputbackc(_Elem _Ch)
		{	
		return (gptr() != 0 && eback() < gptr()
			&& _Traits::eq(_Ch, gptr()[-1])
			? _Traits::to_int_type(*_Gndec())
			: pbackfail(_Traits::to_int_type(_Ch)));
		}

	void  stossc()
		{	
		if (0 < _Gnavail())
			_Gninc();
		else
			uflow();
		}

	int_type  sungetc()
		{	
		return (gptr() != 0 && eback() < gptr()
			? _Traits::to_int_type(*_Gndec()) : pbackfail());
		}

	int_type  sputc(_Elem _Ch)
		{	
		return (0 < _Pnavail()
			? _Traits::to_int_type(*_Pninc() = _Ch)
			: overflow(_Traits::to_int_type(_Ch)));
		}

	streamsize  sputn(const _Elem *_Ptr,
		streamsize _Count)
		{	
		return (xsputn(_Ptr, _Count));
		}

	virtual void  _Lock()
		{	
		_Mylock._Lock();
		}

	virtual void  _Unlock()
		{	
		_Mylock._Unlock();
		}

protected:
	_Elem * eback() const
		{	
		return (*_IGfirst);
		}

	_Elem * gptr() const
		{	
		return (*_IGnext);
		}

	_Elem * pbase() const
		{	
		return (*_IPfirst);
		}

	_Elem * pptr() const
		{	
		return (*_IPnext);
		}

	_Elem * egptr() const
		{	
		return (*_IGnext + *_IGcount);
		}

	void  gbump(int _Off)
		{	
		*_IGcount -= _Off;
		*_IGnext += _Off;
		}

	void  setg(_Elem *_First, _Elem *_Next, _Elem *_Last)
		{	
		*_IGfirst = _First;
		*_IGnext = _Next;
		*_IGcount = (int)(_Last - _Next);
		}

	_Elem * epptr() const
		{	
		return (*_IPnext + *_IPcount);
		}

	_Elem * _Gndec()
		{	
		++*_IGcount;
		return (--*_IGnext);
		}

	_Elem * _Gninc()
		{	
		--*_IGcount;
		return ((*_IGnext)++);
		}

	_Elem * _Gnpreinc()
		{	
		--*_IGcount;
		return (++(*_IGnext));
		}

	streamsize  _Gnavail() const
		{	
		return (*_IGnext != 0 ? *_IGcount : 0);
		}

	void  pbump(int _Off)
		{	
		*_IPcount -= _Off;
		*_IPnext += _Off;
		}

	void  setp(_Elem *_First, _Elem *_Last)
		{	
		*_IPfirst = _First;
		*_IPnext = _First;
		*_IPcount = (int)(_Last - _First);
		}

	void  setp(_Elem *_First, _Elem *_Next, _Elem *_Last)
		{	
		*_IPfirst = _First;
		*_IPnext = _Next;
		*_IPcount = (int)(_Last - _Next);
		}

	_Elem * _Pninc()
		{	
		--*_IPcount;
		return ((*_IPnext)++);
		}

	streamsize  _Pnavail() const
		{	
		return (*_IPnext != 0 ? *_IPcount : 0);
		}

	void  _Init()
		{	
		_IGfirst = &_Gfirst;
		_IPfirst = &_Pfirst;
		_IGnext = &_Gnext;
		_IPnext = &_Pnext;
		_IGcount = &_Gcount;
		_IPcount = &_Pcount;
		setp(0, 0);
		setg(0, 0, 0);
		}

	void  _Init(_Elem **_Gf, _Elem **_Gn, int *_Gc,
		_Elem **_Pf, _Elem **_Pn, int *_Pc)
		{	
		_IGfirst = _Gf;
		_IPfirst = _Pf;
		_IGnext = _Gn;
		_IPnext = _Pn;
		_IGcount = _Gc;
		_IPcount = _Pc;
		}

	virtual int_type  overflow(int_type = _Traits::eof())
		{	
		return (_Traits::eof());
		}

	virtual int_type  pbackfail(int_type = _Traits::eof())
		{	
		return (_Traits::eof());
		}

	virtual streamsize  showmanyc()
		{	
		return (0);
		}

	virtual int_type  underflow()
		{	
		return (_Traits::eof());
		}

	virtual int_type  uflow()
		{	
		return (_Traits::eq_int_type(_Traits::eof(), underflow())
			? _Traits::eof() : _Traits::to_int_type(*_Gninc()));
		}

	virtual streamsize  xsgetn(_Elem * _Ptr,
		streamsize _Count)
		{	
		int_type _Meta;
		streamsize _Size, _Copied;

		for (_Copied = 0; 0 < _Count; )
			if (0 < (_Size = _Gnavail()))
				{	
				if (_Count < _Size)
					_Size = _Count;
				_Traits::copy(_Ptr, gptr(), (size_t)_Size);
				_Ptr += _Size;
				_Copied += _Size;
				_Count -= _Size;
				gbump((int)_Size);
				}
			else if (_Traits::eq_int_type(_Traits::eof(), _Meta = uflow()))
				break;	
			else
				{	
				*_Ptr++ = _Traits::to_char_type(_Meta);
				++_Copied;
				--_Count;
				}

		return (_Copied);
		}

	virtual streamsize  xsputn(const _Elem *_Ptr,
		streamsize _Count)
		{	
		streamsize _Size, _Copied;

		for (_Copied = 0; 0 < _Count; )
			if (0 < (_Size = _Pnavail()))
				{	
				if (_Count < _Size)
					_Size = _Count;
				_Traits::copy(pptr(), _Ptr, (size_t)_Size);
				_Ptr += _Size;
				_Copied += _Size;
				_Count -= _Size;
				pbump((int)_Size);
				}
			else if (_Traits::eq_int_type(_Traits::eof(),
				overflow(_Traits::to_int_type(*_Ptr))))
				break;	
			else
				{	
				++_Ptr;
				++_Copied;
				--_Count;
				}

		return (_Copied);
		}

	virtual pos_type  seekoff(off_type,
		ios_base::seekdir,
		ios_base::openmode = ios_base::in | ios_base::out)
		{	
		return (streampos(_BADOFF));
		}

	virtual pos_type  seekpos(pos_type,
		ios_base::openmode = ios_base::in | ios_base::out)
		{	
		return (streampos(_BADOFF));
		}

	virtual _Myt * setbuf(_Elem *, streamsize)
		{	
		return (this);
		}

	virtual int  sync()
		{	
		return (0);
		}

	virtual void  imbue(const locale&)
		{	
		}

private:
	_Mutex _Mylock;	
	_Elem *_Gfirst;	
	_Elem *_Pfirst;	
	_Elem **_IGfirst;	
	_Elem **_IPfirst;	
	_Elem *_Gnext;	
	_Elem *_Pnext;	
	_Elem **_IGnext;	
	_Elem **_IPnext;	

	int _Gcount;	
	int _Pcount;	
	int *_IGcount;	
	int *_IPcount;	

	locale *_Plocale;	
	};

 

template class __declspec(dllimport) basic_streambuf<char, char_traits<char> >;
template class __declspec(dllimport) basic_streambuf<wchar_t, char_traits<wchar_t> >;


 #line 473 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\streambuf"

		
template<class _Elem,
	class _Traits>
	class istreambuf_iterator
		: public iterator<input_iterator_tag,
			_Elem, typename _Traits::off_type, _Elem *, _Elem&>
	{	
	typedef istreambuf_iterator<_Elem, _Traits> _Myt;
public:
	typedef _Elem char_type;
	typedef _Traits traits_type;
	typedef basic_streambuf<_Elem, _Traits> streambuf_type;
	typedef basic_istream<_Elem, _Traits> istream_type;

	typedef typename traits_type::int_type int_type;

	istreambuf_iterator(streambuf_type *_Sb = 0) throw ()
		: _Strbuf(_Sb), _Got(_Sb == 0)
		{	
		}

	istreambuf_iterator(istream_type& _Istr) throw ()
		: _Strbuf(_Istr.rdbuf()), _Got(_Istr.rdbuf() == 0)
		{	
		}

	_Elem operator*() const
		{	
		if (!_Got)
			_Peek();

 


#line 509 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\streambuf"

		return (_Val);
		}

	_Myt& operator++()
		{	
 


#line 519 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\streambuf"

		_Inc();
		return (*this);
		}

	_Myt operator++(int)
		{	
		if (!_Got)
			_Peek();
		_Myt _Tmp = *this;
		++*this;
		return (_Tmp);
		}

	bool equal(const _Myt& _Right) const
		{	
		if (!_Got)
			_Peek();
		if (!_Right._Got)
			_Right._Peek();
		return (_Strbuf == 0 && _Right._Strbuf == 0
			|| _Strbuf != 0 && _Right._Strbuf != 0);
		}

private:
	void _Inc()
		{	
		if (_Strbuf == 0
			|| traits_type::eq_int_type(traits_type::eof(),
				_Strbuf->sbumpc()))
			_Strbuf = 0, _Got = true;
		else
			_Got = false;
		}

	_Elem _Peek() const
		{	
		int_type _Meta;
		if (_Strbuf == 0
			|| traits_type::eq_int_type(traits_type::eof(),
				_Meta = _Strbuf->sgetc()))
			_Strbuf = 0;
		else
			_Val = traits_type::to_char_type(_Meta);
		_Got = true;
		return (_Val);
		}

	mutable streambuf_type *_Strbuf;	
	mutable bool _Got;	
	mutable _Elem _Val;	
	};

template<class _Elem,
	class _Traits>
	struct _Is_checked_helper<istreambuf_iterator<_Elem, _Traits> >
	: public ::std:: tr1::true_type
	{	
	};

		
template<class _Elem,
	class _Traits> inline
	bool  operator==(
		const istreambuf_iterator<_Elem, _Traits>& _Left,
		const istreambuf_iterator<_Elem, _Traits>& _Right)
	{	
	return (_Left.equal(_Right));
	}

template<class _Elem,
	class _Traits> inline
	bool  operator!=(
		const istreambuf_iterator<_Elem, _Traits>& _Left,
		const istreambuf_iterator<_Elem, _Traits>& _Right)
	{	
	return (!(_Left == _Right));
	}

		
template<class _Elem,
	class _Traits>
	class ostreambuf_iterator
		: public _Outit
	{	
	typedef ostreambuf_iterator<_Elem, _Traits> _Myt;
public:
	typedef _Elem char_type;
	typedef _Traits traits_type;
	typedef basic_streambuf<_Elem, _Traits> streambuf_type;
	typedef basic_ostream<_Elem, _Traits> ostream_type;

	ostreambuf_iterator(streambuf_type *_Sb) throw ()
		: _Failed(false), _Strbuf(_Sb)
		{	
		}

	ostreambuf_iterator(ostream_type& _Ostr) throw ()
		: _Failed(false), _Strbuf(_Ostr.rdbuf())
		{	
		}

	_Myt& operator=(_Elem _Right)
		{	
		if (_Strbuf == 0
			|| traits_type::eq_int_type(_Traits::eof(),
				_Strbuf->sputc(_Right)))
			_Failed = true;
		return (*this);
		}

	_Myt& operator*()
		{	
		return (*this);
		}

	_Myt& operator++()
		{	
		return (*this);
		}

	_Myt& operator++(int)
		{	
		return (*this);
		}

	bool failed() const throw ()
		{	
		return (_Failed);
		}

private:
	bool _Failed;	
	streambuf_type *_Strbuf;	
	};

template<class _Elem,
	class _Traits>
	struct _Is_checked_helper<ostreambuf_iterator<_Elem, _Traits> >
	: public ::std:: tr1::true_type
	{	
	};
}

 

 #pragma warning(pop)
 #pragma pack(pop)

#line 669 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\streambuf"
#line 670 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\streambuf"





#line 11 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xlocnum"

 #pragma pack(push,8)
 #pragma warning(push,3)

 
 

 #pragma warning(disable: 4189 4275)

		


 
extern "C" {
 #line 26 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xlocnum"

extern __declspec(dllimport) float __cdecl _Stofx(const char *,
	    char **,
	long, int *);
extern __declspec(dllimport) double __cdecl _Stodx(const char *,
	    char **,
	long, int *);
extern __declspec(dllimport) long double __cdecl _Stoldx(const char *,
	    char **,
	long, int *);
extern __declspec(dllimport) long __cdecl _Stolx(const char *,
	    char **,
	int, int *);
extern __declspec(dllimport) unsigned long __cdecl _Stoulx(const char *,
	    char **,
	int, int *);
extern __declspec(dllimport) __int64 __cdecl _Stollx(const char *,
	    char **,
	int, int *);
extern __declspec(dllimport) unsigned __int64 __cdecl _Stoullx(const char *,
	    char **,
	int, int *);

 
}
 #line 52 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xlocnum"


namespace std {
		
template<class _Elem>
	class numpunct
		: public locale::facet
	{	
public:
	typedef basic_string<_Elem, char_traits<_Elem>, allocator<_Elem> >
		string_type;
	typedef _Elem char_type;

	 __declspec(dllimport) static locale::id id;	

	_Elem decimal_point() const
		{	
		return (do_decimal_point());
		}

	_Elem thousands_sep() const
		{	
		return (do_thousands_sep());
		}

	string grouping() const
		{	
		return (do_grouping());
		}

	string_type falsename() const
		{	
		return (do_falsename());
		}

	string_type truename() const
		{	
		return (do_truename());
		}

	explicit numpunct(size_t _Refs = 0)
		: locale::facet(_Refs)
		{	
		{ _Locinfo _Lobj;
			_Init(_Lobj);
			if (_Kseparator == 0)
				_Kseparator =	
					_Maklocchr(',', (_Elem *)0, _Lobj._Getcvt());
		}
		}

	numpunct(const _Locinfo& _Lobj, size_t _Refs = 0, bool _Isdef = false)
		: locale::facet(_Refs)
		{	
		_Init(_Lobj, _Isdef);
		}

	static size_t _Getcat(const locale::facet **_Ppf = 0,
		const locale *_Ploc = 0)
		{	
		if (_Ppf != 0 && *_Ppf == 0)
			*_Ppf = new numpunct<_Elem>(
				_Locinfo(_Ploc->c_str()), 0, true);
		return (4);
		}

protected:
	virtual  ~numpunct()
		{	
		_Tidy();
		}

	numpunct(const char *_Locname, size_t _Refs = 0, bool _Isdef = false)
		: locale::facet(_Refs)
		{	
		{ _Locinfo _Lobj(_Locname);
			_Init(_Lobj, _Isdef);
		}
		}

	void _Init(const _Locinfo& _Lobj, bool _Isdef = false)
		{	
		const lconv *_Ptr = _Lobj._Getlconv();

		_Grouping = 0;
		_Falsename = 0;
		_Truename = 0;

		try {
		_Grouping = _Maklocstr(_Isdef ? "" : _Ptr->grouping, (char *)0, _Lobj._Getcvt());
#line 143 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xlocnum"
		_Falsename = _Maklocstr(_Lobj._Getfalse(), (_Elem *)0, _Lobj._Getcvt());
		_Truename = _Maklocstr(_Lobj._Gettrue(), (_Elem *)0, _Lobj._Getcvt());
		} catch (...) {
		_Tidy();
		throw;
		}

		_Dp = _Maklocchr(_Ptr->decimal_point[0], (_Elem *)0, _Lobj._Getcvt());
		_Kseparator =
			_Maklocchr(_Ptr->thousands_sep[0], (_Elem *)0, _Lobj._Getcvt());

		if (_Isdef)
			{	

			_Dp = _Maklocchr('.', (_Elem *)0, _Lobj._Getcvt());
			_Kseparator = _Maklocchr(',', (_Elem *)0, _Lobj._Getcvt());
			}
		}

	virtual _Elem  do_decimal_point() const
		{	
		return (_Dp);
		}

	virtual _Elem  do_thousands_sep() const
		{	
		return (_Kseparator);
		}

	virtual string  do_grouping() const
		{	
		return (string(_Grouping));
		}

	virtual string_type  do_falsename() const
		{	
		return (string_type(_Falsename));
		}

	virtual string_type  do_truename() const
		{	
		return (string_type(_Truename));
		}

private:
	void _Tidy()
		{	
		delete[] ((void *)_Grouping);
		delete[] ((void *)_Falsename);
		delete[] ((void *)_Truename);
		}

	const char *_Grouping;	
	_Elem _Dp;	
	_Elem _Kseparator;	
	const _Elem *_Falsename;	
	const _Elem *_Truename;	
	};

		
template<class _Elem>
	class numpunct_byname
		: public numpunct<_Elem>
	{	
public:
	explicit numpunct_byname(const char *_Locname, size_t _Refs = 0)
		: numpunct<_Elem>(_Locname, _Refs)
		{	
		}

 
	explicit numpunct_byname(const string& _Str, size_t _Refs = 0)
		: numpunct<_Elem>(_Str.c_str(), _Refs)
		{	
		}
 #line 219 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xlocnum"

protected:
	virtual  ~numpunct_byname()
		{	
		}
	};

		
template<class _Elem>
	 locale::id numpunct<_Elem>::id;

		
template<class _Elem,
	class _InIt = istreambuf_iterator<_Elem, char_traits<_Elem> > >
	class num_get
		: public locale::facet
	{	
public:
	typedef numpunct<_Elem> _Mypunct;
	typedef basic_string<_Elem, char_traits<_Elem>, allocator<_Elem> >
		_Mystr;

	static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0,
		const locale *_Ploc = 0)
		{	
		if (_Ppf != 0 && *_Ppf == 0)
			*_Ppf = new num_get<_Elem, _InIt>(
				_Locinfo(_Ploc->c_str()));
		return (4);
		}

	 static locale::id id;	

protected:
	virtual  ~num_get()
		{	
		}

	void _Init(const _Locinfo& _Lobj)
		{	
		_Cvt = _Lobj._Getcvt();
		}

	_Locinfo::_Cvtvec _Cvt;		

public:
	explicit  num_get(size_t _Refs = 0)
		: locale::facet(_Refs)
		{	
		{ _Locinfo _Lobj;
			_Init(_Lobj);
		}
		}

	 num_get(const _Locinfo& _Lobj, size_t _Refs = 0)
		: locale::facet(_Refs)
		{	
		_Init(_Lobj);
		}

	typedef _Elem char_type;
	typedef _InIt iter_type;

	_InIt  get(_InIt _First, _InIt _Last,
		ios_base& _Iosbase,	ios_base::iostate& _State,
			_Bool& _Val) const
		{	
		return (do_get(_First, _Last, _Iosbase, _State, _Val));
		}

	_InIt  get(_InIt _First, _InIt _Last,
		ios_base& _Iosbase,	ios_base::iostate& _State,
			unsigned short& _Val) const
		{	
		return (do_get(_First, _Last, _Iosbase, _State, _Val));
		}

	_InIt  get(_InIt _First, _InIt _Last,
		ios_base& _Iosbase,	ios_base::iostate& _State,
			unsigned int& _Val) const
		{	
		return (do_get(_First, _Last, _Iosbase, _State, _Val));
		}

	_InIt  get(_InIt _First, _InIt _Last,
		ios_base& _Iosbase, ios_base::iostate& _State,
			long& _Val) const
		{	
		return (do_get(_First, _Last, _Iosbase, _State, _Val));
		}

	_InIt  get(_InIt _First, _InIt _Last,
		ios_base& _Iosbase, ios_base::iostate& _State,
			unsigned long& _Val) const
		{	
		return (do_get(_First, _Last, _Iosbase, _State, _Val));
		}

 
	_InIt  get(_InIt _First, _InIt _Last,
		ios_base& _Iosbase, ios_base::iostate& _State,
			__int64& _Val) const
		{	
		return (do_get(_First, _Last, _Iosbase, _State, _Val));
		}

	_InIt  get(_InIt _First, _InIt _Last,
		ios_base& _Iosbase, ios_base::iostate& _State,
			unsigned __int64& _Val) const
		{	
		return (do_get(_First, _Last, _Iosbase, _State, _Val));
		}
 #line 332 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xlocnum"

	_InIt  get(_InIt _First, _InIt _Last,
		ios_base& _Iosbase, ios_base::iostate& _State,
			float& _Val) const
		{	
		return (do_get(_First, _Last, _Iosbase, _State, _Val));
		}

	_InIt  get(_InIt _First, _InIt _Last,
		ios_base& _Iosbase, ios_base::iostate& _State,
			double& _Val) const
		{	
		return (do_get(_First, _Last, _Iosbase, _State, _Val));
		}

	_InIt  get(_InIt _First, _InIt _Last,
		ios_base& _Iosbase, ios_base::iostate& _State,
			long double& _Val) const
		{	
		return (do_get(_First, _Last, _Iosbase, _State, _Val));
		}

	_InIt  get(_InIt _First, _InIt _Last,
		ios_base& _Iosbase, ios_base::iostate& _State,
			void *& _Val) const
		{	
		return (do_get(_First, _Last, _Iosbase, _State, _Val));
		}

protected:
	virtual _InIt  do_get(_InIt _First, _InIt _Last,
		ios_base& _Iosbase, ios_base::iostate& _State,
			_Bool& _Val) const
		{	
		;
		int _Ans = -1;	

		if (_Iosbase.flags() & ios_base::boolalpha)
			{	
			typedef typename _Mystr::size_type _Mystrsize;
			const _Mypunct& _Punct_fac = use_facet< _Mypunct >(_Iosbase.getloc());
			_Mystr _Str((_Mystrsize)1, (char_type)0);
			_Str += _Punct_fac.falsename();
			_Str += (char_type)0;
			_Str += _Punct_fac.truename();	
			_Ans = _Getloctxt(_First, _Last, (size_t)2, _Str.c_str());
			}
		else
			{	
			char _Ac[32], *_Ep;
			int _Errno = 0;
			const unsigned long _Ulo = :: _Stoulx(_Ac, &_Ep,
				_Getifld(_Ac, _First, _Last, _Iosbase.flags(),
					_Iosbase.getloc()), &_Errno);
			if (_Ep != _Ac && _Errno == 0 && _Ulo <= 1)
				_Ans = _Ulo;
			}

		if (_First == _Last)
			_State |= ios_base::eofbit;
		if (_Ans < 0)
			_State |= ios_base::failbit;
		else
			_Val = _Ans != 0;	
		return (_First);
		}

	virtual _InIt  do_get(_InIt _First, _InIt _Last,
		ios_base& _Iosbase, ios_base::iostate& _State,
			unsigned short& _Val) const
		{	
		;
		char _Ac[32], *_Ep;
		int _Errno = 0;
		int _Base = _Getifld(_Ac, _First, _Last, _Iosbase.flags(),
			_Iosbase.getloc());	
		char *_Ptr = _Ac[0] == '-' ? _Ac + 1 : _Ac;	
		const unsigned long _Ans =
			:: _Stoulx(_Ptr, &_Ep, _Base, &_Errno);	

		if (_First == _Last)
			_State |= ios_base::eofbit;
		if (_Ep == _Ptr || _Errno != 0 || 0xffff < _Ans)
			_State |= ios_base::failbit;
		else
			_Val = (unsigned short)(_Ac[0] == '-'
				? 0 -_Ans : _Ans);	
		return (_First);
		}

	virtual _InIt  do_get(_InIt _First, _InIt _Last,
		ios_base& _Iosbase, ios_base::iostate& _State,
			unsigned int& _Val) const
		{	
		;
		char _Ac[32], *_Ep;
		int _Errno = 0;
		int _Base = _Getifld(_Ac, _First, _Last, _Iosbase.flags(),
			_Iosbase.getloc());	
		char *_Ptr = _Ac[0] == '-' ? _Ac + 1 : _Ac;	
		const unsigned long _Ans =
			:: _Stoulx(_Ptr, &_Ep, _Base, &_Errno);	

		if (_First == _Last)
			_State |= ios_base::eofbit;
		if (_Ep == _Ptr || _Errno != 0 || 0xffffffff < _Ans)
			_State |= ios_base::failbit;
		else
			_Val = _Ac[0] == '-' ? 0 -_Ans : _Ans;	
		return (_First);
		}

	virtual _InIt  do_get(_InIt _First, _InIt _Last,
		ios_base& _Iosbase, ios_base::iostate& _State,
			long& _Val) const
		{	
		;
		char _Ac[32], *_Ep;
		int _Errno = 0;
		const long _Ans = :: _Stolx(_Ac, &_Ep,
			_Getifld(_Ac, _First, _Last, _Iosbase.flags(),
				_Iosbase.getloc()), &_Errno);	

		if (_First == _Last)
			_State |= ios_base::eofbit;
		if (_Ep == _Ac || _Errno != 0)
			_State |= ios_base::failbit;
		else
			_Val = _Ans;	
		return (_First);
		}

	virtual _InIt  do_get(_InIt _First, _InIt _Last,
		ios_base& _Iosbase, ios_base::iostate& _State,
			unsigned long& _Val) const
		{	
		;
		char _Ac[32], *_Ep;
		int _Errno = 0;
		const unsigned long _Ans = :: _Stoulx(_Ac, &_Ep,
			_Getifld(_Ac, _First, _Last, _Iosbase.flags(),
				_Iosbase.getloc()), &_Errno);	

		if (_First == _Last)
			_State |= ios_base::eofbit;
		if (_Ep == _Ac || _Errno != 0)
			_State |= ios_base::failbit;
		else
			_Val = _Ans;	
		return (_First);
		}

 
	virtual _InIt  do_get(_InIt _First, _InIt _Last,
		ios_base& _Iosbase, ios_base::iostate& _State,
			__int64& _Val) const
		{	
		;
		char _Ac[32], *_Ep;
		int _Errno = 0;
		const __int64 _Ans = :: _Stollx(_Ac, &_Ep,
			_Getifld(_Ac, _First, _Last, _Iosbase.flags(),
				_Iosbase.getloc()), &_Errno);	

		if (_First == _Last)
			_State |= ios_base::eofbit;
		if (_Ep == _Ac || _Errno != 0)
			_State |= ios_base::failbit;
		else
			_Val = _Ans;	
		return (_First);
		}

	virtual _InIt  do_get(_InIt _First, _InIt _Last,
		ios_base& _Iosbase, ios_base::iostate& _State,
			unsigned __int64& _Val) const
		{	
		;
		char _Ac[32], *_Ep;
		int _Errno = 0;
		const unsigned __int64 _Ans = :: _Stoullx(_Ac, &_Ep,
			_Getifld(_Ac, _First, _Last, _Iosbase.flags(),
				_Iosbase.getloc()), &_Errno);	

		if (_First == _Last)
			_State |= ios_base::eofbit;
		if (_Ep == _Ac || _Errno != 0)
			_State |= ios_base::failbit;
		else
			_Val = _Ans;	
		return (_First);
		}
 #line 525 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xlocnum"

	virtual _InIt  do_get(_InIt _First, _InIt _Last,
		ios_base& _Iosbase, ios_base::iostate& _State,
			float& _Val) const
		{	
		;
		char _Ac[8 + 36 + 16], *_Ep;
		int _Errno = 0;
		int _Hexexp = 0;
		float _Ans = :: _Stofx(_Ac, &_Ep,
			_Getffld(_Ac, _First, _Last,
				_Iosbase, &_Hexexp), &_Errno);	

		if (_Hexexp != 0)
			_Ans = :: ldexpf(_Ans, 4 * _Hexexp);

		if (_First == _Last)
			_State |= ios_base::eofbit;
		if (_Ep == _Ac || _Errno != 0)
			_State |= ios_base::failbit;
		else
			_Val = _Ans;	
		return (_First);
		}

	virtual _InIt  do_get(_InIt _First, _InIt _Last,
		ios_base& _Iosbase, ios_base::iostate& _State,
			double& _Val) const
		{	
		;
		char _Ac[8 + 36 + 16], *_Ep;
		int _Errno = 0;
		int _Hexexp = 0;
		double _Ans = :: _Stodx(_Ac, &_Ep,
			_Getffld(_Ac, _First, _Last,
				_Iosbase, &_Hexexp), &_Errno);	

		if (_Hexexp != 0)
			_Ans = :: ldexp(_Ans, 4 * _Hexexp);

		if (_First == _Last)
			_State |= ios_base::eofbit;
		if (_Ep == _Ac || _Errno != 0)
			_State |= ios_base::failbit;
		else
			_Val = _Ans;	
		return (_First);
		}

	virtual _InIt  do_get(_InIt _First, _InIt _Last,
		ios_base& _Iosbase, ios_base::iostate& _State,
			long double& _Val) const
		{	
		;
		char _Ac[8 + 36 + 16], *_Ep;
		int _Errno = 0;
		int _Hexexp = 0;
		long double _Ans = :: _Stoldx(_Ac, &_Ep,
			_Getffld(_Ac, _First, _Last,
				_Iosbase, &_Hexexp), &_Errno);	

		if (_Hexexp != 0)
			_Ans = :: ldexpl(_Ans, 4 * _Hexexp);

		if (_First == _Last)
			_State |= ios_base::eofbit;
		if (_Ep == _Ac || _Errno != 0)
			_State |= ios_base::failbit;
		else
			_Val = _Ans;	
		return (_First);
		}

	virtual _InIt  do_get(_InIt _First, _InIt _Last,
		ios_base& _Iosbase, ios_base::iostate& _State,
			void *& _Val) const
		{	
		;
		char _Ac[32], *_Ep;
		int _Errno = 0;

 
		int _Base = _Getifld(_Ac, _First, _Last, ios_base::hex,
			_Iosbase.getloc());	
		const unsigned __int64 _Ans =
			(sizeof (void *) == sizeof (unsigned long))
				? (unsigned __int64):: _Stoulx(_Ac, &_Ep, _Base, &_Errno)
				: :: _Stoullx(_Ac, &_Ep, _Base, &_Errno);

 



#line 619 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xlocnum"

		if (_First == _Last)
			_State |= ios_base::eofbit;
		if (_Ep == _Ac || _Errno != 0)
			_State |= ios_base::failbit;
		else
			_Val = (void *)((char *)0 + _Ans);	
		return (_First);
		}

private:
	int __cdecl _Getifld(char *_Ac,
		_InIt& _First, _InIt& _Last, ios_base::fmtflags _Basefield,
			const locale& _Loc) const
		{	
		const _Mypunct& _Punct_fac = use_facet< _Mypunct >(_Loc);
		const string _Grouping = _Punct_fac.grouping();
		const _Elem _Kseparator = _Grouping.size() == 0
			? (_Elem)0 : _Punct_fac.thousands_sep();
		const _Elem _E0 = _Maklocchr('0', (_Elem *)0, _Cvt);
		char *_Ptr = _Ac;

		if (_First == _Last)
			;	
		else if (*_First == _Maklocchr('+', (_Elem *)0, _Cvt))
			*_Ptr++ = '+', ++_First;	
		else if (*_First == _Maklocchr('-', (_Elem *)0, _Cvt))
			*_Ptr++ = '-', ++_First;	

		_Basefield &= ios_base::basefield;
		int _Base = _Basefield == ios_base::oct ? 8
			: _Basefield == ios_base::hex ? 16
			: _Basefield == ios_base::_Fmtzero ? 0 : 10;

		bool _Seendigit = false;	
		bool _Nonzero = false;	

		if (_First != _Last && *_First == _E0)
			{	
			_Seendigit = true, ++_First;
			if (_First != _Last && (*_First == _Maklocchr('x', (_Elem *)0, _Cvt)
					|| *_First == _Maklocchr('X', (_Elem *)0, _Cvt))
				&& (_Base == 0 || _Base == 16))
				_Base = 16, _Seendigit = false, ++_First;
			else if (_Base == 0)
				_Base = 8;
			}

		int _Dlen = _Base == 0 || _Base == 10 ? 10
			: _Base == 8 ? 8 : 16 + 6;
		string _Groups((size_t)1, (char)_Seendigit);
		size_t _Group = 0;

		for (char *const _Pe = &_Ac[32 - 1];
			_First != _Last; ++_First)
			if (:: memchr((const char *)"0123456789abcdefABCDEF",
				*_Ptr = _Maklocbyte((_Elem)*_First, _Cvt), _Dlen) != 0)
				{	
				if ((_Nonzero || *_Ptr != '0') && _Ptr < _Pe)
					++_Ptr, _Nonzero = true;
				_Seendigit = true;
				if (_Groups[_Group] != 127)
					++_Groups[_Group];
				}
			else if (_Groups[_Group] == '\0'
				|| _Kseparator == (_Elem)0
				|| *_First != _Kseparator)
				break;	
			else
				{	
				_Groups.append((string::size_type)1, '\0');
				++_Group;
				}

		if (_Group == 0)
			;	
		else if ('\0' < _Groups[_Group])
			++_Group;	
		else
			_Seendigit = false;	

		for (const char *_Pg = _Grouping.c_str(); _Seendigit && 0 < _Group; )
			if (*_Pg == 127)
				break;	
			else if (0 < --_Group && *_Pg != _Groups[_Group]
				|| 0 == _Group && *_Pg < _Groups[_Group])
				_Seendigit = false;	
			else if ('\0' < _Pg[1])
				++_Pg;	

		if (_Seendigit && !_Nonzero)
			*_Ptr++ = '0';	
		else if (!_Seendigit)
			_Ptr = _Ac;	
		*_Ptr = '\0';
		return (_Base);
		}

	int __cdecl _Getffld(char *_Ac,
		_InIt& _First, _InIt &_Last,
		ios_base& _Iosbase, int *_Phexexp) const
		{	
		if ((_Iosbase.flags() & ios_base::floatfield) == ios_base::hexfloat)
			return (_Getffldx(_Ac, _First, _Last,
				_Iosbase, _Phexexp));	

		const _Mypunct& _Punct_fac = use_facet< _Mypunct >(_Iosbase.getloc());
		const string _Grouping = _Punct_fac.grouping();
		const _Elem _E0 = _Maklocchr('0', (_Elem *)0, _Cvt);
		char *_Ptr = _Ac;
		bool _Bad = false;

		if (_First == _Last)
			;	
		else if (*_First == _Maklocchr('+', (_Elem *)0, _Cvt))
			*_Ptr++ = '+', ++_First;	
		else if (*_First == _Maklocchr('-', (_Elem *)0, _Cvt))
			*_Ptr++ = '-', ++_First;	

		bool _Seendigit = false;	
		int _Significant = 0;	
		int _Pten = 0;	

		if (*_Grouping.c_str() == 127 || *_Grouping.c_str() <= '\0')
			for (; _First != _Last
				&& _E0 <= *_First && *_First <= _E0 + 9;
					_Seendigit = true, ++_First)
				if (36 <= _Significant)
					++_Pten;	
				else if (*_First == _E0 && _Significant == 0)
					;	
				else
					{	
					*_Ptr++ = (char)((*_First - _E0) + '0');
					++_Significant;
					}
		else
			{	
			const _Elem _Kseparator = _Grouping.size() == 0
				? (_Elem)0 : _Punct_fac.thousands_sep();
			string _Groups((size_t)1, '\0');
			size_t _Group = 0;

			for (; _First != _Last; ++_First)
				if (_E0 <= *_First && *_First <= _E0 + 9)
					{	
					_Seendigit = true;
					if (36 <= _Significant)
						++_Pten;	
					else if (*_First == _E0 && _Significant == 0)
						;	
					else
						{	
						*_Ptr++ = (char)((*_First - _E0) + '0');
						++_Significant;
						}
					if (_Groups[_Group] != 127)
						++_Groups[_Group];
					}
				else if (_Groups[_Group] == '\0'
					|| _Kseparator == (_Elem)0
					|| *_First != _Kseparator)
					break;	
				else
					{	
					_Groups.append((size_t)1, '\0');
					++_Group;
					}
			if (_Group == 0)
				;	
			else if ('\0' < _Groups[_Group])
				++_Group;	
			else
				_Bad = true;	

			for (const char *_Pg = _Grouping.c_str();
				!_Bad && 0 < _Group; )
				if (*_Pg == 127)
					break;	
				else if (0 < --_Group && *_Pg != _Groups[_Group]
					|| 0 == _Group && *_Pg < _Groups[_Group])
					_Bad = true;	
				else if ('\0' < _Pg[1])
					++_Pg;	
			}

		if (_Seendigit && _Significant == 0)
			*_Ptr++ = '0';	

		if (_First != _Last && *_First == _Punct_fac.decimal_point())
			*_Ptr++ = localeconv()->decimal_point[0], ++_First;	

		if (_Significant == 0)
			{	
			for (; _First != _Last && *_First == _E0;
				_Seendigit = true, ++_First)
				--_Pten;	
			if (_Pten < 0)
				*_Ptr++ = '0', ++_Pten;	
			}

		for (; _First != _Last
				&& _E0 <= *_First && *_First <= _E0 + 9;
				_Seendigit = true, ++_First)
			if (_Significant < 36)
				{	
				*_Ptr++ = (char)((*_First - _E0) + '0');
				++_Significant;
				}

		if (_Seendigit && _First != _Last
			&& (*_First == _Maklocchr('e', (_Elem *)0, _Cvt)
				|| *_First == _Maklocchr('E', (_Elem *)0, _Cvt)))
			{	
			*_Ptr++ = 'e', ++_First;
			_Seendigit = false, _Significant = 0;

			if (_First == _Last)
				;	
			else if (*_First == _Maklocchr('+', (_Elem *)0, _Cvt))
				*_Ptr++ = '+', ++_First;	
			else if (*_First == _Maklocchr('-', (_Elem *)0, _Cvt))
				*_Ptr++ = '-', ++_First;	
			for (; _First != _Last && *_First == _E0; )
				_Seendigit = true, ++_First;	
			if (_Seendigit)
				*_Ptr++ = '0';	
			for (; _First != _Last
				&& _E0 <= *_First && *_First <= _E0 + 9;
				_Seendigit = true, ++_First)
				if (_Significant < 8)
					{	
					*_Ptr++ = (char)((*_First - _E0) + '0');
					++_Significant;
					}
			}

		if (_Bad || !_Seendigit)
			_Ptr = _Ac;	
		*_Ptr = '\0';
		return (_Pten);
		}

	int __cdecl _Hexdig(const _Elem _Dig, const _Elem _E0,
		const _Elem _Al, const _Elem _Au) const
		{	
		if (_E0 <= _Dig && _Dig <= _E0 + 9)
			return (_Dig - _E0);	
		else if (_Al <= _Dig && _Dig <= _Al + 5)
			return (_Dig - _Al + 10);	
		else if (_Au <= _Dig && _Dig <= _Au + 5)
			return (_Dig - _Au + 10);	
		else
			return (-1);
		}

	int __cdecl _Getffldx(char *_Ac,
		_InIt& _First, _InIt &_Last,
		ios_base& _Iosbase, int *_Phexexp) const
		{	
		const _Mypunct& _Punct_fac = use_facet< _Mypunct >(_Iosbase.getloc());
		const string _Grouping = _Punct_fac.grouping();
		const _Elem _E0 = _Maklocchr('0', (_Elem *)0, _Cvt);
		const _Elem _Al = _Maklocchr('a', (_Elem *)0, _Cvt);
		const _Elem _Au = _Maklocchr('A', (_Elem *)0, _Cvt);
		char *_Ptr = _Ac;
		bool _Bad = false;
		int _Dig;

		if (_First == _Last)
			;	
		else if (*_First == _Maklocchr('+', (_Elem *)0, _Cvt))
			*_Ptr++ = '+', ++_First;	
		else if (*_First == _Maklocchr('-', (_Elem *)0, _Cvt))
			*_Ptr++ = '-', ++_First;	

		*_Ptr++ = '0';
		*_Ptr++ = 'x';

		bool _Seendigit = false;	
		int _Significant = 0;	
		int _Phex = 0;	

		if (_First == _Last || *_First != _E0)
			;
		else if (++_First != _Last
			&& (*_First == _Maklocchr('x', (_Elem *)0, _Cvt)
				 || *_First == _Maklocchr('X', (_Elem *)0, _Cvt)))
			++_First;	
		else
			_Seendigit = true;	

		if (*_Grouping.c_str() == 127 || *_Grouping.c_str() <= '\0')
			for (; _First != _Last
				&& 0 <= (_Dig = _Hexdig(*_First, _E0, _Al, _Au));
					_Seendigit = true, ++_First)
				if (36 <= _Significant)
					++_Phex;	
				else if (*_First == _E0 && _Significant == 0)
					;	
				else
					{	
					*_Ptr++ = "0123456789abcdef"[_Dig];
					++_Significant;
					}
		else
			{	
			const _Elem _Kseparator = _Grouping.size() == 0
				? (_Elem)0 : _Punct_fac.thousands_sep();
			string _Groups((size_t)1, '\0');
			size_t _Group = 0;

			for (; _First != _Last; ++_First)
				if (0 <= (_Dig = _Hexdig(*_First, _E0, _Al, _Au)))
					{	
					_Seendigit = true;
					if (36 <= _Significant)
						++_Phex;	
					else if (*_First == _E0 && _Significant == 0)
						;	
					else
						{	
						*_Ptr++ = "0123456789abcdef"[_Dig];
						++_Significant;
						}
					if (_Groups[_Group] != 127)
						++_Groups[_Group];
					}
				else if (_Groups[_Group] == '\0'
					|| _Kseparator == (_Elem)0
					|| *_First != _Kseparator)
					break;	
				else
					{	
					_Groups.append((size_t)1, '\0');
					++_Group;
					}
			if (_Group == 0)
				;	
			else if ('\0' < _Groups[_Group])
				++_Group;	
			else
				_Bad = true;	

			for (const char *_Pg = _Grouping.c_str();
				!_Bad && 0 < _Group; )
				if (*_Pg == 127)
					break;	
				else if (0 < --_Group && *_Pg != _Groups[_Group]
					|| 0 == _Group && *_Pg < _Groups[_Group])
					_Bad = true;	
				else if ('\0' < _Pg[1])
					++_Pg;	
			}

		if (_Seendigit && _Significant == 0)
			*_Ptr++ = '0';	

		if (_First != _Last && *_First == _Punct_fac.decimal_point())
			*_Ptr++ = localeconv()->decimal_point[0], ++_First;	

		if (_Significant == 0)
			{	
			for (; _First != _Last && *_First == _E0;
				_Seendigit = true, ++_First)
				--_Phex;	
			if (_Phex < 0)
				*_Ptr++ = '0', ++_Phex;	
			}

		for (; _First != _Last
				&& 0 <= (_Dig = _Hexdig(*_First, _E0, _Al, _Au));
				_Seendigit = true, ++_First)
			if (_Significant < 36)
				{	
				*_Ptr++ = "0123456789abcdef"[_Dig];
				++_Significant;
				}

		if (_Seendigit && _First != _Last
			&& (*_First == _Maklocchr('p', (_Elem *)0, _Cvt)
				|| *_First == _Maklocchr('P', (_Elem *)0, _Cvt)))
			{	
			*_Ptr++ = 'p', ++_First;
			_Seendigit = false, _Significant = 0;

			if (_First == _Last)
				;	
			else if (*_First == _Maklocchr('+', (_Elem *)0, _Cvt))
				*_Ptr++ = '+', ++_First;	
			else if (*_First == _Maklocchr('-', (_Elem *)0, _Cvt))
				*_Ptr++ = '-', ++_First;	
			for (; _First != _Last && *_First == _E0; )
				_Seendigit = true, ++_First;	
			if (_Seendigit)
				*_Ptr++ = '0';	
			for (; _First != _Last
				&& _E0 <= *_First && *_First <= _E0 + 9;
				_Seendigit = true, ++_First)
				if (_Significant < 8)
					{	
					*_Ptr++ = (char)((*_First - _E0) + '0');
					++_Significant;
					}
			}

		if (_Bad || !_Seendigit)
			_Ptr = _Ac;	
		*_Ptr = '\0';
		*_Phexexp = _Phex;	
		return (0);	
		}
	};

		
template<class _Elem,
	class _InIt>
	 locale::id num_get<_Elem, _InIt>::id;

		
template<class _Elem,
	class _OutIt = ostreambuf_iterator<_Elem, char_traits<_Elem> > >
	class num_put
		: public locale::facet
	{	
public:
	typedef numpunct<_Elem> _Mypunct;
	typedef basic_string<_Elem, char_traits<_Elem>, allocator<_Elem> >
		_Mystr;

	static size_t __cdecl _Getcat(const locale::facet **_Ppf = 0,
		const locale *_Ploc = 0)
		{	
		if (_Ppf != 0 && *_Ppf == 0)
			*_Ppf = new num_put<_Elem, _OutIt>(
				_Locinfo(_Ploc->c_str()));
		return (4);
		}

	 static locale::id id;	

protected:
	virtual  ~num_put()
		{	
		}

	void  _Init(const _Locinfo& _Lobj)
		{	
		_Cvt = _Lobj._Getcvt();
		}

	_Locinfo::_Cvtvec _Cvt;		

public:
	explicit  num_put(size_t _Refs = 0)
		: locale::facet(_Refs)
		{	
		{ _Locinfo _Lobj;
			_Init(_Lobj);
		}
		}

	 num_put(const _Locinfo& _Lobj, size_t _Refs = 0)
		: locale::facet(_Refs)
		{	
		_Init(_Lobj);
		}

	typedef _Elem char_type;
	typedef _OutIt iter_type;

	_OutIt  put(_OutIt _Dest,
		ios_base& _Iosbase, _Elem _Fill, _Bool _Val) const
		{	
		return (do_put(_Dest, _Iosbase, _Fill, _Val));
		}

	_OutIt  put(_OutIt _Dest,
		ios_base& _Iosbase, _Elem _Fill, long _Val) const
		{	
		return (do_put(_Dest, _Iosbase, _Fill, _Val));
		}

	_OutIt  put(_OutIt _Dest,
		ios_base& _Iosbase, _Elem _Fill, unsigned long _Val) const
		{	
		return (do_put(_Dest, _Iosbase, _Fill, _Val));
		}

 
	_OutIt  put(_OutIt _Dest,
		ios_base& _Iosbase, _Elem _Fill, __int64 _Val) const
		{	
		return (do_put(_Dest, _Iosbase, _Fill, _Val));
		}

	_OutIt  put(_OutIt _Dest,
		ios_base& _Iosbase, _Elem _Fill, unsigned __int64 _Val) const
		{	
		return (do_put(_Dest, _Iosbase, _Fill, _Val));
		}
 #line 1121 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xlocnum"

	_OutIt  put(_OutIt _Dest,
		ios_base& _Iosbase, _Elem _Fill, double _Val) const
		{	
		return (do_put(_Dest, _Iosbase, _Fill, _Val));
		}

	_OutIt  put(_OutIt _Dest,
		ios_base& _Iosbase, _Elem _Fill, long double _Val) const
		{	
		return (do_put(_Dest, _Iosbase, _Fill, _Val));
		}

	_OutIt  put(_OutIt _Dest,
		ios_base& _Iosbase, _Elem _Fill, const void *_Val) const
		{	
		return (do_put(_Dest, _Iosbase, _Fill, _Val));
		}

protected:
	virtual _OutIt  do_put(_OutIt _Dest,
		ios_base& _Iosbase, _Elem _Fill, _Bool _Val) const
		{	
		;
		if (!(_Iosbase.flags() & ios_base::boolalpha))
			return (do_put(_Dest, _Iosbase, _Fill, (long)_Val));
		else
			{	
			const _Mypunct& _Punct_fac = use_facet< _Mypunct >(_Iosbase.getloc());
			_Mystr _Str;
			if (_Val)
				_Str.assign(_Punct_fac.truename());
			else
				_Str.assign(_Punct_fac.falsename());

			size_t _Fillcount = _Iosbase.width() <= 0
				|| (size_t)_Iosbase.width() <= _Str.size()
					? 0 : (size_t)_Iosbase.width() - _Str.size();

			if ((_Iosbase.flags() & ios_base::adjustfield) != ios_base::left)
				{	
				_Dest = _Rep(_Dest, _Fill, _Fillcount);
				_Fillcount = 0;
				}
			_Dest = _Put(_Dest, _Str.c_str(), _Str.size());	
			_Iosbase.width(0);
			return (_Rep(_Dest, _Fill, _Fillcount));	
			}
		}

	virtual _OutIt  do_put(_OutIt _Dest,
		ios_base& _Iosbase, _Elem _Fill, long _Val) const
		{	
		char _Buf[2 * 32], _Fmt[6];

		return (_Iput(_Dest, _Iosbase, _Fill, _Buf,
			:: sprintf_s(_Buf, sizeof (_Buf), _Ifmt(_Fmt, "ld",
				_Iosbase.flags()), _Val)));
		}

	virtual _OutIt  do_put(_OutIt _Dest,
		ios_base& _Iosbase, _Elem _Fill, unsigned long _Val) const
		{	
		char _Buf[2 * 32], _Fmt[6];

		return (_Iput(_Dest, _Iosbase, _Fill, _Buf,
			:: sprintf_s(_Buf, sizeof (_Buf), _Ifmt(_Fmt, "lu",
				_Iosbase.flags()), _Val)));
		}

 
	virtual _OutIt  do_put(_OutIt _Dest,
		ios_base& _Iosbase, _Elem _Fill, __int64 _Val) const
		{	
		char _Buf[2 * 32], _Fmt[8];

		return (_Iput(_Dest, _Iosbase, _Fill, _Buf,
			:: sprintf_s(_Buf, sizeof (_Buf), _Ifmt(_Fmt, "Ld",
				_Iosbase.flags()), _Val)));
		}

	virtual _OutIt  do_put(_OutIt _Dest,
		ios_base& _Iosbase, _Elem _Fill, unsigned __int64 _Val) const
		{	
		char _Buf[2 * 32], _Fmt[8];

		return (_Iput(_Dest, _Iosbase, _Fill, _Buf,
			:: sprintf_s(_Buf, sizeof (_Buf), _Ifmt(_Fmt, "Lu",
				_Iosbase.flags()), _Val)));
		}
 #line 1212 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xlocnum"

	virtual _OutIt  do_put(_OutIt _Dest,
		ios_base& _Iosbase, _Elem _Fill, double _Val) const
		{	
		char _Buf[8 + 36 + 64], _Fmt[8];
		streamsize _Precision = _Iosbase.precision() <= 0
			&& !(_Iosbase.flags() & ios_base::fixed)
				? 6 : _Iosbase.precision();	
		int _Significance = 36 < _Precision
			? 36 : (int)_Precision;	
		_Precision -= _Significance;
		size_t _Beforepoint = 0;	
		size_t _Afterpoint = 0;	

		if ((_Iosbase.flags() & ios_base::floatfield) == ios_base::fixed
			&& _Val * 0.5 != _Val)	
			{	
			bool _Signed = _Val < 0;
			if (_Signed)
				_Val = -_Val;

			for (; 1e35 <= _Val && _Beforepoint < 5000; _Beforepoint += 10)
				_Val /= 1e10;	

			if (0 < _Val)
				for (; 10 <= _Precision && _Val <= 1e-35
					&& _Afterpoint < 5000; _Afterpoint += 10)
					{	
					_Val *= 1e10;
					_Precision -= 10;
					}

			if (_Signed)
				_Val = -_Val;
			}

		return (_Fput(_Dest, _Iosbase, _Fill, _Buf,
			_Beforepoint, _Afterpoint, (size_t)_Precision,
				:: sprintf_s(_Buf, sizeof (_Buf),
					_Ffmt(_Fmt, 0, _Iosbase.flags()),
					_Significance, _Val)));	
		}

	virtual _OutIt  do_put(_OutIt _Dest,
		ios_base& _Iosbase, _Elem _Fill, long double _Val) const
		{	
		char _Buf[8 + 36 + 64], _Fmt[8];
		streamsize _Precision = _Iosbase.precision() <= 0
			&& !(_Iosbase.flags() & ios_base::fixed)
				? 6 : _Iosbase.precision();	
		int _Significance = 36 < _Precision
			? 36 : (int)_Precision;	
		_Precision -= _Significance;
		size_t _Beforepoint = 0;	
		size_t _Afterpoint = 0;	

		if ((_Iosbase.flags() & ios_base::floatfield) == ios_base::fixed)
			{	
			bool _Signed = _Val < 0;
			if (_Signed)
				_Val = -_Val;

			for (; 1e35 <= _Val && _Beforepoint < 5000; _Beforepoint += 10)
				_Val /= 1e10;	

			if (0 < _Val)
				for (; 10 <= _Precision && _Val <= 1e-35
					&& _Afterpoint < 5000; _Afterpoint += 10)
					{	
					_Val *= 1e10;
					_Precision -= 10;
					}

			if (_Signed)
				_Val = -_Val;
			}

		return (_Fput(_Dest, _Iosbase, _Fill, _Buf,
			_Beforepoint, _Afterpoint, (size_t)_Precision,
				:: sprintf_s(_Buf, sizeof (_Buf),
					_Ffmt(_Fmt, 'L', _Iosbase.flags()),
					_Significance, _Val)));	
		}

	virtual _OutIt  do_put(_OutIt _Dest,
		ios_base& _Iosbase, _Elem _Fill, const void *_Val) const
		{	
		char _Buf[2 * 32];

		return (_Iput(_Dest, _Iosbase, _Fill, _Buf,
			:: sprintf_s(_Buf, sizeof (_Buf), "%p", _Val)));
		}

private:
	char *__cdecl _Ffmt(char *_Fmt,
		char _Spec, ios_base::fmtflags _Flags) const
		{	
		char *_Ptr = _Fmt;
		*_Ptr++ = '%';

		if (_Flags & ios_base::showpos)
			*_Ptr++ = '+';
		if (_Flags & ios_base::showpoint)
			*_Ptr++ = '#';
		*_Ptr++ = '.';
		*_Ptr++ = '*';	
		if (_Spec != '\0')
			*_Ptr++ = _Spec;	

		ios_base::fmtflags _Ffl = _Flags & ios_base::floatfield;
		*_Ptr++ = _Ffl == ios_base::fixed ? 'f'
			: _Ffl == ios_base::hexfloat ? 'a'	
			: _Ffl == ios_base::scientific ? 'e' : 'g';	
		*_Ptr = '\0';
		return (_Fmt);
		}

	_OutIt __cdecl _Fput(_OutIt _Dest,
		ios_base& _Iosbase, _Elem _Fill, const char *_Buf,
			size_t _Beforepoint, size_t _Afterpoint,
				size_t _Trailing, size_t _Count) const
		{	
		;
		const _Mypunct& _Punct_fac = use_facet< _Mypunct >(_Iosbase.getloc());
		const string _Grouping = _Punct_fac.grouping();
		const _Elem _Kseparator = _Punct_fac.thousands_sep();
		string _Groupstring;
		const _Elem _E0 = _Maklocchr('0', (_Elem *)0, _Cvt);
		size_t _Prefix = _Buf[0] == '+' || _Buf[0] == '-' ? 1 : 0;

		char _Enders[3];
		_Enders[0] = :: localeconv()->decimal_point[0];
		_Enders[1] = 'e';
		_Enders[2] = '\0';

		const char *_Eptr = (const char *):: memchr(_Buf,
			'e', _Count);	
		const char *_Pointptr = (const char *):: memchr(_Buf,
			_Enders[0], _Count);	
		if (_Pointptr == 0)
			_Trailing = 0;

		if (*_Grouping.c_str() != 127 && '\0' < *_Grouping.c_str())
			{	
			_Groupstring.append(_Buf, _Count);	
			if (_Eptr == 0)
				_Groupstring.append(_Trailing, '0');
			else
				{	
				if (_Pointptr == 0)
					{	
					_Groupstring.append(_Beforepoint, '0');
					_Beforepoint = 0;
					}
				_Groupstring.insert(_Eptr - _Buf, _Trailing, '0');
				}
			_Trailing = 0;

			if (_Pointptr == 0)
				_Groupstring.append(_Beforepoint, '0');
			else
				{	
				_Groupstring.insert(_Pointptr - _Buf + 1, _Afterpoint, '0');
				_Groupstring.insert(_Pointptr - _Buf, _Beforepoint, '0');
				_Afterpoint = 0;
				}
			_Beforepoint = 0;

			const char *_Pg = _Grouping.c_str();
			size_t _Off = :: strcspn(&_Groupstring[0], &_Enders[0]);
			while (*_Pg != 127 && '\0' < *_Pg
				&& (size_t)*_Pg < _Off - _Prefix)
				{	
				_Groupstring.insert(_Off -= *_Pg, (size_t)1, '\0');
				if ('\0' < _Pg[1])
					++_Pg;	
				}

			_Buf = &_Groupstring[0];
			_Trailing = 0;
			_Count = _Groupstring.size();
			}

		size_t _Fillcount = _Beforepoint + _Afterpoint + _Trailing + _Count;
		_Fillcount = _Iosbase.width() <= 0
			|| (size_t)_Iosbase.width() <= _Fillcount
				? 0 : (size_t)_Iosbase.width() - _Fillcount;
		ios_base::fmtflags _Adjustfield =
			_Iosbase.flags() & ios_base::adjustfield;
		if (_Adjustfield != ios_base::left
			&& _Adjustfield != ios_base::internal)
			{	
			_Dest = _Rep(_Dest, _Fill, _Fillcount);
			_Fillcount = 0;
			}
		else if (_Adjustfield == ios_base::internal)
			{	
			if (0 < _Prefix)
				{	
				_Dest = _Putc(_Dest, _Buf, 1);
				++_Buf, --_Count;
				}
			_Dest = _Rep(_Dest, _Fill, _Fillcount);
			_Fillcount = 0;
			}

		_Pointptr = (const char *):: memchr(_Buf,
			_Enders[0], _Count);	
		if (_Pointptr != 0)
			{	
			size_t _Fracoffset = _Pointptr - _Buf + 1;
			_Dest = _Putgrouped(_Dest, _Buf, _Fracoffset - 1, _Kseparator);
			_Dest = _Rep(_Dest, _E0, _Beforepoint);
			_Dest = _Rep(_Dest, _Punct_fac.decimal_point(), 1);
			_Dest = _Rep(_Dest, _E0, _Afterpoint);
			_Buf += _Fracoffset, _Count -= _Fracoffset;
			}

		_Eptr = (const char *):: memchr(_Buf,
			'e', _Count);	
		if (_Eptr != 0)
			{	
			size_t _Expoffset = _Eptr - _Buf + 1;
			_Dest = _Putgrouped(_Dest, _Buf, _Expoffset - 1, _Kseparator);
			_Dest = _Rep(_Dest, _E0, _Trailing), _Trailing = 0;
			_Dest = _Putc(_Dest, _Iosbase.flags() & ios_base::uppercase
				? "E" : "e", 1);
			_Buf += _Expoffset, _Count -= _Expoffset;
			}

		_Dest = _Putgrouped(_Dest, _Buf, _Count,
			_Kseparator);	
		_Dest = _Rep(_Dest, _E0, _Trailing);	
		_Iosbase.width(0);
		return (_Rep(_Dest, _Fill, _Fillcount));	
		}

	char *__cdecl _Ifmt(char *_Fmt,
		const char *_Spec, ios_base::fmtflags _Flags) const
		{	
		char *_Ptr = _Fmt;
		*_Ptr++ = '%';

		if (_Flags & ios_base::showpos)
			*_Ptr++ = '+';
		if (_Flags & ios_base::showbase)
			*_Ptr++ = '#';
		if (_Spec[0] != 'L')
			*_Ptr++ = _Spec[0];	
		else

			{	
			*_Ptr++ = 'I';
			*_Ptr++ = '6';
			*_Ptr++ = '4';
			}

		ios_base::fmtflags _Basefield = _Flags & ios_base::basefield;
		*_Ptr++ = _Basefield == ios_base::oct ? 'o'
			: _Basefield != ios_base::hex ? _Spec[1]	
			: _Flags & ios_base::uppercase ? 'X' : 'x';
		*_Ptr = '\0';
		return (_Fmt);
		}

	_OutIt __cdecl _Iput(_OutIt _Dest,
		ios_base& _Iosbase, _Elem _Fill, char *_Buf, size_t _Count) const
		{	
		;
		const _Mypunct& _Punct_fac = use_facet< _Mypunct >(_Iosbase.getloc());
		const string _Grouping = _Punct_fac.grouping();
		const size_t _Prefix = *_Buf == '+' || *_Buf == '-' ? 1
			: *_Buf == '0' && (_Buf[1] == 'x' || _Buf[1] == 'X') ? 2
			: 0;

		if (*_Grouping.c_str() != 127 && '\0' < *_Grouping.c_str())
			{	
			const char *_Pg = _Grouping.c_str();
			size_t _Off = _Count;
			while (*_Pg != 127 && '\0' < *_Pg
				&& (size_t)*_Pg < _Off - _Prefix)
				{	
				_Off -= *_Pg;

				;
				::memmove_s((&_Buf[_Off + 1]), (_Count + 1 - _Off), (&_Buf[_Off]), (_Count + 1 - _Off));
#line 1499 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xlocnum"

				_Buf[_Off] = '\0', ++_Count;
				if ('\0' < _Pg[1])
					++_Pg;	
				}
			}

		size_t _Fillcount = _Iosbase.width() <= 0
			|| (size_t)_Iosbase.width() <= _Count
				? 0 : (size_t)_Iosbase.width() - _Count;

		ios_base::fmtflags _Adjustfield =
			_Iosbase.flags() & ios_base::adjustfield;
		if (_Adjustfield != ios_base::left
			&& _Adjustfield != ios_base::internal)
			{	
			_Dest = _Rep(_Dest, _Fill, _Fillcount);
			_Fillcount = 0;
			}
		else if (_Adjustfield == ios_base::internal)
			{	
			_Dest = _Putc(_Dest, _Buf, _Prefix);	
			_Buf += _Prefix, _Count -= _Prefix;
			_Dest = _Rep(_Dest, _Fill, _Fillcount), _Fillcount = 0;
			}

		_Dest = _Putgrouped(_Dest, _Buf, _Count,
			_Punct_fac.thousands_sep());	
		_Iosbase.width(0);
		return (_Rep(_Dest, _Fill, _Fillcount));	
		}

	_OutIt __cdecl _Put(_OutIt _Dest,
		const _Elem *_Ptr, size_t _Count) const
		{	
		for (; 0 < _Count; --_Count, ++_Dest, ++_Ptr)
			*_Dest = *_Ptr;
		return (_Dest);
		}

	_OutIt __cdecl _Putc(_OutIt _Dest,
		const char *_Ptr, size_t _Count) const
		{	
		for (; 0 < _Count; --_Count, ++_Dest, ++_Ptr)
			*_Dest = _Maklocchr(*_Ptr, (_Elem *)0, _Cvt);
		return (_Dest);
		}

	_OutIt __cdecl _Putgrouped(_OutIt _Dest,
		const char *_Ptr, size_t _Count, _Elem _Kseparator) const
		{	
		for (; ; ++_Ptr, --_Count)
			{	
			const char *_Pend =
				(const char *):: memchr(_Ptr, '\0', _Count);
			size_t _Groupsize = _Pend != 0 ? _Pend - _Ptr : _Count;

			_Dest = _Putc(_Dest, _Ptr, _Groupsize);
			_Ptr += _Groupsize, _Count -= _Groupsize;
			if (_Count == 0)
				break;
			if (_Kseparator != (_Elem)0)
				_Dest = _Rep(_Dest, _Kseparator, 1);
			}
		return (_Dest);
		}

	_OutIt __cdecl _Rep(_OutIt _Dest,
		_Elem _Ch, size_t _Count) const
		{	
		for (; 0 < _Count; --_Count, ++_Dest)
			*_Dest = _Ch;
		return (_Dest);
		}
	};

		
template<class _Elem,
	class _OutIt>
	 locale::id num_put<_Elem, _OutIt>::id;

 


template  locale::id numpunct<char>::id;

template class __declspec(dllimport) num_get<char,
	istreambuf_iterator<char, char_traits<char> > >;
template class __declspec(dllimport) num_put<char,
	ostreambuf_iterator<char, char_traits<char> > >;

template  locale::id numpunct<wchar_t>::id;

template class __declspec(dllimport) num_get<wchar_t,
	istreambuf_iterator<wchar_t, char_traits<wchar_t> > >;
template class __declspec(dllimport) num_put<wchar_t,
	ostreambuf_iterator<wchar_t, char_traits<wchar_t> > >;


 #line 1599 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xlocnum"
}

 

 #pragma warning(pop)
 #pragma pack(pop)

#line 1607 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xlocnum"
#line 1608 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xlocnum"






#line 7 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\ios"

 #pragma pack(push,8)
 #pragma warning(push,3)

 #pragma warning(disable: 4189)

namespace std {
		
template<class _Elem,
	class _Traits>
	class basic_ios
		: public ios_base
	{	
public:
	typedef basic_ios<_Elem, _Traits> _Myt;
	typedef basic_ostream<_Elem, _Traits> _Myos;
	typedef basic_streambuf<_Elem, _Traits> _Mysb;
	typedef ctype<_Elem> _Ctype;
	typedef _Elem char_type;
	typedef _Traits traits_type;
	typedef typename _Traits::int_type int_type;
	typedef typename _Traits::pos_type pos_type;
	typedef typename _Traits::off_type off_type;

	explicit  basic_ios(_Mysb *_Strbuf)
		{	
		init(_Strbuf);
		}

	virtual  ~basic_ios()
		{	
		}

	void  clear(iostate _State = goodbit,
		bool _Reraise = false)
		{	
		ios_base::clear((iostate)(_Mystrbuf == 0
			? (int)_State | (int)badbit : (int)_State), _Reraise);
		}

	void  clear(io_state _State)
		{	
		clear((iostate)_State);
		}

	void  setstate(iostate _State,
		bool _Reraise = false)
		{	
		if (_State != goodbit)
			clear((iostate)((int)rdstate() | (int)_State), _Reraise);
		}

	void  setstate(io_state _State)
		{	
		setstate((iostate)_State);
		}

	_Myt&  copyfmt(const _Myt& _Right)
		{	
		_Tiestr = _Right.tie();
		_Fillch = _Right.fill();
		ios_base::copyfmt(_Right);
		return (*this);
		}

	_Myos * tie() const
		{	
		return (_Tiestr);
		}

	_Myos * tie(_Myos *_Newtie)
		{	
		_Myos *_Oldtie = _Tiestr;
		_Tiestr = _Newtie;
		return (_Oldtie);
		}

	_Mysb * rdbuf() const
		{	
		return (_Mystrbuf);
		}

	_Mysb * rdbuf(_Mysb *_Strbuf)
		{	
		_Mysb *_Oldstrbuf = _Mystrbuf;
		_Mystrbuf = _Strbuf;
		clear();
		return (_Oldstrbuf);
		}

	locale  imbue(const locale& _Loc)
		{	
		locale _Oldlocale = ios_base::imbue(_Loc);
		if (rdbuf() != 0)
			rdbuf()->pubimbue(_Loc);
		return (_Oldlocale);
		}

	_Elem  fill() const
		{	
		return (_Fillch);
		}

	_Elem  fill(_Elem _Newfill)
		{	
		_Elem _Oldfill = _Fillch;
		_Fillch = _Newfill;
		return (_Oldfill);
		}

	char  narrow(_Elem _Ch, char _Dflt = '\0') const
		{	
		const _Ctype& _Ctype_fac = use_facet< _Ctype >(getloc());
		return (_Ctype_fac.narrow(_Ch, _Dflt));
		}

	_Elem  widen(char _Byte) const
		{	
		const _Ctype& _Ctype_fac = use_facet< _Ctype >(getloc());
		return (_Ctype_fac.widen(_Byte));
		}

	void  move(_Myt&& _Right)
		{	
		if (this != &_Right)
			{	
			_Mystrbuf = 0;
			_Tiestr = 0;
			this->swap(_Right);
			}
		}

	void  swap(_Myt& _Right)
		{	
		ios_base::swap(_Right);
		::std:: swap(_Fillch, _Right._Fillch);
		::std:: swap(_Tiestr, _Right._Tiestr);
		}

	void  set_rdbuf(_Mysb *_Strbuf)
		{	
		_Mystrbuf = _Strbuf;
		}

protected:
	void  init(_Mysb *_Strbuf = 0,
		bool _Isstd = false)
		{	
		_Init();	
		_Mystrbuf = _Strbuf;
		_Tiestr = 0;
		_Fillch = widen(' ');

		if (_Mystrbuf == 0)
			setstate(badbit);

		if (_Isstd)
			_Addstd(this);	
		}

	 basic_ios()
		{	
		}

private:
	_Mysb *_Mystrbuf;	
	_Myos *_Tiestr;	
	_Elem _Fillch;	

	 basic_ios(const _Myt&);	
	_Myt&  operator=(const _Myt&);	
	};

 

template class __declspec(dllimport) basic_ios<char,
	char_traits<char> >;
template class __declspec(dllimport) basic_ios<wchar_t,
	char_traits<wchar_t> >;



 #line 190 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\ios"

		
inline ios_base& __cdecl boolalpha(ios_base& _Iosbase)
	{	
	_Iosbase.setf(ios_base::boolalpha);
	return (_Iosbase);
	}

inline ios_base& __cdecl dec(ios_base& _Iosbase)
	{	
	_Iosbase.setf(ios_base::dec, ios_base::basefield);
	return (_Iosbase);
	}

 
inline ios_base& __cdecl defaultfloat(ios_base& _Iosbase)
	{	
	_Iosbase.unsetf(ios_base::floatfield);
	return (_Iosbase);
	}
 #line 211 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\ios"

inline ios_base& __cdecl fixed(ios_base& _Iosbase)
	{	
	_Iosbase.setf(ios_base::fixed, ios_base::floatfield);
	return (_Iosbase);
	}

inline ios_base& __cdecl hex(ios_base& _Iosbase)
	{	
	_Iosbase.setf(ios_base::hex, ios_base::basefield);
	return (_Iosbase);
	}

 
	namespace tr1 {	
inline ::std:: ios_base& __cdecl hexfloat(::std:: ios_base& _Iosbase)
	{	
	_Iosbase.setf(::std:: ios_base::hexfloat, ::std:: ios_base::floatfield);
	return (_Iosbase);
	}
	}	
 #line 233 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\ios"

 

using tr1::hexfloat;

 #line 239 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\ios"

inline ios_base& __cdecl internal(ios_base& _Iosbase)
	{	
	_Iosbase.setf(ios_base::internal, ios_base::adjustfield);
	return (_Iosbase);
	}

inline ios_base& __cdecl left(ios_base& _Iosbase)
	{	
	_Iosbase.setf(ios_base::left, ios_base::adjustfield);
	return (_Iosbase);
	}

inline ios_base& __cdecl noboolalpha(ios_base& _Iosbase)
	{	
	_Iosbase.unsetf(ios_base::boolalpha);
	return (_Iosbase);
	}

inline ios_base& __cdecl noshowbase(ios_base& _Iosbase)
	{	
	_Iosbase.unsetf(ios_base::showbase);
	return (_Iosbase);
	}

inline ios_base& __cdecl noshowpoint(ios_base& _Iosbase)
	{	
	_Iosbase.unsetf(ios_base::showpoint);
	return (_Iosbase);
	}

inline ios_base& __cdecl noshowpos(ios_base& _Iosbase)
	{	
	_Iosbase.unsetf(ios_base::showpos);
	return (_Iosbase);
	}

inline ios_base& __cdecl noskipws(ios_base& _Iosbase)
	{	
	_Iosbase.unsetf(ios_base::skipws);
	return (_Iosbase);
	}

inline ios_base& __cdecl nounitbuf(ios_base& _Iosbase)
	{	
	_Iosbase.unsetf(ios_base::unitbuf);
	return (_Iosbase);
	}

inline ios_base& __cdecl nouppercase(ios_base& _Iosbase)
	{	
	_Iosbase.unsetf(ios_base::uppercase);
	return (_Iosbase);
	}

inline ios_base& __cdecl oct(ios_base& _Iosbase)
	{	
	_Iosbase.setf(ios_base::oct, ios_base::basefield);
	return (_Iosbase);
	}

inline ios_base& __cdecl right(ios_base& _Iosbase)
	{	
	_Iosbase.setf(ios_base::right, ios_base::adjustfield);
	return (_Iosbase);
	}

inline ios_base& __cdecl scientific(ios_base& _Iosbase)
	{	
	_Iosbase.setf(ios_base::scientific, ios_base::floatfield);
	return (_Iosbase);
	}

inline ios_base& __cdecl showbase(ios_base& _Iosbase)
	{	
	_Iosbase.setf(ios_base::showbase);
	return (_Iosbase);
	}

inline ios_base& __cdecl showpoint(ios_base& _Iosbase)
	{	
	_Iosbase.setf(ios_base::showpoint);
	return (_Iosbase);
	}

inline ios_base& __cdecl showpos(ios_base& _Iosbase)
	{	
	_Iosbase.setf(ios_base::showpos);
	return (_Iosbase);
	}

inline ios_base& __cdecl skipws(ios_base& _Iosbase)
	{	
	_Iosbase.setf(ios_base::skipws);
	return (_Iosbase);
	}

inline ios_base& __cdecl unitbuf(ios_base& _Iosbase)
	{	
	_Iosbase.setf(ios_base::unitbuf);
	return (_Iosbase);
	}

inline ios_base& __cdecl uppercase(ios_base& _Iosbase)
	{	
	_Iosbase.setf(ios_base::uppercase);
	return (_Iosbase);
	}
}

 #pragma warning(pop)
 #pragma pack(pop)

#line 353 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\ios"
#line 354 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\ios"





#line 7 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\ostream"

 #pragma pack(push,8)
 #pragma warning(push,3)

 #pragma warning(disable: 4189 4390)

namespace std {
		

 
 

 



 



 



#line 32 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\ostream"

		
template<class _Elem,
	class _Traits>
	class basic_ostream
		: virtual public basic_ios<_Elem, _Traits>
	{	
public:
	typedef basic_ostream<_Elem, _Traits> _Myt;
	typedef basic_ios<_Elem, _Traits> _Myios;
	typedef basic_streambuf<_Elem, _Traits> _Mysb;
	typedef ostreambuf_iterator<_Elem, _Traits> _Iter;
	typedef num_put<_Elem, _Iter> _Nput;

	explicit  basic_ostream(
		basic_streambuf<_Elem, _Traits> *_Strbuf,

		bool _Isstd = false)
		{	
		_Myios::init(_Strbuf, _Isstd);
		}

	 basic_ostream(_Uninitialized, bool _Addit = true)
		{	
		if (_Addit)
			ios_base::_Addstd(this);	
		}

	 basic_ostream(_Myt&& _Right)
		{	
		_Myios::init();
		_Myios::move(::std:: move(_Right));
		}

	_Myt&  operator=(_Myt&& _Right)
		{	
		this->swap(_Right);
		return (*this);
		}

	void  swap(_Myt& _Right)
		{	
		if (this != &_Right)
			_Myios::swap(_Right);
		}

	virtual  ~basic_ostream()
		{	
		}

	typedef typename _Traits::int_type int_type;
	typedef typename _Traits::pos_type pos_type;
	typedef typename _Traits::off_type off_type;

	class _Sentry_base
		{	
	public:
		 _Sentry_base(_Myt& _Ostr)
			: _Myostr(_Ostr)
			{	
			if (_Myostr.rdbuf() != 0)
				_Myostr.rdbuf()->_Lock();
			}

		 ~_Sentry_base()
			{	
			if (_Myostr.rdbuf() != 0)
				_Myostr.rdbuf()->_Unlock();
			}

		_Myt& _Myostr;	

	private:
		_Sentry_base& operator=(const _Sentry_base&);
		};

	class sentry
		: public _Sentry_base
		{	
	public:
		explicit  sentry(_Myt& _Ostr)
			: _Sentry_base(_Ostr)
			{	
			if (_Ostr.good() && _Ostr.tie() != 0)
				_Ostr.tie()->flush();
			_Ok = _Ostr.good();	
			}

		 ~sentry()
			{	
 
			if (!uncaught_exception())
				this->_Myostr._Osfx();

 

#line 129 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\ostream"
			}

		 operator ::std:: _Bool_type() const
			{	
			return (_Ok ? (&::std:: _Bool_struct::_Member) : 0);
			}

	private:
		bool _Ok;	

		 sentry(const sentry&);	
		sentry&  operator=(const sentry&);	
		};

	bool  opfx()
		{	
		if (ios_base::good() && _Myios::tie() != 0)
			_Myios::tie()->flush();
		return (ios_base::good());
		}

	void  osfx()
		{	
		_Osfx();
		}

	void  _Osfx()
		{	
		try {
		if (ios_base::flags() & ios_base::unitbuf)
			flush();	
		} catch (...) {
		}
		}

  





















	_Myt&  operator<<(_Myt& (__cdecl *_Pfn)(_Myt&))
		{	
		;
		return ((*_Pfn)(*this));
		}

	_Myt&  operator<<(_Myios& (__cdecl *_Pfn)(_Myios&))
		{	
		;
		(*_Pfn)(*(_Myios *)this);
		return (*this);
		}

	_Myt&  operator<<(ios_base& (__cdecl *_Pfn)(ios_base&))
		{	
		;
		(*_Pfn)(*(ios_base *)this);
		return (*this);
		}

	_Myt&  operator<<(_Bool _Val)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const sentry _Ok(*this);

		if (_Ok)
			{	
			const _Nput& _Nput_fac = use_facet< _Nput >(ios_base::getloc());

			try {
			if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
				_Myios::fill(), _Val).failed())
				_State |= ios_base::badbit;
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

	_Myt&  operator<<(short _Val)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const sentry _Ok(*this);

		if (_Ok)
			{	
			const _Nput& _Nput_fac = use_facet< _Nput >(ios_base::getloc());
			ios_base::fmtflags _Bfl =
				ios_base::flags() & ios_base::basefield;
			long _Tmp = (_Bfl == ios_base::oct
				|| _Bfl == ios_base::hex)
				? (long)(unsigned short)_Val : (long)_Val;

			try {
			if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
				_Myios::fill(), _Tmp).failed())
				_State |= ios_base::badbit;
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}










	_Myt&  operator<<(unsigned short _Val)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const sentry _Ok(*this);

		if (_Ok)
			{	
			const _Nput& _Nput_fac = use_facet< _Nput >(ios_base::getloc());

			try {
			if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
				_Myios::fill(), (unsigned long)_Val).failed())
				_State |= ios_base::badbit;
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

	_Myt&  operator<<(int _Val)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const sentry _Ok(*this);

		if (_Ok)
			{	
			const _Nput& _Nput_fac = use_facet< _Nput >(ios_base::getloc());
			ios_base::fmtflags _Bfl =
				ios_base::flags() & ios_base::basefield;
			long _Tmp = (_Bfl == ios_base::oct
				|| _Bfl == ios_base::hex)
				? (long)(unsigned int)_Val : (long)_Val;

			try {
			if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
				_Myios::fill(), _Tmp).failed())
				_State |= ios_base::badbit;
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

	_Myt&  operator<<(unsigned int _Val)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const sentry _Ok(*this);

		if (_Ok)
			{	
			const _Nput& _Nput_fac = use_facet< _Nput >(ios_base::getloc());

			try {
			if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
				_Myios::fill(), (unsigned long)_Val).failed())
				_State |= ios_base::badbit;
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

	_Myt&  operator<<(long _Val)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const sentry _Ok(*this);

		if (_Ok)
			{	
			const _Nput& _Nput_fac = use_facet< _Nput >(ios_base::getloc());

			try {
			if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
				_Myios::fill(), _Val).failed())
				_State |= ios_base::badbit;
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

	_Myt&  operator<<(unsigned long _Val)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const sentry _Ok(*this);

		if (_Ok)
			{	
			const _Nput& _Nput_fac = use_facet< _Nput >(ios_base::getloc());

			try {
			if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
				_Myios::fill(), _Val).failed())
				_State |= ios_base::badbit;
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

 
	_Myt&  operator<<(__int64 _Val)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const sentry _Ok(*this);

		if (_Ok)
			{	
			const _Nput& _Nput_fac = use_facet< _Nput >(ios_base::getloc());

			try {
			if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
				_Myios::fill(), _Val).failed())
				_State |= ios_base::badbit;
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

	_Myt&  operator<<(unsigned __int64 _Val)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const sentry _Ok(*this);

		if (_Ok)
			{	
			const _Nput& _Nput_fac = use_facet< _Nput >(ios_base::getloc());

			try {
			if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
				_Myios::fill(), _Val).failed())
				_State |= ios_base::badbit;
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}
 #line 406 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\ostream"

	_Myt&  operator<<(float _Val)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const sentry _Ok(*this);

		if (_Ok)
			{	
			const _Nput& _Nput_fac = use_facet< _Nput >(ios_base::getloc());

			try {
			if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
				_Myios::fill(), (double)_Val).failed())
				_State |= ios_base::badbit;
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

	_Myt&  operator<<(double _Val)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const sentry _Ok(*this);

		if (_Ok)
			{	
			const _Nput& _Nput_fac = use_facet< _Nput >(ios_base::getloc());

			try {
			if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
				_Myios::fill(), _Val).failed())
				_State |= ios_base::badbit;
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

	_Myt&  operator<<(long double _Val)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const sentry _Ok(*this);

		if (_Ok)
			{	
			const _Nput& _Nput_fac = use_facet< _Nput >(ios_base::getloc());

			try {
			if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
				_Myios::fill(), _Val).failed())
				_State |= ios_base::badbit;
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

	_Myt&  operator<<(const void *_Val)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const sentry _Ok(*this);

		if (_Ok)
			{	
			const _Nput& _Nput_fac = use_facet< _Nput >(ios_base::getloc());

			try {
			if (_Nput_fac.put(_Iter(_Myios::rdbuf()), *this,
				_Myios::fill(), _Val).failed())
				_State |= ios_base::badbit;
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

	_Myt&  operator<<(_Mysb *_Strbuf)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		bool _Copied = false;
		const sentry _Ok(*this);

		if (_Ok && _Strbuf != 0)
			for (int_type _Meta = _Traits::eof(); ; _Copied = true)
				{	
				try {
				_Meta = _Traits::eq_int_type(_Traits::eof(), _Meta)
					? _Strbuf->sgetc() : _Strbuf->snextc();
				} catch (...) {
					_Myios::setstate(ios_base::failbit);
					throw;
				}

				if (_Traits::eq_int_type(_Traits::eof(), _Meta))
					break;	

				try {
					if (_Traits::eq_int_type(_Traits::eof(),
						_Myios::rdbuf()->sputc(
							_Traits::to_char_type(_Meta))))
						{	
						_State |= ios_base::badbit;
						break;
						}
				} catch (...) { _Myios::setstate(ios_base::badbit, true); }
				}

		ios_base::width(0);
		_Myios::setstate(_Strbuf == 0 ? ios_base::badbit
			: !_Copied ? _State | ios_base::failbit : _State);
		return (*this);
		}

	_Myt&  put(_Elem _Ch)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const sentry _Ok(*this);

		if (!_Ok)
			_State |= ios_base::badbit;
		else
			{	
			try {
			if (_Traits::eq_int_type(_Traits::eof(),
				_Myios::rdbuf()->sputc(_Ch)))
				_State |= ios_base::badbit;
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

	_Myt&  write(const _Elem *_Str,
		streamsize _Count)
		{	
 


#line 551 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\ostream"

		ios_base::iostate _State = ios_base::goodbit;
		const sentry _Ok(*this);

		if (!_Ok)
			_State |= ios_base::badbit;
		else
			{	
			try {
			if (_Myios::rdbuf()->sputn(_Str, _Count) != _Count)
				_State |= ios_base::badbit;
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

	_Myt&  flush()
		{	
		ios_base::iostate _State = ios_base::goodbit;
		if (!ios_base::fail() && _Myios::rdbuf()->pubsync() == -1)
			_State |= ios_base::badbit;	
		_Myios::setstate(_State);
		return (*this);
		}

	_Myt&  seekp(pos_type _Pos)
		{	
		if (!ios_base::fail()
			&& (off_type)_Myios::rdbuf()->pubseekpos(_Pos,
				ios_base::out) == _BADOFF)
			_Myios::setstate(ios_base::failbit);
		return (*this);
		}

	_Myt&  seekp(off_type _Off, ios_base::seekdir _Way)
		{	
		if (!ios_base::fail()
			&& (off_type)_Myios::rdbuf()->pubseekoff(_Off, _Way,
				ios_base::out) == _BADOFF)
			_Myios::setstate(ios_base::failbit);
		return (*this);
		}

	pos_type  tellp()
		{	
		if (!ios_base::fail())
			return (_Myios::rdbuf()->pubseekoff(0,
				ios_base::cur, ios_base::out));
		else
			return (pos_type(_BADOFF));
		}
	};

	
template<class _Elem,
	class _Traits> inline
	void swap(basic_ostream<_Elem, _Traits>& _Left,
		basic_ostream<_Elem, _Traits>& _Right)
	{	
	_Left.swap(_Right);
	}

  

















































 

template class __declspec(dllimport) basic_ostream<char,
	char_traits<char> >;
template class __declspec(dllimport) basic_ostream<wchar_t,
	char_traits<wchar_t> >;


 #line 674 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\ostream"

		

template<class _Elem,
	class _Traits> inline
	basic_ostream<_Elem, _Traits>& operator<<(
		basic_ostream<_Elem, _Traits>& _Ostr, const char *_Val)
	{	
	ios_base::iostate _State = ios_base::goodbit;
	streamsize _Count = (streamsize):: strlen(_Val);	
	streamsize _Pad = _Ostr.width() <= 0 || _Ostr.width() <= _Count
		? 0 : _Ostr.width() - _Count;
	const typename basic_ostream<_Elem, _Traits>::sentry _Ok(_Ostr);

	if (!_Ok)
		_State |= ios_base::badbit;
	else
		{	
		try {
		const ctype<_Elem>& _Ctype_fac = use_facet< ctype<_Elem> >(_Ostr.getloc());
		if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)
			for (; 0 < _Pad; --_Pad)	
				if (_Traits::eq_int_type(_Traits::eof(),
					_Ostr.rdbuf()->sputc(_Ostr.fill())))
					{	
					_State |= ios_base::badbit;
					break;
					}

		for (; _State == ios_base::goodbit && 0 < _Count; --_Count, ++_Val)
			if (_Traits::eq_int_type(_Traits::eof(),
				_Ostr.rdbuf()->sputc(_Ctype_fac.widen(*_Val))))
					_State |= ios_base::badbit;

		if (_State == ios_base::goodbit)
			for (; 0 < _Pad; --_Pad)	
				if (_Traits::eq_int_type(_Traits::eof(),
					_Ostr.rdbuf()->sputc(_Ostr.fill())))
					{	
					_State |= ios_base::badbit;
					break;
					}
		_Ostr.width(0);
		} catch (...) { (_Ostr).setstate(ios_base::badbit, true); }
		}

	_Ostr.setstate(_State);
	return (_Ostr);
	}

template<class _Elem,
	class _Traits> inline
	basic_ostream<_Elem, _Traits>& operator<<(
		basic_ostream<_Elem, _Traits>& _Ostr, char _Ch)
	{	
	ios_base::iostate _State = ios_base::goodbit;
	const typename basic_ostream<_Elem, _Traits>::sentry _Ok(_Ostr);

	if (_Ok)
		{	
		const ctype<_Elem>& _Ctype_fac = use_facet< ctype<_Elem> >(_Ostr.getloc());
		streamsize _Pad = _Ostr.width() <= 1 ? 0 : _Ostr.width() - 1;

		try {
		if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)
			for (; _State == ios_base::goodbit && 0 < _Pad;
				--_Pad)	
				if (_Traits::eq_int_type(_Traits::eof(),
					_Ostr.rdbuf()->sputc(_Ostr.fill())))
					_State |= ios_base::badbit;

		if (_State == ios_base::goodbit
			&& _Traits::eq_int_type(_Traits::eof(),
				_Ostr.rdbuf()->sputc(_Ctype_fac.widen(_Ch))))
			_State |= ios_base::badbit;

		for (; _State == ios_base::goodbit && 0 < _Pad;
			--_Pad)	
			if (_Traits::eq_int_type(_Traits::eof(),
				_Ostr.rdbuf()->sputc(_Ostr.fill())))
				_State |= ios_base::badbit;
		} catch (...) { (_Ostr).setstate(ios_base::badbit, true); }
		}

	_Ostr.width(0);
	_Ostr.setstate(_State);
	return (_Ostr);
	}

template<class _Traits> inline
	basic_ostream<char, _Traits>& operator<<(
		basic_ostream<char, _Traits>& _Ostr,
		const char *_Val)
	{	
	typedef char _Elem;
	typedef basic_ostream<_Elem, _Traits> _Myos;
	ios_base::iostate _State = ios_base::goodbit;
	streamsize _Count = (streamsize)_Traits::length(_Val);	
	streamsize _Pad = _Ostr.width() <= 0 || _Ostr.width() <= _Count
		? 0 : _Ostr.width() - _Count;
	const typename _Myos::sentry _Ok(_Ostr);

	if (!_Ok)
		_State |= ios_base::badbit;
	else
		{	
		try {
		if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)
			for (; 0 < _Pad; --_Pad)	
				if (_Traits::eq_int_type(_Traits::eof(),
					_Ostr.rdbuf()->sputc(_Ostr.fill())))
					{	
					_State |= ios_base::badbit;
					break;
					}

		if (_State == ios_base::goodbit
			&& _Ostr.rdbuf()->sputn(_Val, _Count) != _Count)
			_State |= ios_base::badbit;

		if (_State == ios_base::goodbit)
			for (; 0 < _Pad; --_Pad)	
				if (_Traits::eq_int_type(_Traits::eof(),
					_Ostr.rdbuf()->sputc(_Ostr.fill())))
					{	
					_State |= ios_base::badbit;
					break;
					}
		_Ostr.width(0);
		} catch (...) { (_Ostr).setstate(ios_base::badbit, true); }
		}

	_Ostr.setstate(_State);
	return (_Ostr);
	}

template<class _Traits> inline
	basic_ostream<char, _Traits>& operator<<(
		basic_ostream<char, _Traits>& _Ostr, char _Ch)
	{	
	typedef char _Elem;
	typedef basic_ostream<_Elem, _Traits> _Myos;
	ios_base::iostate _State = ios_base::goodbit;
	const typename _Myos::sentry _Ok(_Ostr);

	if (_Ok)
		{	
		streamsize _Pad = _Ostr.width() <= 1 ? 0 : _Ostr.width() - 1;

		try {
		if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)
			for (; _State == ios_base::goodbit && 0 < _Pad;
				--_Pad)	
				if (_Traits::eq_int_type(_Traits::eof(),
					_Ostr.rdbuf()->sputc(_Ostr.fill())))
					_State |= ios_base::badbit;

		if (_State == ios_base::goodbit
			&& _Traits::eq_int_type(_Traits::eof(),
				_Ostr.rdbuf()->sputc(_Ch)))
			_State |= ios_base::badbit;

		for (; _State == ios_base::goodbit && 0 < _Pad;
			--_Pad)	
			if (_Traits::eq_int_type(_Traits::eof(),
				_Ostr.rdbuf()->sputc(_Ostr.fill())))
				_State |= ios_base::badbit;
		} catch (...) { (_Ostr).setstate(ios_base::badbit, true); }
		}

	_Ostr.width(0);
	_Ostr.setstate(_State);
	return (_Ostr);
	}

template<class _Elem,
	class _Traits> inline
	basic_ostream<_Elem, _Traits>& operator<<(
		basic_ostream<_Elem, _Traits>& _Ostr, const _Elem *_Val)
	{	
	typedef basic_ostream<_Elem, _Traits> _Myos;

	ios_base::iostate _State = ios_base::goodbit;
	streamsize _Count = (streamsize)_Traits::length(_Val);	
	streamsize _Pad = _Ostr.width() <= 0 || _Ostr.width() <= _Count
		? 0 : _Ostr.width() - _Count;
	const typename _Myos::sentry _Ok(_Ostr);

	if (!_Ok)
		_State |= ios_base::badbit;
	else
		{	
		try {
		if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)
			for (; 0 < _Pad; --_Pad)	
				if (_Traits::eq_int_type(_Traits::eof(),
					_Ostr.rdbuf()->sputc(_Ostr.fill())))
					{	
					_State |= ios_base::badbit;
					break;
					}

		if (_State == ios_base::goodbit
			&& _Ostr.rdbuf()->sputn(_Val, _Count) != _Count)
			_State |= ios_base::badbit;

		if (_State == ios_base::goodbit)
			for (; 0 < _Pad; --_Pad)	
				if (_Traits::eq_int_type(_Traits::eof(),
					_Ostr.rdbuf()->sputc(_Ostr.fill())))
					{	
					_State |= ios_base::badbit;
					break;
					}
		_Ostr.width(0);
		} catch (...) { (_Ostr).setstate(ios_base::badbit, true); }
		}

	_Ostr.setstate(_State);
	return (_Ostr);
	}

template<class _Elem,
	class _Traits> inline
	basic_ostream<_Elem, _Traits>& operator<<(
		basic_ostream<_Elem, _Traits>& _Ostr, _Elem _Ch)
	{	
	typedef basic_ostream<_Elem, _Traits> _Myos;

	ios_base::iostate _State = ios_base::goodbit;
	const typename _Myos::sentry _Ok(_Ostr);

	if (_Ok)
		{	
		streamsize _Pad = _Ostr.width() <= 1 ? 0 : _Ostr.width() - 1;

		try {
		if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)
			for (; _State == ios_base::goodbit && 0 < _Pad;
				--_Pad)	
				if (_Traits::eq_int_type(_Traits::eof(),
					_Ostr.rdbuf()->sputc(_Ostr.fill())))
					_State |= ios_base::badbit;

		if (_State == ios_base::goodbit
			&& _Traits::eq_int_type(_Traits::eof(),
				_Ostr.rdbuf()->sputc(_Ch)))
			_State |= ios_base::badbit;

		for (; _State == ios_base::goodbit && 0 < _Pad;
			--_Pad)	
			if (_Traits::eq_int_type(_Traits::eof(),
				_Ostr.rdbuf()->sputc(_Ostr.fill())))
				_State |= ios_base::badbit;
		} catch (...) { (_Ostr).setstate(ios_base::badbit, true); }
		}

	_Ostr.width(0);
	_Ostr.setstate(_State);
	return (_Ostr);
	}

template<class _Traits> inline
	basic_ostream<char, _Traits>& operator<<(
		basic_ostream<char, _Traits>& _Ostr, const signed char *_Val)
	{	
	return (_Ostr << (const char *)_Val);
	}

template<class _Traits> inline
	basic_ostream<char, _Traits>& operator<<(
		basic_ostream<char, _Traits>& _Ostr, signed char _Ch)
	{	
	return (_Ostr << (char)_Ch);
	}

template<class _Traits> inline
	basic_ostream<char, _Traits>& operator<<(
		basic_ostream<char, _Traits>& _Ostr, const unsigned char *_Val)
	{	
	return (_Ostr << (const char *)_Val);
	}

template<class _Traits> inline
	basic_ostream<char, _Traits>& operator<<(
		basic_ostream<char, _Traits>& _Ostr, unsigned char _Ch)
	{	
	return (_Ostr << (char)_Ch);
	}

template<class _Elem,
	class _Traits,
	class _Ty> inline
	basic_ostream<_Elem, _Traits>&
		operator<<(basic_ostream<_Elem, _Traits>&& _Ostr, _Ty _Val)
	{	
	return (_Ostr << _Val);
	}

		
template<class _Elem,
	class _Traits> inline
	basic_ostream<_Elem, _Traits>&
		__cdecl endl(basic_ostream<_Elem, _Traits>& _Ostr)
	{	
	_Ostr.put(_Ostr.widen('\n'));
	_Ostr.flush();
	return (_Ostr);
	}

template<class _Elem,
	class _Traits> inline
	basic_ostream<_Elem, _Traits>&
		__cdecl ends(basic_ostream<_Elem, _Traits>& _Ostr)
	{	
	_Ostr.put(_Elem());
	return (_Ostr);
	}

template<class _Elem,
	class _Traits> inline
	basic_ostream<_Elem, _Traits>&
		__cdecl flush(basic_ostream<_Elem, _Traits>& _Ostr)
	{	
	_Ostr.flush();
	return (_Ostr);
	}

__declspec(dllimport) inline basic_ostream<char, char_traits<char> >&
	__cdecl endl(basic_ostream<char, char_traits<char> >& _Ostr)
	{	
	_Ostr.put('\n');
	_Ostr.flush();
	return (_Ostr);
	}

__declspec(dllimport) inline basic_ostream<wchar_t, char_traits<wchar_t> >&
	__cdecl endl(basic_ostream<wchar_t,
		char_traits<wchar_t> >& _Ostr)
	{	
	_Ostr.put('\n');
	_Ostr.flush();
	return (_Ostr);
	}

 
__declspec(dllimport) inline basic_ostream<unsigned short, char_traits<unsigned short> >&
	__cdecl endl(basic_ostream<unsigned short,
		char_traits<unsigned short> >& _Ostr)
	{	
	_Ostr.put('\n');
	_Ostr.flush();
	return (_Ostr);
	}
 #line 1029 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\ostream"

__declspec(dllimport) inline basic_ostream<char, char_traits<char> >&
	__cdecl ends(basic_ostream<char, char_traits<char> >& _Ostr)
	{	
	_Ostr.put('\0');
	return (_Ostr);
	}

__declspec(dllimport) inline basic_ostream<wchar_t, char_traits<wchar_t> >&
	__cdecl ends(basic_ostream<wchar_t,
		char_traits<wchar_t> >& _Ostr)
	{	
	_Ostr.put('\0');
	return (_Ostr);
	}

 
__declspec(dllimport) inline basic_ostream<unsigned short, char_traits<unsigned short> >&
	__cdecl ends(basic_ostream<unsigned short,
		char_traits<unsigned short> >& _Ostr)
	{	
	_Ostr.put('\0');
	return (_Ostr);
	}
 #line 1054 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\ostream"

__declspec(dllimport) inline basic_ostream<char, char_traits<char> >&
	__cdecl flush(basic_ostream<char, char_traits<char> >& _Ostr)
	{	
	_Ostr.flush();
	return (_Ostr);
	}

__declspec(dllimport) inline basic_ostream<wchar_t, char_traits<wchar_t> >&
	__cdecl flush(basic_ostream<wchar_t,
		char_traits<wchar_t> >& _Ostr)
	{	
	_Ostr.flush();
	return (_Ostr);
	}

 
__declspec(dllimport) inline basic_ostream<unsigned short, char_traits<unsigned short> >&
	__cdecl flush(basic_ostream<unsigned short,
		char_traits<unsigned short> >& _Ostr)
	{	
	_Ostr.flush();
	return (_Ostr);
	}
 #line 1079 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\ostream"

 
		
template<class _Elem,
	class _Traits> inline
	basic_ostream<_Elem, _Traits>&
		operator<<(basic_ostream<_Elem, _Traits>& _Ostr,
			const error_code& _Errcode)
	{	
	return (_Ostr << _Errcode.category().name() << ':' << _Errcode.value());
	}
 #line 1091 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\ostream"
}

 #pragma warning(pop)
 #pragma pack(pop)

#line 1097 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\ostream"
#line 1098 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\ostream"






#line 7 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\istream"

 #pragma pack(push,8)
 #pragma warning(push,3)

 #pragma warning(disable: 4189)

namespace std {
		
template<class _Elem,
	class _Traits>
	class basic_istream
		: virtual public basic_ios<_Elem, _Traits>
	{	
public:
	typedef basic_istream<_Elem, _Traits> _Myt;
	typedef basic_ios<_Elem, _Traits> _Myios;
	typedef basic_streambuf<_Elem, _Traits> _Mysb;
	typedef istreambuf_iterator<_Elem, _Traits> _Iter;
	typedef ctype<_Elem> _Ctype;
	typedef num_get<_Elem, _Iter> _Nget;


	explicit  basic_istream(_Mysb *_Strbuf,
		bool _Isstd = false)

		: _Chcount(0)
		{	
		_Myios::init(_Strbuf, _Isstd);
		}

	 basic_istream(_Uninitialized)
		{	
		ios_base::_Addstd(this);
		}

	 basic_istream(_Myt&& _Right)
		: _Chcount(_Right._Chcount)
		{	
		_Myios::init();
		_Myios::move(::std:: move(_Right));
		_Right._Chcount = 0;
		}

	_Myt&  operator=(_Myt&& _Right)
		{	
		this->swap(_Right);
		return (*this);
		}

	void  swap(_Myt& _Right)
		{	
		_Myios::swap(_Right);
		::std:: swap(_Chcount, _Right._Chcount);
		}

	virtual  ~basic_istream()
		{	
		}

	typedef typename _Traits::int_type int_type;
	typedef typename _Traits::pos_type pos_type;
	typedef typename _Traits::off_type off_type;

		
	class _Sentry_base
		{	
	public:
		 _Sentry_base(_Myt& _Istr)
			: _Myistr(_Istr)
			{	
			if (_Myistr.rdbuf() != 0)
				_Myistr.rdbuf()->_Lock();
			}

		 ~_Sentry_base()
			{	
			if (_Myistr.rdbuf() != 0)
				_Myistr.rdbuf()->_Unlock();
			}

		_Myt& _Myistr;	

	private:
		_Sentry_base& operator=(const _Sentry_base&);
		};

	class sentry
		: public _Sentry_base
		{	
	public:
		explicit  sentry(_Myt& _Istr, bool _Noskip = false)
			: _Sentry_base(_Istr)
			{	
			_Ok = this->_Myistr._Ipfx(_Noskip);
			}

		 operator ::std:: _Bool_type() const
			{	
			return (_Ok ? (&::std:: _Bool_struct::_Member) : 0);
			}

	private:
		bool _Ok;	

		 sentry(const sentry&);	
		sentry&  operator=(const sentry&);	
		};

	bool  _Ipfx(bool _Noskip = false)
		{	
		if (ios_base::good())
			{	
			if (_Myios::tie() != 0)
				_Myios::tie()->flush();

			if (!_Noskip && ios_base::flags() & ios_base::skipws)
				{	
				const _Ctype& _Ctype_fac = use_facet< _Ctype >(ios_base::getloc());

				try {
				int_type _Meta = _Myios::rdbuf()->sgetc();

				for (; ; _Meta = _Myios::rdbuf()->snextc())
					if (_Traits::eq_int_type(_Traits::eof(), _Meta))
						{	
						_Myios::setstate(ios_base::eofbit);
						break;
						}
					else if (!_Ctype_fac.is(_Ctype::space,
						_Traits::to_char_type(_Meta)))
						break;	
				} catch (...) { _Myios::setstate(ios_base::badbit, true); }
				}

			if (ios_base::good())
				return (true);
			}
		_Myios::setstate(ios_base::failbit);
		return (false);
		}

	bool  ipfx(bool _Noskip = false)
		{	
		return (_Ipfx(_Noskip));
		}

	void  isfx()
		{	
		}

  





















	_Myt&  operator>>(_Myt& (__cdecl *_Pfn)(_Myt&))
		{	
		;
		return ((*_Pfn)(*this));
		}

	_Myt&  operator>>(_Myios& (__cdecl *_Pfn)(_Myios&))
		{	
		;
		(*_Pfn)(*(_Myios *)this);
		return (*this);
		}

	_Myt&  operator>>(ios_base& (__cdecl *_Pfn)(ios_base&))
		{	
		;
		(*_Pfn)(*(ios_base *)this);
		return (*this);
		}

	_Myt&  operator>>(_Bool& _Val)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const sentry _Ok(*this);

		if (_Ok)
			{	
			const _Nget& _Nget_fac = use_facet< _Nget >(ios_base::getloc());

			try {
			_Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
				*this, _State, _Val);
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

	_Myt&  operator>>(short& _Val)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const sentry _Ok(*this);

		if (_Ok)
			{	
			long _Tmp = 0;
			const _Nget& _Nget_fac = use_facet< _Nget >(ios_base::getloc());

			try {
			_Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
				*this, _State, _Tmp);
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }

			if (_State & ios_base::failbit
				|| _Tmp < (-32768) || 32767 < _Tmp)
				_State |= ios_base::failbit;
			else
				_Val = (short)_Tmp;
			}

		_Myios::setstate(_State);
		return (*this);
		}










	_Myt&  operator>>(unsigned short& _Val)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const sentry _Ok(*this);

		if (_Ok)
			{	
			const _Nget& _Nget_fac = use_facet< _Nget >(ios_base::getloc());

			try {
			_Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
				*this, _State, _Val);
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

	_Myt&  operator>>(int& _Val)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const sentry _Ok(*this);

		if (_Ok)
			{	
			long _Tmp = 0;
			const _Nget& _Nget_fac = use_facet< _Nget >(ios_base::getloc());

			try {
			_Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
				*this, _State, _Tmp);
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }

			if (_State & ios_base::failbit
				|| _Tmp < (-2147483647 - 1) || 2147483647 < _Tmp)
				_State |= ios_base::failbit;
			else
				_Val = _Tmp;
			}

		_Myios::setstate(_State);
		return (*this);
		}

	_Myt&  operator>>(unsigned int& _Val)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const sentry _Ok(*this);
		if (_Ok)
			{	
			const _Nget& _Nget_fac = use_facet< _Nget >(ios_base::getloc());

			try {
			_Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
				*this, _State, _Val);
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

	_Myt&  operator>>(long& _Val)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const sentry _Ok(*this);

		if (_Ok)
			{	
			const _Nget& _Nget_fac = use_facet< _Nget >(ios_base::getloc());
			try {
			_Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
				*this, _State, _Val);
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

	_Myt&  operator>>(unsigned long& _Val)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const sentry _Ok(*this);

		if (_Ok)
			{	
			const _Nget& _Nget_fac = use_facet< _Nget >(ios_base::getloc());

			try {
			_Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
				*this, _State, _Val);
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

 
	_Myt&  operator>>(__int64& _Val)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const sentry _Ok(*this);

		if (_Ok)
			{	
			const _Nget& _Nget_fac = use_facet< _Nget >(ios_base::getloc());

			try {
			_Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
				*this, _State, _Val);
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

	_Myt&  operator>>(unsigned __int64& _Val)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const sentry _Ok(*this);
		if (_Ok)
			{	
			const _Nget& _Nget_fac = use_facet< _Nget >(ios_base::getloc());

			try {
			_Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
				*this, _State, _Val);
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}
 #line 391 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\istream"

	_Myt&  operator>>(float& _Val)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const sentry _Ok(*this);

		if (_Ok)
			{	
			const _Nget& _Nget_fac = use_facet< _Nget >(ios_base::getloc());

			try {
			_Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
				*this, _State, _Val);
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

	_Myt&  operator>>(double& _Val)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const sentry _Ok(*this);
		if (_Ok)
			{	
			const _Nget& _Nget_fac = use_facet< _Nget >(ios_base::getloc());

			try {
			_Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
				*this, _State, _Val);
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

	_Myt&  operator>>(long double& _Val)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const sentry _Ok(*this);

		if (_Ok)
			{	
			const _Nget& _Nget_fac = use_facet< _Nget >(ios_base::getloc());
			try {
			_Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
				*this, _State, _Val);
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

	_Myt&  operator>>(void *& _Val)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const sentry _Ok(*this);

		if (_Ok)
			{	
			const _Nget& _Nget_fac = use_facet< _Nget >(ios_base::getloc());

			try {
			_Nget_fac.get(_Iter(_Myios::rdbuf()), _Iter(0),
				*this, _State, _Val);
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

	_Myt&  operator>>(_Mysb *_Strbuf)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		bool _Copied = false;
		const sentry _Ok(*this);

		if (_Ok && _Strbuf != 0)
			{	
			try {
			int_type _Meta = _Myios::rdbuf()->sgetc();

			for (; ; _Meta = _Myios::rdbuf()->snextc())
				if (_Traits::eq_int_type(_Traits::eof(), _Meta))
					{	
					_State |= ios_base::eofbit;
					break;
					}
				else
					{	
					try {
						if (_Traits::eq_int_type(_Traits::eof(),
							_Strbuf->sputc(_Traits::to_char_type(_Meta))))
							break;
					} catch (...) {
						break;
					}
					_Copied = true;
					}
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(!_Copied ? _State | ios_base::failbit : _State);
		return (*this);
		}

	int_type  get()
		{	
		int_type _Meta = 0;
		ios_base::iostate _State = ios_base::goodbit;
		_Chcount = 0;
		const sentry _Ok(*this, true);

		if (!_Ok)
			_Meta = _Traits::eof();	
		else
			{	
			try {
			_Meta = _Myios::rdbuf()->sgetc();

			if (_Traits::eq_int_type(_Traits::eof(), _Meta))
				_State |= ios_base::eofbit | ios_base::failbit;	
			else
				{	
				_Myios::rdbuf()->sbumpc();
				++_Chcount;
				}
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (_Meta);
		}

	_Myt&  get(_Elem *_Str, streamsize _Count)
		{	
		return (get(_Str, _Count, _Myios::widen('\n')));
		}

	_Myt&  get(_Elem *_Str,
		streamsize _Count, _Elem _Delim)
		{	
		;
		ios_base::iostate _State = ios_base::goodbit;
		_Chcount = 0;
		const sentry _Ok(*this, true);

		if (_Ok && 0 < _Count)
			{	
			try {
			int_type _Meta = _Myios::rdbuf()->sgetc();

			for (; 0 < --_Count; _Meta = _Myios::rdbuf()->snextc())
				if (_Traits::eq_int_type(_Traits::eof(), _Meta))
					{	
					_State |= ios_base::eofbit;
					break;
					}
				else if (_Traits::to_char_type(_Meta) == _Delim)
					break;	
				else
					{	
					*_Str++ = _Traits::to_char_type(_Meta);
					++_Chcount;
					}
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_Chcount == 0
			? _State | ios_base::failbit : _State);
		*_Str = _Elem();	
		return (*this);
		}

	_Myt&  get(_Elem& _Ch)
		{	
		int_type _Meta = get();
		if (!_Traits::eq_int_type(_Traits::eof(), _Meta))
			_Ch = _Traits::to_char_type(_Meta);
		return (*this);
		}

	_Myt&  get(_Mysb& _Strbuf)
		{	
		return (get(_Strbuf, _Myios::widen('\n')));
		}

	_Myt&  get(_Mysb& _Strbuf, _Elem _Delim)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		_Chcount = 0;
		const sentry _Ok(*this, true);

		if (_Ok)
			{	
			try {
			int_type _Meta = _Myios::rdbuf()->sgetc();

			for (; ; _Meta = _Myios::rdbuf()->snextc())
				if (_Traits::eq_int_type(_Traits::eof(), _Meta))
					{	
					_State |= ios_base::eofbit;
					break;
					}
				else
					{	
					try {
						_Elem _Ch = _Traits::to_char_type(_Meta);
						if (_Ch == _Delim
							|| _Traits::eq_int_type(_Traits::eof(),
								_Strbuf.sputc(_Ch)))
							break;
					} catch (...) {
						break;
					}
					++_Chcount;
					}
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		if (_Chcount == 0)
			_State |= ios_base::failbit;
		_Myios::setstate(_State);
		return (*this);
		}

	_Myt&  getline(_Elem *_Str, streamsize _Count)
		{	
		return (getline(_Str, _Count, _Myios::widen('\n')));
		}

	_Myt&  getline(_Elem *_Str,
		streamsize _Count, _Elem _Delim)
		{	
		;
		ios_base::iostate _State = ios_base::goodbit;
		_Chcount = 0;
		const sentry _Ok(*this, true);

		if (_Ok && 0 < _Count)
			{	
			int_type _Metadelim = _Traits::to_int_type(_Delim);

			try {
			int_type _Meta = _Myios::rdbuf()->sgetc();

			for (; ; _Meta = _Myios::rdbuf()->snextc())
				if (_Traits::eq_int_type(_Traits::eof(), _Meta))
					{	
					_State |= ios_base::eofbit;
					break;
					}
				else if (_Meta == _Metadelim)
					{	
					++_Chcount;
					_Myios::rdbuf()->sbumpc();
					break;
					}
				else if (--_Count <= 0)
					{	
					_State |= ios_base::failbit;
					break;
					}
				else
					{	
					++_Chcount;
					*_Str++ = _Traits::to_char_type(_Meta);
					}
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		*_Str = _Elem();	
		_Myios::setstate(_Chcount == 0 ? _State | ios_base::failbit : _State);
		return (*this);
		}

	_Myt&  ignore(streamsize _Count = 1,
		int_type _Metadelim = _Traits::eof())
		{	
		ios_base::iostate _State = ios_base::goodbit;
		_Chcount = 0;
		const sentry _Ok(*this, true);

		if (_Ok && 0 < _Count)
			{	
			try {
			for (; ; )
				{	
				int_type _Meta;
				if (_Count != 2147483647 && --_Count < 0)
					break;	
				else if (_Traits::eq_int_type(_Traits::eof(),
					_Meta = _Myios::rdbuf()->sbumpc()))
					{	
					_State |= ios_base::eofbit;
					break;
					}
				else
					{	
					++_Chcount;
					if (_Meta == _Metadelim)
						break;	
					}
				}
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

	_Myt&  read(_Elem *_Str, streamsize _Count)
		{	
		;
		ios_base::iostate _State = ios_base::goodbit;
		_Chcount = 0;
		const sentry _Ok(*this, true);

		if (_Ok)
			{	
			try {
			const streamsize _Num = _Myios::rdbuf()->sgetn(_Str, _Count);
			_Chcount += _Num;
			if (_Num != _Count)
				_State |= ios_base::eofbit | ios_base::failbit;	
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

	streamsize  readsome(_Elem *_Str,
		streamsize _Count)
		{	
		;
		ios_base::iostate _State = ios_base::goodbit;
		_Chcount = 0;
		const sentry _Ok(*this, true);
		streamsize _Num;

		if (!_Ok)
			_State |= ios_base::failbit;	
		else if ((_Num = _Myios::rdbuf()->in_avail()) < 0)
			_State |= ios_base::eofbit;	
		else if (0 < _Num)
			read(_Str, _Num < _Count ? _Num : _Count);	

		_Myios::setstate(_State);
		return (gcount());
		}

	int_type  peek()
		{	
		ios_base::iostate _State = ios_base::goodbit;
		_Chcount = 0;
		int_type _Meta = 0;
		const sentry _Ok(*this, true);

		if (!_Ok)
			_Meta = _Traits::eof();	
		else
			{	
			try {
			if (_Traits::eq_int_type(_Traits::eof(),
				_Meta = _Myios::rdbuf()->sgetc()))
				_State |= ios_base::eofbit;
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (_Meta);
		}

	_Myt&  putback(_Elem _Ch)
		{	
		ios_base::iostate _State = ios_base::goodbit;
		_Chcount = 0;
		const sentry _Ok(*this, true);

		if (_Ok)
			{	
			try {
			if (_Traits::eq_int_type(_Traits::eof(),
				_Myios::rdbuf()->sputbackc(_Ch)))
				_State |= ios_base::badbit;
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

	_Myt&  unget()
		{	
		ios_base::iostate _State = ios_base::goodbit;
		_Chcount = 0;
		const sentry _Ok(*this, true);

		if (_Ok)
			{	
			try {
			if (_Traits::eq_int_type(_Traits::eof(),
				_Myios::rdbuf()->sungetc()))
				_State |= ios_base::badbit;
			} catch (...) { _Myios::setstate(ios_base::badbit, true); }
			}

		_Myios::setstate(_State);
		return (*this);
		}

	streamsize  gcount() const
		{	
		return (_Chcount);
		}

	int  sync()
		{	
		ios_base::iostate _State = ios_base::goodbit;
		int _Ans;

		if (_Myios::rdbuf() == 0)
			_Ans = -1;	
		else if (_Myios::rdbuf()->pubsync() == -1)
			{	
			_State |= ios_base::badbit;
			_Ans = -1;
			}
		else
			_Ans = 0;	

		_Myios::setstate(_State);
		return (_Ans);
		}

	_Myt&  seekg(pos_type _Pos)
		{	
		if (!ios_base::fail()
			&& (off_type)_Myios::rdbuf()->pubseekpos(_Pos,
				ios_base::in) == _BADOFF)
			_Myios::setstate(ios_base::failbit);
		return (*this);
		}

	_Myt&  seekg(off_type _Off, ios_base::seekdir _Way)
		{	
		if (!ios_base::fail()
			&& (off_type)_Myios::rdbuf()->pubseekoff(_Off, _Way,
				ios_base::in) == _BADOFF)
			_Myios::setstate(ios_base::failbit);
		return (*this);
		}

	pos_type  tellg()
		{	
		if (!ios_base::fail())
			return (_Myios::rdbuf()->pubseekoff(0,
				ios_base::cur, ios_base::in));
		else
			return (pos_type(_BADOFF));
		}

private:
	streamsize _Chcount;	
	};

	
template<class _Elem,
	class _Traits> inline
	void swap(basic_istream<_Elem, _Traits>& _Left,
		basic_istream<_Elem, _Traits>& _Right)
	{	
	_Left.swap(_Right);
	}

  




































 

template class __declspec(dllimport) basic_istream<char,
	char_traits<char> >;
template class __declspec(dllimport) basic_istream<wchar_t,
	char_traits<wchar_t> >;


 #line 917 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\istream"

		
template<class _Elem,
	class _Traits>
	class basic_iostream
	: public basic_istream<_Elem, _Traits>,
		public basic_ostream<_Elem, _Traits>
	{	
public:
	typedef basic_iostream<_Elem, _Traits> _Myt;
	typedef basic_istream<_Elem, _Traits> _Myis;
	typedef basic_ostream<_Elem, _Traits> _Myos;
	typedef basic_ios<_Elem, _Traits> _Myios;
	typedef _Elem char_type;
	typedef _Traits traits_type;
	typedef typename _Traits::int_type int_type;
	typedef typename _Traits::pos_type pos_type;
	typedef typename _Traits::off_type off_type;

	explicit  basic_iostream(basic_streambuf<_Elem, _Traits> *_Strbuf)
		: _Myis(_Strbuf, false),
			_Myos(_Noinit, false)
		{	
		}

	 basic_iostream(_Myt&& _Right)
		: _Myis(_Right.rdbuf(), false),
			_Myos(_Noinit, false)
		{	
		_Myios::init();
		_Myios::move(::std:: forward<_Myt>(_Right));
		}

	_Myt&  operator=(_Myt&& _Right)
		{	
		this->swap(_Right);
		return (*this);
		}

	void  swap(_Myt& _Right)
		{	
		if (this != &_Right)
			_Myios::swap(_Right);
		}

	virtual  ~basic_iostream()
		{	
		}
	};

	
template<class _Elem,
	class _Traits> inline
	void swap(basic_iostream<_Elem, _Traits>& _Left,
		basic_iostream<_Elem, _Traits>& _Right)
	{	
	_Left.swap(_Right);
	}

 

template class __declspec(dllimport) basic_iostream<char, char_traits<char> >;
template class __declspec(dllimport) basic_iostream<wchar_t, char_traits<wchar_t> >;


 #line 983 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\istream"

		
template<class _Elem,
	class _Traits> inline
	basic_istream<_Elem, _Traits>& operator>>(
		basic_istream<_Elem, _Traits> && _Istr, _Elem *_Str)
	{	
	;
	typedef basic_istream<_Elem, _Traits> _Myis;
	typedef ctype<_Elem> _Ctype;
	ios_base::iostate _State = ios_base::goodbit;
	_Elem *_Str0 = _Str;
	const typename _Myis::sentry _Ok(_Istr);

	if (_Ok)
		{	
		const _Ctype& _Ctype_fac = use_facet< _Ctype >(_Istr.getloc());

		try {
		streamsize _Count = 0 < _Istr.width() ? _Istr.width() : 2147483647;
		typename _Myis::int_type _Meta = _Istr.rdbuf()->sgetc();
		_Elem _Ch;
		for (; 0 < --_Count; _Meta = _Istr.rdbuf()->snextc())
			if (_Traits::eq_int_type(_Traits::eof(), _Meta))
				{	
				_State |= ios_base::eofbit;
				break;
				}
			else if (_Ctype_fac.is(_Ctype::space,
				_Ch = _Traits::to_char_type(_Meta))
					|| _Ch == _Elem())
				break;	
			else
				*_Str++ = _Traits::to_char_type(_Meta);	
		} catch (...) { (_Istr).setstate(ios_base::badbit, true); }
		}

	*_Str = _Elem();	
	_Istr.width(0);
	_Istr.setstate(_Str == _Str0 ? _State | ios_base::failbit : _State);
	return (_Istr);
	}

template<class _Elem,
	class _Traits> inline
	basic_istream<_Elem, _Traits>& operator>>(
		basic_istream<_Elem, _Traits> && _Istr, _Elem& _Ch)
	{	
	typedef basic_istream<_Elem, _Traits> _Myis;

	typename _Myis::int_type _Meta;
	ios_base::iostate _State = ios_base::goodbit;
	const typename _Myis::sentry _Ok(_Istr);

	if (_Ok)
		{	
		try {
		_Meta = _Istr.rdbuf()->sbumpc();
		if (_Traits::eq_int_type(_Traits::eof(), _Meta))
			_State |= ios_base::eofbit | ios_base::failbit;	
		else
			_Ch = _Traits::to_char_type(_Meta);	
		} catch (...) { (_Istr).setstate(ios_base::badbit, true); }
		}

	_Istr.setstate(_State);
	return (_Istr);
	}

template<class _Traits> inline
	basic_istream<char, _Traits>& operator>>(
		basic_istream<char, _Traits> && _Istr, signed char *_Str)
	{	
	return (_Istr >> (char *)_Str);
	}

template<class _Traits> inline
	basic_istream<char, _Traits>& operator>>(
		basic_istream<char, _Traits> && _Istr, signed char& _Ch)
	{	
	return (_Istr >> (char&)_Ch);
	}

template<class _Traits> inline
	basic_istream<char, _Traits>& operator>>(
		basic_istream<char, _Traits> && _Istr, unsigned char *_Str)
	{	
	return (_Istr >> (char *)_Str);
	}

template<class _Traits> inline
	basic_istream<char, _Traits>& operator>>(
		basic_istream<char, _Traits> && _Istr, unsigned char& _Ch)
	{	
	return (_Istr >> (char&)_Ch);
	}

template<class _Elem,
	class _Traits> inline
	basic_istream<_Elem, _Traits>& operator>>(
		basic_istream<_Elem, _Traits>& _Istr, _Elem *_Str)
	{	
	return (::std:: move(_Istr) >> _Str);
	}

template<class _Elem,
	class _Traits> inline
	basic_istream<_Elem, _Traits>& operator>>(
		basic_istream<_Elem, _Traits>& _Istr, _Elem& _Ch)
	{	
	return (::std:: move(_Istr) >> _Ch);
	}

template<class _Traits> inline
	basic_istream<char, _Traits>& operator>>(
		basic_istream<char, _Traits>& _Istr, signed char *_Str)
	{	
	return (::std:: move(_Istr) >> (char *)_Str);
	}

template<class _Traits> inline
	basic_istream<char, _Traits>& operator>>(
		basic_istream<char, _Traits>& _Istr, signed char& _Ch)
	{	
	return (::std:: move(_Istr) >> (char&)_Ch);
	}

template<class _Traits> inline
	basic_istream<char, _Traits>& operator>>(
		basic_istream<char, _Traits>& _Istr, unsigned char *_Str)
	{	
	return (::std:: move(_Istr) >> (char *)_Str);
	}

template<class _Traits> inline
	basic_istream<char, _Traits>& operator>>(
		basic_istream<char, _Traits>& _Istr, unsigned char& _Ch)
	{	
	return (::std:: move(_Istr) >> (char&)_Ch);
	}

template<class _Elem,
	class _Traits,
	class _Ty> inline
	basic_istream<_Elem, _Traits>&
		operator>>(basic_istream<_Elem, _Traits>&& _Istr, _Ty& _Val)
	{	
	return (_Istr >> _Val);
	}

		
template<class _Elem,
	class _Traits> inline
	basic_istream<_Elem, _Traits>&
		__cdecl ws(basic_istream<_Elem, _Traits>& _Istr)
	{	
	typedef basic_istream<_Elem, _Traits> _Myis;
	typedef ctype<_Elem> _Ctype;

	if (!_Istr.eof())
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const typename _Myis::sentry _Ok(_Istr, true);

		if (_Ok)
			{	
			const _Ctype& _Ctype_fac = use_facet< _Ctype >(_Istr.getloc());

			try {
			for (typename _Traits::int_type _Meta = _Istr.rdbuf()->sgetc(); ;
				_Meta = _Istr.rdbuf()->snextc())
				if (_Traits::eq_int_type(_Traits::eof(), _Meta))
					{	
					_State |= ios_base::eofbit;
					break;
					}
				else if (!_Ctype_fac.is(_Ctype::space,
					_Traits::to_char_type(_Meta)))
					break;	
			} catch (...) { (_Istr).setstate(ios_base::badbit, true); }
			}

		_Istr.setstate(_State);
		}
	return (_Istr);
	}

__declspec(dllimport) inline basic_istream<char, char_traits<char> >&
	__cdecl ws(basic_istream<char, char_traits<char> >& _Istr)
	{	
	typedef char _Elem;
	typedef char_traits<_Elem> _Traits;

	if (!_Istr.eof())
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const basic_istream<_Elem, _Traits>::sentry _Ok(_Istr, true);

		if (_Ok)
			{	
			const ctype<_Elem>& _Ctype_fac =
				use_facet< ctype<_Elem> >(_Istr.getloc());

			try {
			for (_Traits::int_type _Meta = _Istr.rdbuf()->sgetc(); ;
				_Meta = _Istr.rdbuf()->snextc())
				if (_Traits::eq_int_type(_Traits::eof(), _Meta))
					{	
					_State |= ios_base::eofbit;
					break;
					}
				else if (!_Ctype_fac.is(ctype<_Elem>::space,
					_Traits::to_char_type(_Meta)))
					break;	
			} catch (...) { (_Istr).setstate(ios_base::badbit, true); }
			}

		_Istr.setstate(_State);
		}
	return (_Istr);
	}

__declspec(dllimport) inline basic_istream<wchar_t, char_traits<wchar_t> >&
	__cdecl ws(basic_istream<wchar_t, char_traits<wchar_t> >& _Istr)
	{	
	typedef wchar_t _Elem;
	typedef char_traits<_Elem> _Traits;

	if (!_Istr.eof())
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const basic_istream<_Elem, _Traits>::sentry _Ok(_Istr, true);

		if (_Ok)
			{	
			const ctype<_Elem>& _Ctype_fac =
				use_facet< ctype<_Elem> >(_Istr.getloc());

			try {
			for (_Traits::int_type _Meta = _Istr.rdbuf()->sgetc(); ;
				_Meta = _Istr.rdbuf()->snextc())
				if (_Traits::eq_int_type(_Traits::eof(), _Meta))
					{	
					_State |= ios_base::eofbit;
					break;
					}
				else if (!_Ctype_fac.is(ctype<_Elem>::space,
					_Traits::to_char_type(_Meta)))
					break;	
			} catch (...) { (_Istr).setstate(ios_base::badbit, true); }
			}

		_Istr.setstate(_State);
		}
	return (_Istr);
	}

 
__declspec(dllimport) inline basic_istream<unsigned short, char_traits<unsigned short> >&
	__cdecl ws(basic_istream<unsigned short, char_traits<unsigned short> >& _Istr)
	{	
	typedef unsigned short _Elem;
	typedef char_traits<_Elem> _Traits;

	if (!_Istr.eof())
		{	
		ios_base::iostate _State = ios_base::goodbit;
		const basic_istream<_Elem, _Traits>::sentry _Ok(_Istr, true);

		if (_Ok)
			{	
			const ctype<_Elem>& _Ctype_fac =
				use_facet< ctype<_Elem> >(_Istr.getloc());

			try {
			for (_Traits::int_type _Meta = _Istr.rdbuf()->sgetc(); ;
				_Meta = _Istr.rdbuf()->snextc())
				if (_Traits::eq_int_type(_Traits::eof(), _Meta))
					{	
					_State |= ios_base::eofbit;
					break;
					}
				else if (!_Ctype_fac.is(ctype<_Elem>::space,
					_Traits::to_char_type(_Meta)))
					break;	
		} catch (...) { (_Istr).setstate(ios_base::badbit, true); }
			}

		_Istr.setstate(_State);
		}
	return (_Istr);
	}
 #line 1276 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\istream"
}

 #pragma warning(pop)
 #pragma pack(pop)

#line 1282 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\istream"
#line 1283 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\istream"






#line 7 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\iterator"


 #pragma pack(push,8)
 #pragma warning(push,3)

namespace std {
		
template<class _Container>
	class back_insert_iterator
		: public _Outit
	{	
public:
	typedef back_insert_iterator<_Container> _Myt;
	typedef _Container container_type;
	typedef typename _Container::const_reference const_reference;
	typedef typename _Container::value_type _Valty;

	explicit back_insert_iterator(_Container& _Cont)
		: container(&_Cont)
		{	
		}

	_Myt& operator=(const _Valty& _Val)
		{	
		container->push_back(_Val);
		return (*this);
		}

	_Myt& operator=(_Valty&& _Val)
		{	
		container->push_back(::std:: forward<_Valty>(_Val));
		return (*this);
		}

	_Myt& operator*()
		{	
		return (*this);
		}

	_Myt& operator++()
		{	
		return (*this);
		}

	_Myt operator++(int)
		{	
		return (*this);
		}

protected:
	_Container *container;	
	};

template<class _Container>
	struct _Is_checked_helper<back_insert_iterator<_Container> >
	: public ::std:: tr1::true_type
	{	
	};

		
template<class _Container> inline
	back_insert_iterator<_Container> back_inserter(_Container& _Cont)
	{	
	return (::std:: back_insert_iterator<_Container>(_Cont));
	}

		
template<class _Container>
	class front_insert_iterator
		: public _Outit
	{	
public:
	typedef front_insert_iterator<_Container> _Myt;
	typedef _Container container_type;
	typedef typename _Container::const_reference const_reference;
	typedef typename _Container::value_type _Valty;

	explicit front_insert_iterator(_Container& _Cont)
		: container(&_Cont)
		{	
		}

	_Myt& operator=(const _Valty& _Val)
		{	
		container->push_front(_Val);
		return (*this);
		}

	_Myt& operator=(_Valty&& _Val)
		{	
		container->push_front(::std:: forward<_Valty>(_Val));
		return (*this);
		}

	_Myt& operator*()
		{	
		return (*this);
		}

	_Myt& operator++()
		{	
		return (*this);
		}

	_Myt operator++(int)
		{	
		return (*this);
		}

protected:
	_Container *container;	
	};

template<class _Container>
	struct _Is_checked_helper<front_insert_iterator<_Container> >
	: public ::std:: tr1::true_type
	{	
	};

		
template<class _Container> inline
	front_insert_iterator<_Container> front_inserter(_Container& _Cont)
	{	
	return (::std:: front_insert_iterator<_Container>(_Cont));
	}

		
template<class _Container>
	class insert_iterator
		: public _Outit
	{	
public:
	typedef insert_iterator<_Container> _Myt;
	typedef _Container container_type;
	typedef typename _Container::const_reference const_reference;
	typedef typename _Container::value_type _Valty;

	insert_iterator(_Container& _Cont, typename _Container::iterator _Where)
		: container(&_Cont), iter(_Where)
		{	
		}

	_Myt& operator=(const _Valty& _Val)
		{	
		iter = container->insert(iter, _Val);
		++iter;
		return (*this);
		}

	_Myt& operator=(_Valty&& _Val)
		{	
		iter = container->insert(iter, ::std:: forward<_Valty>(_Val));
		++iter;
		return (*this);
		}

	_Myt& operator*()
		{	
		return (*this);
		}

	_Myt& operator++()
		{	
		return (*this);
		}

	_Myt& operator++(int)
		{	
		return (*this);
		}

protected:
	_Container *container;	
	typename _Container::iterator iter;	
	};

template<class _Container>
	struct _Is_checked_helper<insert_iterator<_Container> >
	: public ::std:: tr1::true_type
	{	
	};

		
template<class _Container> inline
	insert_iterator<_Container> inserter(_Container& _Cont,
		typename _Container::iterator _Where)
	{	
	return (::std:: insert_iterator<_Container>(_Cont, _Where));
	}

		
template<class _RanIt>
	class move_iterator
	{	
public:
	typedef move_iterator<_RanIt> _Myt;
 	typedef typename iterator_traits<_RanIt>::iterator_category
		iterator_category;
 	typedef typename iterator_traits<_RanIt>::value_type
		value_type;
 	typedef typename iterator_traits<_RanIt>::difference_type
		difference_type;
	typedef _RanIt pointer;
	typedef value_type&& reference;
	typedef _RanIt iterator_type;

	move_iterator()
		{	
		}

	explicit move_iterator(iterator_type _Right)
		: current(_Right)
		{	
		}

	template<class _RanIt2>
		move_iterator(const move_iterator<_RanIt2>& _Right)
		: current(_Right.base())
		{	
		}

	template<class _RanIt2>
		_Myt& operator=(const move_iterator<_RanIt2>& _Right)
		{	
		current = _Right.base();
		return (*this);
		}

	_RanIt base() const
		{	
		return (current);
		}

	reference operator*() const
		{	
		return (move(*current));
		}

	pointer operator->() const
		{	
		return (&**this);
		}

	_Myt& operator++()
		{	
		++current;
		return (*this);
		}

	_Myt operator++(int)
		{	
		_Myt _Tmp = *this;
		++current;
		return (_Tmp);
		}

	_Myt& operator--()
		{	
		--current;
		return (*this);
		}

	_Myt operator--(int)
		{	
		_Myt _Tmp = *this;
		--current;
		return (_Tmp);
		}

	template<class _RanIt2>
		bool _Equal(const move_iterator<_RanIt2>& _Right) const
		{	
		return (current == _Right.base());
		}



	_Myt& operator+=(difference_type _Off)
		{	
		current += _Off;
		return (*this);
		}

	_Myt operator+(difference_type _Off) const
		{	
		return (_Myt(current + _Off));
		}

	_Myt& operator-=(difference_type _Off)
		{	
		current -= _Off;
		return (*this);
		}

	_Myt operator-(difference_type _Off) const
		{	
		return (_Myt(current - _Off));
		}

	reference operator[](difference_type _Off) const
		{	
		return (move(current[_Off]));
		}

	template<class _RanIt2>
		bool _Less(const move_iterator<_RanIt2>& _Right) const
		{	
		return (current < _Right.base());
		}

	difference_type operator-(const _Myt& _Right) const
		{	
		return (current - _Right.base());
		}

protected:
	iterator_type current;	
	};

template<class _RanIt>
	struct _Is_checked_helper<move_iterator<_RanIt> >
	: public _Is_checked_helper<_RanIt>
	{	
	};

		
template<class _RanIt,
	class _Diff> inline
	move_iterator<_RanIt>
		operator+(_Diff _Off,
		const move_iterator<_RanIt>& _Right)
	{	
	return (_Right + _Off);
	}

template<class _RanIt1,
	class _RanIt2> inline
	typename _RanIt1::difference_type operator-(
		move_iterator<_RanIt1>& _Left,
		const move_iterator<_RanIt2>& _Right)
	{	
	return (_Left.base() - _Right.base());
	}

template<class _RanIt1,
	class _RanIt2> inline
	bool operator==(
		const move_iterator<_RanIt1>& _Left,
		const move_iterator<_RanIt2>& _Right)
	{	
	return (_Left._Equal(_Right));
	}

template<class _RanIt1,
	class _RanIt2> inline
	bool operator!=(
		const move_iterator<_RanIt1>& _Left,
		const move_iterator<_RanIt2>& _Right)
	{	
	return (!(_Left == _Right));
	}

template<class _RanIt1,
	class _RanIt2> inline
	bool operator<(
		const move_iterator<_RanIt1>& _Left,
		const move_iterator<_RanIt2>& _Right)
	{	
	return (_Left._Less(_Right));
	}

template<class _RanIt1,
	class _RanIt2> inline
	bool operator>(
		const move_iterator<_RanIt1>& _Left,
		const move_iterator<_RanIt2>& _Right)
	{	
	return (_Right < _Left);
	}

template<class _RanIt1,
	class _RanIt2> inline
	bool operator<=(
		const move_iterator<_RanIt1>& _Left,
		const move_iterator<_RanIt2>& _Right)
	{	
	return (!(_Right < _Left));
	}

template<class _RanIt1,
	class _RanIt2> inline
	bool operator>=(
		const move_iterator<_RanIt1>& _Left,
		const move_iterator<_RanIt2>& _Right)
	{	
	return (!(_Left < _Right));
	}

		
template<class _RanIt> inline
	move_iterator<_RanIt> make_move_iterator(const _RanIt _Iter)
	{	
	return (move_iterator<_RanIt>(_Iter));
	}

		

template<class _Ty,
	class _Elem = char,
	class _Traits = char_traits<_Elem>,
	class _Diff = ptrdiff_t>
	class istream_iterator
		: public iterator<input_iterator_tag, _Ty, _Diff,
			const _Ty *, const _Ty&>
	{	
	typedef istream_iterator<_Ty, _Elem, _Traits, _Diff> _Myt;
public:
	typedef _Elem char_type;
	typedef _Traits traits_type;
	typedef basic_istream<_Elem, _Traits> istream_type;

	istream_iterator()
		: _Myistr(0)
		{	
		}

	istream_iterator(istream_type& _Istr)
		: _Myistr(&_Istr)
		{	
		_Getval();
		}

	const _Ty& operator*() const
		{	
		return (_Myval);
		}

	const _Ty *operator->() const
		{	
		return (&**this);
		}

	_Myt& operator++()
		{	
		_Getval();
		return (*this);
		}

	_Myt operator++(int)
		{	
		_Myt _Tmp = *this;
		++*this;
		return (_Tmp);
		}

	bool _Equal(const _Myt& _Right) const
		{	
		return (_Myistr == _Right._Myistr);
		}

protected:
	void _Getval()
		{	
		if (_Myistr != 0 && !(*_Myistr >> _Myval))
			_Myistr = 0;
		}

	istream_type *_Myistr;	
	_Ty _Myval;	
	};

template<class _Ty,
	class _Elem,
	class _Traits,
	class _Diff>
	struct _Is_checked_helper<istream_iterator<_Ty, _Elem, _Traits, _Diff> >
	: public ::std:: tr1::true_type
	{	
	};

		
template<class _Ty,
	class _Elem,
	class _Traits,
	class _Diff> inline
	bool operator==(
		const istream_iterator<_Ty, _Elem, _Traits, _Diff>& _Left,
		const istream_iterator<_Ty, _Elem, _Traits, _Diff>& _Right)
	{	
	return (_Left._Equal(_Right));
	}

template<class _Ty,
	class _Elem,
	class _Traits,
	class _Diff> inline
	bool operator!=(
		const istream_iterator<_Ty, _Elem, _Traits, _Diff>& _Left,
		const istream_iterator<_Ty, _Elem, _Traits, _Diff>& _Right)
	{	
	return (!(_Left == _Right));
	}

		

template<class _Ty,
	class _Elem = char,
	class _Traits = char_traits<_Elem> >
	class ostream_iterator
		: public _Outit
	{	
public:
	typedef _Elem char_type;
	typedef _Traits traits_type;
	typedef basic_ostream<_Elem, _Traits> ostream_type;

	ostream_iterator(ostream_type& _Ostr,
		const _Elem *_Delim = 0)
		: _Myostr(&_Ostr), _Mydelim(_Delim)
		{	
		}

	ostream_iterator<_Ty, _Elem, _Traits>& operator=(const _Ty& _Val)
		{	
		*_Myostr << _Val;
		if (_Mydelim != 0)
			*_Myostr << _Mydelim;
		return (*this);
		}

	ostream_iterator<_Ty, _Elem, _Traits>& operator*()
		{	
		return (*this);
		}

	ostream_iterator<_Ty, _Elem, _Traits>& operator++()
		{	
		return (*this);
		}

	ostream_iterator<_Ty, _Elem, _Traits> operator++(int)
		{	
		return (*this);
		}

protected:
	const _Elem *_Mydelim;	
	ostream_type *_Myostr;	
	};

template<class _Ty,
	class _Elem,
	class _Traits>
	struct _Is_checked_helper<ostream_iterator<_Ty, _Elem, _Traits> >
	: public ::std:: tr1::true_type
	{	
	};
}

namespace stdext {
		
template<class _Iterator>
	class checked_array_iterator
	{	
public:
	typedef checked_array_iterator<_Iterator> _Myt;

	typedef typename ::std:: iterator_traits<_Iterator>::iterator_category iterator_category;
	typedef typename ::std:: iterator_traits<_Iterator>::value_type value_type;
	typedef typename ::std:: iterator_traits<_Iterator>::difference_type difference_type;
	typedef typename ::std:: iterator_traits<_Iterator>::difference_type distance_type;	
	typedef typename ::std:: iterator_traits<_Iterator>::pointer pointer;
	typedef typename ::std:: iterator_traits<_Iterator>::reference reference;

	checked_array_iterator()
		: _Myarray(), _Mysize(0), _Myindex(0)
		{	
		}

	checked_array_iterator(_Iterator _Array, ::std:: size_t _Size, ::std:: size_t _Index = 0)
		: _Myarray(_Array), _Mysize(_Size), _Myindex(_Index)
		{	
		{ if (!(_Index <= _Size)) { ((void)0); ::_invalid_parameter_noinfo_noreturn(); } ; };
		}

	_Iterator base() const
		{	
		return (_Myarray + _Myindex);
		}


	typedef _Iterator _Unchecked_type;

	_Myt& _Rechecked(_Unchecked_type _Right)
		{	
		_Myindex = _Right - _Myarray;
		return (*this);
		}

	_Unchecked_type _Unchecked() const
		{	
		return (base());
		}


	reference operator*() const
		{	
		{ if (!(_Myarray != 0 && _Myindex < _Mysize)) { ((void)0); ::_invalid_parameter_noinfo_noreturn(); } ; };
		return (_Myarray[_Myindex]);
		}

	pointer operator->() const
		{	
		return (&**this);
		}

	_Myt& operator++()
		{	
		{ if (!(_Myarray != 0 && _Myindex < _Mysize)) { ((void)0); ::_invalid_parameter_noinfo_noreturn(); } ; };
		++_Myindex;
		return (*this);
		}

	_Myt operator++(int)
		{	
		_Myt _Tmp = *this;
		++*this;
		return (_Tmp);
		}

	_Myt& operator--()
		{	
		{ if (!(_Myarray != 0 && _Myindex > 0)) { ((void)0); ::_invalid_parameter_noinfo_noreturn(); } ; };
		--_Myindex;
		return (*this);
		}

	_Myt operator--(int)
		{	
		_Myt _Tmp = *this;
		--*this;
		return (_Tmp);
		}

	_Myt& operator+=(difference_type _Off)
		{	
		{ if (!(_Myarray != 0 && _Myindex + _Off <= _Mysize)) { ((void)0); ::_invalid_parameter_noinfo_noreturn(); } ; };
		_Myindex += _Off;
		return (*this);
		}

	_Myt operator+(difference_type _Off) const
		{	
		_Myt _Tmp = *this;
		return (_Tmp += _Off);
		}

	_Myt& operator-=(difference_type _Off)
		{	
		return (*this += -_Off);
		}

	_Myt operator-(difference_type _Off) const
		{	
		_Myt _Tmp = *this;
		return (_Tmp -= _Off);
		}

	difference_type operator-(const _Myt& _Right) const
		{	
		{ if (!(_Myarray == _Right._Myarray)) { ((void)0); ::_invalid_parameter_noinfo_noreturn(); } ; };
		return (_Myindex - _Right._Myindex);
		}

	reference operator[](difference_type _Off) const
		{	
		return (*(*this + _Off));
		}

	bool operator==(const _Myt& _Right) const
		{	
		{ if (!(_Myarray == _Right._Myarray)) { ((void)0); ::_invalid_parameter_noinfo_noreturn(); } ; };
		return (_Myindex == _Right._Myindex);
		}

	bool operator!=(const _Myt& _Right) const
		{	
		return (!(*this == _Right));
		}

	bool operator<(const _Myt& _Right) const
		{	
		{ if (!(_Myarray == _Right._Myarray)) { ((void)0); ::_invalid_parameter_noinfo_noreturn(); } ; };
		return (_Myindex < _Right._Myindex);
		}

	bool operator>(const _Myt& _Right) const
		{	
		return (_Right < *this);
		}

	bool operator<=(const _Myt& _Right) const
		{	
		return (!(_Right < *this));
		}

	bool operator>=(const _Myt& _Right) const
		{	
		return (!(*this < _Right));
		}

private:
	_Iterator _Myarray;	
	::std:: size_t _Mysize;	
	::std:: size_t _Myindex;	
	};

template<class _Iterator> inline
	typename checked_array_iterator<_Iterator>::_Unchecked_type
		_Unchecked(checked_array_iterator<_Iterator> _Iter)
	{	
	return (_Iter._Unchecked());
	}

template<class _Iterator> inline
	checked_array_iterator<_Iterator>&
		_Rechecked(checked_array_iterator<_Iterator>& _Iter,
			typename checked_array_iterator<_Iterator>
				::_Unchecked_type _Right)
	{	
	return (_Iter._Rechecked(_Right));
	}

template<class _Iterator> inline
	checked_array_iterator<_Iterator> operator+(
		typename checked_array_iterator<_Iterator>::difference_type _Off,
		checked_array_iterator<_Iterator> _Next)
	{	
	return (_Next += _Off);
	}

template<class _Iterator> inline
	checked_array_iterator<_Iterator> make_checked_array_iterator(
		_Iterator _Array, ::std:: size_t _Size, ::std:: size_t _Index = 0)
	{	
	return (checked_array_iterator<_Iterator>(_Array, _Size, _Index));
	}

		
template<class _Iterator>
	class unchecked_array_iterator
	{	
public:
	typedef unchecked_array_iterator<_Iterator> _Myt;

	typedef typename ::std:: iterator_traits<_Iterator>::iterator_category iterator_category;
	typedef typename ::std:: iterator_traits<_Iterator>::value_type value_type;
	typedef typename ::std:: iterator_traits<_Iterator>::difference_type difference_type;
	typedef typename ::std:: iterator_traits<_Iterator>::difference_type distance_type;	
	typedef typename ::std:: iterator_traits<_Iterator>::pointer pointer;
	typedef typename ::std:: iterator_traits<_Iterator>::reference reference;

	unchecked_array_iterator()
		: _Myptr()
		{	
		}

	explicit unchecked_array_iterator(_Iterator _Ptr)
		: _Myptr(_Ptr)
		{	
		}

	_Iterator base() const
		{	
		return (_Myptr);
		}


	typedef _Iterator _Unchecked_type;

	_Myt& _Rechecked(_Unchecked_type _Right)
		{	
		_Myptr = _Right;
		return (*this);
		}

	_Unchecked_type _Unchecked() const
		{	
		return (base());
		}


	reference operator*() const
		{	
		return (*_Myptr);
		}

	pointer operator->() const
		{	
		return (&**this);
		}

	_Myt& operator++()
		{	
		++_Myptr;
		return (*this);
		}

	_Myt operator++(int)
		{	
		_Myt _Tmp = *this;
		++*this;
		return (_Tmp);
		}

	_Myt& operator--()
		{	
		--_Myptr;
		return (*this);
		}

	_Myt operator--(int)
		{	
		_Myt _Tmp = *this;
		--*this;
		return (_Tmp);
		}

	_Myt& operator+=(difference_type _Off)
		{	
		_Myptr += _Off;
		return (*this);
		}

	_Myt operator+(difference_type _Off) const
		{	
		_Myt _Tmp = *this;
		return (_Tmp += _Off);
		}

	_Myt& operator-=(difference_type _Off)
		{	
		return (*this += -_Off);
		}

	_Myt operator-(difference_type _Off) const
		{	
		_Myt _Tmp = *this;
		return (_Tmp -= _Off);
		}

	difference_type operator-(const _Myt& _Right) const
		{	
		return (_Myptr - _Right._Myptr);
		}

	reference operator[](difference_type _Off) const
		{	
		return (*(*this + _Off));
		}

	bool operator==(const _Myt& _Right) const
		{	
		return (_Myptr == _Right._Myptr);
		}

	bool operator!=(const _Myt& _Right) const
		{	
		return (!(*this == _Right));
		}

	bool operator<(const _Myt& _Right) const
		{	
		return (_Myptr < _Right._Myptr);
		}

	bool operator>(const _Myt& _Right) const
		{	
		return (_Right < *this);
		}

	bool operator<=(const _Myt& _Right) const
		{	
		return (!(_Right < *this));
		}

	bool operator>=(const _Myt& _Right) const
		{	
		return (!(*this < _Right));
		}

private:
	_Iterator _Myptr;	
	};

template<class _Iterator> inline
	typename unchecked_array_iterator<_Iterator>::_Unchecked_type
		_Unchecked(unchecked_array_iterator<_Iterator> _Iter)
	{	
	return (_Iter._Unchecked());
	}

template<class _Iterator> inline
	unchecked_array_iterator<_Iterator>&
		_Rechecked(unchecked_array_iterator<_Iterator>& _Iter,
			typename unchecked_array_iterator<_Iterator>
				::_Unchecked_type _Right)
	{	
	return (_Iter._Rechecked(_Right));
	}

template<class _Iterator> inline
	unchecked_array_iterator<_Iterator> operator+(
		typename unchecked_array_iterator<_Iterator>::difference_type _Off,
		unchecked_array_iterator<_Iterator> _Next)
	{	
	return (_Next += _Off);
	}

template<class _Iterator> inline
	unchecked_array_iterator<_Iterator> make_unchecked_array_iterator(
		_Iterator _Ptr)
	{	
	return (unchecked_array_iterator<_Iterator>(_Ptr));
	}
}
 #pragma warning(pop)
 #pragma pack(pop)

#line 937 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\iterator"
#line 938 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\iterator"






















#line 8 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\array"

 #pragma pack(push,8)
 #pragma warning(push,3)

namespace std {
	namespace tr1 {	
	
template<class _Ty,
	size_t _Size>
	class array
	{	
public:
	enum {_EEN_SIZE = _Size};	
	typedef array<_Ty, _Size> _Myt;
	typedef _Ty value_type;
	typedef size_t size_type;
	typedef ptrdiff_t difference_type;
	typedef _Ty *pointer;
	typedef const _Ty *const_pointer;
	typedef _Ty& reference;
	typedef const _Ty& const_reference;

	typedef _Array_iterator<_Ty, _Size> iterator;
	typedef _Array_const_iterator<_Ty, _Size> const_iterator;

	typedef ::std:: reverse_iterator<iterator> reverse_iterator;
	typedef ::std:: reverse_iterator<const_iterator> const_reverse_iterator;

	void assign(const _Ty& _Value)
		{	
		::std:: fill_n(_Elems, _Size, _Value);
		}

	void fill(const _Ty& _Value)
		{	
		::std:: fill_n(_Elems, _Size, _Value);
		}

	void swap(_Myt& _Other)
		{	
		_Swap_ranges(::std:: addressof(_Elems[0]), ::std:: addressof(_Elems[0]) + _Size, ::std:: addressof(_Other._Elems[0]));
		}

	void swap(_Myt&& _Other)
		{	
		_Move(_Other.begin(), _Other.end(), begin());
		}

	iterator begin()
		{	
		return (iterator(::std:: addressof(_Elems[0]), 0));
		}

	const_iterator begin() const
		{	
		return (const_iterator(::std:: addressof(_Elems[0]), 0));
		}

	iterator end()
		{	
		return (iterator(::std:: addressof(_Elems[0]), _Size));
		}

	const_iterator end() const
		{	
		return (const_iterator(::std:: addressof(_Elems[0]), _Size));
		}

	reverse_iterator rbegin()
		{	
		return (reverse_iterator(end()));
		}

	const_reverse_iterator rbegin() const
		{	
		return (const_reverse_iterator(end()));
		}

	reverse_iterator rend()
		{	
		return (reverse_iterator(begin()));
		}

	const_reverse_iterator rend() const
		{	
		return (const_reverse_iterator(begin()));
		}

 
	const_iterator cbegin() const
		{	
		return (((const _Myt *)this)->begin());
		}

	const_iterator cend() const
		{	
		return (((const _Myt *)this)->end());
		}

	const_reverse_iterator crbegin() const
		{	
		return (((const _Myt *)this)->rbegin());
		}

	const_reverse_iterator crend() const
		{	
		return (((const _Myt *)this)->rend());
		}
 #line 117 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\array"

	size_type size() const
		{	
		return (_Size);
		}

	size_type max_size() const
		{	
		return (_Size);
		}

	bool empty() const
		{	
		return (_Size == 0);
		}

	reference at(size_type _Pos)
		{	
		if (_Size <= _Pos)
			_Xran();
		return (_Elems[_Pos]);
		}

	const_reference at(size_type _Pos) const
		{	
		if (_Size <= _Pos)
			_Xran();
		return (_Elems[_Pos]);
		}

	reference operator[](size_type _Pos)
		{	
 



#line 154 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\array"

#line 156 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\array"

		;

		return (_Elems[_Pos]);
		}

	const_reference operator[](size_type _Pos) const
		{	
 



#line 169 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\array"

#line 171 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\array"

		;

		return (_Elems[_Pos]);
		}

	reference front()
		{	
		return (_Elems[0]);
		}

	const_reference front() const
		{	
		return (_Elems[0]);
		}

	reference back()
		{	
		return (_Elems[_Size - 1]);
		}

	const_reference back() const
		{	
		return (_Elems[_Size - 1]);
		}

	_Ty *data()
		{	
		return (_Elems);
		}

	const _Ty *data() const
		{	
		return (_Elems);
		}

	__declspec(noreturn) void _Xran() const
		{	
		::std:: _Xout_of_range("invalid array<T, N> subscript");
		}

	_Ty _Elems[_Size == 0 ? 1 : _Size];
	};

template<class _Ty>
	class array<_Ty, 0>
	{	
public:
	enum {_EEN_SIZE = 0};	
	typedef array<_Ty, 0> _Myt;
	typedef _Ty value_type;
	typedef size_t size_type;
	typedef ptrdiff_t difference_type;
	typedef _Ty *pointer;
	typedef const _Ty *const_pointer;
	typedef _Ty& reference;
	typedef const _Ty& const_reference;

	typedef _Array_iterator<_Ty, 0> iterator;
	typedef _Array_const_iterator<_Ty, 0> const_iterator;
	typedef ::std:: reverse_iterator<iterator> reverse_iterator;
	typedef ::std:: reverse_iterator<const_iterator> const_reverse_iterator;

	void assign(const _Ty&)
		{	
		}

	void fill(const _Ty&)
		{	
		}

	void swap(_Myt&)
		{	
		}

	iterator begin()
		{	
		return (iterator(0, 0));
		}

	const_iterator begin() const
		{	
		return (iterator(0, 0));
		}

	iterator end()
		{	
		return (iterator(0, 0));
		}

	const_iterator end() const
		{	
		return (iterator(0, 0));
		}

	reverse_iterator rbegin()
		{	
		return (reverse_iterator(end()));
		}

	const_reverse_iterator rbegin() const
		{	
		return (const_reverse_iterator(end()));
		}

	reverse_iterator rend()
		{	
		return (reverse_iterator(begin()));
		}

	const_reverse_iterator rend() const
		{	
		return (const_reverse_iterator(begin()));
		}

 
	const_iterator cbegin() const
		{	
		return (iterator(0, 0));
		}

	const_iterator cend() const
		{	
		return (iterator(0, 0));
		}

	const_reverse_iterator crbegin() const
		{	
		return (((const _Myt *)this)->rbegin());
		}

	const_reverse_iterator crend() const
		{	
		return (((const _Myt *)this)->rend());
		}
 #line 307 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\array"

	size_type size() const
		{	
		return (0);
		}

	size_type max_size() const
		{	
		return (0);
		}

	bool empty() const
		{	
		return (true);
		}

	reference at(size_type)
		{	
		static int _Zero = 0;

		if (_Zero == 0)	
			_Xran();
		return (_Elems[0]);
		}

	const_reference at(size_type) const
		{	
		static int _Zero = 0;

		if (_Zero == 0)	
			_Xran();
		return (_Elems[0]);
		}

	reference operator[](size_type)
		{	
 


#line 347 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\array"

#line 349 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\array"

		return (_Elems[0]);
		}

	const_reference operator[](size_type) const
		{	
 


#line 359 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\array"

#line 361 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\array"

		return (_Elems[0]);
		}

	reference front()
		{	
 


#line 371 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\array"

#line 373 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\array"

		return (_Elems[0]);
		}

	const_reference front() const
		{	
 


#line 383 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\array"

#line 385 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\array"

		return (_Elems[0]);
		}

	reference back()
		{	
 


#line 395 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\array"

#line 397 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\array"

		return (_Elems[0]);
		}

	const_reference back() const
		{	
 


#line 407 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\array"

#line 409 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\array"

		return (_Elems[0]);
		}

	_Ty *data()
		{	
		return (_Elems);
		}

	const _Ty *data() const
		{	
		return (_Elems);
		}

	__declspec(noreturn) void _Xran() const
		{	
		::std:: _Xout_of_range("invalid array<T, 0> subscript");
		}

	_Ty _Elems[1];
	};

template<class _Ty,
	size_t _Size>
	void swap(array<_Ty,_Size>& _Left,
		array<_Ty,_Size>& _Right)
	{	
	return (_Left.swap(_Right));
	}

template<class _Ty,
	size_t _Size>
	void swap(array<_Ty,_Size>& _Left,
		array<_Ty,_Size>&& _Right)
	{	
	typedef array<_Ty, _Size> _Myt;
	_Left.swap(::std:: forward<_Myt>(_Right));
	}

template<class _Ty,
	size_t _Size>
	void swap(array<_Ty,_Size>&& _Left,
		array<_Ty,_Size>& _Right)
	{	
	typedef array<_Ty, _Size> _Myt;
	_Right.swap(::std:: forward<_Myt>(_Left));
	}

template<class _Ty,
	size_t _Size>
	bool operator==(const array<_Ty,_Size>& _Left,
		const array<_Ty,_Size>& _Right)
	{	
	return (::std:: equal(_Left.begin(), _Left.end(), _Right.begin()));
	}

template<class _Ty,
	size_t _Size>
	bool operator!=(const array<_Ty,_Size>& _Left,
		const array<_Ty,_Size>& _Right)
	{	
	return (!(_Left == _Right));
	}

template<class _Ty,
	size_t _Size>
	bool operator<(const array<_Ty,_Size>& _Left,
		const array<_Ty,_Size>& _Right)
	{	
	return (::std:: lexicographical_compare(_Left.begin(), _Left.end(),
		_Right.begin(), _Right.end()));
	}

template<class _Ty,
	size_t _Size>
	bool operator>(const array<_Ty,_Size>& _Left,
		const array<_Ty,_Size>& _Right)
	{	
	return (_Right < _Left);
	}

template<class _Ty,
	size_t _Size>
	bool operator<=(const array<_Ty,_Size>& _Left,
	const array<_Ty,_Size>& _Right)
	{	
	return (!(_Right < _Left));
	}

template<class _Ty,
	size_t _Size>
	bool operator>=(const array<_Ty,_Size>& _Left,
	const array<_Ty,_Size>& _Right)
	{	
	return (!(_Left < _Right));
	}

 
	
template<class _Tuple>
	struct tuple_size;

template<size_t _Idx,
	class _Tuple>
	struct tuple_element;

template<class _Ty,
	size_t _Size>
	struct tuple_size<array<_Ty, _Size> >
	{	
	static const int value = _Size;
	};

template<size_t _Idx,
	class _Ty,
	size_t _Size>
	struct tuple_element<_Idx, array<_Ty, _Size> >
	{	
	typedef _Ty type;
	};

template<int _Idx,
	class _Ty,
	size_t _Size>
	_Ty& get(array<_Ty, _Size>& _Arr)
	{	
	static_assert(0 <= _Idx && _Idx < _Size, "array index out of bounds");
	return (_Arr[_Idx]);
	}

template<int _Idx,
	class _Ty,
	size_t _Size>
	const _Ty& get(const array<_Ty, _Size>& _Arr)
	{	
	static_assert(0 <= _Idx && _Idx < _Size, "array index out of bounds");
	return (_Arr[_Idx]);
	}
 #line 548 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\array"
	}	

 
using tr1::array;
using tr1::get;
using tr1::tuple_element;
using tr1::tuple_size;
 #line 556 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\array"
}

 #pragma warning(pop)
 #pragma pack(pop)

#line 562 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\array"
#line 563 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\array"





#line 12 "c:\\users\\blake\\documents\\github\\pct-reconstruction\\pCT_Reconstruction.h"

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\cstdarg"

#pragma once



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\stdarg.h"














#pragma once






#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\stdarg.h"








#line 32 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\stdarg.h"
#line 7 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\cstdarg"

 
namespace std {
using ::va_list;
}
 #line 13 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\cstdarg"

#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\cstdarg"





#line 14 "c:\\users\\blake\\documents\\github\\pct-reconstruction\\pCT_Reconstruction.h"


#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\ctime"

#pragma once










 
#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\ctime"

 
namespace std {
using :: clock_t; using :: size_t;
using :: time_t; using :: tm;
using :: asctime; using :: clock; using :: ctime;
using :: difftime; using :: gmtime; using :: localtime;
using :: mktime; using :: strftime; using :: time;
}
 #line 25 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\ctime"

#line 27 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\ctime"





#line 17 "c:\\users\\blake\\documents\\github\\pct-reconstruction\\pCT_Reconstruction.h"
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\fstream"

#pragma once





 #pragma pack(push,8)
 #pragma warning(push,3)

namespace std {
 #pragma warning(disable: 4127)

extern __declspec(dllimport) _iobuf *__cdecl _Fiopen(
	const char *,
	ios_base::openmode, int);
extern __declspec(dllimport) _iobuf *__cdecl _Fiopen(
	const wchar_t *,
	ios_base::openmode, int);

 
extern __declspec(dllimport) _iobuf *__cdecl _Fiopen(
	const unsigned short *,
	ios_base::openmode, int);
 #line 26 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\fstream"

		
template<class _Elem> inline
	bool _Fgetc(_Elem& _Ch, _iobuf *_File)
	{	
	return (fread(&_Ch, sizeof (_Elem), 1, _File) == 1);
	}

template<> inline bool _Fgetc(char& _Byte, _iobuf *_File)
	{	
	int _Meta;
	if ((_Meta = fgetc(_File)) == (-1))
		return (false);
	else
		{	
		_Byte = (char)_Meta;
		return (true);
		}
	}

template<> inline bool _Fgetc(wchar_t& _Wchar, _iobuf *_File)
	{	
	wint_t _Meta;
	if ((_Meta = :: fgetwc(_File)) == (wint_t)(0xFFFF))
		return (false);
	else
		{	
		_Wchar = (wchar_t)_Meta;
		return (true);
		}
	}

 
template<> inline bool _Fgetc(unsigned short& _Wchar, _iobuf *_File)
	{	
	wint_t _Meta;
	if ((_Meta = :: fgetwc(_File)) == (wint_t)(0xFFFF))
		return (false);
	else
		{	
		_Wchar = (unsigned short)_Meta;
		return (true);
		}
	}
 #line 71 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\fstream"

		
template<class _Elem> inline
	bool _Fputc(_Elem _Ch, _iobuf *_File)
	{	
	return (fwrite(&_Ch, 1, sizeof (_Elem), _File) == sizeof (_Elem));
	}

template<> inline bool _Fputc(char _Byte, _iobuf *_File)
	{	
	return (fputc(_Byte, _File) != (-1));
	}

template<> inline bool _Fputc(wchar_t _Wchar, _iobuf *_File)
	{	
	return (:: fputwc(_Wchar, _File) != (wint_t)(0xFFFF));
	}

 
template<> inline bool _Fputc(unsigned short _Wchar, _iobuf *_File)
	{	
	return (:: fputwc(_Wchar, _File) != (wint_t)(0xFFFF));
	}
 #line 95 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\fstream"

		
template<class _Elem> inline
	bool _Ungetc(const _Elem& _Ch, _iobuf *_File)
	{	
	return (false);
	}

template<> inline bool _Ungetc(const char& _Byte, _iobuf *_File)
	{	
	return (ungetc((unsigned char)_Byte, _File) != (-1));
	}

template<> inline bool _Ungetc(const signed char& _Byte, _iobuf *_File)
	{	
	return (ungetc((unsigned char)_Byte, _File) != (-1));
	}

template<> inline bool _Ungetc(const unsigned char& _Byte, _iobuf *_File)
	{	
	return (ungetc(_Byte, _File) != (-1));
	}

template<> inline bool _Ungetc(const wchar_t& _Wchar, _iobuf *_File)
	{	
	return (:: ungetwc(_Wchar, _File) != (wint_t)(0xFFFF));
	}

 
template<> inline bool _Ungetc(const unsigned short& _Wchar, _iobuf *_File)
	{	
	return (:: ungetwc(_Wchar, _File) != (wint_t)(0xFFFF));
	}
 #line 129 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\fstream"

		
template<class _Elem,
	class _Traits>
	class basic_filebuf
		: public basic_streambuf<_Elem, _Traits>
	{	
public:
	typedef basic_filebuf<_Elem, _Traits> _Myt;
	typedef basic_streambuf<_Elem, _Traits> _Mysb;
	typedef typename _Traits::state_type _Myst;
	typedef codecvt<_Elem, char, typename _Traits::state_type> _Cvt;

	virtual  ~basic_filebuf()
		{	
		if (_Myfile != 0)
			_Reset_back();	
		if (_Closef)
			close();
		}

	basic_filebuf(_iobuf *_File = 0)
		: _Mysb()
		{	
		_Init(_File, _Newfl);
		}

	typedef typename _Traits::int_type int_type;
	typedef typename _Traits::pos_type pos_type;
	typedef typename _Traits::off_type off_type;

	basic_filebuf(_Uninitialized)
		: _Mysb(_Noinit)
		{	
		}

	basic_filebuf(_Myt&& _Right)
		{	
		_Init(_Right._Myfile, _Newfl);	
		_Init((_iobuf *)0, _Closefl);	
		_Assign_rv(::std:: forward<_Myt>(_Right));
		}

	_Myt& operator=(_Myt&& _Right)
		{	
		_Assign_rv(::std:: forward<_Myt>(_Right));
		return (*this);
		}

	void _Assign_rv(_Myt&& _Right)
		{	
		if (this != &_Right)
			{	
			close();
			this->swap(_Right);
			}
		}

	void swap(_Myt& _Right)
		{	
		if (this != &_Right)
			{	
			_Mysb::swap(_Right);
			::std:: swap(_Pcvt, _Right._Pcvt);
			::std:: swap(_Mychar, _Right._Mychar);
			::std:: swap(_Wrotesome, _Right._Wrotesome);
			::std:: swap(_State, _Right._State);
			::std:: swap(_Closef, _Right._Closef);
			::std:: swap(_Myfile, _Right._Myfile);
			}
		}

	void swap(_Myt&& _Right)
		{	
		_Assign_rv(::std:: forward<_Myt>(_Right));
		}

	enum _Initfl
		{	
		_Newfl, _Openfl, _Closefl};

	bool is_open() const
		{	
		return (_Myfile != 0);
		}

	_Myt *open(const char *_Filename,
		ios_base::openmode _Mode,
		int _Prot = (int)ios_base::_Openprot)
		{	
		_iobuf *_File;
		if (_Myfile != 0 || (_File = _Fiopen(_Filename, _Mode, _Prot)) == 0)
			return (0);	

		_Init(_File, _Openfl);
		_Initcvt(&use_facet< _Cvt >(_Mysb::getloc()));
		return (this);	
		}

 
	_Myt *open(const string& _Str,
		ios_base::openmode _Mode,
		int _Prot = (int)ios_base::_Openprot)
		{	
		return (open(_Str.c_str(), _Mode, _Prot));
		}
 #line 236 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\fstream"

	_Myt *open(const char *_Filename, ios_base::open_mode _Mode)
		{	
		return (open(_Filename, (ios_base::openmode)_Mode));
		}

	_Myt *open(const wchar_t *_Filename,
		ios_base::openmode _Mode,
		int _Prot = (int)ios_base::_Openprot)
		{	
		_iobuf *_File;
		if (_Myfile != 0 || (_File = _Fiopen(_Filename, _Mode, _Prot)) == 0)
			return (0);	

		_Init(_File, _Openfl);
		_Initcvt(&use_facet< _Cvt >(_Mysb::getloc()));
		return (this);	
		}

 
	_Myt *open(const wstring& _Str,
		ios_base::openmode _Mode,
		int _Prot = (int)ios_base::_Openprot)
		{	
		return (open(_Str.c_str(), _Mode, _Prot));
		}
 #line 263 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\fstream"

	_Myt *open(const wchar_t *_Filename,
		ios_base::open_mode _Mode)
		{	
		return (open(_Filename, (ios_base::openmode)_Mode));
		}

 
	_Myt *open(const unsigned short *_Filename,
		ios_base::openmode _Mode,
		int _Prot = (int)ios_base::_Openprot)
		{	
		_iobuf *_File;
		if (_Myfile != 0 || (_File = _Fiopen(_Filename, _Mode, _Prot)) == 0)
			return (0);	

		_Init(_File, _Openfl);
		_Initcvt(&use_facet< _Cvt >(_Mysb::getloc()));
		return (this);	
		}

	_Myt *open(const unsigned short *_Filename,
		ios_base::open_mode _Mode)
		{	
		return (open(_Filename, (ios_base::openmode)_Mode));
		}
 #line 290 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\fstream"

	_Myt *close()
		{	
		_Myt *_Ans = this;
		if (_Myfile == 0)
			_Ans = 0;
		else
			{	
			if (!_Endwrite())
				_Ans = 0;
			if (fclose(_Myfile) != 0)
				_Ans = 0;
			}
		_Init(0, _Closefl);
		return (_Ans);
		}

	virtual void  _Lock()
		{	
		if (_Myfile)
			:: _lock_file(_Myfile);
		}

	virtual void  _Unlock()
		{	
		if (_Myfile)
			:: _unlock_file(_Myfile);
		}

protected:
	virtual int_type  overflow(int_type _Meta =
		_Traits::eof())
		{	
		if (_Traits::eq_int_type(_Traits::eof(), _Meta))
			return (_Traits::not_eof(_Meta));	
		else if (_Mysb::pptr() != 0
			&& _Mysb::pptr() < _Mysb::epptr())
			{	
			*_Mysb::_Pninc() = _Traits::to_char_type(_Meta);
			return (_Meta);
			}
		else if (_Myfile == 0)
			return (_Traits::eof());	
		_Reset_back();	
		if (_Pcvt == 0)
			return (_Fputc(_Traits::to_char_type(_Meta), _Myfile)
				? _Meta : _Traits::eof());	
		else
			{	
			const int _STRING_INC = 8;
			const _Elem _Ch = _Traits::to_char_type(_Meta);
			const _Elem *_Src;
			char *_Dest;

			string _Str(_STRING_INC, '\0');
			for (; ; )
				switch (_Pcvt->out(_State,
					&_Ch, &_Ch + 1, _Src,
					&*_Str.begin(), &*_Str.begin() + _Str.size(), _Dest))
				{	
				case codecvt_base::partial:
				case codecvt_base::ok:
					{	
					size_t _Count = _Dest - &*_Str.begin();
					if (0 < _Count && _Count !=
						fwrite(&*_Str.begin(), 1, _Count, _Myfile))
						return (_Traits::eof());	

					_Wrotesome = true;	
					if (_Src != &_Ch)
						return (_Meta);	

					if (0 < _Count)
						;
					else if (_Str.size() < 4 * _STRING_INC)
						_Str.append(_STRING_INC, '\0');	
					else
						return (_Traits::eof());	
					break;
					}

				case codecvt_base::noconv:
					return (_Fputc(_Ch, _Myfile) ? _Meta
						: _Traits::eof());	

				default:
					return (_Traits::eof());	
				}
			}
		}

	virtual int_type  pbackfail(int_type _Meta =
		_Traits::eof())
		{	
		if (_Mysb::gptr() != 0
			&& _Mysb::eback() < _Mysb::gptr()
			&& (_Traits::eq_int_type(_Traits::eof(), _Meta)
			|| _Traits::eq_int_type(_Traits::to_int_type(_Mysb::gptr()[-1]),
				_Meta)))
			{	
			_Mysb::_Gndec();
			return (_Traits::not_eof(_Meta));
			}
		else if (_Myfile == 0 || _Traits::eq_int_type(_Traits::eof(), _Meta))
			return (_Traits::eof());	
		else if (_Pcvt == 0 && _Ungetc(_Traits::to_char_type(_Meta), _Myfile))
			return (_Meta);	
		else if (_Mysb::gptr() != &_Mychar)
			{	
			_Mychar = _Traits::to_char_type(_Meta);
			_Set_back();	
			return (_Meta);
			}
		else
			return (_Traits::eof());	
		}

	virtual int_type  underflow()
		{	
		int_type _Meta;
		if (_Mysb::gptr() != 0
			&& _Mysb::gptr() < _Mysb::egptr())
			return (_Traits::to_int_type(*_Mysb::gptr()));	
		else if (_Traits::eq_int_type(_Traits::eof(), _Meta = uflow()))
			return (_Meta);	
		else
			{	
			pbackfail(_Meta);
			return (_Meta);
			}
		}

	virtual int_type  uflow()
		{	
		if (_Mysb::gptr() != 0
			&& _Mysb::gptr() < _Mysb::egptr())
			return (_Traits::to_int_type(
				*_Mysb::_Gninc()));	
		else if (_Myfile == 0)
			return (_Traits::eof());	
		_Reset_back();	
		if (_Pcvt == 0)
			{	
			_Elem _Ch = 0;
			return (_Fgetc(_Ch, _Myfile) ? _Traits::to_int_type(_Ch)
				: _Traits::eof());
			}
		else
			{	
			string _Str;

			for (; ; )
				{	
				_Elem _Ch, *_Dest;
				const char *_Src;
				int _Nleft;
				int _Meta = fgetc(_Myfile);

				if (_Meta == (-1))
					return (_Traits::eof());	

				_Str.append(1, (char)_Meta);	
				switch (_Pcvt->in(_State,
					&*_Str.begin(), &*_Str.begin() + _Str.size(), _Src,
					&_Ch, &_Ch + 1, _Dest))
					{	
				case codecvt_base::partial:
				case codecvt_base::ok:
					if (_Dest != &_Ch)
						{	
						_Nleft = (int)(&*_Str.begin() + _Str.size() - _Src);
						for (; 0 < _Nleft; )
							ungetc(_Src[--_Nleft], _Myfile);
						return (_Traits::to_int_type(_Ch));
						}
					else
						_Str.erase((size_t)0,	
							(size_t)(_Src - &*_Str.begin()));
					break;

				case codecvt_base::noconv:
					if (_Str.size() < sizeof (_Elem))
						break;	

					::memcpy_s((&_Ch), (sizeof (_Elem)), (&*_Str.begin()), (sizeof (_Elem)));	
#line 476 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\fstream"

					return (_Traits::to_int_type(_Ch));	

				default:
					return (_Traits::eof());	
					}
				}
			}
		}

	virtual pos_type  seekoff(off_type _Off,
		ios_base::seekdir _Way,
		ios_base::openmode =
			(ios_base::openmode)(ios_base::in | ios_base::out))
		{	
		fpos_t _Fileposition;

		if (_Mysb::gptr() == &_Mychar	
			&& _Way == ios_base::cur	
			&& _Pcvt == 0)	
			_Off -= (off_type)sizeof (_Elem);	

		if (_Myfile == 0 || !_Endwrite()
			|| (_Off != 0 || _Way != ios_base::cur)
				&& _fseeki64(_Myfile, _Off, _Way) != 0
			|| fgetpos(_Myfile, &_Fileposition) != 0)
			return (pos_type(_BADOFF));	

		_Reset_back();	
		return (pos_type(_State, _Fileposition));	
#line 507 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\fstream"
		}

	virtual pos_type  seekpos(pos_type _Pos,
		ios_base::openmode =
			(ios_base::openmode)(ios_base::in | ios_base::out))
		{	
		fpos_t _Fileposition = _Pos.seekpos();
		off_type _Off = (off_type)_Pos - (off_type)((long)(_Fileposition));

		if (_Myfile == 0 || !_Endwrite()
			|| fsetpos(_Myfile, &_Fileposition) != 0
			|| _Off != 0 && _fseeki64(_Myfile, _Off, 1) != 0
			|| fgetpos(_Myfile, &_Fileposition) != 0)
			return (pos_type(_BADOFF));	

		_State = _Pos.state();

		_Reset_back();	
		return (pos_type(_State, _Fileposition));	
#line 527 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\fstream"
		}

	virtual _Mysb * setbuf(_Elem *_Buffer, streamsize _Count)
		{	
		if (_Myfile == 0 || setvbuf(_Myfile, (char *)_Buffer,
			_Buffer == 0 && _Count == 0 ? 0x0004 : 0x0000,
			(size_t)_Count * sizeof (_Elem)) != 0)
			return (0);	
		else
			{	
			_Init(_Myfile, _Openfl);
			return (this);
			}
		}

	virtual int  sync()
		{	
		return (_Myfile == 0
			|| _Traits::eq_int_type(_Traits::eof(), overflow())
			|| 0 <= fflush(_Myfile) ? 0 : -1);
		}

	virtual void  imbue(const locale& _Loc)
		{	
		_Initcvt(&use_facet< _Cvt >(_Loc));
		}

	void _Init(_iobuf *_File, _Initfl _Which)
		{	
		 static _Myst _Stinit;	

		_Closef = _Which == _Openfl;
		_Wrotesome = false;

		_Mysb::_Init();	

 
  
  
 #line 567 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\fstream"

  #pragma warning(push)
  #pragma warning(disable: 6240)	
		if (_File != 0 && sizeof (_Elem) == 1)
  #pragma warning(pop)

			{	
			_Elem **_Pb = (_Elem **)&_File->_base;
			_Elem **_Pn = (_Elem **)&_File->_ptr;
			int *_Nr = (int *)&_File->_cnt;
			int *_Nw = (int *)&_File->_cnt;
			_Mysb::_Init(_Pb, _Pn, _Nr, _Pb, _Pn, _Nw);
			}

		_Myfile = _File;
		_State = _Stinit;
		_Pcvt = 0;	
		}

	bool _Endwrite()
		{	
		if (_Pcvt == 0 || !_Wrotesome)
			return (true);
		else
			{	
			const int _STRING_INC = 8;
			char *_Dest;
			if (_Traits::eq_int_type(_Traits::eof(), overflow()))
				return (false);

			string _Str(_STRING_INC, '\0');
			for (; ; )
				switch (_Pcvt->unshift(_State,
					&*_Str.begin(), &*_Str.begin() + _Str.size(), _Dest))
				{	
				case codecvt_base::ok:
					_Wrotesome = false;	

				case codecvt_base::partial:	
					{	
					size_t _Count = _Dest - &*_Str.begin();
					if (0 < _Count && _Count !=
						fwrite(&*_Str.begin(), 1, _Count, _Myfile))
						return (false);	
					if (!_Wrotesome)
						return (true);
					if (_Count == 0)
						_Str.append(_STRING_INC, '\0');	
					break;
					}

				case codecvt_base::noconv:
					return (true);	

				default:
					return (false);	
				}
			}
		}

	void _Initcvt(const _Cvt *_Newpcvt)
		{	
		if (_Newpcvt->always_noconv())
			_Pcvt = 0;	
		else
			{	
			_Pcvt = _Newpcvt;
			_Mysb::_Init();	
			}
		}

private:
	void _Reset_back()
		{	
		if (_Mysb::eback() == &_Mychar)
			_Mysb::setg(_Set_eback, _Set_egptr, _Set_egptr);
		}

	void _Set_back()
		{	
		if (_Mysb::eback() != &_Mychar)
			{	
			_Set_eback = _Mysb::eback();
			_Set_egptr = _Mysb::egptr();
			}
		_Mysb::setg(&_Mychar, &_Mychar, &_Mychar + 1);
		}

	_Elem *_Set_eback;	
	_Elem *_Set_egptr;	

	const _Cvt *_Pcvt;	
	_Elem _Mychar;	
	bool _Wrotesome;	
	typename _Traits::state_type _State;	
	bool _Closef;	
	_iobuf *_Myfile;	
	};

	
template<class _Elem,
	class _Traits> inline
	void swap(basic_filebuf<_Elem, _Traits>& _Left,
		basic_filebuf<_Elem, _Traits>& _Right)
	{	
	_Left.swap(_Right);
	}

template<class _Elem,
	class _Traits> inline
	void swap(basic_filebuf<_Elem, _Traits>& _Left,
		basic_filebuf<_Elem, _Traits>&& _Right)
	{	
	typedef basic_filebuf<_Elem, _Traits> _Myt;
	_Left.swap(::std:: forward<_Myt>(_Right));
	}

template<class _Elem,
	class _Traits> inline
	void swap(basic_filebuf<_Elem, _Traits>&& _Left,
		basic_filebuf<_Elem, _Traits>& _Right)
	{	
	typedef basic_filebuf<_Elem, _Traits> _Myt;
	_Right.swap(::std:: forward<_Myt>(_Left));
	}

		
template<class _Elem,
	class _Traits>
	class basic_ifstream
		: public basic_istream<_Elem, _Traits>
	{	
public:
	typedef basic_ifstream<_Elem, _Traits> _Myt;
	typedef basic_istream<_Elem, _Traits> _Mybase;
	typedef basic_filebuf<_Elem, _Traits> _Myfb;
	typedef basic_ios<_Elem, _Traits> _Myios;

	basic_ifstream()
		: _Mybase(&_Filebuffer)
		{	
		}

	explicit basic_ifstream(const char *_Filename,
		ios_base::openmode _Mode = ios_base::in,
		int _Prot = (int)ios_base::_Openprot)
		: _Mybase(&_Filebuffer)
		{	
		if (_Filebuffer.open(_Filename, _Mode | ios_base::in, _Prot) == 0)
			_Myios::setstate(ios_base::failbit);
		}

 
	explicit basic_ifstream(const string& _Str,
		ios_base::openmode _Mode = ios_base::in,
		int _Prot = (int)ios_base::_Openprot)
		: _Mybase(&_Filebuffer)
		{	
		if (_Filebuffer.open(_Str.c_str(), _Mode | ios_base::in, _Prot) == 0)
			_Myios::setstate(ios_base::failbit);
		}
 #line 729 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\fstream"

	explicit basic_ifstream(const wchar_t *_Filename,
		ios_base::openmode _Mode = ios_base::in,
		int _Prot = (int)ios_base::_Openprot)
		: _Mybase(&_Filebuffer)
		{	
		if (_Filebuffer.open(_Filename, _Mode | ios_base::in, _Prot) == 0)
			_Myios::setstate(ios_base::failbit);
		}

 
	explicit basic_ifstream(const wstring& _Str,
		ios_base::openmode _Mode = ios_base::in,
		int _Prot = (int)ios_base::_Openprot)
		: _Mybase(&_Filebuffer)
		{	
		if (_Filebuffer.open(_Str.c_str(), _Mode | ios_base::in, _Prot) == 0)
			_Myios::setstate(ios_base::failbit);
		}
 #line 749 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\fstream"

 
	explicit basic_ifstream(const unsigned short *_Filename,
		ios_base::openmode _Mode = ios_base::in,
		int _Prot = (int)ios_base::_Openprot)
		: _Mybase(&_Filebuffer)
		{	
		if (_Filebuffer.open(_Filename, _Mode | ios_base::in, _Prot) == 0)
			_Myios::setstate(ios_base::failbit);
		}
 #line 760 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\fstream"

	explicit basic_ifstream(_iobuf *_File)
		: _Mybase(&_Filebuffer),
			_Filebuffer(_File)
		{	
		}

	basic_ifstream(_Myt&& _Right)
		: _Mybase(&_Filebuffer)
		{	
		_Assign_rv(::std:: forward<_Myt>(_Right));
		}

	_Myt& operator=(_Myt&& _Right)
		{	
		_Assign_rv(::std:: forward<_Myt>(_Right));
		return (*this);
		}

	void _Assign_rv(_Myt&& _Right)
		{	
		if (this != &_Right)
			{	
			_Filebuffer.close();
			this->swap(_Right);
			}
		}

	void swap(_Myt& _Right)
		{	
		if (this != &_Right)
			{	
			_Mybase::swap(_Right);
			_Filebuffer.swap(_Right._Filebuffer);
			}
		}

	void swap(_Myt&& _Right)
		{	
		_Assign_rv(::std:: forward<_Myt>(_Right));
		}

	void open(const wchar_t *_Filename,
		ios_base::openmode _Mode = ios_base::in,
		int _Prot = (int)ios_base::_Openprot)
		{	
		if (_Filebuffer.open(_Filename, _Mode | ios_base::in, _Prot) == 0)
			_Myios::setstate(ios_base::failbit);
		else
			_Myios::clear();	
		}

 
	void open(const wstring& _Str,
		ios_base::openmode _Mode = ios_base::in,
		int _Prot = (int)ios_base::_Openprot)
		{	
		open(_Str.c_str(), _Mode, _Prot);
		}
 #line 820 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\fstream"

	void open(const wchar_t *_Filename, ios_base::open_mode _Mode)
		{	
		open(_Filename, (ios_base::openmode)_Mode);
		}

 
	void open(const unsigned short *_Filename,
		ios_base::openmode _Mode = ios_base::in,
		int _Prot = (int)ios_base::_Openprot)
		{	
		if (_Filebuffer.open(_Filename, _Mode | ios_base::in, _Prot) == 0)
			_Myios::setstate(ios_base::failbit);
		else
			_Myios::clear();	
		}

	void open(const unsigned short *_Filename,
		ios_base::open_mode _Mode)
		{	
		open(_Filename, (ios_base::openmode)_Mode);
		}
 #line 843 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\fstream"

	virtual  ~basic_ifstream()
		{	
		}

	_Myfb *rdbuf() const
		{	
		return ((_Myfb *)&_Filebuffer);
		}

	bool is_open() const
		{	
		return (_Filebuffer.is_open());
		}

	void open(const char *_Filename,
		ios_base::openmode _Mode = ios_base::in,
		int _Prot = (int)ios_base::_Openprot)
		{	
		if (_Filebuffer.open(_Filename, _Mode | ios_base::in, _Prot) == 0)
			_Myios::setstate(ios_base::failbit);
		else
			_Myios::clear();	
		}

 
	void open(const string& _Str,
		ios_base::openmode _Mode = ios_base::in,
		int _Prot = (int)ios_base::_Openprot)
		{	
		open(_Str.c_str(), _Mode, _Prot);
		}
 #line 876 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\fstream"

	void open(const char *_Filename, ios_base::open_mode _Mode)
		{	
		open(_Filename, (ios_base::openmode)_Mode);
		}

	void close()
		{	
		if (_Filebuffer.close() == 0)
			_Myios::setstate(ios_base::failbit);
		}

private:
	_Myfb _Filebuffer;	
	};

	
template<class _Elem,
	class _Traits> inline
	void swap(basic_ifstream<_Elem, _Traits>& _Left,
		basic_ifstream<_Elem, _Traits>& _Right)
	{	
	_Left.swap(_Right);
	}

template<class _Elem,
	class _Traits> inline
	void swap(basic_ifstream<_Elem, _Traits>& _Left,
		basic_ifstream<_Elem, _Traits>&& _Right)
	{	
	typedef basic_ifstream<_Elem, _Traits> _Myt;
	_Left.swap(::std:: forward<_Myt>(_Right));
	}

template<class _Elem,
	class _Traits> inline
	void swap(basic_ifstream<_Elem, _Traits>&& _Left,
		basic_ifstream<_Elem, _Traits>& _Right)
	{	
	typedef basic_ifstream<_Elem, _Traits> _Myt;
	_Right.swap(::std:: forward<_Myt>(_Left));
	}

		
template<class _Elem,
	class _Traits>
	class basic_ofstream
		: public basic_ostream<_Elem, _Traits>
	{	
public:
	typedef basic_ofstream<_Elem, _Traits> _Myt;
	typedef basic_ostream<_Elem, _Traits> _Mybase;
	typedef basic_filebuf<_Elem, _Traits> _Myfb;
	typedef basic_ios<_Elem, _Traits> _Myios;

	basic_ofstream()
		: _Mybase(&_Filebuffer)
		{	
		}

	explicit basic_ofstream(const char *_Filename,
		ios_base::openmode _Mode = ios_base::out,
		int _Prot = (int)ios_base::_Openprot)
		: _Mybase(&_Filebuffer)
		{	
		if (_Filebuffer.open(_Filename, _Mode | ios_base::out, _Prot) == 0)
			_Myios::setstate(ios_base::failbit);
		}

 
	explicit basic_ofstream(const string& _Str,
		ios_base::openmode _Mode = ios_base::out,
		int _Prot = (int)ios_base::_Openprot)
		: _Mybase(&_Filebuffer)
		{	
		if (_Filebuffer.open(_Str.c_str(), _Mode | ios_base::out, _Prot) == 0)
			_Myios::setstate(ios_base::failbit);
		}
 #line 955 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\fstream"

	explicit basic_ofstream(const wchar_t *_Filename,
		ios_base::openmode _Mode = ios_base::out,
		int _Prot = (int)ios_base::_Openprot)
		: _Mybase(&_Filebuffer)
		{	
		if (_Filebuffer.open(_Filename, _Mode | ios_base::out, _Prot) == 0)
			_Myios::setstate(ios_base::failbit);
		}

 
	explicit basic_ofstream(const wstring& _Str,
		ios_base::openmode _Mode = ios_base::out,
		int _Prot = (int)ios_base::_Openprot)
		: _Mybase(&_Filebuffer)
		{	
		if (_Filebuffer.open(_Str.c_str(), _Mode | ios_base::out, _Prot) == 0)
			_Myios::setstate(ios_base::failbit);
		}
 #line 975 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\fstream"

 
	explicit basic_ofstream(const unsigned short *_Filename,
		ios_base::openmode _Mode = ios_base::out,
		int _Prot = (int)ios_base::_Openprot)
		: _Mybase(&_Filebuffer)
		{	
		if (_Filebuffer.open(_Filename, _Mode | ios_base::out, _Prot) == 0)
			_Myios::setstate(ios_base::failbit);
		}
 #line 986 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\fstream"

	explicit basic_ofstream(_iobuf *_File)
		: _Mybase(&_Filebuffer),
			_Filebuffer(_File)
		{	
		}

	basic_ofstream(_Myt&& _Right)
		: _Mybase(&_Filebuffer)
		{	
		_Assign_rv(::std:: forward<_Myt>(_Right));
		}

	_Myt& operator=(_Myt&& _Right)
		{	
		_Assign_rv(::std:: forward<_Myt>(_Right));
		return (*this);
		}

	void _Assign_rv(_Myt&& _Right)
		{	
		if (this != &_Right)
			{	
			_Filebuffer.close();
			this->swap(_Right);
			}
		}

	void swap(_Myt& _Right)
		{	
		if (this != &_Right)
			{	
			_Mybase::swap(_Right);
			_Filebuffer.swap(_Right._Filebuffer);
			}
		}

	void swap(_Myt&& _Right)
		{	
		_Assign_rv(::std:: forward<_Myt>(_Right));
		}

	void open(const wchar_t *_Filename,
		ios_base::openmode _Mode = ios_base::out,
		int _Prot = (int)ios_base::_Openprot)
		{	
		if (_Filebuffer.open(_Filename, _Mode | ios_base::out, _Prot) == 0)
			_Myios::setstate(ios_base::failbit);
		else
			_Myios::clear();	
		}

 
	void open(const wstring& _Str,
		ios_base::openmode _Mode = ios_base::out,
		int _Prot = (int)ios_base::_Openprot)
		{	
		open(_Str.c_str(), _Mode, _Prot);
		}
 #line 1046 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\fstream"

	void open(const wchar_t *_Filename, ios_base::open_mode _Mode)
		{	
		open(_Filename, (ios_base::openmode)_Mode);
		}

 
	void open(const unsigned short *_Filename,
		ios_base::openmode _Mode = ios_base::out,
		int _Prot = (int)ios_base::_Openprot)
		{	
		if (_Filebuffer.open(_Filename, _Mode | ios_base::out, _Prot) == 0)
			_Myios::setstate(ios_base::failbit);
		else
			_Myios::clear();	
		}

	void open(const unsigned short *_Filename,
		ios_base::open_mode _Mode)
		{	
		open(_Filename, (ios_base::openmode)_Mode);
		}
 #line 1069 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\fstream"

	virtual  ~basic_ofstream()
		{	
		}

	_Myfb *rdbuf() const
		{	
		return ((_Myfb *)&_Filebuffer);
		}

	bool is_open() const
		{	
		return (_Filebuffer.is_open());
		}

	void open(const char *_Filename,
		ios_base::openmode _Mode = ios_base::out,
		int _Prot = (int)ios_base::_Openprot)
		{	
		if (_Filebuffer.open(_Filename, _Mode | ios_base::out, _Prot) == 0)
			_Myios::setstate(ios_base::failbit);
		else
			_Myios::clear();	
		}

 
	void open(const string& _Str,
		ios_base::openmode _Mode = ios_base::out,
		int _Prot = (int)ios_base::_Openprot)
		{	
		open(_Str.c_str(), _Mode, _Prot);
		}
 #line 1102 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\fstream"

	void open(const char *_Filename, ios_base::open_mode _Mode)
		{	
		open(_Filename, (ios_base::openmode)_Mode);
		}

	void close()
		{	
		if (_Filebuffer.close() == 0)
			_Myios::setstate(ios_base::failbit);
		}

private:
	_Myfb _Filebuffer;	
	};

	
template<class _Elem,
	class _Traits> inline
	void swap(basic_ofstream<_Elem, _Traits>& _Left,
		basic_ofstream<_Elem, _Traits>& _Right)
	{	
	_Left.swap(_Right);
	}

template<class _Elem,
	class _Traits> inline
	void swap(basic_ofstream<_Elem, _Traits>& _Left,
		basic_ofstream<_Elem, _Traits>&& _Right)
	{	
	typedef basic_ofstream<_Elem, _Traits> _Myt;
	_Left.swap(::std:: forward<_Myt>(_Right));
	}

template<class _Elem,
	class _Traits> inline
	void swap(basic_ofstream<_Elem, _Traits>&& _Left,
		basic_ofstream<_Elem, _Traits>& _Right)
	{	
	typedef basic_ofstream<_Elem, _Traits> _Myt;
	_Right.swap(::std:: forward<_Myt>(_Left));
	}

		
template<class _Elem,
	class _Traits>
	class basic_fstream
		: public basic_iostream<_Elem, _Traits>
	{	
public:
	typedef basic_fstream<_Elem, _Traits> _Myt;
	typedef basic_iostream<_Elem, _Traits> _Mybase;
	typedef basic_filebuf<_Elem, _Traits> _Myfb;
	typedef basic_ios<_Elem, _Traits> _Myios;
	typedef _Elem char_type;
	typedef _Traits traits_type;
	typedef typename _Traits::int_type int_type;
	typedef typename _Traits::pos_type pos_type;
	typedef typename _Traits::off_type off_type;

	basic_fstream()
		: _Mybase(&_Filebuffer)
		{	
		}

	explicit basic_fstream(const char *_Filename,
		ios_base::openmode _Mode = ios_base::in | ios_base::out,
		int _Prot = (int)ios_base::_Openprot)
		: _Mybase(&_Filebuffer)
		{	
		if (_Filebuffer.open(_Filename, _Mode, _Prot) == 0)
			_Myios::setstate(ios_base::failbit);
		}

 
	explicit basic_fstream(const string& _Str,
		ios_base::openmode _Mode = ios_base::in | ios_base::out,
		int _Prot = (int)ios_base::_Openprot)
		: _Mybase(&_Filebuffer)
		{	
		if (_Filebuffer.open(_Str.c_str(), _Mode, _Prot) == 0)
			_Myios::setstate(ios_base::failbit);
		}
 #line 1186 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\fstream"

	explicit basic_fstream(const wchar_t *_Filename,
		ios_base::openmode _Mode = ios_base::in | ios_base::out,
		int _Prot = (int)ios_base::_Openprot)
		: _Mybase(&_Filebuffer)
		{	
		if (_Filebuffer.open(_Filename, _Mode, _Prot) == 0)
			_Myios::setstate(ios_base::failbit);
		}

 
	explicit basic_fstream(const wstring& _Str,
		ios_base::openmode _Mode = ios_base::in | ios_base::out,
		int _Prot = (int)ios_base::_Openprot)
		: _Mybase(&_Filebuffer)
		{	
		if (_Filebuffer.open(_Str.c_str(), _Mode, _Prot) == 0)
			_Myios::setstate(ios_base::failbit);
		}
 #line 1206 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\fstream"

 
	explicit basic_fstream(const unsigned short *_Filename,
		ios_base::openmode _Mode = ios_base::in | ios_base::out,
		int _Prot = (int)ios_base::_Openprot)
		: _Mybase(&_Filebuffer)
		{	
		if (_Filebuffer.open(_Filename, _Mode, _Prot) == 0)
			_Myios::setstate(ios_base::failbit);
		}
 #line 1217 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\fstream"

	explicit basic_fstream(_iobuf *_File)
		: _Mybase(&_Filebuffer),
			_Filebuffer(_File)
		{	
		}

	basic_fstream(_Myt&& _Right)
		: _Mybase(&_Filebuffer)
		{	
		_Assign_rv(::std:: forward<_Myt>(_Right));
		}

	_Myt& operator=(_Myt&& _Right)
		{	
		_Assign_rv(::std:: forward<_Myt>(_Right));
		return (*this);
		}

	void _Assign_rv(_Myt&& _Right)
		{	
		if (this != &_Right)
			{	
			_Filebuffer.close();
			this->swap(_Right);
			}
		}

	void swap(_Myt& _Right)
		{	
		if (this != &_Right)
			{	
			_Mybase::swap(_Right);
			_Filebuffer.swap(_Right._Filebuffer);
			}
		}

	void swap(_Myt&& _Right)
		{	
		_Assign_rv(::std:: forward<_Myt>(_Right));
		}

	void open(const wchar_t *_Filename,
		ios_base::openmode _Mode = ios_base::in | ios_base::out,
		int _Prot = (int)ios_base::_Openprot)
		{	
		if (_Filebuffer.open(_Filename, _Mode, _Prot) == 0)
			_Myios::setstate(ios_base::failbit);
		else
			_Myios::clear();	
		}

 
	void open(const wstring& _Str,
		ios_base::openmode _Mode = ios_base::in | ios_base::out,
		int _Prot = (int)ios_base::_Openprot)
		{	
		open(_Str.c_str(), _Mode, _Prot);
		}
 #line 1277 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\fstream"

	void open(const wchar_t *_Filename, ios_base::open_mode _Mode)
		{	
		open(_Filename, (ios_base::openmode)_Mode);
		}

 
	void open(const unsigned short *_Filename,
		ios_base::openmode _Mode = ios_base::in | ios_base::out,
		int _Prot = (int)ios_base::_Openprot)
		{	
		if (_Filebuffer.open(_Filename, _Mode, _Prot) == 0)
			_Myios::setstate(ios_base::failbit);
		else
			_Myios::clear();	
		}

	void open(const unsigned short *_Filename,
		ios_base::open_mode _Mode)
		{	
		open(_Filename, (ios_base::openmode)_Mode);
		}
 #line 1300 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\fstream"

	virtual  ~basic_fstream()
		{	
		}

	_Myfb *rdbuf() const
		{	
		return ((_Myfb *)&_Filebuffer);
		}

	bool is_open() const
		{	
		return (_Filebuffer.is_open());
		}

	void open(const char *_Filename,
		ios_base::openmode _Mode = ios_base::in | ios_base::out,
		int _Prot = (int)ios_base::_Openprot)
		{	
		if (_Filebuffer.open(_Filename, _Mode, _Prot) == 0)
			_Myios::setstate(ios_base::failbit);
		else
			_Myios::clear();	
		}

 
	void open(const string& _Str,
		ios_base::openmode _Mode = ios_base::in | ios_base::out,
		int _Prot = (int)ios_base::_Openprot)
		{	
		open(_Str.c_str(), _Mode, _Prot);
		}
 #line 1333 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\fstream"

	void open(const char *_Filename, ios_base::open_mode _Mode)
		{	
		open(_Filename, (ios_base::openmode)_Mode);
		}

	void close()
		{	
		if (_Filebuffer.close() == 0)
			_Myios::setstate(ios_base::failbit);
		}

private:
	_Myfb _Filebuffer;	
	};

	
template<class _Elem,
	class _Traits> inline
	void swap(basic_fstream<_Elem, _Traits>& _Left,
		basic_fstream<_Elem, _Traits>& _Right)
	{	
	_Left.swap(_Right);
	}

template<class _Elem,
	class _Traits> inline
	void swap(basic_fstream<_Elem, _Traits>& _Left,
		basic_fstream<_Elem, _Traits>&& _Right)
	{	
	typedef basic_fstream<_Elem, _Traits> _Myt;
	_Left.swap(::std:: forward<_Myt>(_Right));
	}

template<class _Elem,
	class _Traits> inline
	void swap(basic_fstream<_Elem, _Traits>&& _Left,
		basic_fstream<_Elem, _Traits>& _Right)
	{	
	typedef basic_fstream<_Elem, _Traits> _Myt;
	_Right.swap(::std:: forward<_Myt>(_Left));
	}
}

 #pragma warning(pop)
 #pragma pack(pop)

#line 1381 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\fstream"
#line 1382 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\fstream"






#line 18 "c:\\users\\blake\\documents\\github\\pct-reconstruction\\pCT_Reconstruction.h"
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\functional"

#pragma once



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfunctional"

#pragma once






 #pragma pack(push,8)
 #pragma warning(push,3)

 #pragma warning(disable: 4100 4180 4244)

 



namespace std {
		
template<class _Ty>
	struct plus
		: public binary_function<_Ty, _Ty, _Ty>
	{	
	_Ty operator()(const _Ty& _Left, const _Ty& _Right) const
		{	
		return (_Left + _Right);
		}
	};

		
template<class _Ty>
	struct minus
		: public binary_function<_Ty, _Ty, _Ty>
	{	
	_Ty operator()(const _Ty& _Left, const _Ty& _Right) const
		{	
		return (_Left - _Right);
		}
	};

		
template<class _Ty>
	struct multiplies
		: public binary_function<_Ty, _Ty, _Ty>
	{	
	_Ty operator()(const _Ty& _Left, const _Ty& _Right) const
		{	
		return (_Left * _Right);
		}
	};

		
template<class _Ty>
	struct divides
		: public binary_function<_Ty, _Ty, _Ty>
	{	
	_Ty operator()(const _Ty& _Left, const _Ty& _Right) const
		{	
		return (_Left / _Right);
		}
	};

		
template<class _Ty>
	struct modulus
		: public binary_function<_Ty, _Ty, _Ty>
	{	
	_Ty operator()(const _Ty& _Left, const _Ty& _Right) const
		{	
		return (_Left % _Right);
		}
	};

		
template<class _Ty>
	struct negate
		: public unary_function<_Ty, _Ty>
	{	
	_Ty operator()(const _Ty& _Left) const
		{	
		return (-_Left);
		}
	};

		
template<class _Ty>
	struct equal_to
		: public binary_function<_Ty, _Ty, bool>
	{	
	bool operator()(const _Ty& _Left, const _Ty& _Right) const
		{	
		return (_Left == _Right);
		}
	};

		
template<class _Ty>
	struct not_equal_to
		: public binary_function<_Ty, _Ty, bool>
	{	
	bool operator()(const _Ty& _Left, const _Ty& _Right) const
		{	
		return (_Left != _Right);
		}
	};

		
template<class _Ty>
	struct greater
		: public binary_function<_Ty, _Ty, bool>
	{	
	bool operator()(const _Ty& _Left, const _Ty& _Right) const
		{	
		return (_Left > _Right);
		}
	};

		
template<class _Ty>
	struct less
		: public binary_function<_Ty, _Ty, bool>
	{	
	bool operator()(const _Ty& _Left, const _Ty& _Right) const
		{	
		return (_Left < _Right);
		}
	};

		
template<class _Ty>
	struct greater_equal
		: public binary_function<_Ty, _Ty, bool>
	{	
	bool operator()(const _Ty& _Left, const _Ty& _Right) const
		{	
		return (_Left >= _Right);
		}
	};

		
template<class _Ty>
	struct less_equal
		: public binary_function<_Ty, _Ty, bool>
	{	
	bool operator()(const _Ty& _Left, const _Ty& _Right) const
		{	
		return (_Left <= _Right);
		}
	};

		
template<class _Ty>
	struct logical_and
		: public binary_function<_Ty, _Ty, bool>
	{	
	bool operator()(const _Ty& _Left, const _Ty& _Right) const
		{	
		return (_Left && _Right);
		}
	};

		
template<class _Ty>
	struct logical_or
		: public binary_function<_Ty, _Ty, bool>
	{	
	bool operator()(const _Ty& _Left, const _Ty& _Right) const
		{	
		return (_Left || _Right);
		}
	};

		
template<class _Ty>
	struct logical_not
		: public unary_function<_Ty, bool>
	{	
	bool operator()(const _Ty& _Left) const
		{	
		return (!_Left);
		}
	};

 
		
template<class _Ty>
	struct bit_and
		: public binary_function<_Ty, _Ty, _Ty>
	{	
	_Ty operator()(const _Ty& _Left, const _Ty& _Right) const
		{	
		return (_Left & _Right);
		}
	};

		
template<class _Ty>
	struct bit_or
		: public binary_function<_Ty, _Ty, _Ty>
	{	
	_Ty operator()(const _Ty& _Left, const _Ty& _Right) const
		{	
		return (_Left | _Right);
		}
	};

		
template<class _Ty>
	struct bit_xor
		: public binary_function<_Ty, _Ty, _Ty>
	{	
	_Ty operator()(const _Ty& _Left, const _Ty& _Right) const
		{	
		return (_Left ^ _Right);
		}
	};
 #line 218 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfunctional"

		
template<class _Fn1>
	class unary_negate
	: public unary_function<typename _Fn1::argument_type, bool>
	{	
public:
	explicit unary_negate(const _Fn1& _Func)
		: _Functor(_Func)
		{	
		}

	bool operator()(const typename _Fn1::argument_type& _Left) const
		{	
		return (!_Functor(_Left));
		}

protected:
	_Fn1 _Functor;	
	};

		
template<class _Fn1> inline
	unary_negate<_Fn1> not1(const _Fn1& _Func)
	{	
	return (::std:: unary_negate<_Fn1>(_Func));
	}

		
template<class _Fn2>
	class binary_negate
		: public binary_function<typename _Fn2::first_argument_type,
			typename _Fn2::second_argument_type, bool>
	{	
public:
	explicit binary_negate(const _Fn2& _Func)
		: _Functor(_Func)
		{	
		}

	bool operator()(const typename _Fn2::first_argument_type& _Left,
		const typename _Fn2::second_argument_type& _Right) const
		{	
		return (!_Functor(_Left, _Right));
		}

protected:
	_Fn2 _Functor;	
	};

		
template<class _Fn2> inline
	binary_negate<_Fn2> not2(const _Fn2& _Func)
	{	
	return (::std:: binary_negate<_Fn2>(_Func));
	}

		
template<class _Fn2>
	class binder1st
		: public unary_function<typename _Fn2::second_argument_type,
			typename _Fn2::result_type>
	{	
public:
	typedef unary_function<typename _Fn2::second_argument_type,
		typename _Fn2::result_type> _Base;
	typedef typename _Base::argument_type argument_type;
	typedef typename _Base::result_type result_type;

	binder1st(const _Fn2& _Func,
		const typename _Fn2::first_argument_type& _Left)
		: op(_Func), value(_Left)
		{	
		}

	result_type operator()(const argument_type& _Right) const
		{	
		return (op(value, _Right));
		}

	result_type operator()(argument_type& _Right) const
		{	
		return (op(value, _Right));
		}

protected:
	_Fn2 op;	
	typename _Fn2::first_argument_type value;	
	};

		
template<class _Fn2,
	class _Ty> inline
	binder1st<_Fn2> bind1st(const _Fn2& _Func, const _Ty& _Left)
		{	
		typename _Fn2::first_argument_type _Val(_Left);
		return (::std:: binder1st<_Fn2>(_Func, _Val));
		}

		
template<class _Fn2>
	class binder2nd
		: public unary_function<typename _Fn2::first_argument_type,
			typename _Fn2::result_type>
	{	
public:
	typedef unary_function<typename _Fn2::first_argument_type,
		typename _Fn2::result_type> _Base;
	typedef typename _Base::argument_type argument_type;
	typedef typename _Base::result_type result_type;

	binder2nd(const _Fn2& _Func,
		const typename _Fn2::second_argument_type& _Right)
		: op(_Func), value(_Right)
		{	
		}

	result_type operator()(const argument_type& _Left) const
		{	
		return (op(_Left, value));
		}

	result_type operator()(argument_type& _Left) const
		{	
		return (op(_Left, value));
		}

protected:
	_Fn2 op;	
	typename _Fn2::second_argument_type value;	
	};

		
template<class _Fn2,
	class _Ty> inline
	binder2nd<_Fn2> bind2nd(const _Fn2& _Func, const _Ty& _Right)
	{	
	typename _Fn2::second_argument_type _Val(_Right);
	return (::std:: binder2nd<_Fn2>(_Func, _Val));
	}

		
template<class _Arg,
	class _Result,
	class _Fn = _Result (*)(_Arg)>
	class pointer_to_unary_function
		: public unary_function<_Arg, _Result>
	{	
public:
	explicit pointer_to_unary_function(_Fn _Left)
		: _Pfun(_Left)
		{	
		}

	_Result operator()(_Arg _Left) const
		{	
		return (_Pfun(_Left));
		}

protected:
	_Fn _Pfun;	
	};

		
template<class _Arg1,
	class _Arg2,
	class _Result,
	class _Fn = _Result (*)(_Arg1, _Arg2)>
	class pointer_to_binary_function
		: public binary_function<_Arg1, _Arg2, _Result>
	{	
public:
	explicit pointer_to_binary_function(_Fn _Left)
		: _Pfun(_Left)
		{	
		}

	_Result operator()(_Arg1 _Left, _Arg2 _Right) const
		{	
		return (_Pfun(_Left, _Right));
		}

protected:
	_Fn _Pfun;	
	};

		
template<class _Arg,
	class _Result> inline
	pointer_to_unary_function<_Arg, _Result,
		_Result (__cdecl *)(_Arg)>
		ptr_fun(_Result (__cdecl *_Left)(_Arg))
	{	
	return (pointer_to_unary_function<_Arg, _Result,
		_Result (__cdecl *)(_Arg)>(_Left));
	}

 
























 











template<class _Arg1,
	class _Arg2,
	class _Result> inline
	pointer_to_binary_function<_Arg1, _Arg2, _Result,
		_Result (__cdecl *)(_Arg1, _Arg2)>
		ptr_fun(_Result (__cdecl *_Left)(_Arg1, _Arg2))
	{	
	return (pointer_to_binary_function<_Arg1, _Arg2, _Result,
		_Result (__cdecl *)(_Arg1, _Arg2)>(_Left));
	}

 


























 












		
template<class _Result,
	class _Ty>
	class mem_fun_t
		: public unary_function<_Ty *, _Result>
	{	
public:
	explicit mem_fun_t(_Result (_Ty::*_Pm)())
		: _Pmemfun(_Pm)
		{	
		}

	_Result operator()(_Ty *_Pleft) const
		{	
		return ((_Pleft->*_Pmemfun)());
		}

private:
	_Result (_Ty::*_Pmemfun)();	
	};

		
template<class _Result,
	class _Ty,
	class _Arg>
	class mem_fun1_t
		: public binary_function<_Ty *, _Arg, _Result>
	{	
public:
	explicit mem_fun1_t(_Result (_Ty::*_Pm)(_Arg))
		: _Pmemfun(_Pm)
		{	
		}

	_Result operator()(_Ty *_Pleft, _Arg _Right) const
		{	
		return ((_Pleft->*_Pmemfun)(_Right));
		}

private:
	_Result (_Ty::*_Pmemfun)(_Arg);	
	};

		
template<class _Result,
	class _Ty>
	class const_mem_fun_t
		: public unary_function<const _Ty *, _Result>
	{	
public:
	explicit const_mem_fun_t(_Result (_Ty::*_Pm)() const)
		: _Pmemfun(_Pm)
		{	
		}

	_Result operator()(const _Ty *_Pleft) const
		{	
		return ((_Pleft->*_Pmemfun)());
		}

private:
	_Result (_Ty::*_Pmemfun)() const;	
	};

		
template<class _Result,
	class _Ty,
	class _Arg>
	class const_mem_fun1_t
		: public binary_function<const _Ty *, _Arg, _Result>
	{	
public:
	explicit const_mem_fun1_t(_Result (_Ty::*_Pm)(_Arg) const)
		: _Pmemfun(_Pm)
		{	
		}

	_Result operator()(const _Ty *_Pleft, _Arg _Right) const
		{	
		return ((_Pleft->*_Pmemfun)(_Right));
		}

private:
	_Result (_Ty::*_Pmemfun)(_Arg) const;	
	};

		
template<class _Result,
	class _Ty> inline
	mem_fun_t<_Result, _Ty> mem_fun(_Result (_Ty::*_Pm)())
	{	
	return (mem_fun_t<_Result, _Ty>(_Pm));
	}

template<class _Result,
	class _Ty,
	class _Arg> inline
	mem_fun1_t<_Result, _Ty, _Arg> mem_fun(_Result (_Ty::*_Pm)(_Arg))
	{	
	return (mem_fun1_t<_Result, _Ty, _Arg>(_Pm));
	}

template<class _Result,
	class _Ty> inline
	const_mem_fun_t<_Result, _Ty>
		mem_fun(_Result (_Ty::*_Pm)() const)
	{	
	return (const_mem_fun_t<_Result, _Ty>(_Pm));
	}

template<class _Result,
	class _Ty,
	class _Arg> inline
	const_mem_fun1_t<_Result, _Ty, _Arg>
		mem_fun(_Result (_Ty::*_Pm)(_Arg) const)
	{	
	return (const_mem_fun1_t<_Result, _Ty, _Arg>(_Pm));
	}

		
template<class _Result,
	class _Ty,
	class _Arg> inline
	mem_fun1_t<_Result, _Ty, _Arg> mem_fun1(_Result (_Ty::*_Pm)(_Arg))
	{	
	return (mem_fun1_t<_Result, _Ty, _Arg>(_Pm));
	}

		
template<class _Result,
	class _Ty>
	class mem_fun_ref_t
		: public unary_function<_Ty, _Result>
	{	
public:
	explicit mem_fun_ref_t(_Result (_Ty::*_Pm)())
		: _Pmemfun(_Pm)
		{	
		}

	_Result operator()(_Ty& _Left) const
		{	
		return ((_Left.*_Pmemfun)());
		}

private:
	_Result (_Ty::*_Pmemfun)();	
	};

		
template<class _Result,
	class _Ty,
	class _Arg>
	class mem_fun1_ref_t
		: public binary_function<_Ty, _Arg, _Result>
	{	
public:
	explicit mem_fun1_ref_t(_Result (_Ty::*_Pm)(_Arg))
		: _Pmemfun(_Pm)
		{	
		}

	_Result operator()(_Ty& _Left, _Arg _Right) const
		{	
		return ((_Left.*_Pmemfun)(_Right));
		}

private:
	_Result (_Ty::*_Pmemfun)(_Arg);	
	};

		
template<class _Result,
	class _Ty>
	class const_mem_fun_ref_t
		: public unary_function<_Ty, _Result>
	{	
public:
	explicit const_mem_fun_ref_t(_Result (_Ty::*_Pm)() const)
		: _Pmemfun(_Pm)
		{	
		}

	_Result operator()(const _Ty& _Left) const
		{	
		return ((_Left.*_Pmemfun)());
		}

private:
	_Result (_Ty::*_Pmemfun)() const;	
	};

		
template<class _Result,
	class _Ty,
	class _Arg>
	class const_mem_fun1_ref_t
		: public binary_function<_Ty, _Arg, _Result>
	{	
public:
	explicit const_mem_fun1_ref_t(_Result (_Ty::*_Pm)(_Arg) const)
		: _Pmemfun(_Pm)
		{	
		}

	_Result operator()(const _Ty& _Left, _Arg _Right) const
		{	
		return ((_Left.*_Pmemfun)(_Right));
		}

private:
	_Result (_Ty::*_Pmemfun)(_Arg) const;	
	};

		
template<class _Result,
	class _Ty> inline
	mem_fun_ref_t<_Result, _Ty> mem_fun_ref(_Result (_Ty::*_Pm)())
	{	
	return (mem_fun_ref_t<_Result, _Ty>(_Pm));
	}

template<class _Result,
	class _Ty,
	class _Arg> inline
	mem_fun1_ref_t<_Result, _Ty, _Arg>
		mem_fun_ref(_Result (_Ty::*_Pm)(_Arg))
	{	
	return (mem_fun1_ref_t<_Result, _Ty, _Arg>(_Pm));
	}

template<class _Result,
	class _Ty> inline
	const_mem_fun_ref_t<_Result, _Ty>
		mem_fun_ref(_Result (_Ty::*_Pm)() const)
	{	
	return (const_mem_fun_ref_t<_Result, _Ty>(_Pm));
	}

template<class _Result,
	class _Ty,
	class _Arg> inline
	const_mem_fun1_ref_t<_Result, _Ty, _Arg>
		mem_fun_ref(_Result (_Ty::*_Pm)(_Arg) const)
	{	
	return (const_mem_fun1_ref_t<_Result, _Ty, _Arg>(_Pm));
	}

		
template<class _Result,
	class _Ty,
	class _Arg> inline
	mem_fun1_ref_t<_Result, _Ty, _Arg> mem_fun1_ref(_Result (_Ty::*_Pm)(_Arg))
	{	
	return (mem_fun1_ref_t<_Result, _Ty, _Arg>(_Pm));
	}

	
template<class _Kty>
	class hash
		: public unary_function<_Kty, size_t>
	{	
public:
	size_t operator()(const _Kty& _Keyval) const
		{	
		ldiv_t _Qrem = :: ldiv((long)(size_t)_Keyval, 127773);

		_Qrem.rem = 16807 * _Qrem.rem - 2836 * _Qrem.quot;
		if (_Qrem.rem < 0)
			_Qrem.rem += 2147483647;
		return ((size_t)_Qrem.rem);
		}
	};

template<>
	class hash<_ULonglong>
		: public unary_function<_ULonglong, size_t>
	{	
public:
	typedef _ULonglong _Kty;
	typedef _Uint32t _Inttype;	

	size_t operator()(const _Kty& _Keyval) const
		{	
		return (hash<_Inttype>()((_Inttype)(_Keyval & 0xffffffffUL))
			^ hash<_Inttype>()((_Inttype)(_Keyval >> 32)));
		}
	};

template<>
	class hash<_Longlong>
		: public unary_function<_Longlong, size_t>
	{	
public:
	typedef _Longlong _Kty;
	typedef _Uint32t _Inttype;	

	size_t operator()(const _Kty& _Keyval) const
		{	
		return (hash<_ULonglong>()((_ULonglong)_Keyval));
		}
	};

template<class _Ty>
	class hash<_Ty *>
		: public unary_function<_Ty *, size_t>
	{	
public:
	typedef _Ty *_Kty;
	typedef _Uint32t _Inttype;	

	size_t operator()(_Kty _Keyval) const
		{	
		typedef typename ::std:: _If<sizeof (_Ty *) <= sizeof (_Inttype),
			_Inttype, _ULonglong>::_Type _Integer;
		return (hash<_Integer>()((_Integer)_Keyval));
		}
	};

template<>
	class hash<float>
		: public unary_function<float, size_t>
	{	
public:
	typedef float _Kty;
	typedef _Uint32t _Inttype;	

	size_t operator()(const _Kty& _Keyval) const
		{	
		_Inttype _Bits = *(_Inttype *)&_Keyval;
		return (hash<_Inttype>()(_Bits == 0x80000000 ? 0 : _Bits));
		}
	};

template<>
	class hash<double>
		: public unary_function<double, size_t>
	{	
public:
	typedef double _Kty;
	typedef _ULonglong _Inttype;	

	size_t operator()(const _Kty& _Keyval) const
		{	
		_Inttype _Bits = *(_Inttype *)&_Keyval;
		return (hash<_Inttype>()(
			(_Bits & (0xffffffffffffffff >> 1)) == 0 ? 0 : _Bits));
		}
	};

template<>
	class hash<long double>
		: public unary_function<long double, size_t>
	{	
public:
	typedef long double _Kty;
	typedef _ULonglong _Inttype;	

	size_t operator()(const _Kty& _Keyval) const
		{	
		_Inttype _Bits = *(_Inttype *)&_Keyval;
		return (hash<_Inttype>()(
			(_Bits & (0xffffffffffffffff >> 1)) == 0 ? 0 : _Bits));
		}
	};

template<>
	class hash<::std:: string>
		: public unary_function<::std:: string, size_t>
	{	
public:
	typedef ::std:: string _Kty;

	size_t operator()(const _Kty& _Keyval) const
		{	
		size_t _Val = 2166136261U;
		size_t _First = 0;
		size_t _Last = _Keyval.size();
		size_t _Stride = 1 + _Last / 10;

		for(; _First < _Last; _First += _Stride)
			_Val = 16777619U * _Val ^ (size_t)_Keyval[_First];
		return (_Val);
		}
	};

template<>
	class hash<::std:: wstring>
		: public unary_function<::std:: wstring, size_t>
	{	
public:
	typedef ::std:: wstring _Kty;

	size_t operator()(const _Kty& _Keyval) const
		{	
		size_t _Val = 2166136261U;
		size_t _First = 0;
		size_t _Last = _Keyval.size();
		size_t _Stride = 1 + _Last / 10;

		for(; _First < _Last; _First += _Stride)
			_Val = 16777619U * _Val ^ (size_t)_Keyval[_First];
		return (_Val);
		}
	};

	namespace tr1 {
using ::std:: hash;
	}	
}

 #pragma warning(pop)
 #pragma pack(pop)

#line 918 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfunctional"
#line 919 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfunctional"






















#line 7 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\functional"

 #pragma pack(push,8)
 #pragma warning(push,3)

 
 

 


#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xrefwrap"

#pragma once





 #pragma pack(push,8)
 #pragma warning(push,3)

 #pragma warning(disable: 4180)

namespace std {
 namespace tr1 {	


	
template<class _Ty>
	struct _Result_of;

 
 #line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"





 

#line 9 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"





 
 #line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 
  
  
  
  
  
  

 

















































































#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  

 




#line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  
  
  
  
  
  
  
  
  
  
  
  
  

 




























#line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  

 

#line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  

 

#line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 265 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 267 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 269 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"







template<bool,
	class _Fty
	     >
	struct _Result_type0;

template<class _Fty
	     >
	struct _Result_type0<true, _Fty      >
	{	
	typedef typename _Fty::result_type _Type;
	};

template<class _Fty
	     >
	struct _Result_type0<false, _Fty      >
	{	
 
	typedef void _Type;

 

#line 30 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"
	};

	
template<class _Fty
	     >
	struct _Result_of0
	{	
	static const bool _Value = (sizeof (::std:: tr1::_Has_result_type((_Fty *)0)) == sizeof (::std:: tr1::_Yes));
	typedef typename _Result_type0<
		_Result_of0<_Fty      >::_Value,
		_Fty      >::_Type _Type;
	};


template<class _Ret
	     
	     >
	struct _Result_of0<_Ret(__cdecl &)(    )      >
	{	
	typedef _Ret _Type;
	};

template<class _Ret
	     
	     >
	struct _Result_of0<_Ret(__cdecl *)(    )      >
	{	
	typedef _Ret _Type;
	};

template<class _Ret
	     
	     >
	struct _Result_of0<_Ret(__cdecl * const)(    )      >
	{	
	typedef _Ret _Type;
	};

 



















































 


























 















#line 164 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 








































































































































































































































































































































































































































#line 591 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

	
template<class _Fty
	     >
	struct _Result_of<_Fty __cdecl (    )>
	{	
	typedef typename _Result_of0<_Fty      >::_Type _Type;
	};

 

















 















#line 270 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"








#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 16 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"
 
#line 18 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"


#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 









































































#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  

 













#line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  

 

#line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  

 

#line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 265 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 267 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 269 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"







template<bool,
	class _Fty
	, class _Arg0    >
	struct _Result_type1;

template<class _Fty
	, class _Arg0    >
	struct _Result_type1<true, _Fty , _Arg0    >
	{	
	typedef typename _Fty::result_type _Type;
	};

template<class _Fty
	, class _Arg0    >
	struct _Result_type1<false, _Fty , _Arg0    >
	{	
 


#line 28 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"
	typedef typename _Fty::template result<_Fty(_Arg0    )>::type _Type;
 #line 30 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"
	};

	
template<class _Fty
	, class _Farg0    >
	struct _Result_of1
	{	
	static const bool _Value = (sizeof (::std:: tr1::_Has_result_type((_Fty *)0)) == sizeof (::std:: tr1::_Yes));
	typedef typename _Result_type1<
		_Result_of1<_Fty , _Farg0    >::_Value,
		_Fty , _Farg0    >::_Type _Type;
	};


template<class _Ret
	, class _Arg0    
	, class _Farg0    >
	struct _Result_of1<_Ret(__cdecl &)(_Arg0    ) , _Farg0    >
	{	
	typedef _Ret _Type;
	};

template<class _Ret
	, class _Arg0    
	, class _Farg0    >
	struct _Result_of1<_Ret(__cdecl *)(_Arg0    ) , _Farg0    >
	{	
	typedef _Ret _Type;
	};

template<class _Ret
	, class _Arg0    
	, class _Farg0    >
	struct _Result_of1<_Ret(__cdecl * const)(_Arg0    ) , _Farg0    >
	{	
	typedef _Ret _Type;
	};

 



















































 


























 
template<class _Rx,
	class _Arg0,
	class _Farg0>
	struct _Result_of1<_Rx _Arg0::*, _Farg0>
	{	
	typedef typename _Copy_cv<_Rx, _Farg0>::_Type _Type;
	};

template<class _Rx,
	class _Arg0,
	class _Farg0>
	struct _Result_of1<_Rx _Arg0::*const, _Farg0>
	{	
	typedef typename _Copy_cv<_Rx, _Farg0>::_Type _Type;
	};
 #line 164 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 
	
template<class _Rx,
	class _Arg0    
	, class _Farg0    >
	struct _Result_of1<_Rx (__thiscall _Arg0::*)(  ),
		_Farg0&    >
	{	
	typedef _Rx _Type;
	};

 































 










	
template<class _Rx,
	class _Arg0    
	, class _Farg0    >
	struct _Result_of1<_Rx (__thiscall _Arg0::*)(  ) const,
		_Farg0&    >
	{	
	typedef _Rx _Type;
	};

 































 










	
template<class _Rx,
	class _Arg0    
	, class _Farg0    >
	struct _Result_of1<_Rx (__thiscall _Arg0::*)(  ) volatile,
		_Farg0&    >
	{	
	typedef _Rx _Type;
	};

 































 










	
template<class _Rx,
	class _Arg0    
	, class _Farg0    >
	struct _Result_of1<_Rx (__thiscall _Arg0::*)(  ) const volatile,
		_Farg0&    >
	{	
	typedef _Rx _Type;
	};

 































 










	
template<class _Rx,
	class _Arg0    
	, class _Farg0    >
	struct _Result_of1<_Rx (__thiscall _Arg0::*const)(  ),
		_Farg0&    >
	{	
	typedef _Rx _Type;
	};

 































 










	
template<class _Rx,
	class _Arg0    
	, class _Farg0    >
	struct _Result_of1<_Rx (__thiscall _Arg0::*const)(  ) const,
		_Farg0&    >
	{	
	typedef _Rx _Type;
	};

 































 










	
template<class _Rx,
	class _Arg0    
	, class _Farg0    >
	struct _Result_of1<_Rx (__thiscall _Arg0::*const)(  ) volatile,
		_Farg0&    >
	{	
	typedef _Rx _Type;
	};

 































 










	
template<class _Rx,
	class _Arg0    
	, class _Farg0    >
	struct _Result_of1<_Rx (__thiscall _Arg0::*const)(  ) const volatile,
		_Farg0&    >
	{	
	typedef _Rx _Type;
	};

 































 










 #line 591 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

	
template<class _Fty
	, class _Arg0    >
	struct _Result_of<_Fty __cdecl (_Arg0    )>
	{	
	typedef typename _Result_of1<_Fty , typename _Remove_reference<_Arg0 >::_Type&    >::_Type _Type;
	};

 

















 















#line 270 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"








#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 21 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

































































#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  

 

#line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 265 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 267 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 269 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"







template<bool,
	class _Fty
	, class _Arg0 ,   class _Arg1>
	struct _Result_type2;

template<class _Fty
	, class _Arg0 ,   class _Arg1>
	struct _Result_type2<true, _Fty , _Arg0 ,   _Arg1>
	{	
	typedef typename _Fty::result_type _Type;
	};

template<class _Fty
	, class _Arg0 ,   class _Arg1>
	struct _Result_type2<false, _Fty , _Arg0 ,   _Arg1>
	{	
 


#line 28 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"
	typedef typename _Fty::template result<_Fty(_Arg0 ,   _Arg1)>::type _Type;
 #line 30 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"
	};

	
template<class _Fty
	, class _Farg0 ,   class _Farg1>
	struct _Result_of2
	{	
	static const bool _Value = (sizeof (::std:: tr1::_Has_result_type((_Fty *)0)) == sizeof (::std:: tr1::_Yes));
	typedef typename _Result_type2<
		_Result_of2<_Fty , _Farg0 ,   _Farg1>::_Value,
		_Fty , _Farg0 ,   _Farg1>::_Type _Type;
	};


template<class _Ret
	, class _Arg0 ,   class _Arg1
	, class _Farg0 ,   class _Farg1>
	struct _Result_of2<_Ret(__cdecl &)(_Arg0 ,   _Arg1) , _Farg0 ,   _Farg1>
	{	
	typedef _Ret _Type;
	};

template<class _Ret
	, class _Arg0 ,   class _Arg1
	, class _Farg0 ,   class _Farg1>
	struct _Result_of2<_Ret(__cdecl *)(_Arg0 ,   _Arg1) , _Farg0 ,   _Farg1>
	{	
	typedef _Ret _Type;
	};

template<class _Ret
	, class _Arg0 ,   class _Arg1
	, class _Farg0 ,   class _Farg1>
	struct _Result_of2<_Ret(__cdecl * const)(_Arg0 ,   _Arg1) , _Farg0 ,   _Farg1>
	{	
	typedef _Ret _Type;
	};

 



















































 


























 















#line 164 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 
	
template<class _Rx,
	class _Arg0 ,   class _Arg1
	, class _Farg0 ,   class _Farg1>
	struct _Result_of2<_Rx (__thiscall _Arg0::*)(  _Arg1),
		_Farg0& ,   _Farg1>
	{	
	typedef _Rx _Type;
	};

 































 










	
template<class _Rx,
	class _Arg0 ,   class _Arg1
	, class _Farg0 ,   class _Farg1>
	struct _Result_of2<_Rx (__thiscall _Arg0::*)(  _Arg1) const,
		_Farg0& ,   _Farg1>
	{	
	typedef _Rx _Type;
	};

 































 










	
template<class _Rx,
	class _Arg0 ,   class _Arg1
	, class _Farg0 ,   class _Farg1>
	struct _Result_of2<_Rx (__thiscall _Arg0::*)(  _Arg1) volatile,
		_Farg0& ,   _Farg1>
	{	
	typedef _Rx _Type;
	};

 































 










	
template<class _Rx,
	class _Arg0 ,   class _Arg1
	, class _Farg0 ,   class _Farg1>
	struct _Result_of2<_Rx (__thiscall _Arg0::*)(  _Arg1) const volatile,
		_Farg0& ,   _Farg1>
	{	
	typedef _Rx _Type;
	};

 































 










	
template<class _Rx,
	class _Arg0 ,   class _Arg1
	, class _Farg0 ,   class _Farg1>
	struct _Result_of2<_Rx (__thiscall _Arg0::*const)(  _Arg1),
		_Farg0& ,   _Farg1>
	{	
	typedef _Rx _Type;
	};

 































 










	
template<class _Rx,
	class _Arg0 ,   class _Arg1
	, class _Farg0 ,   class _Farg1>
	struct _Result_of2<_Rx (__thiscall _Arg0::*const)(  _Arg1) const,
		_Farg0& ,   _Farg1>
	{	
	typedef _Rx _Type;
	};

 































 










	
template<class _Rx,
	class _Arg0 ,   class _Arg1
	, class _Farg0 ,   class _Farg1>
	struct _Result_of2<_Rx (__thiscall _Arg0::*const)(  _Arg1) volatile,
		_Farg0& ,   _Farg1>
	{	
	typedef _Rx _Type;
	};

 































 










	
template<class _Rx,
	class _Arg0 ,   class _Arg1
	, class _Farg0 ,   class _Farg1>
	struct _Result_of2<_Rx (__thiscall _Arg0::*const)(  _Arg1) const volatile,
		_Farg0& ,   _Farg1>
	{	
	typedef _Rx _Type;
	};

 































 










 #line 591 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

	
template<class _Fty
	, class _Arg0 ,   class _Arg1>
	struct _Result_of<_Fty __cdecl (_Arg0 ,   _Arg1)>
	{	
	typedef typename _Result_of2<_Fty , typename _Remove_reference<_Arg0 >::_Type& ,   typename _Remove_reference<_Arg1 >::_Type&>::_Type _Type;
	};

 

















 















#line 270 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"








#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 25 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

























































#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 265 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 267 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 269 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"







template<bool,
	class _Fty
	, class _Arg0 , class _Arg1 , class _Arg2>
	struct _Result_type3;

template<class _Fty
	, class _Arg0 , class _Arg1 , class _Arg2>
	struct _Result_type3<true, _Fty , _Arg0 , _Arg1 , _Arg2>
	{	
	typedef typename _Fty::result_type _Type;
	};

template<class _Fty
	, class _Arg0 , class _Arg1 , class _Arg2>
	struct _Result_type3<false, _Fty , _Arg0 , _Arg1 , _Arg2>
	{	
 


#line 28 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"
	typedef typename _Fty::template result<_Fty(_Arg0 , _Arg1 , _Arg2)>::type _Type;
 #line 30 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"
	};

	
template<class _Fty
	, class _Farg0 , class _Farg1 , class _Farg2>
	struct _Result_of3
	{	
	static const bool _Value = (sizeof (::std:: tr1::_Has_result_type((_Fty *)0)) == sizeof (::std:: tr1::_Yes));
	typedef typename _Result_type3<
		_Result_of3<_Fty , _Farg0 , _Farg1 , _Farg2>::_Value,
		_Fty , _Farg0 , _Farg1 , _Farg2>::_Type _Type;
	};


template<class _Ret
	, class _Arg0 , class _Arg1 , class _Arg2
	, class _Farg0 , class _Farg1 , class _Farg2>
	struct _Result_of3<_Ret(__cdecl &)(_Arg0 , _Arg1 , _Arg2) , _Farg0 , _Farg1 , _Farg2>
	{	
	typedef _Ret _Type;
	};

template<class _Ret
	, class _Arg0 , class _Arg1 , class _Arg2
	, class _Farg0 , class _Farg1 , class _Farg2>
	struct _Result_of3<_Ret(__cdecl *)(_Arg0 , _Arg1 , _Arg2) , _Farg0 , _Farg1 , _Farg2>
	{	
	typedef _Ret _Type;
	};

template<class _Ret
	, class _Arg0 , class _Arg1 , class _Arg2
	, class _Farg0 , class _Farg1 , class _Farg2>
	struct _Result_of3<_Ret(__cdecl * const)(_Arg0 , _Arg1 , _Arg2) , _Farg0 , _Farg1 , _Farg2>
	{	
	typedef _Ret _Type;
	};

 



















































 


























 















#line 164 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 
	
template<class _Rx,
	class _Arg0 , class _Arg1 , class _Arg2
	, class _Farg0 , class _Farg1 , class _Farg2>
	struct _Result_of3<_Rx (__thiscall _Arg0::*)(_Arg1 , _Arg2),
		_Farg0& , _Farg1 , _Farg2>
	{	
	typedef _Rx _Type;
	};

 































 










	
template<class _Rx,
	class _Arg0 , class _Arg1 , class _Arg2
	, class _Farg0 , class _Farg1 , class _Farg2>
	struct _Result_of3<_Rx (__thiscall _Arg0::*)(_Arg1 , _Arg2) const,
		_Farg0& , _Farg1 , _Farg2>
	{	
	typedef _Rx _Type;
	};

 































 










	
template<class _Rx,
	class _Arg0 , class _Arg1 , class _Arg2
	, class _Farg0 , class _Farg1 , class _Farg2>
	struct _Result_of3<_Rx (__thiscall _Arg0::*)(_Arg1 , _Arg2) volatile,
		_Farg0& , _Farg1 , _Farg2>
	{	
	typedef _Rx _Type;
	};

 































 










	
template<class _Rx,
	class _Arg0 , class _Arg1 , class _Arg2
	, class _Farg0 , class _Farg1 , class _Farg2>
	struct _Result_of3<_Rx (__thiscall _Arg0::*)(_Arg1 , _Arg2) const volatile,
		_Farg0& , _Farg1 , _Farg2>
	{	
	typedef _Rx _Type;
	};

 































 










	
template<class _Rx,
	class _Arg0 , class _Arg1 , class _Arg2
	, class _Farg0 , class _Farg1 , class _Farg2>
	struct _Result_of3<_Rx (__thiscall _Arg0::*const)(_Arg1 , _Arg2),
		_Farg0& , _Farg1 , _Farg2>
	{	
	typedef _Rx _Type;
	};

 































 










	
template<class _Rx,
	class _Arg0 , class _Arg1 , class _Arg2
	, class _Farg0 , class _Farg1 , class _Farg2>
	struct _Result_of3<_Rx (__thiscall _Arg0::*const)(_Arg1 , _Arg2) const,
		_Farg0& , _Farg1 , _Farg2>
	{	
	typedef _Rx _Type;
	};

 































 










	
template<class _Rx,
	class _Arg0 , class _Arg1 , class _Arg2
	, class _Farg0 , class _Farg1 , class _Farg2>
	struct _Result_of3<_Rx (__thiscall _Arg0::*const)(_Arg1 , _Arg2) volatile,
		_Farg0& , _Farg1 , _Farg2>
	{	
	typedef _Rx _Type;
	};

 































 










	
template<class _Rx,
	class _Arg0 , class _Arg1 , class _Arg2
	, class _Farg0 , class _Farg1 , class _Farg2>
	struct _Result_of3<_Rx (__thiscall _Arg0::*const)(_Arg1 , _Arg2) const volatile,
		_Farg0& , _Farg1 , _Farg2>
	{	
	typedef _Rx _Type;
	};

 































 










 #line 591 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

	
template<class _Fty
	, class _Arg0 , class _Arg1 , class _Arg2>
	struct _Result_of<_Fty __cdecl (_Arg0 , _Arg1 , _Arg2)>
	{	
	typedef typename _Result_of3<_Fty , typename _Remove_reference<_Arg0 >::_Type& , typename _Remove_reference<_Arg1 >::_Type& , typename _Remove_reference<_Arg2 >::_Type&>::_Type _Type;
	};

 

















 















#line 270 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"








#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 29 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

















































#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 265 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 267 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 269 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"







template<bool,
	class _Fty
	, class _Arg0 , class _Arg1, class _Arg2 , class _Arg3>
	struct _Result_type4;

template<class _Fty
	, class _Arg0 , class _Arg1, class _Arg2 , class _Arg3>
	struct _Result_type4<true, _Fty , _Arg0 , _Arg1, _Arg2 , _Arg3>
	{	
	typedef typename _Fty::result_type _Type;
	};

template<class _Fty
	, class _Arg0 , class _Arg1, class _Arg2 , class _Arg3>
	struct _Result_type4<false, _Fty , _Arg0 , _Arg1, _Arg2 , _Arg3>
	{	
 


#line 28 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"
	typedef typename _Fty::template result<_Fty(_Arg0 , _Arg1, _Arg2 , _Arg3)>::type _Type;
 #line 30 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"
	};

	
template<class _Fty
	, class _Farg0 , class _Farg1, class _Farg2 , class _Farg3>
	struct _Result_of4
	{	
	static const bool _Value = (sizeof (::std:: tr1::_Has_result_type((_Fty *)0)) == sizeof (::std:: tr1::_Yes));
	typedef typename _Result_type4<
		_Result_of4<_Fty , _Farg0 , _Farg1, _Farg2 , _Farg3>::_Value,
		_Fty , _Farg0 , _Farg1, _Farg2 , _Farg3>::_Type _Type;
	};


template<class _Ret
	, class _Arg0 , class _Arg1, class _Arg2 , class _Arg3
	, class _Farg0 , class _Farg1, class _Farg2 , class _Farg3>
	struct _Result_of4<_Ret(__cdecl &)(_Arg0 , _Arg1, _Arg2 , _Arg3) , _Farg0 , _Farg1, _Farg2 , _Farg3>
	{	
	typedef _Ret _Type;
	};

template<class _Ret
	, class _Arg0 , class _Arg1, class _Arg2 , class _Arg3
	, class _Farg0 , class _Farg1, class _Farg2 , class _Farg3>
	struct _Result_of4<_Ret(__cdecl *)(_Arg0 , _Arg1, _Arg2 , _Arg3) , _Farg0 , _Farg1, _Farg2 , _Farg3>
	{	
	typedef _Ret _Type;
	};

template<class _Ret
	, class _Arg0 , class _Arg1, class _Arg2 , class _Arg3
	, class _Farg0 , class _Farg1, class _Farg2 , class _Farg3>
	struct _Result_of4<_Ret(__cdecl * const)(_Arg0 , _Arg1, _Arg2 , _Arg3) , _Farg0 , _Farg1, _Farg2 , _Farg3>
	{	
	typedef _Ret _Type;
	};

 



















































 


























 















#line 164 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 
	
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2 , class _Arg3
	, class _Farg0 , class _Farg1, class _Farg2 , class _Farg3>
	struct _Result_of4<_Rx (__thiscall _Arg0::*)(_Arg1, _Arg2 , _Arg3),
		_Farg0& , _Farg1, _Farg2 , _Farg3>
	{	
	typedef _Rx _Type;
	};

 































 










	
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2 , class _Arg3
	, class _Farg0 , class _Farg1, class _Farg2 , class _Farg3>
	struct _Result_of4<_Rx (__thiscall _Arg0::*)(_Arg1, _Arg2 , _Arg3) const,
		_Farg0& , _Farg1, _Farg2 , _Farg3>
	{	
	typedef _Rx _Type;
	};

 































 










	
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2 , class _Arg3
	, class _Farg0 , class _Farg1, class _Farg2 , class _Farg3>
	struct _Result_of4<_Rx (__thiscall _Arg0::*)(_Arg1, _Arg2 , _Arg3) volatile,
		_Farg0& , _Farg1, _Farg2 , _Farg3>
	{	
	typedef _Rx _Type;
	};

 































 










	
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2 , class _Arg3
	, class _Farg0 , class _Farg1, class _Farg2 , class _Farg3>
	struct _Result_of4<_Rx (__thiscall _Arg0::*)(_Arg1, _Arg2 , _Arg3) const volatile,
		_Farg0& , _Farg1, _Farg2 , _Farg3>
	{	
	typedef _Rx _Type;
	};

 































 










	
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2 , class _Arg3
	, class _Farg0 , class _Farg1, class _Farg2 , class _Farg3>
	struct _Result_of4<_Rx (__thiscall _Arg0::*const)(_Arg1, _Arg2 , _Arg3),
		_Farg0& , _Farg1, _Farg2 , _Farg3>
	{	
	typedef _Rx _Type;
	};

 































 










	
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2 , class _Arg3
	, class _Farg0 , class _Farg1, class _Farg2 , class _Farg3>
	struct _Result_of4<_Rx (__thiscall _Arg0::*const)(_Arg1, _Arg2 , _Arg3) const,
		_Farg0& , _Farg1, _Farg2 , _Farg3>
	{	
	typedef _Rx _Type;
	};

 































 










	
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2 , class _Arg3
	, class _Farg0 , class _Farg1, class _Farg2 , class _Farg3>
	struct _Result_of4<_Rx (__thiscall _Arg0::*const)(_Arg1, _Arg2 , _Arg3) volatile,
		_Farg0& , _Farg1, _Farg2 , _Farg3>
	{	
	typedef _Rx _Type;
	};

 































 










	
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2 , class _Arg3
	, class _Farg0 , class _Farg1, class _Farg2 , class _Farg3>
	struct _Result_of4<_Rx (__thiscall _Arg0::*const)(_Arg1, _Arg2 , _Arg3) const volatile,
		_Farg0& , _Farg1, _Farg2 , _Farg3>
	{	
	typedef _Rx _Type;
	};

 































 










 #line 591 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

	
template<class _Fty
	, class _Arg0 , class _Arg1, class _Arg2 , class _Arg3>
	struct _Result_of<_Fty __cdecl (_Arg0 , _Arg1, _Arg2 , _Arg3)>
	{	
	typedef typename _Result_of4<_Fty , typename _Remove_reference<_Arg0 >::_Type& , typename _Remove_reference<_Arg1 >::_Type&, typename _Remove_reference<_Arg2 >::_Type& , typename _Remove_reference<_Arg3 >::_Type&>::_Type _Type;
	};

 

















 















#line 270 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"








#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 33 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 47 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 









































#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 265 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 267 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 269 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"







template<bool,
	class _Fty
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4>
	struct _Result_type5;

template<class _Fty
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4>
	struct _Result_type5<true, _Fty , _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4>
	{	
	typedef typename _Fty::result_type _Type;
	};

template<class _Fty
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4>
	struct _Result_type5<false, _Fty , _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4>
	{	
 


#line 28 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"
	typedef typename _Fty::template result<_Fty(_Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4)>::type _Type;
 #line 30 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"
	};

	
template<class _Fty
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4>
	struct _Result_of5
	{	
	static const bool _Value = (sizeof (::std:: tr1::_Has_result_type((_Fty *)0)) == sizeof (::std:: tr1::_Yes));
	typedef typename _Result_type5<
		_Result_of5<_Fty , _Farg0 , _Farg1, _Farg2, _Farg3 , _Farg4>::_Value,
		_Fty , _Farg0 , _Farg1, _Farg2, _Farg3 , _Farg4>::_Type _Type;
	};


template<class _Ret
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4>
	struct _Result_of5<_Ret(__cdecl &)(_Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4) , _Farg0 , _Farg1, _Farg2, _Farg3 , _Farg4>
	{	
	typedef _Ret _Type;
	};

template<class _Ret
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4>
	struct _Result_of5<_Ret(__cdecl *)(_Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4) , _Farg0 , _Farg1, _Farg2, _Farg3 , _Farg4>
	{	
	typedef _Ret _Type;
	};

template<class _Ret
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4>
	struct _Result_of5<_Ret(__cdecl * const)(_Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4) , _Farg0 , _Farg1, _Farg2, _Farg3 , _Farg4>
	{	
	typedef _Ret _Type;
	};

 



















































 


























 















#line 164 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 
	
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4>
	struct _Result_of5<_Rx (__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3 , _Arg4),
		_Farg0& , _Farg1, _Farg2, _Farg3 , _Farg4>
	{	
	typedef _Rx _Type;
	};

 































 










	
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4>
	struct _Result_of5<_Rx (__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3 , _Arg4) const,
		_Farg0& , _Farg1, _Farg2, _Farg3 , _Farg4>
	{	
	typedef _Rx _Type;
	};

 































 










	
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4>
	struct _Result_of5<_Rx (__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3 , _Arg4) volatile,
		_Farg0& , _Farg1, _Farg2, _Farg3 , _Farg4>
	{	
	typedef _Rx _Type;
	};

 































 










	
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4>
	struct _Result_of5<_Rx (__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3 , _Arg4) const volatile,
		_Farg0& , _Farg1, _Farg2, _Farg3 , _Farg4>
	{	
	typedef _Rx _Type;
	};

 































 










	
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4>
	struct _Result_of5<_Rx (__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3 , _Arg4),
		_Farg0& , _Farg1, _Farg2, _Farg3 , _Farg4>
	{	
	typedef _Rx _Type;
	};

 































 










	
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4>
	struct _Result_of5<_Rx (__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3 , _Arg4) const,
		_Farg0& , _Farg1, _Farg2, _Farg3 , _Farg4>
	{	
	typedef _Rx _Type;
	};

 































 










	
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4>
	struct _Result_of5<_Rx (__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3 , _Arg4) volatile,
		_Farg0& , _Farg1, _Farg2, _Farg3 , _Farg4>
	{	
	typedef _Rx _Type;
	};

 































 










	
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4>
	struct _Result_of5<_Rx (__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3 , _Arg4) const volatile,
		_Farg0& , _Farg1, _Farg2, _Farg3 , _Farg4>
	{	
	typedef _Rx _Type;
	};

 































 










 #line 591 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

	
template<class _Fty
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4>
	struct _Result_of<_Fty __cdecl (_Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4)>
	{	
	typedef typename _Result_of5<_Fty , typename _Remove_reference<_Arg0 >::_Type& , typename _Remove_reference<_Arg1 >::_Type&, typename _Remove_reference<_Arg2 >::_Type&, typename _Remove_reference<_Arg3 >::_Type& , typename _Remove_reference<_Arg4 >::_Type&>::_Type _Type;
	};

 

















 















#line 270 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"








#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 37 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 47 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 55 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

































#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 265 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 267 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 269 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"







template<bool,
	class _Fty
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5>
	struct _Result_type6;

template<class _Fty
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5>
	struct _Result_type6<true, _Fty , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5>
	{	
	typedef typename _Fty::result_type _Type;
	};

template<class _Fty
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5>
	struct _Result_type6<false, _Fty , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5>
	{	
 


#line 28 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"
	typedef typename _Fty::template result<_Fty(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5)>::type _Type;
 #line 30 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"
	};

	
template<class _Fty
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5>
	struct _Result_of6
	{	
	static const bool _Value = (sizeof (::std:: tr1::_Has_result_type((_Fty *)0)) == sizeof (::std:: tr1::_Yes));
	typedef typename _Result_type6<
		_Result_of6<_Fty , _Farg0 , _Farg1, _Farg2, _Farg3, _Farg4 , _Farg5>::_Value,
		_Fty , _Farg0 , _Farg1, _Farg2, _Farg3, _Farg4 , _Farg5>::_Type _Type;
	};


template<class _Ret
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5>
	struct _Result_of6<_Ret(__cdecl &)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) , _Farg0 , _Farg1, _Farg2, _Farg3, _Farg4 , _Farg5>
	{	
	typedef _Ret _Type;
	};

template<class _Ret
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5>
	struct _Result_of6<_Ret(__cdecl *)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) , _Farg0 , _Farg1, _Farg2, _Farg3, _Farg4 , _Farg5>
	{	
	typedef _Ret _Type;
	};

template<class _Ret
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5>
	struct _Result_of6<_Ret(__cdecl * const)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) , _Farg0 , _Farg1, _Farg2, _Farg3, _Farg4 , _Farg5>
	{	
	typedef _Ret _Type;
	};

 



















































 


























 















#line 164 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 
	
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5>
	struct _Result_of6<_Rx (__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5),
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4 , _Farg5>
	{	
	typedef _Rx _Type;
	};

 































 










	
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5>
	struct _Result_of6<_Rx (__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) const,
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4 , _Farg5>
	{	
	typedef _Rx _Type;
	};

 































 










	
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5>
	struct _Result_of6<_Rx (__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) volatile,
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4 , _Farg5>
	{	
	typedef _Rx _Type;
	};

 































 










	
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5>
	struct _Result_of6<_Rx (__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) const volatile,
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4 , _Farg5>
	{	
	typedef _Rx _Type;
	};

 































 










	
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5>
	struct _Result_of6<_Rx (__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5),
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4 , _Farg5>
	{	
	typedef _Rx _Type;
	};

 































 










	
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5>
	struct _Result_of6<_Rx (__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) const,
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4 , _Farg5>
	{	
	typedef _Rx _Type;
	};

 































 










	
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5>
	struct _Result_of6<_Rx (__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) volatile,
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4 , _Farg5>
	{	
	typedef _Rx _Type;
	};

 































 










	
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5>
	struct _Result_of6<_Rx (__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) const volatile,
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4 , _Farg5>
	{	
	typedef _Rx _Type;
	};

 































 










 #line 591 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

	
template<class _Fty
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5>
	struct _Result_of<_Fty __cdecl (_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5)>
	{	
	typedef typename _Result_of6<_Fty , typename _Remove_reference<_Arg0 >::_Type& , typename _Remove_reference<_Arg1 >::_Type&, typename _Remove_reference<_Arg2 >::_Type&, typename _Remove_reference<_Arg3 >::_Type&, typename _Remove_reference<_Arg4 >::_Type& , typename _Remove_reference<_Arg5 >::_Type&>::_Type _Type;
	};

 

















 















#line 270 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"








#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 41 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 47 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 55 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 63 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

























#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 265 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 267 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 269 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"







template<bool,
	class _Fty
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6>
	struct _Result_type7;

template<class _Fty
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6>
	struct _Result_type7<true, _Fty , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6>
	{	
	typedef typename _Fty::result_type _Type;
	};

template<class _Fty
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6>
	struct _Result_type7<false, _Fty , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6>
	{	
 


#line 28 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"
	typedef typename _Fty::template result<_Fty(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6)>::type _Type;
 #line 30 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"
	};

	
template<class _Fty
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6>
	struct _Result_of7
	{	
	static const bool _Value = (sizeof (::std:: tr1::_Has_result_type((_Fty *)0)) == sizeof (::std:: tr1::_Yes));
	typedef typename _Result_type7<
		_Result_of7<_Fty , _Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6>::_Value,
		_Fty , _Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6>::_Type _Type;
	};


template<class _Ret
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6>
	struct _Result_of7<_Ret(__cdecl &)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) , _Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6>
	{	
	typedef _Ret _Type;
	};

template<class _Ret
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6>
	struct _Result_of7<_Ret(__cdecl *)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) , _Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6>
	{	
	typedef _Ret _Type;
	};

template<class _Ret
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6>
	struct _Result_of7<_Ret(__cdecl * const)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) , _Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6>
	{	
	typedef _Ret _Type;
	};

 



















































 


























 















#line 164 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 
	
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6>
	struct _Result_of7<_Rx (__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6),
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6>
	{	
	typedef _Rx _Type;
	};

 































 










	
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6>
	struct _Result_of7<_Rx (__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) const,
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6>
	{	
	typedef _Rx _Type;
	};

 































 










	
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6>
	struct _Result_of7<_Rx (__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) volatile,
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6>
	{	
	typedef _Rx _Type;
	};

 































 










	
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6>
	struct _Result_of7<_Rx (__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) const volatile,
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6>
	{	
	typedef _Rx _Type;
	};

 































 










	
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6>
	struct _Result_of7<_Rx (__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6),
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6>
	{	
	typedef _Rx _Type;
	};

 































 










	
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6>
	struct _Result_of7<_Rx (__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) const,
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6>
	{	
	typedef _Rx _Type;
	};

 































 










	
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6>
	struct _Result_of7<_Rx (__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) volatile,
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6>
	{	
	typedef _Rx _Type;
	};

 































 










	
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6>
	struct _Result_of7<_Rx (__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) const volatile,
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6>
	{	
	typedef _Rx _Type;
	};

 































 










 #line 591 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

	
template<class _Fty
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6>
	struct _Result_of<_Fty __cdecl (_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6)>
	{	
	typedef typename _Result_of7<_Fty , typename _Remove_reference<_Arg0 >::_Type& , typename _Remove_reference<_Arg1 >::_Type&, typename _Remove_reference<_Arg2 >::_Type&, typename _Remove_reference<_Arg3 >::_Type&, typename _Remove_reference<_Arg4 >::_Type&, typename _Remove_reference<_Arg5 >::_Type& , typename _Remove_reference<_Arg6 >::_Type&>::_Type _Type;
	};

 

















 















#line 270 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"








#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 45 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 47 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 55 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 63 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 71 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

















#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 265 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 267 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 269 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"







template<bool,
	class _Fty
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7>
	struct _Result_type8;

template<class _Fty
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7>
	struct _Result_type8<true, _Fty , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7>
	{	
	typedef typename _Fty::result_type _Type;
	};

template<class _Fty
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7>
	struct _Result_type8<false, _Fty , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7>
	{	
 


#line 28 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"
	typedef typename _Fty::template result<_Fty(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7)>::type _Type;
 #line 30 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"
	};

	
template<class _Fty
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7>
	struct _Result_of8
	{	
	static const bool _Value = (sizeof (::std:: tr1::_Has_result_type((_Fty *)0)) == sizeof (::std:: tr1::_Yes));
	typedef typename _Result_type8<
		_Result_of8<_Fty , _Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7>::_Value,
		_Fty , _Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7>::_Type _Type;
	};


template<class _Ret
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7>
	struct _Result_of8<_Ret(__cdecl &)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) , _Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7>
	{	
	typedef _Ret _Type;
	};

template<class _Ret
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7>
	struct _Result_of8<_Ret(__cdecl *)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) , _Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7>
	{	
	typedef _Ret _Type;
	};

template<class _Ret
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7>
	struct _Result_of8<_Ret(__cdecl * const)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) , _Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7>
	{	
	typedef _Ret _Type;
	};

 



















































 


























 















#line 164 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 
	
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7>
	struct _Result_of8<_Rx (__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7),
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7>
	{	
	typedef _Rx _Type;
	};

 































 










	
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7>
	struct _Result_of8<_Rx (__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) const,
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7>
	{	
	typedef _Rx _Type;
	};

 































 










	
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7>
	struct _Result_of8<_Rx (__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) volatile,
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7>
	{	
	typedef _Rx _Type;
	};

 































 










	
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7>
	struct _Result_of8<_Rx (__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) const volatile,
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7>
	{	
	typedef _Rx _Type;
	};

 































 










	
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7>
	struct _Result_of8<_Rx (__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7),
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7>
	{	
	typedef _Rx _Type;
	};

 































 










	
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7>
	struct _Result_of8<_Rx (__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) const,
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7>
	{	
	typedef _Rx _Type;
	};

 































 










	
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7>
	struct _Result_of8<_Rx (__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) volatile,
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7>
	{	
	typedef _Rx _Type;
	};

 































 










	
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7>
	struct _Result_of8<_Rx (__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) const volatile,
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7>
	{	
	typedef _Rx _Type;
	};

 































 










 #line 591 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

	
template<class _Fty
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7>
	struct _Result_of<_Fty __cdecl (_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7)>
	{	
	typedef typename _Result_of8<_Fty , typename _Remove_reference<_Arg0 >::_Type& , typename _Remove_reference<_Arg1 >::_Type&, typename _Remove_reference<_Arg2 >::_Type&, typename _Remove_reference<_Arg3 >::_Type&, typename _Remove_reference<_Arg4 >::_Type&, typename _Remove_reference<_Arg5 >::_Type&, typename _Remove_reference<_Arg6 >::_Type& , typename _Remove_reference<_Arg7 >::_Type&>::_Type _Type;
	};

 

















 















#line 270 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"








#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 49 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 47 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 55 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 63 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 71 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 79 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 









#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 265 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 267 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 269 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"







template<bool,
	class _Fty
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8>
	struct _Result_type9;

template<class _Fty
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8>
	struct _Result_type9<true, _Fty , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8>
	{	
	typedef typename _Fty::result_type _Type;
	};

template<class _Fty
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8>
	struct _Result_type9<false, _Fty , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8>
	{	
 


#line 28 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"
	typedef typename _Fty::template result<_Fty(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8)>::type _Type;
 #line 30 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"
	};

	
template<class _Fty
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8>
	struct _Result_of9
	{	
	static const bool _Value = (sizeof (::std:: tr1::_Has_result_type((_Fty *)0)) == sizeof (::std:: tr1::_Yes));
	typedef typename _Result_type9<
		_Result_of9<_Fty , _Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8>::_Value,
		_Fty , _Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8>::_Type _Type;
	};


template<class _Ret
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8>
	struct _Result_of9<_Ret(__cdecl &)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) , _Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8>
	{	
	typedef _Ret _Type;
	};

template<class _Ret
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8>
	struct _Result_of9<_Ret(__cdecl *)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) , _Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8>
	{	
	typedef _Ret _Type;
	};

template<class _Ret
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8>
	struct _Result_of9<_Ret(__cdecl * const)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) , _Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8>
	{	
	typedef _Ret _Type;
	};

 



















































 


























 















#line 164 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 
	
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8>
	struct _Result_of9<_Rx (__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8),
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8>
	{	
	typedef _Rx _Type;
	};

 































 










	
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8>
	struct _Result_of9<_Rx (__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) const,
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8>
	{	
	typedef _Rx _Type;
	};

 































 










	
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8>
	struct _Result_of9<_Rx (__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) volatile,
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8>
	{	
	typedef _Rx _Type;
	};

 































 










	
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8>
	struct _Result_of9<_Rx (__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) const volatile,
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8>
	{	
	typedef _Rx _Type;
	};

 































 










	
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8>
	struct _Result_of9<_Rx (__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8),
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8>
	{	
	typedef _Rx _Type;
	};

 































 










	
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8>
	struct _Result_of9<_Rx (__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) const,
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8>
	{	
	typedef _Rx _Type;
	};

 































 










	
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8>
	struct _Result_of9<_Rx (__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) volatile,
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8>
	{	
	typedef _Rx _Type;
	};

 































 










	
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8>
	struct _Result_of9<_Rx (__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) const volatile,
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8>
	{	
	typedef _Rx _Type;
	};

 































 










 #line 591 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

	
template<class _Fty
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8>
	struct _Result_of<_Fty __cdecl (_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8)>
	{	
	typedef typename _Result_of9<_Fty , typename _Remove_reference<_Arg0 >::_Type& , typename _Remove_reference<_Arg1 >::_Type&, typename _Remove_reference<_Arg2 >::_Type&, typename _Remove_reference<_Arg3 >::_Type&, typename _Remove_reference<_Arg4 >::_Type&, typename _Remove_reference<_Arg5 >::_Type&, typename _Remove_reference<_Arg6 >::_Type&, typename _Remove_reference<_Arg7 >::_Type& , typename _Remove_reference<_Arg8 >::_Type&>::_Type _Type;
	};

 

















 















#line 270 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"








#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 53 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 47 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 55 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 63 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 71 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 79 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 87 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  

 

#line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 265 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 267 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 269 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"







template<bool,
	class _Fty
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9>
	struct _Result_type10;

template<class _Fty
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9>
	struct _Result_type10<true, _Fty , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9>
	{	
	typedef typename _Fty::result_type _Type;
	};

template<class _Fty
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9>
	struct _Result_type10<false, _Fty , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9>
	{	
 


#line 28 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"
	typedef typename _Fty::template result<_Fty(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9)>::type _Type;
 #line 30 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"
	};

	
template<class _Fty
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9>
	struct _Result_of10
	{	
	static const bool _Value = (sizeof (::std:: tr1::_Has_result_type((_Fty *)0)) == sizeof (::std:: tr1::_Yes));
	typedef typename _Result_type10<
		_Result_of10<_Fty , _Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9>::_Value,
		_Fty , _Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9>::_Type _Type;
	};


template<class _Ret
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9>
	struct _Result_of10<_Ret(__cdecl &)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) , _Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9>
	{	
	typedef _Ret _Type;
	};

template<class _Ret
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9>
	struct _Result_of10<_Ret(__cdecl *)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) , _Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9>
	{	
	typedef _Ret _Type;
	};

template<class _Ret
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9>
	struct _Result_of10<_Ret(__cdecl * const)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) , _Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9>
	{	
	typedef _Ret _Type;
	};

 



















































 


























 















#line 164 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

 
	
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9>
	struct _Result_of10<_Rx (__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9),
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9>
	{	
	typedef _Rx _Type;
	};

 































 










	
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9>
	struct _Result_of10<_Rx (__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) const,
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9>
	{	
	typedef _Rx _Type;
	};

 































 










	
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9>
	struct _Result_of10<_Rx (__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) volatile,
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9>
	{	
	typedef _Rx _Type;
	};

 































 










	
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9>
	struct _Result_of10<_Rx (__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) const volatile,
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9>
	{	
	typedef _Rx _Type;
	};

 































 










	
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9>
	struct _Result_of10<_Rx (__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9),
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9>
	{	
	typedef _Rx _Type;
	};

 































 










	
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9>
	struct _Result_of10<_Rx (__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) const,
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9>
	{	
	typedef _Rx _Type;
	};

 































 










	
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9>
	struct _Result_of10<_Rx (__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) volatile,
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9>
	{	
	typedef _Rx _Type;
	};

 































 










	
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9>
	struct _Result_of10<_Rx (__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) const volatile,
		_Farg0& , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9>
	{	
	typedef _Rx _Type;
	};

 































 










 #line 591 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxresult"

	
template<class _Fty
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9>
	struct _Result_of<_Fty __cdecl (_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9)>
	{	
	typedef typename _Result_of10<_Fty , typename _Remove_reference<_Arg0 >::_Type& , typename _Remove_reference<_Arg1 >::_Type&, typename _Remove_reference<_Arg2 >::_Type&, typename _Remove_reference<_Arg3 >::_Type&, typename _Remove_reference<_Arg4 >::_Type&, typename _Remove_reference<_Arg5 >::_Type&, typename _Remove_reference<_Arg6 >::_Type&, typename _Remove_reference<_Arg7 >::_Type&, typename _Remove_reference<_Arg8 >::_Type& , typename _Remove_reference<_Arg9 >::_Type&>::_Type _Type;
	};

 

















 















#line 270 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"








#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 57 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"




















#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xrefwrap"

	
template<class _Fty>
	struct result_of
	{	
	typedef typename _Result_of<_Fty>::_Type type;
	};



	
template<class _Ret,
	class _Arg0>
	struct _Pmd_caller
	{	
	template<class _Pmd,
		class _Farg0>
		static _Ret _Call_pmd(const volatile _Arg0*, _Pmd _Pm, _Farg0 _F0)
		{	
		return ((_Ret)(_F0.*_Pm));
		}

	template<class _Pmd,
		class _Farg0>
		static _Ret _Call_pmd(const volatile void *, _Pmd _Pm, _Farg0 _F0)
		{	
		return ((*_F0).*_Pm);
		}

	template<class _Pmd,
		class _Farg0>
		static _Ret _Apply_pmd(_Pmd _Pm, _Farg0& _F0)
		{	
		return (_Call_pmd<_Pmd, _Farg0&>(&_F0, _Pm, _F0));
		}
	};

	
template<class _Ty,
	bool _Indirect>
	struct _Callable_base;

template<class _Ty>
	struct _Callable_base<_Ty, false>
	{	
	enum {_EEN_INDIRECT = 0};	
	typedef _Ty _MyTy;
	typedef const _Ty& _MyCnstTy;

	_Callable_base(_Ty& _Val)
		: _Object(_Val)
		{	
		}

	const _Ty& _Get() const
		{	
		return (_Object);
		}

	_Ty& _Get()
		{	
		return (_Object);
		}

private:
	_Callable_base& operator=(const _Callable_base&);

	_Ty _Object;
};

template<class _Ty>
	struct _Callable_base<_Ty, true>
	{	
		
	enum {_EEN_INDIRECT = 1};	
	typedef _Ty _MyTy;
	typedef _Ty& _MyCnstTy;

	_Callable_base(_Ty& _Val)
		: _Ptr(&_Val)
		{	
		}

	_MyCnstTy _Get() const
		{	
		return (*_Ptr);
		}

	_Ty& _Get()
		{	
		return (*_Ptr);
		}

	void _Reset(_Ty& _Val)
		{	
		_Ptr = &_Val;
		}

private:
	_Ty *_Ptr;
};

	
template<class _Ty,
	class _Memty,
	bool _Indirect = false>
	struct _Callable_pmd
		: _Callable_base<_Ty, _Indirect>
	{	
	_Callable_pmd(_Ty& _Val)
		: _Callable_base<_Ty, _Indirect>(_Val)
		{	
		}

	template<class _Ret,
		class _Arg0>
		_Ret _ApplyX(_Arg0& _A0) const
		{	
		return (_Pmd_caller<_Ret, _Memty>::_Apply_pmd(this->_Get(), _A0));
		}
	};

	
template<class _Ty,
	bool _Indirect = false>
	struct _Callable_obj
		: _Callable_base<_Ty, _Indirect>
	{	
	_Callable_obj(_Ty& _Val)
		: _Callable_base<_Ty, _Indirect>(_Val)
		{	
		}

 
 #line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"





 

#line 9 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"





 
 #line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 
  
  
  
  
  
  

 

















































































#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  

 




#line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  
  
  
  
  
  
  
  
  
  
  
  
  

 




























#line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  

 

#line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  

 

#line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxcallobj"



template<class _Ret      >
	_Ret _ApplyX(    ) const
	{ 
	return (this->_Get()(    ));
	}

template<class _Ret      >
	_Ret _ApplyX(    )
	{ 
	return (this->_Get()(    ));
	}





#line 258 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"




















#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 16 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"
 
#line 18 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"


#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 









































































#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  

 













#line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  

 

#line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  

 

#line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxcallobj"



template<class _Ret , class _Arg0    >
	_Ret _ApplyX(_Arg0 && _Ax0    ) const
	{ 
	return (this->_Get()(::std:: forward<_Arg0>(_Ax0)    ));
	}

template<class _Ret , class _Arg0    >
	_Ret _ApplyX(_Arg0 && _Ax0    )
	{ 
	return (this->_Get()(::std:: forward<_Arg0>(_Ax0)    ));
	}





#line 258 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"




















#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 21 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

































































#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  

 

#line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxcallobj"



template<class _Ret , class _Arg0 ,   class _Arg1>
	_Ret _ApplyX(_Arg0 && _Ax0 ,   _Arg1 && _Ax1) const
	{ 
	return (this->_Get()(::std:: forward<_Arg0>(_Ax0) ,   ::std:: forward<_Arg1>(_Ax1)));
	}

template<class _Ret , class _Arg0 ,   class _Arg1>
	_Ret _ApplyX(_Arg0 && _Ax0 ,   _Arg1 && _Ax1)
	{ 
	return (this->_Get()(::std:: forward<_Arg0>(_Ax0) ,   ::std:: forward<_Arg1>(_Ax1)));
	}





#line 258 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"




















#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 25 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

























































#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxcallobj"



template<class _Ret , class _Arg0 , class _Arg1 , class _Arg2>
	_Ret _ApplyX(_Arg0 && _Ax0 , _Arg1 && _Ax1 , _Arg2 && _Ax2) const
	{ 
	return (this->_Get()(::std:: forward<_Arg0>(_Ax0) , ::std:: forward<_Arg1>(_Ax1) , ::std:: forward<_Arg2>(_Ax2)));
	}

template<class _Ret , class _Arg0 , class _Arg1 , class _Arg2>
	_Ret _ApplyX(_Arg0 && _Ax0 , _Arg1 && _Ax1 , _Arg2 && _Ax2)
	{ 
	return (this->_Get()(::std:: forward<_Arg0>(_Ax0) , ::std:: forward<_Arg1>(_Ax1) , ::std:: forward<_Arg2>(_Ax2)));
	}





#line 258 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"




















#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 29 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

















































#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxcallobj"



template<class _Ret , class _Arg0 , class _Arg1, class _Arg2 , class _Arg3>
	_Ret _ApplyX(_Arg0 && _Ax0 , _Arg1 && _Ax1, _Arg2 && _Ax2 , _Arg3 && _Ax3) const
	{ 
	return (this->_Get()(::std:: forward<_Arg0>(_Ax0) , ::std:: forward<_Arg1>(_Ax1), ::std:: forward<_Arg2>(_Ax2) , ::std:: forward<_Arg3>(_Ax3)));
	}

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2 , class _Arg3>
	_Ret _ApplyX(_Arg0 && _Ax0 , _Arg1 && _Ax1, _Arg2 && _Ax2 , _Arg3 && _Ax3)
	{ 
	return (this->_Get()(::std:: forward<_Arg0>(_Ax0) , ::std:: forward<_Arg1>(_Ax1), ::std:: forward<_Arg2>(_Ax2) , ::std:: forward<_Arg3>(_Ax3)));
	}





#line 258 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"




















#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 33 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 47 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 









































#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxcallobj"



template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4>
	_Ret _ApplyX(_Arg0 && _Ax0 , _Arg1 && _Ax1, _Arg2 && _Ax2, _Arg3 && _Ax3 , _Arg4 && _Ax4) const
	{ 
	return (this->_Get()(::std:: forward<_Arg0>(_Ax0) , ::std:: forward<_Arg1>(_Ax1), ::std:: forward<_Arg2>(_Ax2), ::std:: forward<_Arg3>(_Ax3) , ::std:: forward<_Arg4>(_Ax4)));
	}

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4>
	_Ret _ApplyX(_Arg0 && _Ax0 , _Arg1 && _Ax1, _Arg2 && _Ax2, _Arg3 && _Ax3 , _Arg4 && _Ax4)
	{ 
	return (this->_Get()(::std:: forward<_Arg0>(_Ax0) , ::std:: forward<_Arg1>(_Ax1), ::std:: forward<_Arg2>(_Ax2), ::std:: forward<_Arg3>(_Ax3) , ::std:: forward<_Arg4>(_Ax4)));
	}





#line 258 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"




















#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 37 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 47 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 55 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

































#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxcallobj"



template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5>
	_Ret _ApplyX(_Arg0 && _Ax0 , _Arg1 && _Ax1, _Arg2 && _Ax2, _Arg3 && _Ax3, _Arg4 && _Ax4 , _Arg5 && _Ax5) const
	{ 
	return (this->_Get()(::std:: forward<_Arg0>(_Ax0) , ::std:: forward<_Arg1>(_Ax1), ::std:: forward<_Arg2>(_Ax2), ::std:: forward<_Arg3>(_Ax3), ::std:: forward<_Arg4>(_Ax4) , ::std:: forward<_Arg5>(_Ax5)));
	}

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5>
	_Ret _ApplyX(_Arg0 && _Ax0 , _Arg1 && _Ax1, _Arg2 && _Ax2, _Arg3 && _Ax3, _Arg4 && _Ax4 , _Arg5 && _Ax5)
	{ 
	return (this->_Get()(::std:: forward<_Arg0>(_Ax0) , ::std:: forward<_Arg1>(_Ax1), ::std:: forward<_Arg2>(_Ax2), ::std:: forward<_Arg3>(_Ax3), ::std:: forward<_Arg4>(_Ax4) , ::std:: forward<_Arg5>(_Ax5)));
	}





#line 258 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"




















#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 41 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 47 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 55 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 63 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

























#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxcallobj"



template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6>
	_Ret _ApplyX(_Arg0 && _Ax0 , _Arg1 && _Ax1, _Arg2 && _Ax2, _Arg3 && _Ax3, _Arg4 && _Ax4, _Arg5 && _Ax5 , _Arg6 && _Ax6) const
	{ 
	return (this->_Get()(::std:: forward<_Arg0>(_Ax0) , ::std:: forward<_Arg1>(_Ax1), ::std:: forward<_Arg2>(_Ax2), ::std:: forward<_Arg3>(_Ax3), ::std:: forward<_Arg4>(_Ax4), ::std:: forward<_Arg5>(_Ax5) , ::std:: forward<_Arg6>(_Ax6)));
	}

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6>
	_Ret _ApplyX(_Arg0 && _Ax0 , _Arg1 && _Ax1, _Arg2 && _Ax2, _Arg3 && _Ax3, _Arg4 && _Ax4, _Arg5 && _Ax5 , _Arg6 && _Ax6)
	{ 
	return (this->_Get()(::std:: forward<_Arg0>(_Ax0) , ::std:: forward<_Arg1>(_Ax1), ::std:: forward<_Arg2>(_Ax2), ::std:: forward<_Arg3>(_Ax3), ::std:: forward<_Arg4>(_Ax4), ::std:: forward<_Arg5>(_Ax5) , ::std:: forward<_Arg6>(_Ax6)));
	}





#line 258 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"




















#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 45 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 47 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 55 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 63 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 71 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

















#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxcallobj"



template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7>
	_Ret _ApplyX(_Arg0 && _Ax0 , _Arg1 && _Ax1, _Arg2 && _Ax2, _Arg3 && _Ax3, _Arg4 && _Ax4, _Arg5 && _Ax5, _Arg6 && _Ax6 , _Arg7 && _Ax7) const
	{ 
	return (this->_Get()(::std:: forward<_Arg0>(_Ax0) , ::std:: forward<_Arg1>(_Ax1), ::std:: forward<_Arg2>(_Ax2), ::std:: forward<_Arg3>(_Ax3), ::std:: forward<_Arg4>(_Ax4), ::std:: forward<_Arg5>(_Ax5), ::std:: forward<_Arg6>(_Ax6) , ::std:: forward<_Arg7>(_Ax7)));
	}

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7>
	_Ret _ApplyX(_Arg0 && _Ax0 , _Arg1 && _Ax1, _Arg2 && _Ax2, _Arg3 && _Ax3, _Arg4 && _Ax4, _Arg5 && _Ax5, _Arg6 && _Ax6 , _Arg7 && _Ax7)
	{ 
	return (this->_Get()(::std:: forward<_Arg0>(_Ax0) , ::std:: forward<_Arg1>(_Ax1), ::std:: forward<_Arg2>(_Ax2), ::std:: forward<_Arg3>(_Ax3), ::std:: forward<_Arg4>(_Ax4), ::std:: forward<_Arg5>(_Ax5), ::std:: forward<_Arg6>(_Ax6) , ::std:: forward<_Arg7>(_Ax7)));
	}





#line 258 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"




















#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 49 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 47 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 55 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 63 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 71 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 79 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 









#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxcallobj"



template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8>
	_Ret _ApplyX(_Arg0 && _Ax0 , _Arg1 && _Ax1, _Arg2 && _Ax2, _Arg3 && _Ax3, _Arg4 && _Ax4, _Arg5 && _Ax5, _Arg6 && _Ax6, _Arg7 && _Ax7 , _Arg8 && _Ax8) const
	{ 
	return (this->_Get()(::std:: forward<_Arg0>(_Ax0) , ::std:: forward<_Arg1>(_Ax1), ::std:: forward<_Arg2>(_Ax2), ::std:: forward<_Arg3>(_Ax3), ::std:: forward<_Arg4>(_Ax4), ::std:: forward<_Arg5>(_Ax5), ::std:: forward<_Arg6>(_Ax6), ::std:: forward<_Arg7>(_Ax7) , ::std:: forward<_Arg8>(_Ax8)));
	}

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8>
	_Ret _ApplyX(_Arg0 && _Ax0 , _Arg1 && _Ax1, _Arg2 && _Ax2, _Arg3 && _Ax3, _Arg4 && _Ax4, _Arg5 && _Ax5, _Arg6 && _Ax6, _Arg7 && _Ax7 , _Arg8 && _Ax8)
	{ 
	return (this->_Get()(::std:: forward<_Arg0>(_Ax0) , ::std:: forward<_Arg1>(_Ax1), ::std:: forward<_Arg2>(_Ax2), ::std:: forward<_Arg3>(_Ax3), ::std:: forward<_Arg4>(_Ax4), ::std:: forward<_Arg5>(_Ax5), ::std:: forward<_Arg6>(_Ax6), ::std:: forward<_Arg7>(_Ax7) , ::std:: forward<_Arg8>(_Ax8)));
	}





#line 258 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"




















#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 53 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 47 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 55 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 63 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 71 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 79 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 87 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  

 

#line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxcallobj"



template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9>
	_Ret _ApplyX(_Arg0 && _Ax0 , _Arg1 && _Ax1, _Arg2 && _Ax2, _Arg3 && _Ax3, _Arg4 && _Ax4, _Arg5 && _Ax5, _Arg6 && _Ax6, _Arg7 && _Ax7, _Arg8 && _Ax8 , _Arg9 && _Ax9) const
	{ 
	return (this->_Get()(::std:: forward<_Arg0>(_Ax0) , ::std:: forward<_Arg1>(_Ax1), ::std:: forward<_Arg2>(_Ax2), ::std:: forward<_Arg3>(_Ax3), ::std:: forward<_Arg4>(_Ax4), ::std:: forward<_Arg5>(_Ax5), ::std:: forward<_Arg6>(_Ax6), ::std:: forward<_Arg7>(_Ax7), ::std:: forward<_Arg8>(_Ax8) , ::std:: forward<_Arg9>(_Ax9)));
	}

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9>
	_Ret _ApplyX(_Arg0 && _Ax0 , _Arg1 && _Ax1, _Arg2 && _Ax2, _Arg3 && _Ax3, _Arg4 && _Ax4, _Arg5 && _Ax5, _Arg6 && _Ax6, _Arg7 && _Ax7, _Arg8 && _Ax8 , _Arg9 && _Ax9)
	{ 
	return (this->_Get()(::std:: forward<_Arg0>(_Ax0) , ::std:: forward<_Arg1>(_Ax1), ::std:: forward<_Arg2>(_Ax2), ::std:: forward<_Arg3>(_Ax3), ::std:: forward<_Arg4>(_Ax4), ::std:: forward<_Arg5>(_Ax5), ::std:: forward<_Arg6>(_Ax6), ::std:: forward<_Arg7>(_Ax7), ::std:: forward<_Arg8>(_Ax8) , ::std:: forward<_Arg9>(_Ax9)));
	}





#line 258 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"




















#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 57 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"




















#line 158 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xrefwrap"
	};

	

 
 #line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"





 

#line 9 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"





 
 #line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 
  
  
  
  
  
  

 

















































































#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  

 




#line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  
  
  
  
  
  
  
  
  
  
  
  
  

 




























#line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  

 

#line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  

 

#line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 265 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxpmfcaller"





 
















































#line 56 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxpmfcaller"







#line 266 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"












#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 16 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"
 
#line 18 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"


#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 









































































#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  

 













#line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  

 

#line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  

 

#line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 265 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxpmfcaller"





 
template<class _Ty>
	class reference_wrapper;

template<class _Ret,
	class _Arg0>
	struct _Pmf_caller1
	{	
	template<class _Ty>
		static _Ty& _Unwrap(_Ty& _Val)
		{	
		return (_Val);
		}

	template<class _Ty>
		static _Ty& _Unwrap(reference_wrapper<_Ty>& _Val)
		{	
		return (_Val.get());
		}

	
	template<class _Pmf,
		class _Farg0    >
		static _Ret _Call_pmf(
			const volatile typename _Remove_reference<_Arg0>::_Type *,
			_Pmf _Pm, _Farg0 &_Fx0    )
		{	
		return ((_Fx0.*_Pm)(  ));
		}

	template<class _Pmf,
		class _Farg0    >
		static _Ret _Call_pmf(
			const volatile void *,
			_Pmf _Pm, _Farg0 &_Fx0    )
		{	
		return (((*_Fx0).*_Pm)(  ));
		}

	
	
	template<class _Pmf,
		class _Farg0    >
		static _Ret _Apply_pmf(_Pmf _Pm, _Farg0 &_Fx0    )
		{	
		return (_Call_pmf<_Pmf>(
			&_Unwrap(_Fx0), _Pm, _Unwrap(_Fx0)    ));
		}
	};
 #line 56 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxpmfcaller"







#line 266 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"












#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 21 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

































































#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  

 

#line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 265 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxpmfcaller"





 
template<class _Ty>
	class reference_wrapper;

template<class _Ret,
	class _Arg0>
	struct _Pmf_caller2
	{	
	template<class _Ty>
		static _Ty& _Unwrap(_Ty& _Val)
		{	
		return (_Val);
		}

	template<class _Ty>
		static _Ty& _Unwrap(reference_wrapper<_Ty>& _Val)
		{	
		return (_Val.get());
		}

	
	template<class _Pmf,
		class _Farg0 ,   class _Farg1>
		static _Ret _Call_pmf(
			const volatile typename _Remove_reference<_Arg0>::_Type *,
			_Pmf _Pm, _Farg0 &_Fx0 ,   _Farg1 &_Fx1)
		{	
		return ((_Fx0.*_Pm)(  _Fx1));
		}

	template<class _Pmf,
		class _Farg0 ,   class _Farg1>
		static _Ret _Call_pmf(
			const volatile void *,
			_Pmf _Pm, _Farg0 &_Fx0 ,   _Farg1 &_Fx1)
		{	
		return (((*_Fx0).*_Pm)(  _Fx1));
		}

	
	
	template<class _Pmf,
		class _Farg0 ,   class _Farg1>
		static _Ret _Apply_pmf(_Pmf _Pm, _Farg0 &_Fx0 ,   _Farg1 &_Fx1)
		{	
		return (_Call_pmf<_Pmf>(
			&_Unwrap(_Fx0), _Pm, _Unwrap(_Fx0) ,   _Fx1));
		}
	};
 #line 56 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxpmfcaller"







#line 266 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"












#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 25 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

























































#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 265 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxpmfcaller"





 
template<class _Ty>
	class reference_wrapper;

template<class _Ret,
	class _Arg0>
	struct _Pmf_caller3
	{	
	template<class _Ty>
		static _Ty& _Unwrap(_Ty& _Val)
		{	
		return (_Val);
		}

	template<class _Ty>
		static _Ty& _Unwrap(reference_wrapper<_Ty>& _Val)
		{	
		return (_Val.get());
		}

	
	template<class _Pmf,
		class _Farg0 , class _Farg1 , class _Farg2>
		static _Ret _Call_pmf(
			const volatile typename _Remove_reference<_Arg0>::_Type *,
			_Pmf _Pm, _Farg0 &_Fx0 , _Farg1 &_Fx1 , _Farg2 &_Fx2)
		{	
		return ((_Fx0.*_Pm)(_Fx1 , _Fx2));
		}

	template<class _Pmf,
		class _Farg0 , class _Farg1 , class _Farg2>
		static _Ret _Call_pmf(
			const volatile void *,
			_Pmf _Pm, _Farg0 &_Fx0 , _Farg1 &_Fx1 , _Farg2 &_Fx2)
		{	
		return (((*_Fx0).*_Pm)(_Fx1 , _Fx2));
		}

	
	
	template<class _Pmf,
		class _Farg0 , class _Farg1 , class _Farg2>
		static _Ret _Apply_pmf(_Pmf _Pm, _Farg0 &_Fx0 , _Farg1 &_Fx1 , _Farg2 &_Fx2)
		{	
		return (_Call_pmf<_Pmf>(
			&_Unwrap(_Fx0), _Pm, _Unwrap(_Fx0) , _Fx1 , _Fx2));
		}
	};
 #line 56 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxpmfcaller"







#line 266 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"












#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 29 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

















































#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 265 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxpmfcaller"





 
template<class _Ty>
	class reference_wrapper;

template<class _Ret,
	class _Arg0>
	struct _Pmf_caller4
	{	
	template<class _Ty>
		static _Ty& _Unwrap(_Ty& _Val)
		{	
		return (_Val);
		}

	template<class _Ty>
		static _Ty& _Unwrap(reference_wrapper<_Ty>& _Val)
		{	
		return (_Val.get());
		}

	
	template<class _Pmf,
		class _Farg0 , class _Farg1, class _Farg2 , class _Farg3>
		static _Ret _Call_pmf(
			const volatile typename _Remove_reference<_Arg0>::_Type *,
			_Pmf _Pm, _Farg0 &_Fx0 , _Farg1 &_Fx1, _Farg2 &_Fx2 , _Farg3 &_Fx3)
		{	
		return ((_Fx0.*_Pm)(_Fx1, _Fx2 , _Fx3));
		}

	template<class _Pmf,
		class _Farg0 , class _Farg1, class _Farg2 , class _Farg3>
		static _Ret _Call_pmf(
			const volatile void *,
			_Pmf _Pm, _Farg0 &_Fx0 , _Farg1 &_Fx1, _Farg2 &_Fx2 , _Farg3 &_Fx3)
		{	
		return (((*_Fx0).*_Pm)(_Fx1, _Fx2 , _Fx3));
		}

	
	
	template<class _Pmf,
		class _Farg0 , class _Farg1, class _Farg2 , class _Farg3>
		static _Ret _Apply_pmf(_Pmf _Pm, _Farg0 &_Fx0 , _Farg1 &_Fx1, _Farg2 &_Fx2 , _Farg3 &_Fx3)
		{	
		return (_Call_pmf<_Pmf>(
			&_Unwrap(_Fx0), _Pm, _Unwrap(_Fx0) , _Fx1, _Fx2 , _Fx3));
		}
	};
 #line 56 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxpmfcaller"







#line 266 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"












#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 33 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 47 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 









































#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 265 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxpmfcaller"





 
template<class _Ty>
	class reference_wrapper;

template<class _Ret,
	class _Arg0>
	struct _Pmf_caller5
	{	
	template<class _Ty>
		static _Ty& _Unwrap(_Ty& _Val)
		{	
		return (_Val);
		}

	template<class _Ty>
		static _Ty& _Unwrap(reference_wrapper<_Ty>& _Val)
		{	
		return (_Val.get());
		}

	
	template<class _Pmf,
		class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4>
		static _Ret _Call_pmf(
			const volatile typename _Remove_reference<_Arg0>::_Type *,
			_Pmf _Pm, _Farg0 &_Fx0 , _Farg1 &_Fx1, _Farg2 &_Fx2, _Farg3 &_Fx3 , _Farg4 &_Fx4)
		{	
		return ((_Fx0.*_Pm)(_Fx1, _Fx2, _Fx3 , _Fx4));
		}

	template<class _Pmf,
		class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4>
		static _Ret _Call_pmf(
			const volatile void *,
			_Pmf _Pm, _Farg0 &_Fx0 , _Farg1 &_Fx1, _Farg2 &_Fx2, _Farg3 &_Fx3 , _Farg4 &_Fx4)
		{	
		return (((*_Fx0).*_Pm)(_Fx1, _Fx2, _Fx3 , _Fx4));
		}

	
	
	template<class _Pmf,
		class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4>
		static _Ret _Apply_pmf(_Pmf _Pm, _Farg0 &_Fx0 , _Farg1 &_Fx1, _Farg2 &_Fx2, _Farg3 &_Fx3 , _Farg4 &_Fx4)
		{	
		return (_Call_pmf<_Pmf>(
			&_Unwrap(_Fx0), _Pm, _Unwrap(_Fx0) , _Fx1, _Fx2, _Fx3 , _Fx4));
		}
	};
 #line 56 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxpmfcaller"







#line 266 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"












#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 37 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 47 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 55 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

































#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 265 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxpmfcaller"





 
template<class _Ty>
	class reference_wrapper;

template<class _Ret,
	class _Arg0>
	struct _Pmf_caller6
	{	
	template<class _Ty>
		static _Ty& _Unwrap(_Ty& _Val)
		{	
		return (_Val);
		}

	template<class _Ty>
		static _Ty& _Unwrap(reference_wrapper<_Ty>& _Val)
		{	
		return (_Val.get());
		}

	
	template<class _Pmf,
		class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5>
		static _Ret _Call_pmf(
			const volatile typename _Remove_reference<_Arg0>::_Type *,
			_Pmf _Pm, _Farg0 &_Fx0 , _Farg1 &_Fx1, _Farg2 &_Fx2, _Farg3 &_Fx3, _Farg4 &_Fx4 , _Farg5 &_Fx5)
		{	
		return ((_Fx0.*_Pm)(_Fx1, _Fx2, _Fx3, _Fx4 , _Fx5));
		}

	template<class _Pmf,
		class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5>
		static _Ret _Call_pmf(
			const volatile void *,
			_Pmf _Pm, _Farg0 &_Fx0 , _Farg1 &_Fx1, _Farg2 &_Fx2, _Farg3 &_Fx3, _Farg4 &_Fx4 , _Farg5 &_Fx5)
		{	
		return (((*_Fx0).*_Pm)(_Fx1, _Fx2, _Fx3, _Fx4 , _Fx5));
		}

	
	
	template<class _Pmf,
		class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5>
		static _Ret _Apply_pmf(_Pmf _Pm, _Farg0 &_Fx0 , _Farg1 &_Fx1, _Farg2 &_Fx2, _Farg3 &_Fx3, _Farg4 &_Fx4 , _Farg5 &_Fx5)
		{	
		return (_Call_pmf<_Pmf>(
			&_Unwrap(_Fx0), _Pm, _Unwrap(_Fx0) , _Fx1, _Fx2, _Fx3, _Fx4 , _Fx5));
		}
	};
 #line 56 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxpmfcaller"







#line 266 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"












#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 41 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 47 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 55 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 63 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

























#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 265 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxpmfcaller"





 
template<class _Ty>
	class reference_wrapper;

template<class _Ret,
	class _Arg0>
	struct _Pmf_caller7
	{	
	template<class _Ty>
		static _Ty& _Unwrap(_Ty& _Val)
		{	
		return (_Val);
		}

	template<class _Ty>
		static _Ty& _Unwrap(reference_wrapper<_Ty>& _Val)
		{	
		return (_Val.get());
		}

	
	template<class _Pmf,
		class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6>
		static _Ret _Call_pmf(
			const volatile typename _Remove_reference<_Arg0>::_Type *,
			_Pmf _Pm, _Farg0 &_Fx0 , _Farg1 &_Fx1, _Farg2 &_Fx2, _Farg3 &_Fx3, _Farg4 &_Fx4, _Farg5 &_Fx5 , _Farg6 &_Fx6)
		{	
		return ((_Fx0.*_Pm)(_Fx1, _Fx2, _Fx3, _Fx4, _Fx5 , _Fx6));
		}

	template<class _Pmf,
		class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6>
		static _Ret _Call_pmf(
			const volatile void *,
			_Pmf _Pm, _Farg0 &_Fx0 , _Farg1 &_Fx1, _Farg2 &_Fx2, _Farg3 &_Fx3, _Farg4 &_Fx4, _Farg5 &_Fx5 , _Farg6 &_Fx6)
		{	
		return (((*_Fx0).*_Pm)(_Fx1, _Fx2, _Fx3, _Fx4, _Fx5 , _Fx6));
		}

	
	
	template<class _Pmf,
		class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6>
		static _Ret _Apply_pmf(_Pmf _Pm, _Farg0 &_Fx0 , _Farg1 &_Fx1, _Farg2 &_Fx2, _Farg3 &_Fx3, _Farg4 &_Fx4, _Farg5 &_Fx5 , _Farg6 &_Fx6)
		{	
		return (_Call_pmf<_Pmf>(
			&_Unwrap(_Fx0), _Pm, _Unwrap(_Fx0) , _Fx1, _Fx2, _Fx3, _Fx4, _Fx5 , _Fx6));
		}
	};
 #line 56 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxpmfcaller"







#line 266 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"












#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 45 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 47 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 55 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 63 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 71 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

















#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 265 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxpmfcaller"





 
template<class _Ty>
	class reference_wrapper;

template<class _Ret,
	class _Arg0>
	struct _Pmf_caller8
	{	
	template<class _Ty>
		static _Ty& _Unwrap(_Ty& _Val)
		{	
		return (_Val);
		}

	template<class _Ty>
		static _Ty& _Unwrap(reference_wrapper<_Ty>& _Val)
		{	
		return (_Val.get());
		}

	
	template<class _Pmf,
		class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7>
		static _Ret _Call_pmf(
			const volatile typename _Remove_reference<_Arg0>::_Type *,
			_Pmf _Pm, _Farg0 &_Fx0 , _Farg1 &_Fx1, _Farg2 &_Fx2, _Farg3 &_Fx3, _Farg4 &_Fx4, _Farg5 &_Fx5, _Farg6 &_Fx6 , _Farg7 &_Fx7)
		{	
		return ((_Fx0.*_Pm)(_Fx1, _Fx2, _Fx3, _Fx4, _Fx5, _Fx6 , _Fx7));
		}

	template<class _Pmf,
		class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7>
		static _Ret _Call_pmf(
			const volatile void *,
			_Pmf _Pm, _Farg0 &_Fx0 , _Farg1 &_Fx1, _Farg2 &_Fx2, _Farg3 &_Fx3, _Farg4 &_Fx4, _Farg5 &_Fx5, _Farg6 &_Fx6 , _Farg7 &_Fx7)
		{	
		return (((*_Fx0).*_Pm)(_Fx1, _Fx2, _Fx3, _Fx4, _Fx5, _Fx6 , _Fx7));
		}

	
	
	template<class _Pmf,
		class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7>
		static _Ret _Apply_pmf(_Pmf _Pm, _Farg0 &_Fx0 , _Farg1 &_Fx1, _Farg2 &_Fx2, _Farg3 &_Fx3, _Farg4 &_Fx4, _Farg5 &_Fx5, _Farg6 &_Fx6 , _Farg7 &_Fx7)
		{	
		return (_Call_pmf<_Pmf>(
			&_Unwrap(_Fx0), _Pm, _Unwrap(_Fx0) , _Fx1, _Fx2, _Fx3, _Fx4, _Fx5, _Fx6 , _Fx7));
		}
	};
 #line 56 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxpmfcaller"







#line 266 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"












#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 49 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 47 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 55 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 63 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 71 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 79 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 









#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 265 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxpmfcaller"





 
template<class _Ty>
	class reference_wrapper;

template<class _Ret,
	class _Arg0>
	struct _Pmf_caller9
	{	
	template<class _Ty>
		static _Ty& _Unwrap(_Ty& _Val)
		{	
		return (_Val);
		}

	template<class _Ty>
		static _Ty& _Unwrap(reference_wrapper<_Ty>& _Val)
		{	
		return (_Val.get());
		}

	
	template<class _Pmf,
		class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8>
		static _Ret _Call_pmf(
			const volatile typename _Remove_reference<_Arg0>::_Type *,
			_Pmf _Pm, _Farg0 &_Fx0 , _Farg1 &_Fx1, _Farg2 &_Fx2, _Farg3 &_Fx3, _Farg4 &_Fx4, _Farg5 &_Fx5, _Farg6 &_Fx6, _Farg7 &_Fx7 , _Farg8 &_Fx8)
		{	
		return ((_Fx0.*_Pm)(_Fx1, _Fx2, _Fx3, _Fx4, _Fx5, _Fx6, _Fx7 , _Fx8));
		}

	template<class _Pmf,
		class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8>
		static _Ret _Call_pmf(
			const volatile void *,
			_Pmf _Pm, _Farg0 &_Fx0 , _Farg1 &_Fx1, _Farg2 &_Fx2, _Farg3 &_Fx3, _Farg4 &_Fx4, _Farg5 &_Fx5, _Farg6 &_Fx6, _Farg7 &_Fx7 , _Farg8 &_Fx8)
		{	
		return (((*_Fx0).*_Pm)(_Fx1, _Fx2, _Fx3, _Fx4, _Fx5, _Fx6, _Fx7 , _Fx8));
		}

	
	
	template<class _Pmf,
		class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8>
		static _Ret _Apply_pmf(_Pmf _Pm, _Farg0 &_Fx0 , _Farg1 &_Fx1, _Farg2 &_Fx2, _Farg3 &_Fx3, _Farg4 &_Fx4, _Farg5 &_Fx5, _Farg6 &_Fx6, _Farg7 &_Fx7 , _Farg8 &_Fx8)
		{	
		return (_Call_pmf<_Pmf>(
			&_Unwrap(_Fx0), _Pm, _Unwrap(_Fx0) , _Fx1, _Fx2, _Fx3, _Fx4, _Fx5, _Fx6, _Fx7 , _Fx8));
		}
	};
 #line 56 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxpmfcaller"







#line 266 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"












#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 53 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 47 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 55 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 63 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 71 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 79 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 87 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  

 

#line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 265 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxpmfcaller"





 
template<class _Ty>
	class reference_wrapper;

template<class _Ret,
	class _Arg0>
	struct _Pmf_caller10
	{	
	template<class _Ty>
		static _Ty& _Unwrap(_Ty& _Val)
		{	
		return (_Val);
		}

	template<class _Ty>
		static _Ty& _Unwrap(reference_wrapper<_Ty>& _Val)
		{	
		return (_Val.get());
		}

	
	template<class _Pmf,
		class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9>
		static _Ret _Call_pmf(
			const volatile typename _Remove_reference<_Arg0>::_Type *,
			_Pmf _Pm, _Farg0 &_Fx0 , _Farg1 &_Fx1, _Farg2 &_Fx2, _Farg3 &_Fx3, _Farg4 &_Fx4, _Farg5 &_Fx5, _Farg6 &_Fx6, _Farg7 &_Fx7, _Farg8 &_Fx8 , _Farg9 &_Fx9)
		{	
		return ((_Fx0.*_Pm)(_Fx1, _Fx2, _Fx3, _Fx4, _Fx5, _Fx6, _Fx7, _Fx8 , _Fx9));
		}

	template<class _Pmf,
		class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9>
		static _Ret _Call_pmf(
			const volatile void *,
			_Pmf _Pm, _Farg0 &_Fx0 , _Farg1 &_Fx1, _Farg2 &_Fx2, _Farg3 &_Fx3, _Farg4 &_Fx4, _Farg5 &_Fx5, _Farg6 &_Fx6, _Farg7 &_Fx7, _Farg8 &_Fx8 , _Farg9 &_Fx9)
		{	
		return (((*_Fx0).*_Pm)(_Fx1, _Fx2, _Fx3, _Fx4, _Fx5, _Fx6, _Fx7, _Fx8 , _Fx9));
		}

	
	
	template<class _Pmf,
		class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9>
		static _Ret _Apply_pmf(_Pmf _Pm, _Farg0 &_Fx0 , _Farg1 &_Fx1, _Farg2 &_Fx2, _Farg3 &_Fx3, _Farg4 &_Fx4, _Farg5 &_Fx5, _Farg6 &_Fx6, _Farg7 &_Fx7, _Farg8 &_Fx8 , _Farg9 &_Fx9)
		{	
		return (_Call_pmf<_Pmf>(
			&_Unwrap(_Fx0), _Pm, _Unwrap(_Fx0) , _Fx1, _Fx2, _Fx3, _Fx4, _Fx5, _Fx6, _Fx7, _Fx8 , _Fx9));
		}
	};
 #line 56 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxpmfcaller"







#line 266 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"












#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 57 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"




















#line 164 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xrefwrap"

	
template<class _Ty,
	class _Memty,
	bool _Indirect = false>
	struct _Callable_pmf
		: _Callable_base<_Ty, _Indirect>
	{	
	_Callable_pmf(_Ty& _Val)
		: _Callable_base<_Ty, _Indirect>(_Val)
		{	
		}

 
 #line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"





 

#line 9 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"





 
 #line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 
  
  
  
  
  
  

 

















































































#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  

 




#line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  
  
  
  
  
  
  
  
  
  
  
  
  

 




























#line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  

 

#line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  

 

#line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxcallpmf"



 






#line 12 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxcallpmf"





#line 260 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


















#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 16 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"
 
#line 18 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"


#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 









































































#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  

 













#line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  

 

#line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  

 

#line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxcallpmf"



 
template<class _Ret , class _Arg0    >
	_Ret _ApplyX(_Arg0 && _Ax0    ) const
	{ 
	return (_Pmf_caller1<_Ret, _Memty>::
		_Apply_pmf(this->_Get(), _Ax0    ));
	}
 #line 12 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxcallpmf"





#line 260 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


















#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 21 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

































































#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  

 

#line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxcallpmf"



 
template<class _Ret , class _Arg0 ,   class _Arg1>
	_Ret _ApplyX(_Arg0 && _Ax0 ,   _Arg1 && _Ax1) const
	{ 
	return (_Pmf_caller2<_Ret, _Memty>::
		_Apply_pmf(this->_Get(), _Ax0 ,   _Ax1));
	}
 #line 12 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxcallpmf"





#line 260 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


















#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 25 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

























































#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxcallpmf"



 
template<class _Ret , class _Arg0 , class _Arg1 , class _Arg2>
	_Ret _ApplyX(_Arg0 && _Ax0 , _Arg1 && _Ax1 , _Arg2 && _Ax2) const
	{ 
	return (_Pmf_caller3<_Ret, _Memty>::
		_Apply_pmf(this->_Get(), _Ax0 , _Ax1 , _Ax2));
	}
 #line 12 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxcallpmf"





#line 260 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


















#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 29 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

















































#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxcallpmf"



 
template<class _Ret , class _Arg0 , class _Arg1, class _Arg2 , class _Arg3>
	_Ret _ApplyX(_Arg0 && _Ax0 , _Arg1 && _Ax1, _Arg2 && _Ax2 , _Arg3 && _Ax3) const
	{ 
	return (_Pmf_caller4<_Ret, _Memty>::
		_Apply_pmf(this->_Get(), _Ax0 , _Ax1, _Ax2 , _Ax3));
	}
 #line 12 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxcallpmf"





#line 260 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


















#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 33 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 47 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 









































#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxcallpmf"



 
template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4>
	_Ret _ApplyX(_Arg0 && _Ax0 , _Arg1 && _Ax1, _Arg2 && _Ax2, _Arg3 && _Ax3 , _Arg4 && _Ax4) const
	{ 
	return (_Pmf_caller5<_Ret, _Memty>::
		_Apply_pmf(this->_Get(), _Ax0 , _Ax1, _Ax2, _Ax3 , _Ax4));
	}
 #line 12 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxcallpmf"





#line 260 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


















#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 37 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 47 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 55 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

































#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxcallpmf"



 
template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5>
	_Ret _ApplyX(_Arg0 && _Ax0 , _Arg1 && _Ax1, _Arg2 && _Ax2, _Arg3 && _Ax3, _Arg4 && _Ax4 , _Arg5 && _Ax5) const
	{ 
	return (_Pmf_caller6<_Ret, _Memty>::
		_Apply_pmf(this->_Get(), _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4 , _Ax5));
	}
 #line 12 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxcallpmf"





#line 260 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


















#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 41 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 47 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 55 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 63 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

























#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxcallpmf"



 
template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6>
	_Ret _ApplyX(_Arg0 && _Ax0 , _Arg1 && _Ax1, _Arg2 && _Ax2, _Arg3 && _Ax3, _Arg4 && _Ax4, _Arg5 && _Ax5 , _Arg6 && _Ax6) const
	{ 
	return (_Pmf_caller7<_Ret, _Memty>::
		_Apply_pmf(this->_Get(), _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5 , _Ax6));
	}
 #line 12 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxcallpmf"





#line 260 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


















#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 45 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 47 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 55 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 63 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 71 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

















#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxcallpmf"



 
template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7>
	_Ret _ApplyX(_Arg0 && _Ax0 , _Arg1 && _Ax1, _Arg2 && _Ax2, _Arg3 && _Ax3, _Arg4 && _Ax4, _Arg5 && _Ax5, _Arg6 && _Ax6 , _Arg7 && _Ax7) const
	{ 
	return (_Pmf_caller8<_Ret, _Memty>::
		_Apply_pmf(this->_Get(), _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6 , _Ax7));
	}
 #line 12 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxcallpmf"





#line 260 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


















#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 49 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 47 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 55 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 63 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 71 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 79 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 









#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxcallpmf"



 
template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8>
	_Ret _ApplyX(_Arg0 && _Ax0 , _Arg1 && _Ax1, _Arg2 && _Ax2, _Arg3 && _Ax3, _Arg4 && _Ax4, _Arg5 && _Ax5, _Arg6 && _Ax6, _Arg7 && _Ax7 , _Arg8 && _Ax8) const
	{ 
	return (_Pmf_caller9<_Ret, _Memty>::
		_Apply_pmf(this->_Get(), _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7 , _Ax8));
	}
 #line 12 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxcallpmf"





#line 260 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


















#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 53 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 47 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 55 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 63 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 71 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 79 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 87 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  

 

#line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxcallpmf"



 
template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9>
	_Ret _ApplyX(_Arg0 && _Ax0 , _Arg1 && _Ax1, _Arg2 && _Ax2, _Arg3 && _Ax3, _Arg4 && _Ax4, _Arg5 && _Ax5, _Arg6 && _Ax6, _Arg7 && _Ax7, _Arg8 && _Ax8 , _Arg9 && _Ax9) const
	{ 
	return (_Pmf_caller10<_Ret, _Memty>::
		_Apply_pmf(this->_Get(), _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7, _Ax8 , _Ax9));
	}
 #line 12 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxcallpmf"





#line 260 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


















#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 57 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"




















#line 179 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xrefwrap"
	};

	
template<class _Ty,
	bool _Indirect = false>
	struct _Callable_fun
		: _Callable_base<_Ty, _Indirect>
	{	
	_Callable_fun(_Ty& _Val)
		: _Callable_base<_Ty, _Indirect>(_Val)
		{	
		}

 
 #line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"





 

#line 9 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"





 
 #line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 
  
  
  
  
  
  

 

















































































#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  

 




#line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  
  
  
  
  
  
  
  
  
  
  
  
  

 




























#line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  

 

#line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  

 

#line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxcallfun"



template<class _Ret      >
	_Ret _ApplyX(    ) const
	{ 
	return (this->_Get()(    ));
	}





#line 256 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"






















#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 16 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"
 
#line 18 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"


#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 









































































#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  

 













#line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  

 

#line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  

 

#line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxcallfun"



template<class _Ret , class _Arg0    >
	_Ret _ApplyX(_Arg0 && _Ax0    ) const
	{ 
	return (this->_Get()(::std:: forward<_Arg0>(_Ax0)    ));
	}





#line 256 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"






















#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 21 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

































































#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  

 

#line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxcallfun"



template<class _Ret , class _Arg0 ,   class _Arg1>
	_Ret _ApplyX(_Arg0 && _Ax0 ,   _Arg1 && _Ax1) const
	{ 
	return (this->_Get()(::std:: forward<_Arg0>(_Ax0) ,   ::std:: forward<_Arg1>(_Ax1)));
	}





#line 256 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"






















#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 25 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

























































#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxcallfun"



template<class _Ret , class _Arg0 , class _Arg1 , class _Arg2>
	_Ret _ApplyX(_Arg0 && _Ax0 , _Arg1 && _Ax1 , _Arg2 && _Ax2) const
	{ 
	return (this->_Get()(::std:: forward<_Arg0>(_Ax0) , ::std:: forward<_Arg1>(_Ax1) , ::std:: forward<_Arg2>(_Ax2)));
	}





#line 256 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"






















#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 29 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

















































#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxcallfun"



template<class _Ret , class _Arg0 , class _Arg1, class _Arg2 , class _Arg3>
	_Ret _ApplyX(_Arg0 && _Ax0 , _Arg1 && _Ax1, _Arg2 && _Ax2 , _Arg3 && _Ax3) const
	{ 
	return (this->_Get()(::std:: forward<_Arg0>(_Ax0) , ::std:: forward<_Arg1>(_Ax1), ::std:: forward<_Arg2>(_Ax2) , ::std:: forward<_Arg3>(_Ax3)));
	}





#line 256 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"






















#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 33 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 47 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 









































#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxcallfun"



template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4>
	_Ret _ApplyX(_Arg0 && _Ax0 , _Arg1 && _Ax1, _Arg2 && _Ax2, _Arg3 && _Ax3 , _Arg4 && _Ax4) const
	{ 
	return (this->_Get()(::std:: forward<_Arg0>(_Ax0) , ::std:: forward<_Arg1>(_Ax1), ::std:: forward<_Arg2>(_Ax2), ::std:: forward<_Arg3>(_Ax3) , ::std:: forward<_Arg4>(_Ax4)));
	}





#line 256 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"






















#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 37 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 47 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 55 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

































#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxcallfun"



template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5>
	_Ret _ApplyX(_Arg0 && _Ax0 , _Arg1 && _Ax1, _Arg2 && _Ax2, _Arg3 && _Ax3, _Arg4 && _Ax4 , _Arg5 && _Ax5) const
	{ 
	return (this->_Get()(::std:: forward<_Arg0>(_Ax0) , ::std:: forward<_Arg1>(_Ax1), ::std:: forward<_Arg2>(_Ax2), ::std:: forward<_Arg3>(_Ax3), ::std:: forward<_Arg4>(_Ax4) , ::std:: forward<_Arg5>(_Ax5)));
	}





#line 256 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"






















#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 41 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 47 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 55 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 63 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

























#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxcallfun"



template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6>
	_Ret _ApplyX(_Arg0 && _Ax0 , _Arg1 && _Ax1, _Arg2 && _Ax2, _Arg3 && _Ax3, _Arg4 && _Ax4, _Arg5 && _Ax5 , _Arg6 && _Ax6) const
	{ 
	return (this->_Get()(::std:: forward<_Arg0>(_Ax0) , ::std:: forward<_Arg1>(_Ax1), ::std:: forward<_Arg2>(_Ax2), ::std:: forward<_Arg3>(_Ax3), ::std:: forward<_Arg4>(_Ax4), ::std:: forward<_Arg5>(_Ax5) , ::std:: forward<_Arg6>(_Ax6)));
	}





#line 256 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"






















#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 45 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 47 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 55 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 63 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 71 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

















#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxcallfun"



template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7>
	_Ret _ApplyX(_Arg0 && _Ax0 , _Arg1 && _Ax1, _Arg2 && _Ax2, _Arg3 && _Ax3, _Arg4 && _Ax4, _Arg5 && _Ax5, _Arg6 && _Ax6 , _Arg7 && _Ax7) const
	{ 
	return (this->_Get()(::std:: forward<_Arg0>(_Ax0) , ::std:: forward<_Arg1>(_Ax1), ::std:: forward<_Arg2>(_Ax2), ::std:: forward<_Arg3>(_Ax3), ::std:: forward<_Arg4>(_Ax4), ::std:: forward<_Arg5>(_Ax5), ::std:: forward<_Arg6>(_Ax6) , ::std:: forward<_Arg7>(_Ax7)));
	}





#line 256 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"






















#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 49 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 47 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 55 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 63 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 71 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 79 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 









#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxcallfun"



template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8>
	_Ret _ApplyX(_Arg0 && _Ax0 , _Arg1 && _Ax1, _Arg2 && _Ax2, _Arg3 && _Ax3, _Arg4 && _Ax4, _Arg5 && _Ax5, _Arg6 && _Ax6, _Arg7 && _Ax7 , _Arg8 && _Ax8) const
	{ 
	return (this->_Get()(::std:: forward<_Arg0>(_Ax0) , ::std:: forward<_Arg1>(_Ax1), ::std:: forward<_Arg2>(_Ax2), ::std:: forward<_Arg3>(_Ax3), ::std:: forward<_Arg4>(_Ax4), ::std:: forward<_Arg5>(_Ax5), ::std:: forward<_Arg6>(_Ax6), ::std:: forward<_Arg7>(_Ax7) , ::std:: forward<_Arg8>(_Ax8)));
	}





#line 256 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"






















#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 53 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 47 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 55 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 63 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 71 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 79 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 87 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  

 

#line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxcallfun"



template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9>
	_Ret _ApplyX(_Arg0 && _Ax0 , _Arg1 && _Ax1, _Arg2 && _Ax2, _Arg3 && _Ax3, _Arg4 && _Ax4, _Arg5 && _Ax5, _Arg6 && _Ax6, _Arg7 && _Ax7, _Arg8 && _Ax8 , _Arg9 && _Ax9) const
	{ 
	return (this->_Get()(::std:: forward<_Arg0>(_Ax0) , ::std:: forward<_Arg1>(_Ax1), ::std:: forward<_Arg2>(_Ax2), ::std:: forward<_Arg3>(_Ax3), ::std:: forward<_Arg4>(_Ax4), ::std:: forward<_Arg5>(_Ax5), ::std:: forward<_Arg6>(_Ax6), ::std:: forward<_Arg7>(_Ax7), ::std:: forward<_Arg8>(_Ax8) , ::std:: forward<_Arg9>(_Ax9)));
	}





#line 256 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"






















#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 57 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"




















#line 194 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xrefwrap"
	};

	
template<class _Callable>
	struct _Call_wrapper_base
	{	
	typedef typename _Callable::_MyTy _MyTy;
	typedef typename _Callable::_MyCnstTy _MyCnstTy;

	_Call_wrapper_base(_MyTy& _Val)
		: _Callee(_Val)
		{	
		}

	void _Reset(_MyTy& _Val)
		{	
		_Callee._Reset(_Val);
		}

	_MyCnstTy _Get() const
		{	
		return (_Callee._Get());
		}

	_MyCnstTy _Get()
		{	
		return (_Callee._Get());
		}

	_Callable _Callee;
	};

	
template<class _Callable>
	struct _Call_wrapper
	: _Call_wrapper_base<_Callable>
	{	
	typedef _Call_wrapper_base<_Callable> _Mybase;

	_Call_wrapper(typename _Call_wrapper_base<_Callable>::_MyTy& _Val)
		: _Call_wrapper_base<_Callable>(_Val)
		{	
		}

 
 #line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xawrap"





 

#line 9 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xawrap"





 
 
 
 
 
 
  

#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xawrap"
   #line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxcallwrap"



 

#line 7 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxcallwrap"

	typename _Result_of<typename _Callable::_MyTy()>::_Type
		operator()() const
	{ 
	typedef typename _Result_of<
		typename _Callable::_MyTy()>::_Type _Ret;
	return (_Mybase::_Callee.template _ApplyX<_Ret>());
	}





#line 24 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xawrap"
  #line 25 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xawrap"
 
 
 
 
 
 
#line 32 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xawrap"







  

#line 42 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xawrap"
   #line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxcallwrap"



 
template<class _Carg0>
 #line 7 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxcallwrap"

	typename _Result_of<typename _Callable::_MyTy(_Carg0)>::_Type
		operator()(_Carg0&& _CA0) const
	{ 
	typedef typename _Result_of<
		typename _Callable::_MyTy(_Carg0)>::_Type _Ret;
	return (_Mybase::_Callee.template _ApplyX<_Ret>(::std:: forward<_Carg0>(_CA0)));
	}





#line 43 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xawrap"
  #line 44 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xawrap"














  

#line 61 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xawrap"
   #line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxcallwrap"



 
template<class _Carg0, class _Carg1>
 #line 7 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxcallwrap"

	typename _Result_of<typename _Callable::_MyTy(_Carg0, _Carg1)>::_Type
		operator()(_Carg0&& _CA0, _Carg1&& _CA1) const
	{ 
	typedef typename _Result_of<
		typename _Callable::_MyTy(_Carg0, _Carg1)>::_Type _Ret;
	return (_Mybase::_Callee.template _ApplyX<_Ret>(::std:: forward<_Carg0>(_CA0), ::std:: forward<_Carg1>(_CA1)));
	}





#line 62 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xawrap"
  #line 63 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xawrap"















  

#line 81 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xawrap"
   #line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxcallwrap"



 
template<class _Carg0, class _Carg1, class _Carg2>
 #line 7 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxcallwrap"

	typename _Result_of<typename _Callable::_MyTy(_Carg0, _Carg1, _Carg2)>::_Type
		operator()(_Carg0&& _CA0, _Carg1&& _CA1, _Carg2&& _CA2) const
	{ 
	typedef typename _Result_of<
		typename _Callable::_MyTy(_Carg0, _Carg1, _Carg2)>::_Type _Ret;
	return (_Mybase::_Callee.template _ApplyX<_Ret>(::std:: forward<_Carg0>(_CA0), ::std:: forward<_Carg1>(_CA1), ::std:: forward<_Carg2>(_CA2)));
	}





#line 82 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xawrap"
  #line 83 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xawrap"


















  

#line 104 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xawrap"
   #line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxcallwrap"



 
template<class _Carg0, class _Carg1, class _Carg2, class _Carg3>
 #line 7 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxcallwrap"

	typename _Result_of<typename _Callable::_MyTy(_Carg0, _Carg1, _Carg2, _Carg3)>::_Type
		operator()(_Carg0&& _CA0, _Carg1&& _CA1, _Carg2&& _CA2, _Carg3&& _CA3) const
	{ 
	typedef typename _Result_of<
		typename _Callable::_MyTy(_Carg0, _Carg1, _Carg2, _Carg3)>::_Type _Ret;
	return (_Mybase::_Callee.template _ApplyX<_Ret>(::std:: forward<_Carg0>(_CA0), ::std:: forward<_Carg1>(_CA1), ::std:: forward<_Carg2>(_CA2), ::std:: forward<_Carg3>(_CA3)));
	}





#line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xawrap"
  #line 106 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xawrap"




















  

#line 129 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xawrap"
   #line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxcallwrap"



 
template<class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4>
 #line 7 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxcallwrap"

	typename _Result_of<typename _Callable::_MyTy(_Carg0, _Carg1, _Carg2, _Carg3, _Carg4)>::_Type
		operator()(_Carg0&& _CA0, _Carg1&& _CA1, _Carg2&& _CA2, _Carg3&& _CA3, _Carg4&& _CA4) const
	{ 
	typedef typename _Result_of<
		typename _Callable::_MyTy(_Carg0, _Carg1, _Carg2, _Carg3, _Carg4)>::_Type _Ret;
	return (_Mybase::_Callee.template _ApplyX<_Ret>(::std:: forward<_Carg0>(_CA0), ::std:: forward<_Carg1>(_CA1), ::std:: forward<_Carg2>(_CA2), ::std:: forward<_Carg3>(_CA3), ::std:: forward<_Carg4>(_CA4)));
	}





#line 130 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xawrap"
  #line 131 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xawrap"





















  

#line 155 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xawrap"
   #line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxcallwrap"



 
template<class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5>
 #line 7 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxcallwrap"

	typename _Result_of<typename _Callable::_MyTy(_Carg0, _Carg1, _Carg2, _Carg3, _Carg4, _Carg5)>::_Type
		operator()(_Carg0&& _CA0, _Carg1&& _CA1, _Carg2&& _CA2, _Carg3&& _CA3, _Carg4&& _CA4, _Carg5&& _CA5) const
	{ 
	typedef typename _Result_of<
		typename _Callable::_MyTy(_Carg0, _Carg1, _Carg2, _Carg3, _Carg4, _Carg5)>::_Type _Ret;
	return (_Mybase::_Callee.template _ApplyX<_Ret>(::std:: forward<_Carg0>(_CA0), ::std:: forward<_Carg1>(_CA1), ::std:: forward<_Carg2>(_CA2), ::std:: forward<_Carg3>(_CA3), ::std:: forward<_Carg4>(_CA4), ::std:: forward<_Carg5>(_CA5)));
	}





#line 156 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xawrap"
  #line 157 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xawrap"






















  

#line 182 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xawrap"
   #line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxcallwrap"



 
template<class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6>
 #line 7 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxcallwrap"

	typename _Result_of<typename _Callable::_MyTy(_Carg0, _Carg1, _Carg2, _Carg3, _Carg4, _Carg5, _Carg6)>::_Type
		operator()(_Carg0&& _CA0, _Carg1&& _CA1, _Carg2&& _CA2, _Carg3&& _CA3, _Carg4&& _CA4, _Carg5&& _CA5, _Carg6&& _CA6) const
	{ 
	typedef typename _Result_of<
		typename _Callable::_MyTy(_Carg0, _Carg1, _Carg2, _Carg3, _Carg4, _Carg5, _Carg6)>::_Type _Ret;
	return (_Mybase::_Callee.template _ApplyX<_Ret>(::std:: forward<_Carg0>(_CA0), ::std:: forward<_Carg1>(_CA1), ::std:: forward<_Carg2>(_CA2), ::std:: forward<_Carg3>(_CA3), ::std:: forward<_Carg4>(_CA4), ::std:: forward<_Carg5>(_CA5), ::std:: forward<_Carg6>(_CA6)));
	}





#line 183 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xawrap"
  #line 184 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xawrap"

























  

#line 212 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xawrap"
   #line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxcallwrap"



 
template<class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7>
 #line 7 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxcallwrap"

	typename _Result_of<typename _Callable::_MyTy(_Carg0, _Carg1, _Carg2, _Carg3, _Carg4, _Carg5, _Carg6, _Carg7)>::_Type
		operator()(_Carg0&& _CA0, _Carg1&& _CA1, _Carg2&& _CA2, _Carg3&& _CA3, _Carg4&& _CA4, _Carg5&& _CA5, _Carg6&& _CA6, _Carg7&& _CA7) const
	{ 
	typedef typename _Result_of<
		typename _Callable::_MyTy(_Carg0, _Carg1, _Carg2, _Carg3, _Carg4, _Carg5, _Carg6, _Carg7)>::_Type _Ret;
	return (_Mybase::_Callee.template _ApplyX<_Ret>(::std:: forward<_Carg0>(_CA0), ::std:: forward<_Carg1>(_CA1), ::std:: forward<_Carg2>(_CA2), ::std:: forward<_Carg3>(_CA3), ::std:: forward<_Carg4>(_CA4), ::std:: forward<_Carg5>(_CA5), ::std:: forward<_Carg6>(_CA6), ::std:: forward<_Carg7>(_CA7)));
	}





#line 213 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xawrap"
  #line 214 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xawrap"



























  

#line 244 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xawrap"
   #line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxcallwrap"



 
template<class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8>
 #line 7 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxcallwrap"

	typename _Result_of<typename _Callable::_MyTy(_Carg0, _Carg1, _Carg2, _Carg3, _Carg4, _Carg5, _Carg6, _Carg7, _Carg8)>::_Type
		operator()(_Carg0&& _CA0, _Carg1&& _CA1, _Carg2&& _CA2, _Carg3&& _CA3, _Carg4&& _CA4, _Carg5&& _CA5, _Carg6&& _CA6, _Carg7&& _CA7, _Carg8&& _CA8) const
	{ 
	typedef typename _Result_of<
		typename _Callable::_MyTy(_Carg0, _Carg1, _Carg2, _Carg3, _Carg4, _Carg5, _Carg6, _Carg7, _Carg8)>::_Type _Ret;
	return (_Mybase::_Callee.template _ApplyX<_Ret>(::std:: forward<_Carg0>(_CA0), ::std:: forward<_Carg1>(_CA1), ::std:: forward<_Carg2>(_CA2), ::std:: forward<_Carg3>(_CA3), ::std:: forward<_Carg4>(_CA4), ::std:: forward<_Carg5>(_CA5), ::std:: forward<_Carg6>(_CA6), ::std:: forward<_Carg7>(_CA7), ::std:: forward<_Carg8>(_CA8)));
	}





#line 245 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xawrap"
  #line 246 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xawrap"




























  

#line 277 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xawrap"
   #line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxcallwrap"



 
template<class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8, class _Carg9>
 #line 7 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxcallwrap"

	typename _Result_of<typename _Callable::_MyTy(_Carg0, _Carg1, _Carg2, _Carg3, _Carg4, _Carg5, _Carg6, _Carg7, _Carg8, _Carg9)>::_Type
		operator()(_Carg0&& _CA0, _Carg1&& _CA1, _Carg2&& _CA2, _Carg3&& _CA3, _Carg4&& _CA4, _Carg5&& _CA5, _Carg6&& _CA6, _Carg7&& _CA7, _Carg8&& _CA8, _Carg9&& _CA9) const
	{ 
	typedef typename _Result_of<
		typename _Callable::_MyTy(_Carg0, _Carg1, _Carg2, _Carg3, _Carg4, _Carg5, _Carg6, _Carg7, _Carg8, _Carg9)>::_Type _Ret;
	return (_Mybase::_Callee.template _ApplyX<_Ret>(::std:: forward<_Carg0>(_CA0), ::std:: forward<_Carg1>(_CA1), ::std:: forward<_Carg2>(_CA2), ::std:: forward<_Carg3>(_CA3), ::std:: forward<_Carg4>(_CA4), ::std:: forward<_Carg5>(_CA5), ::std:: forward<_Carg6>(_CA6), ::std:: forward<_Carg7>(_CA7), ::std:: forward<_Carg8>(_CA8), ::std:: forward<_Carg9>(_CA9)));
	}





#line 278 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xawrap"
  #line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xawrap"














#line 240 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xrefwrap"
	};

	
template<class _Ty>
	_No _Has_result_and_arg_type(const volatile void *);

template<class _Ty>
	_Yes _Has_result_and_arg_type(_Ty *,
		typename _Ty::argument_type * = 0, typename _Ty::result_type * = 0);




	
template<class _Ty>
	_No _Has_result_and_2arg_type(const volatile void *);

template<class _Ty>
	_Yes _Has_result_and_2arg_type(_Ty *,
		typename _Ty::first_argument_type * = 0,
		typename _Ty::second_argument_type * = 0,
		typename _Ty::result_type * = 0);




	
template<class _T1,
	class _Ret>
	_No _Has_unary_base(const volatile void *);

template<class _T1,
	class _Ret>
	_Yes _Has_unary_base(const volatile unary_function<_T1, _Ret> *);





	
template<class _T1,
	class _T2,
	class _Ret>
	_No _Has_binary_base(const volatile void *);

template<class _T1,
	class _T2,
	class _Ret>
	_Yes _Has_binary_base(const volatile binary_function<_T1, _T2, _Ret> *);






	
template<class _Ty,
	bool>
	struct _Refwrap_result0
	{	
	typedef typename _Ty::result_type result_type;
	};

template<class _Ty>
	struct _Refwrap_result0<_Ty, false>
	{	
	};


template<class _Ty,
	bool>
	struct _Refwrap_result1_helper
		: _Refwrap_result0<_Ty, (sizeof (::std:: tr1::_Has_result_type((_Ty *)0)) == sizeof (::std:: tr1::_Yes))>
	{	
	};

template<class _Ty>
	struct _Refwrap_result1_helper<_Ty, true>
		: unary_function<typename _Ty::argument_type,
			typename _Ty::result_type>
	{	
	};

	
template<class _Ty,
	bool>
	struct _Refwrap_result1
		: _Refwrap_result0<_Ty, (sizeof (::std:: tr1::_Has_result_type((_Ty *)0)) == sizeof (::std:: tr1::_Yes))>
	{	
	};

template<class _Ty>
	struct _Refwrap_result1<_Ty, true>
		: _Refwrap_result1_helper<_Ty, (sizeof ((_Has_unary_base<typename _Ty::argument_type, typename _Ty::result_type>((_Ty *)0))) == sizeof (::std:: tr1::_Yes))>
	{	
	};

	
template<class _Ty,
	bool>
	struct _Refwrap_result2_helper
		: _Refwrap_result1<_Ty, (sizeof (::std:: tr1::_Has_result_and_arg_type<_Ty>((_Ty *)0)) == sizeof (::std:: tr1::_Yes))>
	{	
	};

template<class _Ty>
	struct _Refwrap_result2_helper<_Ty, true>
		: binary_function<typename _Ty::first_argument_type,
				typename _Ty::second_argument_type,
			typename _Ty::result_type>,
				_Refwrap_result1<_Ty, (sizeof (::std:: tr1::_Has_result_and_arg_type<_Ty>((_Ty *)0)) == sizeof (::std:: tr1::_Yes))>
	{	
	};

	
template<class _Ty,
	bool>
	struct _Refwrap_result2
		: _Refwrap_result1<_Ty, (sizeof (::std:: tr1::_Has_result_and_arg_type<_Ty>((_Ty *)0)) == sizeof (::std:: tr1::_Yes))>
	{	
	};

template<class _Ty>
	struct _Refwrap_result2<_Ty, true>
		: _Refwrap_result2_helper<_Ty, (sizeof ((_Has_binary_base<typename _Ty::first_argument_type, typename _Ty::second_argument_type, typename _Ty::result_type>((_Ty *)0))) == sizeof (::std:: tr1::_Yes))>
	{	
	};

	
template<class _Ty>
	struct _Refwrap_impl
		: _Call_wrapper<_Callable_obj<_Ty, true> >,
			_Refwrap_result2<_Ty, (sizeof (::std:: tr1::_Has_result_and_2arg_type<_Ty>((_Ty *)0)) == sizeof (::std:: tr1::_Yes))>
	{	
	_Refwrap_impl(_Ty& _Val)
		: _Call_wrapper<_Callable_obj<_Ty, true> >(_Val)
		{	
		}
	};

template<class _Rx,
	class _Arg0>
	struct _Refwrap_impl<_Rx _Arg0::*>
		: _Call_wrapper<_Callable_pmd<_Rx _Arg0::*const, _Arg0, false> >
	{	
	typedef _Rx _Arg0::*const _Fty;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty _Val)
		: _Call_wrapper<_Callable_pmd<_Fty, _Arg0, false> >(_Val)
		{	
		}
	};

template<class _Rx,
	class _Arg0>
	struct _Refwrap_impl<_Rx _Arg0::*const>
		: _Call_wrapper<_Callable_pmd<_Rx _Arg0::*, _Arg0, false> >
	{	
	typedef _Rx _Arg0::*_Fty;
	typedef _Rx result_type;
	_Refwrap_impl(_Fty _Val)
		: _Call_wrapper<_Callable_pmd<_Fty, _Arg0, false> >(_Val)
		{	
		}
	};

	

 
 #line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"





 

#line 9 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"





 
 #line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 
  
  
  
  
  
  

 

















































































#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  

 




#line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  
  
  
  
  
  
  
  
  
  
  
  
  

 




























#line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  

 

#line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  

 

#line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 265 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 267 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"



	
template<class _Rx
	     >
	struct _Refwrap_impl<_Rx __cdecl (    )>
		: _Call_wrapper<_Callable_fun<
			_Rx(__cdecl *)(    ), false> >

 


#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 17 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__cdecl * _Fty)(    );
	typedef _Rx result_type;

	_Refwrap_impl(_Fty _Val)
		: _Call_wrapper<_Callable_fun<_Fty, false> >(_Val)
		{	
		}
	};

 

















































 

























	
template<class _Rx
	     >
	struct _Refwrap_impl<_Rx(__cdecl *)(    )>
		: _Call_wrapper<_Callable_fun<
			_Rx(__cdecl *)(    ), true> >

 


#line 115 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 117 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__cdecl * _Fty)(    );
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_fun<_Fty, true> >(_Val)
		{	
		}
	};

template<class _Rx
	     >
	struct _Refwrap_impl<_Rx(__cdecl *const)(    )>
		: _Call_wrapper<_Callable_fun<
			_Rx(__cdecl *const)(    ), true> >

 


#line 138 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 140 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__cdecl *const _Fty)(    );
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_fun<_Fty, true> >(_Val)
		{	
		}
	};

 































































































 
















































	
 







































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1234 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"






#line 268 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"










#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 16 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"
 
#line 18 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"


#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 









































































#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  

 













#line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  

 

#line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  

 

#line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 265 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 267 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"



	
template<class _Rx
	, class _Arg0    >
	struct _Refwrap_impl<_Rx __cdecl (_Arg0    )>
		: _Call_wrapper<_Callable_fun<
			_Rx(__cdecl *)(_Arg0    ), false> >

 
			, unary_function<_Arg0, _Rx>

 

#line 17 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__cdecl * _Fty)(_Arg0    );
	typedef _Rx result_type;

	_Refwrap_impl(_Fty _Val)
		: _Call_wrapper<_Callable_fun<_Fty, false> >(_Val)
		{	
		}
	};

 

















































 

























	
template<class _Rx
	, class _Arg0    >
	struct _Refwrap_impl<_Rx(__cdecl *)(_Arg0    )>
		: _Call_wrapper<_Callable_fun<
			_Rx(__cdecl *)(_Arg0    ), true> >

 
			, unary_function<_Arg0, _Rx>

 

#line 117 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__cdecl * _Fty)(_Arg0    );
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_fun<_Fty, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0    >
	struct _Refwrap_impl<_Rx(__cdecl *const)(_Arg0    )>
		: _Call_wrapper<_Callable_fun<
			_Rx(__cdecl *const)(_Arg0    ), true> >

 
			, unary_function<_Arg0, _Rx>

 

#line 140 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__cdecl *const _Fty)(_Arg0    );
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_fun<_Fty, true> >(_Val)
		{	
		}
	};

 































































































 
















































	
 

template<class _Rx
	, class _Arg0    >
	struct _Refwrap_impl<_Rx(__thiscall _Arg0::*const)(  )>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__thiscall _Arg0::*const)(  ), _Arg0, true> >

  
			, unary_function<_Arg0 *const, _Rx>

  

#line 311 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__thiscall _Arg0::*const _Fty)(  );
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0    >
	struct _Refwrap_impl<_Rx(__thiscall _Arg0::*const)(  ) const>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__thiscall _Arg0::*const)(  ) const, _Arg0, true> >

  
			, unary_function<_Arg0 *const, _Rx>

  

#line 334 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__thiscall _Arg0::*const _Fty)(  ) const;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0    >
	struct _Refwrap_impl<_Rx(__thiscall _Arg0::*const)(  ) volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__thiscall _Arg0::*const)(  ) volatile, _Arg0, true> >

  
			, unary_function<_Arg0 *const, _Rx>

  

#line 357 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__thiscall _Arg0::*const _Fty)(  ) volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0    >
	struct _Refwrap_impl<_Rx(__thiscall _Arg0::*const)(  ) const volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__thiscall _Arg0::*const)(  ) const volatile, _Arg0, true> >

  
			, unary_function<_Arg0 *const, _Rx>

  

#line 380 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__thiscall _Arg0::*const _Fty)(  ) const volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0    >
	struct _Refwrap_impl<_Rx(__thiscall _Arg0::*)(  )>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__thiscall _Arg0::*)(  ), _Arg0, true> >

  
			, unary_function<_Arg0 *const, _Rx>

  

#line 403 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__thiscall _Arg0::* _Fty)(  );
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0    >
	struct _Refwrap_impl<_Rx(__thiscall _Arg0::*)(  ) const>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__thiscall _Arg0::*)(  ) const, _Arg0, true> >

  
			, unary_function<_Arg0 *const, _Rx>

  

#line 426 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__thiscall _Arg0::* _Fty)(  ) const;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0    >
	struct _Refwrap_impl<_Rx(__thiscall _Arg0::*)(  ) volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__thiscall _Arg0::*)(  ) volatile, _Arg0, true> >

  
			, unary_function<_Arg0 *const, _Rx>

  

#line 449 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__thiscall _Arg0::* _Fty)(  ) volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0    >
	struct _Refwrap_impl<_Rx(__thiscall _Arg0::*)(  ) const volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__thiscall _Arg0::*)(  ) const volatile, _Arg0, true> >

  
			, unary_function<_Arg0 *const, _Rx>

  

#line 472 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__thiscall _Arg0::* _Fty)(  ) const volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};


 
















































































































































































































































































































































































































































































































































































 



























































































































































































 #line 1234 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"






#line 268 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"










#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 21 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

































































#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  

 

#line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 265 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 267 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"



	
template<class _Rx
	, class _Arg0 ,   class _Arg1>
	struct _Refwrap_impl<_Rx __cdecl (_Arg0 ,   _Arg1)>
		: _Call_wrapper<_Callable_fun<
			_Rx(__cdecl *)(_Arg0 ,   _Arg1), false> >

 


#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"
			, binary_function<_Arg0, _Arg1, _Rx>
 #line 17 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__cdecl * _Fty)(_Arg0 ,   _Arg1);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty _Val)
		: _Call_wrapper<_Callable_fun<_Fty, false> >(_Val)
		{	
		}
	};

 

















































 

























	
template<class _Rx
	, class _Arg0 ,   class _Arg1>
	struct _Refwrap_impl<_Rx(__cdecl *)(_Arg0 ,   _Arg1)>
		: _Call_wrapper<_Callable_fun<
			_Rx(__cdecl *)(_Arg0 ,   _Arg1), true> >

 


#line 115 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"
			, binary_function<_Arg0, _Arg1, _Rx>
 #line 117 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__cdecl * _Fty)(_Arg0 ,   _Arg1);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_fun<_Fty, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 ,   class _Arg1>
	struct _Refwrap_impl<_Rx(__cdecl *const)(_Arg0 ,   _Arg1)>
		: _Call_wrapper<_Callable_fun<
			_Rx(__cdecl *const)(_Arg0 ,   _Arg1), true> >

 


#line 138 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"
			, binary_function<_Arg0, _Arg1, _Rx>
 #line 140 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__cdecl *const _Fty)(_Arg0 ,   _Arg1);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_fun<_Fty, true> >(_Val)
		{	
		}
	};

 































































































 
















































	
 

template<class _Rx
	, class _Arg0 ,   class _Arg1>
	struct _Refwrap_impl<_Rx(__thiscall _Arg0::*const)(  _Arg1)>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__thiscall _Arg0::*const)(  _Arg1), _Arg0, true> >

  


#line 309 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"
			, binary_function<_Arg0 *const, _Arg1, _Rx>
  #line 311 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__thiscall _Arg0::*const _Fty)(  _Arg1);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 ,   class _Arg1>
	struct _Refwrap_impl<_Rx(__thiscall _Arg0::*const)(  _Arg1) const>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__thiscall _Arg0::*const)(  _Arg1) const, _Arg0, true> >

  


#line 332 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"
			, binary_function<_Arg0 *const, _Arg1, _Rx>
  #line 334 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__thiscall _Arg0::*const _Fty)(  _Arg1) const;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 ,   class _Arg1>
	struct _Refwrap_impl<_Rx(__thiscall _Arg0::*const)(  _Arg1) volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__thiscall _Arg0::*const)(  _Arg1) volatile, _Arg0, true> >

  


#line 355 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"
			, binary_function<_Arg0 *const, _Arg1, _Rx>
  #line 357 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__thiscall _Arg0::*const _Fty)(  _Arg1) volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 ,   class _Arg1>
	struct _Refwrap_impl<_Rx(__thiscall _Arg0::*const)(  _Arg1) const volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__thiscall _Arg0::*const)(  _Arg1) const volatile, _Arg0, true> >

  


#line 378 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"
			, binary_function<_Arg0 *const, _Arg1, _Rx>
  #line 380 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__thiscall _Arg0::*const _Fty)(  _Arg1) const volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 ,   class _Arg1>
	struct _Refwrap_impl<_Rx(__thiscall _Arg0::*)(  _Arg1)>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__thiscall _Arg0::*)(  _Arg1), _Arg0, true> >

  


#line 401 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"
			, binary_function<_Arg0 *const, _Arg1, _Rx>
  #line 403 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__thiscall _Arg0::* _Fty)(  _Arg1);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 ,   class _Arg1>
	struct _Refwrap_impl<_Rx(__thiscall _Arg0::*)(  _Arg1) const>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__thiscall _Arg0::*)(  _Arg1) const, _Arg0, true> >

  


#line 424 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"
			, binary_function<_Arg0 *const, _Arg1, _Rx>
  #line 426 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__thiscall _Arg0::* _Fty)(  _Arg1) const;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 ,   class _Arg1>
	struct _Refwrap_impl<_Rx(__thiscall _Arg0::*)(  _Arg1) volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__thiscall _Arg0::*)(  _Arg1) volatile, _Arg0, true> >

  


#line 447 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"
			, binary_function<_Arg0 *const, _Arg1, _Rx>
  #line 449 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__thiscall _Arg0::* _Fty)(  _Arg1) volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 ,   class _Arg1>
	struct _Refwrap_impl<_Rx(__thiscall _Arg0::*)(  _Arg1) const volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__thiscall _Arg0::*)(  _Arg1) const volatile, _Arg0, true> >

  


#line 470 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"
			, binary_function<_Arg0 *const, _Arg1, _Rx>
  #line 472 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__thiscall _Arg0::* _Fty)(  _Arg1) const volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};


 
















































































































































































































































































































































































































































































































































































 



























































































































































































 #line 1234 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"






#line 268 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"










#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 25 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

























































#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 265 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 267 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"



	
template<class _Rx
	, class _Arg0 , class _Arg1 , class _Arg2>
	struct _Refwrap_impl<_Rx __cdecl (_Arg0 , _Arg1 , _Arg2)>
		: _Call_wrapper<_Callable_fun<
			_Rx(__cdecl *)(_Arg0 , _Arg1 , _Arg2), false> >

 


#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 17 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__cdecl * _Fty)(_Arg0 , _Arg1 , _Arg2);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty _Val)
		: _Call_wrapper<_Callable_fun<_Fty, false> >(_Val)
		{	
		}
	};

 

















































 

























	
template<class _Rx
	, class _Arg0 , class _Arg1 , class _Arg2>
	struct _Refwrap_impl<_Rx(__cdecl *)(_Arg0 , _Arg1 , _Arg2)>
		: _Call_wrapper<_Callable_fun<
			_Rx(__cdecl *)(_Arg0 , _Arg1 , _Arg2), true> >

 


#line 115 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 117 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__cdecl * _Fty)(_Arg0 , _Arg1 , _Arg2);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_fun<_Fty, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1 , class _Arg2>
	struct _Refwrap_impl<_Rx(__cdecl *const)(_Arg0 , _Arg1 , _Arg2)>
		: _Call_wrapper<_Callable_fun<
			_Rx(__cdecl *const)(_Arg0 , _Arg1 , _Arg2), true> >

 


#line 138 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 140 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__cdecl *const _Fty)(_Arg0 , _Arg1 , _Arg2);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_fun<_Fty, true> >(_Val)
		{	
		}
	};

 































































































 
















































	
 

template<class _Rx
	, class _Arg0 , class _Arg1 , class _Arg2>
	struct _Refwrap_impl<_Rx(__thiscall _Arg0::*const)(_Arg1 , _Arg2)>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__thiscall _Arg0::*const)(_Arg1 , _Arg2), _Arg0, true> >

  


#line 309 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 311 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__thiscall _Arg0::*const _Fty)(_Arg1 , _Arg2);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1 , class _Arg2>
	struct _Refwrap_impl<_Rx(__thiscall _Arg0::*const)(_Arg1 , _Arg2) const>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__thiscall _Arg0::*const)(_Arg1 , _Arg2) const, _Arg0, true> >

  


#line 332 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 334 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__thiscall _Arg0::*const _Fty)(_Arg1 , _Arg2) const;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1 , class _Arg2>
	struct _Refwrap_impl<_Rx(__thiscall _Arg0::*const)(_Arg1 , _Arg2) volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__thiscall _Arg0::*const)(_Arg1 , _Arg2) volatile, _Arg0, true> >

  


#line 355 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 357 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__thiscall _Arg0::*const _Fty)(_Arg1 , _Arg2) volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1 , class _Arg2>
	struct _Refwrap_impl<_Rx(__thiscall _Arg0::*const)(_Arg1 , _Arg2) const volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__thiscall _Arg0::*const)(_Arg1 , _Arg2) const volatile, _Arg0, true> >

  


#line 378 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 380 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__thiscall _Arg0::*const _Fty)(_Arg1 , _Arg2) const volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1 , class _Arg2>
	struct _Refwrap_impl<_Rx(__thiscall _Arg0::*)(_Arg1 , _Arg2)>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__thiscall _Arg0::*)(_Arg1 , _Arg2), _Arg0, true> >

  


#line 401 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 403 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__thiscall _Arg0::* _Fty)(_Arg1 , _Arg2);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1 , class _Arg2>
	struct _Refwrap_impl<_Rx(__thiscall _Arg0::*)(_Arg1 , _Arg2) const>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__thiscall _Arg0::*)(_Arg1 , _Arg2) const, _Arg0, true> >

  


#line 424 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 426 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__thiscall _Arg0::* _Fty)(_Arg1 , _Arg2) const;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1 , class _Arg2>
	struct _Refwrap_impl<_Rx(__thiscall _Arg0::*)(_Arg1 , _Arg2) volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__thiscall _Arg0::*)(_Arg1 , _Arg2) volatile, _Arg0, true> >

  


#line 447 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 449 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__thiscall _Arg0::* _Fty)(_Arg1 , _Arg2) volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1 , class _Arg2>
	struct _Refwrap_impl<_Rx(__thiscall _Arg0::*)(_Arg1 , _Arg2) const volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__thiscall _Arg0::*)(_Arg1 , _Arg2) const volatile, _Arg0, true> >

  


#line 470 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 472 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__thiscall _Arg0::* _Fty)(_Arg1 , _Arg2) const volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};


 
















































































































































































































































































































































































































































































































































































 



























































































































































































 #line 1234 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"






#line 268 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"










#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 29 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

















































#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 265 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 267 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"



	
template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2 , class _Arg3>
	struct _Refwrap_impl<_Rx __cdecl (_Arg0 , _Arg1, _Arg2 , _Arg3)>
		: _Call_wrapper<_Callable_fun<
			_Rx(__cdecl *)(_Arg0 , _Arg1, _Arg2 , _Arg3), false> >

 


#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 17 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__cdecl * _Fty)(_Arg0 , _Arg1, _Arg2 , _Arg3);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty _Val)
		: _Call_wrapper<_Callable_fun<_Fty, false> >(_Val)
		{	
		}
	};

 

















































 

























	
template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2 , class _Arg3>
	struct _Refwrap_impl<_Rx(__cdecl *)(_Arg0 , _Arg1, _Arg2 , _Arg3)>
		: _Call_wrapper<_Callable_fun<
			_Rx(__cdecl *)(_Arg0 , _Arg1, _Arg2 , _Arg3), true> >

 


#line 115 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 117 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__cdecl * _Fty)(_Arg0 , _Arg1, _Arg2 , _Arg3);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_fun<_Fty, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2 , class _Arg3>
	struct _Refwrap_impl<_Rx(__cdecl *const)(_Arg0 , _Arg1, _Arg2 , _Arg3)>
		: _Call_wrapper<_Callable_fun<
			_Rx(__cdecl *const)(_Arg0 , _Arg1, _Arg2 , _Arg3), true> >

 


#line 138 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 140 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__cdecl *const _Fty)(_Arg0 , _Arg1, _Arg2 , _Arg3);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_fun<_Fty, true> >(_Val)
		{	
		}
	};

 































































































 
















































	
 

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2 , class _Arg3>
	struct _Refwrap_impl<_Rx(__thiscall _Arg0::*const)(_Arg1, _Arg2 , _Arg3)>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__thiscall _Arg0::*const)(_Arg1, _Arg2 , _Arg3), _Arg0, true> >

  


#line 309 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 311 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__thiscall _Arg0::*const _Fty)(_Arg1, _Arg2 , _Arg3);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2 , class _Arg3>
	struct _Refwrap_impl<_Rx(__thiscall _Arg0::*const)(_Arg1, _Arg2 , _Arg3) const>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__thiscall _Arg0::*const)(_Arg1, _Arg2 , _Arg3) const, _Arg0, true> >

  


#line 332 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 334 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__thiscall _Arg0::*const _Fty)(_Arg1, _Arg2 , _Arg3) const;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2 , class _Arg3>
	struct _Refwrap_impl<_Rx(__thiscall _Arg0::*const)(_Arg1, _Arg2 , _Arg3) volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__thiscall _Arg0::*const)(_Arg1, _Arg2 , _Arg3) volatile, _Arg0, true> >

  


#line 355 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 357 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__thiscall _Arg0::*const _Fty)(_Arg1, _Arg2 , _Arg3) volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2 , class _Arg3>
	struct _Refwrap_impl<_Rx(__thiscall _Arg0::*const)(_Arg1, _Arg2 , _Arg3) const volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__thiscall _Arg0::*const)(_Arg1, _Arg2 , _Arg3) const volatile, _Arg0, true> >

  


#line 378 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 380 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__thiscall _Arg0::*const _Fty)(_Arg1, _Arg2 , _Arg3) const volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2 , class _Arg3>
	struct _Refwrap_impl<_Rx(__thiscall _Arg0::*)(_Arg1, _Arg2 , _Arg3)>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__thiscall _Arg0::*)(_Arg1, _Arg2 , _Arg3), _Arg0, true> >

  


#line 401 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 403 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__thiscall _Arg0::* _Fty)(_Arg1, _Arg2 , _Arg3);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2 , class _Arg3>
	struct _Refwrap_impl<_Rx(__thiscall _Arg0::*)(_Arg1, _Arg2 , _Arg3) const>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__thiscall _Arg0::*)(_Arg1, _Arg2 , _Arg3) const, _Arg0, true> >

  


#line 424 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 426 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__thiscall _Arg0::* _Fty)(_Arg1, _Arg2 , _Arg3) const;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2 , class _Arg3>
	struct _Refwrap_impl<_Rx(__thiscall _Arg0::*)(_Arg1, _Arg2 , _Arg3) volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__thiscall _Arg0::*)(_Arg1, _Arg2 , _Arg3) volatile, _Arg0, true> >

  


#line 447 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 449 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__thiscall _Arg0::* _Fty)(_Arg1, _Arg2 , _Arg3) volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2 , class _Arg3>
	struct _Refwrap_impl<_Rx(__thiscall _Arg0::*)(_Arg1, _Arg2 , _Arg3) const volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__thiscall _Arg0::*)(_Arg1, _Arg2 , _Arg3) const volatile, _Arg0, true> >

  


#line 470 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 472 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__thiscall _Arg0::* _Fty)(_Arg1, _Arg2 , _Arg3) const volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};


 
















































































































































































































































































































































































































































































































































































 



























































































































































































 #line 1234 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"






#line 268 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"










#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 33 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 47 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 









































#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 265 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 267 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"



	
template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4>
	struct _Refwrap_impl<_Rx __cdecl (_Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4)>
		: _Call_wrapper<_Callable_fun<
			_Rx(__cdecl *)(_Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4), false> >

 


#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 17 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__cdecl * _Fty)(_Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty _Val)
		: _Call_wrapper<_Callable_fun<_Fty, false> >(_Val)
		{	
		}
	};

 

















































 

























	
template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4>
	struct _Refwrap_impl<_Rx(__cdecl *)(_Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4)>
		: _Call_wrapper<_Callable_fun<
			_Rx(__cdecl *)(_Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4), true> >

 


#line 115 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 117 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__cdecl * _Fty)(_Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_fun<_Fty, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4>
	struct _Refwrap_impl<_Rx(__cdecl *const)(_Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4)>
		: _Call_wrapper<_Callable_fun<
			_Rx(__cdecl *const)(_Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4), true> >

 


#line 138 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 140 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__cdecl *const _Fty)(_Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_fun<_Fty, true> >(_Val)
		{	
		}
	};

 































































































 
















































	
 

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4>
	struct _Refwrap_impl<_Rx(__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3 , _Arg4)>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3 , _Arg4), _Arg0, true> >

  


#line 309 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 311 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__thiscall _Arg0::*const _Fty)(_Arg1, _Arg2, _Arg3 , _Arg4);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4>
	struct _Refwrap_impl<_Rx(__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3 , _Arg4) const>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3 , _Arg4) const, _Arg0, true> >

  


#line 332 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 334 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__thiscall _Arg0::*const _Fty)(_Arg1, _Arg2, _Arg3 , _Arg4) const;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4>
	struct _Refwrap_impl<_Rx(__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3 , _Arg4) volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3 , _Arg4) volatile, _Arg0, true> >

  


#line 355 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 357 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__thiscall _Arg0::*const _Fty)(_Arg1, _Arg2, _Arg3 , _Arg4) volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4>
	struct _Refwrap_impl<_Rx(__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3 , _Arg4) const volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3 , _Arg4) const volatile, _Arg0, true> >

  


#line 378 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 380 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__thiscall _Arg0::*const _Fty)(_Arg1, _Arg2, _Arg3 , _Arg4) const volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4>
	struct _Refwrap_impl<_Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3 , _Arg4)>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3 , _Arg4), _Arg0, true> >

  


#line 401 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 403 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__thiscall _Arg0::* _Fty)(_Arg1, _Arg2, _Arg3 , _Arg4);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4>
	struct _Refwrap_impl<_Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3 , _Arg4) const>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3 , _Arg4) const, _Arg0, true> >

  


#line 424 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 426 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__thiscall _Arg0::* _Fty)(_Arg1, _Arg2, _Arg3 , _Arg4) const;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4>
	struct _Refwrap_impl<_Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3 , _Arg4) volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3 , _Arg4) volatile, _Arg0, true> >

  


#line 447 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 449 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__thiscall _Arg0::* _Fty)(_Arg1, _Arg2, _Arg3 , _Arg4) volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4>
	struct _Refwrap_impl<_Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3 , _Arg4) const volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3 , _Arg4) const volatile, _Arg0, true> >

  


#line 470 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 472 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__thiscall _Arg0::* _Fty)(_Arg1, _Arg2, _Arg3 , _Arg4) const volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};


 
















































































































































































































































































































































































































































































































































































 



























































































































































































 #line 1234 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"






#line 268 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"










#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 37 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 47 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 55 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

































#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 265 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 267 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"



	
template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5>
	struct _Refwrap_impl<_Rx __cdecl (_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5)>
		: _Call_wrapper<_Callable_fun<
			_Rx(__cdecl *)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5), false> >

 


#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 17 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__cdecl * _Fty)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty _Val)
		: _Call_wrapper<_Callable_fun<_Fty, false> >(_Val)
		{	
		}
	};

 

















































 

























	
template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5>
	struct _Refwrap_impl<_Rx(__cdecl *)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5)>
		: _Call_wrapper<_Callable_fun<
			_Rx(__cdecl *)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5), true> >

 


#line 115 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 117 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__cdecl * _Fty)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_fun<_Fty, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5>
	struct _Refwrap_impl<_Rx(__cdecl *const)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5)>
		: _Call_wrapper<_Callable_fun<
			_Rx(__cdecl *const)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5), true> >

 


#line 138 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 140 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__cdecl *const _Fty)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_fun<_Fty, true> >(_Val)
		{	
		}
	};

 































































































 
















































	
 

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5>
	struct _Refwrap_impl<_Rx(__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5)>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5), _Arg0, true> >

  


#line 309 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 311 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__thiscall _Arg0::*const _Fty)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5>
	struct _Refwrap_impl<_Rx(__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) const>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) const, _Arg0, true> >

  


#line 332 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 334 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__thiscall _Arg0::*const _Fty)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) const;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5>
	struct _Refwrap_impl<_Rx(__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) volatile, _Arg0, true> >

  


#line 355 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 357 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__thiscall _Arg0::*const _Fty)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5>
	struct _Refwrap_impl<_Rx(__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) const volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) const volatile, _Arg0, true> >

  


#line 378 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 380 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__thiscall _Arg0::*const _Fty)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) const volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5>
	struct _Refwrap_impl<_Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5)>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5), _Arg0, true> >

  


#line 401 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 403 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__thiscall _Arg0::* _Fty)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5>
	struct _Refwrap_impl<_Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) const>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) const, _Arg0, true> >

  


#line 424 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 426 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__thiscall _Arg0::* _Fty)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) const;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5>
	struct _Refwrap_impl<_Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) volatile, _Arg0, true> >

  


#line 447 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 449 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__thiscall _Arg0::* _Fty)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5>
	struct _Refwrap_impl<_Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) const volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) const volatile, _Arg0, true> >

  


#line 470 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 472 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__thiscall _Arg0::* _Fty)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) const volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};


 
















































































































































































































































































































































































































































































































































































 



























































































































































































 #line 1234 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"






#line 268 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"










#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 41 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 47 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 55 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 63 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

























#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 265 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 267 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"



	
template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6>
	struct _Refwrap_impl<_Rx __cdecl (_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6)>
		: _Call_wrapper<_Callable_fun<
			_Rx(__cdecl *)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6), false> >

 


#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 17 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__cdecl * _Fty)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty _Val)
		: _Call_wrapper<_Callable_fun<_Fty, false> >(_Val)
		{	
		}
	};

 

















































 

























	
template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6>
	struct _Refwrap_impl<_Rx(__cdecl *)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6)>
		: _Call_wrapper<_Callable_fun<
			_Rx(__cdecl *)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6), true> >

 


#line 115 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 117 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__cdecl * _Fty)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_fun<_Fty, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6>
	struct _Refwrap_impl<_Rx(__cdecl *const)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6)>
		: _Call_wrapper<_Callable_fun<
			_Rx(__cdecl *const)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6), true> >

 


#line 138 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 140 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__cdecl *const _Fty)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_fun<_Fty, true> >(_Val)
		{	
		}
	};

 































































































 
















































	
 

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6>
	struct _Refwrap_impl<_Rx(__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6)>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6), _Arg0, true> >

  


#line 309 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 311 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__thiscall _Arg0::*const _Fty)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6>
	struct _Refwrap_impl<_Rx(__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) const>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) const, _Arg0, true> >

  


#line 332 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 334 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__thiscall _Arg0::*const _Fty)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) const;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6>
	struct _Refwrap_impl<_Rx(__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) volatile, _Arg0, true> >

  


#line 355 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 357 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__thiscall _Arg0::*const _Fty)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6>
	struct _Refwrap_impl<_Rx(__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) const volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) const volatile, _Arg0, true> >

  


#line 378 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 380 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__thiscall _Arg0::*const _Fty)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) const volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6>
	struct _Refwrap_impl<_Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6)>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6), _Arg0, true> >

  


#line 401 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 403 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__thiscall _Arg0::* _Fty)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6>
	struct _Refwrap_impl<_Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) const>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) const, _Arg0, true> >

  


#line 424 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 426 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__thiscall _Arg0::* _Fty)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) const;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6>
	struct _Refwrap_impl<_Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) volatile, _Arg0, true> >

  


#line 447 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 449 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__thiscall _Arg0::* _Fty)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6>
	struct _Refwrap_impl<_Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) const volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) const volatile, _Arg0, true> >

  


#line 470 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 472 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__thiscall _Arg0::* _Fty)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) const volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};


 
















































































































































































































































































































































































































































































































































































 



























































































































































































 #line 1234 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"






#line 268 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"










#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 45 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 47 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 55 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 63 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 71 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

















#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 265 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 267 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"



	
template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7>
	struct _Refwrap_impl<_Rx __cdecl (_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7)>
		: _Call_wrapper<_Callable_fun<
			_Rx(__cdecl *)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7), false> >

 


#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 17 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__cdecl * _Fty)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty _Val)
		: _Call_wrapper<_Callable_fun<_Fty, false> >(_Val)
		{	
		}
	};

 

















































 

























	
template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7>
	struct _Refwrap_impl<_Rx(__cdecl *)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7)>
		: _Call_wrapper<_Callable_fun<
			_Rx(__cdecl *)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7), true> >

 


#line 115 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 117 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__cdecl * _Fty)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_fun<_Fty, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7>
	struct _Refwrap_impl<_Rx(__cdecl *const)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7)>
		: _Call_wrapper<_Callable_fun<
			_Rx(__cdecl *const)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7), true> >

 


#line 138 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 140 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__cdecl *const _Fty)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_fun<_Fty, true> >(_Val)
		{	
		}
	};

 































































































 
















































	
 

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7>
	struct _Refwrap_impl<_Rx(__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7)>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7), _Arg0, true> >

  


#line 309 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 311 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__thiscall _Arg0::*const _Fty)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7>
	struct _Refwrap_impl<_Rx(__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) const>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) const, _Arg0, true> >

  


#line 332 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 334 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__thiscall _Arg0::*const _Fty)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) const;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7>
	struct _Refwrap_impl<_Rx(__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) volatile, _Arg0, true> >

  


#line 355 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 357 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__thiscall _Arg0::*const _Fty)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7>
	struct _Refwrap_impl<_Rx(__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) const volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) const volatile, _Arg0, true> >

  


#line 378 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 380 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__thiscall _Arg0::*const _Fty)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) const volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7>
	struct _Refwrap_impl<_Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7)>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7), _Arg0, true> >

  


#line 401 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 403 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__thiscall _Arg0::* _Fty)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7>
	struct _Refwrap_impl<_Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) const>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) const, _Arg0, true> >

  


#line 424 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 426 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__thiscall _Arg0::* _Fty)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) const;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7>
	struct _Refwrap_impl<_Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) volatile, _Arg0, true> >

  


#line 447 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 449 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__thiscall _Arg0::* _Fty)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7>
	struct _Refwrap_impl<_Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) const volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) const volatile, _Arg0, true> >

  


#line 470 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 472 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__thiscall _Arg0::* _Fty)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) const volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};


 
















































































































































































































































































































































































































































































































































































 



























































































































































































 #line 1234 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"






#line 268 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"










#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 49 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 47 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 55 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 63 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 71 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 79 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 









#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 265 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 267 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"



	
template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8>
	struct _Refwrap_impl<_Rx __cdecl (_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8)>
		: _Call_wrapper<_Callable_fun<
			_Rx(__cdecl *)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8), false> >

 


#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 17 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__cdecl * _Fty)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty _Val)
		: _Call_wrapper<_Callable_fun<_Fty, false> >(_Val)
		{	
		}
	};

 

















































 

























	
template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8>
	struct _Refwrap_impl<_Rx(__cdecl *)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8)>
		: _Call_wrapper<_Callable_fun<
			_Rx(__cdecl *)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8), true> >

 


#line 115 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 117 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__cdecl * _Fty)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_fun<_Fty, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8>
	struct _Refwrap_impl<_Rx(__cdecl *const)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8)>
		: _Call_wrapper<_Callable_fun<
			_Rx(__cdecl *const)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8), true> >

 


#line 138 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 140 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__cdecl *const _Fty)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_fun<_Fty, true> >(_Val)
		{	
		}
	};

 































































































 
















































	
 

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8>
	struct _Refwrap_impl<_Rx(__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8)>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8), _Arg0, true> >

  


#line 309 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 311 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__thiscall _Arg0::*const _Fty)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8>
	struct _Refwrap_impl<_Rx(__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) const>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) const, _Arg0, true> >

  


#line 332 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 334 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__thiscall _Arg0::*const _Fty)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) const;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8>
	struct _Refwrap_impl<_Rx(__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) volatile, _Arg0, true> >

  


#line 355 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 357 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__thiscall _Arg0::*const _Fty)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8>
	struct _Refwrap_impl<_Rx(__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) const volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) const volatile, _Arg0, true> >

  


#line 378 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 380 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__thiscall _Arg0::*const _Fty)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) const volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8>
	struct _Refwrap_impl<_Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8)>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8), _Arg0, true> >

  


#line 401 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 403 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__thiscall _Arg0::* _Fty)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8>
	struct _Refwrap_impl<_Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) const>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) const, _Arg0, true> >

  


#line 424 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 426 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__thiscall _Arg0::* _Fty)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) const;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8>
	struct _Refwrap_impl<_Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) volatile, _Arg0, true> >

  


#line 447 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 449 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__thiscall _Arg0::* _Fty)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8>
	struct _Refwrap_impl<_Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) const volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) const volatile, _Arg0, true> >

  


#line 470 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 472 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__thiscall _Arg0::* _Fty)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) const volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};


 
















































































































































































































































































































































































































































































































































































 



























































































































































































 #line 1234 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"






#line 268 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"










#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 53 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 47 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 55 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 63 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 71 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 79 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 87 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  

 

#line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 265 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 267 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"



	
template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9>
	struct _Refwrap_impl<_Rx __cdecl (_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9)>
		: _Call_wrapper<_Callable_fun<
			_Rx(__cdecl *)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9), false> >

 


#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 17 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__cdecl * _Fty)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty _Val)
		: _Call_wrapper<_Callable_fun<_Fty, false> >(_Val)
		{	
		}
	};

 

















































 

























	
template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9>
	struct _Refwrap_impl<_Rx(__cdecl *)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9)>
		: _Call_wrapper<_Callable_fun<
			_Rx(__cdecl *)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9), true> >

 


#line 115 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 117 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__cdecl * _Fty)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_fun<_Fty, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9>
	struct _Refwrap_impl<_Rx(__cdecl *const)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9)>
		: _Call_wrapper<_Callable_fun<
			_Rx(__cdecl *const)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9), true> >

 


#line 138 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 140 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__cdecl *const _Fty)(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_fun<_Fty, true> >(_Val)
		{	
		}
	};

 































































































 
















































	
 

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9>
	struct _Refwrap_impl<_Rx(__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9)>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9), _Arg0, true> >

  


#line 309 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 311 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__thiscall _Arg0::*const _Fty)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9>
	struct _Refwrap_impl<_Rx(__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) const>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) const, _Arg0, true> >

  


#line 332 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 334 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__thiscall _Arg0::*const _Fty)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) const;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9>
	struct _Refwrap_impl<_Rx(__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) volatile, _Arg0, true> >

  


#line 355 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 357 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__thiscall _Arg0::*const _Fty)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9>
	struct _Refwrap_impl<_Rx(__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) const volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__thiscall _Arg0::*const)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) const volatile, _Arg0, true> >

  


#line 378 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 380 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__thiscall _Arg0::*const _Fty)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) const volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9>
	struct _Refwrap_impl<_Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9)>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9), _Arg0, true> >

  


#line 401 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 403 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__thiscall _Arg0::* _Fty)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9);
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9>
	struct _Refwrap_impl<_Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) const>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) const, _Arg0, true> >

  


#line 424 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 426 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__thiscall _Arg0::* _Fty)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) const;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9>
	struct _Refwrap_impl<_Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) volatile, _Arg0, true> >

  


#line 447 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 449 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__thiscall _Arg0::* _Fty)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};

template<class _Rx
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9>
	struct _Refwrap_impl<_Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) const volatile>
		: _Call_wrapper<_Callable_pmf<
			_Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) const volatile, _Arg0, true> >

  


#line 470 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

#line 472 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"

	{	
	typedef _Rx(__thiscall _Arg0::* _Fty)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) const volatile;
	typedef _Rx result_type;

	_Refwrap_impl(_Fty& _Val)
		: _Call_wrapper<_Callable_pmf<_Fty, _Arg0, true> >(_Val)
		{	
		}
	};


 
















































































































































































































































































































































































































































































































































































 



























































































































































































 #line 1234 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxrefwrap"






#line 268 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"










#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 57 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"




















#line 411 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xrefwrap"

	
template<class _Ty>
	class reference_wrapper
	: public _Refwrap_impl<_Ty>
	{	
public:
	typedef _Refwrap_impl<_Ty> _MyBase;
	typedef _Ty type;

	reference_wrapper(_Ty& _Val)
		: _MyBase(_Val)
		{	
		}

	operator _Ty&() const
		{	
		return (this->_Get());
		}

	_Ty& get() const
		{	
		return (this->_Get());
		}
	};

	
template<class _Ty>
	reference_wrapper<_Ty> ref(_Ty& _Val)
	{	
	return (reference_wrapper<_Ty>(_Val));
	}

template<class _Ty>
	void ref(const _Ty&& _Val);	

template<class _Ty>
	reference_wrapper<_Ty> ref(reference_wrapper<_Ty> _Val)
	{	
	return (_Val);
	}

template<class _Ty>
	reference_wrapper<const _Ty> cref(const _Ty& _Val)
	{	
	return (reference_wrapper<const _Ty>(_Val));
	}




template<class _Ty>
	reference_wrapper<const _Ty> cref(reference_wrapper<const _Ty> _Val)
	{	
	return (_Val);
	}
	}	
}

 #pragma warning(pop)
 #pragma pack(pop)

#line 474 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xrefwrap"
#line 475 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xrefwrap"





#line 18 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\functional"

 #pragma warning(disable: 4100 4180 4244)

namespace std {
	namespace tr1 {	

	
template<class _Rx,
	class _Arg0>
	_Call_wrapper<_Callable_pmd<_Rx _Arg0::*const, _Arg0> >
		mem_fn(_Rx _Arg0::*const _Pmd)
	{	
	return (_Call_wrapper<_Callable_pmd<_Rx _Arg0::*const, _Arg0> >(_Pmd));
	}


 
 
 #line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"





 

#line 9 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"


 





#line 18 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"


#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 









































































#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  

 













#line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  

 

#line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  

 

#line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxmem_fn"





	
template<class _Rx,
	class _Pmf, class _Arg0    >
	class _Mem_fn1
		: public _Call_wrapper<_Callable_pmf<_Pmf, _Arg0> >
 
			, public ::std:: unary_function<_Arg0*, _Rx>

 

#line 17 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxmem_fn"

	{	
public:
	typedef _Rx result_type;

	_Mem_fn1(_Pmf _Fx)
		: _Call_wrapper<_Callable_pmf<_Pmf, _Arg0> >(_Fx)
		{	
		}
	};

	
template<class _Rx,
	class _Arg0    >
	_Mem_fn1<_Rx, _Rx(__thiscall _Arg0::*)(  ), _Arg0    >
		mem_fn(_Rx(__thiscall _Arg0::*_Pm)(  ))
	{	
	return (_Mem_fn1<_Rx, _Rx(__thiscall _Arg0::*)(  ),
		_Arg0    >(_Pm));
	}

 































 










	
template<class _Rx,
	class _Arg0    >
	_Mem_fn1<_Rx, _Rx(__thiscall _Arg0::*)(  ) const,
		const _Arg0    >
		mem_fn(_Rx(__thiscall _Arg0::*_Pm)(  ) const)
	{	
	return (_Mem_fn1<_Rx, _Rx(__thiscall _Arg0::*)(  ) const,
		const _Arg0    >(_Pm));
	}

 


































 











	
template<class _Rx,
	class _Arg0    >
	_Mem_fn1<_Rx, _Rx(__thiscall _Arg0::*)(  ) volatile,
		volatile _Arg0    >
		mem_fn(_Rx(__thiscall _Arg0::*_Pm)(  ) volatile)
	{	
	return (_Mem_fn1<_Rx, _Rx(__thiscall _Arg0::*)(  ) volatile,
		volatile _Arg0    >(_Pm));
	}

 


































 











	
template<class _Rx,
	class _Arg0    >
	_Mem_fn1<_Rx, _Rx(__thiscall _Arg0::*)(  ) const volatile,
		const volatile _Arg0    >
		mem_fn(_Rx(__thiscall _Arg0::*_Pm)(  ) const volatile)
	{	
	return (_Mem_fn1<_Rx, _Rx(__thiscall _Arg0::*)(  ) const volatile,
		const volatile _Arg0    >(_Pm));
	}

 


































 

















#line 264 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 21 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

































































#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  

 

#line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxmem_fn"





	
template<class _Rx,
	class _Pmf, class _Arg0 ,   class _Arg1>
	class _Mem_fn2
		: public _Call_wrapper<_Callable_pmf<_Pmf, _Arg0> >
 


#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxmem_fn"
			, public ::std:: binary_function<_Arg0*, _Arg1, _Rx>
 #line 17 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxmem_fn"

	{	
public:
	typedef _Rx result_type;

	_Mem_fn2(_Pmf _Fx)
		: _Call_wrapper<_Callable_pmf<_Pmf, _Arg0> >(_Fx)
		{	
		}
	};

	
template<class _Rx,
	class _Arg0 ,   class _Arg1>
	_Mem_fn2<_Rx, _Rx(__thiscall _Arg0::*)(  _Arg1), _Arg0 ,   _Arg1>
		mem_fn(_Rx(__thiscall _Arg0::*_Pm)(  _Arg1))
	{	
	return (_Mem_fn2<_Rx, _Rx(__thiscall _Arg0::*)(  _Arg1),
		_Arg0 ,   _Arg1>(_Pm));
	}

 































 










	
template<class _Rx,
	class _Arg0 ,   class _Arg1>
	_Mem_fn2<_Rx, _Rx(__thiscall _Arg0::*)(  _Arg1) const,
		const _Arg0 ,   _Arg1>
		mem_fn(_Rx(__thiscall _Arg0::*_Pm)(  _Arg1) const)
	{	
	return (_Mem_fn2<_Rx, _Rx(__thiscall _Arg0::*)(  _Arg1) const,
		const _Arg0 ,   _Arg1>(_Pm));
	}

 


































 











	
template<class _Rx,
	class _Arg0 ,   class _Arg1>
	_Mem_fn2<_Rx, _Rx(__thiscall _Arg0::*)(  _Arg1) volatile,
		volatile _Arg0 ,   _Arg1>
		mem_fn(_Rx(__thiscall _Arg0::*_Pm)(  _Arg1) volatile)
	{	
	return (_Mem_fn2<_Rx, _Rx(__thiscall _Arg0::*)(  _Arg1) volatile,
		volatile _Arg0 ,   _Arg1>(_Pm));
	}

 


































 











	
template<class _Rx,
	class _Arg0 ,   class _Arg1>
	_Mem_fn2<_Rx, _Rx(__thiscall _Arg0::*)(  _Arg1) const volatile,
		const volatile _Arg0 ,   _Arg1>
		mem_fn(_Rx(__thiscall _Arg0::*_Pm)(  _Arg1) const volatile)
	{	
	return (_Mem_fn2<_Rx, _Rx(__thiscall _Arg0::*)(  _Arg1) const volatile,
		const volatile _Arg0 ,   _Arg1>(_Pm));
	}

 


































 

















#line 264 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 25 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

























































#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxmem_fn"





	
template<class _Rx,
	class _Pmf, class _Arg0 , class _Arg1 , class _Arg2>
	class _Mem_fn3
		: public _Call_wrapper<_Callable_pmf<_Pmf, _Arg0> >
 


#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxmem_fn"

#line 17 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxmem_fn"

	{	
public:
	typedef _Rx result_type;

	_Mem_fn3(_Pmf _Fx)
		: _Call_wrapper<_Callable_pmf<_Pmf, _Arg0> >(_Fx)
		{	
		}
	};

	
template<class _Rx,
	class _Arg0 , class _Arg1 , class _Arg2>
	_Mem_fn3<_Rx, _Rx(__thiscall _Arg0::*)(_Arg1 , _Arg2), _Arg0 , _Arg1 , _Arg2>
		mem_fn(_Rx(__thiscall _Arg0::*_Pm)(_Arg1 , _Arg2))
	{	
	return (_Mem_fn3<_Rx, _Rx(__thiscall _Arg0::*)(_Arg1 , _Arg2),
		_Arg0 , _Arg1 , _Arg2>(_Pm));
	}

 































 










	
template<class _Rx,
	class _Arg0 , class _Arg1 , class _Arg2>
	_Mem_fn3<_Rx, _Rx(__thiscall _Arg0::*)(_Arg1 , _Arg2) const,
		const _Arg0 , _Arg1 , _Arg2>
		mem_fn(_Rx(__thiscall _Arg0::*_Pm)(_Arg1 , _Arg2) const)
	{	
	return (_Mem_fn3<_Rx, _Rx(__thiscall _Arg0::*)(_Arg1 , _Arg2) const,
		const _Arg0 , _Arg1 , _Arg2>(_Pm));
	}

 


































 











	
template<class _Rx,
	class _Arg0 , class _Arg1 , class _Arg2>
	_Mem_fn3<_Rx, _Rx(__thiscall _Arg0::*)(_Arg1 , _Arg2) volatile,
		volatile _Arg0 , _Arg1 , _Arg2>
		mem_fn(_Rx(__thiscall _Arg0::*_Pm)(_Arg1 , _Arg2) volatile)
	{	
	return (_Mem_fn3<_Rx, _Rx(__thiscall _Arg0::*)(_Arg1 , _Arg2) volatile,
		volatile _Arg0 , _Arg1 , _Arg2>(_Pm));
	}

 


































 











	
template<class _Rx,
	class _Arg0 , class _Arg1 , class _Arg2>
	_Mem_fn3<_Rx, _Rx(__thiscall _Arg0::*)(_Arg1 , _Arg2) const volatile,
		const volatile _Arg0 , _Arg1 , _Arg2>
		mem_fn(_Rx(__thiscall _Arg0::*_Pm)(_Arg1 , _Arg2) const volatile)
	{	
	return (_Mem_fn3<_Rx, _Rx(__thiscall _Arg0::*)(_Arg1 , _Arg2) const volatile,
		const volatile _Arg0 , _Arg1 , _Arg2>(_Pm));
	}

 


































 

















#line 264 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 29 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

















































#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxmem_fn"





	
template<class _Rx,
	class _Pmf, class _Arg0 , class _Arg1, class _Arg2 , class _Arg3>
	class _Mem_fn4
		: public _Call_wrapper<_Callable_pmf<_Pmf, _Arg0> >
 


#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxmem_fn"

#line 17 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxmem_fn"

	{	
public:
	typedef _Rx result_type;

	_Mem_fn4(_Pmf _Fx)
		: _Call_wrapper<_Callable_pmf<_Pmf, _Arg0> >(_Fx)
		{	
		}
	};

	
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2 , class _Arg3>
	_Mem_fn4<_Rx, _Rx(__thiscall _Arg0::*)(_Arg1, _Arg2 , _Arg3), _Arg0 , _Arg1, _Arg2 , _Arg3>
		mem_fn(_Rx(__thiscall _Arg0::*_Pm)(_Arg1, _Arg2 , _Arg3))
	{	
	return (_Mem_fn4<_Rx, _Rx(__thiscall _Arg0::*)(_Arg1, _Arg2 , _Arg3),
		_Arg0 , _Arg1, _Arg2 , _Arg3>(_Pm));
	}

 































 










	
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2 , class _Arg3>
	_Mem_fn4<_Rx, _Rx(__thiscall _Arg0::*)(_Arg1, _Arg2 , _Arg3) const,
		const _Arg0 , _Arg1, _Arg2 , _Arg3>
		mem_fn(_Rx(__thiscall _Arg0::*_Pm)(_Arg1, _Arg2 , _Arg3) const)
	{	
	return (_Mem_fn4<_Rx, _Rx(__thiscall _Arg0::*)(_Arg1, _Arg2 , _Arg3) const,
		const _Arg0 , _Arg1, _Arg2 , _Arg3>(_Pm));
	}

 


































 











	
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2 , class _Arg3>
	_Mem_fn4<_Rx, _Rx(__thiscall _Arg0::*)(_Arg1, _Arg2 , _Arg3) volatile,
		volatile _Arg0 , _Arg1, _Arg2 , _Arg3>
		mem_fn(_Rx(__thiscall _Arg0::*_Pm)(_Arg1, _Arg2 , _Arg3) volatile)
	{	
	return (_Mem_fn4<_Rx, _Rx(__thiscall _Arg0::*)(_Arg1, _Arg2 , _Arg3) volatile,
		volatile _Arg0 , _Arg1, _Arg2 , _Arg3>(_Pm));
	}

 


































 











	
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2 , class _Arg3>
	_Mem_fn4<_Rx, _Rx(__thiscall _Arg0::*)(_Arg1, _Arg2 , _Arg3) const volatile,
		const volatile _Arg0 , _Arg1, _Arg2 , _Arg3>
		mem_fn(_Rx(__thiscall _Arg0::*_Pm)(_Arg1, _Arg2 , _Arg3) const volatile)
	{	
	return (_Mem_fn4<_Rx, _Rx(__thiscall _Arg0::*)(_Arg1, _Arg2 , _Arg3) const volatile,
		const volatile _Arg0 , _Arg1, _Arg2 , _Arg3>(_Pm));
	}

 


































 

















#line 264 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 33 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 47 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 









































#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxmem_fn"





	
template<class _Rx,
	class _Pmf, class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4>
	class _Mem_fn5
		: public _Call_wrapper<_Callable_pmf<_Pmf, _Arg0> >
 


#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxmem_fn"

#line 17 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxmem_fn"

	{	
public:
	typedef _Rx result_type;

	_Mem_fn5(_Pmf _Fx)
		: _Call_wrapper<_Callable_pmf<_Pmf, _Arg0> >(_Fx)
		{	
		}
	};

	
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4>
	_Mem_fn5<_Rx, _Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3 , _Arg4), _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4>
		mem_fn(_Rx(__thiscall _Arg0::*_Pm)(_Arg1, _Arg2, _Arg3 , _Arg4))
	{	
	return (_Mem_fn5<_Rx, _Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3 , _Arg4),
		_Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4>(_Pm));
	}

 































 










	
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4>
	_Mem_fn5<_Rx, _Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3 , _Arg4) const,
		const _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4>
		mem_fn(_Rx(__thiscall _Arg0::*_Pm)(_Arg1, _Arg2, _Arg3 , _Arg4) const)
	{	
	return (_Mem_fn5<_Rx, _Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3 , _Arg4) const,
		const _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4>(_Pm));
	}

 


































 











	
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4>
	_Mem_fn5<_Rx, _Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3 , _Arg4) volatile,
		volatile _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4>
		mem_fn(_Rx(__thiscall _Arg0::*_Pm)(_Arg1, _Arg2, _Arg3 , _Arg4) volatile)
	{	
	return (_Mem_fn5<_Rx, _Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3 , _Arg4) volatile,
		volatile _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4>(_Pm));
	}

 


































 











	
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4>
	_Mem_fn5<_Rx, _Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3 , _Arg4) const volatile,
		const volatile _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4>
		mem_fn(_Rx(__thiscall _Arg0::*_Pm)(_Arg1, _Arg2, _Arg3 , _Arg4) const volatile)
	{	
	return (_Mem_fn5<_Rx, _Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3 , _Arg4) const volatile,
		const volatile _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4>(_Pm));
	}

 


































 

















#line 264 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 37 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 47 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 55 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

































#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxmem_fn"





	
template<class _Rx,
	class _Pmf, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5>
	class _Mem_fn6
		: public _Call_wrapper<_Callable_pmf<_Pmf, _Arg0> >
 


#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxmem_fn"

#line 17 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxmem_fn"

	{	
public:
	typedef _Rx result_type;

	_Mem_fn6(_Pmf _Fx)
		: _Call_wrapper<_Callable_pmf<_Pmf, _Arg0> >(_Fx)
		{	
		}
	};

	
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5>
	_Mem_fn6<_Rx, _Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5), _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5>
		mem_fn(_Rx(__thiscall _Arg0::*_Pm)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5))
	{	
	return (_Mem_fn6<_Rx, _Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5),
		_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5>(_Pm));
	}

 































 










	
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5>
	_Mem_fn6<_Rx, _Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) const,
		const _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5>
		mem_fn(_Rx(__thiscall _Arg0::*_Pm)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) const)
	{	
	return (_Mem_fn6<_Rx, _Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) const,
		const _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5>(_Pm));
	}

 


































 











	
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5>
	_Mem_fn6<_Rx, _Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) volatile,
		volatile _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5>
		mem_fn(_Rx(__thiscall _Arg0::*_Pm)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) volatile)
	{	
	return (_Mem_fn6<_Rx, _Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) volatile,
		volatile _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5>(_Pm));
	}

 


































 











	
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5>
	_Mem_fn6<_Rx, _Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) const volatile,
		const volatile _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5>
		mem_fn(_Rx(__thiscall _Arg0::*_Pm)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) const volatile)
	{	
	return (_Mem_fn6<_Rx, _Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4 , _Arg5) const volatile,
		const volatile _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5>(_Pm));
	}

 


































 

















#line 264 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 41 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 47 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 55 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 63 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

























#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxmem_fn"





	
template<class _Rx,
	class _Pmf, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6>
	class _Mem_fn7
		: public _Call_wrapper<_Callable_pmf<_Pmf, _Arg0> >
 


#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxmem_fn"

#line 17 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxmem_fn"

	{	
public:
	typedef _Rx result_type;

	_Mem_fn7(_Pmf _Fx)
		: _Call_wrapper<_Callable_pmf<_Pmf, _Arg0> >(_Fx)
		{	
		}
	};

	
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6>
	_Mem_fn7<_Rx, _Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6), _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6>
		mem_fn(_Rx(__thiscall _Arg0::*_Pm)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6))
	{	
	return (_Mem_fn7<_Rx, _Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6),
		_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6>(_Pm));
	}

 































 










	
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6>
	_Mem_fn7<_Rx, _Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) const,
		const _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6>
		mem_fn(_Rx(__thiscall _Arg0::*_Pm)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) const)
	{	
	return (_Mem_fn7<_Rx, _Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) const,
		const _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6>(_Pm));
	}

 


































 











	
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6>
	_Mem_fn7<_Rx, _Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) volatile,
		volatile _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6>
		mem_fn(_Rx(__thiscall _Arg0::*_Pm)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) volatile)
	{	
	return (_Mem_fn7<_Rx, _Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) volatile,
		volatile _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6>(_Pm));
	}

 


































 











	
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6>
	_Mem_fn7<_Rx, _Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) const volatile,
		const volatile _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6>
		mem_fn(_Rx(__thiscall _Arg0::*_Pm)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) const volatile)
	{	
	return (_Mem_fn7<_Rx, _Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6) const volatile,
		const volatile _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6>(_Pm));
	}

 


































 

















#line 264 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 45 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 47 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 55 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 63 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 71 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

















#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxmem_fn"





	
template<class _Rx,
	class _Pmf, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7>
	class _Mem_fn8
		: public _Call_wrapper<_Callable_pmf<_Pmf, _Arg0> >
 


#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxmem_fn"

#line 17 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxmem_fn"

	{	
public:
	typedef _Rx result_type;

	_Mem_fn8(_Pmf _Fx)
		: _Call_wrapper<_Callable_pmf<_Pmf, _Arg0> >(_Fx)
		{	
		}
	};

	
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7>
	_Mem_fn8<_Rx, _Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7), _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7>
		mem_fn(_Rx(__thiscall _Arg0::*_Pm)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7))
	{	
	return (_Mem_fn8<_Rx, _Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7),
		_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7>(_Pm));
	}

 































 










	
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7>
	_Mem_fn8<_Rx, _Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) const,
		const _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7>
		mem_fn(_Rx(__thiscall _Arg0::*_Pm)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) const)
	{	
	return (_Mem_fn8<_Rx, _Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) const,
		const _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7>(_Pm));
	}

 


































 











	
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7>
	_Mem_fn8<_Rx, _Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) volatile,
		volatile _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7>
		mem_fn(_Rx(__thiscall _Arg0::*_Pm)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) volatile)
	{	
	return (_Mem_fn8<_Rx, _Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) volatile,
		volatile _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7>(_Pm));
	}

 


































 











	
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7>
	_Mem_fn8<_Rx, _Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) const volatile,
		const volatile _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7>
		mem_fn(_Rx(__thiscall _Arg0::*_Pm)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) const volatile)
	{	
	return (_Mem_fn8<_Rx, _Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7) const volatile,
		const volatile _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7>(_Pm));
	}

 


































 

















#line 264 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 49 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 47 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 55 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 63 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 71 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 79 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 









#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxmem_fn"





	
template<class _Rx,
	class _Pmf, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8>
	class _Mem_fn9
		: public _Call_wrapper<_Callable_pmf<_Pmf, _Arg0> >
 


#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxmem_fn"

#line 17 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxmem_fn"

	{	
public:
	typedef _Rx result_type;

	_Mem_fn9(_Pmf _Fx)
		: _Call_wrapper<_Callable_pmf<_Pmf, _Arg0> >(_Fx)
		{	
		}
	};

	
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8>
	_Mem_fn9<_Rx, _Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8), _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8>
		mem_fn(_Rx(__thiscall _Arg0::*_Pm)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8))
	{	
	return (_Mem_fn9<_Rx, _Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8),
		_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8>(_Pm));
	}

 































 










	
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8>
	_Mem_fn9<_Rx, _Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) const,
		const _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8>
		mem_fn(_Rx(__thiscall _Arg0::*_Pm)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) const)
	{	
	return (_Mem_fn9<_Rx, _Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) const,
		const _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8>(_Pm));
	}

 


































 











	
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8>
	_Mem_fn9<_Rx, _Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) volatile,
		volatile _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8>
		mem_fn(_Rx(__thiscall _Arg0::*_Pm)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) volatile)
	{	
	return (_Mem_fn9<_Rx, _Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) volatile,
		volatile _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8>(_Pm));
	}

 


































 











	
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8>
	_Mem_fn9<_Rx, _Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) const volatile,
		const volatile _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8>
		mem_fn(_Rx(__thiscall _Arg0::*_Pm)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) const volatile)
	{	
	return (_Mem_fn9<_Rx, _Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8) const volatile,
		const volatile _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8>(_Pm));
	}

 


































 

















#line 264 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 53 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 47 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 55 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 63 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 71 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 79 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 87 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  

 

#line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 263 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxmem_fn"





	
template<class _Rx,
	class _Pmf, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9>
	class _Mem_fn10
		: public _Call_wrapper<_Callable_pmf<_Pmf, _Arg0> >
 


#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxmem_fn"

#line 17 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxmem_fn"

	{	
public:
	typedef _Rx result_type;

	_Mem_fn10(_Pmf _Fx)
		: _Call_wrapper<_Callable_pmf<_Pmf, _Arg0> >(_Fx)
		{	
		}
	};

	
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9>
	_Mem_fn10<_Rx, _Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9), _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9>
		mem_fn(_Rx(__thiscall _Arg0::*_Pm)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9))
	{	
	return (_Mem_fn10<_Rx, _Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9),
		_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9>(_Pm));
	}

 































 










	
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9>
	_Mem_fn10<_Rx, _Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) const,
		const _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9>
		mem_fn(_Rx(__thiscall _Arg0::*_Pm)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) const)
	{	
	return (_Mem_fn10<_Rx, _Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) const,
		const _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9>(_Pm));
	}

 


































 











	
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9>
	_Mem_fn10<_Rx, _Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) volatile,
		volatile _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9>
		mem_fn(_Rx(__thiscall _Arg0::*_Pm)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) volatile)
	{	
	return (_Mem_fn10<_Rx, _Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) volatile,
		volatile _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9>(_Pm));
	}

 


































 











	
template<class _Rx,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9>
	_Mem_fn10<_Rx, _Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) const volatile,
		const volatile _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9>
		mem_fn(_Rx(__thiscall _Arg0::*_Pm)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) const volatile)
	{	
	return (_Mem_fn10<_Rx, _Rx(__thiscall _Arg0::*)(_Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9) const volatile,
		const volatile _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9>(_Pm));
	}

 


































 

















#line 264 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 57 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"




















#line 37 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\functional"



 
  

  
typedef ::std:: nullptr_t _Unutterable;

  

#line 50 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\functional"

 














#line 67 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\functional"

	
class bad_function_call
	: public exception
	{	
public:
	explicit bad_function_call(const char * = 0)
		{	
		}

	virtual const char * what() const throw ()
		{	
		return ("bad function call");
		}
	};

__declspec(dllimport) __declspec(noreturn) void __cdecl _Xfunc();

template<class _Tx>
	struct _Get_function_impl;

 
 #line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"





 

#line 9 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"





 
 #line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 
  
  
  
  
  
  

 

















































































#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  

 




#line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  
  
  
  
  
  
  
  
  
  
  
  
  

 




























#line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  

 

#line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  

 

#line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxfunction"








	
template<class _Rx      >
	class _Impl_base0
	{	
public:
	virtual _Impl_base0 *_Copy(void *) = 0;
	virtual _Rx _Do_call(    ) = 0;
	virtual const  type_info& _Target_type() const = 0;
	virtual void _Delete_this(bool) = 0;

	const void *_Target(const  type_info& _Info) const
		{	
		return (_Target_type() == _Info ? _Get() : 0);
		}

	virtual ~_Impl_base0()
		{	
		}

private:
	virtual const void *_Get() const = 0;
	};

	
template<class _Callable,
	class _Rx      >
	class _Impl_no_alloc0
		: public _Impl_base0<_Rx      >
	{	
public:
	typedef _Impl_no_alloc0 _Myty;
	typedef ::std:: allocator<_Myty> _Myalty;

	_Impl_no_alloc0(typename _Callable::_MyTy& _Val,
		_Myalty = _Myalty())
		: _Callee(_Val)
		{	
		}

	virtual ~_Impl_no_alloc0()
		{	
		}

	virtual _Impl_base0<_Rx      > *_Copy(void *_Where)
	{	
	if (_Where == 0)
		{	
		_Myalty _Al;
		_Where = _Al.allocate(1);
		}
	new (_Where) _Impl_no_alloc0(*this);
	return ((_Impl_base0<_Rx      > *)_Where);
	}

	_Rx _Do_call(    )
		{	
		return (_Callee.template _ApplyX<_Rx>(    ));
		}

	const  type_info& _Target_type() const
		{	
		return (typeid(typename _Callable::_MyTy));
		}

private:
	const void *_Get() const
		{	
		return (&_Callee._Get());
		}

	virtual void _Delete_this(bool _Deallocate)
		{	
		_Myalty _Al;
		_Dest_val(_Al, this);
		if (_Deallocate)
			_Al.deallocate(this, 1);
		}

	_Callable _Callee;
	};

	
template<class _Callable,
	class _Rx      ,
	class _Alloc>
	class _Impl0
		: public _Impl_no_alloc0<_Callable, _Rx      >
	{	
public:
	typedef _Impl0 _Myty;
	typedef _Impl_no_alloc0<_Callable, _Rx      >
		_Mybase;
	typedef typename _Alloc::template rebind<_Myty>::other _Myalty;

	_Impl0(typename _Callable::_MyTy& _Val,
		_Myalty _Ax = _Myalty())
		: _Mybase(_Val), _Myal(_Ax)
		{	
		}

	virtual ~_Impl0()
		{	
		}

	virtual _Impl_base0<_Rx      > *_Copy(void *_Where)
		{	
		if (_Where == 0)
			_Where = _Myal.allocate(1);
		new (_Where) _Impl0(*this);
		return ((_Impl_base0<_Rx      > *)_Where);
		}

private:
	virtual void _Delete_this(bool _Deallocate)
		{	
		_Myalty _Al = _Myal;
		_Dest_val(_Al, this);
		if (_Deallocate)
			_Al.deallocate(this, 1);
		}

	_Myalty _Myal;
	};

	
template<class _Ret      >
	class _Function_impl0

 

#line 140 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxfunction"

#line 142 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxfunction"

	{	
	typedef _Function_impl0<_Ret      > _Myty;
	typedef _Impl_base0<_Ret      > _Ptrt;

public:
	typedef _Ret result_type;

	_Ret operator()(    ) const
		{	
		if (_Impl == 0)
			_Xfunc();
		return (_Impl->_Do_call(    ));
		}

	bool _Empty() const
		{	
		return (_Impl == 0);
		}

protected:
	void _Reset()
		{	
		_Set(0);
		}

	void _Reset(const _Myty& _Right)
		{	
		if (_Right._Impl == 0)
			_Set(0);
		else if (_Right._Local())
			_Set(_Right._Impl->_Copy((void *)&_Space));
		else
			_Set(_Right._Impl->_Copy(0));
		}

	void _Resetm(_Myty& _Right)
		{	
		if (_Right._Impl == 0)
			_Set(0);
		else if (_Right._Local())
			_Set(_Right._Impl->_Copy((void *)&_Space));
		else
			{	
			_Set(_Right._Impl);
			_Right._Set(0);
			}
		}

	template<class _Fret      >
		void _Reset(_Fret (__cdecl *const _Val)(    ))
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_fun<_Fret (__cdecl *const)(    )> _MyWrapper;
		typedef _Impl_no_alloc0<_MyWrapper, _Ret      >
			_Myimpl;
		_Reset0f<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret      ,
		class _Alloc>
		void _Reset_alloc(_Fret (__cdecl *const _Val)(    ), _Alloc _Ax)
		{
		typedef _Callable_fun<_Fret (__cdecl *const)(    )> _MyWrapper;
		typedef _Impl0<_MyWrapper, _Ret      , _Alloc> _Myimpl;
		_Reset0f<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret      ,
		class _Alloc>
		void _Reset0f(_Fret (__cdecl *const _Val)(    ), _Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

 






















































































 










































	template<class _Fty>
		void _Reset(_Fty _Val)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_obj<_Fty> _MyWrapper;
		typedef _Impl_no_alloc0<_MyWrapper, _Ret      >
			_Myimpl;
		_Reset0o<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fty,
		class _Alloc>
		void _Reset_alloc(_Fty _Val, _Alloc _Ax)
		{
		typedef _Callable_obj<_Fty> _MyWrapper;
		typedef _Impl0<_MyWrapper, _Ret      , _Alloc> _Myimpl;
		_Reset0o<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fty,
		class _Alloc>
		void _Reset0o(_Fty _Val, _Alloc _Ax)
		{	
		if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

 











































#line 446 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxfunction"

 































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1376 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxfunction"

	void _Tidy()
		{	
		if (_Impl != 0)
			{	
			_Impl->_Delete_this(!_Local());
			_Impl = 0;
			}
		}

	void _Swap(_Myty& _Right)
		{	
		if (this == &_Right)
			;	
		else if (_Local())
			if (_Right._Local())
				{	
				_Myty _Temp;
				_Temp._Reset(*this);
				_Tidy();
				_Reset(_Right);
				_Right._Tidy();
				_Right._Reset(_Temp);
				_Temp._Tidy();
				}
			else
				{	
				_Ptrt *_Temp = _Right._Impl;
				_Right._Reset(*this);
				_Tidy();
				_Set(_Temp);
				}
		else
			if (_Right._Local())
				{	
				_Ptrt *_Temp = _Impl;
				_Reset(_Right);
				_Right._Tidy();
				_Right._Set(_Temp);
				}
			else
				::std:: swap(_Impl, _Right._Impl);	
		}

	const  type_info& _Target_type() const
		{	
		return (_Impl ? _Impl->_Target_type() : typeid(void));
		}

	const void *_Target(const  type_info& _Info) const
		{	
		return (_Impl ? _Impl->_Target(_Info) : 0);
		}

private:
	bool _Local() const
		{	
		return ((void *)_Impl == (void *)&_Space);
		}

	void _Set(_Ptrt *_Ptr)
		{	
		_Impl = _Ptr;
		}

	typedef void (*_Pfnty)();
	union _Space_union
		{	
		_Pfnty _Pfn[3];
		void *_Pobj[3];
		long double _Ldbl;	
		char _Alias[3 * sizeof (void *)];	
		} _Space;

	_Ptrt *_Impl;
	};

template<class _Ret      >
	struct _Get_function_impl<_Ret(    )>
	{	
	typedef _Function_impl0<_Ret      > _Type;
	};











#line 262 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 16 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"
 
#line 18 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"


#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 









































































#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  

 













#line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  

 

#line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  

 

#line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxfunction"








	
template<class _Rx , class _Arg0    >
	class _Impl_base1
	{	
public:
	virtual _Impl_base1 *_Copy(void *) = 0;
	virtual _Rx _Do_call(_Arg0 _Ax0    ) = 0;
	virtual const  type_info& _Target_type() const = 0;
	virtual void _Delete_this(bool) = 0;

	const void *_Target(const  type_info& _Info) const
		{	
		return (_Target_type() == _Info ? _Get() : 0);
		}

	virtual ~_Impl_base1()
		{	
		}

private:
	virtual const void *_Get() const = 0;
	};

	
template<class _Callable,
	class _Rx , class _Arg0    >
	class _Impl_no_alloc1
		: public _Impl_base1<_Rx , _Arg0    >
	{	
public:
	typedef _Impl_no_alloc1 _Myty;
	typedef ::std:: allocator<_Myty> _Myalty;

	_Impl_no_alloc1(typename _Callable::_MyTy& _Val,
		_Myalty = _Myalty())
		: _Callee(_Val)
		{	
		}

	virtual ~_Impl_no_alloc1()
		{	
		}

	virtual _Impl_base1<_Rx , _Arg0    > *_Copy(void *_Where)
	{	
	if (_Where == 0)
		{	
		_Myalty _Al;
		_Where = _Al.allocate(1);
		}
	new (_Where) _Impl_no_alloc1(*this);
	return ((_Impl_base1<_Rx , _Arg0    > *)_Where);
	}

	_Rx _Do_call(_Arg0 _Ax0    )
		{	
		return (_Callee.template _ApplyX<_Rx>(_Ax0    ));
		}

	const  type_info& _Target_type() const
		{	
		return (typeid(typename _Callable::_MyTy));
		}

private:
	const void *_Get() const
		{	
		return (&_Callee._Get());
		}

	virtual void _Delete_this(bool _Deallocate)
		{	
		_Myalty _Al;
		_Dest_val(_Al, this);
		if (_Deallocate)
			_Al.deallocate(this, 1);
		}

	_Callable _Callee;
	};

	
template<class _Callable,
	class _Rx , class _Arg0    ,
	class _Alloc>
	class _Impl1
		: public _Impl_no_alloc1<_Callable, _Rx , _Arg0    >
	{	
public:
	typedef _Impl1 _Myty;
	typedef _Impl_no_alloc1<_Callable, _Rx , _Arg0    >
		_Mybase;
	typedef typename _Alloc::template rebind<_Myty>::other _Myalty;

	_Impl1(typename _Callable::_MyTy& _Val,
		_Myalty _Ax = _Myalty())
		: _Mybase(_Val), _Myal(_Ax)
		{	
		}

	virtual ~_Impl1()
		{	
		}

	virtual _Impl_base1<_Rx , _Arg0    > *_Copy(void *_Where)
		{	
		if (_Where == 0)
			_Where = _Myal.allocate(1);
		new (_Where) _Impl1(*this);
		return ((_Impl_base1<_Rx , _Arg0    > *)_Where);
		}

private:
	virtual void _Delete_this(bool _Deallocate)
		{	
		_Myalty _Al = _Myal;
		_Dest_val(_Al, this);
		if (_Deallocate)
			_Al.deallocate(this, 1);
		}

	_Myalty _Myal;
	};

	
template<class _Ret , class _Arg0    >
	class _Function_impl1

 
		: public ::std:: unary_function<_Arg0, _Ret>
 

#line 142 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxfunction"

	{	
	typedef _Function_impl1<_Ret , _Arg0    > _Myty;
	typedef _Impl_base1<_Ret , _Arg0    > _Ptrt;

public:
	typedef _Ret result_type;

	_Ret operator()(_Arg0 _Ax0    ) const
		{	
		if (_Impl == 0)
			_Xfunc();
		return (_Impl->_Do_call(_Ax0    ));
		}

	bool _Empty() const
		{	
		return (_Impl == 0);
		}

protected:
	void _Reset()
		{	
		_Set(0);
		}

	void _Reset(const _Myty& _Right)
		{	
		if (_Right._Impl == 0)
			_Set(0);
		else if (_Right._Local())
			_Set(_Right._Impl->_Copy((void *)&_Space));
		else
			_Set(_Right._Impl->_Copy(0));
		}

	void _Resetm(_Myty& _Right)
		{	
		if (_Right._Impl == 0)
			_Set(0);
		else if (_Right._Local())
			_Set(_Right._Impl->_Copy((void *)&_Space));
		else
			{	
			_Set(_Right._Impl);
			_Right._Set(0);
			}
		}

	template<class _Fret , class _Farg0    >
		void _Reset(_Fret (__cdecl *const _Val)(_Farg0    ))
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_fun<_Fret (__cdecl *const)(_Farg0    )> _MyWrapper;
		typedef _Impl_no_alloc1<_MyWrapper, _Ret , _Arg0    >
			_Myimpl;
		_Reset0f<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0    ,
		class _Alloc>
		void _Reset_alloc(_Fret (__cdecl *const _Val)(_Farg0    ), _Alloc _Ax)
		{
		typedef _Callable_fun<_Fret (__cdecl *const)(_Farg0    )> _MyWrapper;
		typedef _Impl1<_MyWrapper, _Ret , _Arg0    , _Alloc> _Myimpl;
		_Reset0f<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0    ,
		class _Alloc>
		void _Reset0f(_Fret (__cdecl *const _Val)(_Farg0    ), _Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

 






















































































 










































	template<class _Fty>
		void _Reset(_Fty _Val)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_obj<_Fty> _MyWrapper;
		typedef _Impl_no_alloc1<_MyWrapper, _Ret , _Arg0    >
			_Myimpl;
		_Reset0o<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fty,
		class _Alloc>
		void _Reset_alloc(_Fty _Val, _Alloc _Ax)
		{
		typedef _Callable_obj<_Fty> _MyWrapper;
		typedef _Impl1<_MyWrapper, _Ret , _Arg0    , _Alloc> _Myimpl;
		_Reset0o<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fty,
		class _Alloc>
		void _Reset0o(_Fty _Val, _Alloc _Ax)
		{	
		if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

 
	template<class _Fret,
		class _Farg0>
		void _Reset(_Fret _Farg0::*const _Val)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmd<_Fret _Farg0::*const, _Farg0> _MyWrapper;
		typedef _Impl_no_alloc1<_MyWrapper, _Ret , _Arg0    >
			_Myimpl;
		_Reset0pmd<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret,
		class _Farg0,
		class _Alloc>
		void _Reset_alloc(_Fret _Farg0::*const _Val, _Alloc _Ax)
		{
		typedef _Callable_pmd<_Fret _Farg0::*const, _Farg0> _MyWrapper;
		typedef _Impl1<_MyWrapper, _Ret, _Arg0, _Alloc> _Myimpl;
		_Reset0pmd<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret,
		class _Farg0,
		class _Alloc>
		void _Reset0pmd(_Fret _Farg0::*const _Val, _Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}
 #line 446 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxfunction"

 
	template<class _Fret , class _Farg0    >
		void _Reset(_Fret (__thiscall _Farg0::*const _Val)(  ))
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<_Fret (__thiscall _Farg0::*const)(  ), _Farg0>
			_MyWrapper;
		typedef _Impl_no_alloc1<_MyWrapper, _Ret , _Arg0    >
			_Myimpl;
		_Reset0pmf<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0    ,
		class _Alloc>
		void _Reset_alloc(_Fret (__thiscall _Farg0::*const _Val)(  ),
			_Alloc _Ax)
		{
		typedef _Callable_pmf<_Fret (__thiscall _Farg0::*const)(  ), _Farg0>
			_MyWrapper;
		typedef _Impl1<_MyWrapper, _Ret, _Arg0    , _Alloc> _Myimpl;
		_Reset0pmf<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0    ,
		class _Alloc>
		void _Reset0pmf(_Fret (__thiscall _Farg0::*const _Val)(  ),
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

	template<class _Fret , class _Farg0    >
		void _Reset(_Fret (__thiscall _Farg0::*const _Val)(  ) const)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<
			_Fret (__thiscall _Farg0::*const)(  ) const, _Farg0> _MyWrapper;
		typedef _Impl_no_alloc1<_MyWrapper, _Ret , _Arg0    >
			_Myimpl;
		_Reset0pmfc<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0    ,
		class _Alloc>
		void _Reset_alloc(_Fret (__thiscall _Farg0::*const _Val)(  ) const,
			_Alloc _Ax)
		{
		typedef _Callable_pmf<
			_Fret (__thiscall _Farg0::*const)(  ) const, _Farg0> _MyWrapper;
		typedef _Impl1<_MyWrapper, _Ret, _Arg0    , _Alloc> _Myimpl;
		_Reset0pmfc<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0    ,
		class _Alloc>
		void _Reset0pmfc(_Fret (__thiscall _Farg0::*const _Val)(  ) const,
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

	template<class _Fret , class _Farg0    >
		void _Reset(_Fret (__thiscall _Farg0::*const _Val)(  ) volatile)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<
			_Fret (__thiscall _Farg0::*const)(  ) volatile, _Farg0> _MyWrapper;
		typedef _Impl_no_alloc1<_MyWrapper, _Ret , _Arg0    >
			_Myimpl;
		_Reset0pmfv<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0    ,
		class _Alloc>
		void _Reset_alloc(_Fret (__thiscall _Farg0::*const _Val)(  ) volatile,
			_Alloc _Ax)
		{
		typedef _Callable_pmf<
			_Fret (__thiscall _Farg0::*const)(  ) volatile, _Farg0> _MyWrapper;
		typedef _Impl1<_MyWrapper, _Ret, _Arg0    , _Alloc> _Myimpl;
		_Reset0pmfv<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0    ,
		class _Alloc>
		void _Reset0pmfv(_Fret (__thiscall _Farg0::*const _Val)(  ) volatile,
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

	template<class _Fret , class _Farg0    >
		void _Reset(_Fret (__thiscall _Farg0::*const _Val)(  ) const volatile)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<
			_Fret (__thiscall _Farg0::*const)(  ) const volatile, _Farg0>
			_MyWrapper;
		typedef _Impl_no_alloc1<_MyWrapper, _Ret , _Arg0    >
			_Myimpl;
		_Reset0pmfcv<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0    ,
		class _Alloc>
		void _Reset_alloc(
			_Fret (__thiscall _Farg0::*const _Val)(  ) const volatile,
			_Alloc _Ax)
		{
		typedef _Callable_pmf<
			_Fret (__thiscall _Farg0::*const)(  ) const volatile, _Farg0>
			_MyWrapper;
		typedef _Impl1<_MyWrapper, _Ret, _Arg0    , _Alloc> _Myimpl;
		_Reset0pmfcv<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0    ,
		class _Alloc>
		void _Reset0pmfcv(
			_Fret (__thiscall _Farg0::*const _Val)(  ) const volatile,
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

 












































































































































































































































































































































































































































































































































































 

























































































































































































 #line 1376 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxfunction"

	void _Tidy()
		{	
		if (_Impl != 0)
			{	
			_Impl->_Delete_this(!_Local());
			_Impl = 0;
			}
		}

	void _Swap(_Myty& _Right)
		{	
		if (this == &_Right)
			;	
		else if (_Local())
			if (_Right._Local())
				{	
				_Myty _Temp;
				_Temp._Reset(*this);
				_Tidy();
				_Reset(_Right);
				_Right._Tidy();
				_Right._Reset(_Temp);
				_Temp._Tidy();
				}
			else
				{	
				_Ptrt *_Temp = _Right._Impl;
				_Right._Reset(*this);
				_Tidy();
				_Set(_Temp);
				}
		else
			if (_Right._Local())
				{	
				_Ptrt *_Temp = _Impl;
				_Reset(_Right);
				_Right._Tidy();
				_Right._Set(_Temp);
				}
			else
				::std:: swap(_Impl, _Right._Impl);	
		}

	const  type_info& _Target_type() const
		{	
		return (_Impl ? _Impl->_Target_type() : typeid(void));
		}

	const void *_Target(const  type_info& _Info) const
		{	
		return (_Impl ? _Impl->_Target(_Info) : 0);
		}

private:
	bool _Local() const
		{	
		return ((void *)_Impl == (void *)&_Space);
		}

	void _Set(_Ptrt *_Ptr)
		{	
		_Impl = _Ptr;
		}

	typedef void (*_Pfnty)();
	union _Space_union
		{	
		_Pfnty _Pfn[3];
		void *_Pobj[3];
		long double _Ldbl;	
		char _Alias[3 * sizeof (void *)];	
		} _Space;

	_Ptrt *_Impl;
	};

template<class _Ret , class _Arg0    >
	struct _Get_function_impl<_Ret(_Arg0    )>
	{	
	typedef _Function_impl1<_Ret , _Arg0    > _Type;
	};











#line 262 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 21 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

































































#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  

 

#line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxfunction"








	
template<class _Rx , class _Arg0 ,   class _Arg1>
	class _Impl_base2
	{	
public:
	virtual _Impl_base2 *_Copy(void *) = 0;
	virtual _Rx _Do_call(_Arg0 _Ax0 ,   _Arg1 _Ax1) = 0;
	virtual const  type_info& _Target_type() const = 0;
	virtual void _Delete_this(bool) = 0;

	const void *_Target(const  type_info& _Info) const
		{	
		return (_Target_type() == _Info ? _Get() : 0);
		}

	virtual ~_Impl_base2()
		{	
		}

private:
	virtual const void *_Get() const = 0;
	};

	
template<class _Callable,
	class _Rx , class _Arg0 ,   class _Arg1>
	class _Impl_no_alloc2
		: public _Impl_base2<_Rx , _Arg0 ,   _Arg1>
	{	
public:
	typedef _Impl_no_alloc2 _Myty;
	typedef ::std:: allocator<_Myty> _Myalty;

	_Impl_no_alloc2(typename _Callable::_MyTy& _Val,
		_Myalty = _Myalty())
		: _Callee(_Val)
		{	
		}

	virtual ~_Impl_no_alloc2()
		{	
		}

	virtual _Impl_base2<_Rx , _Arg0 ,   _Arg1> *_Copy(void *_Where)
	{	
	if (_Where == 0)
		{	
		_Myalty _Al;
		_Where = _Al.allocate(1);
		}
	new (_Where) _Impl_no_alloc2(*this);
	return ((_Impl_base2<_Rx , _Arg0 ,   _Arg1> *)_Where);
	}

	_Rx _Do_call(_Arg0 _Ax0 ,   _Arg1 _Ax1)
		{	
		return (_Callee.template _ApplyX<_Rx>(_Ax0 ,   _Ax1));
		}

	const  type_info& _Target_type() const
		{	
		return (typeid(typename _Callable::_MyTy));
		}

private:
	const void *_Get() const
		{	
		return (&_Callee._Get());
		}

	virtual void _Delete_this(bool _Deallocate)
		{	
		_Myalty _Al;
		_Dest_val(_Al, this);
		if (_Deallocate)
			_Al.deallocate(this, 1);
		}

	_Callable _Callee;
	};

	
template<class _Callable,
	class _Rx , class _Arg0 ,   class _Arg1,
	class _Alloc>
	class _Impl2
		: public _Impl_no_alloc2<_Callable, _Rx , _Arg0 ,   _Arg1>
	{	
public:
	typedef _Impl2 _Myty;
	typedef _Impl_no_alloc2<_Callable, _Rx , _Arg0 ,   _Arg1>
		_Mybase;
	typedef typename _Alloc::template rebind<_Myty>::other _Myalty;

	_Impl2(typename _Callable::_MyTy& _Val,
		_Myalty _Ax = _Myalty())
		: _Mybase(_Val), _Myal(_Ax)
		{	
		}

	virtual ~_Impl2()
		{	
		}

	virtual _Impl_base2<_Rx , _Arg0 ,   _Arg1> *_Copy(void *_Where)
		{	
		if (_Where == 0)
			_Where = _Myal.allocate(1);
		new (_Where) _Impl2(*this);
		return ((_Impl_base2<_Rx , _Arg0 ,   _Arg1> *)_Where);
		}

private:
	virtual void _Delete_this(bool _Deallocate)
		{	
		_Myalty _Al = _Myal;
		_Dest_val(_Al, this);
		if (_Deallocate)
			_Al.deallocate(this, 1);
		}

	_Myalty _Myal;
	};

	
template<class _Ret , class _Arg0 ,   class _Arg1>
	class _Function_impl2

 

#line 140 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxfunction"
		: public ::std:: binary_function<_Arg0, _Arg1, _Ret>
 #line 142 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxfunction"

	{	
	typedef _Function_impl2<_Ret , _Arg0 ,   _Arg1> _Myty;
	typedef _Impl_base2<_Ret , _Arg0 ,   _Arg1> _Ptrt;

public:
	typedef _Ret result_type;

	_Ret operator()(_Arg0 _Ax0 ,   _Arg1 _Ax1) const
		{	
		if (_Impl == 0)
			_Xfunc();
		return (_Impl->_Do_call(_Ax0 ,   _Ax1));
		}

	bool _Empty() const
		{	
		return (_Impl == 0);
		}

protected:
	void _Reset()
		{	
		_Set(0);
		}

	void _Reset(const _Myty& _Right)
		{	
		if (_Right._Impl == 0)
			_Set(0);
		else if (_Right._Local())
			_Set(_Right._Impl->_Copy((void *)&_Space));
		else
			_Set(_Right._Impl->_Copy(0));
		}

	void _Resetm(_Myty& _Right)
		{	
		if (_Right._Impl == 0)
			_Set(0);
		else if (_Right._Local())
			_Set(_Right._Impl->_Copy((void *)&_Space));
		else
			{	
			_Set(_Right._Impl);
			_Right._Set(0);
			}
		}

	template<class _Fret , class _Farg0 ,   class _Farg1>
		void _Reset(_Fret (__cdecl *const _Val)(_Farg0 ,   _Farg1))
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_fun<_Fret (__cdecl *const)(_Farg0 ,   _Farg1)> _MyWrapper;
		typedef _Impl_no_alloc2<_MyWrapper, _Ret , _Arg0 ,   _Arg1>
			_Myimpl;
		_Reset0f<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 ,   class _Farg1,
		class _Alloc>
		void _Reset_alloc(_Fret (__cdecl *const _Val)(_Farg0 ,   _Farg1), _Alloc _Ax)
		{
		typedef _Callable_fun<_Fret (__cdecl *const)(_Farg0 ,   _Farg1)> _MyWrapper;
		typedef _Impl2<_MyWrapper, _Ret , _Arg0 ,   _Arg1, _Alloc> _Myimpl;
		_Reset0f<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 ,   class _Farg1,
		class _Alloc>
		void _Reset0f(_Fret (__cdecl *const _Val)(_Farg0 ,   _Farg1), _Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

 






















































































 










































	template<class _Fty>
		void _Reset(_Fty _Val)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_obj<_Fty> _MyWrapper;
		typedef _Impl_no_alloc2<_MyWrapper, _Ret , _Arg0 ,   _Arg1>
			_Myimpl;
		_Reset0o<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fty,
		class _Alloc>
		void _Reset_alloc(_Fty _Val, _Alloc _Ax)
		{
		typedef _Callable_obj<_Fty> _MyWrapper;
		typedef _Impl2<_MyWrapper, _Ret , _Arg0 ,   _Arg1, _Alloc> _Myimpl;
		_Reset0o<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fty,
		class _Alloc>
		void _Reset0o(_Fty _Val, _Alloc _Ax)
		{	
		if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

 











































#line 446 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxfunction"

 
	template<class _Fret , class _Farg0 ,   class _Farg1>
		void _Reset(_Fret (__thiscall _Farg0::*const _Val)(  _Farg1))
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<_Fret (__thiscall _Farg0::*const)(  _Farg1), _Farg0>
			_MyWrapper;
		typedef _Impl_no_alloc2<_MyWrapper, _Ret , _Arg0 ,   _Arg1>
			_Myimpl;
		_Reset0pmf<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 ,   class _Farg1,
		class _Alloc>
		void _Reset_alloc(_Fret (__thiscall _Farg0::*const _Val)(  _Farg1),
			_Alloc _Ax)
		{
		typedef _Callable_pmf<_Fret (__thiscall _Farg0::*const)(  _Farg1), _Farg0>
			_MyWrapper;
		typedef _Impl2<_MyWrapper, _Ret, _Arg0 ,   _Arg1, _Alloc> _Myimpl;
		_Reset0pmf<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 ,   class _Farg1,
		class _Alloc>
		void _Reset0pmf(_Fret (__thiscall _Farg0::*const _Val)(  _Farg1),
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

	template<class _Fret , class _Farg0 ,   class _Farg1>
		void _Reset(_Fret (__thiscall _Farg0::*const _Val)(  _Farg1) const)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<
			_Fret (__thiscall _Farg0::*const)(  _Farg1) const, _Farg0> _MyWrapper;
		typedef _Impl_no_alloc2<_MyWrapper, _Ret , _Arg0 ,   _Arg1>
			_Myimpl;
		_Reset0pmfc<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 ,   class _Farg1,
		class _Alloc>
		void _Reset_alloc(_Fret (__thiscall _Farg0::*const _Val)(  _Farg1) const,
			_Alloc _Ax)
		{
		typedef _Callable_pmf<
			_Fret (__thiscall _Farg0::*const)(  _Farg1) const, _Farg0> _MyWrapper;
		typedef _Impl2<_MyWrapper, _Ret, _Arg0 ,   _Arg1, _Alloc> _Myimpl;
		_Reset0pmfc<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 ,   class _Farg1,
		class _Alloc>
		void _Reset0pmfc(_Fret (__thiscall _Farg0::*const _Val)(  _Farg1) const,
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

	template<class _Fret , class _Farg0 ,   class _Farg1>
		void _Reset(_Fret (__thiscall _Farg0::*const _Val)(  _Farg1) volatile)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<
			_Fret (__thiscall _Farg0::*const)(  _Farg1) volatile, _Farg0> _MyWrapper;
		typedef _Impl_no_alloc2<_MyWrapper, _Ret , _Arg0 ,   _Arg1>
			_Myimpl;
		_Reset0pmfv<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 ,   class _Farg1,
		class _Alloc>
		void _Reset_alloc(_Fret (__thiscall _Farg0::*const _Val)(  _Farg1) volatile,
			_Alloc _Ax)
		{
		typedef _Callable_pmf<
			_Fret (__thiscall _Farg0::*const)(  _Farg1) volatile, _Farg0> _MyWrapper;
		typedef _Impl2<_MyWrapper, _Ret, _Arg0 ,   _Arg1, _Alloc> _Myimpl;
		_Reset0pmfv<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 ,   class _Farg1,
		class _Alloc>
		void _Reset0pmfv(_Fret (__thiscall _Farg0::*const _Val)(  _Farg1) volatile,
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

	template<class _Fret , class _Farg0 ,   class _Farg1>
		void _Reset(_Fret (__thiscall _Farg0::*const _Val)(  _Farg1) const volatile)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<
			_Fret (__thiscall _Farg0::*const)(  _Farg1) const volatile, _Farg0>
			_MyWrapper;
		typedef _Impl_no_alloc2<_MyWrapper, _Ret , _Arg0 ,   _Arg1>
			_Myimpl;
		_Reset0pmfcv<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 ,   class _Farg1,
		class _Alloc>
		void _Reset_alloc(
			_Fret (__thiscall _Farg0::*const _Val)(  _Farg1) const volatile,
			_Alloc _Ax)
		{
		typedef _Callable_pmf<
			_Fret (__thiscall _Farg0::*const)(  _Farg1) const volatile, _Farg0>
			_MyWrapper;
		typedef _Impl2<_MyWrapper, _Ret, _Arg0 ,   _Arg1, _Alloc> _Myimpl;
		_Reset0pmfcv<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 ,   class _Farg1,
		class _Alloc>
		void _Reset0pmfcv(
			_Fret (__thiscall _Farg0::*const _Val)(  _Farg1) const volatile,
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

 












































































































































































































































































































































































































































































































































































 

























































































































































































 #line 1376 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxfunction"

	void _Tidy()
		{	
		if (_Impl != 0)
			{	
			_Impl->_Delete_this(!_Local());
			_Impl = 0;
			}
		}

	void _Swap(_Myty& _Right)
		{	
		if (this == &_Right)
			;	
		else if (_Local())
			if (_Right._Local())
				{	
				_Myty _Temp;
				_Temp._Reset(*this);
				_Tidy();
				_Reset(_Right);
				_Right._Tidy();
				_Right._Reset(_Temp);
				_Temp._Tidy();
				}
			else
				{	
				_Ptrt *_Temp = _Right._Impl;
				_Right._Reset(*this);
				_Tidy();
				_Set(_Temp);
				}
		else
			if (_Right._Local())
				{	
				_Ptrt *_Temp = _Impl;
				_Reset(_Right);
				_Right._Tidy();
				_Right._Set(_Temp);
				}
			else
				::std:: swap(_Impl, _Right._Impl);	
		}

	const  type_info& _Target_type() const
		{	
		return (_Impl ? _Impl->_Target_type() : typeid(void));
		}

	const void *_Target(const  type_info& _Info) const
		{	
		return (_Impl ? _Impl->_Target(_Info) : 0);
		}

private:
	bool _Local() const
		{	
		return ((void *)_Impl == (void *)&_Space);
		}

	void _Set(_Ptrt *_Ptr)
		{	
		_Impl = _Ptr;
		}

	typedef void (*_Pfnty)();
	union _Space_union
		{	
		_Pfnty _Pfn[3];
		void *_Pobj[3];
		long double _Ldbl;	
		char _Alias[3 * sizeof (void *)];	
		} _Space;

	_Ptrt *_Impl;
	};

template<class _Ret , class _Arg0 ,   class _Arg1>
	struct _Get_function_impl<_Ret(_Arg0 ,   _Arg1)>
	{	
	typedef _Function_impl2<_Ret , _Arg0 ,   _Arg1> _Type;
	};











#line 262 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 25 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

























































#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxfunction"








	
template<class _Rx , class _Arg0 , class _Arg1 , class _Arg2>
	class _Impl_base3
	{	
public:
	virtual _Impl_base3 *_Copy(void *) = 0;
	virtual _Rx _Do_call(_Arg0 _Ax0 , _Arg1 _Ax1 , _Arg2 _Ax2) = 0;
	virtual const  type_info& _Target_type() const = 0;
	virtual void _Delete_this(bool) = 0;

	const void *_Target(const  type_info& _Info) const
		{	
		return (_Target_type() == _Info ? _Get() : 0);
		}

	virtual ~_Impl_base3()
		{	
		}

private:
	virtual const void *_Get() const = 0;
	};

	
template<class _Callable,
	class _Rx , class _Arg0 , class _Arg1 , class _Arg2>
	class _Impl_no_alloc3
		: public _Impl_base3<_Rx , _Arg0 , _Arg1 , _Arg2>
	{	
public:
	typedef _Impl_no_alloc3 _Myty;
	typedef ::std:: allocator<_Myty> _Myalty;

	_Impl_no_alloc3(typename _Callable::_MyTy& _Val,
		_Myalty = _Myalty())
		: _Callee(_Val)
		{	
		}

	virtual ~_Impl_no_alloc3()
		{	
		}

	virtual _Impl_base3<_Rx , _Arg0 , _Arg1 , _Arg2> *_Copy(void *_Where)
	{	
	if (_Where == 0)
		{	
		_Myalty _Al;
		_Where = _Al.allocate(1);
		}
	new (_Where) _Impl_no_alloc3(*this);
	return ((_Impl_base3<_Rx , _Arg0 , _Arg1 , _Arg2> *)_Where);
	}

	_Rx _Do_call(_Arg0 _Ax0 , _Arg1 _Ax1 , _Arg2 _Ax2)
		{	
		return (_Callee.template _ApplyX<_Rx>(_Ax0 , _Ax1 , _Ax2));
		}

	const  type_info& _Target_type() const
		{	
		return (typeid(typename _Callable::_MyTy));
		}

private:
	const void *_Get() const
		{	
		return (&_Callee._Get());
		}

	virtual void _Delete_this(bool _Deallocate)
		{	
		_Myalty _Al;
		_Dest_val(_Al, this);
		if (_Deallocate)
			_Al.deallocate(this, 1);
		}

	_Callable _Callee;
	};

	
template<class _Callable,
	class _Rx , class _Arg0 , class _Arg1 , class _Arg2,
	class _Alloc>
	class _Impl3
		: public _Impl_no_alloc3<_Callable, _Rx , _Arg0 , _Arg1 , _Arg2>
	{	
public:
	typedef _Impl3 _Myty;
	typedef _Impl_no_alloc3<_Callable, _Rx , _Arg0 , _Arg1 , _Arg2>
		_Mybase;
	typedef typename _Alloc::template rebind<_Myty>::other _Myalty;

	_Impl3(typename _Callable::_MyTy& _Val,
		_Myalty _Ax = _Myalty())
		: _Mybase(_Val), _Myal(_Ax)
		{	
		}

	virtual ~_Impl3()
		{	
		}

	virtual _Impl_base3<_Rx , _Arg0 , _Arg1 , _Arg2> *_Copy(void *_Where)
		{	
		if (_Where == 0)
			_Where = _Myal.allocate(1);
		new (_Where) _Impl3(*this);
		return ((_Impl_base3<_Rx , _Arg0 , _Arg1 , _Arg2> *)_Where);
		}

private:
	virtual void _Delete_this(bool _Deallocate)
		{	
		_Myalty _Al = _Myal;
		_Dest_val(_Al, this);
		if (_Deallocate)
			_Al.deallocate(this, 1);
		}

	_Myalty _Myal;
	};

	
template<class _Ret , class _Arg0 , class _Arg1 , class _Arg2>
	class _Function_impl3

 

#line 140 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxfunction"

#line 142 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxfunction"

	{	
	typedef _Function_impl3<_Ret , _Arg0 , _Arg1 , _Arg2> _Myty;
	typedef _Impl_base3<_Ret , _Arg0 , _Arg1 , _Arg2> _Ptrt;

public:
	typedef _Ret result_type;

	_Ret operator()(_Arg0 _Ax0 , _Arg1 _Ax1 , _Arg2 _Ax2) const
		{	
		if (_Impl == 0)
			_Xfunc();
		return (_Impl->_Do_call(_Ax0 , _Ax1 , _Ax2));
		}

	bool _Empty() const
		{	
		return (_Impl == 0);
		}

protected:
	void _Reset()
		{	
		_Set(0);
		}

	void _Reset(const _Myty& _Right)
		{	
		if (_Right._Impl == 0)
			_Set(0);
		else if (_Right._Local())
			_Set(_Right._Impl->_Copy((void *)&_Space));
		else
			_Set(_Right._Impl->_Copy(0));
		}

	void _Resetm(_Myty& _Right)
		{	
		if (_Right._Impl == 0)
			_Set(0);
		else if (_Right._Local())
			_Set(_Right._Impl->_Copy((void *)&_Space));
		else
			{	
			_Set(_Right._Impl);
			_Right._Set(0);
			}
		}

	template<class _Fret , class _Farg0 , class _Farg1 , class _Farg2>
		void _Reset(_Fret (__cdecl *const _Val)(_Farg0 , _Farg1 , _Farg2))
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_fun<_Fret (__cdecl *const)(_Farg0 , _Farg1 , _Farg2)> _MyWrapper;
		typedef _Impl_no_alloc3<_MyWrapper, _Ret , _Arg0 , _Arg1 , _Arg2>
			_Myimpl;
		_Reset0f<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1 , class _Farg2,
		class _Alloc>
		void _Reset_alloc(_Fret (__cdecl *const _Val)(_Farg0 , _Farg1 , _Farg2), _Alloc _Ax)
		{
		typedef _Callable_fun<_Fret (__cdecl *const)(_Farg0 , _Farg1 , _Farg2)> _MyWrapper;
		typedef _Impl3<_MyWrapper, _Ret , _Arg0 , _Arg1 , _Arg2, _Alloc> _Myimpl;
		_Reset0f<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1 , class _Farg2,
		class _Alloc>
		void _Reset0f(_Fret (__cdecl *const _Val)(_Farg0 , _Farg1 , _Farg2), _Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

 






















































































 










































	template<class _Fty>
		void _Reset(_Fty _Val)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_obj<_Fty> _MyWrapper;
		typedef _Impl_no_alloc3<_MyWrapper, _Ret , _Arg0 , _Arg1 , _Arg2>
			_Myimpl;
		_Reset0o<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fty,
		class _Alloc>
		void _Reset_alloc(_Fty _Val, _Alloc _Ax)
		{
		typedef _Callable_obj<_Fty> _MyWrapper;
		typedef _Impl3<_MyWrapper, _Ret , _Arg0 , _Arg1 , _Arg2, _Alloc> _Myimpl;
		_Reset0o<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fty,
		class _Alloc>
		void _Reset0o(_Fty _Val, _Alloc _Ax)
		{	
		if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

 











































#line 446 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxfunction"

 
	template<class _Fret , class _Farg0 , class _Farg1 , class _Farg2>
		void _Reset(_Fret (__thiscall _Farg0::*const _Val)(_Farg1 , _Farg2))
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<_Fret (__thiscall _Farg0::*const)(_Farg1 , _Farg2), _Farg0>
			_MyWrapper;
		typedef _Impl_no_alloc3<_MyWrapper, _Ret , _Arg0 , _Arg1 , _Arg2>
			_Myimpl;
		_Reset0pmf<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1 , class _Farg2,
		class _Alloc>
		void _Reset_alloc(_Fret (__thiscall _Farg0::*const _Val)(_Farg1 , _Farg2),
			_Alloc _Ax)
		{
		typedef _Callable_pmf<_Fret (__thiscall _Farg0::*const)(_Farg1 , _Farg2), _Farg0>
			_MyWrapper;
		typedef _Impl3<_MyWrapper, _Ret, _Arg0 , _Arg1 , _Arg2, _Alloc> _Myimpl;
		_Reset0pmf<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1 , class _Farg2,
		class _Alloc>
		void _Reset0pmf(_Fret (__thiscall _Farg0::*const _Val)(_Farg1 , _Farg2),
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

	template<class _Fret , class _Farg0 , class _Farg1 , class _Farg2>
		void _Reset(_Fret (__thiscall _Farg0::*const _Val)(_Farg1 , _Farg2) const)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<
			_Fret (__thiscall _Farg0::*const)(_Farg1 , _Farg2) const, _Farg0> _MyWrapper;
		typedef _Impl_no_alloc3<_MyWrapper, _Ret , _Arg0 , _Arg1 , _Arg2>
			_Myimpl;
		_Reset0pmfc<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1 , class _Farg2,
		class _Alloc>
		void _Reset_alloc(_Fret (__thiscall _Farg0::*const _Val)(_Farg1 , _Farg2) const,
			_Alloc _Ax)
		{
		typedef _Callable_pmf<
			_Fret (__thiscall _Farg0::*const)(_Farg1 , _Farg2) const, _Farg0> _MyWrapper;
		typedef _Impl3<_MyWrapper, _Ret, _Arg0 , _Arg1 , _Arg2, _Alloc> _Myimpl;
		_Reset0pmfc<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1 , class _Farg2,
		class _Alloc>
		void _Reset0pmfc(_Fret (__thiscall _Farg0::*const _Val)(_Farg1 , _Farg2) const,
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

	template<class _Fret , class _Farg0 , class _Farg1 , class _Farg2>
		void _Reset(_Fret (__thiscall _Farg0::*const _Val)(_Farg1 , _Farg2) volatile)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<
			_Fret (__thiscall _Farg0::*const)(_Farg1 , _Farg2) volatile, _Farg0> _MyWrapper;
		typedef _Impl_no_alloc3<_MyWrapper, _Ret , _Arg0 , _Arg1 , _Arg2>
			_Myimpl;
		_Reset0pmfv<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1 , class _Farg2,
		class _Alloc>
		void _Reset_alloc(_Fret (__thiscall _Farg0::*const _Val)(_Farg1 , _Farg2) volatile,
			_Alloc _Ax)
		{
		typedef _Callable_pmf<
			_Fret (__thiscall _Farg0::*const)(_Farg1 , _Farg2) volatile, _Farg0> _MyWrapper;
		typedef _Impl3<_MyWrapper, _Ret, _Arg0 , _Arg1 , _Arg2, _Alloc> _Myimpl;
		_Reset0pmfv<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1 , class _Farg2,
		class _Alloc>
		void _Reset0pmfv(_Fret (__thiscall _Farg0::*const _Val)(_Farg1 , _Farg2) volatile,
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

	template<class _Fret , class _Farg0 , class _Farg1 , class _Farg2>
		void _Reset(_Fret (__thiscall _Farg0::*const _Val)(_Farg1 , _Farg2) const volatile)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<
			_Fret (__thiscall _Farg0::*const)(_Farg1 , _Farg2) const volatile, _Farg0>
			_MyWrapper;
		typedef _Impl_no_alloc3<_MyWrapper, _Ret , _Arg0 , _Arg1 , _Arg2>
			_Myimpl;
		_Reset0pmfcv<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1 , class _Farg2,
		class _Alloc>
		void _Reset_alloc(
			_Fret (__thiscall _Farg0::*const _Val)(_Farg1 , _Farg2) const volatile,
			_Alloc _Ax)
		{
		typedef _Callable_pmf<
			_Fret (__thiscall _Farg0::*const)(_Farg1 , _Farg2) const volatile, _Farg0>
			_MyWrapper;
		typedef _Impl3<_MyWrapper, _Ret, _Arg0 , _Arg1 , _Arg2, _Alloc> _Myimpl;
		_Reset0pmfcv<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1 , class _Farg2,
		class _Alloc>
		void _Reset0pmfcv(
			_Fret (__thiscall _Farg0::*const _Val)(_Farg1 , _Farg2) const volatile,
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

 












































































































































































































































































































































































































































































































































































 

























































































































































































 #line 1376 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxfunction"

	void _Tidy()
		{	
		if (_Impl != 0)
			{	
			_Impl->_Delete_this(!_Local());
			_Impl = 0;
			}
		}

	void _Swap(_Myty& _Right)
		{	
		if (this == &_Right)
			;	
		else if (_Local())
			if (_Right._Local())
				{	
				_Myty _Temp;
				_Temp._Reset(*this);
				_Tidy();
				_Reset(_Right);
				_Right._Tidy();
				_Right._Reset(_Temp);
				_Temp._Tidy();
				}
			else
				{	
				_Ptrt *_Temp = _Right._Impl;
				_Right._Reset(*this);
				_Tidy();
				_Set(_Temp);
				}
		else
			if (_Right._Local())
				{	
				_Ptrt *_Temp = _Impl;
				_Reset(_Right);
				_Right._Tidy();
				_Right._Set(_Temp);
				}
			else
				::std:: swap(_Impl, _Right._Impl);	
		}

	const  type_info& _Target_type() const
		{	
		return (_Impl ? _Impl->_Target_type() : typeid(void));
		}

	const void *_Target(const  type_info& _Info) const
		{	
		return (_Impl ? _Impl->_Target(_Info) : 0);
		}

private:
	bool _Local() const
		{	
		return ((void *)_Impl == (void *)&_Space);
		}

	void _Set(_Ptrt *_Ptr)
		{	
		_Impl = _Ptr;
		}

	typedef void (*_Pfnty)();
	union _Space_union
		{	
		_Pfnty _Pfn[3];
		void *_Pobj[3];
		long double _Ldbl;	
		char _Alias[3 * sizeof (void *)];	
		} _Space;

	_Ptrt *_Impl;
	};

template<class _Ret , class _Arg0 , class _Arg1 , class _Arg2>
	struct _Get_function_impl<_Ret(_Arg0 , _Arg1 , _Arg2)>
	{	
	typedef _Function_impl3<_Ret , _Arg0 , _Arg1 , _Arg2> _Type;
	};











#line 262 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 29 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

















































#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxfunction"








	
template<class _Rx , class _Arg0 , class _Arg1, class _Arg2 , class _Arg3>
	class _Impl_base4
	{	
public:
	virtual _Impl_base4 *_Copy(void *) = 0;
	virtual _Rx _Do_call(_Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2 , _Arg3 _Ax3) = 0;
	virtual const  type_info& _Target_type() const = 0;
	virtual void _Delete_this(bool) = 0;

	const void *_Target(const  type_info& _Info) const
		{	
		return (_Target_type() == _Info ? _Get() : 0);
		}

	virtual ~_Impl_base4()
		{	
		}

private:
	virtual const void *_Get() const = 0;
	};

	
template<class _Callable,
	class _Rx , class _Arg0 , class _Arg1, class _Arg2 , class _Arg3>
	class _Impl_no_alloc4
		: public _Impl_base4<_Rx , _Arg0 , _Arg1, _Arg2 , _Arg3>
	{	
public:
	typedef _Impl_no_alloc4 _Myty;
	typedef ::std:: allocator<_Myty> _Myalty;

	_Impl_no_alloc4(typename _Callable::_MyTy& _Val,
		_Myalty = _Myalty())
		: _Callee(_Val)
		{	
		}

	virtual ~_Impl_no_alloc4()
		{	
		}

	virtual _Impl_base4<_Rx , _Arg0 , _Arg1, _Arg2 , _Arg3> *_Copy(void *_Where)
	{	
	if (_Where == 0)
		{	
		_Myalty _Al;
		_Where = _Al.allocate(1);
		}
	new (_Where) _Impl_no_alloc4(*this);
	return ((_Impl_base4<_Rx , _Arg0 , _Arg1, _Arg2 , _Arg3> *)_Where);
	}

	_Rx _Do_call(_Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2 , _Arg3 _Ax3)
		{	
		return (_Callee.template _ApplyX<_Rx>(_Ax0 , _Ax1, _Ax2 , _Ax3));
		}

	const  type_info& _Target_type() const
		{	
		return (typeid(typename _Callable::_MyTy));
		}

private:
	const void *_Get() const
		{	
		return (&_Callee._Get());
		}

	virtual void _Delete_this(bool _Deallocate)
		{	
		_Myalty _Al;
		_Dest_val(_Al, this);
		if (_Deallocate)
			_Al.deallocate(this, 1);
		}

	_Callable _Callee;
	};

	
template<class _Callable,
	class _Rx , class _Arg0 , class _Arg1, class _Arg2 , class _Arg3,
	class _Alloc>
	class _Impl4
		: public _Impl_no_alloc4<_Callable, _Rx , _Arg0 , _Arg1, _Arg2 , _Arg3>
	{	
public:
	typedef _Impl4 _Myty;
	typedef _Impl_no_alloc4<_Callable, _Rx , _Arg0 , _Arg1, _Arg2 , _Arg3>
		_Mybase;
	typedef typename _Alloc::template rebind<_Myty>::other _Myalty;

	_Impl4(typename _Callable::_MyTy& _Val,
		_Myalty _Ax = _Myalty())
		: _Mybase(_Val), _Myal(_Ax)
		{	
		}

	virtual ~_Impl4()
		{	
		}

	virtual _Impl_base4<_Rx , _Arg0 , _Arg1, _Arg2 , _Arg3> *_Copy(void *_Where)
		{	
		if (_Where == 0)
			_Where = _Myal.allocate(1);
		new (_Where) _Impl4(*this);
		return ((_Impl_base4<_Rx , _Arg0 , _Arg1, _Arg2 , _Arg3> *)_Where);
		}

private:
	virtual void _Delete_this(bool _Deallocate)
		{	
		_Myalty _Al = _Myal;
		_Dest_val(_Al, this);
		if (_Deallocate)
			_Al.deallocate(this, 1);
		}

	_Myalty _Myal;
	};

	
template<class _Ret , class _Arg0 , class _Arg1, class _Arg2 , class _Arg3>
	class _Function_impl4

 

#line 140 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxfunction"

#line 142 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxfunction"

	{	
	typedef _Function_impl4<_Ret , _Arg0 , _Arg1, _Arg2 , _Arg3> _Myty;
	typedef _Impl_base4<_Ret , _Arg0 , _Arg1, _Arg2 , _Arg3> _Ptrt;

public:
	typedef _Ret result_type;

	_Ret operator()(_Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2 , _Arg3 _Ax3) const
		{	
		if (_Impl == 0)
			_Xfunc();
		return (_Impl->_Do_call(_Ax0 , _Ax1, _Ax2 , _Ax3));
		}

	bool _Empty() const
		{	
		return (_Impl == 0);
		}

protected:
	void _Reset()
		{	
		_Set(0);
		}

	void _Reset(const _Myty& _Right)
		{	
		if (_Right._Impl == 0)
			_Set(0);
		else if (_Right._Local())
			_Set(_Right._Impl->_Copy((void *)&_Space));
		else
			_Set(_Right._Impl->_Copy(0));
		}

	void _Resetm(_Myty& _Right)
		{	
		if (_Right._Impl == 0)
			_Set(0);
		else if (_Right._Local())
			_Set(_Right._Impl->_Copy((void *)&_Space));
		else
			{	
			_Set(_Right._Impl);
			_Right._Set(0);
			}
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2 , class _Farg3>
		void _Reset(_Fret (__cdecl *const _Val)(_Farg0 , _Farg1, _Farg2 , _Farg3))
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_fun<_Fret (__cdecl *const)(_Farg0 , _Farg1, _Farg2 , _Farg3)> _MyWrapper;
		typedef _Impl_no_alloc4<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2 , _Arg3>
			_Myimpl;
		_Reset0f<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2 , class _Farg3,
		class _Alloc>
		void _Reset_alloc(_Fret (__cdecl *const _Val)(_Farg0 , _Farg1, _Farg2 , _Farg3), _Alloc _Ax)
		{
		typedef _Callable_fun<_Fret (__cdecl *const)(_Farg0 , _Farg1, _Farg2 , _Farg3)> _MyWrapper;
		typedef _Impl4<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2 , _Arg3, _Alloc> _Myimpl;
		_Reset0f<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1, class _Farg2 , class _Farg3,
		class _Alloc>
		void _Reset0f(_Fret (__cdecl *const _Val)(_Farg0 , _Farg1, _Farg2 , _Farg3), _Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

 






















































































 










































	template<class _Fty>
		void _Reset(_Fty _Val)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_obj<_Fty> _MyWrapper;
		typedef _Impl_no_alloc4<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2 , _Arg3>
			_Myimpl;
		_Reset0o<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fty,
		class _Alloc>
		void _Reset_alloc(_Fty _Val, _Alloc _Ax)
		{
		typedef _Callable_obj<_Fty> _MyWrapper;
		typedef _Impl4<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2 , _Arg3, _Alloc> _Myimpl;
		_Reset0o<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fty,
		class _Alloc>
		void _Reset0o(_Fty _Val, _Alloc _Ax)
		{	
		if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

 











































#line 446 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxfunction"

 
	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2 , class _Farg3>
		void _Reset(_Fret (__thiscall _Farg0::*const _Val)(_Farg1, _Farg2 , _Farg3))
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<_Fret (__thiscall _Farg0::*const)(_Farg1, _Farg2 , _Farg3), _Farg0>
			_MyWrapper;
		typedef _Impl_no_alloc4<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2 , _Arg3>
			_Myimpl;
		_Reset0pmf<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2 , class _Farg3,
		class _Alloc>
		void _Reset_alloc(_Fret (__thiscall _Farg0::*const _Val)(_Farg1, _Farg2 , _Farg3),
			_Alloc _Ax)
		{
		typedef _Callable_pmf<_Fret (__thiscall _Farg0::*const)(_Farg1, _Farg2 , _Farg3), _Farg0>
			_MyWrapper;
		typedef _Impl4<_MyWrapper, _Ret, _Arg0 , _Arg1, _Arg2 , _Arg3, _Alloc> _Myimpl;
		_Reset0pmf<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1, class _Farg2 , class _Farg3,
		class _Alloc>
		void _Reset0pmf(_Fret (__thiscall _Farg0::*const _Val)(_Farg1, _Farg2 , _Farg3),
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2 , class _Farg3>
		void _Reset(_Fret (__thiscall _Farg0::*const _Val)(_Farg1, _Farg2 , _Farg3) const)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<
			_Fret (__thiscall _Farg0::*const)(_Farg1, _Farg2 , _Farg3) const, _Farg0> _MyWrapper;
		typedef _Impl_no_alloc4<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2 , _Arg3>
			_Myimpl;
		_Reset0pmfc<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2 , class _Farg3,
		class _Alloc>
		void _Reset_alloc(_Fret (__thiscall _Farg0::*const _Val)(_Farg1, _Farg2 , _Farg3) const,
			_Alloc _Ax)
		{
		typedef _Callable_pmf<
			_Fret (__thiscall _Farg0::*const)(_Farg1, _Farg2 , _Farg3) const, _Farg0> _MyWrapper;
		typedef _Impl4<_MyWrapper, _Ret, _Arg0 , _Arg1, _Arg2 , _Arg3, _Alloc> _Myimpl;
		_Reset0pmfc<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1, class _Farg2 , class _Farg3,
		class _Alloc>
		void _Reset0pmfc(_Fret (__thiscall _Farg0::*const _Val)(_Farg1, _Farg2 , _Farg3) const,
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2 , class _Farg3>
		void _Reset(_Fret (__thiscall _Farg0::*const _Val)(_Farg1, _Farg2 , _Farg3) volatile)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<
			_Fret (__thiscall _Farg0::*const)(_Farg1, _Farg2 , _Farg3) volatile, _Farg0> _MyWrapper;
		typedef _Impl_no_alloc4<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2 , _Arg3>
			_Myimpl;
		_Reset0pmfv<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2 , class _Farg3,
		class _Alloc>
		void _Reset_alloc(_Fret (__thiscall _Farg0::*const _Val)(_Farg1, _Farg2 , _Farg3) volatile,
			_Alloc _Ax)
		{
		typedef _Callable_pmf<
			_Fret (__thiscall _Farg0::*const)(_Farg1, _Farg2 , _Farg3) volatile, _Farg0> _MyWrapper;
		typedef _Impl4<_MyWrapper, _Ret, _Arg0 , _Arg1, _Arg2 , _Arg3, _Alloc> _Myimpl;
		_Reset0pmfv<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1, class _Farg2 , class _Farg3,
		class _Alloc>
		void _Reset0pmfv(_Fret (__thiscall _Farg0::*const _Val)(_Farg1, _Farg2 , _Farg3) volatile,
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2 , class _Farg3>
		void _Reset(_Fret (__thiscall _Farg0::*const _Val)(_Farg1, _Farg2 , _Farg3) const volatile)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<
			_Fret (__thiscall _Farg0::*const)(_Farg1, _Farg2 , _Farg3) const volatile, _Farg0>
			_MyWrapper;
		typedef _Impl_no_alloc4<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2 , _Arg3>
			_Myimpl;
		_Reset0pmfcv<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2 , class _Farg3,
		class _Alloc>
		void _Reset_alloc(
			_Fret (__thiscall _Farg0::*const _Val)(_Farg1, _Farg2 , _Farg3) const volatile,
			_Alloc _Ax)
		{
		typedef _Callable_pmf<
			_Fret (__thiscall _Farg0::*const)(_Farg1, _Farg2 , _Farg3) const volatile, _Farg0>
			_MyWrapper;
		typedef _Impl4<_MyWrapper, _Ret, _Arg0 , _Arg1, _Arg2 , _Arg3, _Alloc> _Myimpl;
		_Reset0pmfcv<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1, class _Farg2 , class _Farg3,
		class _Alloc>
		void _Reset0pmfcv(
			_Fret (__thiscall _Farg0::*const _Val)(_Farg1, _Farg2 , _Farg3) const volatile,
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

 












































































































































































































































































































































































































































































































































































 

























































































































































































 #line 1376 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxfunction"

	void _Tidy()
		{	
		if (_Impl != 0)
			{	
			_Impl->_Delete_this(!_Local());
			_Impl = 0;
			}
		}

	void _Swap(_Myty& _Right)
		{	
		if (this == &_Right)
			;	
		else if (_Local())
			if (_Right._Local())
				{	
				_Myty _Temp;
				_Temp._Reset(*this);
				_Tidy();
				_Reset(_Right);
				_Right._Tidy();
				_Right._Reset(_Temp);
				_Temp._Tidy();
				}
			else
				{	
				_Ptrt *_Temp = _Right._Impl;
				_Right._Reset(*this);
				_Tidy();
				_Set(_Temp);
				}
		else
			if (_Right._Local())
				{	
				_Ptrt *_Temp = _Impl;
				_Reset(_Right);
				_Right._Tidy();
				_Right._Set(_Temp);
				}
			else
				::std:: swap(_Impl, _Right._Impl);	
		}

	const  type_info& _Target_type() const
		{	
		return (_Impl ? _Impl->_Target_type() : typeid(void));
		}

	const void *_Target(const  type_info& _Info) const
		{	
		return (_Impl ? _Impl->_Target(_Info) : 0);
		}

private:
	bool _Local() const
		{	
		return ((void *)_Impl == (void *)&_Space);
		}

	void _Set(_Ptrt *_Ptr)
		{	
		_Impl = _Ptr;
		}

	typedef void (*_Pfnty)();
	union _Space_union
		{	
		_Pfnty _Pfn[3];
		void *_Pobj[3];
		long double _Ldbl;	
		char _Alias[3 * sizeof (void *)];	
		} _Space;

	_Ptrt *_Impl;
	};

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2 , class _Arg3>
	struct _Get_function_impl<_Ret(_Arg0 , _Arg1, _Arg2 , _Arg3)>
	{	
	typedef _Function_impl4<_Ret , _Arg0 , _Arg1, _Arg2 , _Arg3> _Type;
	};











#line 262 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 33 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 47 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 









































#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxfunction"








	
template<class _Rx , class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4>
	class _Impl_base5
	{	
public:
	virtual _Impl_base5 *_Copy(void *) = 0;
	virtual _Rx _Do_call(_Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3 , _Arg4 _Ax4) = 0;
	virtual const  type_info& _Target_type() const = 0;
	virtual void _Delete_this(bool) = 0;

	const void *_Target(const  type_info& _Info) const
		{	
		return (_Target_type() == _Info ? _Get() : 0);
		}

	virtual ~_Impl_base5()
		{	
		}

private:
	virtual const void *_Get() const = 0;
	};

	
template<class _Callable,
	class _Rx , class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4>
	class _Impl_no_alloc5
		: public _Impl_base5<_Rx , _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4>
	{	
public:
	typedef _Impl_no_alloc5 _Myty;
	typedef ::std:: allocator<_Myty> _Myalty;

	_Impl_no_alloc5(typename _Callable::_MyTy& _Val,
		_Myalty = _Myalty())
		: _Callee(_Val)
		{	
		}

	virtual ~_Impl_no_alloc5()
		{	
		}

	virtual _Impl_base5<_Rx , _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4> *_Copy(void *_Where)
	{	
	if (_Where == 0)
		{	
		_Myalty _Al;
		_Where = _Al.allocate(1);
		}
	new (_Where) _Impl_no_alloc5(*this);
	return ((_Impl_base5<_Rx , _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4> *)_Where);
	}

	_Rx _Do_call(_Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3 , _Arg4 _Ax4)
		{	
		return (_Callee.template _ApplyX<_Rx>(_Ax0 , _Ax1, _Ax2, _Ax3 , _Ax4));
		}

	const  type_info& _Target_type() const
		{	
		return (typeid(typename _Callable::_MyTy));
		}

private:
	const void *_Get() const
		{	
		return (&_Callee._Get());
		}

	virtual void _Delete_this(bool _Deallocate)
		{	
		_Myalty _Al;
		_Dest_val(_Al, this);
		if (_Deallocate)
			_Al.deallocate(this, 1);
		}

	_Callable _Callee;
	};

	
template<class _Callable,
	class _Rx , class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4,
	class _Alloc>
	class _Impl5
		: public _Impl_no_alloc5<_Callable, _Rx , _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4>
	{	
public:
	typedef _Impl5 _Myty;
	typedef _Impl_no_alloc5<_Callable, _Rx , _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4>
		_Mybase;
	typedef typename _Alloc::template rebind<_Myty>::other _Myalty;

	_Impl5(typename _Callable::_MyTy& _Val,
		_Myalty _Ax = _Myalty())
		: _Mybase(_Val), _Myal(_Ax)
		{	
		}

	virtual ~_Impl5()
		{	
		}

	virtual _Impl_base5<_Rx , _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4> *_Copy(void *_Where)
		{	
		if (_Where == 0)
			_Where = _Myal.allocate(1);
		new (_Where) _Impl5(*this);
		return ((_Impl_base5<_Rx , _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4> *)_Where);
		}

private:
	virtual void _Delete_this(bool _Deallocate)
		{	
		_Myalty _Al = _Myal;
		_Dest_val(_Al, this);
		if (_Deallocate)
			_Al.deallocate(this, 1);
		}

	_Myalty _Myal;
	};

	
template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4>
	class _Function_impl5

 

#line 140 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxfunction"

#line 142 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxfunction"

	{	
	typedef _Function_impl5<_Ret , _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4> _Myty;
	typedef _Impl_base5<_Ret , _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4> _Ptrt;

public:
	typedef _Ret result_type;

	_Ret operator()(_Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3 , _Arg4 _Ax4) const
		{	
		if (_Impl == 0)
			_Xfunc();
		return (_Impl->_Do_call(_Ax0 , _Ax1, _Ax2, _Ax3 , _Ax4));
		}

	bool _Empty() const
		{	
		return (_Impl == 0);
		}

protected:
	void _Reset()
		{	
		_Set(0);
		}

	void _Reset(const _Myty& _Right)
		{	
		if (_Right._Impl == 0)
			_Set(0);
		else if (_Right._Local())
			_Set(_Right._Impl->_Copy((void *)&_Space));
		else
			_Set(_Right._Impl->_Copy(0));
		}

	void _Resetm(_Myty& _Right)
		{	
		if (_Right._Impl == 0)
			_Set(0);
		else if (_Right._Local())
			_Set(_Right._Impl->_Copy((void *)&_Space));
		else
			{	
			_Set(_Right._Impl);
			_Right._Set(0);
			}
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4>
		void _Reset(_Fret (__cdecl *const _Val)(_Farg0 , _Farg1, _Farg2, _Farg3 , _Farg4))
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_fun<_Fret (__cdecl *const)(_Farg0 , _Farg1, _Farg2, _Farg3 , _Farg4)> _MyWrapper;
		typedef _Impl_no_alloc5<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4>
			_Myimpl;
		_Reset0f<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4,
		class _Alloc>
		void _Reset_alloc(_Fret (__cdecl *const _Val)(_Farg0 , _Farg1, _Farg2, _Farg3 , _Farg4), _Alloc _Ax)
		{
		typedef _Callable_fun<_Fret (__cdecl *const)(_Farg0 , _Farg1, _Farg2, _Farg3 , _Farg4)> _MyWrapper;
		typedef _Impl5<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4, _Alloc> _Myimpl;
		_Reset0f<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4,
		class _Alloc>
		void _Reset0f(_Fret (__cdecl *const _Val)(_Farg0 , _Farg1, _Farg2, _Farg3 , _Farg4), _Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

 






















































































 










































	template<class _Fty>
		void _Reset(_Fty _Val)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_obj<_Fty> _MyWrapper;
		typedef _Impl_no_alloc5<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4>
			_Myimpl;
		_Reset0o<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fty,
		class _Alloc>
		void _Reset_alloc(_Fty _Val, _Alloc _Ax)
		{
		typedef _Callable_obj<_Fty> _MyWrapper;
		typedef _Impl5<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4, _Alloc> _Myimpl;
		_Reset0o<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fty,
		class _Alloc>
		void _Reset0o(_Fty _Val, _Alloc _Ax)
		{	
		if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

 











































#line 446 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxfunction"

 
	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4>
		void _Reset(_Fret (__thiscall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3 , _Farg4))
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<_Fret (__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3 , _Farg4), _Farg0>
			_MyWrapper;
		typedef _Impl_no_alloc5<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4>
			_Myimpl;
		_Reset0pmf<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4,
		class _Alloc>
		void _Reset_alloc(_Fret (__thiscall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3 , _Farg4),
			_Alloc _Ax)
		{
		typedef _Callable_pmf<_Fret (__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3 , _Farg4), _Farg0>
			_MyWrapper;
		typedef _Impl5<_MyWrapper, _Ret, _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4, _Alloc> _Myimpl;
		_Reset0pmf<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4,
		class _Alloc>
		void _Reset0pmf(_Fret (__thiscall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3 , _Farg4),
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4>
		void _Reset(_Fret (__thiscall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3 , _Farg4) const)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<
			_Fret (__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3 , _Farg4) const, _Farg0> _MyWrapper;
		typedef _Impl_no_alloc5<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4>
			_Myimpl;
		_Reset0pmfc<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4,
		class _Alloc>
		void _Reset_alloc(_Fret (__thiscall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3 , _Farg4) const,
			_Alloc _Ax)
		{
		typedef _Callable_pmf<
			_Fret (__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3 , _Farg4) const, _Farg0> _MyWrapper;
		typedef _Impl5<_MyWrapper, _Ret, _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4, _Alloc> _Myimpl;
		_Reset0pmfc<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4,
		class _Alloc>
		void _Reset0pmfc(_Fret (__thiscall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3 , _Farg4) const,
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4>
		void _Reset(_Fret (__thiscall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3 , _Farg4) volatile)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<
			_Fret (__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3 , _Farg4) volatile, _Farg0> _MyWrapper;
		typedef _Impl_no_alloc5<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4>
			_Myimpl;
		_Reset0pmfv<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4,
		class _Alloc>
		void _Reset_alloc(_Fret (__thiscall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3 , _Farg4) volatile,
			_Alloc _Ax)
		{
		typedef _Callable_pmf<
			_Fret (__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3 , _Farg4) volatile, _Farg0> _MyWrapper;
		typedef _Impl5<_MyWrapper, _Ret, _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4, _Alloc> _Myimpl;
		_Reset0pmfv<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4,
		class _Alloc>
		void _Reset0pmfv(_Fret (__thiscall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3 , _Farg4) volatile,
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4>
		void _Reset(_Fret (__thiscall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3 , _Farg4) const volatile)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<
			_Fret (__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3 , _Farg4) const volatile, _Farg0>
			_MyWrapper;
		typedef _Impl_no_alloc5<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4>
			_Myimpl;
		_Reset0pmfcv<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4,
		class _Alloc>
		void _Reset_alloc(
			_Fret (__thiscall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3 , _Farg4) const volatile,
			_Alloc _Ax)
		{
		typedef _Callable_pmf<
			_Fret (__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3 , _Farg4) const volatile, _Farg0>
			_MyWrapper;
		typedef _Impl5<_MyWrapper, _Ret, _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4, _Alloc> _Myimpl;
		_Reset0pmfcv<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4,
		class _Alloc>
		void _Reset0pmfcv(
			_Fret (__thiscall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3 , _Farg4) const volatile,
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

 












































































































































































































































































































































































































































































































































































 

























































































































































































 #line 1376 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxfunction"

	void _Tidy()
		{	
		if (_Impl != 0)
			{	
			_Impl->_Delete_this(!_Local());
			_Impl = 0;
			}
		}

	void _Swap(_Myty& _Right)
		{	
		if (this == &_Right)
			;	
		else if (_Local())
			if (_Right._Local())
				{	
				_Myty _Temp;
				_Temp._Reset(*this);
				_Tidy();
				_Reset(_Right);
				_Right._Tidy();
				_Right._Reset(_Temp);
				_Temp._Tidy();
				}
			else
				{	
				_Ptrt *_Temp = _Right._Impl;
				_Right._Reset(*this);
				_Tidy();
				_Set(_Temp);
				}
		else
			if (_Right._Local())
				{	
				_Ptrt *_Temp = _Impl;
				_Reset(_Right);
				_Right._Tidy();
				_Right._Set(_Temp);
				}
			else
				::std:: swap(_Impl, _Right._Impl);	
		}

	const  type_info& _Target_type() const
		{	
		return (_Impl ? _Impl->_Target_type() : typeid(void));
		}

	const void *_Target(const  type_info& _Info) const
		{	
		return (_Impl ? _Impl->_Target(_Info) : 0);
		}

private:
	bool _Local() const
		{	
		return ((void *)_Impl == (void *)&_Space);
		}

	void _Set(_Ptrt *_Ptr)
		{	
		_Impl = _Ptr;
		}

	typedef void (*_Pfnty)();
	union _Space_union
		{	
		_Pfnty _Pfn[3];
		void *_Pobj[3];
		long double _Ldbl;	
		char _Alias[3 * sizeof (void *)];	
		} _Space;

	_Ptrt *_Impl;
	};

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4>
	struct _Get_function_impl<_Ret(_Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4)>
	{	
	typedef _Function_impl5<_Ret , _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4> _Type;
	};











#line 262 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 37 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 47 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 55 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

































#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxfunction"








	
template<class _Rx , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5>
	class _Impl_base6
	{	
public:
	virtual _Impl_base6 *_Copy(void *) = 0;
	virtual _Rx _Do_call(_Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4 , _Arg5 _Ax5) = 0;
	virtual const  type_info& _Target_type() const = 0;
	virtual void _Delete_this(bool) = 0;

	const void *_Target(const  type_info& _Info) const
		{	
		return (_Target_type() == _Info ? _Get() : 0);
		}

	virtual ~_Impl_base6()
		{	
		}

private:
	virtual const void *_Get() const = 0;
	};

	
template<class _Callable,
	class _Rx , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5>
	class _Impl_no_alloc6
		: public _Impl_base6<_Rx , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5>
	{	
public:
	typedef _Impl_no_alloc6 _Myty;
	typedef ::std:: allocator<_Myty> _Myalty;

	_Impl_no_alloc6(typename _Callable::_MyTy& _Val,
		_Myalty = _Myalty())
		: _Callee(_Val)
		{	
		}

	virtual ~_Impl_no_alloc6()
		{	
		}

	virtual _Impl_base6<_Rx , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5> *_Copy(void *_Where)
	{	
	if (_Where == 0)
		{	
		_Myalty _Al;
		_Where = _Al.allocate(1);
		}
	new (_Where) _Impl_no_alloc6(*this);
	return ((_Impl_base6<_Rx , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5> *)_Where);
	}

	_Rx _Do_call(_Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4 , _Arg5 _Ax5)
		{	
		return (_Callee.template _ApplyX<_Rx>(_Ax0 , _Ax1, _Ax2, _Ax3, _Ax4 , _Ax5));
		}

	const  type_info& _Target_type() const
		{	
		return (typeid(typename _Callable::_MyTy));
		}

private:
	const void *_Get() const
		{	
		return (&_Callee._Get());
		}

	virtual void _Delete_this(bool _Deallocate)
		{	
		_Myalty _Al;
		_Dest_val(_Al, this);
		if (_Deallocate)
			_Al.deallocate(this, 1);
		}

	_Callable _Callee;
	};

	
template<class _Callable,
	class _Rx , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5,
	class _Alloc>
	class _Impl6
		: public _Impl_no_alloc6<_Callable, _Rx , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5>
	{	
public:
	typedef _Impl6 _Myty;
	typedef _Impl_no_alloc6<_Callable, _Rx , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5>
		_Mybase;
	typedef typename _Alloc::template rebind<_Myty>::other _Myalty;

	_Impl6(typename _Callable::_MyTy& _Val,
		_Myalty _Ax = _Myalty())
		: _Mybase(_Val), _Myal(_Ax)
		{	
		}

	virtual ~_Impl6()
		{	
		}

	virtual _Impl_base6<_Rx , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5> *_Copy(void *_Where)
		{	
		if (_Where == 0)
			_Where = _Myal.allocate(1);
		new (_Where) _Impl6(*this);
		return ((_Impl_base6<_Rx , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5> *)_Where);
		}

private:
	virtual void _Delete_this(bool _Deallocate)
		{	
		_Myalty _Al = _Myal;
		_Dest_val(_Al, this);
		if (_Deallocate)
			_Al.deallocate(this, 1);
		}

	_Myalty _Myal;
	};

	
template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5>
	class _Function_impl6

 

#line 140 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxfunction"

#line 142 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxfunction"

	{	
	typedef _Function_impl6<_Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5> _Myty;
	typedef _Impl_base6<_Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5> _Ptrt;

public:
	typedef _Ret result_type;

	_Ret operator()(_Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4 , _Arg5 _Ax5) const
		{	
		if (_Impl == 0)
			_Xfunc();
		return (_Impl->_Do_call(_Ax0 , _Ax1, _Ax2, _Ax3, _Ax4 , _Ax5));
		}

	bool _Empty() const
		{	
		return (_Impl == 0);
		}

protected:
	void _Reset()
		{	
		_Set(0);
		}

	void _Reset(const _Myty& _Right)
		{	
		if (_Right._Impl == 0)
			_Set(0);
		else if (_Right._Local())
			_Set(_Right._Impl->_Copy((void *)&_Space));
		else
			_Set(_Right._Impl->_Copy(0));
		}

	void _Resetm(_Myty& _Right)
		{	
		if (_Right._Impl == 0)
			_Set(0);
		else if (_Right._Local())
			_Set(_Right._Impl->_Copy((void *)&_Space));
		else
			{	
			_Set(_Right._Impl);
			_Right._Set(0);
			}
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5>
		void _Reset(_Fret (__cdecl *const _Val)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4 , _Farg5))
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_fun<_Fret (__cdecl *const)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4 , _Farg5)> _MyWrapper;
		typedef _Impl_no_alloc6<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5>
			_Myimpl;
		_Reset0f<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5,
		class _Alloc>
		void _Reset_alloc(_Fret (__cdecl *const _Val)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4 , _Farg5), _Alloc _Ax)
		{
		typedef _Callable_fun<_Fret (__cdecl *const)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4 , _Farg5)> _MyWrapper;
		typedef _Impl6<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5, _Alloc> _Myimpl;
		_Reset0f<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5,
		class _Alloc>
		void _Reset0f(_Fret (__cdecl *const _Val)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4 , _Farg5), _Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

 






















































































 










































	template<class _Fty>
		void _Reset(_Fty _Val)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_obj<_Fty> _MyWrapper;
		typedef _Impl_no_alloc6<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5>
			_Myimpl;
		_Reset0o<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fty,
		class _Alloc>
		void _Reset_alloc(_Fty _Val, _Alloc _Ax)
		{
		typedef _Callable_obj<_Fty> _MyWrapper;
		typedef _Impl6<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5, _Alloc> _Myimpl;
		_Reset0o<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fty,
		class _Alloc>
		void _Reset0o(_Fty _Val, _Alloc _Ax)
		{	
		if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

 











































#line 446 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxfunction"

 
	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5>
		void _Reset(_Fret (__thiscall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5))
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<_Fret (__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5), _Farg0>
			_MyWrapper;
		typedef _Impl_no_alloc6<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5>
			_Myimpl;
		_Reset0pmf<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5,
		class _Alloc>
		void _Reset_alloc(_Fret (__thiscall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5),
			_Alloc _Ax)
		{
		typedef _Callable_pmf<_Fret (__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5), _Farg0>
			_MyWrapper;
		typedef _Impl6<_MyWrapper, _Ret, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5, _Alloc> _Myimpl;
		_Reset0pmf<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5,
		class _Alloc>
		void _Reset0pmf(_Fret (__thiscall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5),
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5>
		void _Reset(_Fret (__thiscall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) const)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<
			_Fret (__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) const, _Farg0> _MyWrapper;
		typedef _Impl_no_alloc6<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5>
			_Myimpl;
		_Reset0pmfc<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5,
		class _Alloc>
		void _Reset_alloc(_Fret (__thiscall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) const,
			_Alloc _Ax)
		{
		typedef _Callable_pmf<
			_Fret (__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) const, _Farg0> _MyWrapper;
		typedef _Impl6<_MyWrapper, _Ret, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5, _Alloc> _Myimpl;
		_Reset0pmfc<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5,
		class _Alloc>
		void _Reset0pmfc(_Fret (__thiscall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) const,
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5>
		void _Reset(_Fret (__thiscall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) volatile)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<
			_Fret (__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) volatile, _Farg0> _MyWrapper;
		typedef _Impl_no_alloc6<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5>
			_Myimpl;
		_Reset0pmfv<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5,
		class _Alloc>
		void _Reset_alloc(_Fret (__thiscall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) volatile,
			_Alloc _Ax)
		{
		typedef _Callable_pmf<
			_Fret (__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) volatile, _Farg0> _MyWrapper;
		typedef _Impl6<_MyWrapper, _Ret, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5, _Alloc> _Myimpl;
		_Reset0pmfv<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5,
		class _Alloc>
		void _Reset0pmfv(_Fret (__thiscall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) volatile,
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5>
		void _Reset(_Fret (__thiscall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) const volatile)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<
			_Fret (__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) const volatile, _Farg0>
			_MyWrapper;
		typedef _Impl_no_alloc6<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5>
			_Myimpl;
		_Reset0pmfcv<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5,
		class _Alloc>
		void _Reset_alloc(
			_Fret (__thiscall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) const volatile,
			_Alloc _Ax)
		{
		typedef _Callable_pmf<
			_Fret (__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) const volatile, _Farg0>
			_MyWrapper;
		typedef _Impl6<_MyWrapper, _Ret, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5, _Alloc> _Myimpl;
		_Reset0pmfcv<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5,
		class _Alloc>
		void _Reset0pmfcv(
			_Fret (__thiscall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) const volatile,
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

 












































































































































































































































































































































































































































































































































































 

























































































































































































 #line 1376 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxfunction"

	void _Tidy()
		{	
		if (_Impl != 0)
			{	
			_Impl->_Delete_this(!_Local());
			_Impl = 0;
			}
		}

	void _Swap(_Myty& _Right)
		{	
		if (this == &_Right)
			;	
		else if (_Local())
			if (_Right._Local())
				{	
				_Myty _Temp;
				_Temp._Reset(*this);
				_Tidy();
				_Reset(_Right);
				_Right._Tidy();
				_Right._Reset(_Temp);
				_Temp._Tidy();
				}
			else
				{	
				_Ptrt *_Temp = _Right._Impl;
				_Right._Reset(*this);
				_Tidy();
				_Set(_Temp);
				}
		else
			if (_Right._Local())
				{	
				_Ptrt *_Temp = _Impl;
				_Reset(_Right);
				_Right._Tidy();
				_Right._Set(_Temp);
				}
			else
				::std:: swap(_Impl, _Right._Impl);	
		}

	const  type_info& _Target_type() const
		{	
		return (_Impl ? _Impl->_Target_type() : typeid(void));
		}

	const void *_Target(const  type_info& _Info) const
		{	
		return (_Impl ? _Impl->_Target(_Info) : 0);
		}

private:
	bool _Local() const
		{	
		return ((void *)_Impl == (void *)&_Space);
		}

	void _Set(_Ptrt *_Ptr)
		{	
		_Impl = _Ptr;
		}

	typedef void (*_Pfnty)();
	union _Space_union
		{	
		_Pfnty _Pfn[3];
		void *_Pobj[3];
		long double _Ldbl;	
		char _Alias[3 * sizeof (void *)];	
		} _Space;

	_Ptrt *_Impl;
	};

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5>
	struct _Get_function_impl<_Ret(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5)>
	{	
	typedef _Function_impl6<_Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5> _Type;
	};











#line 262 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 41 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 47 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 55 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 63 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

























#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxfunction"








	
template<class _Rx , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6>
	class _Impl_base7
	{	
public:
	virtual _Impl_base7 *_Copy(void *) = 0;
	virtual _Rx _Do_call(_Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5 , _Arg6 _Ax6) = 0;
	virtual const  type_info& _Target_type() const = 0;
	virtual void _Delete_this(bool) = 0;

	const void *_Target(const  type_info& _Info) const
		{	
		return (_Target_type() == _Info ? _Get() : 0);
		}

	virtual ~_Impl_base7()
		{	
		}

private:
	virtual const void *_Get() const = 0;
	};

	
template<class _Callable,
	class _Rx , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6>
	class _Impl_no_alloc7
		: public _Impl_base7<_Rx , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6>
	{	
public:
	typedef _Impl_no_alloc7 _Myty;
	typedef ::std:: allocator<_Myty> _Myalty;

	_Impl_no_alloc7(typename _Callable::_MyTy& _Val,
		_Myalty = _Myalty())
		: _Callee(_Val)
		{	
		}

	virtual ~_Impl_no_alloc7()
		{	
		}

	virtual _Impl_base7<_Rx , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6> *_Copy(void *_Where)
	{	
	if (_Where == 0)
		{	
		_Myalty _Al;
		_Where = _Al.allocate(1);
		}
	new (_Where) _Impl_no_alloc7(*this);
	return ((_Impl_base7<_Rx , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6> *)_Where);
	}

	_Rx _Do_call(_Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5 , _Arg6 _Ax6)
		{	
		return (_Callee.template _ApplyX<_Rx>(_Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5 , _Ax6));
		}

	const  type_info& _Target_type() const
		{	
		return (typeid(typename _Callable::_MyTy));
		}

private:
	const void *_Get() const
		{	
		return (&_Callee._Get());
		}

	virtual void _Delete_this(bool _Deallocate)
		{	
		_Myalty _Al;
		_Dest_val(_Al, this);
		if (_Deallocate)
			_Al.deallocate(this, 1);
		}

	_Callable _Callee;
	};

	
template<class _Callable,
	class _Rx , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6,
	class _Alloc>
	class _Impl7
		: public _Impl_no_alloc7<_Callable, _Rx , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6>
	{	
public:
	typedef _Impl7 _Myty;
	typedef _Impl_no_alloc7<_Callable, _Rx , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6>
		_Mybase;
	typedef typename _Alloc::template rebind<_Myty>::other _Myalty;

	_Impl7(typename _Callable::_MyTy& _Val,
		_Myalty _Ax = _Myalty())
		: _Mybase(_Val), _Myal(_Ax)
		{	
		}

	virtual ~_Impl7()
		{	
		}

	virtual _Impl_base7<_Rx , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6> *_Copy(void *_Where)
		{	
		if (_Where == 0)
			_Where = _Myal.allocate(1);
		new (_Where) _Impl7(*this);
		return ((_Impl_base7<_Rx , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6> *)_Where);
		}

private:
	virtual void _Delete_this(bool _Deallocate)
		{	
		_Myalty _Al = _Myal;
		_Dest_val(_Al, this);
		if (_Deallocate)
			_Al.deallocate(this, 1);
		}

	_Myalty _Myal;
	};

	
template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6>
	class _Function_impl7

 

#line 140 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxfunction"

#line 142 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxfunction"

	{	
	typedef _Function_impl7<_Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6> _Myty;
	typedef _Impl_base7<_Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6> _Ptrt;

public:
	typedef _Ret result_type;

	_Ret operator()(_Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5 , _Arg6 _Ax6) const
		{	
		if (_Impl == 0)
			_Xfunc();
		return (_Impl->_Do_call(_Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5 , _Ax6));
		}

	bool _Empty() const
		{	
		return (_Impl == 0);
		}

protected:
	void _Reset()
		{	
		_Set(0);
		}

	void _Reset(const _Myty& _Right)
		{	
		if (_Right._Impl == 0)
			_Set(0);
		else if (_Right._Local())
			_Set(_Right._Impl->_Copy((void *)&_Space));
		else
			_Set(_Right._Impl->_Copy(0));
		}

	void _Resetm(_Myty& _Right)
		{	
		if (_Right._Impl == 0)
			_Set(0);
		else if (_Right._Local())
			_Set(_Right._Impl->_Copy((void *)&_Space));
		else
			{	
			_Set(_Right._Impl);
			_Right._Set(0);
			}
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6>
		void _Reset(_Fret (__cdecl *const _Val)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6))
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_fun<_Fret (__cdecl *const)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6)> _MyWrapper;
		typedef _Impl_no_alloc7<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6>
			_Myimpl;
		_Reset0f<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6,
		class _Alloc>
		void _Reset_alloc(_Fret (__cdecl *const _Val)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6), _Alloc _Ax)
		{
		typedef _Callable_fun<_Fret (__cdecl *const)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6)> _MyWrapper;
		typedef _Impl7<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6, _Alloc> _Myimpl;
		_Reset0f<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6,
		class _Alloc>
		void _Reset0f(_Fret (__cdecl *const _Val)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6), _Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

 






















































































 










































	template<class _Fty>
		void _Reset(_Fty _Val)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_obj<_Fty> _MyWrapper;
		typedef _Impl_no_alloc7<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6>
			_Myimpl;
		_Reset0o<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fty,
		class _Alloc>
		void _Reset_alloc(_Fty _Val, _Alloc _Ax)
		{
		typedef _Callable_obj<_Fty> _MyWrapper;
		typedef _Impl7<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6, _Alloc> _Myimpl;
		_Reset0o<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fty,
		class _Alloc>
		void _Reset0o(_Fty _Val, _Alloc _Ax)
		{	
		if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

 











































#line 446 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxfunction"

 
	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6>
		void _Reset(_Fret (__thiscall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6))
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<_Fret (__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6), _Farg0>
			_MyWrapper;
		typedef _Impl_no_alloc7<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6>
			_Myimpl;
		_Reset0pmf<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6,
		class _Alloc>
		void _Reset_alloc(_Fret (__thiscall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6),
			_Alloc _Ax)
		{
		typedef _Callable_pmf<_Fret (__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6), _Farg0>
			_MyWrapper;
		typedef _Impl7<_MyWrapper, _Ret, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6, _Alloc> _Myimpl;
		_Reset0pmf<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6,
		class _Alloc>
		void _Reset0pmf(_Fret (__thiscall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6),
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6>
		void _Reset(_Fret (__thiscall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) const)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<
			_Fret (__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) const, _Farg0> _MyWrapper;
		typedef _Impl_no_alloc7<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6>
			_Myimpl;
		_Reset0pmfc<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6,
		class _Alloc>
		void _Reset_alloc(_Fret (__thiscall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) const,
			_Alloc _Ax)
		{
		typedef _Callable_pmf<
			_Fret (__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) const, _Farg0> _MyWrapper;
		typedef _Impl7<_MyWrapper, _Ret, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6, _Alloc> _Myimpl;
		_Reset0pmfc<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6,
		class _Alloc>
		void _Reset0pmfc(_Fret (__thiscall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) const,
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6>
		void _Reset(_Fret (__thiscall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) volatile)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<
			_Fret (__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) volatile, _Farg0> _MyWrapper;
		typedef _Impl_no_alloc7<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6>
			_Myimpl;
		_Reset0pmfv<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6,
		class _Alloc>
		void _Reset_alloc(_Fret (__thiscall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) volatile,
			_Alloc _Ax)
		{
		typedef _Callable_pmf<
			_Fret (__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) volatile, _Farg0> _MyWrapper;
		typedef _Impl7<_MyWrapper, _Ret, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6, _Alloc> _Myimpl;
		_Reset0pmfv<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6,
		class _Alloc>
		void _Reset0pmfv(_Fret (__thiscall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) volatile,
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6>
		void _Reset(_Fret (__thiscall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) const volatile)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<
			_Fret (__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) const volatile, _Farg0>
			_MyWrapper;
		typedef _Impl_no_alloc7<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6>
			_Myimpl;
		_Reset0pmfcv<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6,
		class _Alloc>
		void _Reset_alloc(
			_Fret (__thiscall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) const volatile,
			_Alloc _Ax)
		{
		typedef _Callable_pmf<
			_Fret (__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) const volatile, _Farg0>
			_MyWrapper;
		typedef _Impl7<_MyWrapper, _Ret, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6, _Alloc> _Myimpl;
		_Reset0pmfcv<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6,
		class _Alloc>
		void _Reset0pmfcv(
			_Fret (__thiscall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) const volatile,
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

 












































































































































































































































































































































































































































































































































































 

























































































































































































 #line 1376 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxfunction"

	void _Tidy()
		{	
		if (_Impl != 0)
			{	
			_Impl->_Delete_this(!_Local());
			_Impl = 0;
			}
		}

	void _Swap(_Myty& _Right)
		{	
		if (this == &_Right)
			;	
		else if (_Local())
			if (_Right._Local())
				{	
				_Myty _Temp;
				_Temp._Reset(*this);
				_Tidy();
				_Reset(_Right);
				_Right._Tidy();
				_Right._Reset(_Temp);
				_Temp._Tidy();
				}
			else
				{	
				_Ptrt *_Temp = _Right._Impl;
				_Right._Reset(*this);
				_Tidy();
				_Set(_Temp);
				}
		else
			if (_Right._Local())
				{	
				_Ptrt *_Temp = _Impl;
				_Reset(_Right);
				_Right._Tidy();
				_Right._Set(_Temp);
				}
			else
				::std:: swap(_Impl, _Right._Impl);	
		}

	const  type_info& _Target_type() const
		{	
		return (_Impl ? _Impl->_Target_type() : typeid(void));
		}

	const void *_Target(const  type_info& _Info) const
		{	
		return (_Impl ? _Impl->_Target(_Info) : 0);
		}

private:
	bool _Local() const
		{	
		return ((void *)_Impl == (void *)&_Space);
		}

	void _Set(_Ptrt *_Ptr)
		{	
		_Impl = _Ptr;
		}

	typedef void (*_Pfnty)();
	union _Space_union
		{	
		_Pfnty _Pfn[3];
		void *_Pobj[3];
		long double _Ldbl;	
		char _Alias[3 * sizeof (void *)];	
		} _Space;

	_Ptrt *_Impl;
	};

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6>
	struct _Get_function_impl<_Ret(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6)>
	{	
	typedef _Function_impl7<_Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6> _Type;
	};











#line 262 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 45 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 47 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 55 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 63 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 71 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

















#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxfunction"








	
template<class _Rx , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7>
	class _Impl_base8
	{	
public:
	virtual _Impl_base8 *_Copy(void *) = 0;
	virtual _Rx _Do_call(_Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6 , _Arg7 _Ax7) = 0;
	virtual const  type_info& _Target_type() const = 0;
	virtual void _Delete_this(bool) = 0;

	const void *_Target(const  type_info& _Info) const
		{	
		return (_Target_type() == _Info ? _Get() : 0);
		}

	virtual ~_Impl_base8()
		{	
		}

private:
	virtual const void *_Get() const = 0;
	};

	
template<class _Callable,
	class _Rx , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7>
	class _Impl_no_alloc8
		: public _Impl_base8<_Rx , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7>
	{	
public:
	typedef _Impl_no_alloc8 _Myty;
	typedef ::std:: allocator<_Myty> _Myalty;

	_Impl_no_alloc8(typename _Callable::_MyTy& _Val,
		_Myalty = _Myalty())
		: _Callee(_Val)
		{	
		}

	virtual ~_Impl_no_alloc8()
		{	
		}

	virtual _Impl_base8<_Rx , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7> *_Copy(void *_Where)
	{	
	if (_Where == 0)
		{	
		_Myalty _Al;
		_Where = _Al.allocate(1);
		}
	new (_Where) _Impl_no_alloc8(*this);
	return ((_Impl_base8<_Rx , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7> *)_Where);
	}

	_Rx _Do_call(_Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6 , _Arg7 _Ax7)
		{	
		return (_Callee.template _ApplyX<_Rx>(_Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6 , _Ax7));
		}

	const  type_info& _Target_type() const
		{	
		return (typeid(typename _Callable::_MyTy));
		}

private:
	const void *_Get() const
		{	
		return (&_Callee._Get());
		}

	virtual void _Delete_this(bool _Deallocate)
		{	
		_Myalty _Al;
		_Dest_val(_Al, this);
		if (_Deallocate)
			_Al.deallocate(this, 1);
		}

	_Callable _Callee;
	};

	
template<class _Callable,
	class _Rx , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7,
	class _Alloc>
	class _Impl8
		: public _Impl_no_alloc8<_Callable, _Rx , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7>
	{	
public:
	typedef _Impl8 _Myty;
	typedef _Impl_no_alloc8<_Callable, _Rx , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7>
		_Mybase;
	typedef typename _Alloc::template rebind<_Myty>::other _Myalty;

	_Impl8(typename _Callable::_MyTy& _Val,
		_Myalty _Ax = _Myalty())
		: _Mybase(_Val), _Myal(_Ax)
		{	
		}

	virtual ~_Impl8()
		{	
		}

	virtual _Impl_base8<_Rx , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7> *_Copy(void *_Where)
		{	
		if (_Where == 0)
			_Where = _Myal.allocate(1);
		new (_Where) _Impl8(*this);
		return ((_Impl_base8<_Rx , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7> *)_Where);
		}

private:
	virtual void _Delete_this(bool _Deallocate)
		{	
		_Myalty _Al = _Myal;
		_Dest_val(_Al, this);
		if (_Deallocate)
			_Al.deallocate(this, 1);
		}

	_Myalty _Myal;
	};

	
template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7>
	class _Function_impl8

 

#line 140 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxfunction"

#line 142 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxfunction"

	{	
	typedef _Function_impl8<_Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7> _Myty;
	typedef _Impl_base8<_Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7> _Ptrt;

public:
	typedef _Ret result_type;

	_Ret operator()(_Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6 , _Arg7 _Ax7) const
		{	
		if (_Impl == 0)
			_Xfunc();
		return (_Impl->_Do_call(_Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6 , _Ax7));
		}

	bool _Empty() const
		{	
		return (_Impl == 0);
		}

protected:
	void _Reset()
		{	
		_Set(0);
		}

	void _Reset(const _Myty& _Right)
		{	
		if (_Right._Impl == 0)
			_Set(0);
		else if (_Right._Local())
			_Set(_Right._Impl->_Copy((void *)&_Space));
		else
			_Set(_Right._Impl->_Copy(0));
		}

	void _Resetm(_Myty& _Right)
		{	
		if (_Right._Impl == 0)
			_Set(0);
		else if (_Right._Local())
			_Set(_Right._Impl->_Copy((void *)&_Space));
		else
			{	
			_Set(_Right._Impl);
			_Right._Set(0);
			}
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7>
		void _Reset(_Fret (__cdecl *const _Val)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7))
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_fun<_Fret (__cdecl *const)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7)> _MyWrapper;
		typedef _Impl_no_alloc8<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7>
			_Myimpl;
		_Reset0f<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7,
		class _Alloc>
		void _Reset_alloc(_Fret (__cdecl *const _Val)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7), _Alloc _Ax)
		{
		typedef _Callable_fun<_Fret (__cdecl *const)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7)> _MyWrapper;
		typedef _Impl8<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7, _Alloc> _Myimpl;
		_Reset0f<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7,
		class _Alloc>
		void _Reset0f(_Fret (__cdecl *const _Val)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7), _Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

 






















































































 










































	template<class _Fty>
		void _Reset(_Fty _Val)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_obj<_Fty> _MyWrapper;
		typedef _Impl_no_alloc8<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7>
			_Myimpl;
		_Reset0o<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fty,
		class _Alloc>
		void _Reset_alloc(_Fty _Val, _Alloc _Ax)
		{
		typedef _Callable_obj<_Fty> _MyWrapper;
		typedef _Impl8<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7, _Alloc> _Myimpl;
		_Reset0o<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fty,
		class _Alloc>
		void _Reset0o(_Fty _Val, _Alloc _Ax)
		{	
		if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

 











































#line 446 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxfunction"

 
	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7>
		void _Reset(_Fret (__thiscall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7))
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<_Fret (__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7), _Farg0>
			_MyWrapper;
		typedef _Impl_no_alloc8<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7>
			_Myimpl;
		_Reset0pmf<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7,
		class _Alloc>
		void _Reset_alloc(_Fret (__thiscall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7),
			_Alloc _Ax)
		{
		typedef _Callable_pmf<_Fret (__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7), _Farg0>
			_MyWrapper;
		typedef _Impl8<_MyWrapper, _Ret, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7, _Alloc> _Myimpl;
		_Reset0pmf<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7,
		class _Alloc>
		void _Reset0pmf(_Fret (__thiscall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7),
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7>
		void _Reset(_Fret (__thiscall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) const)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<
			_Fret (__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) const, _Farg0> _MyWrapper;
		typedef _Impl_no_alloc8<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7>
			_Myimpl;
		_Reset0pmfc<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7,
		class _Alloc>
		void _Reset_alloc(_Fret (__thiscall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) const,
			_Alloc _Ax)
		{
		typedef _Callable_pmf<
			_Fret (__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) const, _Farg0> _MyWrapper;
		typedef _Impl8<_MyWrapper, _Ret, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7, _Alloc> _Myimpl;
		_Reset0pmfc<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7,
		class _Alloc>
		void _Reset0pmfc(_Fret (__thiscall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) const,
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7>
		void _Reset(_Fret (__thiscall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) volatile)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<
			_Fret (__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) volatile, _Farg0> _MyWrapper;
		typedef _Impl_no_alloc8<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7>
			_Myimpl;
		_Reset0pmfv<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7,
		class _Alloc>
		void _Reset_alloc(_Fret (__thiscall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) volatile,
			_Alloc _Ax)
		{
		typedef _Callable_pmf<
			_Fret (__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) volatile, _Farg0> _MyWrapper;
		typedef _Impl8<_MyWrapper, _Ret, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7, _Alloc> _Myimpl;
		_Reset0pmfv<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7,
		class _Alloc>
		void _Reset0pmfv(_Fret (__thiscall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) volatile,
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7>
		void _Reset(_Fret (__thiscall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) const volatile)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<
			_Fret (__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) const volatile, _Farg0>
			_MyWrapper;
		typedef _Impl_no_alloc8<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7>
			_Myimpl;
		_Reset0pmfcv<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7,
		class _Alloc>
		void _Reset_alloc(
			_Fret (__thiscall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) const volatile,
			_Alloc _Ax)
		{
		typedef _Callable_pmf<
			_Fret (__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) const volatile, _Farg0>
			_MyWrapper;
		typedef _Impl8<_MyWrapper, _Ret, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7, _Alloc> _Myimpl;
		_Reset0pmfcv<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7,
		class _Alloc>
		void _Reset0pmfcv(
			_Fret (__thiscall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) const volatile,
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

 












































































































































































































































































































































































































































































































































































 

























































































































































































 #line 1376 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxfunction"

	void _Tidy()
		{	
		if (_Impl != 0)
			{	
			_Impl->_Delete_this(!_Local());
			_Impl = 0;
			}
		}

	void _Swap(_Myty& _Right)
		{	
		if (this == &_Right)
			;	
		else if (_Local())
			if (_Right._Local())
				{	
				_Myty _Temp;
				_Temp._Reset(*this);
				_Tidy();
				_Reset(_Right);
				_Right._Tidy();
				_Right._Reset(_Temp);
				_Temp._Tidy();
				}
			else
				{	
				_Ptrt *_Temp = _Right._Impl;
				_Right._Reset(*this);
				_Tidy();
				_Set(_Temp);
				}
		else
			if (_Right._Local())
				{	
				_Ptrt *_Temp = _Impl;
				_Reset(_Right);
				_Right._Tidy();
				_Right._Set(_Temp);
				}
			else
				::std:: swap(_Impl, _Right._Impl);	
		}

	const  type_info& _Target_type() const
		{	
		return (_Impl ? _Impl->_Target_type() : typeid(void));
		}

	const void *_Target(const  type_info& _Info) const
		{	
		return (_Impl ? _Impl->_Target(_Info) : 0);
		}

private:
	bool _Local() const
		{	
		return ((void *)_Impl == (void *)&_Space);
		}

	void _Set(_Ptrt *_Ptr)
		{	
		_Impl = _Ptr;
		}

	typedef void (*_Pfnty)();
	union _Space_union
		{	
		_Pfnty _Pfn[3];
		void *_Pobj[3];
		long double _Ldbl;	
		char _Alias[3 * sizeof (void *)];	
		} _Space;

	_Ptrt *_Impl;
	};

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7>
	struct _Get_function_impl<_Ret(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7)>
	{	
	typedef _Function_impl8<_Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7> _Type;
	};











#line 262 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 49 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 47 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 55 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 63 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 71 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 79 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 









#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxfunction"








	
template<class _Rx , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8>
	class _Impl_base9
	{	
public:
	virtual _Impl_base9 *_Copy(void *) = 0;
	virtual _Rx _Do_call(_Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6, _Arg7 _Ax7 , _Arg8 _Ax8) = 0;
	virtual const  type_info& _Target_type() const = 0;
	virtual void _Delete_this(bool) = 0;

	const void *_Target(const  type_info& _Info) const
		{	
		return (_Target_type() == _Info ? _Get() : 0);
		}

	virtual ~_Impl_base9()
		{	
		}

private:
	virtual const void *_Get() const = 0;
	};

	
template<class _Callable,
	class _Rx , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8>
	class _Impl_no_alloc9
		: public _Impl_base9<_Rx , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8>
	{	
public:
	typedef _Impl_no_alloc9 _Myty;
	typedef ::std:: allocator<_Myty> _Myalty;

	_Impl_no_alloc9(typename _Callable::_MyTy& _Val,
		_Myalty = _Myalty())
		: _Callee(_Val)
		{	
		}

	virtual ~_Impl_no_alloc9()
		{	
		}

	virtual _Impl_base9<_Rx , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8> *_Copy(void *_Where)
	{	
	if (_Where == 0)
		{	
		_Myalty _Al;
		_Where = _Al.allocate(1);
		}
	new (_Where) _Impl_no_alloc9(*this);
	return ((_Impl_base9<_Rx , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8> *)_Where);
	}

	_Rx _Do_call(_Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6, _Arg7 _Ax7 , _Arg8 _Ax8)
		{	
		return (_Callee.template _ApplyX<_Rx>(_Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7 , _Ax8));
		}

	const  type_info& _Target_type() const
		{	
		return (typeid(typename _Callable::_MyTy));
		}

private:
	const void *_Get() const
		{	
		return (&_Callee._Get());
		}

	virtual void _Delete_this(bool _Deallocate)
		{	
		_Myalty _Al;
		_Dest_val(_Al, this);
		if (_Deallocate)
			_Al.deallocate(this, 1);
		}

	_Callable _Callee;
	};

	
template<class _Callable,
	class _Rx , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8,
	class _Alloc>
	class _Impl9
		: public _Impl_no_alloc9<_Callable, _Rx , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8>
	{	
public:
	typedef _Impl9 _Myty;
	typedef _Impl_no_alloc9<_Callable, _Rx , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8>
		_Mybase;
	typedef typename _Alloc::template rebind<_Myty>::other _Myalty;

	_Impl9(typename _Callable::_MyTy& _Val,
		_Myalty _Ax = _Myalty())
		: _Mybase(_Val), _Myal(_Ax)
		{	
		}

	virtual ~_Impl9()
		{	
		}

	virtual _Impl_base9<_Rx , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8> *_Copy(void *_Where)
		{	
		if (_Where == 0)
			_Where = _Myal.allocate(1);
		new (_Where) _Impl9(*this);
		return ((_Impl_base9<_Rx , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8> *)_Where);
		}

private:
	virtual void _Delete_this(bool _Deallocate)
		{	
		_Myalty _Al = _Myal;
		_Dest_val(_Al, this);
		if (_Deallocate)
			_Al.deallocate(this, 1);
		}

	_Myalty _Myal;
	};

	
template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8>
	class _Function_impl9

 

#line 140 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxfunction"

#line 142 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxfunction"

	{	
	typedef _Function_impl9<_Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8> _Myty;
	typedef _Impl_base9<_Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8> _Ptrt;

public:
	typedef _Ret result_type;

	_Ret operator()(_Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6, _Arg7 _Ax7 , _Arg8 _Ax8) const
		{	
		if (_Impl == 0)
			_Xfunc();
		return (_Impl->_Do_call(_Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7 , _Ax8));
		}

	bool _Empty() const
		{	
		return (_Impl == 0);
		}

protected:
	void _Reset()
		{	
		_Set(0);
		}

	void _Reset(const _Myty& _Right)
		{	
		if (_Right._Impl == 0)
			_Set(0);
		else if (_Right._Local())
			_Set(_Right._Impl->_Copy((void *)&_Space));
		else
			_Set(_Right._Impl->_Copy(0));
		}

	void _Resetm(_Myty& _Right)
		{	
		if (_Right._Impl == 0)
			_Set(0);
		else if (_Right._Local())
			_Set(_Right._Impl->_Copy((void *)&_Space));
		else
			{	
			_Set(_Right._Impl);
			_Right._Set(0);
			}
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8>
		void _Reset(_Fret (__cdecl *const _Val)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8))
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_fun<_Fret (__cdecl *const)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8)> _MyWrapper;
		typedef _Impl_no_alloc9<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8>
			_Myimpl;
		_Reset0f<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8,
		class _Alloc>
		void _Reset_alloc(_Fret (__cdecl *const _Val)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8), _Alloc _Ax)
		{
		typedef _Callable_fun<_Fret (__cdecl *const)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8)> _MyWrapper;
		typedef _Impl9<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8, _Alloc> _Myimpl;
		_Reset0f<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8,
		class _Alloc>
		void _Reset0f(_Fret (__cdecl *const _Val)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8), _Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

 






















































































 










































	template<class _Fty>
		void _Reset(_Fty _Val)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_obj<_Fty> _MyWrapper;
		typedef _Impl_no_alloc9<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8>
			_Myimpl;
		_Reset0o<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fty,
		class _Alloc>
		void _Reset_alloc(_Fty _Val, _Alloc _Ax)
		{
		typedef _Callable_obj<_Fty> _MyWrapper;
		typedef _Impl9<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8, _Alloc> _Myimpl;
		_Reset0o<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fty,
		class _Alloc>
		void _Reset0o(_Fty _Val, _Alloc _Ax)
		{	
		if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

 











































#line 446 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxfunction"

 
	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8>
		void _Reset(_Fret (__thiscall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8))
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<_Fret (__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8), _Farg0>
			_MyWrapper;
		typedef _Impl_no_alloc9<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8>
			_Myimpl;
		_Reset0pmf<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8,
		class _Alloc>
		void _Reset_alloc(_Fret (__thiscall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8),
			_Alloc _Ax)
		{
		typedef _Callable_pmf<_Fret (__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8), _Farg0>
			_MyWrapper;
		typedef _Impl9<_MyWrapper, _Ret, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8, _Alloc> _Myimpl;
		_Reset0pmf<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8,
		class _Alloc>
		void _Reset0pmf(_Fret (__thiscall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8),
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8>
		void _Reset(_Fret (__thiscall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) const)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<
			_Fret (__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) const, _Farg0> _MyWrapper;
		typedef _Impl_no_alloc9<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8>
			_Myimpl;
		_Reset0pmfc<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8,
		class _Alloc>
		void _Reset_alloc(_Fret (__thiscall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) const,
			_Alloc _Ax)
		{
		typedef _Callable_pmf<
			_Fret (__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) const, _Farg0> _MyWrapper;
		typedef _Impl9<_MyWrapper, _Ret, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8, _Alloc> _Myimpl;
		_Reset0pmfc<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8,
		class _Alloc>
		void _Reset0pmfc(_Fret (__thiscall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) const,
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8>
		void _Reset(_Fret (__thiscall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) volatile)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<
			_Fret (__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) volatile, _Farg0> _MyWrapper;
		typedef _Impl_no_alloc9<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8>
			_Myimpl;
		_Reset0pmfv<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8,
		class _Alloc>
		void _Reset_alloc(_Fret (__thiscall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) volatile,
			_Alloc _Ax)
		{
		typedef _Callable_pmf<
			_Fret (__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) volatile, _Farg0> _MyWrapper;
		typedef _Impl9<_MyWrapper, _Ret, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8, _Alloc> _Myimpl;
		_Reset0pmfv<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8,
		class _Alloc>
		void _Reset0pmfv(_Fret (__thiscall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) volatile,
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8>
		void _Reset(_Fret (__thiscall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) const volatile)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<
			_Fret (__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) const volatile, _Farg0>
			_MyWrapper;
		typedef _Impl_no_alloc9<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8>
			_Myimpl;
		_Reset0pmfcv<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8,
		class _Alloc>
		void _Reset_alloc(
			_Fret (__thiscall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) const volatile,
			_Alloc _Ax)
		{
		typedef _Callable_pmf<
			_Fret (__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) const volatile, _Farg0>
			_MyWrapper;
		typedef _Impl9<_MyWrapper, _Ret, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8, _Alloc> _Myimpl;
		_Reset0pmfcv<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8,
		class _Alloc>
		void _Reset0pmfcv(
			_Fret (__thiscall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) const volatile,
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

 












































































































































































































































































































































































































































































































































































 

























































































































































































 #line 1376 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxfunction"

	void _Tidy()
		{	
		if (_Impl != 0)
			{	
			_Impl->_Delete_this(!_Local());
			_Impl = 0;
			}
		}

	void _Swap(_Myty& _Right)
		{	
		if (this == &_Right)
			;	
		else if (_Local())
			if (_Right._Local())
				{	
				_Myty _Temp;
				_Temp._Reset(*this);
				_Tidy();
				_Reset(_Right);
				_Right._Tidy();
				_Right._Reset(_Temp);
				_Temp._Tidy();
				}
			else
				{	
				_Ptrt *_Temp = _Right._Impl;
				_Right._Reset(*this);
				_Tidy();
				_Set(_Temp);
				}
		else
			if (_Right._Local())
				{	
				_Ptrt *_Temp = _Impl;
				_Reset(_Right);
				_Right._Tidy();
				_Right._Set(_Temp);
				}
			else
				::std:: swap(_Impl, _Right._Impl);	
		}

	const  type_info& _Target_type() const
		{	
		return (_Impl ? _Impl->_Target_type() : typeid(void));
		}

	const void *_Target(const  type_info& _Info) const
		{	
		return (_Impl ? _Impl->_Target(_Info) : 0);
		}

private:
	bool _Local() const
		{	
		return ((void *)_Impl == (void *)&_Space);
		}

	void _Set(_Ptrt *_Ptr)
		{	
		_Impl = _Ptr;
		}

	typedef void (*_Pfnty)();
	union _Space_union
		{	
		_Pfnty _Pfn[3];
		void *_Pobj[3];
		long double _Ldbl;	
		char _Alias[3 * sizeof (void *)];	
		} _Space;

	_Ptrt *_Impl;
	};

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8>
	struct _Get_function_impl<_Ret(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8)>
	{	
	typedef _Function_impl9<_Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8> _Type;
	};











#line 262 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 53 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 47 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 55 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 63 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 71 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 79 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 87 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  

 

#line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  


































#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 257 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 259 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

#line 261 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
	#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxfunction"








	
template<class _Rx , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9>
	class _Impl_base10
	{	
public:
	virtual _Impl_base10 *_Copy(void *) = 0;
	virtual _Rx _Do_call(_Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6, _Arg7 _Ax7, _Arg8 _Ax8 , _Arg9 _Ax9) = 0;
	virtual const  type_info& _Target_type() const = 0;
	virtual void _Delete_this(bool) = 0;

	const void *_Target(const  type_info& _Info) const
		{	
		return (_Target_type() == _Info ? _Get() : 0);
		}

	virtual ~_Impl_base10()
		{	
		}

private:
	virtual const void *_Get() const = 0;
	};

	
template<class _Callable,
	class _Rx , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9>
	class _Impl_no_alloc10
		: public _Impl_base10<_Rx , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9>
	{	
public:
	typedef _Impl_no_alloc10 _Myty;
	typedef ::std:: allocator<_Myty> _Myalty;

	_Impl_no_alloc10(typename _Callable::_MyTy& _Val,
		_Myalty = _Myalty())
		: _Callee(_Val)
		{	
		}

	virtual ~_Impl_no_alloc10()
		{	
		}

	virtual _Impl_base10<_Rx , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9> *_Copy(void *_Where)
	{	
	if (_Where == 0)
		{	
		_Myalty _Al;
		_Where = _Al.allocate(1);
		}
	new (_Where) _Impl_no_alloc10(*this);
	return ((_Impl_base10<_Rx , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9> *)_Where);
	}

	_Rx _Do_call(_Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6, _Arg7 _Ax7, _Arg8 _Ax8 , _Arg9 _Ax9)
		{	
		return (_Callee.template _ApplyX<_Rx>(_Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7, _Ax8 , _Ax9));
		}

	const  type_info& _Target_type() const
		{	
		return (typeid(typename _Callable::_MyTy));
		}

private:
	const void *_Get() const
		{	
		return (&_Callee._Get());
		}

	virtual void _Delete_this(bool _Deallocate)
		{	
		_Myalty _Al;
		_Dest_val(_Al, this);
		if (_Deallocate)
			_Al.deallocate(this, 1);
		}

	_Callable _Callee;
	};

	
template<class _Callable,
	class _Rx , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9,
	class _Alloc>
	class _Impl10
		: public _Impl_no_alloc10<_Callable, _Rx , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9>
	{	
public:
	typedef _Impl10 _Myty;
	typedef _Impl_no_alloc10<_Callable, _Rx , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9>
		_Mybase;
	typedef typename _Alloc::template rebind<_Myty>::other _Myalty;

	_Impl10(typename _Callable::_MyTy& _Val,
		_Myalty _Ax = _Myalty())
		: _Mybase(_Val), _Myal(_Ax)
		{	
		}

	virtual ~_Impl10()
		{	
		}

	virtual _Impl_base10<_Rx , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9> *_Copy(void *_Where)
		{	
		if (_Where == 0)
			_Where = _Myal.allocate(1);
		new (_Where) _Impl10(*this);
		return ((_Impl_base10<_Rx , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9> *)_Where);
		}

private:
	virtual void _Delete_this(bool _Deallocate)
		{	
		_Myalty _Al = _Myal;
		_Dest_val(_Al, this);
		if (_Deallocate)
			_Al.deallocate(this, 1);
		}

	_Myalty _Myal;
	};

	
template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9>
	class _Function_impl10

 

#line 140 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxfunction"

#line 142 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxfunction"

	{	
	typedef _Function_impl10<_Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9> _Myty;
	typedef _Impl_base10<_Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9> _Ptrt;

public:
	typedef _Ret result_type;

	_Ret operator()(_Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6, _Arg7 _Ax7, _Arg8 _Ax8 , _Arg9 _Ax9) const
		{	
		if (_Impl == 0)
			_Xfunc();
		return (_Impl->_Do_call(_Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7, _Ax8 , _Ax9));
		}

	bool _Empty() const
		{	
		return (_Impl == 0);
		}

protected:
	void _Reset()
		{	
		_Set(0);
		}

	void _Reset(const _Myty& _Right)
		{	
		if (_Right._Impl == 0)
			_Set(0);
		else if (_Right._Local())
			_Set(_Right._Impl->_Copy((void *)&_Space));
		else
			_Set(_Right._Impl->_Copy(0));
		}

	void _Resetm(_Myty& _Right)
		{	
		if (_Right._Impl == 0)
			_Set(0);
		else if (_Right._Local())
			_Set(_Right._Impl->_Copy((void *)&_Space));
		else
			{	
			_Set(_Right._Impl);
			_Right._Set(0);
			}
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9>
		void _Reset(_Fret (__cdecl *const _Val)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9))
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_fun<_Fret (__cdecl *const)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9)> _MyWrapper;
		typedef _Impl_no_alloc10<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9>
			_Myimpl;
		_Reset0f<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9,
		class _Alloc>
		void _Reset_alloc(_Fret (__cdecl *const _Val)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9), _Alloc _Ax)
		{
		typedef _Callable_fun<_Fret (__cdecl *const)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9)> _MyWrapper;
		typedef _Impl10<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9, _Alloc> _Myimpl;
		_Reset0f<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9,
		class _Alloc>
		void _Reset0f(_Fret (__cdecl *const _Val)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9), _Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

 






















































































 










































	template<class _Fty>
		void _Reset(_Fty _Val)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_obj<_Fty> _MyWrapper;
		typedef _Impl_no_alloc10<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9>
			_Myimpl;
		_Reset0o<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fty,
		class _Alloc>
		void _Reset_alloc(_Fty _Val, _Alloc _Ax)
		{
		typedef _Callable_obj<_Fty> _MyWrapper;
		typedef _Impl10<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9, _Alloc> _Myimpl;
		_Reset0o<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fty,
		class _Alloc>
		void _Reset0o(_Fty _Val, _Alloc _Ax)
		{	
		if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

 











































#line 446 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxfunction"

 
	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9>
		void _Reset(_Fret (__thiscall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9))
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<_Fret (__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9), _Farg0>
			_MyWrapper;
		typedef _Impl_no_alloc10<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9>
			_Myimpl;
		_Reset0pmf<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9,
		class _Alloc>
		void _Reset_alloc(_Fret (__thiscall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9),
			_Alloc _Ax)
		{
		typedef _Callable_pmf<_Fret (__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9), _Farg0>
			_MyWrapper;
		typedef _Impl10<_MyWrapper, _Ret, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9, _Alloc> _Myimpl;
		_Reset0pmf<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9,
		class _Alloc>
		void _Reset0pmf(_Fret (__thiscall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9),
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9>
		void _Reset(_Fret (__thiscall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) const)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<
			_Fret (__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) const, _Farg0> _MyWrapper;
		typedef _Impl_no_alloc10<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9>
			_Myimpl;
		_Reset0pmfc<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9,
		class _Alloc>
		void _Reset_alloc(_Fret (__thiscall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) const,
			_Alloc _Ax)
		{
		typedef _Callable_pmf<
			_Fret (__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) const, _Farg0> _MyWrapper;
		typedef _Impl10<_MyWrapper, _Ret, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9, _Alloc> _Myimpl;
		_Reset0pmfc<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9,
		class _Alloc>
		void _Reset0pmfc(_Fret (__thiscall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) const,
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9>
		void _Reset(_Fret (__thiscall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) volatile)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<
			_Fret (__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) volatile, _Farg0> _MyWrapper;
		typedef _Impl_no_alloc10<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9>
			_Myimpl;
		_Reset0pmfv<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9,
		class _Alloc>
		void _Reset_alloc(_Fret (__thiscall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) volatile,
			_Alloc _Ax)
		{
		typedef _Callable_pmf<
			_Fret (__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) volatile, _Farg0> _MyWrapper;
		typedef _Impl10<_MyWrapper, _Ret, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9, _Alloc> _Myimpl;
		_Reset0pmfv<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9,
		class _Alloc>
		void _Reset0pmfv(_Fret (__thiscall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) volatile,
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9>
		void _Reset(_Fret (__thiscall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) const volatile)
		{
		typedef ::std:: allocator<_Myty> _Alty0;
		typedef _Callable_pmf<
			_Fret (__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) const volatile, _Farg0>
			_MyWrapper;
		typedef _Impl_no_alloc10<_MyWrapper, _Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9>
			_Myimpl;
		_Reset0pmfcv<_Myimpl>(_Val, _Alty0());
		}

	template<class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9,
		class _Alloc>
		void _Reset_alloc(
			_Fret (__thiscall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) const volatile,
			_Alloc _Ax)
		{
		typedef _Callable_pmf<
			_Fret (__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) const volatile, _Farg0>
			_MyWrapper;
		typedef _Impl10<_MyWrapper, _Ret, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9, _Alloc> _Myimpl;
		_Reset0pmfcv<_Myimpl>(_Val, _Ax);
		}

	template<class _Myimpl,
		class _Fret , class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9,
		class _Alloc>
		void _Reset0pmfcv(
			_Fret (__thiscall _Farg0::*const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) const volatile,
			_Alloc _Ax)
		{	
		if (_Val == 0)
			_Set(0);
		else if (sizeof (_Myimpl) <= sizeof (_Space))
			{	
			new ((void *)&_Space) _Myimpl(_Val);
			_Set((_Ptrt *)&_Space);
			}
		else
			{	
			typename _Alloc::template rebind<_Myimpl>::other _Al = _Ax;
			_Myimpl *_Ptr = _Al.allocate(1);

			new (_Ptr) _Myimpl(_Val, _Al);
			_Set(_Ptr);
			}
		}

 












































































































































































































































































































































































































































































































































































 

























































































































































































 #line 1376 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxfunction"

	void _Tidy()
		{	
		if (_Impl != 0)
			{	
			_Impl->_Delete_this(!_Local());
			_Impl = 0;
			}
		}

	void _Swap(_Myty& _Right)
		{	
		if (this == &_Right)
			;	
		else if (_Local())
			if (_Right._Local())
				{	
				_Myty _Temp;
				_Temp._Reset(*this);
				_Tidy();
				_Reset(_Right);
				_Right._Tidy();
				_Right._Reset(_Temp);
				_Temp._Tidy();
				}
			else
				{	
				_Ptrt *_Temp = _Right._Impl;
				_Right._Reset(*this);
				_Tidy();
				_Set(_Temp);
				}
		else
			if (_Right._Local())
				{	
				_Ptrt *_Temp = _Impl;
				_Reset(_Right);
				_Right._Tidy();
				_Right._Set(_Temp);
				}
			else
				::std:: swap(_Impl, _Right._Impl);	
		}

	const  type_info& _Target_type() const
		{	
		return (_Impl ? _Impl->_Target_type() : typeid(void));
		}

	const void *_Target(const  type_info& _Info) const
		{	
		return (_Impl ? _Impl->_Target(_Info) : 0);
		}

private:
	bool _Local() const
		{	
		return ((void *)_Impl == (void *)&_Space);
		}

	void _Set(_Ptrt *_Ptr)
		{	
		_Impl = _Ptr;
		}

	typedef void (*_Pfnty)();
	union _Space_union
		{	
		_Pfnty _Pfn[3];
		void *_Pobj[3];
		long double _Ldbl;	
		char _Alias[3 * sizeof (void *)];	
		} _Space;

	_Ptrt *_Impl;
	};

template<class _Ret , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9>
	struct _Get_function_impl<_Ret(_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9)>
	{	
	typedef _Function_impl10<_Ret , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9> _Type;
	};











#line 262 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 57 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"




















#line 90 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\functional"

	
template<class _Fty>
	class function
		: public _Get_function_impl<_Fty>::_Type
	{	
public:
	typedef function<_Fty> _Myt;
	typedef typename _Get_function_impl<_Fty>::_Type _Mybase;

	function()
		{	
		this->_Reset();
		}

	function(const _Myt& _Right)
		{	
		this->_Reset((const _Mybase&)_Right);
		}

	template<class _Fx>
		function(_Fx _Func )
		{	
		this->_Reset(_Func);
		}

	template<class _Fx,
		class _Alloc>
		function(_Fx _Func , const _Alloc& _Ax)
		{	
		this->_Reset_alloc(_Func, _Ax);
		}

	template<class _Fx>
		function(reference_wrapper<_Fx> _Func)
		{	
		this->_Reset(_Func);
		}

	template<class _Fx,
		class _Alloc>
		function(reference_wrapper<_Fx> _Func, const _Alloc& _Ax)
		{	
		this->_Reset_alloc(_Func, _Ax);
		}

	function(_Unutterable)
		{	
		this->_Reset();
		}

 
	function(int)
		{	
		this->_Reset();
		}
 #line 148 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\functional"

	~function()
		{	
		this->_Tidy();
		}

	_Myt& operator=(const _Myt& _Right)
		{	
		if (this != &_Right)
			{	
			this->_Tidy();
			this->_Reset((const _Mybase&)_Right);
			}
		return (*this);
		}

	function(_Myt&& _Right)
		{	
		this->_Resetm((_Mybase&)_Right);
		}

	_Myt& operator=(_Myt&& _Right)
		{	
		if (this != &_Right)
			{	
			this->_Tidy();
			this->_Resetm((_Mybase&)_Right);
			}
		return (*this);
		}

	template<class _Fx>
		_Myt& operator=(_Fx _Func )
		{	
		this->_Tidy();
		this->_Reset(_Func);
		return (*this);
		}

	function& operator=(_Unutterable)
		{	
		this->_Tidy();
		this->_Reset();
		return (*this);
		}

 
	function& operator=(int)
		{	
		this->_Tidy();
		this->_Reset();
		return (*this);
		}
 #line 203 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\functional"

	template<class _Fx>
		_Myt& operator=(reference_wrapper<_Fx> _Func)
		{	
		this->_Tidy();
		this->_Reset(_Func);
		return (*this);
		}

	template<class _Fx,
		class _Alloc>
		void assign(_Fx _Func , const _Alloc& _Ax)
		{	
		this->_Tidy();
		this->_Reset_alloc(_Func, _Ax);
		}

	template<class _Fx,
		class _Alloc>
		void assign(reference_wrapper<_Fx> _Func, const _Alloc& _Ax)
		{	
		this->_Tidy();
		this->_Reset_alloc(_Func, _Ax);
		}

	void swap(_Myt& _Right)
		{	
		this->_Swap(_Right);
		}

	operator ::std:: _Bool_type() const
		{	
		return (!this->_Empty() ? (&::std:: _Bool_struct::_Member) : 0);
		}

	const  type_info& target_type() const
		{	
		return (this->_Target_type());
		}

	template<class _Fty2>
		_Fty2 *target()
		{	
		return ((_Fty2*)this->_Target(typeid(_Fty2)));
		}

	template<class _Fty2>
		const _Fty2 *target() const
		{	
		return ((const _Fty2*)this->_Target(typeid(_Fty2)));
		}

private:
	template<class _Fty2>
		void operator==(const function<_Fty2>&);	
	template<class _Fty2>
		void operator!=(const function<_Fty2>&);	
	};

	
template<class _Fty>
	void swap(function<_Fty>& _Left, function<_Fty>& _Right)
	{	
	_Left.swap(_Right);
	}

	
template<class _Fty>
	bool operator==(const function<_Fty>& _Other, _Unutterable)
	{	
	return (!_Other);
	}

template<class _Fty>
	bool operator==(_Unutterable _Npc, const function<_Fty>& _Other)
	{	
	return (operator==(_Other, _Npc));
	}

template<class _Fty>
	bool operator!=(const function<_Fty>& _Other, _Unutterable _Npc)
	{	
	return (!operator==(_Other, _Npc));
	}

template<class _Fty>
	bool operator!=(_Unutterable _Npc, const function<_Fty>& _Other)
	{	
	return (!operator==(_Other, _Npc));
	}


	
template<int _Nx>
	class _Ph
	{	
	};

template<class _Tx>
	struct is_placeholder
	{	
	static const int value = 0;
	};

template<int _Nx>
	struct is_placeholder<_Ph<_Nx> >
	{	
	static const int value = _Nx;
	};

	
template<class _Tx>
	struct is_bind_expression
	{	
	static const bool value = false;
	};

	
struct _Notforced
	{	
	};

	
template<class _Override,
	class _Natural>
	struct _Bindret
	{	
	typedef _Override _Type;
	};

template<class _Natural>
	struct _Bindret<_Notforced, _Natural>
	{	
	typedef _Natural _Type;
	};

	
template<bool _Has_nested,
	class _Ty>
	struct _Wrap_result_type;

template<class _Ty>
	struct _Wrap_result_type<false, _Ty>
	{	
	};

template<class _Ty>
	struct _Wrap_result_type<true, _Ty>
	{	
	typedef typename _Ty::result_type result_type;
	};

	
template<class _Ret,
	class _BindN>
	class _Bind_base
	{	
public:
	typedef typename _BindN::_MyTy _MyTy;
	typedef _BindN _MyBind;

	_Bind_base(_BindN _B0)
		: _Bx(_B0)
		{	
		}


 
 #line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xawrap"





 

#line 9 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xawrap"





 
 
 
 
 
 
  
   #line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind0"



 

#line 7 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind0"

	typename _Bindret<_Ret,
		typename _MyBind::template _Return<
			 _Nil&, _Nil&, _Nil&, _Nil&, _Nil&, _Nil&, _Nil&, _Nil&, _Nil&, _Nil&>::_Type>::_Type
		operator()() const
	{	
	typedef typename _Bindret<_Ret,
		typename _MyBind::template _Return<
			 _Nil&, _Nil&, _Nil&, _Nil&, _Nil&, _Nil&, _Nil&, _Nil&, _Nil&, _Nil&>::_Type>::_Type _Rx;
	return (_Bx.template _ApplyX<_Rx>( _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj));
	}

 

#line 22 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind0"

	typename _Bindret<_Ret,
		typename _MyBind::template _Return<
			 _Nil&, _Nil&, _Nil&, _Nil&, _Nil&, _Nil&, _Nil&, _Nil&, _Nil&, _Nil&>::_Type>::_Type
		operator()()
	{	
	typedef typename _Bindret<_Ret,
		typename _MyBind::template _Return<
			 _Nil&, _Nil&, _Nil&, _Nil&, _Nil&, _Nil&, _Nil&, _Nil&, _Nil&, _Nil&>::_Type>::_Type _Rx;
	return (_Bx.template _ApplyX<_Rx>( _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj));
	}





#line 22 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xawrap"
  

#line 25 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xawrap"
 
 
 
 
 
 
#line 32 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xawrap"







  
   #line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind0"



 
template<class _Carg0>
 #line 7 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind0"

	typename _Bindret<_Ret,
		typename _MyBind::template _Return<
			_Carg0 , _Nil&, _Nil&, _Nil&, _Nil&, _Nil&, _Nil&, _Nil&, _Nil&, _Nil&>::_Type>::_Type
		operator()(_Carg0&& _CA0) const
	{	
	typedef typename _Bindret<_Ret,
		typename _MyBind::template _Return<
			_Carg0 , _Nil&, _Nil&, _Nil&, _Nil&, _Nil&, _Nil&, _Nil&, _Nil&, _Nil&>::_Type>::_Type _Rx;
	return (_Bx.template _ApplyX<_Rx>(::std:: forward<_Carg0>(_CA0) , _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj));
	}

 
template<class _Carg0>
 #line 22 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind0"

	typename _Bindret<_Ret,
		typename _MyBind::template _Return<
			_Carg0 , _Nil&, _Nil&, _Nil&, _Nil&, _Nil&, _Nil&, _Nil&, _Nil&, _Nil&>::_Type>::_Type
		operator()(_Carg0&& _CA0)
	{	
	typedef typename _Bindret<_Ret,
		typename _MyBind::template _Return<
			_Carg0 , _Nil&, _Nil&, _Nil&, _Nil&, _Nil&, _Nil&, _Nil&, _Nil&, _Nil&>::_Type>::_Type _Rx;
	return (_Bx.template _ApplyX<_Rx>(::std:: forward<_Carg0>(_CA0) , _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj));
	}





#line 41 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xawrap"
  

#line 44 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xawrap"














  
   #line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind0"



 
template<class _Carg0, class _Carg1>
 #line 7 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind0"

	typename _Bindret<_Ret,
		typename _MyBind::template _Return<
			_Carg0, _Carg1 , _Nil&, _Nil&, _Nil&, _Nil&, _Nil&, _Nil&, _Nil&, _Nil&>::_Type>::_Type
		operator()(_Carg0&& _CA0, _Carg1&& _CA1) const
	{	
	typedef typename _Bindret<_Ret,
		typename _MyBind::template _Return<
			_Carg0, _Carg1 , _Nil&, _Nil&, _Nil&, _Nil&, _Nil&, _Nil&, _Nil&, _Nil&>::_Type>::_Type _Rx;
	return (_Bx.template _ApplyX<_Rx>(::std:: forward<_Carg0>(_CA0), ::std:: forward<_Carg1>(_CA1) , _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj));
	}

 
template<class _Carg0, class _Carg1>
 #line 22 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind0"

	typename _Bindret<_Ret,
		typename _MyBind::template _Return<
			_Carg0, _Carg1 , _Nil&, _Nil&, _Nil&, _Nil&, _Nil&, _Nil&, _Nil&, _Nil&>::_Type>::_Type
		operator()(_Carg0&& _CA0, _Carg1&& _CA1)
	{	
	typedef typename _Bindret<_Ret,
		typename _MyBind::template _Return<
			_Carg0, _Carg1 , _Nil&, _Nil&, _Nil&, _Nil&, _Nil&, _Nil&, _Nil&, _Nil&>::_Type>::_Type _Rx;
	return (_Bx.template _ApplyX<_Rx>(::std:: forward<_Carg0>(_CA0), ::std:: forward<_Carg1>(_CA1) , _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj));
	}





#line 60 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xawrap"
  

#line 63 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xawrap"















  
   #line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind0"



 
template<class _Carg0, class _Carg1, class _Carg2>
 #line 7 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind0"

	typename _Bindret<_Ret,
		typename _MyBind::template _Return<
			_Carg0, _Carg1, _Carg2 , _Nil&, _Nil&, _Nil&, _Nil&, _Nil&, _Nil&, _Nil&>::_Type>::_Type
		operator()(_Carg0&& _CA0, _Carg1&& _CA1, _Carg2&& _CA2) const
	{	
	typedef typename _Bindret<_Ret,
		typename _MyBind::template _Return<
			_Carg0, _Carg1, _Carg2 , _Nil&, _Nil&, _Nil&, _Nil&, _Nil&, _Nil&, _Nil&>::_Type>::_Type _Rx;
	return (_Bx.template _ApplyX<_Rx>(::std:: forward<_Carg0>(_CA0), ::std:: forward<_Carg1>(_CA1), ::std:: forward<_Carg2>(_CA2) , _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj));
	}

 
template<class _Carg0, class _Carg1, class _Carg2>
 #line 22 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind0"

	typename _Bindret<_Ret,
		typename _MyBind::template _Return<
			_Carg0, _Carg1, _Carg2 , _Nil&, _Nil&, _Nil&, _Nil&, _Nil&, _Nil&, _Nil&>::_Type>::_Type
		operator()(_Carg0&& _CA0, _Carg1&& _CA1, _Carg2&& _CA2)
	{	
	typedef typename _Bindret<_Ret,
		typename _MyBind::template _Return<
			_Carg0, _Carg1, _Carg2 , _Nil&, _Nil&, _Nil&, _Nil&, _Nil&, _Nil&, _Nil&>::_Type>::_Type _Rx;
	return (_Bx.template _ApplyX<_Rx>(::std:: forward<_Carg0>(_CA0), ::std:: forward<_Carg1>(_CA1), ::std:: forward<_Carg2>(_CA2) , _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj));
	}





#line 80 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xawrap"
  

#line 83 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xawrap"


















  
   #line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind0"



 
template<class _Carg0, class _Carg1, class _Carg2, class _Carg3>
 #line 7 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind0"

	typename _Bindret<_Ret,
		typename _MyBind::template _Return<
			_Carg0, _Carg1, _Carg2, _Carg3 , _Nil&, _Nil&, _Nil&, _Nil&, _Nil&, _Nil&>::_Type>::_Type
		operator()(_Carg0&& _CA0, _Carg1&& _CA1, _Carg2&& _CA2, _Carg3&& _CA3) const
	{	
	typedef typename _Bindret<_Ret,
		typename _MyBind::template _Return<
			_Carg0, _Carg1, _Carg2, _Carg3 , _Nil&, _Nil&, _Nil&, _Nil&, _Nil&, _Nil&>::_Type>::_Type _Rx;
	return (_Bx.template _ApplyX<_Rx>(::std:: forward<_Carg0>(_CA0), ::std:: forward<_Carg1>(_CA1), ::std:: forward<_Carg2>(_CA2), ::std:: forward<_Carg3>(_CA3) , _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj));
	}

 
template<class _Carg0, class _Carg1, class _Carg2, class _Carg3>
 #line 22 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind0"

	typename _Bindret<_Ret,
		typename _MyBind::template _Return<
			_Carg0, _Carg1, _Carg2, _Carg3 , _Nil&, _Nil&, _Nil&, _Nil&, _Nil&, _Nil&>::_Type>::_Type
		operator()(_Carg0&& _CA0, _Carg1&& _CA1, _Carg2&& _CA2, _Carg3&& _CA3)
	{	
	typedef typename _Bindret<_Ret,
		typename _MyBind::template _Return<
			_Carg0, _Carg1, _Carg2, _Carg3 , _Nil&, _Nil&, _Nil&, _Nil&, _Nil&, _Nil&>::_Type>::_Type _Rx;
	return (_Bx.template _ApplyX<_Rx>(::std:: forward<_Carg0>(_CA0), ::std:: forward<_Carg1>(_CA1), ::std:: forward<_Carg2>(_CA2), ::std:: forward<_Carg3>(_CA3) , _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj));
	}





#line 103 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xawrap"
  

#line 106 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xawrap"




















  
   #line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind0"



 
template<class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4>
 #line 7 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind0"

	typename _Bindret<_Ret,
		typename _MyBind::template _Return<
			_Carg0, _Carg1, _Carg2, _Carg3, _Carg4 , _Nil&, _Nil&, _Nil&, _Nil&, _Nil&>::_Type>::_Type
		operator()(_Carg0&& _CA0, _Carg1&& _CA1, _Carg2&& _CA2, _Carg3&& _CA3, _Carg4&& _CA4) const
	{	
	typedef typename _Bindret<_Ret,
		typename _MyBind::template _Return<
			_Carg0, _Carg1, _Carg2, _Carg3, _Carg4 , _Nil&, _Nil&, _Nil&, _Nil&, _Nil&>::_Type>::_Type _Rx;
	return (_Bx.template _ApplyX<_Rx>(::std:: forward<_Carg0>(_CA0), ::std:: forward<_Carg1>(_CA1), ::std:: forward<_Carg2>(_CA2), ::std:: forward<_Carg3>(_CA3), ::std:: forward<_Carg4>(_CA4) , _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj));
	}

 
template<class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4>
 #line 22 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind0"

	typename _Bindret<_Ret,
		typename _MyBind::template _Return<
			_Carg0, _Carg1, _Carg2, _Carg3, _Carg4 , _Nil&, _Nil&, _Nil&, _Nil&, _Nil&>::_Type>::_Type
		operator()(_Carg0&& _CA0, _Carg1&& _CA1, _Carg2&& _CA2, _Carg3&& _CA3, _Carg4&& _CA4)
	{	
	typedef typename _Bindret<_Ret,
		typename _MyBind::template _Return<
			_Carg0, _Carg1, _Carg2, _Carg3, _Carg4 , _Nil&, _Nil&, _Nil&, _Nil&, _Nil&>::_Type>::_Type _Rx;
	return (_Bx.template _ApplyX<_Rx>(::std:: forward<_Carg0>(_CA0), ::std:: forward<_Carg1>(_CA1), ::std:: forward<_Carg2>(_CA2), ::std:: forward<_Carg3>(_CA3), ::std:: forward<_Carg4>(_CA4) , _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj));
	}





#line 128 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xawrap"
  

#line 131 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xawrap"





















  
   #line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind0"



 
template<class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5>
 #line 7 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind0"

	typename _Bindret<_Ret,
		typename _MyBind::template _Return<
			_Carg0, _Carg1, _Carg2, _Carg3, _Carg4, _Carg5 , _Nil&, _Nil&, _Nil&, _Nil&>::_Type>::_Type
		operator()(_Carg0&& _CA0, _Carg1&& _CA1, _Carg2&& _CA2, _Carg3&& _CA3, _Carg4&& _CA4, _Carg5&& _CA5) const
	{	
	typedef typename _Bindret<_Ret,
		typename _MyBind::template _Return<
			_Carg0, _Carg1, _Carg2, _Carg3, _Carg4, _Carg5 , _Nil&, _Nil&, _Nil&, _Nil&>::_Type>::_Type _Rx;
	return (_Bx.template _ApplyX<_Rx>(::std:: forward<_Carg0>(_CA0), ::std:: forward<_Carg1>(_CA1), ::std:: forward<_Carg2>(_CA2), ::std:: forward<_Carg3>(_CA3), ::std:: forward<_Carg4>(_CA4), ::std:: forward<_Carg5>(_CA5) , _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj));
	}

 
template<class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5>
 #line 22 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind0"

	typename _Bindret<_Ret,
		typename _MyBind::template _Return<
			_Carg0, _Carg1, _Carg2, _Carg3, _Carg4, _Carg5 , _Nil&, _Nil&, _Nil&, _Nil&>::_Type>::_Type
		operator()(_Carg0&& _CA0, _Carg1&& _CA1, _Carg2&& _CA2, _Carg3&& _CA3, _Carg4&& _CA4, _Carg5&& _CA5)
	{	
	typedef typename _Bindret<_Ret,
		typename _MyBind::template _Return<
			_Carg0, _Carg1, _Carg2, _Carg3, _Carg4, _Carg5 , _Nil&, _Nil&, _Nil&, _Nil&>::_Type>::_Type _Rx;
	return (_Bx.template _ApplyX<_Rx>(::std:: forward<_Carg0>(_CA0), ::std:: forward<_Carg1>(_CA1), ::std:: forward<_Carg2>(_CA2), ::std:: forward<_Carg3>(_CA3), ::std:: forward<_Carg4>(_CA4), ::std:: forward<_Carg5>(_CA5) , _Nil_obj, _Nil_obj, _Nil_obj, _Nil_obj));
	}





#line 154 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xawrap"
  

#line 157 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xawrap"






















  
   #line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind0"



 
template<class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6>
 #line 7 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind0"

	typename _Bindret<_Ret,
		typename _MyBind::template _Return<
			_Carg0, _Carg1, _Carg2, _Carg3, _Carg4, _Carg5, _Carg6 , _Nil&, _Nil&, _Nil&>::_Type>::_Type
		operator()(_Carg0&& _CA0, _Carg1&& _CA1, _Carg2&& _CA2, _Carg3&& _CA3, _Carg4&& _CA4, _Carg5&& _CA5, _Carg6&& _CA6) const
	{	
	typedef typename _Bindret<_Ret,
		typename _MyBind::template _Return<
			_Carg0, _Carg1, _Carg2, _Carg3, _Carg4, _Carg5, _Carg6 , _Nil&, _Nil&, _Nil&>::_Type>::_Type _Rx;
	return (_Bx.template _ApplyX<_Rx>(::std:: forward<_Carg0>(_CA0), ::std:: forward<_Carg1>(_CA1), ::std:: forward<_Carg2>(_CA2), ::std:: forward<_Carg3>(_CA3), ::std:: forward<_Carg4>(_CA4), ::std:: forward<_Carg5>(_CA5), ::std:: forward<_Carg6>(_CA6) , _Nil_obj, _Nil_obj, _Nil_obj));
	}

 
template<class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6>
 #line 22 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind0"

	typename _Bindret<_Ret,
		typename _MyBind::template _Return<
			_Carg0, _Carg1, _Carg2, _Carg3, _Carg4, _Carg5, _Carg6 , _Nil&, _Nil&, _Nil&>::_Type>::_Type
		operator()(_Carg0&& _CA0, _Carg1&& _CA1, _Carg2&& _CA2, _Carg3&& _CA3, _Carg4&& _CA4, _Carg5&& _CA5, _Carg6&& _CA6)
	{	
	typedef typename _Bindret<_Ret,
		typename _MyBind::template _Return<
			_Carg0, _Carg1, _Carg2, _Carg3, _Carg4, _Carg5, _Carg6 , _Nil&, _Nil&, _Nil&>::_Type>::_Type _Rx;
	return (_Bx.template _ApplyX<_Rx>(::std:: forward<_Carg0>(_CA0), ::std:: forward<_Carg1>(_CA1), ::std:: forward<_Carg2>(_CA2), ::std:: forward<_Carg3>(_CA3), ::std:: forward<_Carg4>(_CA4), ::std:: forward<_Carg5>(_CA5), ::std:: forward<_Carg6>(_CA6) , _Nil_obj, _Nil_obj, _Nil_obj));
	}





#line 181 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xawrap"
  

#line 184 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xawrap"

























  
   #line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind0"



 
template<class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7>
 #line 7 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind0"

	typename _Bindret<_Ret,
		typename _MyBind::template _Return<
			_Carg0, _Carg1, _Carg2, _Carg3, _Carg4, _Carg5, _Carg6, _Carg7 , _Nil&, _Nil&>::_Type>::_Type
		operator()(_Carg0&& _CA0, _Carg1&& _CA1, _Carg2&& _CA2, _Carg3&& _CA3, _Carg4&& _CA4, _Carg5&& _CA5, _Carg6&& _CA6, _Carg7&& _CA7) const
	{	
	typedef typename _Bindret<_Ret,
		typename _MyBind::template _Return<
			_Carg0, _Carg1, _Carg2, _Carg3, _Carg4, _Carg5, _Carg6, _Carg7 , _Nil&, _Nil&>::_Type>::_Type _Rx;
	return (_Bx.template _ApplyX<_Rx>(::std:: forward<_Carg0>(_CA0), ::std:: forward<_Carg1>(_CA1), ::std:: forward<_Carg2>(_CA2), ::std:: forward<_Carg3>(_CA3), ::std:: forward<_Carg4>(_CA4), ::std:: forward<_Carg5>(_CA5), ::std:: forward<_Carg6>(_CA6), ::std:: forward<_Carg7>(_CA7) , _Nil_obj, _Nil_obj));
	}

 
template<class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7>
 #line 22 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind0"

	typename _Bindret<_Ret,
		typename _MyBind::template _Return<
			_Carg0, _Carg1, _Carg2, _Carg3, _Carg4, _Carg5, _Carg6, _Carg7 , _Nil&, _Nil&>::_Type>::_Type
		operator()(_Carg0&& _CA0, _Carg1&& _CA1, _Carg2&& _CA2, _Carg3&& _CA3, _Carg4&& _CA4, _Carg5&& _CA5, _Carg6&& _CA6, _Carg7&& _CA7)
	{	
	typedef typename _Bindret<_Ret,
		typename _MyBind::template _Return<
			_Carg0, _Carg1, _Carg2, _Carg3, _Carg4, _Carg5, _Carg6, _Carg7 , _Nil&, _Nil&>::_Type>::_Type _Rx;
	return (_Bx.template _ApplyX<_Rx>(::std:: forward<_Carg0>(_CA0), ::std:: forward<_Carg1>(_CA1), ::std:: forward<_Carg2>(_CA2), ::std:: forward<_Carg3>(_CA3), ::std:: forward<_Carg4>(_CA4), ::std:: forward<_Carg5>(_CA5), ::std:: forward<_Carg6>(_CA6), ::std:: forward<_Carg7>(_CA7) , _Nil_obj, _Nil_obj));
	}





#line 211 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xawrap"
  

#line 214 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xawrap"



























  
   #line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind0"



 
template<class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8>
 #line 7 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind0"

	typename _Bindret<_Ret,
		typename _MyBind::template _Return<
			_Carg0, _Carg1, _Carg2, _Carg3, _Carg4, _Carg5, _Carg6, _Carg7, _Carg8 , _Nil&>::_Type>::_Type
		operator()(_Carg0&& _CA0, _Carg1&& _CA1, _Carg2&& _CA2, _Carg3&& _CA3, _Carg4&& _CA4, _Carg5&& _CA5, _Carg6&& _CA6, _Carg7&& _CA7, _Carg8&& _CA8) const
	{	
	typedef typename _Bindret<_Ret,
		typename _MyBind::template _Return<
			_Carg0, _Carg1, _Carg2, _Carg3, _Carg4, _Carg5, _Carg6, _Carg7, _Carg8 , _Nil&>::_Type>::_Type _Rx;
	return (_Bx.template _ApplyX<_Rx>(::std:: forward<_Carg0>(_CA0), ::std:: forward<_Carg1>(_CA1), ::std:: forward<_Carg2>(_CA2), ::std:: forward<_Carg3>(_CA3), ::std:: forward<_Carg4>(_CA4), ::std:: forward<_Carg5>(_CA5), ::std:: forward<_Carg6>(_CA6), ::std:: forward<_Carg7>(_CA7), ::std:: forward<_Carg8>(_CA8) , _Nil_obj));
	}

 
template<class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8>
 #line 22 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind0"

	typename _Bindret<_Ret,
		typename _MyBind::template _Return<
			_Carg0, _Carg1, _Carg2, _Carg3, _Carg4, _Carg5, _Carg6, _Carg7, _Carg8 , _Nil&>::_Type>::_Type
		operator()(_Carg0&& _CA0, _Carg1&& _CA1, _Carg2&& _CA2, _Carg3&& _CA3, _Carg4&& _CA4, _Carg5&& _CA5, _Carg6&& _CA6, _Carg7&& _CA7, _Carg8&& _CA8)
	{	
	typedef typename _Bindret<_Ret,
		typename _MyBind::template _Return<
			_Carg0, _Carg1, _Carg2, _Carg3, _Carg4, _Carg5, _Carg6, _Carg7, _Carg8 , _Nil&>::_Type>::_Type _Rx;
	return (_Bx.template _ApplyX<_Rx>(::std:: forward<_Carg0>(_CA0), ::std:: forward<_Carg1>(_CA1), ::std:: forward<_Carg2>(_CA2), ::std:: forward<_Carg3>(_CA3), ::std:: forward<_Carg4>(_CA4), ::std:: forward<_Carg5>(_CA5), ::std:: forward<_Carg6>(_CA6), ::std:: forward<_Carg7>(_CA7), ::std:: forward<_Carg8>(_CA8) , _Nil_obj));
	}





#line 243 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xawrap"
  

#line 246 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xawrap"




























  
   #line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind0"



 
template<class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8, class _Carg9>
 #line 7 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind0"

	typename _Bindret<_Ret,
		typename _MyBind::template _Return<
			_Carg0, _Carg1, _Carg2, _Carg3, _Carg4, _Carg5, _Carg6, _Carg7, _Carg8, _Carg9 >::_Type>::_Type
		operator()(_Carg0&& _CA0, _Carg1&& _CA1, _Carg2&& _CA2, _Carg3&& _CA3, _Carg4&& _CA4, _Carg5&& _CA5, _Carg6&& _CA6, _Carg7&& _CA7, _Carg8&& _CA8, _Carg9&& _CA9) const
	{	
	typedef typename _Bindret<_Ret,
		typename _MyBind::template _Return<
			_Carg0, _Carg1, _Carg2, _Carg3, _Carg4, _Carg5, _Carg6, _Carg7, _Carg8, _Carg9 >::_Type>::_Type _Rx;
	return (_Bx.template _ApplyX<_Rx>(::std:: forward<_Carg0>(_CA0), ::std:: forward<_Carg1>(_CA1), ::std:: forward<_Carg2>(_CA2), ::std:: forward<_Carg3>(_CA3), ::std:: forward<_Carg4>(_CA4), ::std:: forward<_Carg5>(_CA5), ::std:: forward<_Carg6>(_CA6), ::std:: forward<_Carg7>(_CA7), ::std:: forward<_Carg8>(_CA8), ::std:: forward<_Carg9>(_CA9) ));
	}

 
template<class _Carg0, class _Carg1, class _Carg2, class _Carg3, class _Carg4, class _Carg5, class _Carg6, class _Carg7, class _Carg8, class _Carg9>
 #line 22 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind0"

	typename _Bindret<_Ret,
		typename _MyBind::template _Return<
			_Carg0, _Carg1, _Carg2, _Carg3, _Carg4, _Carg5, _Carg6, _Carg7, _Carg8, _Carg9 >::_Type>::_Type
		operator()(_Carg0&& _CA0, _Carg1&& _CA1, _Carg2&& _CA2, _Carg3&& _CA3, _Carg4&& _CA4, _Carg5&& _CA5, _Carg6&& _CA6, _Carg7&& _CA7, _Carg8&& _CA8, _Carg9&& _CA9)
	{	
	typedef typename _Bindret<_Ret,
		typename _MyBind::template _Return<
			_Carg0, _Carg1, _Carg2, _Carg3, _Carg4, _Carg5, _Carg6, _Carg7, _Carg8, _Carg9 >::_Type>::_Type _Rx;
	return (_Bx.template _ApplyX<_Rx>(::std:: forward<_Carg0>(_CA0), ::std:: forward<_Carg1>(_CA1), ::std:: forward<_Carg2>(_CA2), ::std:: forward<_Carg3>(_CA3), ::std:: forward<_Carg4>(_CA4), ::std:: forward<_Carg5>(_CA5), ::std:: forward<_Carg6>(_CA6), ::std:: forward<_Carg7>(_CA7), ::std:: forward<_Carg8>(_CA8), ::std:: forward<_Carg9>(_CA9) ));
	}





#line 276 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xawrap"
  

#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xawrap"














#line 372 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\functional"
private:
	_BindN _Bx;
	};

template<class _Result_type,
	class _Ret,
	class _BindN>
	class _Bind
		: public _Bind_base<_Ret, _BindN>
	{	
public:
	_Bind(_BindN _B0)
		: _Bind_base<_Ret, _BindN>(_B0)
		{	
		}
	typedef _Result_type result_type;
	};

template<class _Ret,
	class _BindN>
	class _Bind<_Notforced, _Ret, _BindN>
		: public _Bind_base<_Ret, _BindN>
	{	
public:
	_Bind(_BindN _B0)
		: _Bind_base<_Ret, _BindN>(_B0)
		{	
		}
	};

template<class _Fty,
	class _Ret,
	class _BindN>
	class _Bind_fty
		: public _Wrap_result_type<(sizeof (::std:: tr1::_Has_result_type((_Fty *)0)) == sizeof (::std:: tr1::_Yes)), _Fty>,
		  public _Bind_base<_Ret, _BindN>
	{	
public:
	_Bind_fty(_BindN _B0)
		: _Bind_base<_Ret, _BindN>(_B0)
		{	
		}
	};

	
template<class _Result_type,
	class _Ret,
	class _BindN>
	struct is_bind_expression<
		_Bind<_Result_type, _Ret, _BindN> >
	{	
	static const bool value = true;
	};

	
template<bool _Expr,
	int _Nx>
	struct _Binder;

 
 
 
 
 
 

template<>
	struct _Binder<true, 0>
	{	
	template<class _Arg,
		class _Barg0, class _Barg1, class _Barg2, class _Barg3, class _Barg4, class _Barg5, class _Barg6, class _Barg7, class _Barg8, class _Barg9>
		static typename _Arg::
			_MyBind::template _Return<_Barg0 &, _Barg1 &, _Barg2 &, _Barg3 &, _Barg4 &, _Barg5 &, _Barg6 &, _Barg7 &, _Barg8 &, _Barg9 &>::_Type
				_Get(_Arg _Ax, _Barg0 && _Bx0, _Barg1 && _Bx1, _Barg2 && _Bx2, _Barg3 && _Bx3, _Barg4 && _Bx4, _Barg5 && _Bx5, _Barg6 && _Bx6, _Barg7 && _Bx7, _Barg8 && _Bx8, _Barg9 && _Bx9)
		{	
		return (_Ax(_Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9));
		}

	template<class _Arg,
		class _Barg0, class _Barg1, class _Barg2, class _Barg3, class _Barg4, class _Barg5, class _Barg6, class _Barg7, class _Barg8, class _Barg9>
		struct _Ret
		{	
		typedef typename _Arg::
			_MyBind::template _Return<_Barg0, _Barg1, _Barg2, _Barg3, _Barg4, _Barg5, _Barg6, _Barg7, _Barg8, _Barg9>::_Type
				_Type;
		};
	};

template<>
	struct _Binder<false, 0>
	{	
	template<class _Arg,
		class _Barg0, class _Barg1, class _Barg2, class _Barg3, class _Barg4, class _Barg5, class _Barg6, class _Barg7, class _Barg8, class _Barg9>
		static _Arg& _Get(_Arg& _Val, _Barg0 && _Bx0, _Barg1 && _Bx1, _Barg2 && _Bx2, _Barg3 && _Bx3, _Barg4 && _Bx4, _Barg5 && _Bx5, _Barg6 && _Bx6, _Barg7 && _Bx7, _Barg8 && _Bx8, _Barg9 && _Bx9)
		{	
		return (_Val);
		}

	template<class _Arg,
		class _Barg0, class _Barg1, class _Barg2, class _Barg3, class _Barg4, class _Barg5, class _Barg6, class _Barg7, class _Barg8, class _Barg9>
		struct _Ret
		{	
		typedef _Arg& _Type;
		};
	};


 
 #line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"





 

#line 9 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"





 
 #line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 
  
  
  
  
  
  

 

















































































#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  

 




#line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  
  
  
  
  
  
  
  
  
  
  
  
  

 




























#line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  

 

#line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  

 

#line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  

































	#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"

















 
  
  
  

 





















































































































































































#line 206 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"

 
template<class _Callable>
	class _Bind0
	{	
public:
	typedef _Callable _MyCallable;
	typedef typename _Callable::_MyTy _MyTy;

	template<class _Barg0, class _Barg1, class _Barg2, class _Barg3, class _Barg4, class _Barg5, class _Barg6, class _Barg7, class _Barg8, class _Barg9>
		struct _Return
		{	
		typedef typename _MyCallable::_MyTy _MyTy;
		typedef typename result_of<_MyTy()>::type _Type;
		};

	_Bind0(_MyTy& _Val)
		: _Callee(_Val)
		{	
		}

	template<class _Ret,
		class _Barg0, class _Barg1, class _Barg2, class _Barg3, class _Barg4, class _Barg5, class _Barg6, class _Barg7, class _Barg8, class _Barg9>
		_Ret _ApplyX(_Barg0 _Bx0, _Barg1 _Bx1, _Barg2 _Bx2, _Barg3 _Bx3, _Barg4 _Bx4, _Barg5 _Bx5, _Barg6 _Bx6, _Barg7 _Bx7, _Barg8 _Bx8, _Barg9 _Bx9) const
		{	
		return (_Callee.template _ApplyX<_Ret>());
		}

	_MyCallable _Callee;
	};

 
































































#line 303 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"

template<class _Result_type, class _Ret, class _BindTy      >
	struct _Result_of0<_Bind<_Result_type, _Ret, _BindTy>      >
	{	
	typedef _Ret _Type;
	};

template<class _Result_type, class _BindTy      >
	struct _Result_of0<_Bind<_Result_type, _Notforced, _BindTy>      >
	{	
	typedef typename _BindTy::
		template _Return<     _Nil&, _Nil&, _Nil&, _Nil&, _Nil&, _Nil&, _Nil&, _Nil&, _Nil&, _Nil&>::_Type _Type;
	};

template<class _Ret,
	class _Fty
	     > inline
	_Bind<_Ret,
		_Ret,
		_Bind0<_Callable_obj<_Fty>      > >
			bind(_Fty _Val      )
	{	
	typedef _Bind0<_Callable_obj<_Fty>      > _MyBind;
	return (_Bind<_Ret, _Ret, _MyBind>(_MyBind(_Val      )));
	}

template<class _Fty
	     > inline
	_Bind_fty<_Fty,
		_Notforced,
		_Bind0<_Callable_obj<_Fty>      > >
			bind(_Fty _Val      )
	{	
	typedef _Bind0<_Callable_obj<_Fty>      > _MyBind;
	return (_Bind_fty<_Fty, _Notforced, _MyBind>(_MyBind(_Val      )));
	}


template<class _Ret,
	class _Rx
	     
	     > inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind0<_Callable_fun<_Rx(__cdecl * const)(    )>      > >
		>::type
			bind(_Rx(__cdecl * const _Val)(    )      )
	{	
	typedef _Callable_fun<_Rx(__cdecl * const)(    )> _Callable;
	typedef _Bind0<_Callable      > _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val      )));
	}

template<class _Rx
	     
	     > inline
	_Bind<_Rx,
		_Rx,
		_Bind0<_Callable_fun<_Rx(__cdecl * const)(    )>      > >
			bind(_Rx(__cdecl * const _Val)(    )      )
	{	
	typedef _Callable_fun<_Rx(__cdecl * const)(    )> _Callable;
	typedef _Bind0<_Callable      > _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val      )));
	}

 





























































 































 


























#line 492 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"

 







































































































































































































































































































































































































































































































































































































































































































#line 1174 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"



















#line 254 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
























#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 16 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"
 
#line 18 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"


#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 









































































#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  

 













#line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  

 

#line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  

 

#line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  

































	#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"

















 




#line 24 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"
  

  

  


 













































































































































































#line 206 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"

 





























#line 238 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"
template<>
	struct _Binder<false, 1>
	{	
	template<class _Arg,
		class _Barg0, class _Barg1, class _Barg2, class _Barg3, class _Barg4, class _Barg5, class _Barg6, class _Barg7, class _Barg8, class _Barg9>
		static _Barg0& _Get(_Arg, _Barg0 && _Bx0, _Barg1 && _Bx1, _Barg2 && _Bx2, _Barg3 && _Bx3, _Barg4 && _Bx4, _Barg5 && _Bx5, _Barg6 && _Bx6, _Barg7 && _Bx7, _Barg8 && _Bx8, _Barg9 && _Bx9)
		{	
		return (_Bx0);
		}

	template<class _Arg,
		class _Barg0, class _Barg1, class _Barg2, class _Barg3, class _Barg4, class _Barg5, class _Barg6, class _Barg7, class _Barg8, class _Barg9>
		struct _Ret
		{	
		typedef _Barg0 _Type;
		};
	};

template<class _Callable,
	class _Arg0    >
	class _Bind1
		: public _Bind0<_Callable    >
	{	
public:
	typedef _Bind1<_Callable , _Arg0    > _Self;
	typedef _Binder<is_bind_expression<_Arg0>::value,
		is_placeholder<_Arg0>::value> _Binder0;
	typedef _Arg0 _MyArg;

	template<class _Barg0, class _Barg1, class _Barg2, class _Barg3, class _Barg4, class _Barg5, class _Barg6, class _Barg7, class _Barg8, class _Barg9>
		struct _Return
		{	
		typedef typename _Bind0<_Callable    >::_MyCallable
			_MyCallable;
		typedef typename _MyCallable::_MyTy _MyTy;
		typedef typename result_of<_MyTy(_Barg0)>::type _Type;
		};

	_Bind1(typename _Callable::_MyTy _Val, _Arg0 _Ax0    )
		: _Vx0(_Ax0), _Bind0<_Callable    >(_Val    )
		{	
		}

	template<class _Ret,
		class _Barg0, class _Barg1, class _Barg2, class _Barg3, class _Barg4, class _Barg5, class _Barg6, class _Barg7, class _Barg8, class _Barg9>
		_Ret _ApplyX(_Barg0 && _Bx0, _Barg1 && _Bx1, _Barg2 && _Bx2, _Barg3 && _Bx3, _Barg4 && _Bx4, _Barg5 && _Bx5, _Barg6 && _Bx6, _Barg7 && _Bx7, _Barg8 && _Bx8, _Barg9 && _Bx9) const
		{	
		return (this->_Callee.template _ApplyX<_Ret>(_Binder0::_Get(this->_Vx0, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9)));
		}

	template<class _Ret,
		class _Barg0, class _Barg1, class _Barg2, class _Barg3, class _Barg4, class _Barg5, class _Barg6, class _Barg7, class _Barg8, class _Barg9>
		_Ret _ApplyX(_Barg0 && _Bx0, _Barg1 && _Bx1, _Barg2 && _Bx2, _Barg3 && _Bx3, _Barg4 && _Bx4, _Barg5 && _Bx5, _Barg6 && _Bx6, _Barg7 && _Bx7, _Barg8 && _Bx8, _Barg9 && _Bx9)
		{	
		return (this->_Callee.template _ApplyX<_Ret>(_Binder0::_Get(this->_Vx0, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9)));
		}

	_Arg0 _Vx0;
	};

	
		namespace placeholders {	
static _Ph<1> _1;
		}	
 #line 303 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"

template<class _Result_type, class _Ret, class _BindTy , class _Arg0    >
	struct _Result_of1<_Bind<_Result_type, _Ret, _BindTy> , _Arg0    >
	{	
	typedef _Ret _Type;
	};

template<class _Result_type, class _BindTy , class _Arg0    >
	struct _Result_of1<_Bind<_Result_type, _Notforced, _BindTy> , _Arg0    >
	{	
	typedef typename _BindTy::
		template _Return<_Arg0     , _Nil&, _Nil&, _Nil&, _Nil&, _Nil&, _Nil&, _Nil&, _Nil&, _Nil&>::_Type _Type;
	};

template<class _Ret,
	class _Fty
	, class _Arg0    > inline
	_Bind<_Ret,
		_Ret,
		_Bind1<_Callable_obj<_Fty> , _Arg0    > >
			bind(_Fty _Val , _Arg0 _Ax0    )
	{	
	typedef _Bind1<_Callable_obj<_Fty> , _Arg0    > _MyBind;
	return (_Bind<_Ret, _Ret, _MyBind>(_MyBind(_Val , _Ax0    )));
	}

template<class _Fty
	, class _Arg0    > inline
	_Bind_fty<_Fty,
		_Notforced,
		_Bind1<_Callable_obj<_Fty> , _Arg0    > >
			bind(_Fty _Val , _Arg0 _Ax0    )
	{	
	typedef _Bind1<_Callable_obj<_Fty> , _Arg0    > _MyBind;
	return (_Bind_fty<_Fty, _Notforced, _MyBind>(_MyBind(_Val , _Ax0    )));
	}


template<class _Ret,
	class _Rx
	, class _Farg0    
	, class _Arg0    > inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind1<_Callable_fun<_Rx(__cdecl * const)(_Farg0    )> , _Arg0    > >
		>::type
			bind(_Rx(__cdecl * const _Val)(_Farg0    ) , _Arg0 _Ax0    )
	{	
	typedef _Callable_fun<_Rx(__cdecl * const)(_Farg0    )> _Callable;
	typedef _Bind1<_Callable , _Arg0    > _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val , _Ax0    )));
	}

template<class _Rx
	, class _Farg0    
	, class _Arg0    > inline
	_Bind<_Rx,
		_Rx,
		_Bind1<_Callable_fun<_Rx(__cdecl * const)(_Farg0    )> , _Arg0    > >
			bind(_Rx(__cdecl * const _Val)(_Farg0    ) , _Arg0 _Ax0    )
	{	
	typedef _Callable_fun<_Rx(__cdecl * const)(_Farg0    )> _Callable;
	typedef _Bind1<_Callable , _Arg0    > _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val , _Ax0    )));
	}

 





























































 































 
template<class _Ret,
	class _Rx,
	class _Farg0,
	class _Arg0> inline
	_Bind<_Ret,
		_Rx,
		_Bind1<_Callable_pmd<_Rx _Farg0::*const, _Farg0>, _Arg0> >
			bind(_Rx _Farg0::* const _Val, _Arg0 _A0)
	{	
	typedef _Callable_pmd<_Rx _Farg0::*const, _Farg0> _Callable;
	typedef _Bind1<_Callable, _Arg0> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _A0)));
	}

template<class _Rx,
	class _Farg0,
	class _Arg0> inline
	_Bind<_Notforced,
		_Rx,
		_Bind1<_Callable_pmd<_Rx _Farg0::*const, _Farg0>, _Arg0> >
			bind(_Rx _Farg0::* const _Val, _Arg0 _A0)
	{	
	typedef _Callable_pmd<_Rx _Farg0::*const, _Farg0> _Callable;
	typedef _Bind1<_Callable, _Arg0> _MyBind;
	return (_Bind<_Notforced, _Rx, _MyBind>(_MyBind(_Val, _A0)));
	}
 #line 492 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"

 
template<class _Ret,
	class _Rx,
	class _Farg0    ,
	class _Arg0    > inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind1<_Callable_pmf<_Rx(__thiscall _Farg0::*const)(  ), _Farg0>,
				_Arg0    > >
		>::type
				bind(_Rx(__thiscall _Farg0::* const _Val)(  ) , _Arg0 _Ax0    )
	{	
	typedef _Callable_pmf<_Rx(__thiscall _Farg0::*const)(  ), _Farg0>
		_Callable;
	typedef _Bind1<_Callable, _Arg0    > _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0    )));
	}

template<class _Rx,
	class _Farg0    ,
	class _Arg0    > inline
	_Bind<_Rx,
		_Rx,
		_Bind1<_Callable_pmf<_Rx(__thiscall _Farg0::*const)(  ), _Farg0>,
			_Arg0    > >
			bind(_Rx(__thiscall _Farg0::* const _Val)(  ) , _Arg0 _Ax0    )
	{	
	typedef _Callable_pmf<_Rx(__thiscall _Farg0::*const)(  ), _Farg0>
		_Callable;
	typedef _Bind1<_Callable, _Arg0    > _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0    )));
	}

template<class _Ret,
	class _Rx,
	class _Farg0    ,
	class _Arg0    > inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind1<_Callable_pmf<_Rx(__thiscall _Farg0::*const)(  ) const,
				_Farg0>, _Arg0    > >
		>::type
			bind(_Rx(__thiscall _Farg0::* const _Val)(  ) const , _Arg0 _Ax0    )
	{	
	typedef _Callable_pmf<_Rx(__thiscall _Farg0::*const)(  ) const, _Farg0>
		_Callable;
	typedef _Bind1<_Callable, _Arg0    > _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0    )));
	}

template<class _Rx,
	class _Farg0    ,
	class _Arg0    > inline
	_Bind<_Rx,
		_Rx,
		_Bind1<_Callable_pmf<_Rx(__thiscall _Farg0::*const)(  ) const,
			_Farg0>, _Arg0    > >
			bind(_Rx(__thiscall _Farg0::* const _Val)(  ) const , _Arg0 _Ax0    )
	{	
	typedef _Callable_pmf<_Rx(__thiscall _Farg0::*const)(  ) const, _Farg0>
		_Callable;
	typedef _Bind1<_Callable, _Arg0    > _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0    )));
	}

template<class _Ret,
	class _Rx,
	class _Farg0    ,
	class _Arg0    > inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind1<_Callable_pmf<_Rx(__thiscall _Farg0::*const)(  ) volatile,
				_Farg0>, _Arg0    > >
		>::type
		bind(_Rx(__thiscall _Farg0::* const _Val)(  ) volatile , _Arg0 _Ax0    )
	{	
	typedef _Callable_pmf<_Rx(__thiscall _Farg0::*const)(  ) volatile, _Farg0>
		_Callable;
	typedef _Bind1<_Callable, _Arg0    > _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0    )));
	}

template<class _Rx,
	class _Farg0    ,
	class _Arg0    > inline
	_Bind<_Rx,
		_Rx,
		_Bind1<_Callable_pmf<_Rx(__thiscall _Farg0::*const)(  ) volatile,
			_Farg0>, _Arg0    > >
			bind(_Rx(__thiscall _Farg0::* const _Val)(  ) volatile , _Arg0 _Ax0    )
	{	
	typedef _Callable_pmf<_Rx(__thiscall _Farg0::*const)(  ) volatile , _Farg0>
		_Callable;
	typedef _Bind1<_Callable, _Arg0    > _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0    )));
	}

template<class _Ret,
	class _Rx,
	class _Farg0    ,
	class _Arg0    > inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind1<_Callable_pmf<_Rx(__thiscall _Farg0::*const)(  ) const volatile,
				_Farg0>, _Arg0    > >
		>::type
			bind(_Rx(__thiscall _Farg0::* const _Val)(  )
				const volatile , _Arg0 _Ax0    )
	{	
	typedef _Callable_pmf<_Rx(__thiscall _Farg0::*const)(  ) const volatile,
		_Farg0> _Callable;
	typedef _Bind1<_Callable, _Arg0    > _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0    )));
	}

template<class _Rx,
	class _Farg0    ,
	class _Arg0    > inline
	_Bind<_Rx,
		_Rx,
		_Bind1<_Callable_pmf<_Rx(__thiscall _Farg0::*const)(  ) const volatile,
			_Farg0>, _Arg0    > >
		bind(_Rx(__thiscall _Farg0::* const _Val)(
			  ) const volatile , _Arg0 _Ax0    )
	{	
	typedef _Callable_pmf<_Rx(__thiscall _Farg0::*const)(  ) const volatile,
		_Farg0> _Callable;
	typedef _Bind1<_Callable, _Arg0    > _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0    )));
	}


 
























































































































































































































































































































































































































 






































































































































 #line 1174 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"



















#line 254 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
























#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 21 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

































































#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 
  

 

#line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  

































	#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"

















 




#line 24 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"







#line 32 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"
  


  


  



 


































































































































































#line 206 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"

 





























#line 238 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"
template<>
	struct _Binder<false, 2>
	{	
	template<class _Arg,
		class _Barg0, class _Barg1, class _Barg2, class _Barg3, class _Barg4, class _Barg5, class _Barg6, class _Barg7, class _Barg8, class _Barg9>
		static _Barg1& _Get(_Arg, _Barg0 && _Bx0, _Barg1 && _Bx1, _Barg2 && _Bx2, _Barg3 && _Bx3, _Barg4 && _Bx4, _Barg5 && _Bx5, _Barg6 && _Bx6, _Barg7 && _Bx7, _Barg8 && _Bx8, _Barg9 && _Bx9)
		{	
		return (_Bx1);
		}

	template<class _Arg,
		class _Barg0, class _Barg1, class _Barg2, class _Barg3, class _Barg4, class _Barg5, class _Barg6, class _Barg7, class _Barg8, class _Barg9>
		struct _Ret
		{	
		typedef _Barg1 _Type;
		};
	};

template<class _Callable,
	class _Arg0 ,   class _Arg1>
	class _Bind2
		: public _Bind1<_Callable , _Arg0  >
	{	
public:
	typedef _Bind2<_Callable , _Arg0 ,   _Arg1> _Self;
	typedef _Binder<is_bind_expression<_Arg1>::value,
		is_placeholder<_Arg1>::value> _Binder1;
	typedef _Arg1 _MyArg;

	template<class _Barg0, class _Barg1, class _Barg2, class _Barg3, class _Barg4, class _Barg5, class _Barg6, class _Barg7, class _Barg8, class _Barg9>
		struct _Return
		{	
		typedef typename _Bind1<_Callable , _Arg0  >::_MyCallable
			_MyCallable;
		typedef typename _MyCallable::_MyTy _MyTy;
		typedef typename result_of<_MyTy(_Barg0, _Barg1)>::type _Type;
		};

	_Bind2(typename _Callable::_MyTy _Val, _Arg0 _Ax0 ,   _Arg1 _Ax1)
		: _Vx1(_Ax1), _Bind1<_Callable , _Arg0  >(_Val , _Ax0  )
		{	
		}

	template<class _Ret,
		class _Barg0, class _Barg1, class _Barg2, class _Barg3, class _Barg4, class _Barg5, class _Barg6, class _Barg7, class _Barg8, class _Barg9>
		_Ret _ApplyX(_Barg0 && _Bx0, _Barg1 && _Bx1, _Barg2 && _Bx2, _Barg3 && _Bx3, _Barg4 && _Bx4, _Barg5 && _Bx5, _Barg6 && _Bx6, _Barg7 && _Bx7, _Barg8 && _Bx8, _Barg9 && _Bx9) const
		{	
		return (this->_Callee.template _ApplyX<_Ret>(_Binder0::_Get(this->_Vx0, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder1::_Get(this->_Vx1, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9)));
		}

	template<class _Ret,
		class _Barg0, class _Barg1, class _Barg2, class _Barg3, class _Barg4, class _Barg5, class _Barg6, class _Barg7, class _Barg8, class _Barg9>
		_Ret _ApplyX(_Barg0 && _Bx0, _Barg1 && _Bx1, _Barg2 && _Bx2, _Barg3 && _Bx3, _Barg4 && _Bx4, _Barg5 && _Bx5, _Barg6 && _Bx6, _Barg7 && _Bx7, _Barg8 && _Bx8, _Barg9 && _Bx9)
		{	
		return (this->_Callee.template _ApplyX<_Ret>(_Binder0::_Get(this->_Vx0, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder1::_Get(this->_Vx1, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9)));
		}

	_Arg1 _Vx1;
	};

	
		namespace placeholders {	
static _Ph<2> _2;
		}	
 #line 303 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"

template<class _Result_type, class _Ret, class _BindTy , class _Arg0 ,   class _Arg1>
	struct _Result_of2<_Bind<_Result_type, _Ret, _BindTy> , _Arg0 ,   _Arg1>
	{	
	typedef _Ret _Type;
	};

template<class _Result_type, class _BindTy , class _Arg0 ,   class _Arg1>
	struct _Result_of2<_Bind<_Result_type, _Notforced, _BindTy> , _Arg0 ,   _Arg1>
	{	
	typedef typename _BindTy::
		template _Return<_Arg0 ,   _Arg1 , _Nil&, _Nil&, _Nil&, _Nil&, _Nil&, _Nil&, _Nil&, _Nil&>::_Type _Type;
	};

template<class _Ret,
	class _Fty
	, class _Arg0 ,   class _Arg1> inline
	_Bind<_Ret,
		_Ret,
		_Bind2<_Callable_obj<_Fty> , _Arg0 ,   _Arg1> >
			bind(_Fty _Val , _Arg0 _Ax0 ,   _Arg1 _Ax1)
	{	
	typedef _Bind2<_Callable_obj<_Fty> , _Arg0 ,   _Arg1> _MyBind;
	return (_Bind<_Ret, _Ret, _MyBind>(_MyBind(_Val , _Ax0 ,   _Ax1)));
	}

template<class _Fty
	, class _Arg0 ,   class _Arg1> inline
	_Bind_fty<_Fty,
		_Notforced,
		_Bind2<_Callable_obj<_Fty> , _Arg0 ,   _Arg1> >
			bind(_Fty _Val , _Arg0 _Ax0 ,   _Arg1 _Ax1)
	{	
	typedef _Bind2<_Callable_obj<_Fty> , _Arg0 ,   _Arg1> _MyBind;
	return (_Bind_fty<_Fty, _Notforced, _MyBind>(_MyBind(_Val , _Ax0 ,   _Ax1)));
	}


template<class _Ret,
	class _Rx
	, class _Farg0 ,   class _Farg1
	, class _Arg0 ,   class _Arg1> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind2<_Callable_fun<_Rx(__cdecl * const)(_Farg0 ,   _Farg1)> , _Arg0 ,   _Arg1> >
		>::type
			bind(_Rx(__cdecl * const _Val)(_Farg0 ,   _Farg1) , _Arg0 _Ax0 ,   _Arg1 _Ax1)
	{	
	typedef _Callable_fun<_Rx(__cdecl * const)(_Farg0 ,   _Farg1)> _Callable;
	typedef _Bind2<_Callable , _Arg0 ,   _Arg1> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val , _Ax0 ,   _Ax1)));
	}

template<class _Rx
	, class _Farg0 ,   class _Farg1
	, class _Arg0 ,   class _Arg1> inline
	_Bind<_Rx,
		_Rx,
		_Bind2<_Callable_fun<_Rx(__cdecl * const)(_Farg0 ,   _Farg1)> , _Arg0 ,   _Arg1> >
			bind(_Rx(__cdecl * const _Val)(_Farg0 ,   _Farg1) , _Arg0 _Ax0 ,   _Arg1 _Ax1)
	{	
	typedef _Callable_fun<_Rx(__cdecl * const)(_Farg0 ,   _Farg1)> _Callable;
	typedef _Bind2<_Callable , _Arg0 ,   _Arg1> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val , _Ax0 ,   _Ax1)));
	}

 





























































 































 


























#line 492 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"

 
template<class _Ret,
	class _Rx,
	class _Farg0 ,   class _Farg1,
	class _Arg0 ,   class _Arg1> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind2<_Callable_pmf<_Rx(__thiscall _Farg0::*const)(  _Farg1), _Farg0>,
				_Arg0 ,   _Arg1> >
		>::type
				bind(_Rx(__thiscall _Farg0::* const _Val)(  _Farg1) , _Arg0 _Ax0 ,   _Arg1 _Ax1)
	{	
	typedef _Callable_pmf<_Rx(__thiscall _Farg0::*const)(  _Farg1), _Farg0>
		_Callable;
	typedef _Bind2<_Callable, _Arg0 ,   _Arg1> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 ,   _Ax1)));
	}

template<class _Rx,
	class _Farg0 ,   class _Farg1,
	class _Arg0 ,   class _Arg1> inline
	_Bind<_Rx,
		_Rx,
		_Bind2<_Callable_pmf<_Rx(__thiscall _Farg0::*const)(  _Farg1), _Farg0>,
			_Arg0 ,   _Arg1> >
			bind(_Rx(__thiscall _Farg0::* const _Val)(  _Farg1) , _Arg0 _Ax0 ,   _Arg1 _Ax1)
	{	
	typedef _Callable_pmf<_Rx(__thiscall _Farg0::*const)(  _Farg1), _Farg0>
		_Callable;
	typedef _Bind2<_Callable, _Arg0 ,   _Arg1> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 ,   _Ax1)));
	}

template<class _Ret,
	class _Rx,
	class _Farg0 ,   class _Farg1,
	class _Arg0 ,   class _Arg1> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind2<_Callable_pmf<_Rx(__thiscall _Farg0::*const)(  _Farg1) const,
				_Farg0>, _Arg0 ,   _Arg1> >
		>::type
			bind(_Rx(__thiscall _Farg0::* const _Val)(  _Farg1) const , _Arg0 _Ax0 ,   _Arg1 _Ax1)
	{	
	typedef _Callable_pmf<_Rx(__thiscall _Farg0::*const)(  _Farg1) const, _Farg0>
		_Callable;
	typedef _Bind2<_Callable, _Arg0 ,   _Arg1> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 ,   _Ax1)));
	}

template<class _Rx,
	class _Farg0 ,   class _Farg1,
	class _Arg0 ,   class _Arg1> inline
	_Bind<_Rx,
		_Rx,
		_Bind2<_Callable_pmf<_Rx(__thiscall _Farg0::*const)(  _Farg1) const,
			_Farg0>, _Arg0 ,   _Arg1> >
			bind(_Rx(__thiscall _Farg0::* const _Val)(  _Farg1) const , _Arg0 _Ax0 ,   _Arg1 _Ax1)
	{	
	typedef _Callable_pmf<_Rx(__thiscall _Farg0::*const)(  _Farg1) const, _Farg0>
		_Callable;
	typedef _Bind2<_Callable, _Arg0 ,   _Arg1> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 ,   _Ax1)));
	}

template<class _Ret,
	class _Rx,
	class _Farg0 ,   class _Farg1,
	class _Arg0 ,   class _Arg1> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind2<_Callable_pmf<_Rx(__thiscall _Farg0::*const)(  _Farg1) volatile,
				_Farg0>, _Arg0 ,   _Arg1> >
		>::type
		bind(_Rx(__thiscall _Farg0::* const _Val)(  _Farg1) volatile , _Arg0 _Ax0 ,   _Arg1 _Ax1)
	{	
	typedef _Callable_pmf<_Rx(__thiscall _Farg0::*const)(  _Farg1) volatile, _Farg0>
		_Callable;
	typedef _Bind2<_Callable, _Arg0 ,   _Arg1> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 ,   _Ax1)));
	}

template<class _Rx,
	class _Farg0 ,   class _Farg1,
	class _Arg0 ,   class _Arg1> inline
	_Bind<_Rx,
		_Rx,
		_Bind2<_Callable_pmf<_Rx(__thiscall _Farg0::*const)(  _Farg1) volatile,
			_Farg0>, _Arg0 ,   _Arg1> >
			bind(_Rx(__thiscall _Farg0::* const _Val)(  _Farg1) volatile , _Arg0 _Ax0 ,   _Arg1 _Ax1)
	{	
	typedef _Callable_pmf<_Rx(__thiscall _Farg0::*const)(  _Farg1) volatile , _Farg0>
		_Callable;
	typedef _Bind2<_Callable, _Arg0 ,   _Arg1> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 ,   _Ax1)));
	}

template<class _Ret,
	class _Rx,
	class _Farg0 ,   class _Farg1,
	class _Arg0 ,   class _Arg1> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind2<_Callable_pmf<_Rx(__thiscall _Farg0::*const)(  _Farg1) const volatile,
				_Farg0>, _Arg0 ,   _Arg1> >
		>::type
			bind(_Rx(__thiscall _Farg0::* const _Val)(  _Farg1)
				const volatile , _Arg0 _Ax0 ,   _Arg1 _Ax1)
	{	
	typedef _Callable_pmf<_Rx(__thiscall _Farg0::*const)(  _Farg1) const volatile,
		_Farg0> _Callable;
	typedef _Bind2<_Callable, _Arg0 ,   _Arg1> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 ,   _Ax1)));
	}

template<class _Rx,
	class _Farg0 ,   class _Farg1,
	class _Arg0 ,   class _Arg1> inline
	_Bind<_Rx,
		_Rx,
		_Bind2<_Callable_pmf<_Rx(__thiscall _Farg0::*const)(  _Farg1) const volatile,
			_Farg0>, _Arg0 ,   _Arg1> >
		bind(_Rx(__thiscall _Farg0::* const _Val)(
			  _Farg1) const volatile , _Arg0 _Ax0 ,   _Arg1 _Ax1)
	{	
	typedef _Callable_pmf<_Rx(__thiscall _Farg0::*const)(  _Farg1) const volatile,
		_Farg0> _Callable;
	typedef _Bind2<_Callable, _Arg0 ,   _Arg1> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 ,   _Ax1)));
	}


 
























































































































































































































































































































































































































 






































































































































 #line 1174 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"



















#line 254 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
























#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 25 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

























































#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  

































	#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"

















 




#line 24 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"







#line 32 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"










#line 43 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"
  



  



  



 





















































































































































#line 206 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"

 





























#line 238 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"
template<>
	struct _Binder<false, 3>
	{	
	template<class _Arg,
		class _Barg0, class _Barg1, class _Barg2, class _Barg3, class _Barg4, class _Barg5, class _Barg6, class _Barg7, class _Barg8, class _Barg9>
		static _Barg2& _Get(_Arg, _Barg0 && _Bx0, _Barg1 && _Bx1, _Barg2 && _Bx2, _Barg3 && _Bx3, _Barg4 && _Bx4, _Barg5 && _Bx5, _Barg6 && _Bx6, _Barg7 && _Bx7, _Barg8 && _Bx8, _Barg9 && _Bx9)
		{	
		return (_Bx2);
		}

	template<class _Arg,
		class _Barg0, class _Barg1, class _Barg2, class _Barg3, class _Barg4, class _Barg5, class _Barg6, class _Barg7, class _Barg8, class _Barg9>
		struct _Ret
		{	
		typedef _Barg2 _Type;
		};
	};

template<class _Callable,
	class _Arg0 , class _Arg1 , class _Arg2>
	class _Bind3
		: public _Bind2<_Callable , _Arg0 , _Arg1>
	{	
public:
	typedef _Bind3<_Callable , _Arg0 , _Arg1 , _Arg2> _Self;
	typedef _Binder<is_bind_expression<_Arg2>::value,
		is_placeholder<_Arg2>::value> _Binder2;
	typedef _Arg2 _MyArg;

	template<class _Barg0, class _Barg1, class _Barg2, class _Barg3, class _Barg4, class _Barg5, class _Barg6, class _Barg7, class _Barg8, class _Barg9>
		struct _Return
		{	
		typedef typename _Bind2<_Callable , _Arg0 , _Arg1>::_MyCallable
			_MyCallable;
		typedef typename _MyCallable::_MyTy _MyTy;
		typedef typename result_of<_MyTy(_Barg0, _Barg1, _Barg2)>::type _Type;
		};

	_Bind3(typename _Callable::_MyTy _Val, _Arg0 _Ax0 , _Arg1 _Ax1 , _Arg2 _Ax2)
		: _Vx2(_Ax2), _Bind2<_Callable , _Arg0 , _Arg1>(_Val , _Ax0 , _Ax1)
		{	
		}

	template<class _Ret,
		class _Barg0, class _Barg1, class _Barg2, class _Barg3, class _Barg4, class _Barg5, class _Barg6, class _Barg7, class _Barg8, class _Barg9>
		_Ret _ApplyX(_Barg0 && _Bx0, _Barg1 && _Bx1, _Barg2 && _Bx2, _Barg3 && _Bx3, _Barg4 && _Bx4, _Barg5 && _Bx5, _Barg6 && _Bx6, _Barg7 && _Bx7, _Barg8 && _Bx8, _Barg9 && _Bx9) const
		{	
		return (this->_Callee.template _ApplyX<_Ret>(_Binder0::_Get(this->_Vx0, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder1::_Get(this->_Vx1, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder2::_Get(this->_Vx2, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9)));
		}

	template<class _Ret,
		class _Barg0, class _Barg1, class _Barg2, class _Barg3, class _Barg4, class _Barg5, class _Barg6, class _Barg7, class _Barg8, class _Barg9>
		_Ret _ApplyX(_Barg0 && _Bx0, _Barg1 && _Bx1, _Barg2 && _Bx2, _Barg3 && _Bx3, _Barg4 && _Bx4, _Barg5 && _Bx5, _Barg6 && _Bx6, _Barg7 && _Bx7, _Barg8 && _Bx8, _Barg9 && _Bx9)
		{	
		return (this->_Callee.template _ApplyX<_Ret>(_Binder0::_Get(this->_Vx0, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder1::_Get(this->_Vx1, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder2::_Get(this->_Vx2, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9)));
		}

	_Arg2 _Vx2;
	};

	
		namespace placeholders {	
static _Ph<3> _3;
		}	
 #line 303 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"

template<class _Result_type, class _Ret, class _BindTy , class _Arg0 , class _Arg1 , class _Arg2>
	struct _Result_of3<_Bind<_Result_type, _Ret, _BindTy> , _Arg0 , _Arg1 , _Arg2>
	{	
	typedef _Ret _Type;
	};

template<class _Result_type, class _BindTy , class _Arg0 , class _Arg1 , class _Arg2>
	struct _Result_of3<_Bind<_Result_type, _Notforced, _BindTy> , _Arg0 , _Arg1 , _Arg2>
	{	
	typedef typename _BindTy::
		template _Return<_Arg0 , _Arg1 , _Arg2 , _Nil&, _Nil&, _Nil&, _Nil&, _Nil&, _Nil&, _Nil&>::_Type _Type;
	};

template<class _Ret,
	class _Fty
	, class _Arg0 , class _Arg1 , class _Arg2> inline
	_Bind<_Ret,
		_Ret,
		_Bind3<_Callable_obj<_Fty> , _Arg0 , _Arg1 , _Arg2> >
			bind(_Fty _Val , _Arg0 _Ax0 , _Arg1 _Ax1 , _Arg2 _Ax2)
	{	
	typedef _Bind3<_Callable_obj<_Fty> , _Arg0 , _Arg1 , _Arg2> _MyBind;
	return (_Bind<_Ret, _Ret, _MyBind>(_MyBind(_Val , _Ax0 , _Ax1 , _Ax2)));
	}

template<class _Fty
	, class _Arg0 , class _Arg1 , class _Arg2> inline
	_Bind_fty<_Fty,
		_Notforced,
		_Bind3<_Callable_obj<_Fty> , _Arg0 , _Arg1 , _Arg2> >
			bind(_Fty _Val , _Arg0 _Ax0 , _Arg1 _Ax1 , _Arg2 _Ax2)
	{	
	typedef _Bind3<_Callable_obj<_Fty> , _Arg0 , _Arg1 , _Arg2> _MyBind;
	return (_Bind_fty<_Fty, _Notforced, _MyBind>(_MyBind(_Val , _Ax0 , _Ax1 , _Ax2)));
	}


template<class _Ret,
	class _Rx
	, class _Farg0 , class _Farg1 , class _Farg2
	, class _Arg0 , class _Arg1 , class _Arg2> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind3<_Callable_fun<_Rx(__cdecl * const)(_Farg0 , _Farg1 , _Farg2)> , _Arg0 , _Arg1 , _Arg2> >
		>::type
			bind(_Rx(__cdecl * const _Val)(_Farg0 , _Farg1 , _Farg2) , _Arg0 _Ax0 , _Arg1 _Ax1 , _Arg2 _Ax2)
	{	
	typedef _Callable_fun<_Rx(__cdecl * const)(_Farg0 , _Farg1 , _Farg2)> _Callable;
	typedef _Bind3<_Callable , _Arg0 , _Arg1 , _Arg2> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val , _Ax0 , _Ax1 , _Ax2)));
	}

template<class _Rx
	, class _Farg0 , class _Farg1 , class _Farg2
	, class _Arg0 , class _Arg1 , class _Arg2> inline
	_Bind<_Rx,
		_Rx,
		_Bind3<_Callable_fun<_Rx(__cdecl * const)(_Farg0 , _Farg1 , _Farg2)> , _Arg0 , _Arg1 , _Arg2> >
			bind(_Rx(__cdecl * const _Val)(_Farg0 , _Farg1 , _Farg2) , _Arg0 _Ax0 , _Arg1 _Ax1 , _Arg2 _Ax2)
	{	
	typedef _Callable_fun<_Rx(__cdecl * const)(_Farg0 , _Farg1 , _Farg2)> _Callable;
	typedef _Bind3<_Callable , _Arg0 , _Arg1 , _Arg2> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val , _Ax0 , _Ax1 , _Ax2)));
	}

 





























































 































 


























#line 492 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"

 
template<class _Ret,
	class _Rx,
	class _Farg0 , class _Farg1 , class _Farg2,
	class _Arg0 , class _Arg1 , class _Arg2> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind3<_Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1 , _Farg2), _Farg0>,
				_Arg0 , _Arg1 , _Arg2> >
		>::type
				bind(_Rx(__thiscall _Farg0::* const _Val)(_Farg1 , _Farg2) , _Arg0 _Ax0 , _Arg1 _Ax1 , _Arg2 _Ax2)
	{	
	typedef _Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1 , _Farg2), _Farg0>
		_Callable;
	typedef _Bind3<_Callable, _Arg0 , _Arg1 , _Arg2> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1 , _Ax2)));
	}

template<class _Rx,
	class _Farg0 , class _Farg1 , class _Farg2,
	class _Arg0 , class _Arg1 , class _Arg2> inline
	_Bind<_Rx,
		_Rx,
		_Bind3<_Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1 , _Farg2), _Farg0>,
			_Arg0 , _Arg1 , _Arg2> >
			bind(_Rx(__thiscall _Farg0::* const _Val)(_Farg1 , _Farg2) , _Arg0 _Ax0 , _Arg1 _Ax1 , _Arg2 _Ax2)
	{	
	typedef _Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1 , _Farg2), _Farg0>
		_Callable;
	typedef _Bind3<_Callable, _Arg0 , _Arg1 , _Arg2> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1 , _Ax2)));
	}

template<class _Ret,
	class _Rx,
	class _Farg0 , class _Farg1 , class _Farg2,
	class _Arg0 , class _Arg1 , class _Arg2> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind3<_Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1 , _Farg2) const,
				_Farg0>, _Arg0 , _Arg1 , _Arg2> >
		>::type
			bind(_Rx(__thiscall _Farg0::* const _Val)(_Farg1 , _Farg2) const , _Arg0 _Ax0 , _Arg1 _Ax1 , _Arg2 _Ax2)
	{	
	typedef _Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1 , _Farg2) const, _Farg0>
		_Callable;
	typedef _Bind3<_Callable, _Arg0 , _Arg1 , _Arg2> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1 , _Ax2)));
	}

template<class _Rx,
	class _Farg0 , class _Farg1 , class _Farg2,
	class _Arg0 , class _Arg1 , class _Arg2> inline
	_Bind<_Rx,
		_Rx,
		_Bind3<_Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1 , _Farg2) const,
			_Farg0>, _Arg0 , _Arg1 , _Arg2> >
			bind(_Rx(__thiscall _Farg0::* const _Val)(_Farg1 , _Farg2) const , _Arg0 _Ax0 , _Arg1 _Ax1 , _Arg2 _Ax2)
	{	
	typedef _Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1 , _Farg2) const, _Farg0>
		_Callable;
	typedef _Bind3<_Callable, _Arg0 , _Arg1 , _Arg2> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1 , _Ax2)));
	}

template<class _Ret,
	class _Rx,
	class _Farg0 , class _Farg1 , class _Farg2,
	class _Arg0 , class _Arg1 , class _Arg2> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind3<_Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1 , _Farg2) volatile,
				_Farg0>, _Arg0 , _Arg1 , _Arg2> >
		>::type
		bind(_Rx(__thiscall _Farg0::* const _Val)(_Farg1 , _Farg2) volatile , _Arg0 _Ax0 , _Arg1 _Ax1 , _Arg2 _Ax2)
	{	
	typedef _Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1 , _Farg2) volatile, _Farg0>
		_Callable;
	typedef _Bind3<_Callable, _Arg0 , _Arg1 , _Arg2> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1 , _Ax2)));
	}

template<class _Rx,
	class _Farg0 , class _Farg1 , class _Farg2,
	class _Arg0 , class _Arg1 , class _Arg2> inline
	_Bind<_Rx,
		_Rx,
		_Bind3<_Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1 , _Farg2) volatile,
			_Farg0>, _Arg0 , _Arg1 , _Arg2> >
			bind(_Rx(__thiscall _Farg0::* const _Val)(_Farg1 , _Farg2) volatile , _Arg0 _Ax0 , _Arg1 _Ax1 , _Arg2 _Ax2)
	{	
	typedef _Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1 , _Farg2) volatile , _Farg0>
		_Callable;
	typedef _Bind3<_Callable, _Arg0 , _Arg1 , _Arg2> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1 , _Ax2)));
	}

template<class _Ret,
	class _Rx,
	class _Farg0 , class _Farg1 , class _Farg2,
	class _Arg0 , class _Arg1 , class _Arg2> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind3<_Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1 , _Farg2) const volatile,
				_Farg0>, _Arg0 , _Arg1 , _Arg2> >
		>::type
			bind(_Rx(__thiscall _Farg0::* const _Val)(_Farg1 , _Farg2)
				const volatile , _Arg0 _Ax0 , _Arg1 _Ax1 , _Arg2 _Ax2)
	{	
	typedef _Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1 , _Farg2) const volatile,
		_Farg0> _Callable;
	typedef _Bind3<_Callable, _Arg0 , _Arg1 , _Arg2> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1 , _Ax2)));
	}

template<class _Rx,
	class _Farg0 , class _Farg1 , class _Farg2,
	class _Arg0 , class _Arg1 , class _Arg2> inline
	_Bind<_Rx,
		_Rx,
		_Bind3<_Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1 , _Farg2) const volatile,
			_Farg0>, _Arg0 , _Arg1 , _Arg2> >
		bind(_Rx(__thiscall _Farg0::* const _Val)(
			_Farg1 , _Farg2) const volatile , _Arg0 _Ax0 , _Arg1 _Ax1 , _Arg2 _Ax2)
	{	
	typedef _Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1 , _Farg2) const volatile,
		_Farg0> _Callable;
	typedef _Bind3<_Callable, _Arg0 , _Arg1 , _Arg2> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1 , _Ax2)));
	}


 
























































































































































































































































































































































































































 






































































































































 #line 1174 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"



















#line 254 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
























#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 29 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

















































#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  

































	#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"

















 




#line 24 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"







#line 32 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"










#line 43 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"












#line 56 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"
  




  




  



 






































































































































#line 206 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"

 





























#line 238 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"
template<>
	struct _Binder<false, 4>
	{	
	template<class _Arg,
		class _Barg0, class _Barg1, class _Barg2, class _Barg3, class _Barg4, class _Barg5, class _Barg6, class _Barg7, class _Barg8, class _Barg9>
		static _Barg3& _Get(_Arg, _Barg0 && _Bx0, _Barg1 && _Bx1, _Barg2 && _Bx2, _Barg3 && _Bx3, _Barg4 && _Bx4, _Barg5 && _Bx5, _Barg6 && _Bx6, _Barg7 && _Bx7, _Barg8 && _Bx8, _Barg9 && _Bx9)
		{	
		return (_Bx3);
		}

	template<class _Arg,
		class _Barg0, class _Barg1, class _Barg2, class _Barg3, class _Barg4, class _Barg5, class _Barg6, class _Barg7, class _Barg8, class _Barg9>
		struct _Ret
		{	
		typedef _Barg3 _Type;
		};
	};

template<class _Callable,
	class _Arg0 , class _Arg1, class _Arg2 , class _Arg3>
	class _Bind4
		: public _Bind3<_Callable , _Arg0 , _Arg1, _Arg2>
	{	
public:
	typedef _Bind4<_Callable , _Arg0 , _Arg1, _Arg2 , _Arg3> _Self;
	typedef _Binder<is_bind_expression<_Arg3>::value,
		is_placeholder<_Arg3>::value> _Binder3;
	typedef _Arg3 _MyArg;

	template<class _Barg0, class _Barg1, class _Barg2, class _Barg3, class _Barg4, class _Barg5, class _Barg6, class _Barg7, class _Barg8, class _Barg9>
		struct _Return
		{	
		typedef typename _Bind3<_Callable , _Arg0 , _Arg1, _Arg2>::_MyCallable
			_MyCallable;
		typedef typename _MyCallable::_MyTy _MyTy;
		typedef typename result_of<_MyTy(_Barg0, _Barg1, _Barg2, _Barg3)>::type _Type;
		};

	_Bind4(typename _Callable::_MyTy _Val, _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2 , _Arg3 _Ax3)
		: _Vx3(_Ax3), _Bind3<_Callable , _Arg0 , _Arg1, _Arg2>(_Val , _Ax0 , _Ax1, _Ax2)
		{	
		}

	template<class _Ret,
		class _Barg0, class _Barg1, class _Barg2, class _Barg3, class _Barg4, class _Barg5, class _Barg6, class _Barg7, class _Barg8, class _Barg9>
		_Ret _ApplyX(_Barg0 && _Bx0, _Barg1 && _Bx1, _Barg2 && _Bx2, _Barg3 && _Bx3, _Barg4 && _Bx4, _Barg5 && _Bx5, _Barg6 && _Bx6, _Barg7 && _Bx7, _Barg8 && _Bx8, _Barg9 && _Bx9) const
		{	
		return (this->_Callee.template _ApplyX<_Ret>(_Binder0::_Get(this->_Vx0, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder1::_Get(this->_Vx1, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder2::_Get(this->_Vx2, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder3::_Get(this->_Vx3, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9)));
		}

	template<class _Ret,
		class _Barg0, class _Barg1, class _Barg2, class _Barg3, class _Barg4, class _Barg5, class _Barg6, class _Barg7, class _Barg8, class _Barg9>
		_Ret _ApplyX(_Barg0 && _Bx0, _Barg1 && _Bx1, _Barg2 && _Bx2, _Barg3 && _Bx3, _Barg4 && _Bx4, _Barg5 && _Bx5, _Barg6 && _Bx6, _Barg7 && _Bx7, _Barg8 && _Bx8, _Barg9 && _Bx9)
		{	
		return (this->_Callee.template _ApplyX<_Ret>(_Binder0::_Get(this->_Vx0, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder1::_Get(this->_Vx1, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder2::_Get(this->_Vx2, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder3::_Get(this->_Vx3, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9)));
		}

	_Arg3 _Vx3;
	};

	
		namespace placeholders {	
static _Ph<4> _4;
		}	
 #line 303 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"

template<class _Result_type, class _Ret, class _BindTy , class _Arg0 , class _Arg1, class _Arg2 , class _Arg3>
	struct _Result_of4<_Bind<_Result_type, _Ret, _BindTy> , _Arg0 , _Arg1, _Arg2 , _Arg3>
	{	
	typedef _Ret _Type;
	};

template<class _Result_type, class _BindTy , class _Arg0 , class _Arg1, class _Arg2 , class _Arg3>
	struct _Result_of4<_Bind<_Result_type, _Notforced, _BindTy> , _Arg0 , _Arg1, _Arg2 , _Arg3>
	{	
	typedef typename _BindTy::
		template _Return<_Arg0 , _Arg1, _Arg2 , _Arg3 , _Nil&, _Nil&, _Nil&, _Nil&, _Nil&, _Nil&>::_Type _Type;
	};

template<class _Ret,
	class _Fty
	, class _Arg0 , class _Arg1, class _Arg2 , class _Arg3> inline
	_Bind<_Ret,
		_Ret,
		_Bind4<_Callable_obj<_Fty> , _Arg0 , _Arg1, _Arg2 , _Arg3> >
			bind(_Fty _Val , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2 , _Arg3 _Ax3)
	{	
	typedef _Bind4<_Callable_obj<_Fty> , _Arg0 , _Arg1, _Arg2 , _Arg3> _MyBind;
	return (_Bind<_Ret, _Ret, _MyBind>(_MyBind(_Val , _Ax0 , _Ax1, _Ax2 , _Ax3)));
	}

template<class _Fty
	, class _Arg0 , class _Arg1, class _Arg2 , class _Arg3> inline
	_Bind_fty<_Fty,
		_Notforced,
		_Bind4<_Callable_obj<_Fty> , _Arg0 , _Arg1, _Arg2 , _Arg3> >
			bind(_Fty _Val , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2 , _Arg3 _Ax3)
	{	
	typedef _Bind4<_Callable_obj<_Fty> , _Arg0 , _Arg1, _Arg2 , _Arg3> _MyBind;
	return (_Bind_fty<_Fty, _Notforced, _MyBind>(_MyBind(_Val , _Ax0 , _Ax1, _Ax2 , _Ax3)));
	}


template<class _Ret,
	class _Rx
	, class _Farg0 , class _Farg1, class _Farg2 , class _Farg3
	, class _Arg0 , class _Arg1, class _Arg2 , class _Arg3> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind4<_Callable_fun<_Rx(__cdecl * const)(_Farg0 , _Farg1, _Farg2 , _Farg3)> , _Arg0 , _Arg1, _Arg2 , _Arg3> >
		>::type
			bind(_Rx(__cdecl * const _Val)(_Farg0 , _Farg1, _Farg2 , _Farg3) , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2 , _Arg3 _Ax3)
	{	
	typedef _Callable_fun<_Rx(__cdecl * const)(_Farg0 , _Farg1, _Farg2 , _Farg3)> _Callable;
	typedef _Bind4<_Callable , _Arg0 , _Arg1, _Arg2 , _Arg3> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val , _Ax0 , _Ax1, _Ax2 , _Ax3)));
	}

template<class _Rx
	, class _Farg0 , class _Farg1, class _Farg2 , class _Farg3
	, class _Arg0 , class _Arg1, class _Arg2 , class _Arg3> inline
	_Bind<_Rx,
		_Rx,
		_Bind4<_Callable_fun<_Rx(__cdecl * const)(_Farg0 , _Farg1, _Farg2 , _Farg3)> , _Arg0 , _Arg1, _Arg2 , _Arg3> >
			bind(_Rx(__cdecl * const _Val)(_Farg0 , _Farg1, _Farg2 , _Farg3) , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2 , _Arg3 _Ax3)
	{	
	typedef _Callable_fun<_Rx(__cdecl * const)(_Farg0 , _Farg1, _Farg2 , _Farg3)> _Callable;
	typedef _Bind4<_Callable , _Arg0 , _Arg1, _Arg2 , _Arg3> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val , _Ax0 , _Ax1, _Ax2 , _Ax3)));
	}

 





























































 































 


























#line 492 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"

 
template<class _Ret,
	class _Rx,
	class _Farg0 , class _Farg1, class _Farg2 , class _Farg3,
	class _Arg0 , class _Arg1, class _Arg2 , class _Arg3> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind4<_Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2 , _Farg3), _Farg0>,
				_Arg0 , _Arg1, _Arg2 , _Arg3> >
		>::type
				bind(_Rx(__thiscall _Farg0::* const _Val)(_Farg1, _Farg2 , _Farg3) , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2 , _Arg3 _Ax3)
	{	
	typedef _Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2 , _Farg3), _Farg0>
		_Callable;
	typedef _Bind4<_Callable, _Arg0 , _Arg1, _Arg2 , _Arg3> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2 , _Ax3)));
	}

template<class _Rx,
	class _Farg0 , class _Farg1, class _Farg2 , class _Farg3,
	class _Arg0 , class _Arg1, class _Arg2 , class _Arg3> inline
	_Bind<_Rx,
		_Rx,
		_Bind4<_Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2 , _Farg3), _Farg0>,
			_Arg0 , _Arg1, _Arg2 , _Arg3> >
			bind(_Rx(__thiscall _Farg0::* const _Val)(_Farg1, _Farg2 , _Farg3) , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2 , _Arg3 _Ax3)
	{	
	typedef _Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2 , _Farg3), _Farg0>
		_Callable;
	typedef _Bind4<_Callable, _Arg0 , _Arg1, _Arg2 , _Arg3> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2 , _Ax3)));
	}

template<class _Ret,
	class _Rx,
	class _Farg0 , class _Farg1, class _Farg2 , class _Farg3,
	class _Arg0 , class _Arg1, class _Arg2 , class _Arg3> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind4<_Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2 , _Farg3) const,
				_Farg0>, _Arg0 , _Arg1, _Arg2 , _Arg3> >
		>::type
			bind(_Rx(__thiscall _Farg0::* const _Val)(_Farg1, _Farg2 , _Farg3) const , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2 , _Arg3 _Ax3)
	{	
	typedef _Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2 , _Farg3) const, _Farg0>
		_Callable;
	typedef _Bind4<_Callable, _Arg0 , _Arg1, _Arg2 , _Arg3> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2 , _Ax3)));
	}

template<class _Rx,
	class _Farg0 , class _Farg1, class _Farg2 , class _Farg3,
	class _Arg0 , class _Arg1, class _Arg2 , class _Arg3> inline
	_Bind<_Rx,
		_Rx,
		_Bind4<_Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2 , _Farg3) const,
			_Farg0>, _Arg0 , _Arg1, _Arg2 , _Arg3> >
			bind(_Rx(__thiscall _Farg0::* const _Val)(_Farg1, _Farg2 , _Farg3) const , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2 , _Arg3 _Ax3)
	{	
	typedef _Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2 , _Farg3) const, _Farg0>
		_Callable;
	typedef _Bind4<_Callable, _Arg0 , _Arg1, _Arg2 , _Arg3> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2 , _Ax3)));
	}

template<class _Ret,
	class _Rx,
	class _Farg0 , class _Farg1, class _Farg2 , class _Farg3,
	class _Arg0 , class _Arg1, class _Arg2 , class _Arg3> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind4<_Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2 , _Farg3) volatile,
				_Farg0>, _Arg0 , _Arg1, _Arg2 , _Arg3> >
		>::type
		bind(_Rx(__thiscall _Farg0::* const _Val)(_Farg1, _Farg2 , _Farg3) volatile , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2 , _Arg3 _Ax3)
	{	
	typedef _Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2 , _Farg3) volatile, _Farg0>
		_Callable;
	typedef _Bind4<_Callable, _Arg0 , _Arg1, _Arg2 , _Arg3> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2 , _Ax3)));
	}

template<class _Rx,
	class _Farg0 , class _Farg1, class _Farg2 , class _Farg3,
	class _Arg0 , class _Arg1, class _Arg2 , class _Arg3> inline
	_Bind<_Rx,
		_Rx,
		_Bind4<_Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2 , _Farg3) volatile,
			_Farg0>, _Arg0 , _Arg1, _Arg2 , _Arg3> >
			bind(_Rx(__thiscall _Farg0::* const _Val)(_Farg1, _Farg2 , _Farg3) volatile , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2 , _Arg3 _Ax3)
	{	
	typedef _Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2 , _Farg3) volatile , _Farg0>
		_Callable;
	typedef _Bind4<_Callable, _Arg0 , _Arg1, _Arg2 , _Arg3> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2 , _Ax3)));
	}

template<class _Ret,
	class _Rx,
	class _Farg0 , class _Farg1, class _Farg2 , class _Farg3,
	class _Arg0 , class _Arg1, class _Arg2 , class _Arg3> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind4<_Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2 , _Farg3) const volatile,
				_Farg0>, _Arg0 , _Arg1, _Arg2 , _Arg3> >
		>::type
			bind(_Rx(__thiscall _Farg0::* const _Val)(_Farg1, _Farg2 , _Farg3)
				const volatile , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2 , _Arg3 _Ax3)
	{	
	typedef _Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2 , _Farg3) const volatile,
		_Farg0> _Callable;
	typedef _Bind4<_Callable, _Arg0 , _Arg1, _Arg2 , _Arg3> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2 , _Ax3)));
	}

template<class _Rx,
	class _Farg0 , class _Farg1, class _Farg2 , class _Farg3,
	class _Arg0 , class _Arg1, class _Arg2 , class _Arg3> inline
	_Bind<_Rx,
		_Rx,
		_Bind4<_Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2 , _Farg3) const volatile,
			_Farg0>, _Arg0 , _Arg1, _Arg2 , _Arg3> >
		bind(_Rx(__thiscall _Farg0::* const _Val)(
			_Farg1, _Farg2 , _Farg3) const volatile , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2 , _Arg3 _Ax3)
	{	
	typedef _Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2 , _Farg3) const volatile,
		_Farg0> _Callable;
	typedef _Bind4<_Callable, _Arg0 , _Arg1, _Arg2 , _Arg3> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2 , _Ax3)));
	}


 
























































































































































































































































































































































































































 






































































































































 #line 1174 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"



















#line 254 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
























#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 33 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 47 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 









































#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  

































	#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"

















 




#line 24 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"







#line 32 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"










#line 43 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"












#line 56 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"














#line 71 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"
  





  





  



 





















































































































#line 206 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"

 





























#line 238 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"
template<>
	struct _Binder<false, 5>
	{	
	template<class _Arg,
		class _Barg0, class _Barg1, class _Barg2, class _Barg3, class _Barg4, class _Barg5, class _Barg6, class _Barg7, class _Barg8, class _Barg9>
		static _Barg4& _Get(_Arg, _Barg0 && _Bx0, _Barg1 && _Bx1, _Barg2 && _Bx2, _Barg3 && _Bx3, _Barg4 && _Bx4, _Barg5 && _Bx5, _Barg6 && _Bx6, _Barg7 && _Bx7, _Barg8 && _Bx8, _Barg9 && _Bx9)
		{	
		return (_Bx4);
		}

	template<class _Arg,
		class _Barg0, class _Barg1, class _Barg2, class _Barg3, class _Barg4, class _Barg5, class _Barg6, class _Barg7, class _Barg8, class _Barg9>
		struct _Ret
		{	
		typedef _Barg4 _Type;
		};
	};

template<class _Callable,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4>
	class _Bind5
		: public _Bind4<_Callable , _Arg0 , _Arg1, _Arg2, _Arg3>
	{	
public:
	typedef _Bind5<_Callable , _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4> _Self;
	typedef _Binder<is_bind_expression<_Arg4>::value,
		is_placeholder<_Arg4>::value> _Binder4;
	typedef _Arg4 _MyArg;

	template<class _Barg0, class _Barg1, class _Barg2, class _Barg3, class _Barg4, class _Barg5, class _Barg6, class _Barg7, class _Barg8, class _Barg9>
		struct _Return
		{	
		typedef typename _Bind4<_Callable , _Arg0 , _Arg1, _Arg2, _Arg3>::_MyCallable
			_MyCallable;
		typedef typename _MyCallable::_MyTy _MyTy;
		typedef typename result_of<_MyTy(_Barg0, _Barg1, _Barg2, _Barg3, _Barg4)>::type _Type;
		};

	_Bind5(typename _Callable::_MyTy _Val, _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3 , _Arg4 _Ax4)
		: _Vx4(_Ax4), _Bind4<_Callable , _Arg0 , _Arg1, _Arg2, _Arg3>(_Val , _Ax0 , _Ax1, _Ax2, _Ax3)
		{	
		}

	template<class _Ret,
		class _Barg0, class _Barg1, class _Barg2, class _Barg3, class _Barg4, class _Barg5, class _Barg6, class _Barg7, class _Barg8, class _Barg9>
		_Ret _ApplyX(_Barg0 && _Bx0, _Barg1 && _Bx1, _Barg2 && _Bx2, _Barg3 && _Bx3, _Barg4 && _Bx4, _Barg5 && _Bx5, _Barg6 && _Bx6, _Barg7 && _Bx7, _Barg8 && _Bx8, _Barg9 && _Bx9) const
		{	
		return (this->_Callee.template _ApplyX<_Ret>(_Binder0::_Get(this->_Vx0, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder1::_Get(this->_Vx1, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder2::_Get(this->_Vx2, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder3::_Get(this->_Vx3, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder4::_Get(this->_Vx4, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9)));
		}

	template<class _Ret,
		class _Barg0, class _Barg1, class _Barg2, class _Barg3, class _Barg4, class _Barg5, class _Barg6, class _Barg7, class _Barg8, class _Barg9>
		_Ret _ApplyX(_Barg0 && _Bx0, _Barg1 && _Bx1, _Barg2 && _Bx2, _Barg3 && _Bx3, _Barg4 && _Bx4, _Barg5 && _Bx5, _Barg6 && _Bx6, _Barg7 && _Bx7, _Barg8 && _Bx8, _Barg9 && _Bx9)
		{	
		return (this->_Callee.template _ApplyX<_Ret>(_Binder0::_Get(this->_Vx0, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder1::_Get(this->_Vx1, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder2::_Get(this->_Vx2, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder3::_Get(this->_Vx3, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder4::_Get(this->_Vx4, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9)));
		}

	_Arg4 _Vx4;
	};

	
		namespace placeholders {	
static _Ph<5> _5;
		}	
 #line 303 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"

template<class _Result_type, class _Ret, class _BindTy , class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4>
	struct _Result_of5<_Bind<_Result_type, _Ret, _BindTy> , _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4>
	{	
	typedef _Ret _Type;
	};

template<class _Result_type, class _BindTy , class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4>
	struct _Result_of5<_Bind<_Result_type, _Notforced, _BindTy> , _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4>
	{	
	typedef typename _BindTy::
		template _Return<_Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4 , _Nil&, _Nil&, _Nil&, _Nil&, _Nil&>::_Type _Type;
	};

template<class _Ret,
	class _Fty
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4> inline
	_Bind<_Ret,
		_Ret,
		_Bind5<_Callable_obj<_Fty> , _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4> >
			bind(_Fty _Val , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3 , _Arg4 _Ax4)
	{	
	typedef _Bind5<_Callable_obj<_Fty> , _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4> _MyBind;
	return (_Bind<_Ret, _Ret, _MyBind>(_MyBind(_Val , _Ax0 , _Ax1, _Ax2, _Ax3 , _Ax4)));
	}

template<class _Fty
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4> inline
	_Bind_fty<_Fty,
		_Notforced,
		_Bind5<_Callable_obj<_Fty> , _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4> >
			bind(_Fty _Val , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3 , _Arg4 _Ax4)
	{	
	typedef _Bind5<_Callable_obj<_Fty> , _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4> _MyBind;
	return (_Bind_fty<_Fty, _Notforced, _MyBind>(_MyBind(_Val , _Ax0 , _Ax1, _Ax2, _Ax3 , _Ax4)));
	}


template<class _Ret,
	class _Rx
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind5<_Callable_fun<_Rx(__cdecl * const)(_Farg0 , _Farg1, _Farg2, _Farg3 , _Farg4)> , _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4> >
		>::type
			bind(_Rx(__cdecl * const _Val)(_Farg0 , _Farg1, _Farg2, _Farg3 , _Farg4) , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3 , _Arg4 _Ax4)
	{	
	typedef _Callable_fun<_Rx(__cdecl * const)(_Farg0 , _Farg1, _Farg2, _Farg3 , _Farg4)> _Callable;
	typedef _Bind5<_Callable , _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val , _Ax0 , _Ax1, _Ax2, _Ax3 , _Ax4)));
	}

template<class _Rx
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4> inline
	_Bind<_Rx,
		_Rx,
		_Bind5<_Callable_fun<_Rx(__cdecl * const)(_Farg0 , _Farg1, _Farg2, _Farg3 , _Farg4)> , _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4> >
			bind(_Rx(__cdecl * const _Val)(_Farg0 , _Farg1, _Farg2, _Farg3 , _Farg4) , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3 , _Arg4 _Ax4)
	{	
	typedef _Callable_fun<_Rx(__cdecl * const)(_Farg0 , _Farg1, _Farg2, _Farg3 , _Farg4)> _Callable;
	typedef _Bind5<_Callable , _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val , _Ax0 , _Ax1, _Ax2, _Ax3 , _Ax4)));
	}

 





























































 































 


























#line 492 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"

 
template<class _Ret,
	class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind5<_Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3 , _Farg4), _Farg0>,
				_Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4> >
		>::type
				bind(_Rx(__thiscall _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3 , _Farg4) , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3 , _Arg4 _Ax4)
	{	
	typedef _Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3 , _Farg4), _Farg0>
		_Callable;
	typedef _Bind5<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3 , _Ax4)));
	}

template<class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4> inline
	_Bind<_Rx,
		_Rx,
		_Bind5<_Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3 , _Farg4), _Farg0>,
			_Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4> >
			bind(_Rx(__thiscall _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3 , _Farg4) , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3 , _Arg4 _Ax4)
	{	
	typedef _Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3 , _Farg4), _Farg0>
		_Callable;
	typedef _Bind5<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3 , _Ax4)));
	}

template<class _Ret,
	class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind5<_Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3 , _Farg4) const,
				_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4> >
		>::type
			bind(_Rx(__thiscall _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3 , _Farg4) const , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3 , _Arg4 _Ax4)
	{	
	typedef _Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3 , _Farg4) const, _Farg0>
		_Callable;
	typedef _Bind5<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3 , _Ax4)));
	}

template<class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4> inline
	_Bind<_Rx,
		_Rx,
		_Bind5<_Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3 , _Farg4) const,
			_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4> >
			bind(_Rx(__thiscall _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3 , _Farg4) const , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3 , _Arg4 _Ax4)
	{	
	typedef _Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3 , _Farg4) const, _Farg0>
		_Callable;
	typedef _Bind5<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3 , _Ax4)));
	}

template<class _Ret,
	class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind5<_Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3 , _Farg4) volatile,
				_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4> >
		>::type
		bind(_Rx(__thiscall _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3 , _Farg4) volatile , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3 , _Arg4 _Ax4)
	{	
	typedef _Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3 , _Farg4) volatile, _Farg0>
		_Callable;
	typedef _Bind5<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3 , _Ax4)));
	}

template<class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4> inline
	_Bind<_Rx,
		_Rx,
		_Bind5<_Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3 , _Farg4) volatile,
			_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4> >
			bind(_Rx(__thiscall _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3 , _Farg4) volatile , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3 , _Arg4 _Ax4)
	{	
	typedef _Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3 , _Farg4) volatile , _Farg0>
		_Callable;
	typedef _Bind5<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3 , _Ax4)));
	}

template<class _Ret,
	class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind5<_Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3 , _Farg4) const volatile,
				_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4> >
		>::type
			bind(_Rx(__thiscall _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3 , _Farg4)
				const volatile , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3 , _Arg4 _Ax4)
	{	
	typedef _Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3 , _Farg4) const volatile,
		_Farg0> _Callable;
	typedef _Bind5<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3 , _Ax4)));
	}

template<class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3 , class _Farg4,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3 , class _Arg4> inline
	_Bind<_Rx,
		_Rx,
		_Bind5<_Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3 , _Farg4) const volatile,
			_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4> >
		bind(_Rx(__thiscall _Farg0::* const _Val)(
			_Farg1, _Farg2, _Farg3 , _Farg4) const volatile , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3 , _Arg4 _Ax4)
	{	
	typedef _Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3 , _Farg4) const volatile,
		_Farg0> _Callable;
	typedef _Bind5<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3 , _Arg4> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3 , _Ax4)));
	}


 
























































































































































































































































































































































































































 






































































































































 #line 1174 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"



















#line 254 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
























#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 37 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 47 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 55 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

































#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  

































	#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"

















 




#line 24 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"







#line 32 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"










#line 43 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"












#line 56 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"














#line 71 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"
















#line 88 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"
  






  






  



 


































































































#line 206 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"

 





























#line 238 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"
template<>
	struct _Binder<false, 6>
	{	
	template<class _Arg,
		class _Barg0, class _Barg1, class _Barg2, class _Barg3, class _Barg4, class _Barg5, class _Barg6, class _Barg7, class _Barg8, class _Barg9>
		static _Barg5& _Get(_Arg, _Barg0 && _Bx0, _Barg1 && _Bx1, _Barg2 && _Bx2, _Barg3 && _Bx3, _Barg4 && _Bx4, _Barg5 && _Bx5, _Barg6 && _Bx6, _Barg7 && _Bx7, _Barg8 && _Bx8, _Barg9 && _Bx9)
		{	
		return (_Bx5);
		}

	template<class _Arg,
		class _Barg0, class _Barg1, class _Barg2, class _Barg3, class _Barg4, class _Barg5, class _Barg6, class _Barg7, class _Barg8, class _Barg9>
		struct _Ret
		{	
		typedef _Barg5 _Type;
		};
	};

template<class _Callable,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5>
	class _Bind6
		: public _Bind5<_Callable , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4>
	{	
public:
	typedef _Bind6<_Callable , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5> _Self;
	typedef _Binder<is_bind_expression<_Arg5>::value,
		is_placeholder<_Arg5>::value> _Binder5;
	typedef _Arg5 _MyArg;

	template<class _Barg0, class _Barg1, class _Barg2, class _Barg3, class _Barg4, class _Barg5, class _Barg6, class _Barg7, class _Barg8, class _Barg9>
		struct _Return
		{	
		typedef typename _Bind5<_Callable , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4>::_MyCallable
			_MyCallable;
		typedef typename _MyCallable::_MyTy _MyTy;
		typedef typename result_of<_MyTy(_Barg0, _Barg1, _Barg2, _Barg3, _Barg4, _Barg5)>::type _Type;
		};

	_Bind6(typename _Callable::_MyTy _Val, _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4 , _Arg5 _Ax5)
		: _Vx5(_Ax5), _Bind5<_Callable , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4>(_Val , _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4)
		{	
		}

	template<class _Ret,
		class _Barg0, class _Barg1, class _Barg2, class _Barg3, class _Barg4, class _Barg5, class _Barg6, class _Barg7, class _Barg8, class _Barg9>
		_Ret _ApplyX(_Barg0 && _Bx0, _Barg1 && _Bx1, _Barg2 && _Bx2, _Barg3 && _Bx3, _Barg4 && _Bx4, _Barg5 && _Bx5, _Barg6 && _Bx6, _Barg7 && _Bx7, _Barg8 && _Bx8, _Barg9 && _Bx9) const
		{	
		return (this->_Callee.template _ApplyX<_Ret>(_Binder0::_Get(this->_Vx0, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder1::_Get(this->_Vx1, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder2::_Get(this->_Vx2, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder3::_Get(this->_Vx3, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder4::_Get(this->_Vx4, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder5::_Get(this->_Vx5, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9)));
		}

	template<class _Ret,
		class _Barg0, class _Barg1, class _Barg2, class _Barg3, class _Barg4, class _Barg5, class _Barg6, class _Barg7, class _Barg8, class _Barg9>
		_Ret _ApplyX(_Barg0 && _Bx0, _Barg1 && _Bx1, _Barg2 && _Bx2, _Barg3 && _Bx3, _Barg4 && _Bx4, _Barg5 && _Bx5, _Barg6 && _Bx6, _Barg7 && _Bx7, _Barg8 && _Bx8, _Barg9 && _Bx9)
		{	
		return (this->_Callee.template _ApplyX<_Ret>(_Binder0::_Get(this->_Vx0, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder1::_Get(this->_Vx1, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder2::_Get(this->_Vx2, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder3::_Get(this->_Vx3, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder4::_Get(this->_Vx4, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder5::_Get(this->_Vx5, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9)));
		}

	_Arg5 _Vx5;
	};

	
		namespace placeholders {	
static _Ph<6> _6;
		}	
 #line 303 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"

template<class _Result_type, class _Ret, class _BindTy , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5>
	struct _Result_of6<_Bind<_Result_type, _Ret, _BindTy> , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5>
	{	
	typedef _Ret _Type;
	};

template<class _Result_type, class _BindTy , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5>
	struct _Result_of6<_Bind<_Result_type, _Notforced, _BindTy> , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5>
	{	
	typedef typename _BindTy::
		template _Return<_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5 , _Nil&, _Nil&, _Nil&, _Nil&>::_Type _Type;
	};

template<class _Ret,
	class _Fty
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5> inline
	_Bind<_Ret,
		_Ret,
		_Bind6<_Callable_obj<_Fty> , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5> >
			bind(_Fty _Val , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4 , _Arg5 _Ax5)
	{	
	typedef _Bind6<_Callable_obj<_Fty> , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5> _MyBind;
	return (_Bind<_Ret, _Ret, _MyBind>(_MyBind(_Val , _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4 , _Ax5)));
	}

template<class _Fty
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5> inline
	_Bind_fty<_Fty,
		_Notforced,
		_Bind6<_Callable_obj<_Fty> , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5> >
			bind(_Fty _Val , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4 , _Arg5 _Ax5)
	{	
	typedef _Bind6<_Callable_obj<_Fty> , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5> _MyBind;
	return (_Bind_fty<_Fty, _Notforced, _MyBind>(_MyBind(_Val , _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4 , _Ax5)));
	}


template<class _Ret,
	class _Rx
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind6<_Callable_fun<_Rx(__cdecl * const)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4 , _Farg5)> , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5> >
		>::type
			bind(_Rx(__cdecl * const _Val)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4 , _Arg5 _Ax5)
	{	
	typedef _Callable_fun<_Rx(__cdecl * const)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4 , _Farg5)> _Callable;
	typedef _Bind6<_Callable , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val , _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4 , _Ax5)));
	}

template<class _Rx
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5> inline
	_Bind<_Rx,
		_Rx,
		_Bind6<_Callable_fun<_Rx(__cdecl * const)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4 , _Farg5)> , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5> >
			bind(_Rx(__cdecl * const _Val)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4 , _Arg5 _Ax5)
	{	
	typedef _Callable_fun<_Rx(__cdecl * const)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4 , _Farg5)> _Callable;
	typedef _Bind6<_Callable , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val , _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4 , _Ax5)));
	}

 





























































 































 


























#line 492 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"

 
template<class _Ret,
	class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind6<_Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5), _Farg0>,
				_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5> >
		>::type
				bind(_Rx(__thiscall _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4 , _Arg5 _Ax5)
	{	
	typedef _Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5), _Farg0>
		_Callable;
	typedef _Bind6<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4 , _Ax5)));
	}

template<class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5> inline
	_Bind<_Rx,
		_Rx,
		_Bind6<_Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5), _Farg0>,
			_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5> >
			bind(_Rx(__thiscall _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4 , _Arg5 _Ax5)
	{	
	typedef _Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5), _Farg0>
		_Callable;
	typedef _Bind6<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4 , _Ax5)));
	}

template<class _Ret,
	class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind6<_Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) const,
				_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5> >
		>::type
			bind(_Rx(__thiscall _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) const , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4 , _Arg5 _Ax5)
	{	
	typedef _Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) const, _Farg0>
		_Callable;
	typedef _Bind6<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4 , _Ax5)));
	}

template<class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5> inline
	_Bind<_Rx,
		_Rx,
		_Bind6<_Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) const,
			_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5> >
			bind(_Rx(__thiscall _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) const , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4 , _Arg5 _Ax5)
	{	
	typedef _Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) const, _Farg0>
		_Callable;
	typedef _Bind6<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4 , _Ax5)));
	}

template<class _Ret,
	class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind6<_Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) volatile,
				_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5> >
		>::type
		bind(_Rx(__thiscall _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) volatile , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4 , _Arg5 _Ax5)
	{	
	typedef _Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) volatile, _Farg0>
		_Callable;
	typedef _Bind6<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4 , _Ax5)));
	}

template<class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5> inline
	_Bind<_Rx,
		_Rx,
		_Bind6<_Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) volatile,
			_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5> >
			bind(_Rx(__thiscall _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) volatile , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4 , _Arg5 _Ax5)
	{	
	typedef _Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) volatile , _Farg0>
		_Callable;
	typedef _Bind6<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4 , _Ax5)));
	}

template<class _Ret,
	class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind6<_Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) const volatile,
				_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5> >
		>::type
			bind(_Rx(__thiscall _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5)
				const volatile , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4 , _Arg5 _Ax5)
	{	
	typedef _Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) const volatile,
		_Farg0> _Callable;
	typedef _Bind6<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4 , _Ax5)));
	}

template<class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4 , class _Farg5,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4 , class _Arg5> inline
	_Bind<_Rx,
		_Rx,
		_Bind6<_Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) const volatile,
			_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5> >
		bind(_Rx(__thiscall _Farg0::* const _Val)(
			_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) const volatile , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4 , _Arg5 _Ax5)
	{	
	typedef _Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4 , _Farg5) const volatile,
		_Farg0> _Callable;
	typedef _Bind6<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4 , _Arg5> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4 , _Ax5)));
	}


 
























































































































































































































































































































































































































 






































































































































 #line 1174 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"



















#line 254 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
























#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 41 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 47 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 55 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 63 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

























#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  

































	#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"

















 




#line 24 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"







#line 32 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"










#line 43 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"












#line 56 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"














#line 71 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"
















#line 88 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"


















#line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"
  







  







  



 













































































#line 206 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"

 





























#line 238 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"
template<>
	struct _Binder<false, 7>
	{	
	template<class _Arg,
		class _Barg0, class _Barg1, class _Barg2, class _Barg3, class _Barg4, class _Barg5, class _Barg6, class _Barg7, class _Barg8, class _Barg9>
		static _Barg6& _Get(_Arg, _Barg0 && _Bx0, _Barg1 && _Bx1, _Barg2 && _Bx2, _Barg3 && _Bx3, _Barg4 && _Bx4, _Barg5 && _Bx5, _Barg6 && _Bx6, _Barg7 && _Bx7, _Barg8 && _Bx8, _Barg9 && _Bx9)
		{	
		return (_Bx6);
		}

	template<class _Arg,
		class _Barg0, class _Barg1, class _Barg2, class _Barg3, class _Barg4, class _Barg5, class _Barg6, class _Barg7, class _Barg8, class _Barg9>
		struct _Ret
		{	
		typedef _Barg6 _Type;
		};
	};

template<class _Callable,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6>
	class _Bind7
		: public _Bind6<_Callable , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5>
	{	
public:
	typedef _Bind7<_Callable , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6> _Self;
	typedef _Binder<is_bind_expression<_Arg6>::value,
		is_placeholder<_Arg6>::value> _Binder6;
	typedef _Arg6 _MyArg;

	template<class _Barg0, class _Barg1, class _Barg2, class _Barg3, class _Barg4, class _Barg5, class _Barg6, class _Barg7, class _Barg8, class _Barg9>
		struct _Return
		{	
		typedef typename _Bind6<_Callable , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5>::_MyCallable
			_MyCallable;
		typedef typename _MyCallable::_MyTy _MyTy;
		typedef typename result_of<_MyTy(_Barg0, _Barg1, _Barg2, _Barg3, _Barg4, _Barg5, _Barg6)>::type _Type;
		};

	_Bind7(typename _Callable::_MyTy _Val, _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5 , _Arg6 _Ax6)
		: _Vx6(_Ax6), _Bind6<_Callable , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5>(_Val , _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5)
		{	
		}

	template<class _Ret,
		class _Barg0, class _Barg1, class _Barg2, class _Barg3, class _Barg4, class _Barg5, class _Barg6, class _Barg7, class _Barg8, class _Barg9>
		_Ret _ApplyX(_Barg0 && _Bx0, _Barg1 && _Bx1, _Barg2 && _Bx2, _Barg3 && _Bx3, _Barg4 && _Bx4, _Barg5 && _Bx5, _Barg6 && _Bx6, _Barg7 && _Bx7, _Barg8 && _Bx8, _Barg9 && _Bx9) const
		{	
		return (this->_Callee.template _ApplyX<_Ret>(_Binder0::_Get(this->_Vx0, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder1::_Get(this->_Vx1, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder2::_Get(this->_Vx2, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder3::_Get(this->_Vx3, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder4::_Get(this->_Vx4, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder5::_Get(this->_Vx5, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder6::_Get(this->_Vx6, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9)));
		}

	template<class _Ret,
		class _Barg0, class _Barg1, class _Barg2, class _Barg3, class _Barg4, class _Barg5, class _Barg6, class _Barg7, class _Barg8, class _Barg9>
		_Ret _ApplyX(_Barg0 && _Bx0, _Barg1 && _Bx1, _Barg2 && _Bx2, _Barg3 && _Bx3, _Barg4 && _Bx4, _Barg5 && _Bx5, _Barg6 && _Bx6, _Barg7 && _Bx7, _Barg8 && _Bx8, _Barg9 && _Bx9)
		{	
		return (this->_Callee.template _ApplyX<_Ret>(_Binder0::_Get(this->_Vx0, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder1::_Get(this->_Vx1, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder2::_Get(this->_Vx2, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder3::_Get(this->_Vx3, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder4::_Get(this->_Vx4, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder5::_Get(this->_Vx5, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder6::_Get(this->_Vx6, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9)));
		}

	_Arg6 _Vx6;
	};

	
		namespace placeholders {	
static _Ph<7> _7;
		}	
 #line 303 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"

template<class _Result_type, class _Ret, class _BindTy , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6>
	struct _Result_of7<_Bind<_Result_type, _Ret, _BindTy> , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6>
	{	
	typedef _Ret _Type;
	};

template<class _Result_type, class _BindTy , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6>
	struct _Result_of7<_Bind<_Result_type, _Notforced, _BindTy> , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6>
	{	
	typedef typename _BindTy::
		template _Return<_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6 , _Nil&, _Nil&, _Nil&>::_Type _Type;
	};

template<class _Ret,
	class _Fty
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6> inline
	_Bind<_Ret,
		_Ret,
		_Bind7<_Callable_obj<_Fty> , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6> >
			bind(_Fty _Val , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5 , _Arg6 _Ax6)
	{	
	typedef _Bind7<_Callable_obj<_Fty> , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6> _MyBind;
	return (_Bind<_Ret, _Ret, _MyBind>(_MyBind(_Val , _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5 , _Ax6)));
	}

template<class _Fty
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6> inline
	_Bind_fty<_Fty,
		_Notforced,
		_Bind7<_Callable_obj<_Fty> , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6> >
			bind(_Fty _Val , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5 , _Arg6 _Ax6)
	{	
	typedef _Bind7<_Callable_obj<_Fty> , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6> _MyBind;
	return (_Bind_fty<_Fty, _Notforced, _MyBind>(_MyBind(_Val , _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5 , _Ax6)));
	}


template<class _Ret,
	class _Rx
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind7<_Callable_fun<_Rx(__cdecl * const)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6)> , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6> >
		>::type
			bind(_Rx(__cdecl * const _Val)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5 , _Arg6 _Ax6)
	{	
	typedef _Callable_fun<_Rx(__cdecl * const)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6)> _Callable;
	typedef _Bind7<_Callable , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val , _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5 , _Ax6)));
	}

template<class _Rx
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6> inline
	_Bind<_Rx,
		_Rx,
		_Bind7<_Callable_fun<_Rx(__cdecl * const)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6)> , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6> >
			bind(_Rx(__cdecl * const _Val)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5 , _Arg6 _Ax6)
	{	
	typedef _Callable_fun<_Rx(__cdecl * const)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6)> _Callable;
	typedef _Bind7<_Callable , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val , _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5 , _Ax6)));
	}

 





























































 































 


























#line 492 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"

 
template<class _Ret,
	class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind7<_Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6), _Farg0>,
				_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6> >
		>::type
				bind(_Rx(__thiscall _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5 , _Arg6 _Ax6)
	{	
	typedef _Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6), _Farg0>
		_Callable;
	typedef _Bind7<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5 , _Ax6)));
	}

template<class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6> inline
	_Bind<_Rx,
		_Rx,
		_Bind7<_Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6), _Farg0>,
			_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6> >
			bind(_Rx(__thiscall _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5 , _Arg6 _Ax6)
	{	
	typedef _Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6), _Farg0>
		_Callable;
	typedef _Bind7<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5 , _Ax6)));
	}

template<class _Ret,
	class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind7<_Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) const,
				_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6> >
		>::type
			bind(_Rx(__thiscall _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) const , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5 , _Arg6 _Ax6)
	{	
	typedef _Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) const, _Farg0>
		_Callable;
	typedef _Bind7<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5 , _Ax6)));
	}

template<class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6> inline
	_Bind<_Rx,
		_Rx,
		_Bind7<_Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) const,
			_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6> >
			bind(_Rx(__thiscall _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) const , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5 , _Arg6 _Ax6)
	{	
	typedef _Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) const, _Farg0>
		_Callable;
	typedef _Bind7<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5 , _Ax6)));
	}

template<class _Ret,
	class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind7<_Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) volatile,
				_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6> >
		>::type
		bind(_Rx(__thiscall _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) volatile , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5 , _Arg6 _Ax6)
	{	
	typedef _Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) volatile, _Farg0>
		_Callable;
	typedef _Bind7<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5 , _Ax6)));
	}

template<class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6> inline
	_Bind<_Rx,
		_Rx,
		_Bind7<_Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) volatile,
			_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6> >
			bind(_Rx(__thiscall _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) volatile , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5 , _Arg6 _Ax6)
	{	
	typedef _Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) volatile , _Farg0>
		_Callable;
	typedef _Bind7<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5 , _Ax6)));
	}

template<class _Ret,
	class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind7<_Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) const volatile,
				_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6> >
		>::type
			bind(_Rx(__thiscall _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6)
				const volatile , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5 , _Arg6 _Ax6)
	{	
	typedef _Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) const volatile,
		_Farg0> _Callable;
	typedef _Bind7<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5 , _Ax6)));
	}

template<class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5 , class _Farg6,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5 , class _Arg6> inline
	_Bind<_Rx,
		_Rx,
		_Bind7<_Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) const volatile,
			_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6> >
		bind(_Rx(__thiscall _Farg0::* const _Val)(
			_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) const volatile , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5 , _Arg6 _Ax6)
	{	
	typedef _Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5 , _Farg6) const volatile,
		_Farg0> _Callable;
	typedef _Bind7<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5 , _Arg6> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5 , _Ax6)));
	}


 
























































































































































































































































































































































































































 






































































































































 #line 1174 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"



















#line 254 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
























#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 45 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 47 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 55 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 63 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 71 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

















#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  

































	#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"

















 




#line 24 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"







#line 32 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"










#line 43 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"












#line 56 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"














#line 71 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"
















#line 88 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"


















#line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"




















#line 128 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"
  








  








  



 






















































#line 206 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"

 





























#line 238 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"
template<>
	struct _Binder<false, 8>
	{	
	template<class _Arg,
		class _Barg0, class _Barg1, class _Barg2, class _Barg3, class _Barg4, class _Barg5, class _Barg6, class _Barg7, class _Barg8, class _Barg9>
		static _Barg7& _Get(_Arg, _Barg0 && _Bx0, _Barg1 && _Bx1, _Barg2 && _Bx2, _Barg3 && _Bx3, _Barg4 && _Bx4, _Barg5 && _Bx5, _Barg6 && _Bx6, _Barg7 && _Bx7, _Barg8 && _Bx8, _Barg9 && _Bx9)
		{	
		return (_Bx7);
		}

	template<class _Arg,
		class _Barg0, class _Barg1, class _Barg2, class _Barg3, class _Barg4, class _Barg5, class _Barg6, class _Barg7, class _Barg8, class _Barg9>
		struct _Ret
		{	
		typedef _Barg7 _Type;
		};
	};

template<class _Callable,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7>
	class _Bind8
		: public _Bind7<_Callable , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6>
	{	
public:
	typedef _Bind8<_Callable , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7> _Self;
	typedef _Binder<is_bind_expression<_Arg7>::value,
		is_placeholder<_Arg7>::value> _Binder7;
	typedef _Arg7 _MyArg;

	template<class _Barg0, class _Barg1, class _Barg2, class _Barg3, class _Barg4, class _Barg5, class _Barg6, class _Barg7, class _Barg8, class _Barg9>
		struct _Return
		{	
		typedef typename _Bind7<_Callable , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6>::_MyCallable
			_MyCallable;
		typedef typename _MyCallable::_MyTy _MyTy;
		typedef typename result_of<_MyTy(_Barg0, _Barg1, _Barg2, _Barg3, _Barg4, _Barg5, _Barg6, _Barg7)>::type _Type;
		};

	_Bind8(typename _Callable::_MyTy _Val, _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6 , _Arg7 _Ax7)
		: _Vx7(_Ax7), _Bind7<_Callable , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6>(_Val , _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6)
		{	
		}

	template<class _Ret,
		class _Barg0, class _Barg1, class _Barg2, class _Barg3, class _Barg4, class _Barg5, class _Barg6, class _Barg7, class _Barg8, class _Barg9>
		_Ret _ApplyX(_Barg0 && _Bx0, _Barg1 && _Bx1, _Barg2 && _Bx2, _Barg3 && _Bx3, _Barg4 && _Bx4, _Barg5 && _Bx5, _Barg6 && _Bx6, _Barg7 && _Bx7, _Barg8 && _Bx8, _Barg9 && _Bx9) const
		{	
		return (this->_Callee.template _ApplyX<_Ret>(_Binder0::_Get(this->_Vx0, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder1::_Get(this->_Vx1, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder2::_Get(this->_Vx2, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder3::_Get(this->_Vx3, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder4::_Get(this->_Vx4, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder5::_Get(this->_Vx5, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder6::_Get(this->_Vx6, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder7::_Get(this->_Vx7, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9)));
		}

	template<class _Ret,
		class _Barg0, class _Barg1, class _Barg2, class _Barg3, class _Barg4, class _Barg5, class _Barg6, class _Barg7, class _Barg8, class _Barg9>
		_Ret _ApplyX(_Barg0 && _Bx0, _Barg1 && _Bx1, _Barg2 && _Bx2, _Barg3 && _Bx3, _Barg4 && _Bx4, _Barg5 && _Bx5, _Barg6 && _Bx6, _Barg7 && _Bx7, _Barg8 && _Bx8, _Barg9 && _Bx9)
		{	
		return (this->_Callee.template _ApplyX<_Ret>(_Binder0::_Get(this->_Vx0, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder1::_Get(this->_Vx1, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder2::_Get(this->_Vx2, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder3::_Get(this->_Vx3, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder4::_Get(this->_Vx4, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder5::_Get(this->_Vx5, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder6::_Get(this->_Vx6, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder7::_Get(this->_Vx7, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9)));
		}

	_Arg7 _Vx7;
	};

	
		namespace placeholders {	
static _Ph<8> _8;
		}	
 #line 303 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"

template<class _Result_type, class _Ret, class _BindTy , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7>
	struct _Result_of8<_Bind<_Result_type, _Ret, _BindTy> , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7>
	{	
	typedef _Ret _Type;
	};

template<class _Result_type, class _BindTy , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7>
	struct _Result_of8<_Bind<_Result_type, _Notforced, _BindTy> , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7>
	{	
	typedef typename _BindTy::
		template _Return<_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7 , _Nil&, _Nil&>::_Type _Type;
	};

template<class _Ret,
	class _Fty
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7> inline
	_Bind<_Ret,
		_Ret,
		_Bind8<_Callable_obj<_Fty> , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7> >
			bind(_Fty _Val , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6 , _Arg7 _Ax7)
	{	
	typedef _Bind8<_Callable_obj<_Fty> , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7> _MyBind;
	return (_Bind<_Ret, _Ret, _MyBind>(_MyBind(_Val , _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6 , _Ax7)));
	}

template<class _Fty
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7> inline
	_Bind_fty<_Fty,
		_Notforced,
		_Bind8<_Callable_obj<_Fty> , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7> >
			bind(_Fty _Val , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6 , _Arg7 _Ax7)
	{	
	typedef _Bind8<_Callable_obj<_Fty> , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7> _MyBind;
	return (_Bind_fty<_Fty, _Notforced, _MyBind>(_MyBind(_Val , _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6 , _Ax7)));
	}


template<class _Ret,
	class _Rx
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind8<_Callable_fun<_Rx(__cdecl * const)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7)> , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7> >
		>::type
			bind(_Rx(__cdecl * const _Val)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6 , _Arg7 _Ax7)
	{	
	typedef _Callable_fun<_Rx(__cdecl * const)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7)> _Callable;
	typedef _Bind8<_Callable , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val , _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6 , _Ax7)));
	}

template<class _Rx
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7> inline
	_Bind<_Rx,
		_Rx,
		_Bind8<_Callable_fun<_Rx(__cdecl * const)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7)> , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7> >
			bind(_Rx(__cdecl * const _Val)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6 , _Arg7 _Ax7)
	{	
	typedef _Callable_fun<_Rx(__cdecl * const)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7)> _Callable;
	typedef _Bind8<_Callable , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val , _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6 , _Ax7)));
	}

 





























































 































 


























#line 492 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"

 
template<class _Ret,
	class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind8<_Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7), _Farg0>,
				_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7> >
		>::type
				bind(_Rx(__thiscall _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6 , _Arg7 _Ax7)
	{	
	typedef _Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7), _Farg0>
		_Callable;
	typedef _Bind8<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6 , _Ax7)));
	}

template<class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7> inline
	_Bind<_Rx,
		_Rx,
		_Bind8<_Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7), _Farg0>,
			_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7> >
			bind(_Rx(__thiscall _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6 , _Arg7 _Ax7)
	{	
	typedef _Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7), _Farg0>
		_Callable;
	typedef _Bind8<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6 , _Ax7)));
	}

template<class _Ret,
	class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind8<_Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) const,
				_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7> >
		>::type
			bind(_Rx(__thiscall _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) const , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6 , _Arg7 _Ax7)
	{	
	typedef _Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) const, _Farg0>
		_Callable;
	typedef _Bind8<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6 , _Ax7)));
	}

template<class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7> inline
	_Bind<_Rx,
		_Rx,
		_Bind8<_Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) const,
			_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7> >
			bind(_Rx(__thiscall _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) const , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6 , _Arg7 _Ax7)
	{	
	typedef _Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) const, _Farg0>
		_Callable;
	typedef _Bind8<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6 , _Ax7)));
	}

template<class _Ret,
	class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind8<_Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) volatile,
				_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7> >
		>::type
		bind(_Rx(__thiscall _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) volatile , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6 , _Arg7 _Ax7)
	{	
	typedef _Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) volatile, _Farg0>
		_Callable;
	typedef _Bind8<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6 , _Ax7)));
	}

template<class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7> inline
	_Bind<_Rx,
		_Rx,
		_Bind8<_Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) volatile,
			_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7> >
			bind(_Rx(__thiscall _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) volatile , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6 , _Arg7 _Ax7)
	{	
	typedef _Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) volatile , _Farg0>
		_Callable;
	typedef _Bind8<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6 , _Ax7)));
	}

template<class _Ret,
	class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind8<_Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) const volatile,
				_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7> >
		>::type
			bind(_Rx(__thiscall _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7)
				const volatile , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6 , _Arg7 _Ax7)
	{	
	typedef _Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) const volatile,
		_Farg0> _Callable;
	typedef _Bind8<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6 , _Ax7)));
	}

template<class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6 , class _Farg7,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6 , class _Arg7> inline
	_Bind<_Rx,
		_Rx,
		_Bind8<_Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) const volatile,
			_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7> >
		bind(_Rx(__thiscall _Farg0::* const _Val)(
			_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) const volatile , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6 , _Arg7 _Ax7)
	{	
	typedef _Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6 , _Farg7) const volatile,
		_Farg0> _Callable;
	typedef _Bind8<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6 , _Arg7> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6 , _Ax7)));
	}


 
























































































































































































































































































































































































































 






































































































































 #line 1174 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"



















#line 254 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
























#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 49 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 47 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 55 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 63 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 71 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 79 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 









#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"


#line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  

































	#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"

















 




#line 24 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"







#line 32 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"










#line 43 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"












#line 56 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"














#line 71 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"
















#line 88 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"


















#line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"




















#line 128 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"






















#line 151 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"
  









  









  



 





























#line 206 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"

 





























#line 238 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"
template<>
	struct _Binder<false, 9>
	{	
	template<class _Arg,
		class _Barg0, class _Barg1, class _Barg2, class _Barg3, class _Barg4, class _Barg5, class _Barg6, class _Barg7, class _Barg8, class _Barg9>
		static _Barg8& _Get(_Arg, _Barg0 && _Bx0, _Barg1 && _Bx1, _Barg2 && _Bx2, _Barg3 && _Bx3, _Barg4 && _Bx4, _Barg5 && _Bx5, _Barg6 && _Bx6, _Barg7 && _Bx7, _Barg8 && _Bx8, _Barg9 && _Bx9)
		{	
		return (_Bx8);
		}

	template<class _Arg,
		class _Barg0, class _Barg1, class _Barg2, class _Barg3, class _Barg4, class _Barg5, class _Barg6, class _Barg7, class _Barg8, class _Barg9>
		struct _Ret
		{	
		typedef _Barg8 _Type;
		};
	};

template<class _Callable,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8>
	class _Bind9
		: public _Bind8<_Callable , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7>
	{	
public:
	typedef _Bind9<_Callable , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8> _Self;
	typedef _Binder<is_bind_expression<_Arg8>::value,
		is_placeholder<_Arg8>::value> _Binder8;
	typedef _Arg8 _MyArg;

	template<class _Barg0, class _Barg1, class _Barg2, class _Barg3, class _Barg4, class _Barg5, class _Barg6, class _Barg7, class _Barg8, class _Barg9>
		struct _Return
		{	
		typedef typename _Bind8<_Callable , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7>::_MyCallable
			_MyCallable;
		typedef typename _MyCallable::_MyTy _MyTy;
		typedef typename result_of<_MyTy(_Barg0, _Barg1, _Barg2, _Barg3, _Barg4, _Barg5, _Barg6, _Barg7, _Barg8)>::type _Type;
		};

	_Bind9(typename _Callable::_MyTy _Val, _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6, _Arg7 _Ax7 , _Arg8 _Ax8)
		: _Vx8(_Ax8), _Bind8<_Callable , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7>(_Val , _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7)
		{	
		}

	template<class _Ret,
		class _Barg0, class _Barg1, class _Barg2, class _Barg3, class _Barg4, class _Barg5, class _Barg6, class _Barg7, class _Barg8, class _Barg9>
		_Ret _ApplyX(_Barg0 && _Bx0, _Barg1 && _Bx1, _Barg2 && _Bx2, _Barg3 && _Bx3, _Barg4 && _Bx4, _Barg5 && _Bx5, _Barg6 && _Bx6, _Barg7 && _Bx7, _Barg8 && _Bx8, _Barg9 && _Bx9) const
		{	
		return (this->_Callee.template _ApplyX<_Ret>(_Binder0::_Get(this->_Vx0, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder1::_Get(this->_Vx1, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder2::_Get(this->_Vx2, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder3::_Get(this->_Vx3, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder4::_Get(this->_Vx4, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder5::_Get(this->_Vx5, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder6::_Get(this->_Vx6, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder7::_Get(this->_Vx7, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder8::_Get(this->_Vx8, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9)));
		}

	template<class _Ret,
		class _Barg0, class _Barg1, class _Barg2, class _Barg3, class _Barg4, class _Barg5, class _Barg6, class _Barg7, class _Barg8, class _Barg9>
		_Ret _ApplyX(_Barg0 && _Bx0, _Barg1 && _Bx1, _Barg2 && _Bx2, _Barg3 && _Bx3, _Barg4 && _Bx4, _Barg5 && _Bx5, _Barg6 && _Bx6, _Barg7 && _Bx7, _Barg8 && _Bx8, _Barg9 && _Bx9)
		{	
		return (this->_Callee.template _ApplyX<_Ret>(_Binder0::_Get(this->_Vx0, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder1::_Get(this->_Vx1, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder2::_Get(this->_Vx2, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder3::_Get(this->_Vx3, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder4::_Get(this->_Vx4, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder5::_Get(this->_Vx5, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder6::_Get(this->_Vx6, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder7::_Get(this->_Vx7, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder8::_Get(this->_Vx8, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9)));
		}

	_Arg8 _Vx8;
	};

	
		namespace placeholders {	
static _Ph<9> _9;
		}	
 #line 303 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"

template<class _Result_type, class _Ret, class _BindTy , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8>
	struct _Result_of9<_Bind<_Result_type, _Ret, _BindTy> , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8>
	{	
	typedef _Ret _Type;
	};

template<class _Result_type, class _BindTy , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8>
	struct _Result_of9<_Bind<_Result_type, _Notforced, _BindTy> , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8>
	{	
	typedef typename _BindTy::
		template _Return<_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8 , _Nil&>::_Type _Type;
	};

template<class _Ret,
	class _Fty
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8> inline
	_Bind<_Ret,
		_Ret,
		_Bind9<_Callable_obj<_Fty> , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8> >
			bind(_Fty _Val , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6, _Arg7 _Ax7 , _Arg8 _Ax8)
	{	
	typedef _Bind9<_Callable_obj<_Fty> , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8> _MyBind;
	return (_Bind<_Ret, _Ret, _MyBind>(_MyBind(_Val , _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7 , _Ax8)));
	}

template<class _Fty
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8> inline
	_Bind_fty<_Fty,
		_Notforced,
		_Bind9<_Callable_obj<_Fty> , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8> >
			bind(_Fty _Val , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6, _Arg7 _Ax7 , _Arg8 _Ax8)
	{	
	typedef _Bind9<_Callable_obj<_Fty> , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8> _MyBind;
	return (_Bind_fty<_Fty, _Notforced, _MyBind>(_MyBind(_Val , _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7 , _Ax8)));
	}


template<class _Ret,
	class _Rx
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind9<_Callable_fun<_Rx(__cdecl * const)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8)> , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8> >
		>::type
			bind(_Rx(__cdecl * const _Val)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6, _Arg7 _Ax7 , _Arg8 _Ax8)
	{	
	typedef _Callable_fun<_Rx(__cdecl * const)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8)> _Callable;
	typedef _Bind9<_Callable , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val , _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7 , _Ax8)));
	}

template<class _Rx
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8> inline
	_Bind<_Rx,
		_Rx,
		_Bind9<_Callable_fun<_Rx(__cdecl * const)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8)> , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8> >
			bind(_Rx(__cdecl * const _Val)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6, _Arg7 _Ax7 , _Arg8 _Ax8)
	{	
	typedef _Callable_fun<_Rx(__cdecl * const)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8)> _Callable;
	typedef _Bind9<_Callable , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val , _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7 , _Ax8)));
	}

 





























































 































 


























#line 492 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"

 
template<class _Ret,
	class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind9<_Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8), _Farg0>,
				_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8> >
		>::type
				bind(_Rx(__thiscall _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6, _Arg7 _Ax7 , _Arg8 _Ax8)
	{	
	typedef _Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8), _Farg0>
		_Callable;
	typedef _Bind9<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7 , _Ax8)));
	}

template<class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8> inline
	_Bind<_Rx,
		_Rx,
		_Bind9<_Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8), _Farg0>,
			_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8> >
			bind(_Rx(__thiscall _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6, _Arg7 _Ax7 , _Arg8 _Ax8)
	{	
	typedef _Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8), _Farg0>
		_Callable;
	typedef _Bind9<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7 , _Ax8)));
	}

template<class _Ret,
	class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind9<_Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) const,
				_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8> >
		>::type
			bind(_Rx(__thiscall _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) const , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6, _Arg7 _Ax7 , _Arg8 _Ax8)
	{	
	typedef _Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) const, _Farg0>
		_Callable;
	typedef _Bind9<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7 , _Ax8)));
	}

template<class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8> inline
	_Bind<_Rx,
		_Rx,
		_Bind9<_Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) const,
			_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8> >
			bind(_Rx(__thiscall _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) const , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6, _Arg7 _Ax7 , _Arg8 _Ax8)
	{	
	typedef _Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) const, _Farg0>
		_Callable;
	typedef _Bind9<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7 , _Ax8)));
	}

template<class _Ret,
	class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind9<_Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) volatile,
				_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8> >
		>::type
		bind(_Rx(__thiscall _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) volatile , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6, _Arg7 _Ax7 , _Arg8 _Ax8)
	{	
	typedef _Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) volatile, _Farg0>
		_Callable;
	typedef _Bind9<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7 , _Ax8)));
	}

template<class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8> inline
	_Bind<_Rx,
		_Rx,
		_Bind9<_Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) volatile,
			_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8> >
			bind(_Rx(__thiscall _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) volatile , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6, _Arg7 _Ax7 , _Arg8 _Ax8)
	{	
	typedef _Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) volatile , _Farg0>
		_Callable;
	typedef _Bind9<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7 , _Ax8)));
	}

template<class _Ret,
	class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind9<_Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) const volatile,
				_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8> >
		>::type
			bind(_Rx(__thiscall _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8)
				const volatile , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6, _Arg7 _Ax7 , _Arg8 _Ax8)
	{	
	typedef _Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) const volatile,
		_Farg0> _Callable;
	typedef _Bind9<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7 , _Ax8)));
	}

template<class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7 , class _Farg8,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7 , class _Arg8> inline
	_Bind<_Rx,
		_Rx,
		_Bind9<_Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) const volatile,
			_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8> >
		bind(_Rx(__thiscall _Farg0::* const _Val)(
			_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) const volatile , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6, _Arg7 _Ax7 , _Arg8 _Ax8)
	{	
	typedef _Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7 , _Farg8) const volatile,
		_Farg0> _Callable;
	typedef _Bind9<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7 , _Arg8> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7 , _Ax8)));
	}


 
























































































































































































































































































































































































































 






































































































































 #line 1174 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"



















#line 254 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
























#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 53 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"





 







#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 47 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 55 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 63 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 71 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 79 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"







#line 87 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  

 

#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  

 

#line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 














#line 124 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"














#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
  
  
  
  
  
  
  
  
  
  
  
  
 #line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 158 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

 


#line 165 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
  
 #line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"

















































  
  
  
  

































	#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"

















 




#line 24 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"







#line 32 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"










#line 43 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"












#line 56 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"














#line 71 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"
















#line 88 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"


















#line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"




















#line 128 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"






















#line 151 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"
























#line 176 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"
  










  










  




 

#line 206 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"

 





























#line 238 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"
template<>
	struct _Binder<false, 10>
	{	
	template<class _Arg,
		class _Barg0, class _Barg1, class _Barg2, class _Barg3, class _Barg4, class _Barg5, class _Barg6, class _Barg7, class _Barg8, class _Barg9>
		static _Barg9& _Get(_Arg, _Barg0 && _Bx0, _Barg1 && _Bx1, _Barg2 && _Bx2, _Barg3 && _Bx3, _Barg4 && _Bx4, _Barg5 && _Bx5, _Barg6 && _Bx6, _Barg7 && _Bx7, _Barg8 && _Bx8, _Barg9 && _Bx9)
		{	
		return (_Bx9);
		}

	template<class _Arg,
		class _Barg0, class _Barg1, class _Barg2, class _Barg3, class _Barg4, class _Barg5, class _Barg6, class _Barg7, class _Barg8, class _Barg9>
		struct _Ret
		{	
		typedef _Barg9 _Type;
		};
	};

template<class _Callable,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9>
	class _Bind10
		: public _Bind9<_Callable , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8>
	{	
public:
	typedef _Bind10<_Callable , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9> _Self;
	typedef _Binder<is_bind_expression<_Arg9>::value,
		is_placeholder<_Arg9>::value> _Binder9;
	typedef _Arg9 _MyArg;

	template<class _Barg0, class _Barg1, class _Barg2, class _Barg3, class _Barg4, class _Barg5, class _Barg6, class _Barg7, class _Barg8, class _Barg9>
		struct _Return
		{	
		typedef typename _Bind9<_Callable , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8>::_MyCallable
			_MyCallable;
		typedef typename _MyCallable::_MyTy _MyTy;
		typedef typename result_of<_MyTy(_Barg0, _Barg1, _Barg2, _Barg3, _Barg4, _Barg5, _Barg6, _Barg7, _Barg8, _Barg9)>::type _Type;
		};

	_Bind10(typename _Callable::_MyTy _Val, _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6, _Arg7 _Ax7, _Arg8 _Ax8 , _Arg9 _Ax9)
		: _Vx9(_Ax9), _Bind9<_Callable , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8>(_Val , _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7, _Ax8)
		{	
		}

	template<class _Ret,
		class _Barg0, class _Barg1, class _Barg2, class _Barg3, class _Barg4, class _Barg5, class _Barg6, class _Barg7, class _Barg8, class _Barg9>
		_Ret _ApplyX(_Barg0 && _Bx0, _Barg1 && _Bx1, _Barg2 && _Bx2, _Barg3 && _Bx3, _Barg4 && _Bx4, _Barg5 && _Bx5, _Barg6 && _Bx6, _Barg7 && _Bx7, _Barg8 && _Bx8, _Barg9 && _Bx9) const
		{	
		return (this->_Callee.template _ApplyX<_Ret>(_Binder0::_Get(this->_Vx0, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder1::_Get(this->_Vx1, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder2::_Get(this->_Vx2, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder3::_Get(this->_Vx3, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder4::_Get(this->_Vx4, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder5::_Get(this->_Vx5, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder6::_Get(this->_Vx6, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder7::_Get(this->_Vx7, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder8::_Get(this->_Vx8, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder9::_Get(this->_Vx9, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9)));
		}

	template<class _Ret,
		class _Barg0, class _Barg1, class _Barg2, class _Barg3, class _Barg4, class _Barg5, class _Barg6, class _Barg7, class _Barg8, class _Barg9>
		_Ret _ApplyX(_Barg0 && _Bx0, _Barg1 && _Bx1, _Barg2 && _Bx2, _Barg3 && _Bx3, _Barg4 && _Bx4, _Barg5 && _Bx5, _Barg6 && _Bx6, _Barg7 && _Bx7, _Barg8 && _Bx8, _Barg9 && _Bx9)
		{	
		return (this->_Callee.template _ApplyX<_Ret>(_Binder0::_Get(this->_Vx0, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder1::_Get(this->_Vx1, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder2::_Get(this->_Vx2, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder3::_Get(this->_Vx3, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder4::_Get(this->_Vx4, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder5::_Get(this->_Vx5, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder6::_Get(this->_Vx6, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder7::_Get(this->_Vx7, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder8::_Get(this->_Vx8, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9), _Binder9::_Get(this->_Vx9, _Bx0, _Bx1, _Bx2, _Bx3, _Bx4, _Bx5, _Bx6, _Bx7, _Bx8, _Bx9)));
		}

	_Arg9 _Vx9;
	};

	
		namespace placeholders {	
static _Ph<10> _10;
		}	
 #line 303 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"

template<class _Result_type, class _Ret, class _BindTy , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9>
	struct _Result_of10<_Bind<_Result_type, _Ret, _BindTy> , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9>
	{	
	typedef _Ret _Type;
	};

template<class _Result_type, class _BindTy , class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9>
	struct _Result_of10<_Bind<_Result_type, _Notforced, _BindTy> , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9>
	{	
	typedef typename _BindTy::
		template _Return<_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9 >::_Type _Type;
	};

template<class _Ret,
	class _Fty
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9> inline
	_Bind<_Ret,
		_Ret,
		_Bind10<_Callable_obj<_Fty> , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9> >
			bind(_Fty _Val , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6, _Arg7 _Ax7, _Arg8 _Ax8 , _Arg9 _Ax9)
	{	
	typedef _Bind10<_Callable_obj<_Fty> , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9> _MyBind;
	return (_Bind<_Ret, _Ret, _MyBind>(_MyBind(_Val , _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7, _Ax8 , _Ax9)));
	}

template<class _Fty
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9> inline
	_Bind_fty<_Fty,
		_Notforced,
		_Bind10<_Callable_obj<_Fty> , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9> >
			bind(_Fty _Val , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6, _Arg7 _Ax7, _Arg8 _Ax8 , _Arg9 _Ax9)
	{	
	typedef _Bind10<_Callable_obj<_Fty> , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9> _MyBind;
	return (_Bind_fty<_Fty, _Notforced, _MyBind>(_MyBind(_Val , _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7, _Ax8 , _Ax9)));
	}


template<class _Ret,
	class _Rx
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind10<_Callable_fun<_Rx(__cdecl * const)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9)> , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9> >
		>::type
			bind(_Rx(__cdecl * const _Val)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6, _Arg7 _Ax7, _Arg8 _Ax8 , _Arg9 _Ax9)
	{	
	typedef _Callable_fun<_Rx(__cdecl * const)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9)> _Callable;
	typedef _Bind10<_Callable , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val , _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7, _Ax8 , _Ax9)));
	}

template<class _Rx
	, class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9
	, class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9> inline
	_Bind<_Rx,
		_Rx,
		_Bind10<_Callable_fun<_Rx(__cdecl * const)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9)> , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9> >
			bind(_Rx(__cdecl * const _Val)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6, _Arg7 _Ax7, _Arg8 _Ax8 , _Arg9 _Ax9)
	{	
	typedef _Callable_fun<_Rx(__cdecl * const)(_Farg0 , _Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9)> _Callable;
	typedef _Bind10<_Callable , _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val , _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7, _Ax8 , _Ax9)));
	}

 





























































 































 


























#line 492 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"

 
template<class _Ret,
	class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind10<_Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9), _Farg0>,
				_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9> >
		>::type
				bind(_Rx(__thiscall _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6, _Arg7 _Ax7, _Arg8 _Ax8 , _Arg9 _Ax9)
	{	
	typedef _Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9), _Farg0>
		_Callable;
	typedef _Bind10<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7, _Ax8 , _Ax9)));
	}

template<class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9> inline
	_Bind<_Rx,
		_Rx,
		_Bind10<_Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9), _Farg0>,
			_Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9> >
			bind(_Rx(__thiscall _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6, _Arg7 _Ax7, _Arg8 _Ax8 , _Arg9 _Ax9)
	{	
	typedef _Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9), _Farg0>
		_Callable;
	typedef _Bind10<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7, _Ax8 , _Ax9)));
	}

template<class _Ret,
	class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind10<_Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) const,
				_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9> >
		>::type
			bind(_Rx(__thiscall _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) const , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6, _Arg7 _Ax7, _Arg8 _Ax8 , _Arg9 _Ax9)
	{	
	typedef _Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) const, _Farg0>
		_Callable;
	typedef _Bind10<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7, _Ax8 , _Ax9)));
	}

template<class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9> inline
	_Bind<_Rx,
		_Rx,
		_Bind10<_Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) const,
			_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9> >
			bind(_Rx(__thiscall _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) const , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6, _Arg7 _Ax7, _Arg8 _Ax8 , _Arg9 _Ax9)
	{	
	typedef _Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) const, _Farg0>
		_Callable;
	typedef _Bind10<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7, _Ax8 , _Ax9)));
	}

template<class _Ret,
	class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind10<_Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) volatile,
				_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9> >
		>::type
		bind(_Rx(__thiscall _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) volatile , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6, _Arg7 _Ax7, _Arg8 _Ax8 , _Arg9 _Ax9)
	{	
	typedef _Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) volatile, _Farg0>
		_Callable;
	typedef _Bind10<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7, _Ax8 , _Ax9)));
	}

template<class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9> inline
	_Bind<_Rx,
		_Rx,
		_Bind10<_Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) volatile,
			_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9> >
			bind(_Rx(__thiscall _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) volatile , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6, _Arg7 _Ax7, _Arg8 _Ax8 , _Arg9 _Ax9)
	{	
	typedef _Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) volatile , _Farg0>
		_Callable;
	typedef _Bind10<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7, _Ax8 , _Ax9)));
	}

template<class _Ret,
	class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9> inline
	typename enable_if<!is_same<_Ret, _Rx>::value,
		_Bind<_Ret,
			_Rx,
			_Bind10<_Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) const volatile,
				_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9> >
		>::type
			bind(_Rx(__thiscall _Farg0::* const _Val)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9)
				const volatile , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6, _Arg7 _Ax7, _Arg8 _Ax8 , _Arg9 _Ax9)
	{	
	typedef _Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) const volatile,
		_Farg0> _Callable;
	typedef _Bind10<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9> _MyBind;
	return (_Bind<_Ret, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7, _Ax8 , _Ax9)));
	}

template<class _Rx,
	class _Farg0 , class _Farg1, class _Farg2, class _Farg3, class _Farg4, class _Farg5, class _Farg6, class _Farg7, class _Farg8 , class _Farg9,
	class _Arg0 , class _Arg1, class _Arg2, class _Arg3, class _Arg4, class _Arg5, class _Arg6, class _Arg7, class _Arg8 , class _Arg9> inline
	_Bind<_Rx,
		_Rx,
		_Bind10<_Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) const volatile,
			_Farg0>, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9> >
		bind(_Rx(__thiscall _Farg0::* const _Val)(
			_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) const volatile , _Arg0 _Ax0 , _Arg1 _Ax1, _Arg2 _Ax2, _Arg3 _Ax3, _Arg4 _Ax4, _Arg5 _Ax5, _Arg6 _Ax6, _Arg7 _Ax7, _Arg8 _Ax8 , _Arg9 _Ax9)
	{	
	typedef _Callable_pmf<_Rx(__thiscall _Farg0::*const)(_Farg1, _Farg2, _Farg3, _Farg4, _Farg5, _Farg6, _Farg7, _Farg8 , _Farg9) const volatile,
		_Farg0> _Callable;
	typedef _Bind10<_Callable, _Arg0 , _Arg1, _Arg2, _Arg3, _Arg4, _Arg5, _Arg6, _Arg7, _Arg8 , _Arg9> _MyBind;
	return (_Bind<_Rx, _Rx, _MyBind>(_MyBind(_Val, _Ax0 , _Ax1, _Ax2, _Ax3, _Ax4, _Ax5, _Ax6, _Ax7, _Ax8 , _Ax9)));
	}


 
























































































































































































































































































































































































































 






































































































































 #line 1174 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xxbind1"



















#line 254 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
























#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap1"
















































































































#line 57 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\xfwrap"




















#line 481 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\functional"
	}	

 
using tr1::bad_function_call;
using tr1::bind;
using tr1::cref;
using tr1::function;
using tr1::is_bind_expression;
using tr1::is_placeholder;
using tr1::mem_fn;
using tr1::ref;
using tr1::reference_wrapper;
using tr1::result_of;
using tr1::swap;

namespace placeholders {
	using namespace tr1::placeholders;
	}	
 #line 500 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\functional"
}
 #line 502 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\functional"

 

 #pragma warning(pop)
 #pragma pack(pop)

#line 509 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\functional"
#line 510 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\functional"





#line 19 "c:\\users\\blake\\documents\\github\\pct-reconstruction\\pCT_Reconstruction.h"
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\initializer_list"

#pragma once





 #pragma pack(push,8)
 #pragma warning(push,3)

namespace std {
		
template<class _Elem>
	class initializer_list
	{	
public:
	typedef _Elem value_type;
	typedef const _Elem& reference;
	typedef const _Elem& const_reference;
	typedef size_t size_type;

	typedef const _Elem* iterator;
	typedef const _Elem* const_iterator;

	initializer_list()
		: _First(0), _Last(0)
		{	
		}

	initializer_list(const _Elem *_First_arg, const _Elem *_Last_arg)
		: _First(_First_arg), _Last(_Last_arg)
		{	
		}

	const _Elem *begin() const
		{	
		return (_First);
		}

	const _Elem *end() const
		{	
		return (_Last);
		}

	size_t size() const
		{	
		return ((size_t)(_Last - _First));
		}

private:
	const _Elem *_First;
	const _Elem *_Last;
	};

		
template<class _Elem> inline
	const _Elem *begin(initializer_list<_Elem> _Ilist)
	{	
	return (_Ilist.begin());
	}

		
template<class _Elem> inline
	const _Elem *end(initializer_list<_Elem> _Ilist)
	{	
	return (_Ilist.end());
	}
}

 #pragma warning(pop)
 #pragma pack(pop)

#line 74 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\initializer_list"
#line 75 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\initializer_list"





#line 20 "c:\\users\\blake\\documents\\github\\pct-reconstruction\\pCT_Reconstruction.h"
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\iostream"

#pragma once





 #pragma pack(push,8)
 #pragma warning(push,3)
namespace std {

  











		
 extern __declspec(dllimport) istream cin, *_Ptr_cin;
 extern __declspec(dllimport) ostream cout, *_Ptr_cout;
 extern __declspec(dllimport) ostream cerr, *_Ptr_cerr;
 extern __declspec(dllimport) ostream clog, *_Ptr_clog;

 extern __declspec(dllimport) wistream wcin, *_Ptr_wcin;
 extern __declspec(dllimport) wostream wcout, *_Ptr_wcout;
 extern __declspec(dllimport) wostream wcerr, *_Ptr_wcerr;
 extern __declspec(dllimport) wostream wclog, *_Ptr_wclog;

		
class __declspec(dllimport) _Winit {
public:
	__thiscall _Winit();
	__thiscall ~_Winit();
private:
	 static int _Init_cnt;
	};
  #line 44 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\iostream"

}
 #pragma warning(pop)
 #pragma pack(pop)

#line 50 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\iostream"
#line 51 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\iostream"





#line 21 "c:\\users\\blake\\documents\\github\\pct-reconstruction\\pCT_Reconstruction.h"

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\numeric"

#pragma once





 #pragma pack(push,8)
 #pragma warning(push,3)
namespace std {
		
template<class _InIt,
	class _Ty> inline
	_Ty _Accumulate(_InIt _First, _InIt _Last, _Ty _Val)
	{	
	for (; _First != _Last; ++_First)
		_Val = (_Ty)(_Val + *_First);
	return (_Val);
	}

template<class _InIt,
	class _Ty> inline
	_Ty accumulate(_InIt _First, _InIt _Last, _Ty _Val)
	{	
	;
	return (_Accumulate(_Unchecked(_First), _Unchecked(_Last), _Val));
	}

		
template<class _InIt,
	class _Ty,
	class _Fn2> inline
	_Ty _Accumulate(_InIt _First, _InIt _Last, _Ty _Val, _Fn2 _Func)
	{	
	for (; _First != _Last; ++_First)
		_Val = _Func(_Val, *_First);
	return (_Val);
	}

template<class _InIt,
	class _Ty,
	class _Fn2> inline
	_Ty accumulate(_InIt _First, _InIt _Last, _Ty _Val, _Fn2 _Func)
	{	
	;
	;
	return (_Accumulate(_Unchecked(_First), _Unchecked(_Last), _Val, _Func));
	}

		
template<class _InIt1,
	class _InIt2,
	class _Ty> inline
	_Ty _Inner_product(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _Ty _Val)
	{	
	for (; _First1 != _Last1; ++_First1, ++_First2)
		_Val = (_Ty)(_Val + *_First1 * *_First2);
	return (_Val);
	}

 
template<class _InIt1,
	class _InIt2,
	class _Ty> inline
	_Ty inner_product(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _Ty _Val)
	{	
	;
	;
	return (_Inner_product(_Unchecked(_First1), _Unchecked(_Last1),
		_First2, _Val));
	}

 











































#line 120 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\numeric"

		
template<class _InIt1,
	class _InIt2,
	class _Ty,
	class _Fn21,
	class _Fn22> inline
	_Ty _Inner_product(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _Ty _Val,
		_Fn21 _Func1, _Fn22 _Func2)
	{	
	for (; _First1 != _Last1; ++_First1, ++_First2)
		_Val = _Func1(_Val, _Func2(*_First1, *_First2));
	return (_Val);
	}

 
template<class _InIt1,
	class _InIt2,
	class _Ty,
	class _Fn21,
	class _Fn22> inline
	_Ty inner_product(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _Ty _Val,
		_Fn21 _Func1, _Fn22 _Func2)
	{	
	;
	;
	;
	;
	return (_Inner_product(_Unchecked(_First1), _Unchecked(_Last1),
		_First2, _Val,
		_Func1, _Func2));
	}

 





























































#line 218 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\numeric"

		
template<class _InIt,
	class _OutIt,
	class _Ty> inline
	_OutIt _Partial_sum(_InIt _First, _InIt _Last,
		_OutIt _Dest, _Ty *)
	{	
	_Ty _Val = *_First;
	for (*_Dest = _Val; ++_First != _Last; *++_Dest = _Val)
		_Val = (_Ty)(_Val + *_First);
	return (++_Dest);
	}

 
template<class _InIt,
	class _OutIt> inline
	_OutIt partial_sum(_InIt _First, _InIt _Last,
		_OutIt _Dest)
	{	
	return (_First == _Last ? _Dest
		: _Partial_sum(_Unchecked(_First), _Unchecked(_Last),
			_Dest, _Val_type(_First)));
	}

 































































#line 308 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\numeric"

		
template<class _InIt,
	class _OutIt,
	class _Fn2,
	class _Ty> inline
	_OutIt _Partial_sum(_InIt _First, _InIt _Last,
		_OutIt _Dest, _Fn2 _Func, _Ty *)
	{	
	_Ty _Val = *_First;
	for (*_Dest = _Val; ++_First != _Last; *++_Dest = _Val)
		_Val = _Func(_Val, *_First);
	return (++_Dest);
	}

 
template<class _InIt,
	class _OutIt,
	class _Fn2> inline
	_OutIt partial_sum(_InIt _First, _InIt _Last,
		_OutIt _Dest, _Fn2 _Func)
	{	
	return (_First == _Last ? _Dest
		: _Partial_sum(_Unchecked(_First), _Unchecked(_Last),
			_Dest, _Func, _Val_type(_First)));
	}

 






































































#line 407 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\numeric"

		
template<class _InIt,
	class _OutIt,
	class _Ty> inline
	_OutIt _Adjacent_difference(_InIt _First, _InIt _Last,
		_OutIt _Dest, _Ty *)
	{	
	_Ty _Val = *_First;
	for (*_Dest = _Val; ++_First != _Last; )
		{	
		_Ty _Tmp = *_First;
		*++_Dest = (_Ty)(_Tmp - _Val);
		_Val = _Tmp;
		}
	return (++_Dest);
	}

 
template<class _InIt,
	class _OutIt> inline
	_OutIt adjacent_difference(_InIt _First, _InIt _Last,
		_OutIt _Dest)
	{	
	return (_First == _Last ? _Dest
		: _Adjacent_difference(_Unchecked(_First), _Unchecked(_Last),
			_Dest, _Val_type(_First)));
	}

 































































#line 501 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\numeric"

		
template<class _InIt,
	class _OutIt,
	class _Fn2,
	class _Ty> inline
	_OutIt _Adjacent_difference(_InIt _First, _InIt _Last,
		_OutIt _Dest, _Fn2 _Func, _Ty *)
	{	
	_Ty _Val = *_First;
	for (*_Dest = _Val; ++_First != _Last; )
		{	
		_Ty _Tmp = *_First;
		*++_Dest = _Func(_Tmp, _Val);
		_Val = _Tmp;
		}
	return (++_Dest);
	}

 
template<class _InIt,
	class _OutIt,
	class _Fn2> inline
	_OutIt adjacent_difference(_InIt _First, _InIt _Last,
		_OutIt _Dest, _Fn2 _Func)
	{	
	return (_First == _Last ? _Dest
		: _Adjacent_difference(_Unchecked(_First), _Unchecked(_Last),
			_Dest, _Func, _Val_type(_First)));
	}

 






































































#line 604 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\numeric"

 
template<class _FwdIt,
	class _Ty> inline
	void _Iota(_FwdIt _First, _FwdIt _Last, _Ty _Val)
	{	
	for (; _First != _Last; ++_First, ++_Val)
		*_First = _Val;
	}

template<class _FwdIt,
	class _Ty> inline
	void iota(_FwdIt _First, _FwdIt _Last, _Ty _Val)
	{	
	;
	_Iota(_Unchecked(_First), _Unchecked(_Last), _Val);
	}
 #line 622 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\numeric"
}
 #pragma warning(pop)
 #pragma pack(pop)

#line 627 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\numeric"
#line 628 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\numeric"






















#line 23 "c:\\users\\blake\\documents\\github\\pct-reconstruction\\pCT_Reconstruction.h"
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\omp.h"







#pragma once


extern "C" {
#line 13 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\omp.h"





typedef void * omp_lock_t;
#line 20 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\omp.h"



typedef void * omp_nest_lock_t;
#line 25 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\omp.h"





#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\omp.h"
    #pragma comment(lib, "vcomp")
#line 33 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\omp.h"

#line 35 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\omp.h"



#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\omp.h"

__declspec(dllimport) void __cdecl
omp_set_num_threads(
    int _Num_threads
    );

__declspec(dllimport) int __cdecl
omp_get_num_threads(
    void
    );

__declspec(dllimport) int __cdecl
omp_get_max_threads(
    void
    );

__declspec(dllimport) int __cdecl
omp_get_thread_num(
    void
    );

__declspec(dllimport) int __cdecl
omp_get_num_procs(
    void
    );

__declspec(dllimport) void __cdecl
omp_set_dynamic(
    int _Dynamic_threads
    );

__declspec(dllimport) int __cdecl
omp_get_dynamic(
    void
    );

__declspec(dllimport) int __cdecl
omp_in_parallel(
    void
    );

__declspec(dllimport) void __cdecl
omp_set_nested(
    int _Nested
    );

__declspec(dllimport) int __cdecl
omp_get_nested(
    void
    );

__declspec(dllimport) void __cdecl
omp_init_lock(
    omp_lock_t * _Lock
    );

__declspec(dllimport) void __cdecl
omp_destroy_lock(
    omp_lock_t * _Lock
    );

__declspec(dllimport) void __cdecl
omp_set_lock(
    omp_lock_t * _Lock
    );

__declspec(dllimport) void __cdecl
omp_unset_lock(
    omp_lock_t * _Lock
    );

__declspec(dllimport) int __cdecl
omp_test_lock(
    omp_lock_t * _Lock
    );

__declspec(dllimport) void __cdecl
omp_init_nest_lock(
    omp_nest_lock_t * _Lock
    );

__declspec(dllimport) void __cdecl
omp_destroy_nest_lock(
    omp_nest_lock_t * _Lock
    );

__declspec(dllimport) void __cdecl
omp_set_nest_lock(
    omp_nest_lock_t * _Lock
    );

__declspec(dllimport) void __cdecl
omp_unset_nest_lock(
    omp_nest_lock_t * _Lock
    );

__declspec(dllimport) int __cdecl
omp_test_nest_lock(
    omp_nest_lock_t * _Lock
    );

__declspec(dllimport) double __cdecl
omp_get_wtime(
    void
    );

__declspec(dllimport) double __cdecl
omp_get_wtick(
    void
    );


}
#line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\omp.h"
#line 24 "c:\\users\\blake\\documents\\github\\pct-reconstruction\\pCT_Reconstruction.h"
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\sstream"

#pragma once



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\string"

#pragma once





 #pragma pack(push,8)
 #pragma warning(push,3)

 #pragma warning(disable: 4189)
 #pragma warning(disable: 4172)

namespace std {
		
template<class _Elem,
	class _Traits,
	class _Alloc> inline
	basic_string<_Elem, _Traits, _Alloc> operator+(
		const basic_string<_Elem, _Traits, _Alloc>& _Left,
		const basic_string<_Elem, _Traits, _Alloc>& _Right)
	{	
	basic_string<_Elem, _Traits, _Alloc> _Ans;
	_Ans.reserve(_Left.size() + _Right.size());
	_Ans += _Left;
	_Ans += _Right;
	return (_Ans);
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	basic_string<_Elem, _Traits, _Alloc> operator+(
		const _Elem *_Left,
		const basic_string<_Elem, _Traits, _Alloc>& _Right)
	{	
	basic_string<_Elem, _Traits, _Alloc> _Ans;
	_Ans.reserve(_Traits::length(_Left) + _Right.size());
	_Ans += _Left;
	_Ans += _Right;
	return (_Ans);
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	basic_string<_Elem, _Traits, _Alloc> operator+(
		const _Elem _Left,
		const basic_string<_Elem, _Traits, _Alloc>& _Right)
	{	
	basic_string<_Elem, _Traits, _Alloc> _Ans;
	_Ans.reserve(1 + _Right.size());
	_Ans += _Left;
	_Ans += _Right;
	return (_Ans);
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	basic_string<_Elem, _Traits, _Alloc> operator+(
		const basic_string<_Elem, _Traits, _Alloc>& _Left,
		const _Elem *_Right)
	{	
	basic_string<_Elem, _Traits, _Alloc> _Ans;
	_Ans.reserve(_Left.size() + _Traits::length(_Right));
	_Ans += _Left;
	_Ans += _Right;
	return (_Ans);
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	basic_string<_Elem, _Traits, _Alloc> operator+(
		const basic_string<_Elem, _Traits, _Alloc>& _Left,
		const _Elem _Right)
	{	
	basic_string<_Elem, _Traits, _Alloc> _Ans;
	_Ans.reserve(_Left.size() + 1);
	_Ans += _Left;
	_Ans += _Right;
	return (_Ans);
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	basic_string<_Elem, _Traits, _Alloc> operator+(
		const basic_string<_Elem, _Traits, _Alloc>& _Left,
		basic_string<_Elem, _Traits, _Alloc>&& _Right)
	{	
	return (::std:: move(_Right.insert(0, _Left)));
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	basic_string<_Elem, _Traits, _Alloc> operator+(
		basic_string<_Elem, _Traits, _Alloc>&& _Left,
		const basic_string<_Elem, _Traits, _Alloc>& _Right)
	{	
	return (::std:: move(_Left.append(_Right)));
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	basic_string<_Elem, _Traits, _Alloc> operator+(
		basic_string<_Elem, _Traits, _Alloc>&& _Left,
		basic_string<_Elem, _Traits, _Alloc>&& _Right)
	{	
	if (_Right.size() <= _Left.capacity() - _Left.size()
		|| _Right.capacity() - _Right.size() < _Left.size())
		return (::std:: move(_Left.append(_Right)));
	else
		return (::std:: move(_Right.insert(0, _Left)));
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	basic_string<_Elem, _Traits, _Alloc> operator+(
		const _Elem *_Left,
		basic_string<_Elem, _Traits, _Alloc>&& _Right)
	{	
	return (::std:: move(_Right.insert(0, _Left)));
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	basic_string<_Elem, _Traits, _Alloc> operator+(
		const _Elem _Left,
		basic_string<_Elem, _Traits, _Alloc>&& _Right)
	{	
	return (::std:: move(_Right.insert(0, 1, _Left)));
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	basic_string<_Elem, _Traits, _Alloc> operator+(
		basic_string<_Elem, _Traits, _Alloc>&& _Left,
		const _Elem *_Right)
	{	
	return (::std:: move(_Left.append(_Right)));
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	basic_string<_Elem, _Traits, _Alloc> operator+(
		basic_string<_Elem, _Traits, _Alloc>&& _Left,
		const _Elem _Right)
	{	
	return (::std:: move(_Left.append(1, _Right)));
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	bool operator==(
		const basic_string<_Elem, _Traits, _Alloc>& _Left,
		const basic_string<_Elem, _Traits, _Alloc>& _Right)
	{	
	return (_Left.compare(_Right) == 0);
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	bool operator==(
		const _Elem * _Left,
		const basic_string<_Elem, _Traits, _Alloc>& _Right)
	{	
	return (_Right.compare(_Left) == 0);
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	bool operator==(
		const basic_string<_Elem, _Traits, _Alloc>& _Left,
		const _Elem *_Right)
	{	
	return (_Left.compare(_Right) == 0);
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	bool operator!=(
		const basic_string<_Elem, _Traits, _Alloc>& _Left,
		const basic_string<_Elem, _Traits, _Alloc>& _Right)
	{	
	return (!(_Left == _Right));
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	bool operator!=(
		const _Elem *_Left,
		const basic_string<_Elem, _Traits, _Alloc>& _Right)
	{	
	return (!(_Left == _Right));
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	bool operator!=(
		const basic_string<_Elem, _Traits, _Alloc>& _Left,
		const _Elem *_Right)
	{	
	return (!(_Left == _Right));
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	bool operator<(
		const basic_string<_Elem, _Traits, _Alloc>& _Left,
		const basic_string<_Elem, _Traits, _Alloc>& _Right)
	{	
	return (_Left.compare(_Right) < 0);
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	bool operator<(
		const _Elem * _Left,
		const basic_string<_Elem, _Traits, _Alloc>& _Right)
	{	
	return (_Right.compare(_Left) > 0);
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	bool operator<(
		const basic_string<_Elem, _Traits, _Alloc>& _Left,
		const _Elem *_Right)
	{	
	return (_Left.compare(_Right) < 0);
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	bool operator>(
		const basic_string<_Elem, _Traits, _Alloc>& _Left,
		const basic_string<_Elem, _Traits, _Alloc>& _Right)
	{	
	return (_Right < _Left);
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	bool operator>(
		const _Elem * _Left,
		const basic_string<_Elem, _Traits, _Alloc>& _Right)
	{	
	return (_Right < _Left);
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	bool operator>(
		const basic_string<_Elem, _Traits, _Alloc>& _Left,
		const _Elem *_Right)
	{	
	return (_Right < _Left);
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	bool operator<=(
		const basic_string<_Elem, _Traits, _Alloc>& _Left,
		const basic_string<_Elem, _Traits, _Alloc>& _Right)
	{	
	return (!(_Right < _Left));
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	bool operator<=(
		const _Elem * _Left,
		const basic_string<_Elem, _Traits, _Alloc>& _Right)
	{	
	return (!(_Right < _Left));
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	bool operator<=(
		const basic_string<_Elem, _Traits, _Alloc>& _Left,
		const _Elem *_Right)
	{	
	return (!(_Right < _Left));
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	bool operator>=(
		const basic_string<_Elem, _Traits, _Alloc>& _Left,
		const basic_string<_Elem, _Traits, _Alloc>& _Right)
	{	
	return (!(_Left < _Right));
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	bool operator>=(
		const _Elem * _Left,
		const basic_string<_Elem, _Traits, _Alloc>& _Right)
	{	
	return (!(_Left < _Right));
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	bool operator>=(
		const basic_string<_Elem, _Traits, _Alloc>& _Left,
		const _Elem *_Right)
	{	
	return (!(_Left < _Right));
	}

		
template<class _Elem,
	class _Traits,
	class _Alloc> inline
	basic_istream<_Elem, _Traits>& operator>>(
		basic_istream<_Elem, _Traits> && _Istr,
		basic_string<_Elem, _Traits, _Alloc>& _Str)
	{	
	typedef ctype<_Elem> _Ctype;
	typedef basic_istream<_Elem, _Traits> _Myis;
	typedef basic_string<_Elem, _Traits, _Alloc> _Mystr;
	typedef typename _Mystr::size_type _Mysizt;

	ios_base::iostate _State = ios_base::goodbit;
	bool _Changed = false;
	const typename _Myis::sentry _Ok(_Istr);

	if (_Ok)
		{	
		const _Ctype& _Ctype_fac = use_facet< _Ctype >(_Istr.getloc());
		_Str.erase();

		try {
		_Mysizt _Size = 0 < _Istr.width()
			&& (_Mysizt)_Istr.width() < _Str.max_size()
				? (_Mysizt)_Istr.width() : _Str.max_size();
		typename _Traits::int_type _Meta = _Istr.rdbuf()->sgetc();

		for (; 0 < _Size; --_Size, _Meta = _Istr.rdbuf()->snextc())
			if(_Traits::eq_int_type(_Traits::eof(), _Meta))
				{	
				_State |= ios_base::eofbit;
				break;
				}
			else if (_Ctype_fac.is(_Ctype::space,
				_Traits::to_char_type(_Meta)))
				break;	
			else
				{	
				_Str.append(1, _Traits::to_char_type(_Meta));
				_Changed = true;
				}
		} catch (...) { (_Istr).setstate(ios_base::badbit, true); }
		}

	_Istr.width(0);
	if (!_Changed)
		_State |= ios_base::failbit;
	_Istr.setstate(_State);
	return (_Istr);
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	basic_istream<_Elem, _Traits>& getline(
		basic_istream<_Elem, _Traits> && _Istr,
		basic_string<_Elem, _Traits, _Alloc>& _Str,
		const _Elem _Delim)
	{	
	typedef basic_istream<_Elem, _Traits> _Myis;

	ios_base::iostate _State = ios_base::goodbit;
	bool _Changed = false;
	const typename _Myis::sentry _Ok(_Istr, true);

	if (_Ok)
		{	
		try {
		_Str.erase();
		const typename _Traits::int_type _Metadelim =
			_Traits::to_int_type(_Delim);
		typename _Traits::int_type _Meta = _Istr.rdbuf()->sgetc();

		for (; ; _Meta = _Istr.rdbuf()->snextc())
			if (_Traits::eq_int_type(_Traits::eof(), _Meta))
				{	
				_State |= ios_base::eofbit;
				break;
				}
			else if (_Traits::eq_int_type(_Meta, _Metadelim))
				{	
				_Changed = true;
				_Istr.rdbuf()->sbumpc();
				break;
				}
			else if (_Str.max_size() <= _Str.size())
				{	
				_State |= ios_base::failbit;
				break;
				}
			else
				{	
				_Str += _Traits::to_char_type(_Meta);
				_Changed = true;
				}
		} catch (...) { (_Istr).setstate(ios_base::badbit, true); }
		}

	if (!_Changed)
		_State |= ios_base::failbit;
	_Istr.setstate(_State);
	return (_Istr);
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	basic_istream<_Elem, _Traits>& getline(
		basic_istream<_Elem, _Traits> && _Istr,
		basic_string<_Elem, _Traits, _Alloc>& _Str)
	{	
	return (getline(_Istr, _Str, _Istr.widen('\n')));
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	basic_istream<_Elem, _Traits>& operator>>(
		basic_istream<_Elem, _Traits>& _Istr,
		basic_string<_Elem, _Traits, _Alloc>& _Str)
	{	
	return (::std:: move(_Istr) >> _Str);
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	basic_istream<_Elem, _Traits>& getline(
		basic_istream<_Elem, _Traits>& _Istr,
		basic_string<_Elem, _Traits, _Alloc>& _Str,
		const _Elem _Delim)
	{	
	return (getline(::std:: move(_Istr), _Str, _Delim));
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	basic_istream<_Elem, _Traits>& getline(
		basic_istream<_Elem, _Traits>& _Istr,
		basic_string<_Elem, _Traits, _Alloc>& _Str)
	{	
	return (getline(::std:: move(_Istr), _Str, _Istr.widen('\n')));
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	basic_ostream<_Elem, _Traits>& operator<<(
		basic_ostream<_Elem, _Traits>& _Ostr,
		const basic_string<_Elem, _Traits, _Alloc>& _Str)
	{	
	typedef basic_ostream<_Elem, _Traits> _Myos;
	typedef basic_string<_Elem, _Traits, _Alloc> _Mystr;
	typedef typename _Mystr::size_type _Mysizt;

	ios_base::iostate _State = ios_base::goodbit;
	_Mysizt _Size = _Str.size();
	_Mysizt _Pad = _Ostr.width() <= 0 || (_Mysizt)_Ostr.width() <= _Size
		? 0 : (_Mysizt)_Ostr.width() - _Size;
	const typename _Myos::sentry _Ok(_Ostr);

	if (!_Ok)
		_State |= ios_base::badbit;
	else
		{	
	try {
		if ((_Ostr.flags() & ios_base::adjustfield) != ios_base::left)
			for (; 0 < _Pad; --_Pad)	
				if (_Traits::eq_int_type(_Traits::eof(),
					_Ostr.rdbuf()->sputc(_Ostr.fill())))
					{	
					_State |= ios_base::badbit;
					break;
					}

		if (_State == ios_base::goodbit
			&& _Ostr.rdbuf()->sputn(_Str.c_str(), _Size) != (streamsize)_Size)
				_State |= ios_base::badbit;
		else
			for (; 0 < _Pad; --_Pad)	
				if (_Traits::eq_int_type(_Traits::eof(),
					_Ostr.rdbuf()->sputc(_Ostr.fill())))
					{	
					_State |= ios_base::badbit;
					break;
					}
		_Ostr.width(0);
		} catch (...) { (_Ostr).setstate(ios_base::badbit, true); }
		}

	_Ostr.setstate(_State);
	return (_Ostr);
	}

 
inline int stoi(const string& _Str, size_t *_Idx = 0,
	int _Base = 10)
	{	
	const char *_Ptr = _Str.c_str();
	char *_Eptr;
	int _Errno = 0;
	long _Ans = :: _Stolx(_Ptr, &_Eptr, _Base, &_Errno);

	if (_Ptr == _Eptr)
		_Xinvalid_argument("invalid stoi argument");
	if (_Errno || _Ans < (-2147483647 - 1) != 2147483647 < _Ans)
		_Xout_of_range("stoi argument out of range");
	if (_Idx != 0)
		*_Idx = (size_t)(_Eptr - _Ptr);
	return ((int)_Ans);
	}

inline long stol(const string& _Str, size_t *_Idx = 0,
	int _Base = 10)
	{	
	const char *_Ptr = _Str.c_str();
	char *_Eptr;
	int _Errno = 0;
	long _Ans = :: _Stoulx(_Ptr, &_Eptr, _Base, &_Errno);

	if (_Ptr == _Eptr)
		_Xinvalid_argument("invalid stol argument");
	if (_Errno)
		_Xout_of_range("stol argument out of range");
	if (_Idx != 0)
		*_Idx = (size_t)(_Eptr - _Ptr);
	return (_Ans);
	}

inline unsigned long stoul(const string& _Str, size_t *_Idx = 0,
	int _Base = 10)
	{	
	const char *_Ptr = _Str.c_str();
	char *_Eptr;
	int _Errno = 0;
	unsigned long _Ans = :: _Stoulx(_Ptr, &_Eptr, _Base, &_Errno);

	if (_Ptr == _Eptr)
		_Xinvalid_argument("invalid stoul argument");
	if (_Errno)
		_Xout_of_range("stoul argument out of range");
	if (_Idx != 0)
		*_Idx = (size_t)(_Eptr - _Ptr);
	return (_Ans);
	}

inline _Longlong stoll(const string& _Str, size_t *_Idx = 0,
	int _Base = 10)
	{	
	const char *_Ptr = _Str.c_str();
	char *_Eptr;
	int _Errno = 0;
	_Longlong _Ans = :: _Stollx(_Ptr, &_Eptr, _Base, &_Errno);

	if (_Ptr == _Eptr)
		_Xinvalid_argument("invalid stoll argument");
	if (_Errno)
		_Xout_of_range("stoll argument out of range");
	if (_Idx != 0)
		*_Idx = (size_t)(_Eptr - _Ptr);
	return (_Ans);
	}

inline _ULonglong stoull(const string& _Str, size_t *_Idx = 0,
	int _Base = 10)
	{	
	const char *_Ptr = _Str.c_str();
	int _Errno = 0;
	char *_Eptr;
	_ULonglong _Ans = :: _Stoullx(_Ptr, &_Eptr, _Base, &_Errno);

	if (_Ptr == _Eptr)
		_Xinvalid_argument("invalid stoull argument");
	if (_Errno)
		_Xout_of_range("stoull argument out of range");
	if (_Idx != 0)
		*_Idx = (size_t)(_Eptr - _Ptr);
	return (_Ans);
	}

inline float stof(const string& _Str, size_t *_Idx = 0)
	{	
	const char *_Ptr = _Str.c_str();
	int _Errno = 0;
	char *_Eptr;
	float _Ans = :: _Stofx(_Ptr, &_Eptr, 0, &_Errno);

	if (_Ptr == _Eptr)
		_Xinvalid_argument("invalid stof argument");
	if (_Errno)
		_Xout_of_range("stof argument out of range");
	if (_Idx != 0)
		*_Idx = (size_t)(_Eptr - _Ptr);
	return (_Ans);
	}

inline double stod(const string& _Str, size_t *_Idx = 0)
	{	
	const char *_Ptr = _Str.c_str();
	int _Errno = 0;
	char *_Eptr;
	double _Ans = :: _Stodx(_Ptr, &_Eptr, 0, &_Errno);

	if (_Ptr == _Eptr)
		_Xinvalid_argument("invalid stod argument");
	if (_Errno)
		_Xout_of_range("stod argument out of range");
	if (_Idx != 0)
		*_Idx = (size_t)(_Eptr - _Ptr);
	return (_Ans);
	}

inline long double stold(const string& _Str, size_t *_Idx = 0)
	{	
	const char *_Ptr = _Str.c_str();
	int _Errno = 0;
	char *_Eptr;
	long double _Ans = :: _Stoldx(_Ptr, &_Eptr, 0, &_Errno);

	if (_Ptr == _Eptr)
		_Xinvalid_argument("invalid stold argument");
	if (_Errno)
		_Xout_of_range("stold argument out of range");
	if (_Idx != 0)
		*_Idx = (size_t)(_Eptr - _Ptr);
	return (_Ans);
	}

 

inline string to_string(_Longlong _Val)
	{	
	char _Buf[2 * 32];

	:: sprintf_s(_Buf, sizeof (_Buf), "%I64" "d", _Val);
	return (string(_Buf));
	}

inline string to_string(_ULonglong _Val)
	{	
	char _Buf[2 * 32];

	:: sprintf_s(_Buf, sizeof (_Buf), "%I64" "u", _Val);
	return (string(_Buf));
	}

inline string to_string(long double _Val)
	{	
	char _Buf[8 + 36 + 64];

	:: sprintf_s(_Buf, sizeof (_Buf), "%Lg", _Val);
	return (string(_Buf));
	}

	
inline string _Narrow_str(wstring _Str)
	{	
	string _Ans;

	for (const wchar_t *_Ptr = _Str.c_str(); *_Ptr != 0; ++_Ptr)
		_Ans.push_back((char):: wctob(*_Ptr));
	return (_Ans);
	}

inline int stoi(const wstring& _Str, size_t *_Idx = 0,
	int _Base = 10)
	{	
	return (stoi(_Narrow_str(_Str), _Idx, _Base));
	}

inline long stol(const wstring& _Str, size_t *_Idx = 0,
	int _Base = 10)
	{	
	return (stol(_Narrow_str(_Str), _Idx, _Base));
	}

inline unsigned long stoul(const wstring& _Str, size_t *_Idx = 0,
	int _Base = 10)
	{	
	return (stoul(_Narrow_str(_Str), _Idx, _Base));
	}

inline _Longlong stoll(const wstring& _Str, size_t *_Idx = 0,
	int _Base = 10)
	{	
	return (stoll(_Narrow_str(_Str), _Idx, _Base));
	}

inline _ULonglong stoull(const wstring& _Str, size_t *_Idx = 0,
	int _Base = 10)
	{	
	return (stoull(_Narrow_str(_Str), _Idx, _Base));
	}

inline float stof(const wstring& _Str, size_t *_Idx = 0)
	{	
	return (stof(_Narrow_str(_Str), _Idx));
	}

inline double stod(const wstring& _Str, size_t *_Idx = 0)
	{	
	return (stod(_Narrow_str(_Str), _Idx));
	}

inline long double stold(const wstring& _Str, size_t *_Idx = 0)
	{	
	return (stold(_Narrow_str(_Str), _Idx));
	}

 

inline wstring to_wstring(_Longlong _Val)
	{	
	wchar_t _Buf[2 * 32];

	:: swprintf(_Buf, sizeof (_Buf) / sizeof (_Buf[0]),
		L"%I64" L"d", _Val);
	return (wstring(_Buf));
	}

inline wstring to_wstring(_ULonglong _Val)
	{	
	wchar_t _Buf[2 * 32];

	:: swprintf(_Buf, sizeof (_Buf) / sizeof (_Buf[0]),
		L"%I64" L"u", _Val);
	return (wstring(_Buf));
	}

inline wstring to_wstring(long double _Val)
	{	
	wchar_t _Buf[8 + 36 + 64];

	:: swprintf(_Buf,sizeof (_Buf) / sizeof (_Buf[0]),
		L"%Lg", _Val);
	return (wstring(_Buf));
	}
 #line 780 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\string"
}

 #pragma warning(pop)
 #pragma pack(pop)

#line 786 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\string"
#line 787 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\string"





#line 7 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\sstream"

 #pragma pack(push,8)
 #pragma warning(push,3)
namespace std {
  #pragma warning(disable: 4251)

		
template<class _Elem,
	class _Traits,
	class _Alloc>
	class basic_stringbuf
		: public basic_streambuf<_Elem, _Traits>
	{	
public:
	typedef basic_stringbuf<_Elem, _Traits, _Alloc> _Myt;
	typedef _Alloc allocator_type;
	typedef basic_streambuf<_Elem, _Traits> _Mysb;
	typedef basic_string<_Elem, _Traits, _Alloc> _Mystr;

	explicit basic_stringbuf(ios_base::openmode _Mode =
		ios_base::in | ios_base::out)
		{	
		_Init(0, 0, _Getstate(_Mode));
		}

	explicit basic_stringbuf(const _Mystr& _Str,
		ios_base::openmode _Mode = ios_base::in | ios_base::out)
		{	
		_Init(_Str.c_str(), _Str.size(), _Getstate(_Mode));
		}

	basic_stringbuf(_Myt&& _Right)
		{	
		_Assign_rv(::std:: forward<_Myt>(_Right));
		}

	_Myt& operator=(_Myt&& _Right)
		{	
		_Assign_rv(::std:: forward<_Myt>(_Right));
		return (*this);
		}

	void _Assign_rv(_Myt&& _Right)
		{	
		if (this != &_Right)
			{	
			_Tidy();
			this->swap(_Right);
			}
		}

	void swap(_Myt& _Right)
		{	
		if (this != &_Right)
			{	
			_Mysb::swap(_Right);
			::std:: swap(_Seekhigh, _Right._Seekhigh);
			::std:: swap(_Mystate, _Right._Mystate);
			_Swap_adl(_Al, _Right._Al);
			}
		}

	void swap(_Myt&& _Right)
		{	
		_Assign_rv(::std:: forward<_Myt>(_Right));
		}

	virtual ~basic_stringbuf()
		{	
		_Tidy();
		}

	enum
		{	
		_Allocated = 1,	
		_Constant = 2,	
		_Noread = 4,	
		_Append = 8,	
		_Atend = 16};	
	typedef int _Strstate;

	typedef typename _Traits::int_type int_type;
	typedef typename _Traits::pos_type pos_type;
	typedef typename _Traits::off_type off_type;

	_Mystr str() const
		{	
		if (!(_Mystate & _Constant) && _Mysb::pptr() != 0)
			{	
			_Mystr _Str(_Mysb::pbase(), (_Seekhigh < _Mysb::pptr()
				? _Mysb::pptr() : _Seekhigh) - _Mysb::pbase());
			return (_Str);
			}
		else if (!(_Mystate & _Noread) && _Mysb::gptr() != 0)
			{	
			_Mystr _Str(_Mysb::eback(), _Mysb::egptr() - _Mysb::eback());
			return (_Str);
			}
		else
			{	
			_Mystr _Nul;
			return (_Nul);
			}
		}

	void str(const _Mystr& _Newstr)
		{	
		_Tidy();
		_Init(_Newstr.c_str(), _Newstr.size(), _Mystate);
		}

protected:
	virtual int_type overflow(int_type _Meta = _Traits::eof())
		{	
		if (_Mystate & _Append
			&& _Mysb::pptr() != 0 && _Mysb::pptr() < _Seekhigh)
			_Mysb::setp(_Mysb::pbase(), _Seekhigh, _Mysb::epptr());

		if (_Traits::eq_int_type(_Traits::eof(), _Meta))
			return (_Traits::not_eof(_Meta));	
		else if (_Mysb::pptr() != 0
			&& _Mysb::pptr() < _Mysb::epptr())
			{	
			*_Mysb::_Pninc() = _Traits::to_char_type(_Meta);
			return (_Meta);
			}
		else if (_Mystate & _Constant)
			return (_Traits::eof());	
		else
			{	
			size_t _Oldsize = _Mysb::pptr() == 0
				? 0 : _Mysb::epptr() - _Mysb::eback();
			size_t _Newsize = _Oldsize;
			size_t _Inc = _Newsize / 2 < _MINSIZE
				? _MINSIZE : _Newsize / 2;	

			while (0 < _Inc && 2147483647 - _Inc < _Newsize)
				_Inc /= 2;	
			if (_Inc == 0)
				return (_Traits::eof());	

			_Newsize += _Inc;

			_Elem *_Newptr = _Al.allocate(_Newsize);
			_Elem *_Oldptr = _Mysb::eback();

			if (0 < _Oldsize)
				_Traits::copy(_Newptr, _Oldptr, _Oldsize);

			if (_Oldsize == 0)
				{	
				_Seekhigh = _Newptr;
				_Mysb::setp(_Newptr, _Newptr + _Newsize);
				if (_Mystate & _Noread)
					_Mysb::setg(_Newptr, 0, _Newptr);
				else
					_Mysb::setg(_Newptr, _Newptr, _Newptr + 1);
				}
			else
				{	
				_Seekhigh = _Newptr + (_Seekhigh - _Oldptr);
				_Mysb::setp(_Newptr + (_Mysb::pbase() - _Oldptr),
					_Newptr + (_Mysb::pptr() - _Oldptr),
					_Newptr + _Newsize);
				if (_Mystate & _Noread)
					_Mysb::setg(_Newptr, 0, _Newptr);
				else
					_Mysb::setg(_Newptr,
						_Newptr + (_Mysb::gptr() - _Oldptr),
						_Mysb::pptr() + 1);
				}

			if (_Mystate & _Allocated)
				_Al.deallocate(_Oldptr, _Oldsize);
			_Mystate |= _Allocated;

			*_Mysb::_Pninc() = _Traits::to_char_type(_Meta);
			return (_Meta);
			}
		}

	virtual int_type pbackfail(int_type _Meta = _Traits::eof())
		{	
		if (_Mysb::gptr() == 0
			|| _Mysb::gptr() <= _Mysb::eback()
			|| !_Traits::eq_int_type(_Traits::eof(), _Meta)
			&& !_Traits::eq(_Traits::to_char_type(_Meta), _Mysb::gptr()[-1])
			&& _Mystate & _Constant)
			return (_Traits::eof());	
		else
			{	
			_Mysb::gbump(-1);
			if (!_Traits::eq_int_type(_Traits::eof(), _Meta))
				*_Mysb::gptr() = _Traits::to_char_type(_Meta);
			return (_Traits::not_eof(_Meta));
			}
		}

	virtual int_type underflow()
		{	
		if (_Mysb::gptr() == 0)
			return (_Traits::eof());	
		else if (_Mysb::gptr() < _Mysb::egptr())
			return (_Traits::to_int_type(*_Mysb::gptr()));	
		else if (_Mystate & _Noread || _Mysb::pptr() == 0
			|| _Mysb::pptr() <= _Mysb::gptr() && _Seekhigh <= _Mysb::gptr())
			return (_Traits::eof());	
		else
			{	
			if (_Seekhigh < _Mysb::pptr())
				_Seekhigh = _Mysb::pptr();
			_Mysb::setg(_Mysb::eback(), _Mysb::gptr(), _Seekhigh);
			return (_Traits::to_int_type(*_Mysb::gptr()));
			}
		}

	virtual pos_type seekoff(off_type _Off,
		ios_base::seekdir _Way,
		ios_base::openmode _Which = ios_base::in | ios_base::out)
		{	
		if (_Mysb::pptr() != 0 && _Seekhigh < _Mysb::pptr())
			_Seekhigh = _Mysb::pptr();	

		if (_Which & ios_base::in && _Mysb::gptr() != 0)
			{	
			if (_Way == ios_base::end)
				_Off += (off_type)(_Seekhigh - _Mysb::eback());
			else if (_Way == ios_base::cur
				&& (_Which & ios_base::out) == 0)
				_Off += (off_type)(_Mysb::gptr() - _Mysb::eback());
			else if (_Way != ios_base::beg)
				_Off = _BADOFF;

			if (0 <= _Off && _Off <= _Seekhigh - _Mysb::eback())
				{	
				_Mysb::gbump((int)(_Mysb::eback() - _Mysb::gptr() + _Off));
				if (_Which & ios_base::out && _Mysb::pptr() != 0)
					_Mysb::setp(_Mysb::pbase(), _Mysb::gptr(),
						_Mysb::epptr());	
				}
			else
				_Off = _BADOFF;
			}
		else if (_Which & ios_base::out && _Mysb::pptr() != 0)
			{	
			if (_Way == ios_base::end)
				_Off += (off_type)(_Seekhigh - _Mysb::eback());
			else if (_Way == ios_base::cur)
				_Off += (off_type)(_Mysb::pptr() - _Mysb::eback());
			else if (_Way != ios_base::beg)
				_Off = _BADOFF;

			if (0 <= _Off && _Off <= _Seekhigh - _Mysb::eback())
				_Mysb::pbump((int)(_Mysb::eback()
					- _Mysb::pptr() + _Off));	
			else
				_Off = _BADOFF;
			}

 
		else if (_Off != 0)

 

#line 272 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\sstream"

			_Off = _BADOFF;	
		return (pos_type(_Off));
		}

	virtual pos_type seekpos(pos_type _Ptr,
		ios_base::openmode _Mode = ios_base::in | ios_base::out)
		{	
		streamoff _Off = (streamoff)_Ptr;
		if (_Mysb::pptr() != 0 && _Seekhigh < _Mysb::pptr())
			_Seekhigh = _Mysb::pptr();	

		if (_Off == _BADOFF)
			;
		else if (_Mode & ios_base::in && _Mysb::gptr() != 0)
			{	
			if (0 <= _Off && _Off <= _Seekhigh - _Mysb::eback())
				{	
				_Mysb::gbump((int)(_Mysb::eback() - _Mysb::gptr() + _Off));
				if (_Mode & ios_base::out && _Mysb::pptr() != 0)
					_Mysb::setp(_Mysb::pbase(), _Mysb::gptr(),
						_Mysb::epptr());	
				}
			else
				_Off = _BADOFF;
			}
		else if (_Mode & ios_base::out && _Mysb::pptr() != 0)
			{	
			if (0 <= _Off && _Off <= _Seekhigh - _Mysb::eback())
				_Mysb::pbump((int)(_Mysb::eback()
					- _Mysb::pptr() + _Off));	
			else
				_Off = _BADOFF;
			}
		else
			_Off = _BADOFF;	
		return (streampos(_Off));
		}

	void _Init(const _Elem *_Ptr,
		size_t _Count, _Strstate _State)
		{	
		_Seekhigh = 0;
		_Mystate = _State;

		if (_Count != 0
			&& (_Mystate & (_Noread | _Constant)) != (_Noread | _Constant))
			{	
			_Elem *_Pnew = _Al.allocate(_Count);
			_Traits::copy(_Pnew, _Ptr, _Count);
			_Seekhigh = _Pnew + _Count;

			if (!(_Mystate & _Noread))
				_Mysb::setg(_Pnew, _Pnew,
					_Pnew + _Count);	
			if (!(_Mystate & _Constant))
				{	
				_Mysb::setp(_Pnew,
					(_Mystate & _Atend) ? _Pnew + _Count : _Pnew,
					_Pnew + _Count);
				if (_Mysb::gptr() == 0)
					_Mysb::setg(_Pnew, 0, _Pnew);
				}
			_Mystate |= _Allocated;
			}
		}

	void _Tidy()
		{	
		if (_Mystate & _Allocated)
			_Al.deallocate(_Mysb::eback(),
				(_Mysb::pptr() != 0 ? _Mysb::epptr()
					: _Mysb::egptr()) - _Mysb::eback());
		_Mysb::setg(0, 0, 0);
		_Mysb::setp(0, 0);
		_Seekhigh = 0;
		_Mystate &= ~_Allocated;
		}

private:
	enum
		{	
		_MINSIZE = 32};

	_Strstate _Getstate(ios_base::openmode _Mode)
		{	
		_Strstate _State = (_Strstate)0;
		if (!(_Mode & ios_base::in))
			_State |= _Noread;
		if (!(_Mode & ios_base::out))
			_State |= _Constant;
		if (_Mode & ios_base::app)
			_State |= _Append;
		if (_Mode & ios_base::ate)
			_State |= _Atend;
		return (_State);
		}

	_Elem *_Seekhigh;	
	_Strstate _Mystate;	
	allocator_type _Al;	
	};

	
template<class _Elem,
	class _Traits,
	class _Alloc> inline
	void swap(basic_stringbuf<_Elem, _Traits, _Alloc>& _Left,
		basic_stringbuf<_Elem, _Traits, _Alloc>& _Right)
	{	
	_Left.swap(_Right);
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	void swap(basic_stringbuf<_Elem, _Traits, _Alloc>& _Left,
		basic_stringbuf<_Elem, _Traits, _Alloc>&& _Right)
	{	
	typedef basic_stringbuf<_Elem, _Traits, _Alloc> _Myt;
	_Left.swap(::std:: forward<_Myt>(_Right));
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	void swap(basic_stringbuf<_Elem, _Traits, _Alloc>&& _Left,
		basic_stringbuf<_Elem, _Traits, _Alloc>& _Right)
	{	
	typedef basic_stringbuf<_Elem, _Traits, _Alloc> _Myt;
	_Right.swap(::std:: forward<_Myt>(_Left));
	}

		
template<class _Elem,
	class _Traits,
	class _Alloc>
	class basic_istringstream
		: public basic_istream<_Elem, _Traits>
	{	
public:
	typedef basic_istringstream<_Elem, _Traits, _Alloc> _Myt;
	typedef basic_istream<_Elem, _Traits> _Mybase;
	typedef _Alloc allocator_type;
	typedef basic_stringbuf<_Elem, _Traits, _Alloc> _Mysb;
	typedef basic_string<_Elem, _Traits, _Alloc> _Mystr;

	explicit basic_istringstream(ios_base::openmode _Mode = ios_base::in)
		: _Mybase(&_Stringbuffer),
			_Stringbuffer(_Mode | ios_base::in)
		{	
		}

	explicit basic_istringstream(const _Mystr& _Str,
		ios_base::openmode _Mode = ios_base::in)
		: _Mybase(&_Stringbuffer),
			_Stringbuffer(_Str, _Mode | ios_base::in)
		{	
		}

	basic_istringstream(_Myt&& _Right)
		: _Mybase(&_Stringbuffer)
		{	
		_Assign_rv(::std:: forward<_Myt>(_Right));
		}

	_Myt& operator=(_Myt&& _Right)
		{	
		_Assign_rv(::std:: forward<_Myt>(_Right));
		return (*this);
		}

	void _Assign_rv(_Myt&& _Right)
		{	
		if (this != &_Right)
			{	
			_Stringbuffer.str(_Mystr());
			this->swap(_Right);
			}
		}

	void swap(_Myt& _Right)
		{	
		if (this != &_Right)
			{	
			_Mybase::swap(_Right);
			_Stringbuffer.swap(_Right._Stringbuffer);
			}
		}

	void swap(_Myt&& _Right)
		{	
		_Assign_rv(::std:: forward<_Myt>(_Right));
		}

	virtual ~basic_istringstream()
		{	
		}

	_Mysb *rdbuf() const
		{	
		return ((_Mysb *)&_Stringbuffer);
		}

	_Mystr str() const
		{	
		return (_Stringbuffer.str());
		}

	void str(const _Mystr& _Newstr)
		{	
		_Stringbuffer.str(_Newstr);
		}

private:
	_Mysb _Stringbuffer;	
	};

	
template<class _Elem,
	class _Traits,
	class _Alloc> inline
	void swap(basic_istringstream<_Elem, _Traits, _Alloc>& _Left,
		basic_istringstream<_Elem, _Traits, _Alloc>& _Right)
	{	
	_Left.swap(_Right);
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	void swap(basic_istringstream<_Elem, _Traits, _Alloc>& _Left,
		basic_istringstream<_Elem, _Traits, _Alloc>&& _Right)
	{	
	typedef basic_istringstream<_Elem, _Traits, _Alloc> _Myt;
	_Left.swap(::std:: forward<_Myt>(_Right));
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	void swap(basic_istringstream<_Elem, _Traits, _Alloc>&& _Left,
		basic_istringstream<_Elem, _Traits, _Alloc>& _Right)
	{	
	typedef basic_istringstream<_Elem, _Traits> _Myt;
	_Right.swap(::std:: forward<_Myt>(_Left));
	}

		
template<class _Elem,
	class _Traits,
	class _Alloc>
	class basic_ostringstream
		: public basic_ostream<_Elem, _Traits>
	{	
public:
	typedef basic_ostringstream<_Elem, _Traits, _Alloc> _Myt;
	typedef basic_ostream<_Elem, _Traits> _Mybase;
	typedef _Alloc allocator_type;
	typedef basic_stringbuf<_Elem, _Traits, _Alloc> _Mysb;
	typedef basic_string<_Elem, _Traits, _Alloc> _Mystr;

	explicit basic_ostringstream(ios_base::openmode _Mode = ios_base::out)
		: _Mybase(&_Stringbuffer),
			_Stringbuffer(_Mode | ios_base::out)
		{	
		}

	explicit basic_ostringstream(const _Mystr& _Str,
		ios_base::openmode _Mode = ios_base::out)
		: _Mybase(&_Stringbuffer),
			_Stringbuffer(_Str, _Mode | ios_base::out)
		{	
		}

	basic_ostringstream(_Myt&& _Right)
		: _Mybase(&_Stringbuffer)
		{	
		_Assign_rv(::std:: forward<_Myt>(_Right));
		}

	_Myt& operator=(_Myt&& _Right)
		{	
		_Assign_rv(::std:: forward<_Myt>(_Right));
		return (*this);
		}

	void _Assign_rv(_Myt&& _Right)
		{	
		if (this != &_Right)
			{	
			_Stringbuffer.str(_Mystr());
			this->swap(_Right);
			}
		}

	void swap(_Myt& _Right)
		{	
		if (this != &_Right)
			{	
			_Mybase::swap(_Right);
			_Stringbuffer.swap(_Right._Stringbuffer);
			}
		}

	void swap(_Myt&& _Right)
		{	
		_Assign_rv(::std:: forward<_Myt>(_Right));
		}

	virtual ~basic_ostringstream()
		{	
		}

	_Mysb *rdbuf() const
		{	
		return ((_Mysb *)&_Stringbuffer);
		}

	_Mystr str() const
		{	
		return (_Stringbuffer.str());
		}

	void str(const _Mystr& _Newstr)
		{	
		_Stringbuffer.str(_Newstr);
		}

private:
	_Mysb _Stringbuffer;	
	};

	
template<class _Elem,
	class _Traits,
	class _Alloc> inline
	void swap(basic_ostringstream<_Elem, _Traits, _Alloc>& _Left,
		basic_ostringstream<_Elem, _Traits, _Alloc>& _Right)
	{	
	_Left.swap(_Right);
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	void swap(basic_ostringstream<_Elem, _Traits, _Alloc>& _Left,
		basic_ostringstream<_Elem, _Traits, _Alloc>&& _Right)
	{	
	typedef basic_ostringstream<_Elem, _Traits, _Alloc> _Myt;
	_Left.swap(::std:: forward<_Myt>(_Right));
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	void swap(basic_ostringstream<_Elem, _Traits, _Alloc>&& _Left,
		basic_ostringstream<_Elem, _Traits, _Alloc>& _Right)
	{	
	typedef basic_ostringstream<_Elem, _Traits> _Myt;
	_Right.swap(::std:: forward<_Myt>(_Left));
	}

		
template<class _Elem,
	class _Traits,
	class _Alloc>
	class basic_stringstream
		: public basic_iostream<_Elem, _Traits>
	{	
public:
	typedef basic_stringstream<_Elem, _Traits, _Alloc> _Myt;
	typedef basic_iostream<_Elem, _Traits> _Mybase;
	typedef _Elem char_type;
	typedef _Traits traits_type;
	typedef _Alloc allocator_type;
	typedef typename _Traits::int_type int_type;
	typedef typename _Traits::pos_type pos_type;
	typedef typename _Traits::off_type off_type;
	typedef basic_stringbuf<_Elem, _Traits, _Alloc> _Mysb;
	typedef basic_string<_Elem, _Traits, _Alloc> _Mystr;

	explicit basic_stringstream(ios_base::openmode _Mode =
		ios_base::in | ios_base::out)
		: _Mybase(&_Stringbuffer),
			_Stringbuffer(_Mode)
		{	
		}

	explicit basic_stringstream(const _Mystr& _Str,
		ios_base::openmode _Mode = ios_base::in | ios_base::out)
		: _Mybase(&_Stringbuffer),
			_Stringbuffer(_Str, _Mode)
		{	
		}

	basic_stringstream(_Myt&& _Right)
		: _Mybase(&_Stringbuffer)
		{	
		_Assign_rv(::std:: forward<_Myt>(_Right));
		}

	_Myt& operator=(_Myt&& _Right)
		{	
		_Assign_rv(::std:: forward<_Myt>(_Right));
		return (*this);
		}

	void _Assign_rv(_Myt&& _Right)
		{	
		if (this != &_Right)
			{	
			_Stringbuffer.str(_Mystr());
			this->swap(_Right);
			}
		}

	void swap(_Myt& _Right)
		{	
		if (this != &_Right)
			{	
			_Mybase::swap(_Right);
			_Stringbuffer.swap(_Right._Stringbuffer);
			}
		}

	void swap(_Myt&& _Right)
		{	
		_Assign_rv(::std:: forward<_Myt>(_Right));
		}

	virtual ~basic_stringstream()
		{	
		}

	_Mysb *rdbuf() const
		{	
		return ((_Mysb *)&_Stringbuffer);
		}

	_Mystr str() const
		{	
		return (_Stringbuffer.str());
		}

	void str(const _Mystr& _Newstr)
		{	
		_Stringbuffer.str(_Newstr);
		}

private:
	_Mysb _Stringbuffer;	
	};

	
template<class _Elem,
	class _Traits,
	class _Alloc> inline
	void swap(basic_stringstream<_Elem, _Traits, _Alloc>& _Left,
		basic_stringstream<_Elem, _Traits, _Alloc>& _Right)
	{	
	_Left.swap(_Right);
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	void swap(basic_stringstream<_Elem, _Traits, _Alloc>& _Left,
		basic_stringstream<_Elem, _Traits, _Alloc>&& _Right)
	{	
	typedef basic_stringstream<_Elem, _Traits, _Alloc> _Myt;
	_Left.swap(::std:: forward<_Myt>(_Right));
	}

template<class _Elem,
	class _Traits,
	class _Alloc> inline
	void swap(basic_stringstream<_Elem, _Traits, _Alloc>&& _Left,
		basic_stringstream<_Elem, _Traits, _Alloc>& _Right)
	{	
	typedef basic_ostringstream<_Elem, _Traits> _Myt;
	_Right.swap(::std:: forward<_Myt>(_Left));
	}
}
 #pragma warning(pop)
 #pragma pack(pop)

#line 760 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\sstream"
#line 761 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\sstream"





#line 25 "c:\\users\\blake\\documents\\github\\pct-reconstruction\\pCT_Reconstruction.h"
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\vector"

#pragma once







 #pragma pack(push,8)
 #pragma warning(push,3)

 #pragma warning(disable: 4244)

namespace std {
 

		
template<class _Myvec>
	class _Vector_const_iterator
		: public _Iterator012<random_access_iterator_tag,
			typename _Myvec::value_type,
			typename _Myvec::difference_type,
			typename _Myvec::const_pointer,
			typename _Myvec::const_reference,
			_Iterator_base>
	{	
public:
	typedef _Vector_const_iterator<_Myvec> _Myiter;
	typedef random_access_iterator_tag iterator_category;

	typedef typename _Myvec::pointer _Tptr;
	typedef typename _Myvec::value_type value_type;
	typedef typename _Myvec::difference_type difference_type;
	typedef typename _Myvec::const_pointer pointer;
	typedef typename _Myvec::const_reference reference;

	_Vector_const_iterator()
		: _Ptr(0)
		{	
		}

	_Vector_const_iterator(_Tptr _Parg, const _Container_base *_Pvector)
		: _Ptr(_Parg)
		{	
		this->_Adopt(_Pvector);
		}

	typedef pointer _Unchecked_type;

	_Myiter& _Rechecked(_Unchecked_type _Right)
		{	
		this->_Ptr = (_Tptr)_Right;
		return (*this);
		}

	_Unchecked_type _Unchecked() const
		{	
		return (_Unchecked_type(this->_Ptr));
		}

	reference operator*() const
		{	
 









#line 75 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\vector"





#line 81 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\vector"

		;

		return (*this->_Ptr);
		}

	pointer operator->() const
		{	
		return (&**this);
		}

	_Myiter& operator++()
		{	
 








#line 104 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\vector"




#line 109 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\vector"

		++this->_Ptr;
		return (*this);
		}

	_Myiter operator++(int)
		{	
		_Myiter _Tmp = *this;
		++*this;
		return (_Tmp);
		}

	_Myiter& operator--()
		{	
 








#line 133 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\vector"




#line 138 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\vector"

		--this->_Ptr;
		return (*this);
		}

	_Myiter operator--(int)
		{	
		_Myiter _Tmp = *this;
		--*this;
		return (_Tmp);
		}

	_Myiter& operator+=(difference_type _Off)
		{	
 








#line 162 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\vector"




#line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\vector"

		_Ptr += _Off;
		return (*this);
		}

	_Myiter operator+(difference_type _Off) const
		{	
		_Myiter _Tmp = *this;
		return (_Tmp += _Off);
		}

	_Myiter& operator-=(difference_type _Off)
		{	
		return (*this += -_Off);
		}

	_Myiter operator-(difference_type _Off) const
		{	
		_Myiter _Tmp = *this;
		return (_Tmp -= _Off);
		}

	difference_type operator-(const _Myiter& _Right) const
		{	
		_Compat(_Right);
		return (this->_Ptr - _Right._Ptr);
		}

	reference operator[](difference_type _Off) const
		{	
		return (*(*this + _Off));
		}

	bool operator==(const _Myiter& _Right) const
		{	
		_Compat(_Right);
		return (this->_Ptr == _Right._Ptr);
		}

	bool operator!=(const _Myiter& _Right) const
		{	
		return (!(*this == _Right));
		}

	bool operator<(const _Myiter& _Right) const
		{	
		_Compat(_Right);
		return (this->_Ptr < _Right._Ptr);
		}

	bool operator>(const _Myiter& _Right) const
		{	
		return (_Right < *this);
		}

	bool operator<=(const _Myiter& _Right) const
		{	
		return (!(_Right < *this));
		}

	bool operator>=(const _Myiter& _Right) const
		{	
		return (!(*this < _Right));
		}

 










#line 244 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\vector"






#line 251 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\vector"
	void _Compat(const _Myiter&) const
		{	
		}
 #line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\vector"

	_Tptr _Ptr;	
	};

template<class _Myvec> inline
	typename _Vector_const_iterator<_Myvec>::_Unchecked_type
		_Unchecked(_Vector_const_iterator<_Myvec> _Iter)
	{	
	return (_Iter._Unchecked());
	}

template<class _Myvec> inline
	_Vector_const_iterator<_Myvec>&
		_Rechecked(_Vector_const_iterator<_Myvec>& _Iter,
			typename _Vector_const_iterator<_Myvec>
				::_Unchecked_type _Right)
	{	
	return (_Iter._Rechecked(_Right));
	}

template<class _Myvec> inline
	_Vector_const_iterator<_Myvec> operator+(
		typename _Vector_const_iterator<_Myvec>::difference_type _Off,
		_Vector_const_iterator<_Myvec> _Next)
	{	
	return (_Next += _Off);
	}

		
template<class _Myvec>
	class _Vector_iterator
		: public _Vector_const_iterator<_Myvec>
	{	
public:
	typedef _Vector_iterator<_Myvec> _Myiter;
	typedef _Vector_const_iterator<_Myvec> _Mybase;
	typedef random_access_iterator_tag iterator_category;

	typedef typename _Myvec::value_type value_type;
	typedef typename _Myvec::difference_type difference_type;
	typedef typename _Myvec::pointer pointer;
	typedef typename _Myvec::reference reference;

	_Vector_iterator()
		{	
		}

	_Vector_iterator(pointer _Parg, const _Container_base *_Pvector)
		: _Mybase(_Parg, _Pvector)
		{	
		}

	typedef pointer _Unchecked_type;

	_Myiter& _Rechecked(_Unchecked_type _Right)
		{	
		this->_Ptr = _Right;
		return (*this);
		}

	_Unchecked_type _Unchecked() const
		{	
		return (_Unchecked_type(this->_Ptr));
		}

	reference operator*() const
		{	
		return ((reference)**(_Mybase *)this);
		}

	pointer operator->() const
		{	
		return (&**this);
		}

	_Myiter& operator++()
		{	
		++*(_Mybase *)this;
		return (*this);
		}

	_Myiter operator++(int)
		{	
		_Myiter _Tmp = *this;
		++*this;
		return (_Tmp);
		}

	_Myiter& operator--()
		{	
		--*(_Mybase *)this;
		return (*this);
		}

	_Myiter operator--(int)
		{	
		_Myiter _Tmp = *this;
		--*this;
		return (_Tmp);
		}

	_Myiter& operator+=(difference_type _Off)
		{	
		*(_Mybase *)this += _Off;
		return (*this);
		}

	_Myiter operator+(difference_type _Off) const
		{	
		_Myiter _Tmp = *this;
		return (_Tmp += _Off);
		}

	_Myiter& operator-=(difference_type _Off)
		{	
		return (*this += -_Off);
		}

	_Myiter operator-(difference_type _Off) const
		{	
		_Myiter _Tmp = *this;
		return (_Tmp -= _Off);
		}

	difference_type operator-(const _Mybase& _Right) const
		{	
		return (*(_Mybase *)this - _Right);
		}

	reference operator[](difference_type _Off) const
		{	
		return (*(*this + _Off));
		}
	};

template<class _Myvec> inline
	typename _Vector_iterator<_Myvec>::_Unchecked_type
		_Unchecked(_Vector_iterator<_Myvec> _Iter)
	{	
	return (_Iter._Unchecked());
	}

template<class _Myvec> inline
	_Vector_iterator<_Myvec>&
		_Rechecked(_Vector_iterator<_Myvec>& _Iter,
			typename _Vector_iterator<_Myvec>
				::_Unchecked_type _Right)
	{	
	return (_Iter._Rechecked(_Right));
	}

template<class _Myvec> inline
	_Vector_iterator<_Myvec> operator+(
		typename _Vector_iterator<_Myvec>::difference_type _Off,
		_Vector_iterator<_Myvec> _Next)
	{	
	return (_Next += _Off);
	}

		
template<class _Ty,
	class _Alloc>
	class _Vector_val
		: public _Container_base
	{	
public:
	typedef typename _Alloc::template rebind<_Ty>::other _Alty;

 
	_Vector_val(_Alloc _Al = _Alloc())
		: _Alval(_Al)
		{	
		_Myfirst = 0;
		_Mylast = 0;
		_Myend = 0;
		}

	~_Vector_val()
		{	
		}

 























#line 461 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\vector"

	typedef typename _Alty::size_type size_type;
	typedef typename _Alty::difference_type difference_type;
	typedef typename _Alty::pointer pointer;
	typedef typename _Alty::const_pointer const_pointer;
	typedef typename _Alty::reference reference;
	typedef typename _Alty::const_reference const_reference;
	typedef typename _Alty::value_type value_type;

	pointer _Myfirst;	
	pointer _Mylast;	
	pointer _Myend;	
	_Alty _Alval;	
	};

		
template<class _Ty,
	class _Ax = allocator<_Ty> >
	class vector
		: public _Vector_val<_Ty, _Ax>
	{	
public:
	typedef vector<_Ty, _Ax> _Myt;
	typedef _Vector_val<_Ty, _Ax> _Mybase;
	typedef typename _Mybase::_Alty _Alloc;

	typedef _Alloc allocator_type;
	typedef typename _Alloc::size_type size_type;
	typedef typename _Alloc::difference_type difference_type;
	typedef typename _Alloc::pointer pointer;
	typedef typename _Alloc::const_pointer const_pointer;
	typedef typename _Alloc::reference reference;
	typedef typename _Alloc::const_reference const_reference;
	typedef typename _Alloc::value_type value_type;

 
 

	typedef _Vector_iterator<_Mybase> iterator;
	typedef _Vector_const_iterator<_Mybase> const_iterator;

	typedef ::std:: reverse_iterator<iterator> reverse_iterator;
	typedef ::std:: reverse_iterator<const_iterator> const_reverse_iterator;

	vector()
		: _Mybase()
		{	
		}

	explicit vector(const _Alloc& _Al)
		: _Mybase(_Al)
		{	
		}

	explicit vector(size_type _Count)
		: _Mybase()
		{	
		resize(_Count);
		}

	vector(size_type _Count, const _Ty& _Val)
		: _Mybase()
		{	
		_Construct_n(_Count, ::std:: addressof(_Val));
		}

	vector(size_type _Count, const _Ty& _Val, const _Alloc& _Al)
		: _Mybase(_Al)
		{	
		_Construct_n(_Count, ::std:: addressof(_Val));
		}

	vector(const _Myt& _Right)
		: _Mybase(_Right._Alval)
		{	
		if (_Buy(_Right.size()))
			try {
			this->_Mylast = _Ucopy(_Right.begin(), _Right.end(),
				this->_Myfirst);
			} catch (...) {
			_Tidy();
			throw;
			}
		}

	template<class _Iter>
		vector(_Iter _First, _Iter _Last)
		: _Mybase()
		{	
		_Construct(_First, _Last, _Iter_cat(_First));
		}

	template<class _Iter>
		vector(_Iter _First, _Iter _Last, const _Alloc& _Al)
		: _Mybase(_Al)
		{	
		_Construct(_First, _Last, _Iter_cat(_First));
		}

	template<class _Iter>
		void _Construct(_Iter _Count, _Iter _Val, _Int_iterator_tag)
		{	
		size_type _Size = (size_type)_Count;
		_Ty _Newval = (_Ty)_Val;
		_Construct_n(_Size, ::std:: addressof(_Newval));
		}

	template<class _Iter>
		void _Construct(_Iter _First,
			_Iter _Last, input_iterator_tag)
		{	
		try {
		insert(begin(), _First, _Last);
		} catch (...) {
		_Tidy();
		throw;
		}
		}

	void _Construct_n(size_type _Count, const _Ty *_Pval)
		{	
		if (_Buy(_Count))
			{	
			try {
			this->_Mylast = _Ufill(this->_Myfirst, _Count, _Pval);
			} catch (...) {
			_Tidy();
			throw;
			}
			}
		}

	vector(_Myt&& _Right)
		: _Mybase(_Right._Alval)
		{	
		_Assign_rv(::std:: forward<_Myt>(_Right));
		}

	_Myt& operator=(_Myt&& _Right)
		{	
		_Assign_rv(::std:: forward<_Myt>(_Right));
		return (*this);
		}

	void _Assign_rv(_Myt&& _Right)
		{	
		if (this == &_Right)
			;
		else if (get_allocator() != _Right.get_allocator())
			{	
			clear();
			for (iterator _Next = _Right.begin(); _Next != _Right.end();
				++_Next)
				push_back(::std:: forward<_Ty>(*_Next));
			}
		else
			{	
			_Tidy();
			this->_Swap_all((_Myt&)_Right);
			this->_Myfirst = _Right._Myfirst;
			this->_Mylast = _Right._Mylast;
			this->_Myend = _Right._Myend;

			_Right._Myfirst = 0;
			_Right._Mylast = 0;
			_Right._Myend = 0;
			}
		}

	void push_back(_Ty&& _Val)
		{	
		if (_Inside(::std:: addressof(_Val)))
			{	
			size_type _Idx = ::std:: addressof(_Val) - this->_Myfirst;
			if (this->_Mylast == this->_Myend)
				_Reserve(1);
			_Orphan_range(this->_Mylast, this->_Mylast);
			_Cons_val(this->_Alval,
				this->_Mylast,
				::std:: forward<_Ty>(this->_Myfirst[_Idx]));
			++this->_Mylast;
			}
		else
			{	
			if (this->_Mylast == this->_Myend)
				_Reserve(1);
			_Orphan_range(this->_Mylast, this->_Mylast);
			_Cons_val(this->_Alval,
				this->_Mylast,
				::std:: forward<_Ty>(_Val));
			++this->_Mylast;
			}
		}

	void emplace_back(_Ty&& _Val)
		{	
		push_back(::std:: forward<_Ty>(_Val));
		}

	template<class _Valty>
		void emplace_back(_Valty&& _Val)
		{	
		if (this->_Mylast == this->_Myend)
			_Reserve(1);
		_Orphan_range(this->_Mylast, this->_Mylast);
		_Cons_val(this->_Alval,
			this->_Mylast,
			::std:: forward<_Valty>(_Val));
		++this->_Mylast;
		}

	template<class _Valty>
		iterator insert(const_iterator _Where, _Valty&& _Val)
		{	
		return (emplace(_Where, ::std:: forward<_Valty>(_Val)));
		}

	template<class _Valty>
		iterator emplace(const_iterator _Where, _Valty&& _Val)
		{	
		size_type _Off = (_Where)._Ptr - this->_Myfirst;

 


#line 687 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\vector"

		emplace_back(::std:: forward<_Valty>(_Val));
		::std:: rotate(begin() + _Off, end() - 1, end());
		return (begin() + _Off);
		}

	void swap(_Myt&& _Right)
		{	
		if (this != &_Right)
			{	
			clear();
			this->_Swap_all((_Myt&)_Right);
			_Assign_rv(::std:: forward<_Myt>(_Right));
			}
		}

	~vector()
		{	
		_Tidy();
		}

	_Myt& operator=(const _Myt& _Right)
		{	
		if (this != &_Right)
			{	
			this->_Orphan_all();

			if (_Right.size() == 0)
				clear();	
			else if (_Right.size() <= size())
				{	
				pointer _Ptr = ::std:: _Copy_impl(_Right._Myfirst, _Right._Mylast,
					this->_Myfirst);	
				_Destroy(_Ptr, this->_Mylast);	
				this->_Mylast = this->_Myfirst + _Right.size();
				}
			else if (_Right.size() <= capacity())
				{	
				pointer _Ptr = _Right._Myfirst + size();
				::std:: _Copy_impl(_Right._Myfirst, _Ptr, this->_Myfirst);
				this->_Mylast = _Ucopy(_Ptr, _Right._Mylast, this->_Mylast);
				}
			else
				{	
				if (this->_Myfirst != 0)
					{	
					_Destroy(this->_Myfirst, this->_Mylast);
					this->_Alval.deallocate(this->_Myfirst,
						this->_Myend - this->_Myfirst);
					}
				if (_Buy(_Right.size()))
					this->_Mylast = _Ucopy(_Right._Myfirst, _Right._Mylast,
						this->_Myfirst);
				}
			}
		return (*this);
		}

	void reserve(size_type _Count)
		{	
		if (max_size() < _Count)
			_Xlen();	
		else if (capacity() < _Count)
			{	
			pointer _Ptr = this->_Alval.allocate(_Count);

			try {
			_Umove(this->_Myfirst, this->_Mylast, _Ptr);
			} catch (...) {
			this->_Alval.deallocate(_Ptr, _Count);
			throw;
			}

			size_type _Size = size();
			if (this->_Myfirst != 0)
				{	
				_Destroy(this->_Myfirst, this->_Mylast);
				this->_Alval.deallocate(this->_Myfirst,
					this->_Myend - this->_Myfirst);
				}

			this->_Orphan_all();
			this->_Myend = _Ptr + _Count;
			this->_Mylast = _Ptr + _Size;
			this->_Myfirst = _Ptr;
			}
		}

	size_type capacity() const
		{	
		return (this->_Myend - this->_Myfirst);
		}

	iterator begin()
		{	
		return (iterator(this->_Myfirst, this));
		}

	const_iterator begin() const
		{	
		return (const_iterator(this->_Myfirst, this));
		}

	iterator end()
		{	
		return (iterator(this->_Mylast, this));
		}

	const_iterator end() const
		{	
		return (const_iterator(this->_Mylast, this));
		}

	iterator _Make_iter(const_iterator _Where) const
		{	
		return (iterator(_Where._Ptr, this));
		}

	reverse_iterator rbegin()
		{	
		return (reverse_iterator(end()));
		}

	const_reverse_iterator rbegin() const
		{	
		return (const_reverse_iterator(end()));
		}

	reverse_iterator rend()
		{	
		return (reverse_iterator(begin()));
		}

	const_reverse_iterator rend() const
		{	
		return (const_reverse_iterator(begin()));
		}

 
	const_iterator cbegin() const
		{	
		return (((const _Myt *)this)->begin());
		}

	const_iterator cend() const
		{	
		return (((const _Myt *)this)->end());
		}

	const_reverse_iterator crbegin() const
		{	
		return (((const _Myt *)this)->rbegin());
		}

	const_reverse_iterator crend() const
		{	
		return (((const _Myt *)this)->rend());
		}

	void shrink_to_fit()
		{	
		if (size() < capacity())
			{	
			_Myt _Tmp(*this);
			swap(_Tmp);
			}
		}
 #line 855 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\vector"

	void resize(size_type _Newsize)
		{	
		if (_Newsize < size())
			erase(begin() + _Newsize, end());
		else if (size() < _Newsize)
			{	
			_Reserve(_Newsize - size());
			_Uninitialized_default_fill_n(this->_Mylast, _Newsize - size(),
				(_Ty *)0, this->_Alval);
			this->_Mylast += _Newsize - size();
			}
		}

	void resize(size_type _Newsize, _Ty _Val)
		{	
		if (size() < _Newsize)
			_Insert_n(end(), _Newsize - size(), _Val);
		else if (_Newsize < size())
			erase(begin() + _Newsize, end());
		}

	size_type size() const
		{	
		return (this->_Mylast - this->_Myfirst);
		}

	size_type max_size() const
		{	
		return (this->_Alval.max_size());
		}

	bool empty() const
		{	
		return (this->_Myfirst == this->_Mylast);
		}

	_Alloc get_allocator() const
		{	
		return (this->_Alval);
		}

	const_reference at(size_type _Pos) const
		{	
		if (size() <= _Pos)
			_Xran();
		return (*(this->_Myfirst + _Pos));
		}

	reference at(size_type _Pos)
		{	
		if (size() <= _Pos)
			_Xran();
		return (*(this->_Myfirst + _Pos));
		}

	const_reference operator[](size_type _Pos) const
		{	
 






#line 921 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\vector"

#line 923 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\vector"

		return (*(this->_Myfirst + _Pos));
		}

	reference operator[](size_type _Pos)
		{	
 






#line 937 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\vector"

#line 939 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\vector"

		return (*(this->_Myfirst + _Pos));
		}

 
	pointer data()
		{	
		return (this->_Myfirst);
		}

	const_pointer data() const
		{	
		return (this->_Myfirst);
		}
 #line 954 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\vector"

	reference front()
		{	
		return (*begin());
		}

	const_reference front() const
		{	
		return (*begin());
		}

	reference back()
		{	
		return (*(end() - 1));
		}

	const_reference back() const
		{	
		return (*(end() - 1));
		}

	void push_back(const _Ty& _Val)
		{	
		if (_Inside(::std:: addressof(_Val)))
			{	
			size_type _Idx = ::std:: addressof(_Val) - this->_Myfirst;
			if (this->_Mylast == this->_Myend)
				_Reserve(1);
			_Orphan_range(this->_Mylast, this->_Mylast);
			_Cons_val(this->_Alval,
				this->_Mylast,
				this->_Myfirst[_Idx]);
			++this->_Mylast;
			}
		else
			{	
			if (this->_Mylast == this->_Myend)
				_Reserve(1);
			_Orphan_range(this->_Mylast, this->_Mylast);
			_Cons_val(this->_Alval,
				this->_Mylast,
				_Val);
			++this->_Mylast;
			}
		}

 













#line 1015 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\vector"
	void pop_back()
		{	
		if (!empty())
			{	
			_Dest_val(this->_Alval,
				this->_Mylast - 1);
			--this->_Mylast;
			}
		}
 #line 1025 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\vector"

	template<class _Iter>
		void assign(_Iter _First, _Iter _Last)
		{	
		_Assign(_First, _Last, _Iter_cat(_First));
		}

	template<class _Iter>
		void _Assign(_Iter _Count, _Iter _Val, _Int_iterator_tag)
		{	
		_Assign_n((size_type)_Count, (_Ty)_Val);
		}

	template<class _Iter>
		void _Assign(_Iter _First, _Iter _Last, input_iterator_tag)
		{	
		erase(begin(), end());
		insert(begin(), _First, _Last);
		}

	void assign(size_type _Count, const _Ty& _Val)
		{	
		_Assign_n(_Count, _Val);
		}

	iterator insert(const_iterator _Where, const _Ty& _Val)
		{	
		size_type _Off = size() == 0 ? 0 : _Where - begin();
		_Insert_n(_Where, (size_type)1, _Val);
		return (begin() + _Off);
		}

	void insert(const_iterator _Where, size_type _Count, const _Ty& _Val)
		{	
		_Insert_n(_Where, _Count, _Val);
		}

	template<class _Iter>
		void insert(const_iterator _Where, _Iter _First, _Iter _Last)
		{	
		_Insert(_Where, _First, _Last, _Iter_cat(_First));
		}

	template<class _Iter>
		void _Insert(const_iterator _Where, _Iter _First, _Iter _Last,
			_Int_iterator_tag)
		{	
		_Insert_n(_Where, (size_type)_First, (_Ty)_Last);
		}

	template<class _Iter>
		void _Insert(const_iterator _Where, _Iter _First, _Iter _Last,
			input_iterator_tag)
		{	
		size_type _Off = (_Where)._Ptr - this->_Myfirst;

 


#line 1085 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\vector"

		if (_First != _Last)
			{	
			size_type _Oldsize = size();

			try {
			for (; _First != _Last; ++_First)
				push_back(*_First);	

			} catch (...) {
			erase(begin() + _Oldsize, end());
			throw;
			}

			::std:: rotate(begin() + _Off, begin() + _Oldsize, end());
			}
		}

	template<class _Iter>
		void _Insert(const_iterator _Where,
			_Iter _First, _Iter _Last, forward_iterator_tag)
		{	
 





#line 1114 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\vector"

		size_type _Count = 0;
		_Distance(_First, _Last, _Count);

		if (_Count == 0)
			;
		else if (max_size() - size() < _Count)
			_Xlen();	
		else if (capacity() < size() + _Count)
			{	
			size_type _Capacity = _Grow_to(size() + _Count);
			pointer _Newvec = this->_Alval.allocate(_Capacity);
			pointer _Ptr = _Newvec;

			try {
			_Ptr = _Umove(this->_Myfirst, (_Where)._Ptr,
				_Newvec);	
			_Ptr = _Ucopy(_First, _Last, _Ptr);	
			_Umove((_Where)._Ptr, this->_Mylast,
				_Ptr);	
			} catch (...) {
			_Destroy(_Newvec, _Ptr);
			this->_Alval.deallocate(_Newvec, _Capacity);
			throw;
			}

			_Count += size();
			if (this->_Myfirst != 0)
				{	
				_Destroy(this->_Myfirst, this->_Mylast);
				this->_Alval.deallocate(this->_Myfirst,
					this->_Myend - this->_Myfirst);
				}

			this->_Orphan_all();
			this->_Myend = _Newvec + _Capacity;
			this->_Mylast = _Newvec + _Count;
			this->_Myfirst = _Newvec;
			}
		else
			{	
			_Ucopy(_First, _Last, this->_Mylast);
			::std:: rotate((_Where)._Ptr, this->_Mylast,
				this->_Mylast + _Count);
			this->_Mylast += _Count;
			_Orphan_range((_Where)._Ptr, this->_Mylast);
			}
		}

 













#line 1178 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\vector"
	iterator erase(const_iterator _Where)
		{	
		_Move((_Where)._Ptr + 1, this->_Mylast,
			(_Where)._Ptr);
		_Destroy(this->_Mylast - 1, this->_Mylast);
		--this->_Mylast;
		return (_Make_iter(_Where));
		}
 #line 1187 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\vector"

	iterator erase(const_iterator _First_arg,
		const_iterator _Last_arg)
		{	
		iterator _First = _Make_iter(_First_arg);
		iterator _Last = _Make_iter(_Last_arg);

		if (_First != _Last)
			{	
 








#line 1206 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\vector"
			pointer _Ptr = _Move((_Last)._Ptr, this->_Mylast,
				(_First)._Ptr);
 #line 1209 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\vector"

			_Destroy(_Ptr, this->_Mylast);
			this->_Mylast = _Ptr;
			}
		return (_Make_iter(_First));
		}

	void clear()
		{	
		erase(begin(), end());
		}

	void swap(_Myt& _Right)
		{	
		if (this == &_Right)
			;	
		else if (this->_Alval == _Right._Alval)
			{	
			this->_Swap_all(_Right);
			::std:: swap(this->_Myfirst, _Right._Myfirst);
			::std:: swap(this->_Mylast, _Right._Mylast);
			::std:: swap(this->_Myend, _Right._Myend);
			}
		else
			{	
			_Myt _Ts = _Move(*this);

			*this = _Move(_Right);
			_Right = _Move(_Ts);
			}
		}

protected:
	void _Assign_n(size_type _Count, const _Ty& _Val)
		{	
		_Ty _Tmp = _Val;	
		erase(begin(), end());
		insert(begin(), _Count, _Tmp);
		}

	bool _Buy(size_type _Capacity)
		{	
		this->_Myfirst = 0;
		this->_Mylast = 0;
		this->_Myend = 0;

		if (_Capacity == 0)
			return (false);
		else if (max_size() < _Capacity)
			_Xlen();	
		else
			{	
			this->_Myfirst = this->_Alval.allocate(_Capacity);
			this->_Mylast = this->_Myfirst;
			this->_Myend = this->_Myfirst + _Capacity;
			}
		return (true);
		}

	void _Destroy(pointer _First, pointer _Last)
		{	
		_Destroy_range(_First, _Last, this->_Alval);
		}

	size_type _Grow_to(size_type _Count) const
		{	
		size_type _Capacity = capacity();

		_Capacity = max_size() - _Capacity / 2 < _Capacity
			? 0 : _Capacity + _Capacity / 2;	
		if (_Capacity < _Count)
			_Capacity = _Count;
		return (_Capacity);
		}

	bool _Inside(const _Ty *_Ptr) const
		{	
		return (_Ptr < this->_Mylast && this->_Myfirst <= _Ptr);
		}

	void _Reserve(size_type _Count)
		{	
		size_type _Size = size();
		if (max_size() - _Count < _Size)
			_Xlen();
		else if ((_Size += _Count) <= capacity())
			;
		else
			reserve(_Grow_to(_Size));
		}

	void _Tidy()
		{	
		if (this->_Myfirst != 0)
			{	
			this->_Orphan_all();
			_Destroy(this->_Myfirst, this->_Mylast);
			this->_Alval.deallocate(this->_Myfirst,
				this->_Myend - this->_Myfirst);
			}
		this->_Myfirst = 0;
		this->_Mylast = 0;
		this->_Myend = 0;
		}

	template<class _Iter>
		pointer _Ucopy(_Iter _First, _Iter _Last, pointer _Ptr)
		{	
		return (_Uninitialized_copy(_First, _Last,
			_Ptr, this->_Alval));
		}

	template<class _Iter>
		pointer _Umove(_Iter _First, _Iter _Last, pointer _Ptr)
		{	
		return (_Uninitialized_move(_First, _Last,
			_Ptr, this->_Alval));
		}

	void _Insert_n(const_iterator _Where,
		size_type _Count, const _Ty& _Val)
		{	
 




#line 1337 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\vector"

		if (_Count == 0)
			;
		else if (max_size() - size() < _Count)
			_Xlen();	
		else if (capacity() < size() + _Count)
			{	
			size_type _Capacity = _Grow_to(size() + _Count);
			pointer _Newvec = this->_Alval.allocate(_Capacity);
			size_type _Whereoff = (_Where)._Ptr - this->_Myfirst;
			int _Ncopied = 0;

			try {
			_Ufill(_Newvec + _Whereoff, _Count,
				::std:: addressof(_Val));	
			++_Ncopied;
			_Umove(this->_Myfirst, (_Where)._Ptr,
				_Newvec);	
			++_Ncopied;
			_Umove((_Where)._Ptr, this->_Mylast,
				_Newvec + (_Whereoff + _Count));	
			} catch (...) {
			if (1 < _Ncopied)
				_Destroy(_Newvec, _Newvec + _Whereoff);
			if (0 < _Ncopied)
				_Destroy(_Newvec + _Whereoff, _Newvec + _Whereoff + _Count);
			this->_Alval.deallocate(_Newvec, _Capacity);
			throw;
			}

			_Count += size();
			if (this->_Myfirst != 0)
				{	
				_Destroy(this->_Myfirst, this->_Mylast);
				this->_Alval.deallocate(this->_Myfirst,
					this->_Myend - this->_Myfirst);
				}

			this->_Orphan_all();
			this->_Myend = _Newvec + _Capacity;
			this->_Mylast = _Newvec + _Count;
			this->_Myfirst = _Newvec;
			}
		else if ((size_type)(this->_Mylast - (_Where)._Ptr)
			< _Count)
			{	
			_Ty _Tmp = _Val;	

			_Umove((_Where)._Ptr, this->_Mylast,
				(_Where)._Ptr + _Count);	

			try {
			_Ufill(this->_Mylast,
				_Count - (this->_Mylast - (_Where)._Ptr),
				::std:: addressof(_Tmp));	
			} catch (...) {
			_Destroy((_Where)._Ptr + _Count,
				this->_Mylast + _Count);
			throw;
			}

			this->_Mylast += _Count;
			_Orphan_range((_Where)._Ptr, this->_Mylast);
			::std:: fill((_Where)._Ptr, this->_Mylast - _Count,
				_Tmp);	
			}
		else
			{	
			_Ty _Tmp = _Val;	

			pointer _Oldend = this->_Mylast;
			this->_Mylast = _Umove(_Oldend - _Count, _Oldend,
				this->_Mylast);	

			_Orphan_range((_Where)._Ptr, this->_Mylast);
			::std:: _Copy_backward((_Where)._Ptr, _Oldend - _Count,
				_Oldend);	
			::std:: fill((_Where)._Ptr,
				(_Where)._Ptr + _Count, _Tmp);	
			}
		}

	pointer _Ufill(pointer _Ptr, size_type _Count, const _Ty *_Pval)
		{	
		_Uninitialized_fill_n(_Ptr, _Count, _Pval, this->_Alval);
		return (_Ptr + _Count);
		}

	__declspec(noreturn) void _Xlen() const
		{	
		_Xlength_error("vector<T> too long");
		}

	__declspec(noreturn) void _Xran() const
		{	
		_Xout_of_range("invalid vector<T> subscript");
		}

 















#line 1452 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\vector"
	void _Orphan_range(pointer, pointer) const
		{	
		}
 #line 1456 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\vector"
	};

		

template<class _Ty,
	class _Alloc> inline
	void swap(vector<_Ty, _Alloc>& _Left, vector<_Ty, _Alloc>& _Right)
	{	
	_Left.swap(_Right);
	}

template<class _Ty,
	class _Alloc> inline
	void swap(vector<_Ty, _Alloc>& _Left, vector<_Ty, _Alloc>&& _Right)
	{	
	typedef vector<_Ty, _Alloc> _Myt;
	_Left.swap(::std:: forward<_Myt>(_Right));
	}

template<class _Ty,
	class _Alloc> inline
	void swap(vector<_Ty, _Alloc>&& _Left, vector<_Ty, _Alloc>& _Right)
	{	
	typedef vector<_Ty, _Alloc> _Myt;
	_Right.swap(::std:: forward<_Myt>(_Left));
	}

template<class _Ty,
	class _Alloc> inline
	bool operator==(const vector<_Ty, _Alloc>& _Left,
		const vector<_Ty, _Alloc>& _Right)
	{	
	return (_Left.size() == _Right.size()
		&& equal(_Left.begin(), _Left.end(), _Right.begin()));
	}

template<class _Ty,
	class _Alloc> inline
	bool operator!=(const vector<_Ty, _Alloc>& _Left,
		const vector<_Ty, _Alloc>& _Right)
	{	
	return (!(_Left == _Right));
	}

template<class _Ty,
	class _Alloc> inline
	bool operator<(const vector<_Ty, _Alloc>& _Left,
		const vector<_Ty, _Alloc>& _Right)
	{	
	return (lexicographical_compare(_Left.begin(), _Left.end(),
		_Right.begin(), _Right.end()));
	}

template<class _Ty,
	class _Alloc> inline
	bool operator>(const vector<_Ty, _Alloc>& _Left,
		const vector<_Ty, _Alloc>& _Right)
	{	
	return (_Right < _Left);
	}

template<class _Ty,
	class _Alloc> inline
	bool operator<=(const vector<_Ty, _Alloc>& _Left,
		const vector<_Ty, _Alloc>& _Right)
	{	
	return (!(_Right < _Left));
	}

template<class _Ty,
	class _Alloc> inline
	bool operator>=(const vector<_Ty, _Alloc>& _Left,
		const vector<_Ty, _Alloc>& _Right)
	{	
	return (!(_Left < _Right));
	}




typedef unsigned int _Vbase;	
const int _VBITS = 8 * sizeof (_Vbase);	

		
template<class _Alloc>
	class _Vb_iter_base
		: public _Iterator012<random_access_iterator_tag,
			_Bool,
			typename _Alloc::difference_type,
			bool *,
			bool,
			_Iterator_base>
	{	
public:
	typedef typename _Alloc::size_type _Sizet;
	typedef vector<_Bool, _Alloc> _Mycont;

	_Vb_iter_base()
		: _Myptr(0), _Myoff(0)
		{	
		}

	_Vb_iter_base(const _Vbase *_Ptr, _Sizet _Off,
		const _Container_base *_Mypvbool)
		: _Myptr(_Ptr), _Myoff(_Off)
		{	
		this->_Adopt(_Mypvbool);
		}

	int _Valid(_Sizet _Inc) const
		{	
 







#line 1576 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\vector"

		return (-1);
 #line 1579 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\vector"
		}

	const _Vbase *_Myptr;
	_Sizet _Myoff;
	};

		
template<class _Alloc>
	class _Vb_reference
		: public _Vb_iter_base<_Alloc>
	{	
public:
	typedef _Vb_iter_base<_Alloc> _Mybase;
	typedef _Vb_reference<_Alloc> _Mytype;

	_Vb_reference()
		{	
		}

	_Vb_reference(const _Mybase& _Right)
		: _Mybase(_Right._Myptr, _Right._Myoff, _Right._Getcont())
		{	
		}

	_Mytype& operator=(const _Mytype& _Right)
		{	
		return (*this = bool(_Right));
		}

	_Mytype& operator=(bool _Val)
		{	
		if (_Val)
			*(_Vbase *)_Getptr() |= _Mask();
		else
			*(_Vbase *)_Getptr() &= ~_Mask();
		return (*this);
		}

	void flip()
		{	
		*(_Vbase *)_Getptr() ^= _Mask();
		}

	bool operator~() const
		{	
		return (!bool(*this));
		}

	operator bool() const
		{	
		return ((*_Getptr() & _Mask()) != 0);
		}

	const _Vbase *_Getptr() const
		{	
 








#line 1644 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\vector"


#line 1647 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\vector"

		return (this->_Myptr);
		}

protected:
	_Vbase _Mask() const
		{	
		return ((_Vbase)(1 << this->_Myoff));
		}
	};

template<class _Alloc>
	void swap(_Vb_reference<_Alloc> _Left,
		_Vb_reference<_Alloc> _Right)
	{	
	bool _Val = _Left;	
	_Left = _Right;
	_Right = _Val;
	}

		
template<class _Alloc>
	class _Vb_const_iterator
		: public _Vb_iter_base<_Alloc>
	{	
public:
	typedef _Vb_iter_base<_Alloc> _Mybase;
	typedef _Vb_const_iterator<_Alloc> _Mytype;

	typedef _Vb_reference<_Alloc> _Reft;
	typedef bool const_reference;

	typedef random_access_iterator_tag iterator_category;
	typedef _Bool value_type;
	typedef typename _Alloc::size_type size_type;
	typedef typename _Alloc::difference_type difference_type;
	typedef const_reference *pointer;
	typedef const_reference reference;

	_Vb_const_iterator()
		{	
		}

	_Vb_const_iterator(const _Vbase *_Ptr, const _Container_base *_Mypvbool)
		: _Mybase(_Ptr, 0, _Mypvbool)
		{	
		}

	const_reference operator*() const
		{	
		return (_Reft(*this));
		}

	_Mytype& operator++()
		{	
		_Inc();
		return (*this);
		}

	_Mytype operator++(int)
		{	
		_Mytype _Tmp = *this;
		++*this;
		return (_Tmp);
		}

	_Mytype& operator--()
		{	
		_Dec();
		return (*this);
		}

	_Mytype operator--(int)
		{	
		_Mytype _Tmp = *this;
		--*this;
		return (_Tmp);
		}

	_Mytype& operator+=(difference_type _Off)
		{	
		if (_Off < 0 && this->_Myoff < 0 - (size_type)_Off)
			{	
			this->_Myoff += _Off;
			this->_Myptr -= 1 + ((size_type)(-1) - this->_Myoff) / _VBITS;
			this->_Myoff %= _VBITS;
			}
		else
			{	
			this->_Myoff += _Off;
			this->_Myptr += this->_Myoff / _VBITS;
			this->_Myoff %= _VBITS;
			}
		return (*this);
		}

	_Mytype operator+(difference_type _Off) const
		{	
		_Mytype _Tmp = *this;
		return (_Tmp += _Off);
		}

	_Mytype& operator-=(difference_type _Off)
		{	
		return (*this += -_Off);
		}

	_Mytype operator-(difference_type _Off) const
		{	
		_Mytype _Tmp = *this;
		return (_Tmp -= _Off);
		}

	difference_type operator-(
		const _Mytype& _Right) const
		{	
		_Compat(_Right);
		return (_VBITS * (this->_Myptr - _Right._Myptr)
			+ (difference_type)this->_Myoff
			- (difference_type)_Right._Myoff);
		}

	const_reference operator[](difference_type _Off) const
		{	
		return (*(*this + _Off));
		}

	bool operator==(const _Mytype& _Right) const
		{	
		_Compat(_Right);
		return (this->_Myptr == _Right._Myptr
			&& this->_Myoff == _Right._Myoff);
		}

	bool operator!=(const _Mytype& _Right) const
		{	
		return (!(*this == _Right));
		}

	bool operator<(const _Mytype& _Right) const
		{	
		_Compat(_Right);
		return (this->_Myptr < _Right._Myptr
			|| this->_Myptr == _Right._Myptr
				&& this->_Myoff < _Right._Myoff);
		}

	bool operator>(const _Mytype& _Right) const
		{	
		return (_Right < *this);
		}

	bool operator<=(const _Mytype& _Right) const
		{	
		return (!(_Right < *this));
		}

	bool operator>=(const _Mytype& _Right) const
		{	
		return (!(*this < _Right));
		}

 







#line 1818 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\vector"






#line 1825 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\vector"
	void _Compat(const _Mytype&) const
		{	
		}
 #line 1829 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\vector"

	void _Dec()
		{	
		if (this->_Myoff != 0)
			--this->_Myoff;
		else
			{	
 






#line 1844 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\vector"


#line 1847 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\vector"

			this->_Myoff = _VBITS - 1;
			--this->_Myptr;
			}
		}

	void _Inc()
		{	
		if (this->_Myoff < _VBITS - 1)
			++this->_Myoff;
		else
			{	
 






#line 1867 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\vector"


#line 1870 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\vector"

			this->_Myoff = 0;
			++this->_Myptr;
			}
		}
	};

template<class _Alloc>
	_Vb_const_iterator<_Alloc> operator+(
		typename _Alloc::difference_type _Off,
		_Vb_const_iterator<_Alloc> _Right)
		{	
		return (_Right += _Off);
		}

template<class _Alloc>
	struct _Is_checked_helper<_Vb_const_iterator<_Alloc> >
		: public ::std:: tr1::true_type
	{	
	};

	
template<class _Alloc>
	class _Vb_iterator
		: public _Vb_const_iterator<_Alloc>
	{	
public:
	typedef _Vb_const_iterator<_Alloc> _Mybase;
	typedef _Vb_iterator<_Alloc> _Mytype;

	typedef _Vb_reference<_Alloc> _Reft;
	typedef bool const_reference;

	typedef random_access_iterator_tag iterator_category;
	typedef _Bool value_type;
	typedef typename _Alloc::size_type size_type;
	typedef typename _Alloc::difference_type difference_type;
	typedef _Reft *pointer;
	typedef _Reft reference;

	_Vb_iterator()
		{	
		}

	_Vb_iterator(_Vbase *_Ptr, _Container_base *_Mypvbool)
		: _Mybase(_Ptr, _Mypvbool)
		{	
		}

	reference operator*() const
		{	
		return (_Reft(*this));
		}

	_Mytype& operator++()
		{	
		++*(_Mybase *)this;
		return (*this);
		}

	_Mytype operator++(int)
		{	
		_Mytype _Tmp = *this;
		++*this;
		return (_Tmp);
		}

	_Mytype& operator--()
		{	
		--*(_Mybase *)this;
		return (*this);
		}

	_Mytype operator--(int)
		{	
		_Mytype _Tmp = *this;
		--*this;
		return (_Tmp);
		}

	_Mytype& operator+=(difference_type _Off)
		{	
		*(_Mybase *)this += _Off;
		return (*this);
		}

	_Mytype operator+(difference_type _Off) const
		{	
		_Mytype _Tmp = *this;
		return (_Tmp += _Off);
		}

	_Mytype& operator-=(difference_type _Off)
		{	
		return (*this += -_Off);
		}

	_Mytype operator-(difference_type _Off) const
		{	
		_Mytype _Tmp = *this;
		return (_Tmp -= _Off);
		}

	difference_type operator-(const _Mybase& _Right) const
		{	
		return (*(_Mybase *)this - _Right);
		}

	reference operator[](difference_type _Off) const
		{	
		return (*(*this + _Off));
		}
	};

template<class _Alloc>
	_Vb_iterator<_Alloc> operator+(typename _Alloc::difference_type _Off,
		_Vb_iterator<_Alloc> _Right)
		{	
		return (_Right += _Off);
		}

template<class _Alloc>
	struct _Is_checked_helper<_Vb_iterator<_Alloc> >
		: public ::std:: tr1::true_type
	{	
	};

		
template<class _Alloc>
	class _Vb_val
		: public _Container_base
	{	
public:
	typedef typename _Alloc::template rebind<_Vbase>::other _Alty;
	typedef typename _Alty::size_type size_type;

 
	_Vb_val(size_type _Count, bool _Val, _Alloc _Al = _Alloc())
		: _Myvec(_Nw(_Count), (_Vbase)(_Val ? -1 : 0), _Al)
		{	
		_Mysize = 0;
		}

	~_Vb_val()
		{	
		}

 































#line 2050 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\vector"

	static size_type _Nw(size_type _Count)
		{	
		return ((_Count + _VBITS - 1) / _VBITS);
		}

	::std:: vector<_Vbase, _Alty> _Myvec;	
	typename _Alty::size_type _Mysize;	
	};

		

template<class _Alloc>
	class vector<_Bool, _Alloc>
		: public _Vb_val<_Alloc>
	{	
public:
	typedef typename _Alloc::size_type size_type;
	typedef typename _Alloc::difference_type _Dift;
	typedef ::std:: vector<_Vbase,
		typename _Alloc::template rebind<_Vbase>::other>
			_Vbtype;

	typedef ::std:: vector<_Bool, _Alloc> _Myt;
	typedef _Vb_val<_Alloc> _Mybase;

	typedef _Dift difference_type;
	typedef _Bool _Ty;
	typedef _Alloc allocator_type;

	typedef _Vb_reference<_Alloc> reference;
	typedef bool const_reference;
	typedef bool value_type;

	typedef reference _Reft;
	typedef _Vb_const_iterator<_Alloc> const_iterator;
	typedef _Vb_iterator<_Alloc> iterator;

	typedef iterator pointer;
	typedef const_iterator const_pointer;
	typedef ::std:: reverse_iterator<iterator> reverse_iterator;
	typedef ::std:: reverse_iterator<const_iterator> const_reverse_iterator;

	static const int _VBITS = ::std:: _VBITS;

	vector()
		: _Mybase(0, false)
		{	
		}

	vector(const _Myt& _Right)
		: _Mybase(_Right)
		{	
		}

	explicit vector(const _Alloc& _Al)
		: _Mybase(0, false, _Al)
		{	
		}

	explicit vector(size_type _Count, bool _Val = false)
		: _Mybase(_Count, _Val)
		{	
		_Trim(_Count);
		}

	vector(size_type _Count, bool _Val, const _Alloc& _Al)
		: _Mybase(_Count, _Val, _Al)
		{	
		_Trim(_Count);
		}

	template<class _Iter>
		vector(_Iter _First, _Iter _Last)
		: _Mybase(0, false)
		{	
		_BConstruct(_First, _Last, _Iter_cat(_First));
		}

	template<class _Iter>
		vector(_Iter _First, _Iter _Last, const _Alloc& _Al)
		: _Mybase(0, false, _Al)
		{	
		_BConstruct(_First, _Last, _Iter_cat(_First));
		}

	template<class _Iter>
		void _BConstruct(_Iter _Count, _Iter _Val, _Int_iterator_tag)
		{	
		size_type _Num = (size_type)_Count;
		this->_Myvec.assign(_Num, (_Ty)_Val ? -1 : 0);
		_Trim(_Num);
		}

	template<class _Iter>
		void _BConstruct(_Iter _First, _Iter _Last, input_iterator_tag)
		{	
		insert(begin(), _First, _Last);
		}

	vector(_Myt&& _Right)
		: _Mybase(0, false, _Right.get_allocator())
		{	
		_Assign_rv(::std:: move(_Right));
		}

	_Myt& operator=(_Myt&& _Right)
		{	
		_Assign_rv(::std:: move(_Right));
		return (*this);
		}

	void _Assign_rv(_Myt&& _Right)
		{	
		if (this == &_Right)
			;
		else if (get_allocator() != _Right.get_allocator())
			*this = _Right;
		else
			{	
			clear();
			this->_Swap_all((_Myt&)_Right);
			this->_Mysize = _Right._Mysize;
			_Right._Mysize = 0;
			this->_Myvec = ::std:: move(_Right._Myvec);
			}
		}

	void swap(_Myt&& _Right)
		{	
		_Assign_rv(::std:: move(_Right));
		}

	~vector()
		{	
		this->_Mysize = 0;
		}

	_Myt& operator=(const _Myt& _Right)
		{	
		this->_Mysize = _Right._Mysize;
		this->_Myvec = _Right._Myvec;
		return (*this);
		}

	void reserve(size_type _Count)
		{	
		this->_Myvec.reserve(this->_Nw(_Count));
		}

	size_type capacity() const
		{	
		return (this->_Myvec.capacity() * _VBITS);
		}

	iterator begin()
		{	
		return (iterator((_Vbase *)this->_Myvec._Myfirst, this));
		}

	const_iterator begin() const
		{	
		return (const_iterator((_Vbase *)this->_Myvec._Myfirst, this));
		}

	iterator end()
		{	
		iterator _Tmp = begin();
		if (0 < this->_Mysize)
			_Tmp += this->_Mysize;
		return (_Tmp);
		}

	const_iterator end() const
		{	
		const_iterator _Tmp = begin();
		if (0 < this->_Mysize)
			_Tmp += this->_Mysize;
		return (_Tmp);
		}

 
	const_iterator cbegin() const
		{	
		return (((const _Myt *)this)->begin());
		}

	const_iterator cend() const
		{	
		return (((const _Myt *)this)->end());
		}

	const_reverse_iterator crbegin() const
		{	
		return (((const _Myt *)this)->rbegin());
		}

	const_reverse_iterator crend() const
		{	
		return (((const _Myt *)this)->rend());
		}

	void shrink_to_fit()
		{	
		_Myt _Tmp(*this);
		swap(_Tmp);
		}
 #line 2258 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\vector"

	iterator _Make_iter(const_iterator _Where)
		{	
		iterator _Tmp = begin();
		if (0 < this->_Mysize)
			_Tmp += _Where - begin();
		return (_Tmp);
		}

	reverse_iterator rbegin()
		{	
		return (reverse_iterator(end()));
		}

	const_reverse_iterator rbegin() const
		{	
		return (const_reverse_iterator(end()));
		}

	reverse_iterator rend()
		{	
		return (reverse_iterator(begin()));
		}

	const_reverse_iterator rend() const
		{	
		return (const_reverse_iterator(begin()));
		}

	void resize(size_type _Newsize, bool _Val = false)
		{	
		if (size() < _Newsize)
			_Insert_n(end(), _Newsize - size(), _Val);
		else if (_Newsize < size())
			erase(begin() + _Newsize, end());
		}

	size_type size() const
		{	
		return (this->_Mysize);
		}

	size_type max_size() const
		{	
		const size_type _Maxsize = this->_Myvec.max_size();
		return (_Maxsize < (size_type)(-1) / _VBITS
			? _Maxsize * _VBITS : (size_type)(-1));
		}

	bool empty() const
		{	
		return (size() == 0);
		}

	_Alloc get_allocator() const
		{	
		return (this->_Myvec.get_allocator());
		}

	const_reference at(size_type _Off) const
		{	
		if (size() <= _Off)
			_Xran();
		return (*(begin() + _Off));
		}

	reference at(size_type _Off)
		{	
		if (size() <= _Off)
			_Xran();
		return (*(begin() + _Off));
		}

	const_reference operator[](size_type _Off) const
		{	
		return (*(begin() + _Off));
		}

	reference operator[](size_type _Off)
		{	
		return (*(begin() + _Off));
		}

	reference front()
		{	
		return (*begin());
		}

	const_reference front() const
		{	
		return (*begin());
		}

	reference back()
		{	
		return (*(end() - 1));
		}

	const_reference back() const
		{	
		return (*(end() - 1));
		}

	void push_back(bool _Val)
		{	
		insert(end(), _Val);
		}

	void pop_back()
		{	
		if (!empty())
			erase(end() - 1);
		}

	template<class _Iter>
		void assign(_Iter _First, _Iter _Last)
		{	
		_Assign(_First, _Last, _Iter_cat(_First));
		}

	template<class _Iter>
		void _Assign(_Iter _Count, _Iter _Val, _Int_iterator_tag)
		{	
		_Assign_n((size_type)_Count, (bool)_Val);
		}

	template<class _Iter>
		void _Assign(_Iter _First, _Iter _Last, input_iterator_tag)
		{	
		erase(begin(), end());
		insert(begin(), _First, _Last);
		}

	void assign(size_type _Count, bool _Val)
		{	
		_Assign_n(_Count, _Val);
		}

	iterator insert(const_iterator _Where, bool _Val)
		{	
		size_type _Off = _Where - begin();
		_Insert_n(_Where, (size_type)1, _Val);
		return (begin() + _Off);
		}

	void insert(const_iterator _Where, size_type _Count, bool _Val)
		{	
		_Insert_n(_Where, _Count, _Val);
		}

	template<class _Iter>
		void insert(const_iterator _Where, _Iter _First, _Iter _Last)
		{	
		_Insert(_Where, _First, _Last, _Iter_cat(_First));
		}

	template<class _Iter>
		void _Insert(const_iterator _Where, _Iter _Count, _Iter _Val,
			_Int_iterator_tag)
		{	
		_Insert_n(_Where, (size_type)_Count, (bool)_Val);
		}

	template<class _Iter>
		void _Insert(const_iterator _Where, _Iter _First, _Iter _Last,
			input_iterator_tag)
		{	
		size_type _Off = _Where - begin();

		for (; _First != _Last; ++_First, ++_Off)
			insert(begin() + _Off, *_First);
		}

	template<class _Iter>
		void _Insert(const_iterator _Where,
			_Iter _First, _Iter _Last,
			forward_iterator_tag)
		{	
		;
		size_type _Count = 0;
		_Distance(_First, _Last, _Count);

		size_type _Off = _Insert_x(_Where, _Count);
		::std:: copy(_First, _Last, begin() + _Off);
		}

	iterator erase(const_iterator _Where_arg)
		{	
		iterator _Where = _Make_iter(_Where_arg);
		size_type _Off = _Where - begin();

 





#line 2456 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\vector"
		::std:: copy(_Where + 1, end(), _Where);
 #line 2458 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\vector"

		_Trim(this->_Mysize - 1);
		return (begin() + _Off);
		}

	iterator erase(const_iterator _First_arg, const_iterator _Last_arg)
		{	
		iterator _First = _Make_iter(_First_arg);
		iterator _Last = _Make_iter(_Last_arg);
		size_type _Off = _First - begin();

		if (_First != _Last)
			{	
 







#line 2480 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\vector"
			iterator _Next = ::std:: copy(_Last, end(), _First);
			_Trim(_Next - begin());
 #line 2483 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\vector"
			}
		return (begin() + _Off);
		}

	void clear()
		{	
		erase(begin(), end());
		}

	void flip()
		{	
		for (typename _Vbtype::iterator _Next = this->_Myvec.begin();

			_Next != this->_Myvec.end(); ++_Next)
			*_Next = (_Vbase)~*_Next;
		_Trim(this->_Mysize);
		}

	void swap(_Myt& _Right)
		{	
		if (this != &_Right)
			{	
			this->_Swap_all(_Right);
			::std:: swap(this->_Mysize, _Right._Mysize);
			this->_Myvec.swap(_Right._Myvec);
			}
		}

	static void swap(reference _Left, reference _Right)
		{	
		bool _Val = _Left;	

		_Left = _Right;
		_Right = _Val;
		}

 
	size_t hash() const
		{	
		size_t _Val = 2166136261U;
		size_t _First = 0;
		size_t _Last = this->_Myvec.size();

		for(; _First < _Last; ++_First)
			_Val = 16777619U * _Val ^ (size_t)this->_Myvec[_First];
		return (_Val);
		}
 #line 2531 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\vector"

	void _Assign_n(size_type _Count, bool _Val)
		{	
		erase(begin(), end());
		_Insert_n(begin(), _Count, _Val);
		}

	void _Insert_n(const_iterator _Where,
		size_type _Count, bool _Val)
		{	
		size_type _Off = _Insert_x(_Where, _Count);
		::std:: fill(begin() + _Off, begin() + (_Off + _Count), _Val);
		}

	size_type _Insert_x(const_iterator _Where, size_type _Count)
		{	
		size_type _Off = _Where - begin();

 



#line 2554 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\vector"

		if (_Count == 0)
			;
		else if (max_size() - size() < _Count)
			_Xlen();	
		else
			{	
			this->_Myvec.resize(this->_Nw(size() + _Count), 0);
			if (size() == 0)
				this->_Mysize += _Count;
			else
				{	
				iterator _Oldend = end();
				this->_Mysize += _Count;
				::std:: copy_backward(begin() + _Off, _Oldend, end());
				}

 

#line 2574 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\vector"
			}
		return (_Off);
		}

 























#line 2603 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\vector"
	void _Orphan_range(size_type, size_type) const
		{	
		}
 #line 2607 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\vector"

	void _Trim(size_type _Size)
		{	
		if (max_size() < _Size)
			_Xlen();	
		size_type _Words = this->_Nw(_Size);

		if (_Words < this->_Myvec.size())
			this->_Myvec.erase(this->_Myvec.begin() + _Words,
				this->_Myvec.end());
		this->_Mysize = _Size;
		_Size %= _VBITS;
		if (0 < _Size)
			this->_Myvec[_Words - 1] &= (_Vbase)((1 << _Size) - 1);
		}

	__declspec(noreturn) void _Xlen() const
		{	
		_Xlength_error("vector<bool> too long");
		}

	__declspec(noreturn) void _Xran() const
		{	
		_Xout_of_range("invalid vector<bool> subscript");
		}
	};

typedef vector<bool, allocator<bool> > _Bvector;

 
template<class _Kty>
	class hash;

template<class _Alloc>
	class hash<vector<_Bool, _Alloc> >
		: public unary_function<vector<_Bool, _Alloc>, size_t>
	{	
public:
	typedef vector<_Bool, _Alloc> _Kty;

	size_t operator()(const _Kty& _Keyval) const
		{	
		return (_Keyval.hash());
		}
	};
 #line 2653 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\vector"
}

 #pragma warning(pop)
 #pragma pack(pop)

#line 2659 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\vector"
#line 2660 "C:\\Program Files (x86)\\Microsoft Visual Studio 10.0\\VC\\include\\vector"























#line 26 "c:\\users\\blake\\documents\\github\\pct-reconstruction\\pCT_Reconstruction.h"


using namespace std::placeholders; 









const bool RUN_ON			   = false;									
const bool EXIT_AFTER_BINNING  = false;									
const bool EXIT_AFTER_HULLS    = false;									
const bool EXIT_AFTER_CUTS     = false;									
const bool EXIT_AFTER_SINOGRAM = false;									
const bool EXIT_AFTER_FBP	   = false;									



const bool DEBUG_TEXT_ON	   = true;									
const bool SAMPLE_STD_DEV	   = true;									
const bool FBP_ON			   = true;									
const bool SC_ON			   = true;									
const bool MSC_ON			   = false;									
const bool SM_ON			   = false;									
const bool HULL_FILTER_ON	   = false;									
const bool COUNT_0_WEPLS	   = false;									
const bool REALLOCATE		   = false;







const char INPUT_DIRECTORY[]   = "C:\\Users\\Blake\\Documents\\Visual Studio 2010\\Projects\\pCT_Reconstruction\\Input\\";
const char OUTPUT_DIRECTORY[]  = "C:\\Users\\Blake\\Documents\\Visual Studio 2010\\Projects\\pCT_Reconstruction\\Output\\";



const char INPUT_FOLDER[]	   = "input_water_GeantNONUC";
const char OUTPUT_FOLDER[]	   = "input_water_GeantNONUC";





























const char INPUT_BASE_NAME[]   = "projection";							






const char FILE_EXTENSION[]	   = ".bin";								





enum DATA_FORMATS { OLD_FORMAT, VERSION_0, VERSION_1 };					
const DATA_FORMATS DATA_FORMAT = VERSION_0;								
const bool BINARY_ENCODING	   = true;									
const bool SINGLE_DATA_FILE    = false;									
const bool SSD_IN_MM		   = true;									
const bool DATA_IN_MM		   = true;									
const bool MICAH_SIM		   = false;									



const bool WRITE_SC_HULL	   = true;									
const bool WRITE_MSC_COUNTS    = true;									
const bool WRITE_MSC_HULL	   = true;									
const bool WRITE_SM_COUNTS	   = true;									
const bool WRITE_SM_HULL	   = true;									
const bool WRITE_FBP_IMAGE	   = true;									
const bool WRITE_FBP_HULL	   = true;									
const bool WRITE_FILTERED_HULL = true;									
const bool WRITE_X_HULL		   = true;									
const bool WRITE_X_K0		   = true;									



enum BIN_ANALYSIS_TYPE { MEANS, COUNTS, MEMBERS };						
enum BIN_ANALYSIS_FOR { ALL_BINS, SPECIFIC_BINS };						
enum BIN_ORGANIZATION { BY_BIN, BY_HISTORY };							
enum BIN_ANALYSIS_OF { WEPLS, ANGLES, POSITIONS, BIN_NUMS };			
const bool WRITE_BIN_WEPLS	   = false;									
const bool WRITE_WEPL_DISTS	   = true;									
const bool WRITE_SSD_ANGLES    = false;									

























double p0, p1, p2, p3, p4;												
static double Estage[5] = { 25.85, 29.04, 34.43, 47.8, 52.63 };			
double ped[5] = {9.645, -20.484, -201.987, 62.966, -7.747};				
double ucal = 216.9 + 40;												
















enum FILTER_TYPES {RAM_LAK, SHEPP_LOGAN, NONE};							
const FILTER_TYPES FBP_FILTER  = SHEPP_LOGAN;			  				





































enum  HULL_TYPES {SC_HULL, MSC_HULL, SM_HULL, FBP_HULL };				
const HULL_TYPES MLP_HULL	   = FBP_HULL;								





double A_0 = (  7.457 * pow( 10, -6.0  ) );
double A_1 = (  4.548 * pow( 10, -7.0  ) );
double A_2 = ( -5.777 * pow( 10, -8.0  ) );
double A_3 = (  1.301 * pow( 10, -8.0  ) );
double A_4 = ( -9.228 * pow( 10, -10.0 ) );
double A_5 = (  2.687 * pow( 10, -11.0 ) );



enum  INITIAL_ITERATE { X_HULL, FBP_IMAGE, HYBRID };					
const INITIAL_ITERATE X_K0	   = HYBRID;								




































int total_histories = 0, recon_vol_histories = 0, maximum_histories_per_file = 0;
int* histories_per_projection, * histories_per_gantry_angle, * histories_per_file;
int* recon_vol_histories_per_projection;
int histories_per_scan[1];
int post_cut_histories = 0;



float SSD_u_Positions[8];
float* ut_entry_angle, * uv_entry_angle, * ut_exit_angle, * uv_exit_angle; 
int zero_WEPL = 0;
int zero_WEPL_files = 0;



int* gantry_angle_h, * bin_num_h, * bin_counts_h;
bool* missed_recon_volume_h, * failed_cuts_h;
float* t_in_1_h, * t_in_2_h, * t_out_1_h, * t_out_2_h;
float* u_in_1_h, * u_in_2_h, * u_out_1_h, * u_out_2_h;
float* v_in_1_h, * v_in_2_h, * v_out_1_h, * v_out_2_h;
float* ut_entry_angle_h, * ut_exit_angle_h;
float* uv_entry_angle_h, * uv_exit_angle_h;
float* x_entry_h, * y_entry_h, * z_entry_h;
float* x_exit_h, * y_exit_h, * z_exit_h;
float* xy_entry_angle_h, * xy_exit_angle_h;
float* xz_entry_angle_h, * xz_exit_angle_h;
float* relative_ut_angle_h, * relative_uv_angle_h;
float* WEPL_h;



int* gantry_angle_d, * bin_num_d, * bin_counts_d;
bool* missed_recon_volume_d, * failed_cuts_d;
float* t_in_1_d, * t_in_2_d, * t_out_1_d, * t_out_2_d;
float* u_in_1_d, * u_in_2_d, * u_out_1_d, * u_out_2_d;
float* v_in_1_d, * v_in_2_d, * v_out_1_d, * v_out_2_d;
float* ut_entry_angle_d, * ut_exit_angle_d;
float* uv_entry_angle_d, * uv_exit_angle_d;
float* x_entry_d, * y_entry_d, * z_entry_d;
float* x_exit_d, * y_exit_d, * z_exit_d;
float* xy_entry_angle_d, * xy_exit_angle_d;
float* xz_entry_angle_d, * xz_exit_angle_d;
float* relative_ut_angle_d, * relative_uv_angle_d;
float* WEPL_d;



float* mean_WEPL_h, * mean_WEPL_d;
float* mean_energy_h, * mean_energy_d;
float* mean_rel_ut_angle_h, * mean_rel_ut_angle_d;
float* mean_rel_uv_angle_h, * mean_rel_uv_angle_d;
float* mean_total_rel_angle_h, * mean_total_rel_angle_d;
float* stddev_rel_ut_angle_h, * stddev_rel_ut_angle_d;
float* stddev_rel_uv_angle_h, * stddev_rel_uv_angle_d;
float* stddev_WEPL_h, * stddev_WEPL_d;



float* sinogram_h, * sinogram_d;
float* sinogram_filtered_h, * sinogram_filtered_d;



bool* SC_hull_h, * SC_hull_d;
bool* MSC_hull_h, * MSC_hull_d;
bool* SM_hull_h, * SM_hull_d;
bool* FBP_hull_h, * FBP_hull_d;
bool* x_hull_h, * x_hull_d;
int* MSC_counts_h, * MSC_counts_d;
int* SM_counts_h, * SM_counts_d;
int* MLP_test_image_h, * MLP_test_image_d;
float* FBP_image_h, * FBP_image_d;
float* x_h, * x_d;



std::vector<int>	bin_num_vector;			
std::vector<int>	gantry_angle_vector;	
std::vector<float>	WEPL_vector;		
std::vector<float>	x_entry_vector;		
std::vector<float>	y_entry_vector;		
std::vector<float>	z_entry_vector;		
std::vector<float>	x_exit_vector;			
std::vector<float>	y_exit_vector;			
std::vector<float>	z_exit_vector;			
std::vector<float>	xy_entry_angle_vector;	
std::vector<float>	xz_entry_angle_vector;	
std::vector<float>	xy_exit_angle_vector;	
std::vector<float>	xz_exit_angle_vector;	
std::vector<float>	relative_ut_angle_vector;	
std::vector<float>	relative_uv_angle_vector;



int*	bin_index;
float*	bin_WEPL;
int*	bin_num;			
int*	gantry_angle;	
float*	WEPL;		
float*	x_entry;		
float*	y_entry;		
float*	z_entry;		
float*	x_exit;			
float*	y_exit;			
float*	z_exit;			
float*	xy_entry_angle;	
float*	xz_entry_angle;	
float*	xy_exit_angle;	
float*	xz_exit_angle;	
float*	relative_ut_angle;	
float*	relative_uv_angle;



clock_t start_time, end_time, execution_time;










int MLP_IMAGE_COLUMNS = 100, MLP_IMAGE_ROWS = 100, MLP_IMAGE_SLICES = 5;
int MLP_IMAGE_VOXELS = MLP_IMAGE_COLUMNS * MLP_IMAGE_ROWS * MLP_IMAGE_SLICES;
int MLP_IMAGE_SIZE = MLP_IMAGE_VOXELS * sizeof(int);

int MLP_IMAGE_RECON_CYL_RADIUS_VOXELS = 40;
int MLP_IMAGE_RECON_CYL_HEIGHT_VOXELS = 5;
int MLP_PHANTOM_A_VOXELS = 15, MLP_PHANTOM_B_VOXELS = 25;

double MLP_IMAGE_VOXEL_WIDTH = 0.1;
double MLP_IMAGE_VOXEL_HEIGHT = 0.1;
double MLP_IMAGE_VOXEL_THICKNESS = 1.0; 

double MLP_IMAGE_RECON_CYL_RADIUS = MLP_IMAGE_RECON_CYL_RADIUS_VOXELS * MLP_IMAGE_VOXEL_WIDTH;
double MLP_IMAGE_RECON_CYL_HEIGHT = MLP_IMAGE_RECON_CYL_HEIGHT_VOXELS * MLP_IMAGE_VOXEL_THICKNESS;
double MLP_PHANTOM_A = MLP_PHANTOM_A_VOXELS * MLP_IMAGE_VOXEL_WIDTH;
double MLP_PHANTOM_B = MLP_PHANTOM_B_VOXELS * MLP_IMAGE_VOXEL_HEIGHT;

double MLP_IMAGE_WIDTH = MLP_IMAGE_COLUMNS * MLP_IMAGE_VOXEL_WIDTH;
double MLP_IMAGE_HEIGHT = MLP_IMAGE_ROWS * MLP_IMAGE_VOXEL_HEIGHT;
double MLP_IMAGE_THICKNESS = MLP_IMAGE_SLICES * MLP_IMAGE_VOXEL_THICKNESS;





#line 431 "c:\\users\\blake\\documents\\github\\pct-reconstruction\\pCT_Reconstruction.h"

#line 7 "c:\\users\\blake\\documents\\github\\pct-reconstruction\\pCT_Reconstruction_GPU.cu"




















void test_func_3()
{
	std::cout << "Hello" << std::endl;
}

#line 33 "c:\\users\\blake\\documents\\github\\pct-reconstruction\\pCT_Reconstruction_GPU.cu"
#line 13 "C:/Users/Blake/Documents/GitHub/pct-reconstruction/pCT_Reconstruction.cu"





void write_run_settings();
void assign_SSD_positions();
void initializations();
void count_histories();	
void count_histories_old();
void count_histories_v0();
void count_histories_v1();
void reserve_vector_capacity();


void read_energy_responses( const int, const int, const int );
void read_data_chunk( const int, const int, const int );
void read_data_chunk_old( const int, const int, const int );
void read_data_chunk_v0( const int, const int, const int );
void read_data_chunk_v1( const int, const int, const int );
void recon_volume_intersections( const int );
void recon_volume_intersections2( const int );
void binning( const int );
void calculate_means();
void initialize_stddev();
void sum_squared_deviations( const int, const int );
void calculate_standard_deviations();
void statistical_cuts( const int, const int );
void initialize_sinogram();
void construct_sinogram();
void FBP();
void FBP_image_2_hull();
void filter();
void backprojection();


void hull_initializations();
template<typename T> void initialize_hull( T*&, T*& );
void hull_detection( const int );
void hull_detection_finish();
void SC( const int );
void MSC( const int );
void MSC_edge_detection();
void SM( const int );
void SM_edge_detection();
void SM_edge_detection_2();
void hull_selection();
template<typename T, typename T2> void averaging_filter( T*&, T2*& );


void create_MLP_test_image();	
void MLP_test();	
void MLP();
void MLP_entry_exit( int&, int&, int& );
float mean_chord_length( float, float );


void create_hull_image_hybrid();
void define_initial_iterate();


template<typename T> void array_2_disk( char*, const char*, const char*, T*, const int, const int, const int, const int, const bool );
template<typename T> void vector_2_disk( char*, const char*, const char*, std::vector<T>, const int, const int, const int, const bool );
void write_t_bin_data( FILE*, const std::vector<int>&, const std::vector<float>&, const BIN_ANALYSIS_TYPE, const int );
void write_bin_data( const char*, const std::vector<int>&, const std::vector<float>&, const BIN_ANALYSIS_TYPE, const BIN_ANALYSIS_FOR, const BIN_ORGANIZATION, ... );
void write_t_bin_data( FILE*, int*&, float*&, const int, const BIN_ANALYSIS_TYPE, const BIN_ORGANIZATION, int );
void write_bin_data( const char*, int*&, float*&, const int, const BIN_ANALYSIS_TYPE, const BIN_ANALYSIS_FOR, const BIN_ORGANIZATION, ... );
void bin_2_txt();


void post_cut_memory_clean(); 
void resize_vectors( const int );
void shrink_vectors( const int );
void initial_processing_memory_clean();
void allocations( const int );
void reallocations( const int );


void exit_program_if( bool );
void start_execution_timing();
void stop_execution_timing();
void pause_execution();
bool is_bad_angle( const int );								
int calculate_x_voxel( const float, const int, const float );
int calculate_y_voxel( const float, const int, const float );
int calculate_slice( const float, const int, const float );
int positions_2_voxels(const double, const double, const double, int&, int&, int& );
void bin_2_indexes( int, int&, int&, int& );


void test_func();
void test_func2( std::vector<int>&, std::vector<float>&);






__declspec(__device__) bool calculate_intercepts( double, double, double, double&, double& );
__declspec(__global__) void recon_volume_intersections_GPU( int, int*, bool*, float*, float*, float*, float*, float*, float*, float*, float*, float*, float*, float*, float*, float*, float*, float*, float*, float*, float*, float*, float*, float*, float* );
__declspec(__global__) void binning_GPU( int, int*, int*, bool*, float*, float*, float*, float*, float*, float*, float*, float*, float*, float*, float*, float*, float*, float* );
__declspec(__global__) void calculate_means_GPU( int*, float*, float*, float* );
__declspec(__global__) void sum_squared_deviations_GPU( int, int*, float*, float*, float*, float*, float*, float*, float*, float*, float*, float*, float*  );
__declspec(__global__) void calculate_standard_deviations_GPU( int*, float*, float*, float* );
__declspec(__global__) void statistical_cuts_GPU( int, int*, int*, float*, float*, float*, float*, float*, float*, float*, float*, float*, float*, float*, float*, bool* );
__declspec(__global__) void construct_sinogram_GPU( int*, float* );
__declspec(__global__) void filter_GPU( float*, float* );
__declspec(__global__) void backprojection_GPU( float*, float* );


template<typename T> __declspec(__global__) void initialize_hull_GPU( T* );
__declspec(__device__) int position_2_voxel_GPU( double x, double y, double z );
__declspec(__device__) void voxel_walk_GPU( bool*&, float, float, float, float, float, float );
__declspec(__device__) double x_remaining_GPU( double, int, int& );
__declspec(__device__) double y_remaining_GPU( double, int, int& );
__declspec(__device__) double z_remaining_GPU( double, int, int& );
__declspec(__global__) void FBP_image_2_hull_GPU( float*, bool* );
__declspec(__global__) void SC_GPU( const int, bool*, int*, bool*, float*, float*, float*, float*, float*, float*, float* );
__declspec(__global__) void MSC_GPU( const int, int*, int*, bool*, float*, float*, float*, float*, float*, float*, float* );
__declspec(__global__) void SM_GPU( const int, int*, int*, bool*, float*, float*, float*, float*, float*, float*, float* );
__declspec(__global__) void MSC_edge_detection_GPU( int* );
__declspec(__global__) void SM_edge_detection_GPU( int*, int* );
__declspec(__global__) void SM_edge_detection_GPU_2( int*, int* );
__declspec(__global__) void carve_differences( int*, int* );
template<typename H, typename D> __declspec(__global__) void averaging_filter_GPU( H*, D*, bool );
template<typename D> __declspec(__global__) void apply_averaging_filter_GPU( D*, D* );


__declspec(__global__) void create_hull_image_hybrid_GPU( bool*&, float*& );


__declspec(__global__) void test_func_GPU( int* );
__declspec(__device__) void test_func_device( int&, int&, int&);




int main(int argc, char** argv)
{
	if( RUN_ON )
	{
		
		
		
		start_execution_timing();
		
		
		
		hull_initializations();
		
		
		
				
		if( DATA_FORMAT == OLD_FORMAT )
			assign_SSD_positions();		
		initializations();				
		count_histories();				
		
		
		
		int start_file_num = 0, end_file_num = 0, histories_to_process = 0;
		while( start_file_num != ( 1 * int( 360 / 6.0 ) ) )
		{
			while( end_file_num < ( 1 * int( 360 / 6.0 ) ) )
			{
				if( histories_to_process + histories_per_file[end_file_num] < 300000 )
					histories_to_process += histories_per_file[end_file_num];
				else
					break;
				end_file_num++;
			}
			read_energy_responses( histories_to_process, start_file_num, end_file_num );
			start_file_num = end_file_num;
			histories_to_process = 0;
		}
		
		
		
		
		
		
		
		
		
		puts("Iteratively reading data from hard disk");
		puts("Removing proton histories that don't pass through the reconstruction volume");
		puts("Binning the data from those that did...");
		start_file_num = 0, end_file_num = 0, histories_to_process = 0;
		while( start_file_num != ( 1 * int( 360 / 6.0 ) ) )
		{
			while( end_file_num < ( 1 * int( 360 / 6.0 ) ) )
			{
				if( histories_to_process + histories_per_file[end_file_num] < 300000 )
					histories_to_process += histories_per_file[end_file_num];
				else
					break;
				end_file_num++;
			}
			read_data_chunk( histories_to_process, start_file_num, end_file_num );
			recon_volume_intersections( histories_to_process );
			binning( histories_to_process );
			hull_detection( histories_to_process );
			initial_processing_memory_clean();
			start_file_num = end_file_num;
			histories_to_process = 0;
		}
		if( COUNT_0_WEPLS )
			std::cout << "Histories with WEPL = 0 : " << zero_WEPL << std::endl;
		puts("Data reading complete.");
		printf("%d out of %d (%4.2f%%) histories passed through the reconstruction volume.\n", recon_vol_histories, total_histories, (double) recon_vol_histories / total_histories * 100  );
		exit_program_if( EXIT_AFTER_BINNING );
		
																						
		
		shrink_vectors( recon_vol_histories );
		
																							
		
		hull_detection_finish();
		exit_program_if( EXIT_AFTER_HULLS );
		
													
		
		calculate_means();
		initialize_stddev();
		
		
		 
		
		
		
		puts("Calculating the cumulative sum of the squared deviation in WEPL and relative ut/uv angles over all histories for each bin...");
		int remaining_histories = recon_vol_histories;
		int start_position = 0;
		while( remaining_histories > 0 )
		{
			if( remaining_histories > 300000 )
				histories_to_process = 300000;
			else
				histories_to_process = remaining_histories;
			sum_squared_deviations( start_position, histories_to_process );
			remaining_histories -= 300000;
			start_position		+= 300000;
		} 
		calculate_standard_deviations();
		
		
		
		initialize_sinogram();
		
		
		
		puts("Performing statistical cuts...");
		remaining_histories = recon_vol_histories, start_position = 0;
		while( remaining_histories > 0 )
		{
			if( remaining_histories > 300000 )
				histories_to_process = 300000;
			else
				histories_to_process = remaining_histories;
			statistical_cuts( start_position, histories_to_process );
			remaining_histories -= 300000;
			start_position		+= 300000;
		}
		puts("Statistical cuts complete.");
		printf("%d out of %d (%4.2f%%) histories passed cuts\n", post_cut_histories, total_histories, (double) post_cut_histories / total_histories * 100  );
		
		
				
		post_cut_memory_clean();
		resize_vectors( post_cut_histories );
		shrink_vectors( post_cut_histories );
		exit_program_if( EXIT_AFTER_CUTS );
		
		
		
		construct_sinogram();
		exit_program_if( EXIT_AFTER_SINOGRAM );
		
		
		
		if( FBP_ON )
			FBP();
		exit_program_if( EXIT_AFTER_FBP );
		
		
	}
	else
	{
		
		test_func();
	}
	
	 															
	
	puts("Preprocessing complete.  Press enter to close the console window...");
	exit_program_if(true);
}



void read_energy_responses( const int num_histories, const int start_file_num, const int end_file_num )
{
	
	char data_filename[128];
	char magic_number[5];
	int version_id;
	int file_histories;
	float projection_angle, beam_energy;
	int generation_date, preprocess_date;
	int phantom_name_size, data_source_size, prepared_by_size;
	char *phantom_name, *data_source, *prepared_by;
	int data_size;
	
	int gantry_position, gantry_angle, scan_number, scan_histories;
	
	FILE* input_file;

	puts("Reading energy detector responses and performing energy response calibration...");
	
	sprintf(data_filename, "%s%s/%s_%03d%s", INPUT_DIRECTORY, INPUT_FOLDER, INPUT_BASE_NAME, gantry_angle, FILE_EXTENSION );
}



void write_run_settings()
{
	char user_response[20];
	char run_settings_filename[512];
	puts("Reading tracker plane positions...");

	sprintf(run_settings_filename, "%s%s\\run_settings.cfg", INPUT_DIRECTORY, INPUT_FOLDER);
	if( DEBUG_TEXT_ON )
		printf("Opening run settings file %s...\n", run_settings_filename);
	std::ofstream run_settings_file(run_settings_filename);		
	if( !run_settings_file.is_open() ) {
		printf("ERROR: run settings file file not found at %s!\n", run_settings_filename);	
		exit_program_if(true);
	}
	else
	{
		fputs("Found File", (&__iob_func()[1]));
		fflush((&__iob_func()[1]));
		printf("user_response = \"%s\"\n", user_response);
	}
	if( DEBUG_TEXT_ON )
		puts("Loading run settings...");
	run_settings_file << "MAX_GPU_HISTORIES = " << 300000 << std::endl;
	run_settings_file << "GANTRY_ANGLE_INTERVAL = " << 6.0 << std::endl;
	run_settings_file << "SSD_T_SIZE = " << 35.0 << std::endl;
	run_settings_file << "SSD_V_SIZE = " << 9.0 << std::endl;
	run_settings_file << "T_BIN_SIZE = " << 0.1 << std::endl;
	run_settings_file << "V_BIN_SIZE = " << 0.25 << std::endl;
	run_settings_file << "ANGULAR_BIN_SIZE = " << 6.0 << std::endl;
	run_settings_file << "GANTRY_ANGLE_INTERVAL = " << 6.0 << std::endl;
	run_settings_file << "RECON_CYL_RADIUS = " << 8.0 << std::endl;
	run_settings_file << "RECON_CYL_HEIGHT = " << 6.0 << std::endl;
	run_settings_file << "COLUMNS = " << 200 << std::endl;
	run_settings_file << "ROWS = " << 200 << std::endl;
	run_settings_file << "SLICE_THICKNESS" << 0.25 << std::endl;
	
	
	
	
	
	run_settings_file.close();
}
void assign_SSD_positions()	
{
	char user_response[20];
	char configFilename[512];
	puts("Reading tracker plane positions...");

	sprintf(configFilename, "%s%s\\scan.cfg", INPUT_DIRECTORY, INPUT_FOLDER);
	if( DEBUG_TEXT_ON )
		printf("Opening config file %s...\n", configFilename);
	std::ifstream configFile(configFilename);		
	if( !configFile.is_open() ) {
		printf("ERROR: config file not found at %s!\n", configFilename);	
		exit_program_if(true);
	}
	else
	{
		fputs("Found File", (&__iob_func()[1]));
		fflush((&__iob_func()[1]));
		printf("user_response = \"%s\"\n", user_response);
	}
	if( DEBUG_TEXT_ON )
		puts("Reading Tracking Plane Positions...");
	for( int i = 0; i < 8; i++ ) {
		configFile >> SSD_u_Positions[i];
		if( DEBUG_TEXT_ON )
			printf("SSD_u_Positions[%d] = %3f", i, SSD_u_Positions[i]);
	}
	
	configFile.close();

}
void count_histories()
{
	for( int scan_number = 0; scan_number < 1; scan_number++ )
		histories_per_scan[scan_number] = 0;

	histories_per_file =				 (int*) calloc( 1 * int( 360 / 6.0 ), sizeof(int) );
	histories_per_gantry_angle =		 (int*) calloc( int( 360 / 6.0 ), sizeof(int) );
	recon_vol_histories_per_projection = (int*) calloc( int( 360 / 6.0 ), sizeof(int) );

	if( DEBUG_TEXT_ON )
		puts("Counting proton histories...\n");
	switch( DATA_FORMAT )
	{
		case OLD_FORMAT : count_histories_old();	break;
		case VERSION_0  : count_histories_v0();		break;
		case VERSION_1  : count_histories_v1();		break;
	}
	if( DEBUG_TEXT_ON )
	{
		for( int file_number = 0, gantry_position_number = 0; file_number < (1 * int( 360 / 6.0 )); file_number++, gantry_position_number++ )
		{
			if( file_number % 1 == 0 )
				printf("There are a Total of %d Histories From Gantry Angle %d\n", histories_per_gantry_angle[gantry_position_number], int(gantry_position_number* 6.0) );			
			printf("* %d Histories are From Scan Number %d\n", histories_per_file[file_number], (file_number % 1) + 1 );
			
		}
		for( int scan_number = 0; scan_number < 1; scan_number++ )
			printf("There are a Total of %d Histories in Scan Number %d \n", histories_per_scan[scan_number], scan_number + 1);
		printf("There are a Total of %d Histories\n", total_histories);
	}
}
void count_histories_old()
{
	
	char data_filename[128];
	int file_size, num_histories, file_number = 0, gantry_position_number = 0;
	for( int gantry_angle = 0; gantry_angle < 360; gantry_angle += int(6.0), gantry_position_number++ )
	{
		for( int scan_number = 1; scan_number <= 1; scan_number++, file_number++ )
		{
			
			sprintf( data_filename, "%s%s/%s_trans%d_%03d%s", INPUT_DIRECTORY, INPUT_FOLDER, INPUT_BASE_NAME, scan_number, gantry_angle, FILE_EXTENSION );
			FILE *data_file = fopen(data_filename, "rb");
			if( data_file == 0 )
			{
				fputs( "Error Opening Data File:  Check that the directories are properly named.", (&__iob_func()[2]) ); 
				exit_program_if(true);
			}
			fseek( data_file, 0, 2 );
			file_size = ftell( data_file );
			if( BINARY_ENCODING )
			{
				if( file_size % 48 ) 
				{
					printf("ERROR! Problem with bytes_per_history!\n");
					exit_program_if(true);
				}
				num_histories = file_size / 48;	
			}
			else
				num_histories = file_size;							
			fclose(data_file);
			histories_per_file[file_number] = num_histories;
			histories_per_gantry_angle[gantry_position_number] += num_histories;
			histories_per_scan[scan_number-1] += num_histories;
			total_histories += num_histories;
			
			if( DEBUG_TEXT_ON )
				printf("There are %d Histories for Gantry Angle %d From Scan Number %d\n", num_histories, gantry_angle, scan_number);
		}
	}
}
void count_histories_v0()
{
	
	char data_filename[256];
	int num_histories, file_number = 0, gantry_position_number = 0;
	for( int gantry_angle = 0; gantry_angle < 360; gantry_angle += int(6.0), gantry_position_number++ )
	{
		for( int scan_number = 1; scan_number <= 1; scan_number++, file_number++ )
		{
			sprintf(data_filename, "%s%s/%s_%03d%s", INPUT_DIRECTORY, INPUT_FOLDER, INPUT_BASE_NAME, gantry_angle, FILE_EXTENSION  );
			std::ifstream data_file(data_filename, std::ios::binary);
			if( data_file == 0 )
			{
				fputs( "File not found:  Check that the directories and files are properly named.", (&__iob_func()[2]) ); 
				exit_program_if(true);
			}
			char magic_number[5];
			data_file.read(magic_number, 4);
			magic_number[4] = '\0';
			if( strcmp(magic_number, "PCTD") ) {
				puts("Error: unknown file type (should be PCTD)!\n");
				exit_program_if(true);
			}
			int version_id;
			data_file.read((char*)&version_id, sizeof(int));
			if( version_id == 0 )
			{
				data_file.read((char*)&num_histories, sizeof(int));						
				data_file.close();
				histories_per_file[file_number] = num_histories;
				histories_per_gantry_angle[gantry_position_number] += num_histories;
				histories_per_scan[scan_number-1] += num_histories;
				total_histories += num_histories;
			
				if( DEBUG_TEXT_ON )
					printf("There are %d Histories for Gantry Angle %d From Scan Number %d\n", num_histories, gantry_angle, scan_number);
			}
			else 
			{
				printf("ERROR: Data format is not Version (%d)!\n", version_id);
				exit_program_if(true);
			}			
		}
	}
}
void count_histories_v1()
{
	
	char data_filename[256];
	int num_histories, file_number = 0, gantry_position_number = 0;
	for( int gantry_angle = 0; gantry_angle < 360; gantry_angle += int(6.0), gantry_position_number++ )
	{
		for( int scan_number = 1; scan_number <= 1; scan_number++, file_number++ )
		{
			sprintf(data_filename, "%s%s/%s_%03d%s", INPUT_DIRECTORY, INPUT_FOLDER, INPUT_BASE_NAME, gantry_angle, FILE_EXTENSION  );
			std::ifstream data_file(data_filename, std::ios::binary);
			if( data_file == 0 )
			{
				fputs( "File not found:  Check that the directories and files are properly named.", (&__iob_func()[2]) ); 
				exit_program_if(true);
			}
			char magic_number[5];
			data_file.read(magic_number, 4);
			magic_number[4] = '\0';
			if( strcmp(magic_number, "PCTD") ) {
				puts("Error: unknown file type (should be PCTD)!\n");
				exit_program_if(true);
			}
			int version_id;
			data_file.read((char*)&version_id, sizeof(int));
			if( version_id == 1 )
			{
				data_file.read((char*)&num_histories, sizeof(int));						
				data_file.close();
				histories_per_file[file_number] = num_histories;
				histories_per_gantry_angle[gantry_position_number] += num_histories;
				histories_per_scan[scan_number-1] += num_histories;
				total_histories += num_histories;
			
				if( DEBUG_TEXT_ON )
					printf("There are %d Histories for Gantry Angle %d From Scan Number %d\n", num_histories, gantry_angle, scan_number);
			}
			else 
			{
				printf("ERROR: Data format is not Version (%d)!\n", version_id);
				exit_program_if(true);
			}			
		}
	}
}



void read_data_chunk( const int num_histories, const int start_file_num, const int end_file_num )
{
	
	
	
	
	
	unsigned int size_floats = sizeof(float) * num_histories;
	unsigned int size_ints = sizeof(int) * num_histories;

	t_in_1_h         = (float*) malloc(size_floats);
	t_in_2_h         = (float*) malloc(size_floats);
	t_out_1_h        = (float*) malloc(size_floats);
	t_out_2_h        = (float*) malloc(size_floats);
	u_in_1_h         = (float*) malloc(size_floats);
	u_in_2_h         = (float*) malloc(size_floats);
	u_out_1_h        = (float*) malloc(size_floats);
	u_out_2_h        = (float*) malloc(size_floats);
	v_in_1_h         = (float*) malloc(size_floats);
	v_in_2_h         = (float*) malloc(size_floats);
	v_out_1_h        = (float*) malloc(size_floats);
	v_out_2_h        = (float*) malloc(size_floats);		
	WEPL_h           = (float*) malloc(size_floats);
	gantry_angle_h   = (int*)   malloc(size_ints);

	if( WRITE_SSD_ANGLES )
	{
		ut_entry_angle	= (float*) malloc(size_floats);
		uv_entry_angle	= (float*) malloc(size_floats);
		ut_exit_angle	= (float*) malloc(size_floats);
		uv_exit_angle	= (float*) malloc(size_floats);
	}
	switch( DATA_FORMAT )
	{
		case OLD_FORMAT : read_data_chunk_old( num_histories, start_file_num, end_file_num - 1 );	break;
		case VERSION_0  : read_data_chunk_v0(  num_histories, start_file_num, end_file_num - 1 );	break;
		case VERSION_1  : read_data_chunk_v1(  num_histories, start_file_num, end_file_num - 1 );	break;
	}
}
void read_data_chunk_old( const int num_histories, const int start_file_num, const int end_file_num )
{
	int array_index = 0, gantry_position, gantry_angle, scan_number, scan_histories;
	float v_data[4], t_data[4], WEPL_data, gantry_angle_data, dummy_data;
	char tracker_plane[4];
	char data_filename[128];
	FILE* data_file;

	for( int file_num = start_file_num; file_num <= end_file_num; file_num++ )
	{
		gantry_position = file_num / 1;
		gantry_angle = int(gantry_position * 6.0);
		scan_number = file_num % 1 + 1;
		scan_histories = histories_per_file[file_num];

		printf("Reading File for Gantry Angle %d from Scan Number %d...\n", gantry_angle, scan_number );
		sprintf( data_filename, "%s%s/%s_trans%d_%03d%s", INPUT_DIRECTORY, INPUT_FOLDER, INPUT_BASE_NAME, scan_number, gantry_angle, FILE_EXTENSION );
		data_file = fopen( data_filename, "rb" );	

		for( int history = 0; history < scan_histories; history++, array_index++ ) 
		{
			fread(&v_data,				sizeof(float),	4, data_file);
			fread(&t_data,				sizeof(float),	4, data_file);
			fread(&tracker_plane,		sizeof(char),	4, data_file);
			fread(&WEPL_data,			sizeof(float),	1, data_file);
			fread(&gantry_angle_data,	sizeof(float),	1, data_file);
			fread(&dummy_data,			sizeof(float),	1, data_file); 
			if( DATA_IN_MM )
			{
				
				v_in_1_h[array_index]	= v_data[0] * 0.1;;
				v_in_2_h[array_index]	= v_data[1] * 0.1;;
				v_out_1_h[array_index]	= v_data[2] * 0.1;;
				v_out_2_h[array_index]	= v_data[3] * 0.1;;
				t_in_1_h[array_index]	= t_data[0] * 0.1;;
				t_in_2_h[array_index]	= t_data[1] * 0.1;;
				t_out_1_h[array_index]	= t_data[2] * 0.1;;
				t_out_2_h[array_index]	= t_data[3] * 0.1;;
				WEPL_h[array_index]		= WEPL_data * 0.1;;
			}
			else
			{
				v_in_1_h[array_index]	= v_data[0];
				v_in_2_h[array_index]	= v_data[1];
				v_out_1_h[array_index]	= v_data[2];
				v_out_2_h[array_index]	= v_data[3];
				t_in_1_h[array_index]	= t_data[0];
				t_in_2_h[array_index]	= t_data[1];
				t_out_1_h[array_index]	= t_data[2];
				t_out_2_h[array_index]	= t_data[3];
				WEPL_h[array_index]		= WEPL_data;
			}
			if( !MICAH_SIM )
			{
				u_in_1_h[array_index]	= SSD_u_Positions[int(tracker_plane[0])];
				u_in_2_h[array_index]	= SSD_u_Positions[int(tracker_plane[1])];
				u_out_1_h[array_index]	= SSD_u_Positions[int(tracker_plane[2])];
				u_out_2_h[array_index]	= SSD_u_Positions[int(tracker_plane[3])];
			}
			else
			{
				u_in_1_h[array_index]	= SSD_u_Positions[0];
				u_in_2_h[array_index]	= SSD_u_Positions[2];
				u_out_1_h[array_index]	= SSD_u_Positions[4];
				u_out_2_h[array_index]	= SSD_u_Positions[6];
			}
			if( SSD_IN_MM )
			{
				
				u_in_1_h[array_index]	*= 0.1;;
				u_in_2_h[array_index]	*= 0.1;;
				u_out_1_h[array_index]	*= 0.1;;
				u_out_2_h[array_index]	*= 0.1;;
			}
			gantry_angle_h[array_index] = int(gantry_angle_data);
		}
		fclose(data_file);		
	}
}
void read_data_chunk_v0( const int num_histories, const int start_file_num, const int end_file_num )
{	
	






























	

	char data_filename[128];
	char magic_number[5];
	int version_id;
	int file_histories;
	float projection_angle, beam_energy;
	int generation_date, preprocess_date;
	int phantom_name_size, data_source_size, prepared_by_size;
	char *phantom_name, *data_source, *prepared_by;
	int data_size;
	
	int gantry_position, gantry_angle, scan_number, scan_histories;
	
	for( int file_num = start_file_num; file_num <= end_file_num; file_num++ )
	{
		gantry_position = file_num / 1;
		gantry_angle = int(gantry_position * 6.0);
		scan_number = file_num % 1 + 1;
		scan_histories = histories_per_file[file_num];

		printf("Reading File for Gantry Angle %d from Scan Number %d...\n", gantry_angle, scan_number );
		sprintf(data_filename, "%s%s/%s_%03d%s", INPUT_DIRECTORY, INPUT_FOLDER, INPUT_BASE_NAME, gantry_angle, FILE_EXTENSION );	
		std::ifstream data_file(data_filename, std::ios::binary);
		if( data_file == 0 )
		{
			fputs( "File not found:  Check that the directories and files are properly named.", (&__iob_func()[2]) ); 
			exit_program_if(true);
		}

		data_file.read(magic_number, 4);
		magic_number[4] = '\0';
		if( strcmp(magic_number, "PCTD") ) {
			puts("Error: unknown file type (should be PCTD)!\n");
			exit_program_if(true);
		}
		
		data_file.read((char*)&version_id, sizeof(int));
		if( version_id == 0 )
		{
			data_file.read((char*)&file_histories, sizeof(int));
	
			puts("Reading headers from file...\n");
	
			data_file.read((char*)&projection_angle, sizeof(float));
			data_file.read((char*)&beam_energy, sizeof(float));
			data_file.read((char*)&generation_date, sizeof(int));
			data_file.read((char*)&preprocess_date, sizeof(int));
			data_file.read((char*)&phantom_name_size, sizeof(int));
			phantom_name = (char*)malloc(phantom_name_size);
			data_file.read(phantom_name, phantom_name_size);
			data_file.read((char*)&data_source_size, sizeof(int));
			data_source = (char*)malloc(data_source_size);
			data_file.read(data_source, data_source_size);
			data_file.read((char*)&prepared_by_size, sizeof(int));
			prepared_by = (char*)malloc(prepared_by_size);
			data_file.read(prepared_by, prepared_by_size);
	
			printf("Loading %d histories from file\n", num_histories);
	
			data_size = num_histories * sizeof(float);
	
			data_file.read((char*)t_in_1_h, data_size);
			data_file.read((char*)t_in_2_h, data_size);
			data_file.read((char*)t_out_1_h, data_size);
			data_file.read((char*)t_out_2_h, data_size);
			data_file.read((char*)v_in_1_h, data_size);
			data_file.read((char*)v_in_2_h, data_size);
			data_file.read((char*)v_out_1_h, data_size);
			data_file.read((char*)v_out_2_h, data_size);
			data_file.read((char*)u_in_1_h, data_size);
			data_file.read((char*)u_in_2_h, data_size);
			data_file.read((char*)u_out_1_h, data_size);
			data_file.read((char*)u_out_2_h, data_size);
			data_file.read((char*)WEPL_h, data_size);
			
			for( int i = 0; i < num_histories; i++ ) 
			{
				if( DATA_IN_MM )
				{
					
					v_in_1_h[i]		*= 0.1;
					v_in_2_h[i]		*= 0.1;
					v_out_1_h[i]	*= 0.1;
					v_out_2_h[i]	*= 0.1;
					t_in_1_h[i]		*= 0.1;
					t_in_2_h[i]		*= 0.1;
					t_out_1_h[i]	*= 0.1;
					t_out_2_h[i]	*= 0.1;
					t_in_1_h[i]		+= 0.0;
					t_in_2_h[i]		+= 0.0;
					t_out_1_h[i]	+= 0.0;
					t_out_2_h[i]	+= 0.0;
					WEPL_h[i]		*= 0.1;
					
						
					u_in_1_h[i]		*= 0.1;
					u_in_2_h[i]		*= 0.1;
					u_out_1_h[i]	*= 0.1;
					u_out_2_h[i]	*= 0.1;
					u_in_1_h[i]		+= 0.0;
					u_in_2_h[i]		+= 0.0;
					u_out_1_h[i]	+= 0.0;
					u_out_2_h[i]	+= 0.0;
					if( COUNT_0_WEPLS && WEPL_h[i] == 0 )
					{
						zero_WEPL++;
						zero_WEPL_files++;
					}
				}
				if( WRITE_SSD_ANGLES )
				{
					ut_entry_angle[i] = atan2( t_in_2_h[i] - t_in_1_h[i], u_in_2_h[i] - u_in_1_h[i] );	
					uv_entry_angle[i] = atan2( v_in_2_h[i] - v_in_1_h[i], u_in_2_h[i] - u_in_1_h[i] );	
					ut_exit_angle[i] = atan2( t_out_2_h[i] - t_out_1_h[i], u_out_2_h[i] - u_out_1_h[i] );	
					uv_exit_angle[i] = atan2( v_out_2_h[i] - v_out_1_h[i], u_out_2_h[i] - u_out_1_h[i] );	
				}
				gantry_angle_h[i] = int(projection_angle);				
			}
			data_file.close();
			if( WRITE_SSD_ANGLES )
			{
				sprintf(data_filename, "%s_%03d%s", "ut_entry_angle", gantry_angle, ".txt" );
				array_2_disk( data_filename, OUTPUT_DIRECTORY, OUTPUT_FOLDER, ut_entry_angle, 200, 200, int( 6.0 / 0.25 ), file_histories, true );
				sprintf(data_filename, "%s_%03d%s", "uv_entry_angle", gantry_angle, ".txt" );
				array_2_disk( "ut_entry_angle", OUTPUT_DIRECTORY, OUTPUT_FOLDER, uv_entry_angle, 200, 200, int( 6.0 / 0.25 ), file_histories, true );
				sprintf(data_filename, "%s_%03d%s", "ut_exit_angle", gantry_angle, ".txt" );
				array_2_disk( "ut_entry_angle", OUTPUT_DIRECTORY, OUTPUT_FOLDER, ut_exit_angle, 200, 200, int( 6.0 / 0.25 ), file_histories, true );
				sprintf(data_filename, "%s_%03d%s", "uv_exit_angle", gantry_angle, ".txt" );
				array_2_disk( "ut_entry_angle", OUTPUT_DIRECTORY, OUTPUT_FOLDER, uv_exit_angle, 200, 200, int( 6.0 / 0.25 ), file_histories, true );
			}
		}
	}
	if( COUNT_0_WEPLS )
	{
		std::cout << "Histories in " << gantry_angle_h[0] << "with WEPL = 0 :" << zero_WEPL_files << std::endl;
		zero_WEPL_files = 0;
	}
}
void read_data_chunk_v1( const int num_histories, const int start_file_num, const int end_file_num )
{
	






























	
	char data_filename[128];
	
	for( int file_num = start_file_num; file_num <= end_file_num; file_num++ )
	{
		int gantry_position = file_num / 1;
		int gantry_angle = int(gantry_position * 6.0);
		int scan_number = file_num % 1 + 1;
		

		printf("Reading File for Gantry Angle %d from Scan Number %d...\n", gantry_angle, scan_number );
		sprintf(data_filename, "%s%s/%s_%03d%s", INPUT_DIRECTORY, INPUT_FOLDER, INPUT_BASE_NAME, gantry_angle, FILE_EXTENSION );	
		std::ifstream data_file(data_filename, std::ios::binary);
		if( data_file == 0 )
		{
			fputs( "File not found:  Check that the directories and files are properly named.", (&__iob_func()[2]) ); 
			exit_program_if(true);
		}
		char magic_number[5];
		data_file.read(magic_number, 4);
		magic_number[4] = '\0';
		if( strcmp(magic_number, "PCTD") ) {
			puts("Error: unknown file type (should be PCTD)!\n");
			exit_program_if(true);
		}
		int version_id;
		data_file.read((char*)&version_id, sizeof(int));
		if( version_id == 0 )
		{
			int num_histories;
			data_file.read((char*)&num_histories, sizeof(int));
	
			puts("Reading headers from file...\n");
	
			float projection_angle, beam_energy;
			int generation_date, preprocess_date;
			int phantom_name_size, data_source_size, prepared_by_size;
			char *phantom_name, *data_source, *prepared_by;
	
			data_file.read((char*)&projection_angle, sizeof(float));
			data_file.read((char*)&beam_energy, sizeof(float));
			data_file.read((char*)&generation_date, sizeof(int));
			data_file.read((char*)&preprocess_date, sizeof(int));
			data_file.read((char*)&phantom_name_size, sizeof(int));
			phantom_name = (char*)malloc(phantom_name_size);
			data_file.read(phantom_name, phantom_name_size);
			data_file.read((char*)&data_source_size, sizeof(int));
			data_source = (char*)malloc(data_source_size);
			data_file.read(data_source, data_source_size);
			data_file.read((char*)&prepared_by_size, sizeof(int));
			prepared_by = (char*)malloc(prepared_by_size);
			data_file.read(prepared_by, prepared_by_size);
	
			printf("Loading %d histories from file\n", num_histories);
	
			int data_size = num_histories * sizeof(float);
	
			data_file.read((char*)t_in_1_h, data_size);
			data_file.read((char*)t_in_2_h, data_size);
			data_file.read((char*)t_out_1_h, data_size);
			data_file.read((char*)t_out_2_h, data_size);
			data_file.read((char*)v_in_1_h, data_size);
			data_file.read((char*)v_in_2_h, data_size);
			data_file.read((char*)v_out_1_h, data_size);
			data_file.read((char*)v_out_2_h, data_size);
			data_file.read((char*)u_in_1_h, data_size);
			data_file.read((char*)u_in_2_h, data_size);
			data_file.read((char*)u_out_1_h, data_size);
			data_file.read((char*)u_out_2_h, data_size);
			data_file.read((char*)WEPL_h, data_size);
	
			
			for( int i = 0; i < num_histories; i++ ) 
			{
				if( DATA_IN_MM )
				{
					
					v_in_1_h[i]		*= 0.1;
					v_in_2_h[i]		*= 0.1;
					v_out_1_h[i]	*= 0.1;
					v_out_2_h[i]	*= 0.1;
					t_in_1_h[i]		*= 0.1;
					t_in_2_h[i]		*= 0.1; 
					t_out_1_h[i]	*= 0.1; 
					t_out_2_h[i]	*= 0.1;
					WEPL_h[i]		*= 0.1;
					if( WEPL_h[i] < 0 )
						printf("WEPL[%d] = %3f\n", i, WEPL_h[i] );
					u_in_1_h[i]		*= 0.1;
					u_in_2_h[i]		*= 0.1;
					u_out_1_h[i]	*= 0.1;
					u_out_2_h[i]	*= 0.1;
				}
				gantry_angle_h[i] = int(projection_angle);
			}
			data_file.close();
		}
	}
}
void recon_volume_intersections( const int num_histories )
{
	
	unsigned int size_floats = sizeof(float) * num_histories;
	unsigned int size_ints = sizeof(int) * num_histories;
	unsigned int size_bool = sizeof(bool) * num_histories;

	
	cudaMalloc((void**) &t_in_1_d,				size_floats);
	cudaMalloc((void**) &t_in_2_d,				size_floats);
	cudaMalloc((void**) &t_out_1_d,				size_floats);
	cudaMalloc((void**) &t_out_2_d,				size_floats);
	cudaMalloc((void**) &u_in_1_d,				size_floats);
	cudaMalloc((void**) &u_in_2_d,				size_floats);
	cudaMalloc((void**) &u_out_1_d,				size_floats);
	cudaMalloc((void**) &u_out_2_d,				size_floats);
	cudaMalloc((void**) &v_in_1_d,				size_floats);
	cudaMalloc((void**) &v_in_2_d,				size_floats);
	cudaMalloc((void**) &v_out_1_d,				size_floats);
	cudaMalloc((void**) &v_out_2_d,				size_floats);		
	cudaMalloc((void**) &gantry_angle_d,		size_ints);

	cudaMalloc((void**) &x_entry_d,				size_floats);
	cudaMalloc((void**) &y_entry_d,				size_floats);
	cudaMalloc((void**) &z_entry_d,				size_floats);
	cudaMalloc((void**) &x_exit_d,				size_floats);
	cudaMalloc((void**) &y_exit_d,				size_floats);
	cudaMalloc((void**) &z_exit_d,				size_floats);
	cudaMalloc((void**) &xy_entry_angle_d,		size_floats);	
	cudaMalloc((void**) &xz_entry_angle_d,		size_floats);
	cudaMalloc((void**) &xy_exit_angle_d,		size_floats);
	cudaMalloc((void**) &xz_exit_angle_d,		size_floats);
	cudaMalloc((void**) &missed_recon_volume_d,	size_bool);	

	cudaMemcpy(t_in_1_d,		t_in_1_h,		size_floats, cudaMemcpyHostToDevice) ;
	cudaMemcpy(t_in_2_d,		t_in_2_h,		size_floats, cudaMemcpyHostToDevice) ;
	cudaMemcpy(t_out_1_d,		t_out_1_h,		size_floats, cudaMemcpyHostToDevice) ;
	cudaMemcpy(t_out_2_d,		t_out_2_h,		size_floats, cudaMemcpyHostToDevice) ;
	cudaMemcpy(u_in_1_d,		u_in_1_h,		size_floats, cudaMemcpyHostToDevice) ;
	cudaMemcpy(u_in_2_d,		u_in_2_h,		size_floats, cudaMemcpyHostToDevice) ;
	cudaMemcpy(u_out_1_d,		u_out_1_h,		size_floats, cudaMemcpyHostToDevice) ;
	cudaMemcpy(u_out_2_d,		u_out_2_h,		size_floats, cudaMemcpyHostToDevice) ;
	cudaMemcpy(v_in_1_d,		v_in_1_h,		size_floats, cudaMemcpyHostToDevice) ;
	cudaMemcpy(v_in_2_d,		v_in_2_h,		size_floats, cudaMemcpyHostToDevice) ;
	cudaMemcpy(v_out_1_d,		v_out_1_h,		size_floats, cudaMemcpyHostToDevice) ;
	cudaMemcpy(v_out_2_d,		v_out_2_h,		size_floats, cudaMemcpyHostToDevice) ;
	cudaMemcpy(gantry_angle_d,	gantry_angle_h,	size_ints,   cudaMemcpyHostToDevice) ;

	dim3 dimBlock(1024);
	dim3 dimGrid((int)(num_histories/1024)+1);
	recon_volume_intersections_GPU<<<dimGrid, dimBlock>>>
	(
		num_histories, gantry_angle_d, missed_recon_volume_d,
		t_in_1_d, t_in_2_d, t_out_1_d, t_out_2_d,
		u_in_1_d, u_in_2_d, u_out_1_d, u_out_2_d,
		v_in_1_d, v_in_2_d, v_out_1_d, v_out_2_d, 	
		x_entry_d, y_entry_d, z_entry_d, x_exit_d, y_exit_d, z_exit_d, 		
		xy_entry_angle_d, xz_entry_angle_d, xy_exit_angle_d, xz_exit_angle_d
	);

	free(t_in_1_h);
	free(t_in_2_h);
	free(v_in_1_h);
	free(v_in_2_h);
	free(u_in_1_h);
	free(u_in_2_h);
	free(t_out_1_h);
	free(t_out_2_h);
	free(v_out_1_h);
	free(v_out_2_h);
	free(u_out_1_h);
	free(u_out_2_h);

	cudaFree(t_in_1_d);
	cudaFree(t_in_2_d);
	cudaFree(v_in_1_d);
	cudaFree(v_in_2_d);
	cudaFree(u_in_1_d);
	cudaFree(u_in_2_d);
	cudaFree(t_out_1_d);
	cudaFree(t_out_2_d);
	cudaFree(v_out_1_d);
	cudaFree(v_out_2_d);
	cudaFree(u_out_1_d);
	cudaFree(u_out_2_d);
	cudaFree(gantry_angle_d);
}
__declspec(__global__) void recon_volume_intersections_GPU
(
	int num_histories, int* gantry_angle, bool* missed_recon_volume, float* t_in_1, float* t_in_2, float* t_out_1, float* t_out_2, float* u_in_1, float* u_in_2, 
	float* u_out_1, float* u_out_2, float* v_in_1, float* v_in_2, float* v_out_1, float* v_out_2, float* x_entry, float* y_entry, float* z_entry, float* x_exit, 
	float* y_exit, float* z_exit, float* xy_entry_angle, float* xz_entry_angle, float* xy_exit_angle, float* xz_exit_angle
)
{
	
	 
	
	
	
	
	
																										
	
	 
	
	 
	
	
	
	
	
	
			
	int i = threadIdx.x + blockIdx.x * 1024;
	if( i < num_histories )
	{
		double rotation_angle_radians = gantry_angle[i] * ( ( 4 * atan( 1.0 ) )/180.0 );
		
		
		

		
		
		
		
		
		
		
		double ut_entry_angle = atan2( t_in_2[i] - t_in_1[i], u_in_2[i] - u_in_1[i] );
		double u_entry, t_entry;
		
		
		bool entered = calculate_intercepts( u_in_2[i], t_in_2[i], ut_entry_angle, u_entry, t_entry );
		
		xy_entry_angle[i] = ut_entry_angle + rotation_angle_radians;

		
		x_entry[i] = ( cos( rotation_angle_radians ) * u_entry ) - ( sin( rotation_angle_radians ) * t_entry );
		y_entry[i] = ( sin( rotation_angle_radians ) * u_entry ) + ( cos( rotation_angle_radians ) * t_entry );
		
		
		
		double ut_exit_angle = atan2( t_out_2[i] - t_out_1[i], u_out_2[i] - u_out_1[i] );
		double u_exit, t_exit;
		
		
		bool exited = calculate_intercepts( u_out_1[i], t_out_1[i], ut_exit_angle, u_exit, t_exit );

		xy_exit_angle[i] = ut_exit_angle + rotation_angle_radians;

		
		x_exit[i] = ( cos( rotation_angle_radians ) * u_exit ) - ( sin( rotation_angle_radians ) * t_exit );
		y_exit[i] = ( sin( rotation_angle_radians ) * u_exit ) + ( cos( rotation_angle_radians ) * t_exit );
		
		
		
		
		
		double uv_entry_slope = ( v_in_2[i] - v_in_1[i] ) / ( u_in_2[i] - u_in_1[i] );
		double uv_exit_slope = ( v_out_2[i] - v_out_1[i] ) / ( u_out_2[i] - u_out_1[i] );
		
		xz_entry_angle[i] = atan2( v_in_2[i] - v_in_1[i], u_in_2[i] - u_in_1[i] );
		xz_exit_angle[i] = atan2( v_out_2[i] - v_out_1[i],  u_out_2[i] - u_out_1[i] );

		
		
		
		
		
		
		
		u_entry = ( cos( rotation_angle_radians ) * x_entry[i] ) + ( sin( rotation_angle_radians ) * y_entry[i] );
		u_exit = ( cos(rotation_angle_radians) * x_exit[i] ) + ( sin(rotation_angle_radians) * y_exit[i] );
		z_entry[i] = v_in_2[i] + uv_entry_slope * ( u_entry - u_in_2[i] );
		z_exit[i] = v_out_1[i] - uv_exit_slope * ( u_out_1[i] - u_exit );

		
		
		
		 
		
		
		if( entered && exited )
		{
			if( ( abs(z_entry[i]) < 6.0 * 0.5 ) && ( abs(z_exit[i]) > 6.0 * 0.5 ) )
			{
				double recon_cyl_fraction = abs( ( ( (z_exit[i] >= 0) - (z_exit[i] < 0) ) * 6.0 * 0.5 - z_entry[i] ) / ( z_exit[i] - z_entry[i] ) );
				x_exit[i] = x_entry[i] + recon_cyl_fraction * ( x_exit[i] - x_entry[i] );
				y_exit[i] = y_entry[i] + recon_cyl_fraction * ( y_exit[i] - y_entry[i] );
				z_exit[i] = ( (z_exit[i] >= 0) - (z_exit[i] < 0) ) * 6.0 * 0.5;
			}
			else if( abs(z_entry[i]) > 6.0 * 0.5 )
			{
				entered = false;
				exited = false;
			}
			 
			
			
			
			if( ( abs(t_out_1[i] - t_in_2[i]) > 5 ) || ( abs(v_out_1[i] - v_in_2[i]) > 5 ) )
			{
				entered = false;
				exited = false;
			}
		}

		
		missed_recon_volume[i] = !entered || !exited;
	}	
}
__declspec(__device__) bool calculate_intercepts( double u, double t, double ut_angle, double& u_intercept, double& t_intercept )
{
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	 
	 
	
	
	
	
	
	
	
	
	bool entry_in_cone = ( (ut_angle > ( atan( 1.0 ) )) && (ut_angle < ( 3 * atan( 1.0 ) )) ) || ( (ut_angle > ( 5 * atan( 1.0 ) )) && (ut_angle < ( 7 * atan( 1.0 ) )) );
	
	
	
	double u_temp;
	if( entry_in_cone )
	{
		u_temp = u;	
		u = -t;
		t = u_temp;
		ut_angle += ( 2 * atan( 1.0 ) );
	}
	double m = tan( ut_angle );											
	double b_in = t - m * u;											
		
	
	double a = 1 + pow(m, 2);											
	double b = 2 * m * b_in;											
	double c = pow(b_in, 2) - pow(8.0, 2 );				
	double entry_discriminant = pow(b, 2) - (4 * a * c);				
	bool intersected = ( entry_discriminant > 0 );						
	
	
	
	
	
	
	
	
	
	
	
	
	if( intersected )
	{
		double u_intercept_1		= ( sqrt(entry_discriminant) - b ) / ( 2 * a );
		double u_intercept_2		= ( sqrt(entry_discriminant) + b ) / ( 2 * a );
		double t_intercept_1		= m * u_intercept_1 + b_in;
		double t_intercept_2		= m * u_intercept_2 - b_in;
		double squared_distance_1	= pow( u_intercept_1 - u, 2 ) + pow( t_intercept_1 - t, 2 );
		double squared_distance_2	= pow( u_intercept_2 + u, 2 ) + pow( t_intercept_2 + t, 2 );
		u_intercept					= u_intercept_1 * ( squared_distance_1 <= squared_distance_2 ) - u_intercept_2 * ( squared_distance_1 > squared_distance_2 );
		t_intercept					= t_intercept_1 * ( squared_distance_1 <= squared_distance_2 ) - t_intercept_2 * ( squared_distance_1 > squared_distance_2 );
	}
	
	if( entry_in_cone )
	{
		u_temp = u_intercept;
		u_intercept = t_intercept;
		t_intercept = -u_temp;
		ut_angle -= ( 2 * atan( 1.0 ) );
	}

	return intersected;
}
void binning( const int num_histories )
{
	unsigned int size_floats	= sizeof(float) * num_histories;
	unsigned int size_ints		= sizeof(int) * num_histories;
	unsigned int size_bool		= sizeof(bool) * num_histories;

	missed_recon_volume_h		= (bool*)  calloc( num_histories, sizeof(bool)	);
	
	bin_num_h					= (int*)   calloc( num_histories, sizeof(int)   );
	x_entry_h					= (float*) calloc( num_histories, sizeof(float) );
	y_entry_h					= (float*) calloc( num_histories, sizeof(float) );
	z_entry_h					= (float*) calloc( num_histories, sizeof(float) );
	x_exit_h					= (float*) calloc( num_histories, sizeof(float) );
	y_exit_h					= (float*) calloc( num_histories, sizeof(float) );
	z_exit_h					= (float*) calloc( num_histories, sizeof(float) );	
	xy_entry_angle_h			= (float*) calloc( num_histories, sizeof(float) );	
	xz_entry_angle_h			= (float*) calloc( num_histories, sizeof(float) );
	xy_exit_angle_h				= (float*) calloc( num_histories, sizeof(float) );
	xz_exit_angle_h				= (float*) calloc( num_histories, sizeof(float) );

	cudaMalloc((void**) &WEPL_d,				size_floats);
	cudaMalloc((void**) &bin_num_d,	size_ints );

	cudaMemcpy( WEPL_d,		WEPL_h,		size_floats,	cudaMemcpyHostToDevice) ;
	cudaMemcpy( bin_num_d,	bin_num_h,	size_ints,		cudaMemcpyHostToDevice );

	dim3 dimBlock( 1024 );
	dim3 dimGrid( (int)( num_histories/1024 ) + 1 );
	binning_GPU<<<dimGrid, dimBlock>>>
	( 
		num_histories, bin_counts_d, bin_num_d, missed_recon_volume_d,
		x_entry_d, y_entry_d, z_entry_d, x_exit_d, y_exit_d, z_exit_d, 
		mean_WEPL_d, mean_rel_ut_angle_d, mean_rel_uv_angle_d, WEPL_d, 
		xy_entry_angle_d, xz_entry_angle_d, xy_exit_angle_d, xz_exit_angle_d
	);
	cudaMemcpy( missed_recon_volume_h,		missed_recon_volume_d,		size_bool,		cudaMemcpyDeviceToHost );
	cudaMemcpy( bin_num_h,					bin_num_d,					size_ints,		cudaMemcpyDeviceToHost );
	cudaMemcpy( x_entry_h,					x_entry_d,					size_floats,	cudaMemcpyDeviceToHost );
	cudaMemcpy( y_entry_h,					y_entry_d,					size_floats,	cudaMemcpyDeviceToHost );
	cudaMemcpy( z_entry_h,					z_entry_d,					size_floats,	cudaMemcpyDeviceToHost );
	cudaMemcpy( x_exit_h,					x_exit_d,					size_floats,	cudaMemcpyDeviceToHost );
	cudaMemcpy( y_exit_h,					y_exit_d,					size_floats,	cudaMemcpyDeviceToHost );
	cudaMemcpy( z_exit_h,					z_exit_d,					size_floats,	cudaMemcpyDeviceToHost );
	cudaMemcpy( xy_entry_angle_h,			xy_entry_angle_d,			size_floats,	cudaMemcpyDeviceToHost );
	cudaMemcpy( xz_entry_angle_h,			xz_entry_angle_d,			size_floats,	cudaMemcpyDeviceToHost );
	cudaMemcpy( xy_exit_angle_h,			xy_exit_angle_d,			size_floats,	cudaMemcpyDeviceToHost );
	cudaMemcpy( xz_exit_angle_h,			xz_exit_angle_d,			size_floats,	cudaMemcpyDeviceToHost );

	char data_filename[128];
	if( WRITE_BIN_WEPLS )
	{
		sprintf(data_filename, "%s_%03d%s", "bin_numbers", gantry_angle_h[0], ".txt" );
		array_2_disk( data_filename, OUTPUT_DIRECTORY, OUTPUT_FOLDER, bin_num_h, 200, 200, int( 6.0 / 0.25 ), num_histories, true );
	}

	int offset = 0;
	for( int i = 0; i < num_histories; i++ )
	{
		if( !missed_recon_volume_h[i] && ( bin_num_h[i] >= 0 ) )
		{
			bin_num_vector.push_back( bin_num_h[i] );
			
			WEPL_vector.push_back( WEPL_h[i] );
			x_entry_vector.push_back( x_entry_h[i] );
			y_entry_vector.push_back( y_entry_h[i] );
			z_entry_vector.push_back( z_entry_h[i] );
			x_exit_vector.push_back( x_exit_h[i] );
			y_exit_vector.push_back( y_exit_h[i] );
			z_exit_vector.push_back( z_exit_h[i] );
			xy_entry_angle_vector.push_back( xy_entry_angle_h[i] );
			xz_entry_angle_vector.push_back( xz_entry_angle_h[i] );
			xy_exit_angle_vector.push_back( xy_exit_angle_h[i] );
			xz_exit_angle_vector.push_back( xz_exit_angle_h[i] );
			
			
			
			
			
			
			
			
			
			
			
			
			
			offset++;
			recon_vol_histories++;
		}
	}
	printf( "%d out of %d histories passed intersection cuts this iteration\n", offset, num_histories );

	free( missed_recon_volume_h ); 
	free( bin_num_h );
	free( x_entry_h );
	free( y_entry_h );
	free( z_entry_h );
	free( x_exit_h );
	free( y_exit_h );
	free( z_exit_h );
	free( xy_entry_angle_h );
	free( xz_entry_angle_h );
	free( xy_exit_angle_h );
	free( xz_exit_angle_h );

	
	cudaFree( xy_entry_angle_d );
	cudaFree( xz_entry_angle_d );
	cudaFree( xy_exit_angle_d );
	cudaFree( xz_exit_angle_d );
}
__declspec(__global__) void binning_GPU
( 
	int num_histories, int* bin_counts, int* bin_num, bool* missed_recon_volume, 
	float* x_entry, float* y_entry, float* z_entry, float* x_exit, float* y_exit, float* z_exit, 
	float* mean_WEPL, float* mean_rel_ut_angle, float* mean_rel_uv_angle, float* WEPL, 
	float* xy_entry_angle, float* xz_entry_angle, float* xy_exit_angle, float* xz_exit_angle
)
{
	int i = threadIdx.x + blockIdx.x * 1024;
	if( i < num_histories )
	{		
			 
			
			
			
			 
			double x_midpath, y_midpath, z_midpath, path_angle;
			int angle_bin, t_bin, v_bin;
			double angle, t, v;
			double rel_ut_angle, rel_uv_angle;

			
			x_midpath = ( x_entry[i] + x_exit[i] ) / 2;
			y_midpath = ( y_entry[i] + y_exit[i] ) / 2;
			z_midpath = ( z_entry[i] + z_exit[i] ) / 2;

			
			path_angle = atan2( ( y_exit[i] - y_entry[i] ) , ( x_exit[i] - x_entry[i] ) );
			if( path_angle < 0 )
				path_angle += 2*( 4 * atan( 1.0 ) );
			angle_bin = int( ( path_angle * ( 180.0/( 4 * atan( 1.0 ) ) ) / 6.0 ) + 0.5) % int( 360 / 6.0 + 0.5 );	
			angle = angle_bin * 6.0 * ( ( 4 * atan( 1.0 ) )/180.0 );

			
			t = y_midpath * cos(angle) - x_midpath * sin(angle);
			t_bin = int( (t / 0.1 ) + int( 35.0 / 0.1 + 0.5 )/2);			
			
			v = z_midpath;
			v_bin = int( (v / 0.25 ) + int( 9.0 / 0.25 + 0.5 )/2);
		
			
			if( (t_bin >= 0) && (v_bin >= 0) && (t_bin < int( 35.0 / 0.1 + 0.5 )) && (v_bin < int( 9.0 / 0.25 + 0.5 )) )
			{
				bin_num[i] = t_bin + angle_bin * int( 35.0 / 0.1 + 0.5 ) + v_bin * int( 35.0 / 0.1 + 0.5 ) * int( 360 / 6.0 + 0.5 );
				if( !missed_recon_volume[i] )
				{
					
					
					
					
					rel_ut_angle = xy_exit_angle[i] - xy_entry_angle[i];
					if( rel_ut_angle > ( 4 * atan( 1.0 ) ) )
						rel_ut_angle -= 2 * ( 4 * atan( 1.0 ) );
					if( rel_ut_angle < -( 4 * atan( 1.0 ) ) )
						rel_ut_angle += 2 * ( 4 * atan( 1.0 ) );
					rel_uv_angle = xz_exit_angle[i] - xz_entry_angle[i];
					if( rel_uv_angle > ( 4 * atan( 1.0 ) ) )
						rel_uv_angle -= 2 * ( 4 * atan( 1.0 ) );
					if( rel_uv_angle < -( 4 * atan( 1.0 ) ) )
						rel_uv_angle += 2 * ( 4 * atan( 1.0 ) );
					atomicAdd( &bin_counts[bin_num[i]], 1 );
					atomicAdd( &mean_WEPL[bin_num[i]], WEPL[i] );
					atomicAdd( &mean_rel_ut_angle[bin_num[i]], rel_ut_angle );
					atomicAdd( &mean_rel_ut_angle[bin_num[i]], rel_uv_angle );
					
					
				}
				else
					bin_num[i] = -1;
			}
	}
}



void calculate_means()
{
	puts("Calculating the Mean for Each Bin Before Cuts...");

	dim3 dimBlock( int( 35.0 / 0.1 + 0.5 ) );
	dim3 dimGrid( int( 9.0 / 0.25 + 0.5 ), int( 360 / 6.0 + 0.5 ) );   
	calculate_means_GPU<<< dimGrid, dimBlock >>>
	( 
		bin_counts_d, mean_WEPL_d, mean_rel_ut_angle_d, mean_rel_uv_angle_d
	);

	if( WRITE_WEPL_DISTS )
	{
		cudaMemcpy( mean_WEPL_h,	mean_WEPL_d,	( ( int( 360 / 6.0 + 0.5 ) * int( 35.0 / 0.1 + 0.5 ) * int( 9.0 / 0.25 + 0.5 ) ) * sizeof(float) ), cudaMemcpyDeviceToHost );
		int* empty_parameter;
		write_bin_data( "WEPL_dist_pre_test2", empty_parameter, mean_WEPL_h, ( int( 360 / 6.0 + 0.5 ) * int( 35.0 / 0.1 + 0.5 ) * int( 9.0 / 0.25 + 0.5 ) ), MEANS, ALL_BINS, BY_BIN );
	}
	
	
	
	

	
	
	
	
	
	free(bin_counts_h);
	free(mean_WEPL_h);
	free(mean_rel_ut_angle_h);
	free(mean_rel_uv_angle_h);
}
__declspec(__global__) void calculate_means_GPU( int* bin_counts, float* mean_WEPL, float* mean_rel_ut_angle, float* mean_rel_uv_angle )
{
	int v = blockIdx.x, angle = blockIdx.y, t = threadIdx.x;
	int bin = t + angle * int( 35.0 / 0.1 + 0.5 ) + v * int( 35.0 / 0.1 + 0.5 ) * int( 360 / 6.0 + 0.5 );
	if( bin_counts[bin] > 0 )
	{
		mean_WEPL[bin] /= bin_counts[bin];		
		mean_rel_ut_angle[bin] /= bin_counts[bin];
		mean_rel_uv_angle[bin] /= bin_counts[bin];
	}
}
void sum_squared_deviations( const int start_position, const int num_histories )
{
	unsigned int size_floats = sizeof(float) * num_histories;
	unsigned int size_ints = sizeof(int) * num_histories;

	cudaMalloc((void**) &bin_num_d,				size_ints);
	cudaMalloc((void**) &WEPL_d,				size_floats);
	cudaMalloc((void**) &xy_entry_angle_d,		size_floats);
	cudaMalloc((void**) &xz_entry_angle_d,		size_floats);
	cudaMalloc((void**) &xy_exit_angle_d,		size_floats);
	cudaMalloc((void**) &xz_exit_angle_d,		size_floats);
	cudaMalloc((void**) &xy_exit_angle_d,		size_floats);
	cudaMalloc((void**) &xz_exit_angle_d,		size_floats);

	cudaMemcpy( bin_num_d,				&bin_num_vector[start_position],			size_ints, cudaMemcpyHostToDevice);
	cudaMemcpy( WEPL_d,					&WEPL_vector[start_position],				size_floats, cudaMemcpyHostToDevice);
	cudaMemcpy( xy_entry_angle_d,		&xy_entry_angle_vector[start_position],		size_floats, cudaMemcpyHostToDevice);
	cudaMemcpy( xz_entry_angle_d,		&xz_entry_angle_vector[start_position],		size_floats, cudaMemcpyHostToDevice);
	cudaMemcpy( xy_exit_angle_d,		&xy_exit_angle_vector[start_position],		size_floats, cudaMemcpyHostToDevice);
	cudaMemcpy( xz_exit_angle_d,		&xz_exit_angle_vector[start_position],		size_floats, cudaMemcpyHostToDevice);

	
	
	
	
	
	

	dim3 dimBlock(1024);
	dim3 dimGrid((int)(num_histories/1024)+1);
	sum_squared_deviations_GPU<<<dimGrid, dimBlock>>>
	( 
		num_histories, bin_num_d, mean_WEPL_d, mean_rel_ut_angle_d, mean_rel_uv_angle_d, 
		WEPL_d, xy_entry_angle_d, xz_entry_angle_d,  xy_exit_angle_d, xz_exit_angle_d,
		stddev_WEPL_d, stddev_rel_ut_angle_d, stddev_rel_uv_angle_d
	);
	cudaFree( bin_num_d );
	cudaFree( WEPL_d );
	cudaFree( xy_entry_angle_d );
	cudaFree( xz_entry_angle_d );
	cudaFree( xy_exit_angle_d );
	cudaFree( xz_exit_angle_d );
}
__declspec(__global__) void sum_squared_deviations_GPU
( 
	int num_histories, int* bin_num, float* mean_WEPL, float* mean_rel_ut_angle, float* mean_rel_uv_angle,  
	float* WEPL, float* xy_entry_angle, float* xz_entry_angle, float* xy_exit_angle, float* xz_exit_angle,
	float* stddev_WEPL, float* stddev_rel_ut_angle, float* stddev_rel_uv_angle
)
{
	double WEPL_difference, rel_ut_angle_difference, rel_uv_angle_difference;
	int i = threadIdx.x + blockIdx.x * 1024;
	if( i < num_histories )
	{
		double rel_ut_angle = xy_exit_angle[i] - xy_entry_angle[i];
		if( rel_ut_angle > ( 4 * atan( 1.0 ) ) )
			rel_ut_angle -= 2 * ( 4 * atan( 1.0 ) );
		if( rel_ut_angle < -( 4 * atan( 1.0 ) ) )
			rel_ut_angle += 2 * ( 4 * atan( 1.0 ) );
		double rel_uv_angle = xz_exit_angle[i] - xz_entry_angle[i];
		if( rel_uv_angle > ( 4 * atan( 1.0 ) ) )
			rel_uv_angle -= 2 * ( 4 * atan( 1.0 ) );
		if( rel_uv_angle < -( 4 * atan( 1.0 ) ) )
			rel_uv_angle += 2 * ( 4 * atan( 1.0 ) );
		WEPL_difference = WEPL[i] - mean_WEPL[bin_num[i]];
		rel_ut_angle_difference = rel_ut_angle - mean_rel_ut_angle[bin_num[i]];
		rel_uv_angle_difference = rel_uv_angle - mean_rel_uv_angle[bin_num[i]];

		atomicAdd( &stddev_WEPL[bin_num[i]], pow( WEPL_difference, 2 ) );
		atomicAdd( &stddev_rel_ut_angle[bin_num[i]], pow( rel_ut_angle_difference, 2 ) );
		atomicAdd( &stddev_rel_uv_angle[bin_num[i]], pow( rel_uv_angle_difference, 2 ) );
	}
}
void calculate_standard_deviations()
{
	puts("Calculating standard deviations for each bin...");
	dim3 dimBlock( int( 35.0 / 0.1 + 0.5 ) );
	dim3 dimGrid( int( 9.0 / 0.25 + 0.5 ), int( 360 / 6.0 + 0.5 ) );   
	calculate_standard_deviations_GPU<<< dimGrid, dimBlock >>>
	( 
		bin_counts_d, stddev_WEPL_d, stddev_rel_ut_angle_d, stddev_rel_uv_angle_d
	);
	
}
__declspec(__global__) void calculate_standard_deviations_GPU( int* bin_counts, float* stddev_WEPL, float* stddev_rel_ut_angle, float* stddev_rel_uv_angle )
{
	int v = blockIdx.x, angle = blockIdx.y, t = threadIdx.x;
	int bin = t + angle * int( 35.0 / 0.1 + 0.5 ) + v * int( 35.0 / 0.1 + 0.5 ) * int( 360 / 6.0 + 0.5 );
	if( bin_counts[bin] > 0 )
	{
		
		stddev_WEPL[bin] = sqrtf( stddev_WEPL[bin] / ( bin_counts[bin] - SAMPLE_STD_DEV ) );		
		stddev_rel_ut_angle[bin] = sqrtf( stddev_rel_ut_angle[bin] / ( bin_counts[bin] - SAMPLE_STD_DEV ) );
		stddev_rel_uv_angle[bin] = sqrtf( stddev_rel_uv_angle[bin] / ( bin_counts[bin] - SAMPLE_STD_DEV ) );
	}
	syncthreads();
	bin_counts[bin] = 0;
}
void statistical_cuts( const int start_position, const int num_histories )
{
	unsigned int size_floats = sizeof(float) * num_histories;
	unsigned int size_ints = sizeof(int) * num_histories;
	unsigned int size_bools = sizeof(bool) * num_histories;

	failed_cuts_h = (bool*) calloc ( num_histories, sizeof(bool) );
	
	cudaMalloc( (void**) &bin_num_d,			size_ints );
	cudaMalloc( (void**) &WEPL_d,				size_floats );
	cudaMalloc( (void**) &xy_entry_angle_d,		size_floats );
	cudaMalloc( (void**) &xz_entry_angle_d,		size_floats );
	cudaMalloc( (void**) &xy_exit_angle_d,		size_floats );
	cudaMalloc( (void**) &xz_exit_angle_d,		size_floats );
	cudaMalloc( (void**) &failed_cuts_d,		size_bools );

	cudaMemcpy( bin_num_d,				&bin_num_vector[start_position],			size_ints,		cudaMemcpyHostToDevice );
	cudaMemcpy( WEPL_d,					&WEPL_vector[start_position],				size_floats,	cudaMemcpyHostToDevice );
	cudaMemcpy( xy_entry_angle_d,		&xy_entry_angle_vector[start_position],		size_floats,	cudaMemcpyHostToDevice );
	cudaMemcpy( xz_entry_angle_d,		&xz_entry_angle_vector[start_position],		size_floats,	cudaMemcpyHostToDevice );
	cudaMemcpy( xy_exit_angle_d,		&xy_exit_angle_vector[start_position],		size_floats,	cudaMemcpyHostToDevice );
	cudaMemcpy( xz_exit_angle_d,		&xz_exit_angle_vector[start_position],		size_floats,	cudaMemcpyHostToDevice );
	cudaMemcpy( failed_cuts_d,			failed_cuts_h,								size_bools,		cudaMemcpyHostToDevice );

	
	
	
	
	
	

	dim3 dimBlock(1024);
	dim3 dimGrid( int( num_histories / 1024 ) + 1 );  
	statistical_cuts_GPU<<< dimGrid, dimBlock >>>
	( 
		num_histories, bin_counts_d, bin_num_d, sinogram_d, WEPL_d, 
		xy_entry_angle_d, xz_entry_angle_d, xy_exit_angle_d, xz_exit_angle_d, 
		mean_WEPL_d, mean_rel_ut_angle_d, mean_rel_uv_angle_d, 
		stddev_WEPL_d, stddev_rel_ut_angle_d, stddev_rel_uv_angle_d, 
		failed_cuts_d
	);
	cudaMemcpy( failed_cuts_h, failed_cuts_d, size_bools, cudaMemcpyDeviceToHost);

	for( int i = 0; i < num_histories; i++ )
	{
		if( !failed_cuts_h[i] )
		{
			bin_num_vector[post_cut_histories] = bin_num_vector[start_position + i];
			
			WEPL_vector[post_cut_histories] = WEPL_vector[start_position + i];
			x_entry_vector[post_cut_histories] = x_entry_vector[start_position + i];
			y_entry_vector[post_cut_histories] = y_entry_vector[start_position + i];
			z_entry_vector[post_cut_histories] = z_entry_vector[start_position + i];
			x_exit_vector[post_cut_histories] = x_exit_vector[start_position + i];
			y_exit_vector[post_cut_histories] = y_exit_vector[start_position + i];
			z_exit_vector[post_cut_histories] = z_exit_vector[start_position + i];
			xy_entry_angle_vector[post_cut_histories] = xy_entry_angle_vector[start_position + i];
			xz_entry_angle_vector[post_cut_histories] = xz_entry_angle_vector[start_position + i];
			xy_exit_angle_vector[post_cut_histories] = xy_exit_angle_vector[start_position + i];
			xz_exit_angle_vector[post_cut_histories] = xz_exit_angle_vector[start_position + i];
			
			
			
			
			
			
			
			
			
			
			
			
			
			post_cut_histories++;
		}
	}
	
	
}
__declspec(__global__) void statistical_cuts_GPU
( 
	int num_histories, int* bin_counts, int* bin_num, float* sinogram, float* WEPL, 
	float* xy_entry_angle, float* xz_entry_angle, float* xy_exit_angle, float* xz_exit_angle, 
	float* mean_WEPL, float* mean_rel_ut_angle, float* mean_rel_uv_angle,
	float* stddev_WEPL, float* stddev_rel_ut_angle, float* stddev_rel_uv_angle, 
	bool* failed_cuts
)
{
	int i = threadIdx.x + blockIdx.x * 1024;
	if( i < num_histories )
	{
		double rel_ut_angle = xy_exit_angle[i] - xy_entry_angle[i];
		if( rel_ut_angle > ( 4 * atan( 1.0 ) ) )
			rel_ut_angle -= 2 * ( 4 * atan( 1.0 ) );
		if( rel_ut_angle < -( 4 * atan( 1.0 ) ) )
			rel_ut_angle += 2 * ( 4 * atan( 1.0 ) );
		double rel_uv_angle = xz_exit_angle[i] - xz_entry_angle[i];
		if( rel_uv_angle > ( 4 * atan( 1.0 ) ) )
			rel_uv_angle -= 2 * ( 4 * atan( 1.0 ) );
		if( rel_uv_angle < -( 4 * atan( 1.0 ) ) )
			rel_uv_angle += 2 * ( 4 * atan( 1.0 ) );
		bool passed_ut_cut = ( abs( rel_ut_angle - mean_rel_ut_angle[bin_num[i]] ) < ( 3 * stddev_rel_ut_angle[bin_num[i]] ) );
		bool passed_uv_cut = ( abs( rel_uv_angle - mean_rel_uv_angle[bin_num[i]] ) < ( 3 * stddev_rel_uv_angle[bin_num[i]] ) );
		bool passed_WEPL_cut = ( abs( mean_WEPL[bin_num[i]] - WEPL[i] ) <= ( 3 * stddev_WEPL[bin_num[i]] ) );
		failed_cuts[i] = !passed_ut_cut || !passed_uv_cut || !passed_WEPL_cut;

		if( !failed_cuts[i] )
		{
			atomicAdd( &bin_counts[bin_num[i]], 1 );
			atomicAdd( &sinogram[bin_num[i]], WEPL[i] );			
		}
	}
}



void initialize_sinogram()
{
	puts("Allocating host/GPU memory and initializing sinogram...");
	sinogram_h = (float*) calloc( ( int( 360 / 6.0 + 0.5 ) * int( 35.0 / 0.1 + 0.5 ) * int( 9.0 / 0.25 + 0.5 ) ), sizeof(float) );
	cudaMalloc((void**) &sinogram_d, ( ( int( 360 / 6.0 + 0.5 ) * int( 35.0 / 0.1 + 0.5 ) * int( 9.0 / 0.25 + 0.5 ) ) * sizeof(float) ) );
	cudaMemcpy( sinogram_d,	sinogram_h,	( ( int( 360 / 6.0 + 0.5 ) * int( 35.0 / 0.1 + 0.5 ) * int( 9.0 / 0.25 + 0.5 ) ) * sizeof(float) ), cudaMemcpyHostToDevice );	
}
void construct_sinogram()
{
	puts("Recalculating the mean WEPL for each bin and constructing the sinogram...");
	dim3 dimBlock( int( 35.0 / 0.1 + 0.5 ) );
	dim3 dimGrid( int( 9.0 / 0.25 + 0.5 ), int( 360 / 6.0 + 0.5 ) );   
	construct_sinogram_GPU<<< dimGrid, dimBlock >>>( bin_counts_d, sinogram_d );

	if( WRITE_WEPL_DISTS )
	{
		cudaMemcpy( sinogram_h,	sinogram_d,	( ( int( 360 / 6.0 + 0.5 ) * int( 35.0 / 0.1 + 0.5 ) * int( 9.0 / 0.25 + 0.5 ) ) * sizeof(float) ), cudaMemcpyDeviceToHost );
		int* empty_parameter;
		write_bin_data( "WEPL_dist_post_test2", empty_parameter, sinogram_h, ( int( 360 / 6.0 + 0.5 ) * int( 35.0 / 0.1 + 0.5 ) * int( 9.0 / 0.25 + 0.5 ) ), MEANS, ALL_BINS, BY_BIN );
	}
	
	

	
	
	
}
__declspec(__global__) void construct_sinogram_GPU( int* bin_counts, float* sinogram )
{
	int v = blockIdx.x, angle = blockIdx.y, t = threadIdx.x;
	int bin = t + angle * int( 35.0 / 0.1 + 0.5 ) + v * int( 35.0 / 0.1 + 0.5 ) * int( 360 / 6.0 + 0.5 );
	if( bin_counts[bin] > 0 )
		sinogram[bin] /= bin_counts[bin];		
}
void FBP()
{
	
	filter();

	free(sinogram_h);
	cudaFree(sinogram_d);

	puts("Performing backprojection...");

	bool FBP_on_GPU = true;
	FBP_image_h = (float*) calloc( ( 200 * 200 * int( 6.0 / 0.25 ) ), sizeof(float) );
	if( FBP_image_h == 0 ) 
	{
		printf("ERROR: Memory not allocated for FBP_image_h!\n");
		exit_program_if(true);
	}
	if( FBP_on_GPU )
	{
		free(sinogram_filtered_h);
		cudaMalloc((void**) &FBP_image_d, ( ( 200 * 200 * int( 6.0 / 0.25 ) ) * sizeof(float) ) );
		cudaMemcpy( FBP_image_d, FBP_image_h, ( ( 200 * 200 * int( 6.0 / 0.25 ) ) * sizeof(float) ), cudaMemcpyHostToDevice );

		dim3 dimBlock( int( 6.0 / 0.25 ) );
		dim3 dimGrid( 200, 200 );   
		backprojection_GPU<<< dimGrid, dimBlock >>>( sinogram_filtered_d, FBP_image_d );
		cudaFree(sinogram_filtered_d);
	}
	else
	{
		cudaMemcpy(sinogram_filtered_h, sinogram_filtered_d, ( ( int( 360 / 6.0 + 0.5 ) * int( 35.0 / 0.1 + 0.5 ) * int( 9.0 / 0.25 + 0.5 ) ) * sizeof(float) ), cudaMemcpyDeviceToHost);
		cudaFree(sinogram_filtered_d);
		backprojection();	
		free(sinogram_filtered_h);
	}

	if( WRITE_FBP_IMAGE )
	{
		cudaMemcpy( FBP_image_h, FBP_image_d, ( ( 200 * 200 * int( 6.0 / 0.25 ) ) * sizeof(float) ), cudaMemcpyDeviceToHost );
		array_2_disk( "FBP_image_h", OUTPUT_DIRECTORY, OUTPUT_FOLDER, FBP_image_h, 200, 200, int( 6.0 / 0.25 ), ( 200 * 200 * int( 6.0 / 0.25 ) ), true );
	}

	
	FBP_image_2_hull();
	
	

	
	if( X_K0 != FBP_IMAGE && X_K0 != HYBRID )
	{
		free(FBP_image_h);
		cudaFree(FBP_image_d);
	}
}
void filter()
{
	puts("Filtering the sinogram...");	

	sinogram_filtered_h = (float*) calloc( ( int( 360 / 6.0 + 0.5 ) * int( 35.0 / 0.1 + 0.5 ) * int( 9.0 / 0.25 + 0.5 ) ), sizeof(float) );
	cudaMalloc((void**) &sinogram_filtered_d, ( ( int( 360 / 6.0 + 0.5 ) * int( 35.0 / 0.1 + 0.5 ) * int( 9.0 / 0.25 + 0.5 ) ) * sizeof(float) ));
	cudaMemcpy( sinogram_filtered_d, sinogram_filtered_h, ( ( int( 360 / 6.0 + 0.5 ) * int( 35.0 / 0.1 + 0.5 ) * int( 9.0 / 0.25 + 0.5 ) ) * sizeof(float) ), cudaMemcpyHostToDevice);

	dim3 dimBlock( int( 35.0 / 0.1 + 0.5 ) );
	dim3 dimGrid( int( 9.0 / 0.25 + 0.5 ), int( 360 / 6.0 + 0.5 ) );   	
	filter_GPU<<< dimGrid, dimBlock >>>( sinogram_d, sinogram_filtered_d );
}
__declspec(__global__) void filter_GPU( float* sinogram, float* sinogram_filtered )
{		
	int v_bin = blockIdx.x, angle_bin = blockIdx.y, t_bin = threadIdx.x;
	int t_bin_ref, t_bin_sep, strip_index; 
	double filtered, t, scale_factor;
	double v = ( v_bin - int( 9.0 / 0.25 + 0.5 )/2 ) * 0.25 + 0.25/2.0;
	
	
	for( t_bin_ref = 0; t_bin_ref < int( 35.0 / 0.1 + 0.5 ); t_bin_ref++ )
	{
		t = ( t_bin_ref - int( 35.0 / 0.1 + 0.5 )/2 ) * 0.1 + 0.1/2.0;
		t_bin_sep = t_bin - t_bin_ref;
		
		scale_factor = 265.7 / sqrt( 265.7 * 265.7 + t * t + v * v );
		switch( FBP_FILTER )
		{
			case NONE: 
				break;
			case RAM_LAK:
				if( t_bin_sep == 0 )
					filtered = 1.0 / ( 4.0 * pow( 2/sqrtf(2.0) * 0.1, 2.0 ) );
				else if( t_bin_sep % 2 == 0 )
					filtered = 0;
				else
					filtered = -1.0 / ( pow( 2/sqrtf(2.0) * 0.1 * ( 4 * atan( 1.0 ) ) * t_bin_sep, 2.0 ) );	
				break;
			case SHEPP_LOGAN:
				filtered = pow( pow(0.1 * ( 4 * atan( 1.0 ) ), 2.0) * ( 1.0 - pow(2 * t_bin_sep, 2.0) ), -1.0 );
		}
		strip_index = ( v_bin * int( 360 / 6.0 + 0.5 ) * int( 35.0 / 0.1 + 0.5 ) ) + ( angle_bin * int( 35.0 / 0.1 + 0.5 ) );
		sinogram_filtered[strip_index + t_bin] += 0.1 * sinogram[strip_index + t_bin_ref] * filtered * scale_factor;
	}
}
void backprojection()
{
	
	
	
	

	double delta = 6.0 * ( ( 4 * atan( 1.0 ) )/180.0 );
	int voxel;
	double x, y, z;
	double u, t, v;
	double detector_number_t, detector_number_v;
	double eta, epsilon;
	double scale_factor;
	int t_bin, v_bin, bin, bin_below;
	
	for( int slice = 0; slice < int( 6.0 / 0.25 ); slice++ )
	{
		for( int column = 0; column < 200; column++ )
		{

			for( int row = 0; row < 200; row++ )
			{
				voxel = column +  ( row * 200 ) + ( slice * 200 * 200);
				x = -8.0 + ( column + 0.5 )* ( ( 2 * 8.0 ) / 200 );
				y = 8.0 - (row + 0.5) * ( ( 2 * 8.0 ) / 200 );
				z = -6.0 / 2.0 + (slice + 0.5) * 0.25;
				
				if( ( x * x + y * y ) > ( 8.0 * 8.0 ) )
					FBP_image_h[voxel] = 0.00113;							
				else
				{	  
					
					for( int angle_bin = 0; angle_bin < int( 360 / 6.0 + 0.5 ); angle_bin++ )
					{
						
						u = x * cos( angle_bin * delta ) + y * sin( angle_bin * delta );
						t = -x * sin( angle_bin * delta ) + y * cos( angle_bin * delta );
						v = z;

						
						detector_number_t = ( t - u *( t / ( 265.7 + u ) ) ) / 0.1 + int( 35.0 / 0.1 + 0.5 )/2.0;
						t_bin = int( detector_number_t);
						if( t_bin > detector_number_t )
							t_bin -= 1;
						eta = detector_number_t - t_bin;

						
						detector_number_v = ( v - u * ( v / ( 265.7 + u ) ) ) / 0.25 + int( 9.0 / 0.25 + 0.5 )/2.0;
						v_bin = int( detector_number_v);
						if( v_bin > detector_number_v )
							v_bin -= 1;
						epsilon = detector_number_v - v_bin;

						
						scale_factor = pow( 265.7 / ( 265.7 + u ), 2 );
		  
						
						bin = t_bin + angle_bin * int( 35.0 / 0.1 + 0.5 ) + v_bin * int( 360 / 6.0 + 0.5 ) * int( 35.0 / 0.1 + 0.5 );
						bin_below = bin + ( int( 360 / 6.0 + 0.5 ) * int( 35.0 / 0.1 + 0.5 ) );

						
						if( v_bin == int( 9.0 / 0.25 + 0.5 ) - 1 || ( bin < 0 ) )
							FBP_image_h[voxel] += scale_factor * ( ( ( 1 - eta ) * sinogram_filtered_h[bin] ) + ( eta * sinogram_filtered_h[bin + 1] ) ) ;
					





						else 
						{
							
							FBP_image_h[voxel] += scale_factor * ( ( 1 - eta ) * ( 1 - epsilon ) * sinogram_filtered_h[bin] 
							+ eta * ( 1 - epsilon ) * sinogram_filtered_h[bin + 1]
							+ ( 1 - eta ) * epsilon * sinogram_filtered_h[bin_below]
							+ eta * epsilon * sinogram_filtered_h[bin_below + 1] );
						} 
					}
					FBP_image_h[voxel] *= delta;
				}
			}
		}
	}
}
__declspec(__global__) void backprojection_GPU( float* sinogram_filtered, float* FBP_image )
{
	int row = blockIdx.y, column = blockIdx.x, slice = threadIdx.x;
	int voxel = slice * 200 * 200 + row * 200 + column;	
	if ( voxel < ( 200 * 200 * int( 6.0 / 0.25 ) ) )
	{
		double delta = 6.0 * ( ( 4 * atan( 1.0 ) )/180.0 );
		double u, t, v;
		double detector_number_t, detector_number_v;
		double eta, epsilon;
		double scale_factor;
		int t_bin, v_bin, bin;
		double x = -8.0 + ( column + 0.5 )* ( ( 2 * 8.0 ) / 200 );
		double y = 8.0 - (row + 0.5) * ( ( 2 * 8.0 ) / 200 );
		double z = -6.0 / 2.0 + (slice + 0.5) * 0.25;

		
		if( ( x * x + y * y ) > ( 8.0 * 8.0 ) )
			FBP_image[( slice * 200 * 200) + ( row * 200 ) + column] = 0.00113;							
		else
		{	  
			
			for( int angle_bin = 0; angle_bin < int( 360 / 6.0 + 0.5 ); angle_bin++ )
			{
				
				u = x * cos( angle_bin * delta ) + y * sin( angle_bin * delta );
				t = -x * sin( angle_bin * delta ) + y * cos( angle_bin * delta );
				v = z;

				
				detector_number_t = ( t - u *( t / ( 265.7 + u ) ) ) / 0.1 + int( 35.0 / 0.1 + 0.5 )/2.0;
				t_bin = int( detector_number_t);
				if( t_bin > detector_number_t )
					t_bin -= 1;
				eta = detector_number_t - t_bin;

				
				detector_number_v = ( v - u * ( v / ( 265.7 + u ) ) ) / 0.25 + int( 9.0 / 0.25 + 0.5 )/2.0;
				v_bin = int( detector_number_v);
				if( v_bin > detector_number_v )
					v_bin -= 1;
				epsilon = detector_number_v - v_bin;

				
				scale_factor = pow( 265.7 / ( 265.7 + u ), 2 );
		  
				
				
				bin = t_bin + angle_bin * int( 35.0 / 0.1 + 0.5 ) + v_bin * int( 360 / 6.0 + 0.5 ) * int( 35.0 / 0.1 + 0.5 );
				
				

				
				if( v_bin == int( 9.0 / 0.25 + 0.5 ) - 1 || ( bin < 0 ) )
					FBP_image[voxel] += scale_factor * ( ( ( 1 - eta ) * sinogram_filtered[bin] ) + ( eta * sinogram_filtered[bin + 1] ) ) ;
					
				else 
				{
					
					




					
					
					FBP_image[voxel] += scale_factor * ( ( 1 - eta ) * ( 1 - epsilon ) * sinogram_filtered[bin] 
					+ eta * ( 1 - epsilon ) * sinogram_filtered[bin + 1]
					+ ( 1 - eta ) * epsilon * sinogram_filtered[bin + ( int( 360 / 6.0 + 0.5 ) * int( 35.0 / 0.1 + 0.5 ))]
					+ eta * epsilon * sinogram_filtered[bin + ( int( 360 / 6.0 + 0.5 ) * int( 35.0 / 0.1 + 0.5 )) + 1] );
				}				
			}
			FBP_image[voxel] *= delta; 
		}
	}
}
void FBP_image_2_hull()
{
	puts("Performing thresholding on FBP image to generate FBP hull...");

	bool FBP_hull_on_GPU = false;
	
	if( FBP_hull_on_GPU )
	{
		initialize_hull( FBP_hull_h, FBP_hull_d );
		dim3 dimBlock( int( 6.0 / 0.25 ) );
		dim3 dimGrid( 200, 200 );   
		FBP_image_2_hull_GPU<<< dimGrid, dimBlock >>>( FBP_image_d, FBP_hull_d );	
		cudaMemcpy( FBP_hull_h, FBP_hull_d, ( ( 200 * 200 * int( 6.0 / 0.25 ) ) * sizeof(bool) ), cudaMemcpyDeviceToHost );
	}
	else
	{
		FBP_hull_h = (bool*) calloc( 200 * 200 * int( 6.0 / 0.25 ), sizeof(bool) );
		std::transform(FBP_image_h, FBP_image_h + ( 200 * 200 * int( 6.0 / 0.25 ) ), FBP_hull_h, std::bind2nd(std::greater<float>(), 0.6 ) );
		

















	}
	if( WRITE_FBP_HULL )
		array_2_disk( "x_FBP", OUTPUT_DIRECTORY, OUTPUT_FOLDER, FBP_hull_h, 200, 200, int( 6.0 / 0.25 ), ( 200 * 200 * int( 6.0 / 0.25 ) ), true );

	if( MLP_HULL != FBP_HULL)
	{
		
		free(FBP_hull_h);
		cudaFree(FBP_hull_d);
	}
}
__declspec(__global__) void FBP_image_2_hull_GPU( float* FBP_image, bool* FBP_hull )
{
	int row = blockIdx.y, column = blockIdx.x, slice = threadIdx.x;
	int voxel = slice * 200 * 200 + row * 200 + column; 
	double x = -8.0 + ( column + 0.5 )* ( ( 2 * 8.0 ) / 200 );
	double y = 8.0 - (row + 0.5) * ( ( 2 * 8.0 ) / 200 );
	double d_squared = pow(x, 2) + pow(y, 2);
	if(FBP_image[voxel] > 0.6 && (d_squared < pow(8.0, 2) ) ) 
		FBP_hull[voxel] = true; 
	else
		FBP_hull[voxel] = false; 
}



template<typename T> void initialize_hull( T*& hull_h, T*& hull_d )
{
	
	
	

	int image_size = ( 200 * 200 * int( 6.0 / 0.25 ) ) * sizeof(T);
	cudaMalloc((void**) &hull_d, image_size );

	dim3 dimBlock( int( 6.0 / 0.25 ) );
	dim3 dimGrid( 200, 200 );   
	initialize_hull_GPU<<< dimGrid, dimBlock >>>( hull_d );
}
template<typename T> __declspec(__global__) void initialize_hull_GPU( T* hull )
{
	int row = blockIdx.y, column = blockIdx.x, slice = threadIdx.x;
	int voxel = column + ( row * 200 ) + ( slice * 200 * 200 );
	double x = ( column - 200/2 + 0.5) * ( ( 2 * 8.0 ) / 200 );
	double y = ( 200/2 - row - 0.5) * ( ( 2 * 8.0 ) / 200 );
	if( pow(x, 2) + pow(y, 2) < pow(8.0, 2) )
		hull[voxel] = 1;
	else
		hull[voxel] = 0;
}



void hull_initializations()
{		
	if( SC_ON )
		initialize_hull( SC_hull_h, SC_hull_d );
	if( MSC_ON )
		initialize_hull( MSC_counts_h, MSC_counts_d );
	if( SM_ON )
		initialize_hull( SM_counts_h, SM_counts_d );
}
void hull_detection( const int histories_to_process)
{
	if( SC_ON  ) 
		SC( histories_to_process );		
	if( MSC_ON )
		MSC( histories_to_process );
	if( SM_ON )
		SM( histories_to_process );   
}
__declspec(__device__) void voxel_walk_GPU( bool*& image, float x_entry, float y_entry, float z_entry, float x_exit, float y_exit, float z_exit )
{
	
	
	
	int x_move_direction, y_move_direction, z_move_direction;
	float delta_yx, delta_zx, delta_zy;
	
	
	
	
	float x = x_entry, y = y_entry, z = z_entry;
	float x_to_go, y_to_go, z_to_go;		
	float x_extension, y_extension;	
	int voxel_x, voxel_y, voxel_z;
	int voxel, voxel_x_out, voxel_y_out, voxel_z_out, voxel_out; 
	bool end_walk;
	
	
	
	x_move_direction = ( x_entry <= x_exit ) - ( x_entry > x_exit );
	y_move_direction = ( y_entry <= y_exit ) - ( y_entry > y_exit );
	z_move_direction = ( z_entry <= z_exit ) - ( z_entry > z_exit );
	
	x_to_go = x_remaining_GPU( x, x_move_direction, voxel_x );
	y_to_go = y_remaining_GPU( y, -y_move_direction, voxel_y );
	z_to_go = z_remaining_GPU( z, -z_move_direction, voxel_z );
	voxel = voxel_x + voxel_y * 200 + voxel_z * 200 * 200;
	
	
	
	
	delta_yx = abs( (y_exit - y_entry)/(x_exit - x_entry) );
	delta_zx = abs( (z_exit - z_entry)/(x_exit - x_entry) );
	delta_zy = abs( (z_exit - z_entry)/(y_exit - y_entry) );
	
	
	
	voxel_x_out = int( ( x_exit + 8.0 ) / ( ( 2 * 8.0 ) / 200 ) );
	voxel_y_out = int( ( 8.0 - y_exit ) / ( ( 2 * 8.0 ) / 200 ) );
	voxel_z_out = int( ( 6.0/2 - z_exit ) /( ( int( 6.0 / 0.25 ) * 0.25 ) / int( 6.0 / 0.25 ) ) );
	voxel_out = int(voxel_x_out + voxel_y_out * 200 + voxel_z_out * 200 * 200);
		
	end_walk = ( voxel == voxel_out ) || ( voxel_x >= 200 ) || ( voxel_y >= 200 ) || ( voxel_z >= int( 6.0 / 0.25 ) );
	if( !end_walk )
		image[voxel] = 0;
	
	
	
	if( z_entry != z_exit )
	{
		while( !end_walk )
		{
			
			x_extension = delta_zx * x_to_go;
			y_extension = delta_zy * y_to_go;
			if( z_to_go <= x_extension && z_to_go <= y_extension )
			{
				
				
				
				
				
				
				x_to_go -= z_to_go / delta_zx;
				y_to_go -= z_to_go / delta_zy;
				z_to_go = ( ( int( 6.0 / 0.25 ) * 0.25 ) / int( 6.0 / 0.25 ) );
				voxel_z -= z_move_direction;
				if( x_to_go <= 0 )
				{
					voxel_x += x_move_direction;
					x_to_go = ( ( 2 * 8.0 ) / 200 );
				}
				if(	y_to_go <= 0 )
				{
					voxel_y -= y_move_direction;
					y_to_go = ( ( 2 * 8.0 ) / 200 );
				}
			}
			
			else if( x_extension <= y_extension )
			{
				
				
				
				
				x_to_go = ( ( 2 * 8.0 ) / 200 );
				y_to_go -= delta_yx * x_to_go;
				z_to_go -= delta_zx * x_to_go;
				
				
				
				voxel_x += x_move_direction;
				if( y_to_go <= 0 )
				{
					y_to_go = ( ( 2 * 8.0 ) / 200 );
					voxel_y -= y_move_direction;
				}
			}
			
			else
			{
				
				
				
				
				x_to_go -= y_to_go / delta_yx;
				y_to_go = ( ( 2 * 8.0 ) / 200 );
				z_to_go -= delta_zy * y_to_go;
				


				voxel_y -= y_move_direction;
			}
			
			
			
			voxel = voxel_x + voxel_y * 200 + voxel_z * 200 * 200;
			end_walk = ( voxel == voxel_out ) || ( voxel_x >= 200 ) || ( voxel_y >= 200 ) || ( voxel_z >= int( 6.0 / 0.25 ) );
			if( !end_walk )
				image[voxel] = 0;
		}
	}
	else
	{
		
		
		
		while( !end_walk )
		{
			
			y_extension = y_to_go / delta_yx;
			
			if( x_to_go <= y_extension )
			{
				
				
				
				x_to_go = ( ( 2 * 8.0 ) / 200 );
				y_to_go -= delta_yx * x_to_go;
				
				voxel_x += x_move_direction;
				if( y_to_go <= 0 )
				{
					y_to_go = ( ( 2 * 8.0 ) / 200 );
					voxel_y -= y_move_direction;
				}
			}
			
			else
			{
				
				
				
				
				x_to_go -= y_to_go / delta_yx;
				y_to_go = ( ( 2 * 8.0 ) / 200 );
				voxel_y -= y_move_direction;
			}
			
			
			voxel = voxel_x + voxel_y * 200 + voxel_z * 200 * 200;			
			end_walk = ( voxel == voxel_out ) || ( voxel_x >= 200 ) || ( voxel_y >= 200 ) || ( voxel_z >= int( 6.0 / 0.25 ) );
			if( !end_walk )
				image[voxel] = 0;
			
		}
		
	}
}
__declspec(__device__) double x_remaining_GPU( double x, int x_move_direction, int& voxel_x )
{
	double voxel_x_float;
	double x_inside = modf( (x + 8.0) / ( ( 2 * 8.0 ) / 200 ), &voxel_x_float ) * ( ( 2 * 8.0 ) / 200 );	
	voxel_x = voxel_x_float;
	return ( x_move_direction > 0 ) * (( ( 2 * 8.0 ) / 200 ) - x_inside) + ( x_move_direction <= 0 ) * x_inside;	
}
__declspec(__device__) double y_remaining_GPU( double y, int y_move_direction, int& voxel_y )
{
	double voxel_y_float;
	double y_inside = modf( (8.0 - y) / ( ( 2 * 8.0 ) / 200 ), &voxel_y_float ) * ( ( 2 * 8.0 ) / 200 );
	voxel_y = voxel_y_float;
	return ( y_move_direction > 0 ) * (( ( 2 * 8.0 ) / 200 ) - y_inside) + ( y_move_direction <= 0 ) * y_inside;	
}
__declspec(__device__) double z_remaining_GPU( double z, int z_move_direction, int& voxel_z )
{
	float voxel_z_float;
	float z_inside = modf( (6.0/2 - z) / ( ( int( 6.0 / 0.25 ) * 0.25 ) / int( 6.0 / 0.25 ) ), &voxel_z_float ) * ( ( int( 6.0 / 0.25 ) * 0.25 ) / int( 6.0 / 0.25 ) );
	voxel_z = voxel_z_float;
	return ( z_move_direction > 0 ) * (( ( int( 6.0 / 0.25 ) * 0.25 ) / int( 6.0 / 0.25 ) ) - z_inside) + ( z_move_direction <= 0 ) * z_inside;
}
__declspec(__global__) void carve_differences( int* carve_differences, int* image )
{
	int row = blockIdx.y, column = blockIdx.x, slice = threadIdx.x;
	int voxel = column + row * 200 + slice * 200 * 200;
	if( (row != 0) && (row != 200 - 1) && (column != 0) && (column != 200 - 1) )
	{
		int difference, max_difference = 0;
		for( int current_row = row - 1; current_row <= row + 1; current_row++ )
		{
			for( int current_column = column - 1; current_column <= column + 1; current_column++ )
			{
				difference = image[voxel] - image[current_column + current_row * 200 + slice * 200 * 200];
				if( difference > max_difference )
					max_difference = difference;
			}
		}
		carve_differences[voxel] = max_difference;
	}
}

void SC( const int num_histories )
{
	dim3 dimBlock(1024);
	dim3 dimGrid( (int)( num_histories / 1024 ) + 1 );
	SC_GPU<<<dimGrid, dimBlock>>>
	(
		num_histories, SC_hull_d, bin_num_d, missed_recon_volume_d, WEPL_d,
		x_entry_d, y_entry_d, z_entry_d, x_exit_d, y_exit_d, z_exit_d
	);
	char user_response[20];		
	if( true)
		fgets(user_response, sizeof(user_response), (&__iob_func()[0]));
}
__declspec(__global__) void SC_GPU
( 
	const int num_histories, bool* SC_hull, int* bin_num, bool* missed_recon_volume, float* WEPL,
	float* x_entry, float* y_entry, float* z_entry, float* x_exit, float* y_exit, float* z_exit
)
{
	int i = threadIdx.x + blockIdx.x * 1024;
	
	bool run_it = i  ==192644;
	if( run_it && (i < num_histories) && !missed_recon_volume[i] && (WEPL[i] <= 0.0) )
	{
		
		
		
		int x_move_direction, y_move_direction, z_move_direction;
		double delta_yx, delta_zx, delta_zy;
		double x_move = 0, y_move = 0, z_move = 0;
		
		
		
		
		double x_to_go, y_to_go, z_to_go;		
		double x_extension, y_extension;	
		int voxel_x, voxel_y, voxel_z;
		
		int voxel, voxel_out; 
		bool end_walk;
		bool debug_run = true;
		
		
		
		x_move_direction = ( x_entry[i] <= x_exit[i] ) - ( x_entry[i] >= x_exit[i] );
		y_move_direction = ( y_entry[i] <= y_exit[i] ) - ( y_entry[i] >= y_exit[i] );
		z_move_direction = ( z_entry[i] <= z_exit[i] ) - ( z_entry[i] >= z_exit[i] );		
		x_to_go = x_remaining_GPU( x_entry[i], x_move_direction, voxel_x );
		y_to_go = y_remaining_GPU( y_entry[i], -y_move_direction, voxel_y );
		z_to_go = z_remaining_GPU( z_entry[i], -z_move_direction, voxel_z );
		voxel = voxel_x + voxel_y * 200 + voxel_z * 200 * 200;
		double x_replace = x_exit[i];
		voxel_out = position_2_voxel_GPU( x_replace, y_exit[i], z_exit[i] ); 
		
		
		
		
		
		delta_yx = fabs( y_exit[i] - y_entry[i] ) / fabs( x_exit[i] - x_entry[i] );
		delta_zx = fabs( z_exit[i] - z_entry[i] ) / fabs( x_exit[i] - x_entry[i] );
		delta_zy = fabs( z_exit[i] - z_entry[i] ) / fabs( y_exit[i] - y_entry[i] );
		
		
		
		int voxel_x_out = ( x_exit[i] + 8.0 ) / ( ( 2 * 8.0 ) / 200 );
		int voxel_y_out = ( 8.0 - y_exit[i] ) / ( ( 2 * 8.0 ) / 200 );
		int voxel_z_out = ( 6.0/2 - z_exit[i] ) /( ( int( 6.0 / 0.25 ) * 0.25 ) / int( 6.0 / 0.25 ) );
		if( debug_run )
		{
			printf("bin_num[i] = %d NUM_BINS = %d", bin_num[i], ( int( 360 / 6.0 + 0.5 ) * int( 35.0 / 0.1 + 0.5 ) * int( 9.0 / 0.25 + 0.5 ) ));
			printf("x_move_direction = %d y_move_direction = %d z_move_direction = %d\n", x_move_direction, y_move_direction, z_move_direction);
			printf("VOXEL_WIDTH = %3f VOXEL_HEIGHT = %3f SLICE_THICKNESS = %3f\n", ( ( 2 * 8.0 ) / 200 ), ( ( 2 * 8.0 ) / 200 ), 0.25);
			printf("voxel_x_in = %d voxel_y_in = %d voxel_z_in = %d\n", voxel_x, voxel_y, voxel_z);
			printf("voxel_x_out = %d voxel_y_out = %d voxel_z_out = %d\n", voxel_x_out, voxel_y_out, voxel_z_out);
			printf("voxel_in = %d voxel_out = %d\n", voxel, voxel_out);
			printf("x_entry[i] = %3f y_entry[i] = %3f z_entry[i] = %3f\n", x_entry[i], y_entry[i], z_entry[i]);
			printf("x_exit[i] = %8e y_exit[i] = %3f z_exit[i] = %3f\n", x_replace, y_exit[i], z_exit[i]);
			printf("x_replace > -7.28?: %d\n", x_replace > -7.28);
			printf("x_replace < -7.28?: %d\n", x_replace < -7.28);
			printf("x_replace = -7.28?: %d\n", x_replace == -7.28);
			printf("x_exit[i] > -7.28?: %d\n", x_exit[i] > -7.28);
			printf("x_exit[i] < -7.28?: %d\n", x_exit[i] < -7.28);
			printf("x_exit[i] = -7.28?: %d\n", x_exit[i] == -7.28);
			printf("x_exit[i] voxel %8f\n",  ( x_exit[i] + 8.0 ) / ( ( 2 * 8.0 ) / 200 ));
			
			printf("delta_yx = %3f delta_zx = %3f delta_zy = %3f\n", delta_yx, delta_zx, delta_zy);
			printf("x_to_go = %3f y_to_go = %3f z_to_go = %3f\n", x_to_go, y_to_go, z_to_go);
		}
		end_walk = ( voxel == voxel_out ) || ( voxel_x >= 200 ) || ( voxel_y >= 200 ) || ( voxel_z >= int( 6.0 / 0.25 ) );
		if( !end_walk )
			SC_hull[voxel] = 0;

		int j = 0;
		int j_low_limit = 185;
		int j_high_limit = 250;
		
		
		
		if( z_move_direction != 0 )
		{
			if(debug_run && j < j_high_limit && j > j_low_limit )
				printf("z_exit[i] != z_entry[i]\n");
			while( !end_walk )
			{
				
				x_extension = delta_zx * x_to_go;
				y_extension = delta_zy * y_to_go;
				if( (z_to_go <= x_extension  ) && (z_to_go <= y_extension) )
				{
					
					x_move = z_to_go / delta_zx;
					y_move = z_to_go / delta_zy;
					z_move = z_to_go;
					x_to_go -= z_to_go / delta_zx * abs(x_move_direction);
					y_to_go -= z_to_go / delta_zy * abs(y_move_direction);
					z_to_go = ( ( int( 6.0 / 0.25 ) * 0.25 ) / int( 6.0 / 0.25 ) );
					voxel_z -= z_move_direction;
					if( x_to_go <= 1.0e-7 )
					{
						voxel_x += x_move_direction;
						x_to_go = ( ( 2 * 8.0 ) / 200 );
					}
					if(	y_to_go <= 1.0e-7 )
					{
						voxel_y -= y_move_direction;
						y_to_go = ( ( 2 * 8.0 ) / 200 );
					}
					if(debug_run && j < j_high_limit && j > j_low_limit )
					{
						printf("z_to_go <= x_extension && z_to_go <= y_extension\n");
						printf("x_move = %3f y_move = %3f z_move = %3f\n", x_move, y_move, z_move);
						printf("x_to_go = %8f y_to_go = %3f z_to_go = %3f\n", x_to_go, y_to_go, z_to_go);
					}
				}
				
				else if( x_extension <= y_extension )
				{
					
					x_move = x_to_go;
					y_move = delta_yx * x_to_go;
					z_move = delta_zx * x_to_go;				
					y_to_go -= delta_yx * x_to_go * abs(y_move_direction);
					z_to_go -= delta_zx * x_to_go * abs(z_move_direction);
					x_to_go = ( ( 2 * 8.0 ) / 200 );
					voxel_x += x_move_direction;
					if( y_to_go <= 1.0e-7 )
					{
						y_to_go = ( ( 2 * 8.0 ) / 200 );
						voxel_y -= y_move_direction;
					}
					if(debug_run && j < j_high_limit && j > j_low_limit )
					{
						printf(" x_extension <= y_extension \n");
						printf("x_move = %3f y_move = %3f z_move = %3f\n", x_move, y_move, z_move);
						printf("x_to_go = %3f y_to_go = %3f z_to_go = %3f\n", x_to_go, y_to_go, z_to_go);
					}
				}
				
				else
				{
					
					x_move = y_to_go / delta_yx;
					y_move = y_to_go;
					z_move = delta_zy * y_to_go;
					x_to_go -= y_to_go / delta_yx * abs(x_move_direction);
					z_to_go -= delta_zy * y_to_go * abs(z_move_direction);
					y_to_go = ( ( 2 * 8.0 ) / 200 );
					voxel_y -= y_move_direction;
					if(debug_run && j < j_high_limit && j > j_low_limit )
					{
						printf(" y_extension < x_extension \n");
						printf("x_move = %3f y_move = %3f z_move = %3f\n", x_move, y_move, z_move);
						printf("x_to_go = %3f y_to_go = %3f z_to_go = %3f\n", x_to_go, y_to_go, z_to_go);
					}
				}
				
				
				
				voxel_z = max(voxel_z, 0 );
				voxel = voxel_x + voxel_y * 200 + voxel_z * 200 * 200;
				if(debug_run && j < j_high_limit && j > j_low_limit )
					printf("voxel_x = %d voxel_y = %d voxel_z = %d voxel = %d\n", voxel_x, voxel_y, voxel_z, voxel);
				end_walk = ( voxel == voxel_out ) || ( voxel_x >= 200 ) || ( voxel_y >= 200 ) || ( voxel_z >= int( 6.0 / 0.25 ) );
				if( !end_walk )
					SC_hull[voxel] = 0;
				j++;
			}
		}
		else
		{
			if(debug_run && j < j_high_limit && j > j_low_limit )
				printf("z_exit[i] == z_entry[i]\n");
			while( !end_walk )
			{
				
				y_extension = y_to_go / delta_yx;
				
				if( x_to_go <= y_extension )
				{
					
					x_move = x_to_go;
					y_move = delta_yx * x_to_go;	
					y_to_go -= (delta_yx * x_to_go) * abs(y_move_direction);
					x_to_go = ( ( 2 * 8.0 ) / 200 );
					voxel_x += x_move_direction;
					if( y_to_go <= 1.0e-7 )
					{
						y_to_go = ( ( 2 * 8.0 ) / 200 );
						voxel_y -= y_move_direction;
					}
					if(debug_run && j < j_high_limit && j > j_low_limit )
					{
						printf(" x_to_go <= y_extension\n");
						printf("x_move = %3f y_move = %3f \n", x_move, y_move);
						printf("x_to_go = %3f y_to_go = %3f\n", x_to_go, y_to_go);
					}
				}
				
				else
				{
					
					x_move = y_to_go / delta_yx;
					y_move = y_to_go;	
					x_to_go -= y_to_go / delta_yx * abs(x_move_direction);
					y_to_go = ( ( 2 * 8.0 ) / 200 );					
					voxel_y -= y_move_direction;
					if(debug_run && j < j_high_limit && j > j_low_limit )
					{
						printf(" y_extension < x_extension\n");
						printf("x_move = %3f y_move = %3f \n", x_move, y_move);
						printf("x_to_go = %3f y_to_go = %3f\n", x_to_go, y_to_go);
					}
				}
				
				
				voxel_z = max(voxel_z, 0 );
				voxel = voxel_x + voxel_y * 200 + voxel_z * 200 * 200;		
				if(debug_run && j < j_high_limit && j > j_low_limit )
					printf("voxel_x_in = %d voxel_y_in = %d voxel_z_in = %d\n", voxel_x, voxel_y, voxel_z);
				end_walk = ( voxel == voxel_out ) || ( voxel_x >= 200 ) || ( voxel_y >= 200 ) || ( voxel_z >= int( 6.0 / 0.25 ) );
				if( !end_walk )
					SC_hull[voxel] = 0;
				j++;
			}
			
		}
	}
}

void MSC( const int num_histories )
{
	dim3 dimBlock(1024);
	dim3 dimGrid((int)(num_histories/1024)+1);
	MSC_GPU<<<dimGrid, dimBlock>>>
	(
		num_histories, MSC_counts_d, bin_num_d, missed_recon_volume_d, WEPL_d,
		x_entry_d, y_entry_d, z_entry_d, x_exit_d, y_exit_d, z_exit_d
	);
}
__declspec(__global__) void MSC_GPU
( 
	const int num_histories, int* MSC_counts, int* bin_num, bool* missed_recon_volume, float* WEPL,
	float* x_entry, float* y_entry, float* z_entry, float* x_exit, float* y_exit, float* z_exit
)
{
	int i = threadIdx.x + blockIdx.x * 1024;

	if( (i < num_histories) && !missed_recon_volume[i] && (WEPL[i] <= 0.0) )
	{
		
		
		
		int x_move_direction, y_move_direction, z_move_direction;
		double delta_yx, delta_zx, delta_zy;
		double x_move = 0, y_move = 0, z_move = 0;
		
		
		
		
		double x_to_go, y_to_go, z_to_go;		
		double x_extension, y_extension;	
		int voxel_x, voxel_y, voxel_z;
		
		int voxel, voxel_out; 
		bool end_walk;
		
		
		
		x_move_direction = ( x_entry[i] <= x_exit[i] ) - ( x_entry[i] >= x_exit[i] );
		y_move_direction = ( y_entry[i] <= y_exit[i] ) - ( y_entry[i] >= y_exit[i] );
		z_move_direction = ( z_entry[i] <= z_exit[i] ) - ( z_entry[i] >= z_exit[i] );		
		x_to_go = x_remaining_GPU( x_entry[i], x_move_direction, voxel_x );
		y_to_go = y_remaining_GPU( y_entry[i], -y_move_direction, voxel_y );
		z_to_go = z_remaining_GPU( z_entry[i], -z_move_direction, voxel_z );
		voxel = voxel_x + voxel_y * 200 + voxel_z * 200 * 200;
		voxel_out = position_2_voxel_GPU( x_exit[i], y_exit[i], z_exit[i] ); 
		
		
		
		
		delta_yx = abs( y_exit[i] - y_entry[i] ) / abs( x_exit[i] - x_entry[i] );
		delta_zx = abs( z_exit[i] - z_entry[i] ) / abs( x_exit[i] - x_entry[i] );
		delta_zy = abs( z_exit[i] - z_entry[i] ) / abs( y_exit[i] - y_entry[i] );
		
		
				
		end_walk = ( voxel == voxel_out ) || ( voxel_x >= 200 ) || ( voxel_y >= 200 ) || ( voxel_z >= int( 6.0 / 0.25 ) );
		if( !end_walk )
			atomicAdd( &MSC_counts[voxel], 1 );
		
		
		
		if( z_move_direction != 0 )
		{
			
			while( !end_walk )
			{
				
				x_extension = delta_zx * x_to_go;
				y_extension = delta_zy * y_to_go;
				if( (z_to_go <= x_extension  ) && (z_to_go <= y_extension) )
				{
					
					x_move = z_to_go / delta_zx;
					y_move = z_to_go / delta_zy;
					z_move = z_to_go;
					x_to_go -= x_move * abs(x_move_direction);
					y_to_go -= y_move * abs(y_move_direction);
					
					
					z_to_go = ( ( int( 6.0 / 0.25 ) * 0.25 ) / int( 6.0 / 0.25 ) );
					voxel_z -= z_move_direction;
					if( x_to_go == 0 )
					{
						voxel_x += x_move_direction;
						x_to_go = ( ( 2 * 8.0 ) / 200 );
					}
					if(	y_to_go == 0 )
					{
						voxel_y -= y_move_direction;
						y_to_go = ( ( 2 * 8.0 ) / 200 );
					}
				}
				
				else if( x_extension <= y_extension )
				{
					
					x_move = x_to_go;
					y_move = delta_yx * x_to_go;
					z_move = delta_zx * x_to_go;
					x_to_go = ( ( 2 * 8.0 ) / 200 );
					y_to_go -= y_move * abs(y_move_direction);
					z_to_go -= z_move * abs(z_move_direction);				
					
					
					
					voxel_x += x_move_direction;
					if( y_to_go == 0 )
					{
						y_to_go = ( ( 2 * 8.0 ) / 200 );
						voxel_y -= y_move_direction;
					}
				}
				
				else
				{
					
					x_move = y_to_go / delta_yx;
					y_move = y_to_go;
					z_move = delta_zy * y_to_go;
					x_to_go -= x_move * abs(x_move_direction);
					y_to_go = ( ( 2 * 8.0 ) / 200 );
					z_to_go -= z_move * abs(z_move_direction);
					
					
					
					voxel_y -= y_move_direction;
				}
				
				
				
				voxel = voxel_x + voxel_y * 200 + voxel_z * 200 * 200;
				end_walk = ( voxel == voxel_out ) || ( voxel_x >= 200 ) || ( voxel_y >= 200 ) || ( voxel_z >= int( 6.0 / 0.25 ) );
				if( !end_walk )
					atomicAdd( &MSC_counts[voxel], 1 );
			}
		}
		else
		{
			
			while( !end_walk )
			{
				
				y_extension = y_to_go / delta_yx;
				
				if( x_to_go <= y_extension )
				{
					
					x_move = x_to_go;
					y_move = delta_yx * x_to_go;	
					x_to_go = ( ( 2 * 8.0 ) / 200 );
					
					y_to_go -= y_move * abs(y_move_direction);
					voxel_x += x_move_direction;
					if( y_to_go == 0 )
					{
						y_to_go = ( ( 2 * 8.0 ) / 200 );
						voxel_y -= y_move_direction;
					}
				}
				
				else
				{
					
					x_move = y_to_go / delta_yx;
					y_move = y_to_go;
					x_to_go -= x_move * abs(x_move_direction);
					
					y_to_go = ( ( 2 * 8.0 ) / 200 );
					voxel_y -= y_move_direction;
				}
				
				
				voxel = voxel_x + voxel_y * 200 + voxel_z * 200 * 200;		
				end_walk = ( voxel == voxel_out ) || ( voxel_x >= 200 ) || ( voxel_y >= 200 ) || ( voxel_z >= int( 6.0 / 0.25 ) );
				if( !end_walk )
					atomicAdd( &MSC_counts[voxel], 1 );
			}
			
		}
	}
}
void MSC_edge_detection()
{
	puts("Performing edge-detection on MSC_counts...");

	dim3 dimBlock( int( 6.0 / 0.25 ) );
	dim3 dimGrid( 200, 200 );   
	MSC_edge_detection_GPU<<< dimGrid, dimBlock >>>( MSC_counts_d );

	puts("MSC hull-detection and edge-detection complete.");	
}
__declspec(__global__) void MSC_edge_detection_GPU( int* MSC_counts )
{
	int row = blockIdx.y, column = blockIdx.x, slice = threadIdx.x;
	int voxel = column + row * 200 + slice * 200 * 200;
	float x = ( column - 200/2 + 0.5 ) * ( ( 2 * 8.0 ) / 200 );
	float y = ( 200/2 - row - 0.5 ) * ( ( 2 * 8.0 ) / 200 );
	int difference, max_difference = 0;
	if( (row != 0) && (row != 200 - 1) && (column != 0) && (column != 200 - 1) )
	{		
		for( int current_row = row - 1; current_row <= row + 1; current_row++ )
		{
			for( int current_column = column - 1; current_column <= column + 1; current_column++ )
			{
				difference = MSC_counts[voxel] - MSC_counts[current_column + current_row * 200 + slice * 200 * 200];
				if( difference > max_difference )
					max_difference = difference;
			}
		}
	}
	syncthreads();
	if( max_difference > 50 )
		MSC_counts[voxel] = 0;
	else
		MSC_counts[voxel] = 1;
	if( pow(x, 2) + pow(y, 2) >= pow(8.0 - max(( ( 2 * 8.0 ) / 200 ), ( ( 2 * 8.0 ) / 200 ))/2, 2 ) )
		MSC_counts[voxel] = 0;

}

void SM( const int num_histories)
{
	dim3 dimBlock(1024);
	dim3 dimGrid( (int)( num_histories / 1024 ) + 1 );
	SM_GPU <<< dimGrid, dimBlock >>>
	(
		num_histories, SM_counts_d, bin_num_d, missed_recon_volume_d, WEPL_d,
		x_entry_d, y_entry_d, z_entry_d, x_exit_d, y_exit_d, z_exit_d
	);
}
__declspec(__global__) void SM_GPU
( 
	const int num_histories, int* SM_counts, int* bin_num, bool* missed_recon_volume, float* WEPL,
	float* x_entry, float* y_entry, float* z_entry, float* x_exit, float* y_exit, float* z_exit
)
{
	int i = threadIdx.x + blockIdx.x * 1024;
	if( (i < num_histories) && !missed_recon_volume[i] && (WEPL[i] >= 6.0) )
	{
		
		
		
		int x_move_direction, y_move_direction, z_move_direction;
		double delta_yx, delta_zx, delta_zy;
		double x_move = 0, y_move = 0, z_move = 0;
		
		
		
		
		double x_to_go, y_to_go, z_to_go;		
		double x_extension, y_extension;	
		int voxel_x, voxel_y, voxel_z;
		
		int voxel, voxel_out; 
		bool end_walk;
		
		
		
		x_move_direction = ( x_entry[i] <= x_exit[i] ) - ( x_entry[i] >= x_exit[i] );
		y_move_direction = ( y_entry[i] <= y_exit[i] ) - ( y_entry[i] >= y_exit[i] );
		z_move_direction = ( z_entry[i] <= z_exit[i] ) - ( z_entry[i] >= z_exit[i] );		
		x_to_go = x_remaining_GPU( x_entry[i], x_move_direction, voxel_x );
		y_to_go = y_remaining_GPU( y_entry[i], -y_move_direction, voxel_y );
		z_to_go = z_remaining_GPU( z_entry[i], -z_move_direction, voxel_z );
		voxel = voxel_x + voxel_y * 200 + voxel_z * 200 * 200;
		voxel_out = position_2_voxel_GPU( x_exit[i], y_exit[i], z_exit[i] ); 
		
		
		
		
		delta_yx = abs( y_exit[i] - y_entry[i] ) / abs( x_exit[i] - x_entry[i] );
		delta_zx = abs( z_exit[i] - z_entry[i] ) / abs( x_exit[i] - x_entry[i] );
		delta_zy = abs( z_exit[i] - z_entry[i] ) / abs( y_exit[i] - y_entry[i] );
		
		
				
		end_walk = ( voxel == voxel_out ) || ( voxel_x >= 200 ) || ( voxel_y >= 200 ) || ( voxel_z >= int( 6.0 / 0.25 ) );
		if( !end_walk )
			atomicAdd( &SM_counts[voxel], 1 );
		
		
		
		if( z_move_direction != 0 )
		{
			
			while( !end_walk )
			{
				
				x_extension = delta_zx * x_to_go;
				y_extension = delta_zy * y_to_go;
				if( (z_to_go <= x_extension  ) && (z_to_go <= y_extension) )
				{
					
					x_move = z_to_go / delta_zx;
					y_move = z_to_go / delta_zy;
					z_move = z_to_go;
					x_to_go -= x_move * abs(x_move_direction);
					y_to_go -= y_move * abs(y_move_direction);
					
					
					z_to_go = ( ( int( 6.0 / 0.25 ) * 0.25 ) / int( 6.0 / 0.25 ) );
					voxel_z -= z_move_direction;
					if( x_to_go == 0 )
					{
						voxel_x += x_move_direction;
						x_to_go = ( ( 2 * 8.0 ) / 200 );
					}
					if(	y_to_go == 0 )
					{
						voxel_y -= y_move_direction;
						y_to_go = ( ( 2 * 8.0 ) / 200 );
					}
				}
				
				else if( x_extension <= y_extension )
				{
					
					x_move = x_to_go;
					y_move = delta_yx * x_to_go;
					z_move = delta_zx * x_to_go;
					x_to_go = ( ( 2 * 8.0 ) / 200 );
					y_to_go -= y_move * abs(y_move_direction);
					z_to_go -= z_move * abs(z_move_direction);				
					
					
					
					voxel_x += x_move_direction;
					if( y_to_go == 0 )
					{
						y_to_go = ( ( 2 * 8.0 ) / 200 );
						voxel_y -= y_move_direction;
					}
				}
				
				else
				{
					
					x_move = y_to_go / delta_yx;
					y_move = y_to_go;
					z_move = delta_zy * y_to_go;
					x_to_go -= x_move * abs(x_move_direction);
					y_to_go = ( ( 2 * 8.0 ) / 200 );
					z_to_go -= z_move * abs(z_move_direction);
					
					
					
					voxel_y -= y_move_direction;
				}
				
				
				
				voxel = voxel_x + voxel_y * 200 + voxel_z * 200 * 200;
				end_walk = ( voxel == voxel_out ) || ( voxel_x >= 200 ) || ( voxel_y >= 200 ) || ( voxel_z >= int( 6.0 / 0.25 ) );
				if( !end_walk )
					atomicAdd( &SM_counts[voxel], 1 );
			}
		}
		else
		{
			
			while( !end_walk )
			{
				
				y_extension = y_to_go / delta_yx;
				
				if( x_to_go <= y_extension )
				{
					
					x_move = x_to_go;
					y_move = delta_yx * x_to_go;	
					x_to_go = ( ( 2 * 8.0 ) / 200 );
					
					y_to_go -= y_move * abs(y_move_direction);
					voxel_x += x_move_direction;
					if( y_to_go == 0 )
					{
						y_to_go = ( ( 2 * 8.0 ) / 200 );
						voxel_y -= y_move_direction;
					}
				}
				
				else
				{
					
					x_move = y_to_go / delta_yx;
					y_move = y_to_go;
					x_to_go -= x_move * abs(x_move_direction);
					
					y_to_go = ( ( 2 * 8.0 ) / 200 );
					voxel_y -= y_move_direction;
				}
				
				
				voxel = voxel_x + voxel_y * 200 + voxel_z * 200 * 200;		
				end_walk = ( voxel == voxel_out ) || ( voxel_x >= 200 ) || ( voxel_y >= 200 ) || ( voxel_z >= int( 6.0 / 0.25 ) );
				if( !end_walk )
					atomicAdd( &SM_counts[voxel], 1 );
			}
			
		}
	}
}
void SM_edge_detection()
{
	puts("Performing edge-detection on SM_counts...");	

	





	int* SM_differences_h = (int*) calloc( ( 200 * 200 * int( 6.0 / 0.25 ) ), sizeof(int) );
	int* SM_differences_d;	
	cudaMalloc((void**) &SM_differences_d, ( ( 200 * 200 * int( 6.0 / 0.25 ) ) * sizeof(int) ) );
	cudaMemcpy( SM_differences_d, SM_differences_h, ( ( 200 * 200 * int( 6.0 / 0.25 ) ) * sizeof(int) ), cudaMemcpyHostToDevice );

	dim3 dimBlock( int( 6.0 / 0.25 ) );
	dim3 dimGrid( 200, 200 );   
	carve_differences<<< dimGrid, dimBlock >>>( SM_differences_d, SM_counts_d );
	
	cudaMemcpy( SM_differences_h, SM_differences_d, ( ( 200 * 200 * int( 6.0 / 0.25 ) ) * sizeof(int) ), cudaMemcpyDeviceToHost );

	int* SM_thresholds_h = (int*) calloc( int( 6.0 / 0.25 ), sizeof(int) );
	int voxel;	
	int max_difference = 0;
	for( int slice = 0; slice < int( 6.0 / 0.25 ); slice++ )
	{
		for( int pixel = 0; pixel < 200 * 200; pixel++ )
		{
			voxel = pixel + slice * 200 * 200;
			if( SM_differences_h[voxel] > max_difference )
			{
				max_difference = SM_differences_h[voxel];
				SM_thresholds_h[slice] = SM_counts_h[voxel];
			}
		}
		if( DEBUG_TEXT_ON )
		{
			
		}
		max_difference = 0;
	}

	int* SM_thresholds_d;
	unsigned int threshold_size = int( 6.0 / 0.25 ) * sizeof(int);
	cudaMalloc((void**) &SM_thresholds_d, threshold_size );
	cudaMemcpy( SM_thresholds_d, SM_thresholds_h, threshold_size, cudaMemcpyHostToDevice );

	SM_edge_detection_GPU<<< dimGrid, dimBlock >>>( SM_counts_d, SM_thresholds_d);
	
	puts("SM hull-detection and edge-detection complete.");
	
	
	cudaFree( SM_differences_d );
	cudaFree( SM_thresholds_d );

	free(SM_differences_h);
	free(SM_thresholds_h);
	
	



}
__declspec(__global__) void SM_edge_detection_GPU( int* SM_counts, int* SM_threshold )
{
	int row = blockIdx.y, column = blockIdx.x, slice = threadIdx.x;
	float x = ( column - 200/2 + 0.5 ) * ( ( 2 * 8.0 ) / 200 );
	float y = ( 200/2 - row - 0.5 ) * ( ( 2 * 8.0 ) / 200 );
	int voxel = column + row * 200 + slice * 200 * 200;
	if( voxel < ( 200 * 200 * int( 6.0 / 0.25 ) ) )
	{
		if( SM_counts[voxel] > 1.0 * SM_threshold[slice] )
			SM_counts[voxel] = 1;
		else
			SM_counts[voxel] = 0;
		if( pow(x, 2) + pow(y, 2) >= pow(8.0 - max(( ( 2 * 8.0 ) / 200 ), ( ( 2 * 8.0 ) / 200 ))/2, 2 ) )
			SM_counts[voxel] = 0;
	}
}
void SM_edge_detection_2()
{
	puts("Performing edge-detection on SM_counts...");

	
	cudaMemcpy(SM_counts_h,  SM_counts_d,	 ( ( 200 * 200 * int( 6.0 / 0.25 ) ) * sizeof(int) ),   cudaMemcpyDeviceToHost);
	array_2_disk("SM_counts", OUTPUT_DIRECTORY, OUTPUT_FOLDER, SM_counts_h, 200, 200, int( 6.0 / 0.25 ), ( 200 * 200 * int( 6.0 / 0.25 ) ), false );

	int* SM_differences_h = (int*) calloc( ( 200 * 200 * int( 6.0 / 0.25 ) ), sizeof(int) );
	int* SM_differences_d;
	cudaMalloc((void**) &SM_differences_d, ( ( 200 * 200 * int( 6.0 / 0.25 ) ) * sizeof(int) ) );
	cudaMemcpy( SM_differences_d, SM_differences_h, ( ( 200 * 200 * int( 6.0 / 0.25 ) ) * sizeof(int) ), cudaMemcpyHostToDevice );

	dim3 dimBlock( int( 6.0 / 0.25 ) );
	dim3 dimGrid( 200, 200 );   

	carve_differences<<< dimGrid, dimBlock >>>( SM_differences_d, SM_counts_d );
	cudaMemcpy( SM_differences_h, SM_differences_d, ( ( 200 * 200 * int( 6.0 / 0.25 ) ) * sizeof(int) ), cudaMemcpyDeviceToHost );

	int* SM_thresholds_h = (int*) calloc( int( 6.0 / 0.25 ), sizeof(int) );
	int voxel;	
	int max_difference = 0;
	for( int slice = 0; slice < int( 6.0 / 0.25 ); slice++ )
	{
		for( int pixel = 0; pixel < 200 * 200; pixel++ )
		{
			voxel = pixel + slice * 200 * 200;
			if( SM_differences_h[voxel] > max_difference )
			{
				max_difference = SM_differences_h[voxel];
				SM_thresholds_h[slice] = SM_counts_h[voxel];
			}
		}
		printf( "Slice %d : The maximum space_model difference = %d and the space_model threshold = %d\n", slice, max_difference, SM_thresholds_h[slice] );
		max_difference = 0;
	}

	int* SM_thresholds_d;
	unsigned int threshold_size = int( 6.0 / 0.25 ) * sizeof(int);
	cudaMalloc((void**) &SM_thresholds_d, threshold_size );
	cudaMemcpy( SM_thresholds_d, SM_thresholds_h, threshold_size, cudaMemcpyHostToDevice );

	SM_edge_detection_GPU<<< dimGrid, dimBlock >>>( SM_counts_d, SM_thresholds_d);

	puts("SM hull-detection complete.  Writing results to disk...");

	cudaMemcpy(SM_counts_h,  SM_counts_d,	 ( ( 200 * 200 * int( 6.0 / 0.25 ) ) * sizeof(int) ),   cudaMemcpyDeviceToHost);
	cudaFree( SM_counts_d );
	cudaFree( SM_differences_d );
	cudaFree( SM_thresholds_d );

	free(SM_differences_h);
	free(SM_thresholds_h);
	
	if( WRITE_SM_HULL )
		array_2_disk("x_SM", OUTPUT_DIRECTORY, OUTPUT_FOLDER, SM_counts_h, 200, 200, int( 6.0 / 0.25 ), ( 200 * 200 * int( 6.0 / 0.25 ) ), true );
	if( MLP_HULL != SM_HULL)
		free(SM_counts_h);	
}
__declspec(__global__) void SM_edge_detection_GPU_2( int* SM_counts, int* SM_differences )
{
	int row = blockIdx.y, column = blockIdx.x, slice = threadIdx.x;
	int voxel = column + row * 200 + slice * 200 * 200;
	int difference, max_difference = 0;
	if( (row != 0) && (row != 200 - 1) && (column != 0) && (column != 200 - 1) )
	{
		for( int current_row = row - 1; current_row <= row + 1; current_row++ )
		{
			for( int current_column = column - 1; current_column <= column + 1; current_column++ )
			{
				difference = SM_counts[voxel] - SM_counts[current_column + current_row * 200 + slice * 200 * 200];
				if( difference > max_difference )
					max_difference = difference;
			}
		}
		SM_differences[voxel] = max_difference;
	}
	syncthreads();
	int slice_threshold;
	max_difference = 0;
	for( int pixel = 0; pixel < 200 * 200; pixel++ )
	{
		voxel = pixel + slice * 200 * 200;
		if( SM_differences[voxel] > max_difference )
		{
			max_difference = SM_differences[voxel];
			slice_threshold = SM_counts[voxel];
		}
	}
	syncthreads();
	float x = ( column - 200/2 + 0.5 ) * ( ( 2 * 8.0 ) / 200 );
	float y = ( 200/2 - row - 0.5 ) * ( ( 2 * 8.0 ) / 200 );
	if( voxel < ( 200 * 200 * int( 6.0 / 0.25 ) ) )
	{
		if( SM_counts[voxel] > 1.0 * slice_threshold )
			SM_counts[voxel] = 1;
		else
			SM_counts[voxel] = 0;
		if( pow(x, 2) + pow(y, 2) >= pow(8.0 - max(( ( 2 * 8.0 ) / 200 ), ( ( 2 * 8.0 ) / 200 ))/2, 2 ) )
			SM_counts[voxel] = 0;
	}
}
void hull_detection_finish()
{
	if( SC_ON )
	{
		SC_hull_h = (bool*) calloc( ( 200 * 200 * int( 6.0 / 0.25 ) ), sizeof(bool) );
		cudaMemcpy(SC_hull_h,  SC_hull_d, ( ( 200 * 200 * int( 6.0 / 0.25 ) ) * sizeof(bool) ), cudaMemcpyDeviceToHost);
		if( WRITE_SC_HULL )
		{
			puts("Writing SC hull to disk...");
			array_2_disk("x_SC", OUTPUT_DIRECTORY, OUTPUT_FOLDER, SC_hull_h, 200, 200, int( 6.0 / 0.25 ), ( 200 * 200 * int( 6.0 / 0.25 ) ), true );
		}
		if( MLP_HULL != SC_HULL )
		{
			free( SC_hull_h );
			cudaFree(SC_hull_d);
		}
	}
	if( MSC_ON )
	{
		MSC_counts_h = (int*) calloc( ( 200 * 200 * int( 6.0 / 0.25 ) ), sizeof(int) );
		if( WRITE_MSC_COUNTS )
		{		
			puts("Writing MSC counts to disk...");		
			cudaMemcpy(MSC_counts_h,  MSC_counts_d, ( ( 200 * 200 * int( 6.0 / 0.25 ) ) * sizeof(int) ), cudaMemcpyDeviceToHost);
			array_2_disk("MSC_counts_h", OUTPUT_DIRECTORY, OUTPUT_FOLDER, MSC_counts_h, 200, 200, int( 6.0 / 0.25 ), ( 200 * 200 * int( 6.0 / 0.25 ) ), true );	
		}
		if( WRITE_MSC_HULL || (MLP_HULL == MSC_HULL) )
		{
			MSC_edge_detection();
			cudaMemcpy(MSC_counts_h,  MSC_counts_d, ( ( 200 * 200 * int( 6.0 / 0.25 ) ) * sizeof(int) ), cudaMemcpyDeviceToHost);
			if( WRITE_MSC_HULL )
			{
				puts("Writing MSC hull to disk...");		
				array_2_disk("x_MSC", OUTPUT_DIRECTORY, OUTPUT_FOLDER, MSC_counts_h, 200, 200, int( 6.0 / 0.25 ), ( 200 * 200 * int( 6.0 / 0.25 ) ), true );	
			}
		}
		if( MLP_HULL != MSC_HULL )
			free( MSC_counts_h );
		cudaFree(MSC_counts_d);
	}
	if( SM_ON )
	{
		SM_counts_h = (int*) calloc( ( 200 * 200 * int( 6.0 / 0.25 ) ), sizeof(int) );
		if( WRITE_SM_COUNTS )
		{		
			puts("Writing SM counts to disk...");
			cudaMemcpy(SM_counts_h,  SM_counts_d, ( ( 200 * 200 * int( 6.0 / 0.25 ) ) * sizeof(int) ), cudaMemcpyDeviceToHost);
			array_2_disk("SM_counts_h", OUTPUT_DIRECTORY, OUTPUT_FOLDER, SM_counts_h, 200, 200, int( 6.0 / 0.25 ), ( 200 * 200 * int( 6.0 / 0.25 ) ), true );	
		}
		if( WRITE_SM_HULL || (MLP_HULL == SM_HULL) )
		{
			SM_edge_detection();
			cudaMemcpy(SM_counts_h,  SM_counts_d, ( ( 200 * 200 * int( 6.0 / 0.25 ) ) * sizeof(int) ), cudaMemcpyDeviceToHost);
			if( WRITE_SM_HULL )
			{
				puts("Writing SM hull to disk...");		
				array_2_disk("x_SM", OUTPUT_DIRECTORY, OUTPUT_FOLDER, SM_counts_h, 200, 200, int( 6.0 / 0.25 ), ( 200 * 200 * int( 6.0 / 0.25 ) ), true );	
			}
		}
		if( MLP_HULL != SM_HULL )
			free( SM_counts_h );
		cudaFree(SM_counts_d);
	}
}

template<typename H, typename D> void averaging_filter( H*& image_h, D*& image_d )
{
	bool is_hull = ( typeid(bool) == typeid(D) );
	D* new_value_d;
	int new_value_size = ( 200 * 200 * int( 6.0 / 0.25 ) ) * sizeof(D);
	cudaMalloc(&new_value_d, new_value_size );

	dim3 dimBlock( int( 6.0 / 0.25 ) );
	dim3 dimGrid( 200, 200 );   
	averaging_filter_GPU<<< dimGrid, dimBlock >>>( image_d, new_value_d, is_hull );
	
	
	cudaFree(image_d);
	image_d = new_value_d;
}
template<typename D> __declspec(__global__) void averaging_filter_GPU( D* image, D* new_value, bool is_hull )
{
	int voxel_x = blockIdx.x;
	int voxel_y = blockIdx.y;	
	int voxel_z = threadIdx.x;
	int voxel = voxel_x + voxel_y * 200 + voxel_z * 200 * 200;
	int left_edge = max( voxel_x - 2, 0 );
	int right_edge = min( voxel_x + 2, 200 - 1);
	int top_edge = max( voxel_y - 2, 0 );
	int bottom_edge = min( voxel_y + 2, 200 - 1);	
	int neighborhood_voxels = ( right_edge - left_edge + 1 ) * ( bottom_edge - top_edge + 1 );
	double sum_threshold = neighborhood_voxels * 0.1;
	double sum = 0;
	
	
	for( int column = left_edge; column <= right_edge; column++ )
		for( int row = top_edge; row <= bottom_edge; row++ )
			sum += image[column + (row * 200) + (voxel_z * 200 * 200)];
	if( is_hull)
		new_value[voxel] = ( sum > sum_threshold );
	else
		new_value[voxel] = sum / neighborhood_voxels;
}
template<typename T, typename T2> __declspec(__global__) void apply_averaging_filter_GPU( T* image, T2* new_value )
{
	int voxel_x = blockIdx.x;
	int voxel_y = blockIdx.y;	
	int voxel_z = threadIdx.x;
	int voxel = voxel_x + voxel_y * 200 + voxel_z * 200 * 200;
	image[voxel] = new_value[voxel];
}
void hull_selection()
{
	puts("Performing hull selection...");

	x_hull_h = (bool*) calloc( ( 200 * 200 * int( 6.0 / 0.25 ) ), sizeof(bool) );
	switch( MLP_HULL )
	{
		case SC_HULL  : x_hull_h = SC_hull_h;																						break;
		case MSC_HULL : std::transform( MSC_counts_h, MSC_counts_h + ( 200 * 200 * int( 6.0 / 0.25 ) ), MSC_counts_h, x_hull_h, std::logical_or<int> () );		break;
		case SM_HULL  : std::transform( SM_counts_h,  SM_counts_h + ( 200 * 200 * int( 6.0 / 0.25 ) ),  SM_counts_h,  x_hull_h, std::logical_or<int> () );		break;
		case FBP_HULL : x_hull_h = FBP_hull_h;								
	}
	if( WRITE_X_HULL )
	{
		puts("Writing selected hull to disk...");
		array_2_disk("x_hull", OUTPUT_DIRECTORY, OUTPUT_FOLDER, x_hull_h, 200, 200, int( 6.0 / 0.25 ), ( 200 * 200 * int( 6.0 / 0.25 ) ), true );
	}

	
	cudaMalloc((void**) &x_hull_d, ( ( 200 * 200 * int( 6.0 / 0.25 ) ) * sizeof(bool) ) );
	cudaMemcpy( x_hull_d, x_hull_h, ( ( 200 * 200 * int( 6.0 / 0.25 ) ) * sizeof(bool) ), cudaMemcpyHostToDevice );


	if( HULL_FILTER_ON )
	{
		puts("Filtering hull...");
		averaging_filter( x_hull_h, x_hull_d );
		puts("Hull Filtering complete");
		if( WRITE_FILTERED_HULL )
		{
			puts("Writing filtered hull to disk...");
			cudaMemcpy(x_hull_h, x_hull_d, ( ( 200 * 200 * int( 6.0 / 0.25 ) ) * sizeof(bool) ), cudaMemcpyDeviceToHost) ;
			array_2_disk( "x_hull_filtered", OUTPUT_DIRECTORY, OUTPUT_FOLDER, x_hull_h, 200, 200, int( 6.0 / 0.25 ), ( 200 * 200 * int( 6.0 / 0.25 ) ), true );
		}
	}
	puts("Hull selection complete.");
}



void create_MLP_test_image()
{
	double x, y;
	
	MLP_test_image_h = (int*)calloc( MLP_IMAGE_VOXELS, sizeof(int));

	for( int slice = 0; slice < MLP_IMAGE_SLICES; slice++ )
	{
		for( int row = 0; row < MLP_IMAGE_ROWS; row++ )
		{
			for( int column = 0; column < MLP_IMAGE_COLUMNS; column++ )
			{
				x = ( column - MLP_IMAGE_COLUMNS/2 + 0.5) * MLP_IMAGE_VOXEL_WIDTH;
				y = ( MLP_IMAGE_ROWS/2 - row - 0.5 ) * MLP_IMAGE_VOXEL_HEIGHT;
				if( pow( x, 2 ) + pow( y, 2 ) <= pow( double(MLP_IMAGE_RECON_CYL_RADIUS), 2) )
					MLP_test_image_h[slice * MLP_IMAGE_COLUMNS * MLP_IMAGE_ROWS + row * MLP_IMAGE_COLUMNS + column] = 1;
				if( pow( x / MLP_PHANTOM_A, 2 ) + pow( y / MLP_PHANTOM_B, 2 ) <= 1 )
					MLP_test_image_h[slice * MLP_IMAGE_COLUMNS * MLP_IMAGE_ROWS + row * MLP_IMAGE_COLUMNS + column] = 8;
			}
		}
	}
}
void MLP_entry_exit( int*& image, bool entry, float x_start, float y_start, float z_start, float xy_angle, float xz_angle, float x_object, float y_object, float z_object )
{



























































































































































































}
void MLP_test()
{
	char user_response[20];
	double x_entry = -3.0;
	double y_entry = -sqrt( pow(MLP_IMAGE_RECON_CYL_RADIUS, 2) - pow(x_entry,2) );
	double z_entry = 0.0;
	double x_exit = 2.5;
	double y_exit = sqrt( pow(MLP_IMAGE_RECON_CYL_RADIUS, 2) - pow(x_exit,2) );
	double z_exit = 0.0;
	double xy_entry_angle = 25 * ( 4 * atan( 1.0 ) )/180, xz_entry_angle = 0.0;
	double xy_exit_angle = 45* ( 4 * atan( 1.0 ) )/180, xz_exit_angle = 0.0;
	double x_in_object, y_in_object, z_in_object;
	double u_in_object, t_in_object, v_in_object;
	double x_out_object, y_out_object, z_out_object;
	double u_out_object, t_out_object, v_out_object;

	
	
	
	double voxel_x, voxel_y, voxel_z;
	int voxel;
	int x_move_direction, y_move_direction, z_move_direction;
	int x_voxel_step, y_voxel_step, z_voxel_step;
	double x, y, z;
	double x_inside, y_inside, z_inside;
	double x_to_go, y_to_go, z_to_go;
	double delta_x, delta_y, delta_z;
	double x_extension, y_extension;
	double x_move, y_move, z_move;
	bool end_walk, outside_image;
	bool entered_object = false, exited_object = false;





	
	
	

	
	x_inside = modf( ( x_entry + MLP_IMAGE_WIDTH/2 ) / MLP_IMAGE_VOXEL_WIDTH, &voxel_x ) * MLP_IMAGE_VOXEL_WIDTH;	
	y_inside = modf( ( MLP_IMAGE_HEIGHT/2 - y_entry ) / MLP_IMAGE_VOXEL_HEIGHT, &voxel_y ) * MLP_IMAGE_VOXEL_HEIGHT;
	z_inside = modf( ( MLP_IMAGE_THICKNESS/2 - z_entry ) / MLP_IMAGE_VOXEL_THICKNESS, &voxel_z ) * MLP_IMAGE_VOXEL_THICKNESS;
	
	
	
	voxel = int(voxel_x + voxel_y * MLP_IMAGE_COLUMNS + voxel_z * MLP_IMAGE_COLUMNS * MLP_IMAGE_ROWS);
	
	
	
	

	
	delta_x = MLP_IMAGE_VOXEL_WIDTH;
	delta_y = tan( xy_entry_angle ) * MLP_IMAGE_VOXEL_WIDTH;
	delta_z = tan( xz_entry_angle ) * MLP_IMAGE_VOXEL_WIDTH;
	if( x_entry == x_exit )
	{
		delta_x = 0;
		delta_y = MLP_IMAGE_VOXEL_HEIGHT;
		delta_z = tan(xz_entry_angle) / tan(xy_entry_angle) * MLP_IMAGE_VOXEL_HEIGHT;
		if( y_entry == y_exit )
		{
			delta_x = 0;
			delta_y = 0;
			delta_z = MLP_IMAGE_VOXEL_THICKNESS;
		}
	}
	
	x_move = 0, y_move = 0, z_move = 0;
	


	x_move_direction = ( cos(xy_entry_angle) >= 0 ) - ( cos(xy_entry_angle) < 0 );
	y_move_direction = ( sin(xy_entry_angle) >= 0 ) - ( sin(xy_entry_angle) < 0 );
	z_move_direction = ( sin(xy_entry_angle) >= 0 ) - ( sin(xy_entry_angle) < 0 );
	x_voxel_step = x_move_direction;
	y_voxel_step = -y_move_direction;
	z_voxel_step = -z_move_direction;
	
	
	
	x = x_entry, y = y_entry, z = z_entry;
	x_to_go = ( x_voxel_step > 0 ) * ( MLP_IMAGE_VOXEL_WIDTH - x_inside ) + ( x_voxel_step <= 0 ) * x_inside;
	y_to_go = ( y_voxel_step > 0 ) * ( MLP_IMAGE_VOXEL_HEIGHT - y_inside ) + ( y_voxel_step <= 0 ) * y_inside;
	z_to_go = ( z_voxel_step > 0 ) * ( MLP_IMAGE_VOXEL_THICKNESS - z_inside ) + ( z_voxel_step <= 0 ) * z_inside;
	
	
	
	outside_image = (voxel_x >= MLP_IMAGE_COLUMNS ) || (voxel_y >= MLP_IMAGE_ROWS ) || (voxel_z >= MLP_IMAGE_SLICES );
	if( !outside_image )
	{
		entered_object = MLP_test_image_h[voxel] == 8;
		MLP_test_image_h[voxel] = 4;
	}
	end_walk = entered_object || outside_image;
	
	
	
	if( z_entry != z_exit )
	{
		while( !end_walk )
		{
			
			x_extension = delta_z/delta_x * x_to_go;
			y_extension = delta_z/delta_y * y_to_go;
			if( z_to_go <= x_extension && z_to_go <= y_extension )
			{
				
				x_move = delta_x / delta_z * z_to_go;
				y_move = delta_y / delta_z * z_to_go;
				z_move = z_to_go;
				x_to_go -= x_move;
				y_to_go -= y_move;
				z_to_go = MLP_IMAGE_VOXEL_THICKNESS;
				voxel_z += z_voxel_step;
				if( x_to_go == 0 )
				{
					voxel_x += x_voxel_step;
					x_to_go = MLP_IMAGE_VOXEL_WIDTH;
				}
				if(	y_to_go == 0 )
				{
					voxel_y += y_voxel_step;
					y_to_go = MLP_IMAGE_VOXEL_HEIGHT;
				}
			}
			
			else if( x_extension <= y_extension )
			{
				
				x_move = x_to_go;
				y_move = delta_y / delta_x * x_to_go;
				z_move = delta_z / delta_x * x_to_go;
				x_to_go = MLP_IMAGE_VOXEL_WIDTH;
				y_to_go -= y_move;
				z_to_go -= z_move;
				voxel_x += x_voxel_step;
				if( y_to_go == 0 )
				{
					y_to_go = MLP_IMAGE_VOXEL_HEIGHT;
					voxel_y += y_voxel_step;
				}
			}
			
			else
			{
				
				x_move = delta_x / delta_y * y_to_go;
				y_move = y_to_go;
				z_move = delta_z / delta_y * y_to_go;
				x_to_go -= x_move;
				y_to_go = MLP_IMAGE_VOXEL_HEIGHT;
				z_to_go -= z_move;
				voxel_y += y_voxel_step;
			}
			voxel = int(voxel_x + voxel_y * MLP_IMAGE_COLUMNS + voxel_z * MLP_IMAGE_COLUMNS * MLP_IMAGE_ROWS);
			outside_image = (voxel_x >= MLP_IMAGE_COLUMNS ) || (voxel_y >= MLP_IMAGE_ROWS ) || (voxel_z >= MLP_IMAGE_SLICES );
			if( !outside_image )
			{
				entered_object = MLP_test_image_h[voxel] == 8;
				MLP_test_image_h[voxel] = 4;
			}
			x += x_move_direction * x_move;
			y += y_move_direction * y_move;
			z += z_move_direction * z_move;				
			end_walk = entered_object || outside_image;
		}
	}
	else
	{
		
		while( !end_walk )
		{
			
			
			
			
			
			y_extension = delta_x/delta_y * y_to_go;
			
			
			if( x_to_go <= y_extension )
			{
				
				x_move = x_to_go;
				y_move = delta_y / delta_x * x_to_go;				
				x_to_go = MLP_IMAGE_VOXEL_WIDTH;
				y_to_go -= y_move;
				voxel_x += x_voxel_step;
				if( y_to_go == 0 )
				{
					y_to_go = MLP_IMAGE_VOXEL_HEIGHT;
					voxel_y += y_voxel_step;
				}
			}
			
			else
			{
				
				x_move = delta_x / delta_y * y_to_go;
				y_move = y_to_go;
				x_to_go -= x_move;
				y_to_go = MLP_IMAGE_VOXEL_HEIGHT;
				voxel_y += y_voxel_step;
			}
			voxel = int(voxel_x + voxel_y * MLP_IMAGE_COLUMNS + voxel_z * MLP_IMAGE_COLUMNS * MLP_IMAGE_ROWS);
			
			
			
			
			
			outside_image = (voxel_x >= MLP_IMAGE_COLUMNS ) || (voxel_y >= MLP_IMAGE_ROWS ) || (voxel_z >= MLP_IMAGE_SLICES );
			if( !outside_image )
			{
				entered_object = MLP_test_image_h[voxel] == 8;
				MLP_test_image_h[voxel] = 4;
			}
			
			x += x_move_direction * x_move;
			y += y_move_direction * y_move;
			end_walk = entered_object || outside_image;
			
		}
	}
	if( entered_object )
	{
		x_in_object = x;
		y_in_object = y;
		z_in_object = z;
	}




	
	
	

	
	x_inside = modf( ( x_exit + MLP_IMAGE_WIDTH/2 ) / MLP_IMAGE_VOXEL_WIDTH, &voxel_x ) * MLP_IMAGE_VOXEL_WIDTH;	
	y_inside = modf( ( MLP_IMAGE_HEIGHT/2 - y_exit ) / MLP_IMAGE_VOXEL_HEIGHT, &voxel_y ) * MLP_IMAGE_VOXEL_HEIGHT;
	z_inside = modf( ( MLP_IMAGE_THICKNESS/2 - z_exit ) / MLP_IMAGE_VOXEL_THICKNESS, &voxel_z ) * MLP_IMAGE_VOXEL_THICKNESS;
	
	
	
	voxel = int(voxel_x + voxel_y * MLP_IMAGE_COLUMNS + voxel_z * MLP_IMAGE_COLUMNS * MLP_IMAGE_ROWS);
	
	
	
	

	
	delta_x = MLP_IMAGE_VOXEL_WIDTH;
	delta_y = tan( xy_exit_angle ) * MLP_IMAGE_VOXEL_WIDTH;
	delta_z = tan( xz_exit_angle ) * MLP_IMAGE_VOXEL_WIDTH;
	if( x_entry == x_exit )
	{
		delta_x = 0;
		delta_y = MLP_IMAGE_VOXEL_HEIGHT;
		delta_z = tan(xz_exit_angle) / tan(xy_exit_angle) * MLP_IMAGE_VOXEL_HEIGHT;
		if( y_entry == y_exit )
		{
			delta_x = 0;
			delta_y = 0;
			delta_z = MLP_IMAGE_VOXEL_THICKNESS;
		}
	}
	
	x_move = 0, y_move = 0, z_move = 0;
	
	
	
	x_move_direction = ( cos(xy_exit_angle) < 0 ) - ( cos(xy_exit_angle) >= 0 );
	y_move_direction = ( sin(xy_exit_angle) < 0 ) - ( sin(xy_exit_angle) >= 0 );
	z_move_direction = ( sin(xy_exit_angle) < 0 ) - ( sin(xy_exit_angle) >= 0 );
	x_voxel_step = x_move_direction;
	y_voxel_step = -y_move_direction;
	z_voxel_step = -z_move_direction;
	
	
	
	x = x_exit, y = y_exit, z = z_exit;
	x_to_go = ( x_voxel_step > 0 ) * ( MLP_IMAGE_VOXEL_WIDTH - x_inside ) + ( x_voxel_step <= 0 ) * x_inside;
	y_to_go = ( y_voxel_step > 0 ) * ( MLP_IMAGE_VOXEL_HEIGHT - y_inside ) + ( y_voxel_step <= 0 ) * y_inside;
	z_to_go = ( z_voxel_step > 0 ) * ( MLP_IMAGE_VOXEL_THICKNESS - z_inside ) + ( z_voxel_step <= 0 ) * z_inside;
	
	
	
	outside_image = (voxel_x >= MLP_IMAGE_COLUMNS ) || (voxel_y >= MLP_IMAGE_ROWS ) || (voxel_z >= MLP_IMAGE_SLICES );
	if( !outside_image )
	{
		exited_object = MLP_test_image_h[voxel] == 8;
		MLP_test_image_h[voxel] = 4;
	}
	end_walk = exited_object || outside_image;
	
	
	
	if( z_entry != z_exit )
	{
		
		while( !end_walk )
		{
			
			x_extension = delta_z/delta_x * x_to_go;
			y_extension = delta_z/delta_y * y_to_go;
			if( z_to_go <= x_extension && z_to_go <= y_extension )
			{
				
				x_move = delta_x / delta_z * z_to_go;
				y_move = delta_y / delta_z * z_to_go;
				z_move = z_to_go;
				x_to_go -= x_move;
				y_to_go -= y_move;
				z_to_go = MLP_IMAGE_VOXEL_THICKNESS;
				voxel_z += z_voxel_step;
				if( x_to_go == 0 )
				{
					voxel_x += x_voxel_step;
					x_to_go = MLP_IMAGE_VOXEL_WIDTH;
				}
				if(	y_to_go == 0 )
				{
					voxel_y += y_voxel_step;
					y_to_go = MLP_IMAGE_VOXEL_HEIGHT;
				}
			}
			
			else if( x_extension <= y_extension )
			{
				
				x_move = x_to_go;
				y_move = delta_y / delta_x * x_to_go;
				z_move = delta_z / delta_x * x_to_go;
				x_to_go = MLP_IMAGE_VOXEL_WIDTH;
				y_to_go -= y_move;
				z_to_go -= z_move;
				voxel_x += x_voxel_step;
				if( y_to_go == 0 )
				{
					y_to_go = MLP_IMAGE_VOXEL_HEIGHT;
					voxel_y += y_voxel_step;
				}
			}
			
			else
			{
				
				x_move = delta_x / delta_y * y_to_go;
				y_move = y_to_go;
				z_move = delta_z / delta_y * y_to_go;
				x_to_go -= x_move;
				y_to_go = MLP_IMAGE_VOXEL_HEIGHT;
				z_to_go -= z_move;
				voxel_y += y_voxel_step;
			}
			voxel = int( voxel_x + voxel_y * MLP_IMAGE_COLUMNS + voxel_z * MLP_IMAGE_COLUMNS * MLP_IMAGE_ROWS );
			outside_image = ( voxel_x >= MLP_IMAGE_COLUMNS ) || ( voxel_y >= MLP_IMAGE_ROWS ) || ( voxel_z >= MLP_IMAGE_SLICES );
			if( !outside_image )
			{
				exited_object = MLP_test_image_h[voxel] == 8;
				MLP_test_image_h[voxel] = 4;
			}
			x += x_move_direction * x_move;
			y += y_move_direction * y_move;
			z += z_move_direction * z_move;				
			end_walk = exited_object || outside_image;
		}
	}
	else
	{
		
		while( !end_walk )
		{
			
			
			
			
			
			y_extension = delta_x/delta_y * y_to_go;
			
			
			if( x_to_go <= y_extension )
			{
				
				x_move = x_to_go;
				y_move = delta_y / delta_x * x_to_go;				
				x_to_go = MLP_IMAGE_VOXEL_WIDTH;
				y_to_go -= y_move;
				voxel_x += x_voxel_step;
				if( y_to_go == 0 )
				{
					y_to_go = MLP_IMAGE_VOXEL_HEIGHT;
					voxel_y += y_voxel_step;
				}
			}
			
			else
			{
				
				x_move = delta_x / delta_y * y_to_go;
				y_move = y_to_go;
				x_to_go -= x_move;
				y_to_go = MLP_IMAGE_VOXEL_HEIGHT;
				voxel_y += y_voxel_step;
			}
			voxel = int(voxel_x + voxel_y * MLP_IMAGE_COLUMNS + voxel_z * MLP_IMAGE_COLUMNS * MLP_IMAGE_ROWS);
			



		
			outside_image = (voxel_x >= MLP_IMAGE_COLUMNS ) || (voxel_y >= MLP_IMAGE_ROWS ) || (voxel_z >= MLP_IMAGE_SLICES );
			if( !outside_image )
			{
				exited_object = MLP_test_image_h[voxel] == 8;
				MLP_test_image_h[voxel] = 4;
			}
			
			x += x_move_direction * x_move;
			y += y_move_direction * y_move;
			end_walk = exited_object || outside_image;
			
		}
	}
	if( exited_object )
	{
		x_out_object = x;
		y_out_object = y;
		z_out_object = z;
	}

	x_inside = modf( ( x_in_object + MLP_IMAGE_WIDTH/2 ) / MLP_IMAGE_VOXEL_WIDTH, &voxel_x ) * MLP_IMAGE_VOXEL_WIDTH;	
	y_inside = modf( ( MLP_IMAGE_HEIGHT/2 - y_in_object ) / MLP_IMAGE_VOXEL_HEIGHT, &voxel_y ) * MLP_IMAGE_VOXEL_HEIGHT;
	z_inside = modf( ( MLP_IMAGE_THICKNESS/2 - z_in_object ) / MLP_IMAGE_VOXEL_THICKNESS, &voxel_z ) * MLP_IMAGE_VOXEL_THICKNESS;

	
	
	
	
	
	voxel = int(voxel_x + voxel_y * MLP_IMAGE_COLUMNS + voxel_z * MLP_IMAGE_COLUMNS * MLP_IMAGE_ROWS);

	int path[1000];
	int path_index = 0;
	double chord_lengths[1000];
	MLP_test_image_h[voxel] = 0;
	path[path_index++] = voxel;

	u_in_object = ( cos( xy_entry_angle ) * x_in_object ) + ( sin( xy_entry_angle ) * y_in_object );
	u_out_object = ( cos( xy_entry_angle ) * x_out_object ) + ( sin( xy_entry_angle ) * y_out_object );
	t_in_object = ( cos( xy_entry_angle ) * y_in_object ) - ( sin( xy_entry_angle ) * x_in_object );
	t_out_object = ( cos( xy_entry_angle ) * y_out_object ) - ( sin( xy_entry_angle ) * x_out_object );
	v_in_object = z_in_object;
	v_out_object = z_out_object;
	
	double T_0[2] = { t_in_object, 0 };
	double T_2[2] = { t_out_object, xy_exit_angle - xy_entry_angle };
	double V_0[2] = { v_in_object, xz_entry_angle };
	double V_2[2] = { v_out_object, xz_exit_angle };
	double u_2 = abs(u_out_object - u_in_object);
	double u_0 = 0, u_1 = (min(( ( 2 * 8.0 ) / 200 ), ( ( 2 * 8.0 ) / 200 )) / 2);
	double t_1_previous, v_1_previous;
	double x_1_previous = x, y_1_previous = y, z_1_previous = z;
	int voxel_x_previous = voxel_x;
	int voxel_y_previous = voxel_y;
	int voxel_z_previous = voxel_z;
	int voxel_previous = voxel;
	int voxels_passed;
	double chord_segment;
	double chord_fraction;
	double x_to_edge, y_to_edge, z_to_edge;
	
	while( u_1 <= u_2 - (min(( ( 2 * 8.0 ) / 200 ), ( ( 2 * 8.0 ) / 200 )) / 2) )
	{
		double R_0[4] = { 1.0, u_1 - u_0, 0.0 , 1.0}; 
		double R_0T[4] = { 1.0, 0.0, u_1 - u_0 , 1.0}; 
		double R_1[4] = { 1.0, u_2 - u_1, 0.0 , 1.0}; 
		double R_1T[4] = { 1.0, 0.0, u_2 - u_1 , 1.0};  
	
		double sigma_1_coefficient = pow( 13.6 * ( 1 + 0.038 * log( (u_1 - u_0)/36.1) ), 2.0 ) / 36.1;
		double sigma_t1 = (A_0/3)*pow(u_1, 3.0) + (A_1/12)*pow(u_1, 4.0) + (A_2/30)*pow(u_1, 5.0) + (A_3/60)*pow(u_1, 6.0) + (A_4/105)*pow(u_1, 7.0) + (A_5/168)*pow(u_1, 8.0);
		double sigma_t1_theta1 = pow(u_1, 2.0 )*( (A_0/2) + (A_1/6)*u_1 + (A_2/12)*pow(u_1, 2.0) + (A_3/20)*pow(u_1, 3.0) + (A_4/30)*pow(u_1, 4.0) + (A_5/42)*pow(u_1, 5.0) );
		double sigma_theta1 = A_0*u_1 + (A_1/2)*pow(u_1, 2.0) + (A_2/3)*pow(u_1, 3.0) + (A_3/4)*pow(u_1, 4.0) + (A_4/5)*pow(u_1, 5.0) + (A_5/6)*pow(u_1, 6.0);	
		double determinant_Sigma_1 = sigma_t1 * sigma_theta1 - pow( sigma_t1_theta1, 2 );
		double Sigma_1I[4] = 
		{
			sigma_theta1 / determinant_Sigma_1, 
			-sigma_t1_theta1 / determinant_Sigma_1, 
			-sigma_t1_theta1 / determinant_Sigma_1, 
			sigma_t1 / determinant_Sigma_1 
		};
		double sigma_2_coefficient = pow( 13.6 * ( 1 + 0.038 * log( (u_2 - u_1)/36.1 ) ), 2.0 ) / 36.1;	
		double sigma_t2  = (A_0/3)*pow(u_2, 3.0) + (A_1/12)*pow(u_2, 4.0) + (A_2/30)*pow(u_2, 5.0) + (A_3/60)*pow(u_2, 6.0) + (A_4/105)*pow(u_2, 7.0) + (A_5/168)*pow(u_2, 8.0) 
						 - (A_0/3)*pow(u_1, 3.0) - (A_1/4)*pow(u_1, 4.0) - (A_2/5)*pow(u_1, 5.0) - (A_3/6)*pow(u_1, 6.0) - (A_4/7)*pow(u_1, 7.0) - (A_5/8)*pow(u_1, 8.0) 
						 + 2*u_2*( (A_0/2)*pow(u_1, 2.0) + (A_1/3)*pow(u_1, 3.0) + (A_2/4)*pow(u_1, 4.0) + (A_3/5)*pow(u_1, 5.0) + (A_4/6)*pow(u_1, 6.0) + (A_5/7)*pow(u_1, 7.0) ) 
						 - pow(u_2, 2.0) * ( A_0*u_1 + (A_1/2)*pow(u_1, 2.0) + (A_2/3)*pow(u_1, 3.0) + (A_3/4)*pow(u_1, 4.0) + (A_4/5)*pow(u_1, 5.0) + (A_5/6)*pow(u_1, 6.0) );
		double sigma_t2_theta2	= pow(u_2, 2.0 )*( (A_0/2) + (A_1/6)*u_2 + (A_2/12)*pow(u_2, 2.0) + (A_3/20)*pow(u_2, 3.0) + (A_4/30)*pow(u_2, 4.0) + (A_5/42)*pow(u_2, 5.0) ) 
								- u_2*u_1*( A_0 + (A_1/2)*u_1 + (A_2/3)*pow(u_1, 2.0) + (A_3/4)*pow(u_1, 3.0) + (A_4/5)*pow(u_1, 4.0) + (A_5/6)*pow(u_1, 5.0) ) 
								+ pow(u_1, 2.0 )*( (A_0/2) + (A_1/3)*u_1 + (A_2/4)*pow(u_1, 2.0) + (A_3/5)*pow(u_1, 3.0) + (A_4/6)*pow(u_1, 4.0) + (A_5/7)*pow(u_1, 5.0) );
		double sigma_theta2 = A_0 * ( u_2 - u_1 ) + ( A_1 / 2 ) * ( pow(u_2, 2.0) - pow(u_1, 2.0) ) + ( A_2 / 3 ) * ( pow(u_2, 3.0) - pow(u_1, 3.0) ) 
							+ ( A_3 / 4 ) * ( pow(u_2, 4.0) - pow(u_1, 4.0) ) + ( A_4 / 5 ) * ( pow(u_2, 5.0) - pow(u_1, 5.0) ) + ( A_5 /6 )*( pow(u_2, 6.0) - pow(u_1, 6.0) );	
		double determinant_Sigma_2 = sigma_t2 * sigma_theta2 - pow( sigma_t2_theta2, 2 );
		double Sigma_2I[4] = 
		{
			sigma_theta2 / determinant_Sigma_2, 
			-sigma_t2_theta2 / determinant_Sigma_2, 
			-sigma_t2_theta2 / determinant_Sigma_2, 
			sigma_t2 / determinant_Sigma_2 
		}; 
		double first_term[4] = 
		{
			Sigma_1I[0] + R_1T[0] * ( Sigma_2I[0] * R_1[0] + Sigma_2I[1] * R_1[2] ) + R_1T[1] * ( Sigma_2I[2] * R_1[0] + Sigma_2I[3] * R_1[2] ),
			Sigma_1I[1] + R_1T[0] * ( Sigma_2I[0] * R_1[1] + Sigma_2I[1] * R_1[3] ) + R_1T[1] * ( Sigma_2I[2] * R_1[1] + Sigma_2I[3] * R_1[3] ),
			Sigma_1I[2] + R_1T[2] * ( Sigma_2I[0] * R_1[0] + Sigma_2I[1] * R_1[2] ) + R_1T[3] * ( Sigma_2I[2] * R_1[0] + Sigma_2I[3] * R_1[2] ),
			Sigma_1I[3] + R_1T[2] * ( Sigma_2I[0] * R_1[1] + Sigma_2I[1] * R_1[3] ) + R_1T[3] * ( Sigma_2I[2] * R_1[1] + Sigma_2I[3] * R_1[3] )
		};
		double determinant_first_term = first_term[0] * first_term[3] - first_term[1] * first_term[2];
		first_term[0] = first_term[3] / determinant_first_term;
		first_term[1] = -first_term[1] / determinant_first_term;
		first_term[2] = -first_term[2] / determinant_first_term;
		first_term[3] = first_term[0] / determinant_first_term;
		double second_term[2] = 
		{
			Sigma_1I[0] * ( R_0[0] * T_0[0] + R_0[1] * T_0[1] ) 
			+ Sigma_1I[1] * ( R_0[2] * T_0[0] + R_0[3] * T_0[1] ) 
			+ R_1T[0] * ( Sigma_2I[0] * T_2[0] + Sigma_2I[1] * T_2[1] ) 
			+ R_1T[1] * ( Sigma_2I[2] * T_2[0] + Sigma_2I[3] * T_2[1] )
			, 
			Sigma_1I[2] * ( R_0[0] * T_0[0] + R_0[1] * T_0[1] ) 
			+ Sigma_1I[3] * ( R_0[2] * T_0[0] + R_0[3] * T_0[1] ) 
			+ R_1T[2] * ( Sigma_2I[0] * T_2[0] + Sigma_2I[1] * T_2[1] ) 
			+ R_1T[3] * ( Sigma_2I[2] * T_2[0] + Sigma_2I[3] * T_2[1] )
		};
		double t_1 = first_term[0] * second_term[0] + first_term[1] * second_term[1];
		double theta_1 = first_term[2] * second_term[0] + first_term[3] * second_term[1];

		
		second_term[0]	= Sigma_1I[0] * ( R_0[0] * V_0[0] + R_0[1] * V_0[1] ) 
						+ Sigma_1I[1] * ( R_0[2] * V_0[0] + R_0[3] * V_0[1] ) 
						+ R_1T[0] * ( Sigma_2I[0] * V_2[0] + Sigma_2I[1] * V_2[1] ) 
						+ R_1T[1] * ( Sigma_2I[2] * V_2[0] + Sigma_2I[3] * V_2[1] );
		second_term[1]	= Sigma_1I[2] * ( R_0[0] * V_0[0] + R_0[1] * V_0[1] ) 
						+ Sigma_1I[3] * ( R_0[2] * V_0[0] + R_0[3] * V_0[1] ) 
						+ R_1T[2] * ( Sigma_2I[0] * V_2[0] + Sigma_2I[1] * V_2[1] ) 
						+ R_1T[3] * ( Sigma_2I[2] * V_2[0] + Sigma_2I[3] * V_2[1] );
		double v_1 = first_term[0] * second_term[0] + first_term[1] * second_term[1];
		double phi_1 = first_term[2] * second_term[0] + first_term[3] * second_term[1];

		
		double x_1 = ( cos( xy_entry_angle ) * (u_in_object + u_1) ) - ( sin( xy_entry_angle ) * t_1 );
		double y_1 = ( sin( xy_entry_angle ) * (u_in_object + u_1) ) + ( cos( xy_entry_angle ) * t_1 );
		double z_1 = v_in_object + v_1;
		x_inside = modf( ( x_1 + MLP_IMAGE_WIDTH/2 ) / MLP_IMAGE_VOXEL_WIDTH, &voxel_x ) * MLP_IMAGE_VOXEL_WIDTH;	
		y_inside = modf( ( MLP_IMAGE_HEIGHT/2 - y_1 ) / MLP_IMAGE_VOXEL_HEIGHT, &voxel_y ) * MLP_IMAGE_VOXEL_HEIGHT;
		z_inside = modf( ( MLP_IMAGE_THICKNESS/2 - z_1 ) / MLP_IMAGE_VOXEL_THICKNESS, &voxel_z ) * MLP_IMAGE_VOXEL_THICKNESS;

		x_voxel_step = (voxel_x >= voxel_x_previous ) - (voxel_x <= voxel_x_previous );
		y_voxel_step = (voxel_y >= voxel_y_previous ) - (voxel_y <= voxel_y_previous );
		z_voxel_step = (voxel_z >= voxel_z_previous ) - (voxel_z <= voxel_z_previous );

		x_to_edge = (x_voxel_step < 0) * x_inside + (x_voxel_step > 0) * (( ( 2 * 8.0 ) / 200 ) - x_inside);
		y_to_edge = (y_voxel_step < 0) * y_inside + (y_voxel_step > 0) * (( ( 2 * 8.0 ) / 200 ) - y_inside);
		z_to_edge = (z_voxel_step < 0) * z_inside + (z_voxel_step > 0) * (( ( int( 6.0 / 0.25 ) * 0.25 ) / int( 6.0 / 0.25 ) ) - z_inside);

		voxel = int(voxel_x + voxel_y * MLP_IMAGE_COLUMNS + voxel_z * MLP_IMAGE_COLUMNS * MLP_IMAGE_ROWS);
		if( voxel != path[path_index - 1] )
			path[path_index++] = voxel;
		for( int i = 0; i < path_index; i++ )
			printf( "path[i] = %d\n", path[i] );
		printf( "path_index = %d\n\n", path_index );
		fgets(user_response, sizeof(user_response), (&__iob_func()[0]));
		MLP_test_image_h[voxel] = 0;

		voxels_passed = (voxel_x - voxel_x_previous) + (voxel_y - voxel_y_previous) + (voxel_z - voxel_z_previous);
		chord_segment = sqrt( pow( x_1_previous - x_1, 2 ) + pow( y_1_previous - y_1, 2 ) + pow( z_1_previous - z_1, 2 ) );
		if( voxels_passed == 0 )
		{
			chord_lengths[path_index - 1] += chord_segment;
		}
		else if( voxels_passed == 1 )
		{
			if( x_voxel_step != 0 )
			{
				chord_fraction = x_to_edge / (x_1_previous - x_1);
			}
			else if( y_voxel_step != 0 )
			{
				chord_fraction = y_to_edge / (y_1_previous - y_1);
			}
			else
			{
				chord_fraction = z_to_edge / (z_1_previous - z_1);
			}
			chord_lengths[path_index - 1] += chord_fraction * chord_segment;
			chord_lengths[path_index] += chord_segment - chord_lengths[path_index - 1];
		}
		else if( voxels_passed == 2 )
		{

		}
		else if( voxels_passed == 3 )
		{

		}
		u_1 += (min(( ( 2 * 8.0 ) / 200 ), ( ( 2 * 8.0 ) / 200 )) / 2);
		t_1_previous = t_1;
		v_1_previous = v_1;
		x_1_previous = x_1;
		y_1_previous = y_1;
		z_1_previous = z_1;
		voxel_x_previous = voxel_x;
		voxel_y_previous = voxel_y;
		voxel_z_previous = voxel_z;
		voxel_previous = voxel;
	}
}
float mean_chord_length( float, float )
{
	float eff_angle_t,eff_angle_v;
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	return 0;
	
}



void define_initial_iterate()
{
	float* x_h = (float*) calloc( ( 200 * 200 * int( 6.0 / 0.25 ) ), sizeof(float) );

	switch( X_K0 )
	{
		case X_HULL		: std::copy( x_hull_h, x_hull_h + ( 200 * 200 * int( 6.0 / 0.25 ) ), x_h );	break;
		case FBP_IMAGE	: x_h = FBP_image_h;								break;
		case HYBRID		: std::transform(FBP_image_h, FBP_image_h + ( 200 * 200 * int( 6.0 / 0.25 ) ), x_hull_h, x_h, std::multiplies<float>() );
	}

	if( WRITE_X_K0 )
		array_2_disk("x_k0", OUTPUT_DIRECTORY, OUTPUT_FOLDER, x_h, 200, 200, int( 6.0 / 0.25 ), ( 200 * 200 * int( 6.0 / 0.25 ) ), true );
}
void create_hull_image_hybrid()
{
	




	

	dim3 dimBlock( int( 6.0 / 0.25 ) );
	dim3 dimGrid( 200, 200 );   

	create_hull_image_hybrid_GPU<<< dimGrid, dimBlock >>>( x_hull_d, FBP_image_d );
	cudaMemcpy( x_h, FBP_image_d, ( ( 200 * 200 * int( 6.0 / 0.25 ) ) * sizeof(float) ), cudaMemcpyDeviceToHost );

	if( WRITE_X_K0 )
		array_2_disk("x_k0", OUTPUT_DIRECTORY, OUTPUT_FOLDER, x_h, 200, 200, int( 6.0 / 0.25 ), ( 200 * 200 * int( 6.0 / 0.25 ) ), true );
}
__declspec(__global__) void create_hull_image_hybrid_GPU( bool*& x_hull, float*& FBP_image)
{
	int row = blockIdx.y, column = blockIdx.x, slice = threadIdx.x;
	int voxel = column + row * 200 + slice * 200 * 200;
	FBP_image[voxel] *= x_hull[voxel];
}



void initializations()
{
	puts("Allocating statistical analysis arrays on host/GPU...");

	bin_counts_h		  = (int*)	 calloc( ( int( 360 / 6.0 + 0.5 ) * int( 35.0 / 0.1 + 0.5 ) * int( 9.0 / 0.25 + 0.5 ) ), sizeof(int)	 );
	mean_WEPL_h			  = (float*) calloc( ( int( 360 / 6.0 + 0.5 ) * int( 35.0 / 0.1 + 0.5 ) * int( 9.0 / 0.25 + 0.5 ) ), sizeof(float) );
	mean_rel_ut_angle_h	  = (float*) calloc( ( int( 360 / 6.0 + 0.5 ) * int( 35.0 / 0.1 + 0.5 ) * int( 9.0 / 0.25 + 0.5 ) ), sizeof(float) );
	mean_rel_uv_angle_h	  = (float*) calloc( ( int( 360 / 6.0 + 0.5 ) * int( 35.0 / 0.1 + 0.5 ) * int( 9.0 / 0.25 + 0.5 ) ), sizeof(float) );
	
	cudaMalloc((void**) &bin_counts_d,			( ( int( 360 / 6.0 + 0.5 ) * int( 35.0 / 0.1 + 0.5 ) * int( 9.0 / 0.25 + 0.5 ) ) * sizeof(int) ) );
	cudaMalloc((void**) &mean_WEPL_d,			( ( int( 360 / 6.0 + 0.5 ) * int( 35.0 / 0.1 + 0.5 ) * int( 9.0 / 0.25 + 0.5 ) ) * sizeof(float) ) );
	cudaMalloc((void**) &mean_rel_ut_angle_d,	( ( int( 360 / 6.0 + 0.5 ) * int( 35.0 / 0.1 + 0.5 ) * int( 9.0 / 0.25 + 0.5 ) ) * sizeof(float) ) );
	cudaMalloc((void**) &mean_rel_uv_angle_d,	( ( int( 360 / 6.0 + 0.5 ) * int( 35.0 / 0.1 + 0.5 ) * int( 9.0 / 0.25 + 0.5 ) ) * sizeof(float) ) );

	cudaMemcpy( bin_counts_d,			bin_counts_h,			( ( int( 360 / 6.0 + 0.5 ) * int( 35.0 / 0.1 + 0.5 ) * int( 9.0 / 0.25 + 0.5 ) ) * sizeof(int) ),		cudaMemcpyHostToDevice );
	cudaMemcpy( mean_WEPL_d,			mean_WEPL_h,			( ( int( 360 / 6.0 + 0.5 ) * int( 35.0 / 0.1 + 0.5 ) * int( 9.0 / 0.25 + 0.5 ) ) * sizeof(float) ),	cudaMemcpyHostToDevice );
	cudaMemcpy( mean_rel_ut_angle_d,	mean_rel_ut_angle_h,	( ( int( 360 / 6.0 + 0.5 ) * int( 35.0 / 0.1 + 0.5 ) * int( 9.0 / 0.25 + 0.5 ) ) * sizeof(float) ),	cudaMemcpyHostToDevice );
	cudaMemcpy( mean_rel_uv_angle_d,	mean_rel_uv_angle_h,	( ( int( 360 / 6.0 + 0.5 ) * int( 35.0 / 0.1 + 0.5 ) * int( 9.0 / 0.25 + 0.5 ) ) * sizeof(float) ),	cudaMemcpyHostToDevice );
}
void reserve_vector_capacity()
{
	bin_num_vector.reserve( total_histories );
	
	WEPL_vector.reserve( total_histories );
	x_entry_vector.reserve( total_histories );
	y_entry_vector.reserve( total_histories );
	z_entry_vector.reserve( total_histories );
	x_exit_vector.reserve( total_histories );
	y_exit_vector.reserve( total_histories );
	z_exit_vector.reserve( total_histories );
	xy_entry_angle_vector.reserve( total_histories );
	xz_entry_angle_vector.reserve( total_histories );
	xy_exit_angle_vector.reserve( total_histories );
	xz_exit_angle_vector.reserve( total_histories );
}
void initial_processing_memory_clean()
{
	
	
	free( gantry_angle_h );
	cudaFree( x_entry_d );
	cudaFree( y_entry_d );
	cudaFree( z_entry_d );
	cudaFree( x_exit_d );
	cudaFree( y_exit_d );
	cudaFree( z_exit_d );
	cudaFree( missed_recon_volume_d );
	cudaFree( bin_num_d );
	cudaFree( WEPL_d);
}
void post_cut_memory_clean()
{
	puts("Freeing unnecessary memory, resizing vectors, and shrinking vectors to fit just the remaining histories...");

	free(failed_cuts_h );
	free(stddev_rel_ut_angle_h);
	free(stddev_rel_uv_angle_h);
	free(stddev_WEPL_h);

	cudaFree( failed_cuts_d );
	cudaFree( bin_num_d );
	cudaFree( WEPL_d );
	cudaFree( xy_entry_angle_d );
	cudaFree( xz_entry_angle_d );
	cudaFree( xy_exit_angle_d );
	cudaFree( xz_exit_angle_d );

	cudaFree( mean_rel_ut_angle_d );
	cudaFree( mean_rel_uv_angle_d );
	cudaFree( mean_WEPL_d );
	cudaFree( stddev_rel_ut_angle_d );
	cudaFree( stddev_rel_uv_angle_d );
	cudaFree( stddev_WEPL_d );
}
void resize_vectors( const int new_size )
{
	bin_num_vector.resize( new_size );
	
	WEPL_vector.resize( new_size );
	x_entry_vector.resize( new_size );	
	y_entry_vector.resize( new_size );	
	z_entry_vector.resize( new_size );
	x_exit_vector.resize( new_size );
	y_exit_vector.resize( new_size );
	z_exit_vector.resize( new_size );
	xy_entry_angle_vector.resize( new_size );	
	xz_entry_angle_vector.resize( new_size );	
	xy_exit_angle_vector.resize( new_size );
	xz_exit_angle_vector.resize( new_size );
}
void shrink_vectors( const int new_capacity )
{
	bin_num_vector.shrink_to_fit();
	
	WEPL_vector.shrink_to_fit();
	x_entry_vector.shrink_to_fit();	
	y_entry_vector.shrink_to_fit();	
	z_entry_vector.shrink_to_fit();	
	x_exit_vector.shrink_to_fit();	
	y_exit_vector.shrink_to_fit();	
	z_exit_vector.shrink_to_fit();	
	xy_entry_angle_vector.shrink_to_fit();	
	xz_entry_angle_vector.shrink_to_fit();	
	xy_exit_angle_vector.shrink_to_fit();	
	xz_exit_angle_vector.shrink_to_fit();	
}
void initialize_stddev()
{	
	stddev_rel_ut_angle_h = (float*) calloc( ( int( 360 / 6.0 + 0.5 ) * int( 35.0 / 0.1 + 0.5 ) * int( 9.0 / 0.25 + 0.5 ) ), sizeof(float) );	
	stddev_rel_uv_angle_h = (float*) calloc( ( int( 360 / 6.0 + 0.5 ) * int( 35.0 / 0.1 + 0.5 ) * int( 9.0 / 0.25 + 0.5 ) ), sizeof(float) );	
	stddev_WEPL_h		  = (float*) calloc( ( int( 360 / 6.0 + 0.5 ) * int( 35.0 / 0.1 + 0.5 ) * int( 9.0 / 0.25 + 0.5 ) ), sizeof(float) );

	cudaMalloc((void**) &stddev_rel_ut_angle_d,	( ( int( 360 / 6.0 + 0.5 ) * int( 35.0 / 0.1 + 0.5 ) * int( 9.0 / 0.25 + 0.5 ) ) * sizeof(float) ) );
	cudaMalloc((void**) &stddev_rel_uv_angle_d,	( ( int( 360 / 6.0 + 0.5 ) * int( 35.0 / 0.1 + 0.5 ) * int( 9.0 / 0.25 + 0.5 ) ) * sizeof(float) ) );
	cudaMalloc((void**) &stddev_WEPL_d,			( ( int( 360 / 6.0 + 0.5 ) * int( 35.0 / 0.1 + 0.5 ) * int( 9.0 / 0.25 + 0.5 ) ) * sizeof(float) ) );

	cudaMemcpy( stddev_rel_ut_angle_d,	stddev_rel_ut_angle_h,	( ( int( 360 / 6.0 + 0.5 ) * int( 35.0 / 0.1 + 0.5 ) * int( 9.0 / 0.25 + 0.5 ) ) * sizeof(float) ),	cudaMemcpyHostToDevice );
	cudaMemcpy( stddev_rel_uv_angle_d,	stddev_rel_uv_angle_h,	( ( int( 360 / 6.0 + 0.5 ) * int( 35.0 / 0.1 + 0.5 ) * int( 9.0 / 0.25 + 0.5 ) ) * sizeof(float) ),	cudaMemcpyHostToDevice );
	cudaMemcpy( stddev_WEPL_d,			stddev_WEPL_h,			( ( int( 360 / 6.0 + 0.5 ) * int( 35.0 / 0.1 + 0.5 ) * int( 9.0 / 0.25 + 0.5 ) ) * sizeof(float) ),	cudaMemcpyHostToDevice );
}
void allocations( const int num_histories)
{
	bin_num				= (int*)   calloc( num_histories,	sizeof(int)   );		
	gantry_angle		= (int*)   calloc( num_histories,	sizeof(int)   );
	WEPL				= (float*) calloc( num_histories,	sizeof(float) );		
	x_entry				= (float*) calloc( num_histories,	sizeof(float) );		
	y_entry				= (float*) calloc( num_histories,	sizeof(float) );		
	z_entry				= (float*) calloc( num_histories,	sizeof(float) );		
	x_exit				= (float*) calloc( num_histories,	sizeof(float) );		
	y_exit				= (float*) calloc( num_histories,	sizeof(float) );			
	z_exit				= (float*) calloc( num_histories,	sizeof(float) );			
	xy_entry_angle		= (float*) calloc( num_histories,	sizeof(float) );	
	xz_entry_angle		= (float*) calloc( num_histories,	sizeof(float) );	
	xy_exit_angle		= (float*) calloc( num_histories,	sizeof(float) );	
	xz_exit_angle		= (float*) calloc( num_histories,	sizeof(float) );	
}
void reallocations( const int new_size)
{
	bin_num				= (int*)   realloc( bin_num,			new_size * sizeof(int)   );		
	gantry_angle		= (int*)   realloc( gantry_angle,		new_size * sizeof(int)   );
	WEPL				= (float*) realloc( WEPL,				new_size * sizeof(float) );		
	x_entry				= (float*) realloc( x_entry,			new_size * sizeof(float) );		
	y_entry				= (float*) realloc( y_entry,			new_size * sizeof(float) );		
	z_entry				= (float*) realloc( z_entry,			new_size * sizeof(float) );		
	x_exit				= (float*) realloc( x_exit,				new_size * sizeof(float) );		
	y_exit				= (float*) realloc( y_exit,				new_size * sizeof(float) );			
	z_exit				= (float*) realloc( z_exit,				new_size * sizeof(float) );			
	xy_entry_angle		= (float*) realloc( xy_entry_angle,		new_size * sizeof(float) );	
	xz_entry_angle		= (float*) realloc( xz_entry_angle,		new_size * sizeof(float) );	
	xy_exit_angle		= (float*) realloc( xy_exit_angle,		new_size * sizeof(float) );	
	xz_exit_angle		= (float*) realloc( xz_exit_angle,		new_size * sizeof(float) );	
}



template<typename T> void array_2_disk( char* filename_base, const char* directory, const char* folder, T* data, const int x_max, const int y_max, const int z_max, const int elements, const bool single_file )
{
	char filename[256];
	std::ofstream output_file;
	int index;
	int num_files = z_max;
	int z_start = 0;
	int z_end = 1;
	if( single_file )
	{
		num_files = 1;
		z_end = z_max;
	}
	for( int file = 0; file < num_files; file++)
	{
		if( num_files == z_max )
			sprintf( filename, "%s%s/%s_%d.txt", directory, folder, filename_base, file );
		else
			sprintf( filename, "%s%s/%s.txt", directory, folder, filename_base );			
		output_file.open(filename);		
		for(int z = z_start; z < z_end; z++)
		{			
			for(int y = 0; y < y_max; y++)
			{
				for(int x = 0; x < x_max; x++)
				{
					index = x + ( y * x_max ) + ( z * x_max * y_max );
					if( index >= elements )
						break;
					output_file << data[index] << " ";
				}	
				if( index >= elements )
					break;
				output_file << std::endl;
			}
			if( index >= elements )
				break;
		}
		z_start += 1;
		z_end += 1;
		output_file.close();
	}
}
template<typename T> void vector_2_disk( char* filename_base, const char* directory, const char* folder, std::vector<T> data, const int x_max, const int y_max, const int z_max, const bool single_file )
{
	char filename[256];
	std::ofstream output_file;
	int elements = data.size();
	int index;
	int num_files = z_max;
	int z_start = 0;
	int z_end = 1;
	if( single_file )
	{
		num_files = 1;
		z_end = z_max;
	}
	for( int file = 0; file < num_files; file++)
	{
		if( num_files == z_max )
			sprintf( filename, "%s%s/%s_%d.txt", directory, folder, filename_base, file );
		else
			sprintf( filename, "%s%s/%s.txt", directory, folder, filename_base );			
		output_file.open(filename);		
		for(int z = z_start; z < z_end; z++)
		{			
			for(int y = 0; y < y_max; y++)
			{
				for(int x = 0; x < x_max; x++)
				{
					index = x + ( y * x_max ) + ( z * x_max * y_max );
					if( index >= elements )
						break;
					output_file << data[index] << " ";
				}	
				if( index >= elements )
					break;
				output_file << std::endl;
			}
			if( index >= elements )
				break;
		}
		z_start += 1;
		z_end += 1;
		output_file.close();
	}
}
void write_t_bin_data( FILE* output_file, const std::vector<int>& bin_numbers, const std::vector<float>& data, const BIN_ANALYSIS_TYPE type, const BIN_ORGANIZATION bin_order, int bin )
{
	std::vector<float> bin_histories;
	int num_histories;
	for( int t_bin = 0; t_bin < int( 35.0 / 0.1 + 0.5 ); t_bin++, bin++ )
	{
		if( bin_order == BY_HISTORY )
		{
			for( int i = 0; i < data.size(); i++ )
				if( bin_numbers[i] == bin )
					bin_histories.push_back(data[i]);
		}
		else
			bin_histories.push_back(data[bin]);
		num_histories = bin_histories.size();
		switch( type )
		{
			case COUNTS:	
				fprintf (output_file, "%d ", num_histories);																			
				break;
			case MEANS:		
				fprintf (output_file, "%f ", std::accumulate(bin_histories.begin(), bin_histories.end(), 0.0) / max(num_histories, 1 ) );
				break;
			case MEMBERS:	
				for( int i = 0; i < num_histories; i++ ) 
					fprintf (output_file, "%f ", bin_histories[i]); 
				if( t_bin != int( 35.0 / 0.1 + 0.5 ) - 1 )
					fputs("\n", output_file);
		}
		bin_histories.resize(0);
		bin_histories.shrink_to_fit();
	}
}
void write_bin_data( const char* filename_base, const std::vector<int>& bin_numbers, const std::vector<float>& data, const BIN_ANALYSIS_TYPE type, const BIN_ANALYSIS_FOR which_bins, const BIN_ORGANIZATION bin_order, ... )
{
	std::vector<int> angles;
	std::vector<int> angular_bins;
	std::vector<int> v_bins;
	if( which_bins == ALL_BINS )
	{
		angular_bins.resize( int( 360 / 6.0 + 0.5 ));
		v_bins.resize( int( 9.0 / 0.25 + 0.5 ));
		std::iota( angular_bins.begin(), angular_bins.end(), 0 );
		std::iota( v_bins.begin(), v_bins.end(), 0 );
	}
	else
	{
		va_list specific_bins;
		( __va_start(&specific_bins, bin_order) );
		angles = ( ( sizeof(std::vector<int>) > sizeof(__int64) || ( sizeof(std::vector<int>) & (sizeof(std::vector<int>) - 1) ) != 0 ) ? **(std::vector<int> **)( ( specific_bins += sizeof(__int64) ) - sizeof(__int64) ) : *(std::vector<int> *)( ( specific_bins += sizeof(__int64) ) - sizeof(__int64) ) );
		v_bins = ( ( sizeof(std::vector<int>) > sizeof(__int64) || ( sizeof(std::vector<int>) & (sizeof(std::vector<int>) - 1) ) != 0 ) ? **(std::vector<int> **)( ( specific_bins += sizeof(__int64) ) - sizeof(__int64) ) : *(std::vector<int> *)( ( specific_bins += sizeof(__int64) ) - sizeof(__int64) ) );
		( specific_bins = (va_list)0 );
		angular_bins.resize(angles.size());
		std::transform(angles.begin(), angles.end(), angular_bins.begin(), std::bind2nd(std::divides<int>(), 6.0 ) );
	}
	
	int num_angles = angular_bins.size();
	int num_v_bins = v_bins.size();
	





	char filename[256];
	int start_bin, angle;
	FILE* output_file;

	for( int angular_bin = 0; angular_bin < num_angles; angular_bin++)
	{
		angle = angular_bins[angular_bin] * 6.0;
		
		sprintf( filename, "%s%s/%s_%03d%s", OUTPUT_DIRECTORY, OUTPUT_FOLDER, filename_base, angle, ".txt" );
		output_file = fopen (filename, "w");
		for( int v_bin = 0; v_bin < num_v_bins; v_bin++)
		{			
			
			start_bin = angular_bins[angular_bin] * int( 35.0 / 0.1 + 0.5 ) + v_bins[v_bin] * int( 360 / 6.0 + 0.5 ) * int( 35.0 / 0.1 + 0.5 );
			write_t_bin_data( output_file, bin_numbers, data, type, bin_order, start_bin );
			if( v_bin != num_v_bins - 1 )
				fputs("\n", output_file);
		}	
		fclose (output_file);
	}
}
void write_t_bin_data( FILE* output_file, int*& bin_numbers, float*& data, const int data_elements, const BIN_ANALYSIS_TYPE type, const BIN_ORGANIZATION bin_order, int bin )
{
	std::vector<float> bin_histories;
	
	int num_bin_members;
	for( int t_bin = 0; t_bin < int( 35.0 / 0.1 + 0.5 ); t_bin++, bin++ )
	{
		if( bin_order == BY_HISTORY )
		{
			for( int i = 0; i < data_elements; i++ )
				if( bin_numbers[i] == bin )
					bin_histories.push_back(data[i]);
		}
		else
			bin_histories.push_back(data[bin]);
		num_bin_members = bin_histories.size();
		switch( type )
		{
			case COUNTS:	
				fprintf (output_file, "%d ", num_bin_members);																			
				break;
			case MEANS:		
				fprintf (output_file, "%f ", std::accumulate(bin_histories.begin(), bin_histories.end(), 0.0) / max(num_bin_members, 1 ) );
				break;
			case MEMBERS:	
				for( int i = 0; i < num_bin_members; i++ ) 
					fprintf (output_file, "%f ", bin_histories[i]); 
				if( t_bin != int( 35.0 / 0.1 + 0.5 ) - 1 )
					fputs("\n", output_file);
		}
		bin_histories.resize(0);
		bin_histories.shrink_to_fit();
	}
}
void write_bin_data( const char* filename_base, int*& bin_numbers, float*& data, const int data_elements, const BIN_ANALYSIS_TYPE type, const BIN_ANALYSIS_FOR which_bins, const BIN_ORGANIZATION bin_order, ... )
{
	std::vector<int> angles;
	std::vector<int> angular_bins;
	std::vector<int> v_bins;
	if( which_bins == ALL_BINS )
	{
		angular_bins.resize( int( 360 / 6.0 + 0.5 ));
		v_bins.resize( int( 9.0 / 0.25 + 0.5 ));
		std::iota( angular_bins.begin(), angular_bins.end(), 0 );
		std::iota( v_bins.begin(), v_bins.end(), 0 );
	}
	else
	{
		va_list specific_bins;
		( __va_start(&specific_bins, bin_order) );
		angles = ( ( sizeof(std::vector<int>) > sizeof(__int64) || ( sizeof(std::vector<int>) & (sizeof(std::vector<int>) - 1) ) != 0 ) ? **(std::vector<int> **)( ( specific_bins += sizeof(__int64) ) - sizeof(__int64) ) : *(std::vector<int> *)( ( specific_bins += sizeof(__int64) ) - sizeof(__int64) ) );
		v_bins = ( ( sizeof(std::vector<int>) > sizeof(__int64) || ( sizeof(std::vector<int>) & (sizeof(std::vector<int>) - 1) ) != 0 ) ? **(std::vector<int> **)( ( specific_bins += sizeof(__int64) ) - sizeof(__int64) ) : *(std::vector<int> *)( ( specific_bins += sizeof(__int64) ) - sizeof(__int64) ) );
		( specific_bins = (va_list)0 );
		angular_bins.resize(angles.size());
		std::transform(angles.begin(), angles.end(), angular_bins.begin(), std::bind2nd(std::divides<int>(), 6.0 ) );
	}
	
	
	int num_angles = angular_bins.size();
	int num_v_bins = v_bins.size();
	





	char filename[256];
	int start_bin, angle;
	FILE* output_file;

	for( int angular_bin = 0; angular_bin < num_angles; angular_bin++)
	{
		angle = angular_bins[angular_bin] * 6.0;
		
		sprintf( filename, "%s%s/%s_%03d%s", OUTPUT_DIRECTORY, OUTPUT_FOLDER, filename_base, angle, ".txt" );
		output_file = fopen (filename, "w");
		for( int v_bin = 0; v_bin < num_v_bins; v_bin++)
		{			
			
			start_bin = angular_bins[angular_bin] * int( 35.0 / 0.1 + 0.5 ) + v_bins[v_bin] * int( 360 / 6.0 + 0.5 ) * int( 35.0 / 0.1 + 0.5 );
			write_t_bin_data( output_file, bin_numbers, data, data_elements, type, bin_order, start_bin );
			if( v_bin != num_v_bins - 1 )
				fputs("\n", output_file);
		}	
		fclose (output_file);
	}
}
void bin_2_txt()
{
	count_histories();
	char filename[256];
	FILE* output_file;
	int start_file_num = 0, end_file_num = 0, histories_to_process = 0;
	while( start_file_num != ( 1 * int( 360 / 6.0 ) ) )
	{
		while( end_file_num < ( 1 * int( 360 / 6.0 ) ) )
		{
			if( histories_to_process + histories_per_file[end_file_num] < 300000 )
				histories_to_process += histories_per_file[end_file_num];
			else
				break;
			end_file_num++;
		}
		read_data_chunk( histories_to_process, start_file_num, end_file_num );
		sprintf( filename, "%s%s/%s%s%d%s", OUTPUT_DIRECTORY, OUTPUT_FOLDER, INPUT_BASE_NAME, "_", gantry_angle_h[0], ".txt" );
		output_file = fopen (filename, "w");

		for( int i = 0; i < histories_to_process; i++ )
		{
			fprintf(output_file, "%3f %3f %3f %3f %3f %3f %3f %3f %3f\n", t_in_1_h[i], t_in_2_h[i], t_out_1_h[i], t_out_2_h[i], v_in_1_h[i], v_in_2_h[i], v_out_1_h[i], v_out_2_h[i], WEPL_h[i]);
		}
		fclose (output_file);
		initial_processing_memory_clean();
		start_file_num = end_file_num;
		histories_to_process = 0;
	} 
}



bool is_bad_angle( const int angle )
{
	static const int bad_angles[] = {0, 80, 84, 88, 92, 96, 100, 180, 260, 264, 268, 272, 276};
	return std::binary_search( bad_angles, bad_angles + sizeof(bad_angles) / sizeof(int), angle );
}
int calculate_x_voxel(const float x, const int x_voxels, const float voxel_width )
{
	
	return int( ( 200 / 2.0 ) + ( x / ( ( 2 * 8.0 ) / 200 ) ) );
}
int calculate_y_voxel(const float y, const int y_voxels, const float voxel_height )
{
	
	return int( ( 200 / 2.0) - ( y / ( ( 2 * 8.0 ) / 200 ) ) );
}
int calculate_slice(const float z, const int z_voxels, const float voxel_thickness )
{
	
	return  int( ( int( 6.0 / 0.25 ) / 2.0 ) - ( z / ( ( int( 6.0 / 0.25 ) * 0.25 ) / int( 6.0 / 0.25 ) ) ) );
}
int positions_2_voxels(const double x, const double y, const double z, int& voxel_x, int& voxel_y, int& voxel_z )
{
	voxel_x = ( x + 8.0 ) / ( ( 2 * 8.0 ) / 200 );				
	voxel_y = ( 8.0 - y ) / ( ( 2 * 8.0 ) / 200 );
	voxel_z = ( 6.0/2 - z ) /( ( int( 6.0 / 0.25 ) * 0.25 ) / int( 6.0 / 0.25 ) );
	return voxel_x + voxel_y * 200 + voxel_z * 200 * 200;
}
__declspec(__device__) int position_2_voxel_GPU( double x, double y, double z )
{
	int voxel_x = ( x + 8.0 ) / ( ( 2 * 8.0 ) / 200 );
	int voxel_y = ( 8.0 - y ) / ( ( 2 * 8.0 ) / 200 );
	int voxel_z = ( 6.0/2 - z ) /( ( int( 6.0 / 0.25 ) * 0.25 ) / int( 6.0 / 0.25 ) );
	return voxel_x + voxel_y * 200 + voxel_z * 200 * 200;
}
void bin_2_indexes( int& bin_num, int& t_bin, int& v_bin, int& angular_bin )
{
	
	while( bin_num - int( 360 / 6.0 + 0.5 ) * int( 35.0 / 0.1 + 0.5 ) > 0 )
	{
		bin_num -= int( 360 / 6.0 + 0.5 ) * int( 35.0 / 0.1 + 0.5 );
		v_bin++;
	}
	
	while( bin_num - int( 35.0 / 0.1 + 0.5 ) > 0 )
	{
		bin_num -= int( 35.0 / 0.1 + 0.5 );
		angular_bin++;
	}
	
	t_bin = bin_num;
}
void exit_program_if( bool early_exit)
{
	if( early_exit )
	{
		char user_response[20];
		stop_execution_timing();
		puts("Hit enter to stop...");
		fgets(user_response, sizeof(user_response), (&__iob_func()[0]));
		exit(1);
	}
}
void start_execution_timing()
{
	start_time = clock();
}
void stop_execution_timing()
{
	end_time = clock();
	execution_time = (end_time - start_time) / 1000;
	printf( "Total execution time : %3f\n", double(execution_time) );		
}
void pause_execution()
{
	char user_response[20];
	fgets(user_response, sizeof(user_response), (&__iob_func()[0]));
}



int my_divide( int x, int y) {return x*y;}
void test_func()
{
	int x[] = {2,3,4,6,7};
	test_func_3();
	
	

	int y[20];
	int index = 0;
	for( int i = 0; i < 20; i++ )
		y[index++] = i;
	for( int i = 0; i < 20; i++ )
		std::cout << y[i] << std::endl;

	
	
	
  

	
	
	
	
	
	

	
	
	


	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	

	
	
	
	
	
	
	
}
void test_func2( std::vector<int>& bin_numbers, std::vector<float>& data )
{
	int angular_bin = 8;
	int v_bin = 14;
	int bin_num = angular_bin * int( 35.0 / 0.1 + 0.5 ) + v_bin * int( 360 / 6.0 + 0.5 ) * int( 35.0 / 0.1 + 0.5 );
	bin_numbers.push_back(bin_num);
	bin_numbers.push_back(bin_num);
	bin_numbers.push_back(bin_num);
	bin_numbers.push_back(bin_num+1);
	bin_numbers.push_back(bin_num+1);
	bin_numbers.push_back(bin_num+3);
	data.push_back(1.1);
	data.push_back(1.2);
	data.push_back(1.3);
	data.push_back(0.1);
	data.push_back(0.1);
	data.push_back(5.4);

	v_bin = 15;
	bin_num = angular_bin * int( 35.0 / 0.1 + 0.5 ) + v_bin * int( 360 / 6.0 + 0.5 ) * int( 35.0 / 0.1 + 0.5 );
	bin_numbers.push_back(bin_num);
	bin_numbers.push_back(bin_num);
	bin_numbers.push_back(bin_num);
	bin_numbers.push_back(bin_num+1);
	bin_numbers.push_back(bin_num+1);
	bin_numbers.push_back(bin_num+3);
	data.push_back(1.1);
	data.push_back(1.2);
	data.push_back(1.3);
	data.push_back(0.1);
	data.push_back(0.1);
	data.push_back(5.4);

	angular_bin = 30;
	v_bin = 14;
	bin_num = angular_bin * int( 35.0 / 0.1 + 0.5 ) + v_bin * int( 360 / 6.0 + 0.5 ) * int( 35.0 / 0.1 + 0.5 );
	bin_numbers.push_back(bin_num);
	bin_numbers.push_back(bin_num);
	bin_numbers.push_back(bin_num);
	bin_numbers.push_back(bin_num+1);
	bin_numbers.push_back(bin_num+1);
	bin_numbers.push_back(bin_num+3);
	data.push_back(1.1);
	data.push_back(1.2);
	data.push_back(1.3);
	data.push_back(0.1);
	data.push_back(0.1);
	data.push_back(5.4);

	v_bin = 16;
	bin_num = angular_bin * int( 35.0 / 0.1 + 0.5 ) + v_bin * int( 360 / 6.0 + 0.5 ) * int( 35.0 / 0.1 + 0.5 );
	bin_numbers.push_back(bin_num);
	bin_numbers.push_back(bin_num);
	bin_numbers.push_back(bin_num);
	bin_numbers.push_back(bin_num+1);
	bin_numbers.push_back(bin_num+1);
	bin_numbers.push_back(bin_num+3);
	data.push_back(1.1);
	data.push_back(1.2);
	data.push_back(1.3);
	data.push_back(0.1);
	data.push_back(0.1);
	data.push_back(5.4);
}
__declspec(__device__) void test_func_device( int& x, int& y, int& z )
{
	x = 2;
	y = 3;
	z = 4;
}
__declspec(__global__) void test_func_GPU( int* a)
{
	
	double delta_yx = 1.0/1.0;
	double x_to_go = 0.024;
	double y_to_go = 0.015;
	double y_to_go2 = y_to_go;
	double y_move = delta_yx * x_to_go;
	if( -1 )
		printf("-1");
	if( 1 )
		printf("1");
	if( 0 )
		printf("0");
	y_to_go -= !sin(delta_yx)*y_move;

	y_to_go2 -= !sin(delta_yx)*delta_yx * x_to_go;

	printf(" delta_yx = %8f y_move = %8f y_to_go = %8f y_to_go2 = %8f\n", delta_yx, y_move, y_to_go, y_to_go2 );
	double y = 1.36;
	
	
	
	
	
	
	
	
	
	float x = 1.0;
	y = 1.0;
	float z = abs(2.0) / abs( x - y );
	float z2 = abs(-2.0) / abs( x - y );
	float z3 = z*x;
	bool less = z < z2;
	bool less2 = x < z;
	bool less3 = x < z2;
	if( less )
		a[0] = 1;
	if( less2 )
		a[1] = 1;
	if( less3 )
		a[2] = 1;

	printf("%3f %3f %3f %d %d %d\n", z, z2, z3, less, less2, less3);
	
	
	
	
	
	
	
}

